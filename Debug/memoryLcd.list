
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000266e8  08013758  08013758  00023758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039e40  08039e40  000504f8  2**0
                  CONTENTS
  4 .ARM          00000008  08039e40  08039e40  00049e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039e48  08039e48  000504f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039e48  08039e48  00049e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039e4c  08039e4c  00049e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  08039e50  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f8  2**0
                  CONTENTS
 10 .bss          000035c0  200004f8  200004f8  000504f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003ab8  20003ab8  000504f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002017a  00000000  00000000  00050528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000575b  00000000  00000000  000706a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00075e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f0  00000000  00000000  00077728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a4d8  00000000  00000000  00078e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025cd8  00000000  00000000  000a32f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6d40  00000000  00000000  000c8fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001afd08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008478  00000000  00000000  001afd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001b81d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001b829c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801373c 	.word	0x0801373c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004fc 	.word	0x200004fc
 80001ec:	0801373c 	.word	0x0801373c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f006 fdcd 	bl	8007b40 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000644 	.word	0x20000644

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f006 fc87 	bl	800794c <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000644 	.word	0x20000644

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f006 fd56 	bl	8007b40 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000644 	.word	0x20000644

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f842 	bl	800c1c8 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f006 fbdb 	bl	800794c <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f005 feb0 	bl	8006efc <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f006 fcc6 	bl	8007b40 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000644 	.word	0x20000644

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f006 fb46 	bl	800794c <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fe1a 	bl	8006efc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f006 fc2f 	bl	8007b40 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08013758 	.word	0x08013758
 800130c:	20000644 	.word	0x20000644

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f00f fdb6 	bl	8011058 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f00f fd4b 	bl	8011058 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f005 fec0 	bl	80075e4 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	4b59      	ldr	r3, [pc, #356]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b52      	ldr	r3, [pc, #328]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <MX_GPIO_Init+0x19c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2140      	movs	r1, #64	; 0x40
 8001aea:	4830      	ldr	r0, [pc, #192]	; (8001bac <MX_GPIO_Init+0x1a0>)
 8001aec:	f005 fd92 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f244 0181 	movw	r1, #16513	; 0x4081
 8001af6:	482e      	ldr	r0, [pc, #184]	; (8001bb0 <MX_GPIO_Init+0x1a4>)
 8001af8:	f005 fd8c 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	482c      	ldr	r0, [pc, #176]	; (8001bb4 <MX_GPIO_Init+0x1a8>)
 8001b02:	f005 fd87 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b06:	2340      	movs	r3, #64	; 0x40
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4823      	ldr	r0, [pc, #140]	; (8001bac <MX_GPIO_Init+0x1a0>)
 8001b1e:	f005 fbb5 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b22:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <MX_GPIO_Init+0x1a4>)
 8001b3c:	f005 fba6 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b40:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b44:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b46:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_GPIO_Init+0x1ac>)
 8001b58:	f005 fb98 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <MX_GPIO_Init+0x1a8>)
 8001b74:	f005 fb8a 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <MX_GPIO_Init+0x1a8>)
 8001b8c:	f005 fb7e 	bl	800728c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2028      	movs	r0, #40	; 0x28
 8001b96:	f005 fab0 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b9a:	2028      	movs	r0, #40	; 0x28
 8001b9c:	f005 fac9 	bl	8007132 <HAL_NVIC_EnableIRQ>

}
 8001ba0:	bf00      	nop
 8001ba2:	3730      	adds	r7, #48	; 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40021000 	.word	0x40021000

08001bbc <getDataFromUart>:
//};

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	1d19      	adds	r1, r3, #4
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <getDataFromUart+0x24>)
 8001bd2:	f009 fa72 	bl	800b0ba <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200039f0 	.word	0x200039f0

08001be4 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001bf0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001bf4:	6018      	str	r0, [r3, #0]
 8001bf6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001bfa:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001bfe:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001c00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c04:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c08:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c0c:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	3304      	adds	r3, #4
 8001c1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00c f9cb 	bl	800dfbc <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c2a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <initGps+0x84>)
 8001c30:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c42:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f00a faac 	bl	800c1ac <memcpy>
}
 8001c54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c58:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	08001bbd 	.word	0x08001bbd

08001c6c <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	if(position>0){
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <prevPos+0x2c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <prevPos+0x1a>
		position--;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <prevPos+0x2c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <prevPos+0x2c>)
 8001c82:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001c84:	e002      	b.n	8001c8c <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <prevPos+0x2c>)
 8001c88:	2205      	movs	r2, #5
 8001c8a:	701a      	strb	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000640 	.word	0x20000640

08001c9c <nextPos>:

void nextPos(void){
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <nextPos+0x2c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d806      	bhi.n	8001cb6 <nextPos+0x1a>
		position++;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <nextPos+0x2c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <nextPos+0x2c>)
 8001cb2:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001cb4:	e002      	b.n	8001cbc <nextPos+0x20>
		position=0;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <nextPos+0x2c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000640 	.word	0x20000640

08001ccc <nextScreen>:

void nextScreen(void){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	nextPos();
 8001cd0:	f7ff ffe4 	bl	8001c9c <nextPos>
	applySelectedScreen();
 8001cd4:	f000 f82c 	bl	8001d30 <applySelectedScreen>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <prevScreen>:
void prevScreen(void){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	prevPos();
 8001ce0:	f7ff ffc4 	bl	8001c6c <prevPos>
	applySelectedScreen();
 8001ce4:	f000 f824 	bl	8001d30 <applySelectedScreen>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <resetPos>:
void resetPos(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	position=0;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <resetPos+0x14>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001cf6:	f000 f81b 	bl	8001d30 <applySelectedScreen>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000640 	.word	0x20000640

08001d04 <guiApplyView>:

void guiApplyView(struct Module *module){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <guiApplyView+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <guiApplyView+0x28>)
 8001d1a:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001d1c:	f000 f830 	bl	8001d80 <selectScreen>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000013c 	.word	0x2000013c
 8001d2c:	20000138 	.word	0x20000138

08001d30 <applySelectedScreen>:

void applySelectedScreen(void){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <applySelectedScreen+0x40>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <applySelectedScreen+0x44>)
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	3320      	adds	r3, #32
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <applySelectedScreen+0x48>)
 8001d4c:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <applySelectedScreen+0x40>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <applySelectedScreen+0x44>)
 8001d56:	460b      	mov	r3, r1
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3324      	adds	r3, #36	; 0x24
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <applySelectedScreen+0x4c>)
 8001d66:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001d68:	f000 f80a 	bl	8001d80 <selectScreen>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000640 	.word	0x20000640
 8001d74:	20000048 	.word	0x20000048
 8001d78:	2000013c 	.word	0x2000013c
 8001d7c:	20000138 	.word	0x20000138

08001d80 <selectScreen>:

void selectScreen(void){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8001d84:	f7ff fd2e 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <selectScreen+0x1c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <selectScreen+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <selectScreen+0x24>)
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000641 	.word	0x20000641
 8001da0:	20000138 	.word	0x20000138
 8001da4:	20000140 	.word	0x20000140

08001da8 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <showGui+0x30>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <showGui+0x18>
		moduleSetupPtr();
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <showGui+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4798      	blx	r3
		isModuleSet = 1;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <showGui+0x30>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <showGui+0x38>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <showGui+0x26>
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <showGui+0x38>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4798      	blx	r3
	lcdRefresh();
 8001dce:	f000 ff41 	bl	8002c54 <lcdRefresh>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000641 	.word	0x20000641
 8001ddc:	2000013c 	.word	0x2000013c
 8001de0:	20000140 	.word	0x20000140

08001de4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <MX_I2C1_Init+0x78>)
 8001dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <MX_I2C1_Init+0x7c>)
 8001df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e22:	f005 fc4f 	bl	80076c4 <HAL_I2C_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e2c:	f001 f93e 	bl	80030ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e34:	f006 fc05 	bl	8008642 <HAL_I2CEx_ConfigAnalogFilter>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e3e:	f001 f935 	bl	80030ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_I2C1_Init+0x74>)
 8001e46:	f006 fc38 	bl	80086ba <HAL_I2CEx_ConfigDigitalFilter>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e50:	f001 f92c 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000644 	.word	0x20000644
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	000186a0 	.word	0x000186a0

08001e64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_I2C_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <HAL_I2C_MspInit+0x8c>)
 8001ec0:	f005 f9e4 	bl	800728c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8001efe:	2307      	movs	r3, #7
 8001f00:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8001f0e:	e010      	b.n	8001f32 <reverse_uint8+0x3e>
		result = result << 1;
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	7b7b      	ldrb	r3, [r7, #13]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	73bb      	strb	r3, [r7, #14]
		times--;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1eb      	bne.n	8001f10 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	updateSetting(0);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f824 	bl	8001f9c <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	e014      	b.n	8001f84 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80bb      	strh	r3, [r7, #4]
 8001f5e:	e00b      	b.n	8001f78 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2232      	movs	r2, #50	; 0x32
 8001f64:	fb03 f202 	mul.w	r2, r3, r2
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <lcdClearBuffer+0x50>)
 8001f6e:	21ff      	movs	r1, #255	; 0xff
 8001f70:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	3301      	adds	r3, #1
 8001f76:	80bb      	strh	r3, [r7, #4]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	2b31      	cmp	r3, #49	; 0x31
 8001f7c:	d9f0      	bls.n	8001f60 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	3301      	adds	r3, #1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2bef      	cmp	r3, #239	; 0xef
 8001f88:	d9e7      	bls.n	8001f5a <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 f806 	bl	8001f9c <updateSetting>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000069c 	.word	0x2000069c

08001f9c <updateSetting>:

void updateSetting(uint8_t state){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <updateSetting+0x1c>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	7013      	strb	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20000144 	.word	0x20000144

08001fbc <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	717b      	strb	r3, [r7, #5]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	793a      	ldrb	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d304      	bcc.n	8001fe4 <lcdPutChar+0x28>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	799b      	ldrb	r3, [r3, #6]
 8001fde:	793a      	ldrb	r2, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d902      	bls.n	8001fea <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	79db      	ldrb	r3, [r3, #7]
 8001fe8:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	885b      	ldrh	r3, [r3, #2]
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	fb92 f3f3 	sdiv	r3, r2, r3
 800200a:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	e09b      	b.n	800214a <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002012:	797a      	ldrb	r2, [r7, #5]
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	0091      	lsls	r1, r2, #2
 8002024:	461a      	mov	r2, r3
 8002026:	460b      	mov	r3, r1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	7952      	ldrb	r2, [r2, #5]
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	8852      	ldrh	r2, [r2, #2]
 8002042:	fb03 f202 	mul.w	r2, r3, r2
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	7cb9      	ldrb	r1, [r7, #18]
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	3308      	adds	r3, #8
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	7d3b      	ldrb	r3, [r7, #20]
 8002060:	fa42 f303 	asr.w	r3, r2, r3
 8002064:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002066:	8a3b      	ldrh	r3, [r7, #16]
 8002068:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <lcdPutChar+0x1a8>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	b25a      	sxtb	r2, r3
 800206e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002072:	43db      	mvns	r3, r3
 8002074:	b25b      	sxtb	r3, r3
 8002076:	4013      	ands	r3, r2
 8002078:	b25a      	sxtb	r2, r3
 800207a:	8a3b      	ldrh	r3, [r7, #16]
 800207c:	b2d1      	uxtb	r1, r2
 800207e:	4a39      	ldr	r2, [pc, #228]	; (8002164 <lcdPutChar+0x1a8>)
 8002080:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	3308      	adds	r3, #8
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	7d3b      	ldrb	r3, [r7, #20]
 8002090:	f1c3 0308 	rsb	r3, r3, #8
 8002094:	21ff      	movs	r1, #255	; 0xff
 8002096:	fa41 f303 	asr.w	r3, r1, r3
 800209a:	b25b      	sxtb	r3, r3
 800209c:	4013      	ands	r3, r2
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020a2:	2301      	movs	r3, #1
 80020a4:	757b      	strb	r3, [r7, #21]
 80020a6:	e029      	b.n	80020fc <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80020a8:	7d7a      	ldrb	r2, [r7, #21]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	7a1b      	ldrb	r3, [r3, #8]
 80020b4:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80020b6:	8a3a      	ldrh	r2, [r7, #16]
 80020b8:	7d7b      	ldrb	r3, [r7, #21]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <lcdPutChar+0x1a8>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	7db9      	ldrb	r1, [r7, #22]
 80020c4:	7d3b      	ldrb	r3, [r7, #20]
 80020c6:	f1c3 0308 	rsb	r3, r3, #8
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	b259      	sxtb	r1, r3
 80020d0:	7af8      	ldrb	r0, [r7, #11]
 80020d2:	7d3b      	ldrb	r3, [r7, #20]
 80020d4:	fa40 f303 	asr.w	r3, r0, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	430b      	orrs	r3, r1
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	4013      	ands	r3, r2
 80020e4:	b259      	sxtb	r1, r3
 80020e6:	8a3a      	ldrh	r2, [r7, #16]
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2c9      	uxtb	r1, r1
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <lcdPutChar+0x1a8>)
 80020f0:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020f6:	7d7b      	ldrb	r3, [r7, #21]
 80020f8:	3301      	adds	r3, #1
 80020fa:	757b      	strb	r3, [r7, #21]
 80020fc:	7d7a      	ldrb	r2, [r7, #21]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	3307      	adds	r3, #7
 8002104:	10db      	asrs	r3, r3, #3
 8002106:	429a      	cmp	r2, r3
 8002108:	dbce      	blt.n	80020a8 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 800210a:	8a3a      	ldrh	r2, [r7, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3307      	adds	r3, #7
 8002112:	10db      	asrs	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <lcdPutChar+0x1a8>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	b25a      	sxtb	r2, r3
 800211c:	7db9      	ldrb	r1, [r7, #22]
 800211e:	7d3b      	ldrb	r3, [r7, #20]
 8002120:	f1c3 0308 	rsb	r3, r3, #8
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	b25b      	sxtb	r3, r3
 800212e:	4013      	ands	r3, r2
 8002130:	b259      	sxtb	r1, r3
 8002132:	8a3a      	ldrh	r2, [r7, #16]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3307      	adds	r3, #7
 800213a:	10db      	asrs	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	b2c9      	uxtb	r1, r1
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <lcdPutChar+0x1a8>)
 8002142:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	3301      	adds	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	7dfa      	ldrb	r2, [r7, #23]
 8002150:	429a      	cmp	r2, r3
 8002152:	f4ff af5e 	bcc.w	8002012 <lcdPutChar+0x56>
	}
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	2000069c 	.word	0x2000069c

08002168 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4603      	mov	r3, r0
 8002174:	81fb      	strh	r3, [r7, #14]
 8002176:	460b      	mov	r3, r1
 8002178:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
 800217e:	e015      	b.n	80021ac <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	b29b      	uxth	r3, r3
 800218a:	fb12 f303 	smulbb	r3, r2, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	4413      	add	r3, r2
 8002194:	b298      	uxth	r0, r3
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4413      	add	r3, r2
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	7b79      	ldrb	r1, [r7, #13]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f7ff ff0b 	bl	8001fbc <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	3301      	adds	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
 80021ac:	7dfc      	ldrb	r4, [r7, #23]
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	f7fe f81e 	bl	80001f0 <strlen>
 80021b4:	4603      	mov	r3, r0
 80021b6:	429c      	cmp	r4, r3
 80021b8:	d3e2      	bcc.n	8002180 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80021c4:	b490      	push	{r4, r7}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4604      	mov	r4, r0
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	4603      	mov	r3, r0
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
 80021de:	4613      	mov	r3, r2
 80021e0:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e04e      	b.n	8002298 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2232      	movs	r2, #50	; 0x32
 80021fe:	fb03 f202 	mul.w	r2, r3, r2
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	4413      	add	r3, r2
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <lcdVLine+0xe8>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 800220c:	78bb      	ldrb	r3, [r7, #2]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d01e      	beq.n	8002250 <lcdVLine+0x8c>
 8002212:	2b02      	cmp	r3, #2
 8002214:	dc27      	bgt.n	8002266 <lcdVLine+0xa2>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <lcdVLine+0x5c>
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00b      	beq.n	8002236 <lcdVLine+0x72>
 800221e:	e022      	b.n	8002266 <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002220:	7b3b      	ldrb	r3, [r7, #12]
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	fa42 f303 	asr.w	r3, r2, r3
 8002228:	b25a      	sxtb	r2, r3
 800222a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800222e:	4313      	orrs	r3, r2
 8002230:	b25b      	sxtb	r3, r3
 8002232:	73bb      	strb	r3, [r7, #14]
				break;
 8002234:	e024      	b.n	8002280 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002236:	7b3b      	ldrb	r3, [r7, #12]
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	fa42 f303 	asr.w	r3, r2, r3
 800223e:	b25b      	sxtb	r3, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	b25a      	sxtb	r2, r3
 8002244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002248:	4013      	ands	r3, r2
 800224a:	b25b      	sxtb	r3, r3
 800224c:	73bb      	strb	r3, [r7, #14]
				break;
 800224e:	e017      	b.n	8002280 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002250:	7b3b      	ldrb	r3, [r7, #12]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	fa42 f303 	asr.w	r3, r2, r3
 8002258:	b25a      	sxtb	r2, r3
 800225a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800225e:	4053      	eors	r3, r2
 8002260:	b25b      	sxtb	r3, r3
 8002262:	73bb      	strb	r3, [r7, #14]
				break;
 8002264:	e00c      	b.n	8002280 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 8002266:	7b3b      	ldrb	r3, [r7, #12]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	fa42 f303 	asr.w	r3, r2, r3
 800226e:	b25b      	sxtb	r3, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	b25a      	sxtb	r2, r3
 8002274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002278:	4013      	ands	r3, r2
 800227a:	b25b      	sxtb	r3, r3
 800227c:	73bb      	strb	r3, [r7, #14]
				break;
 800227e:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2232      	movs	r2, #50	; 0x32
 8002284:	fb03 f202 	mul.w	r2, r3, r2
 8002288:	7b7b      	ldrb	r3, [r7, #13]
 800228a:	4413      	add	r3, r2
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <lcdVLine+0xe8>)
 800228e:	7bba      	ldrb	r2, [r7, #14]
 8002290:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	429a      	cmp	r2, r3
 800229e:	d9ac      	bls.n	80021fa <lcdVLine+0x36>
	}
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc90      	pop	{r4, r7}
 80022aa:	4770      	bx	lr
 80022ac:	2000069c 	.word	0x2000069c

080022b0 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	4603      	mov	r3, r0
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80022ce:	23ff      	movs	r3, #255	; 0xff
 80022d0:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80022d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022d6:	2b14      	cmp	r3, #20
 80022d8:	f200 8208 	bhi.w	80026ec <lcdHLine2+0x43c>
 80022dc:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <lcdHLine2+0x34>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	08002339 	.word	0x08002339
 80022e8:	0800233f 	.word	0x0800233f
 80022ec:	08002345 	.word	0x08002345
 80022f0:	0800234b 	.word	0x0800234b
 80022f4:	08002363 	.word	0x08002363
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	08002393 	.word	0x08002393
 8002300:	080023dd 	.word	0x080023dd
 8002304:	08002421 	.word	0x08002421
 8002308:	08002465 	.word	0x08002465
 800230c:	080024a3 	.word	0x080024a3
 8002310:	080024c9 	.word	0x080024c9
 8002314:	080024f3 	.word	0x080024f3
 8002318:	08002529 	.word	0x08002529
 800231c:	08002541 	.word	0x08002541
 8002320:	08002567 	.word	0x08002567
 8002324:	0800259d 	.word	0x0800259d
 8002328:	080025d3 	.word	0x080025d3
 800232c:	08002615 	.word	0x08002615
 8002330:	0800266f 	.word	0x0800266f
 8002334:	080026ab 	.word	0x080026ab
		case 0:	// clear
			pattern = 0x00;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
			break;
 800233c:	e1ea      	b.n	8002714 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800233e:	23ff      	movs	r3, #255	; 0xff
 8002340:	75fb      	strb	r3, [r7, #23]
			break;
 8002342:	e1e7      	b.n	8002714 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002344:	2355      	movs	r3, #85	; 0x55
 8002346:	75fb      	strb	r3, [r7, #23]
			break;
 8002348:	e1e4      	b.n	8002714 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <lcdHLine2+0xac>
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800235a:	e1db      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0xFF;
 800235c:	23ff      	movs	r3, #255	; 0xff
 800235e:	75fb      	strb	r3, [r7, #23]
			break;
 8002360:	e1d8      	b.n	8002714 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <lcdHLine2+0xc4>
 800236e:	23aa      	movs	r3, #170	; 0xaa
 8002370:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002372:	e1cf      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002374:	2355      	movs	r3, #85	; 0x55
 8002376:	75fb      	strb	r3, [r7, #23]
			break;
 8002378:	e1cc      	b.n	8002714 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <lcdHLine2+0xdc>
 8002386:	2388      	movs	r3, #136	; 0x88
 8002388:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 800238a:	e1c3      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 800238c:	2322      	movs	r3, #34	; 0x22
 800238e:	75fb      	strb	r3, [r7, #23]
			break;
 8002390:	e1c0      	b.n	8002714 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <lcdHLine2+0xf4>
 800239e:	2388      	movs	r3, #136	; 0x88
 80023a0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80023a2:	e1a6      	b.n	80026f2 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <lcdHLine2+0x106>
 80023b0:	2344      	movs	r3, #68	; 0x44
 80023b2:	75fb      	strb	r3, [r7, #23]
			break;
 80023b4:	e19d      	b.n	80026f2 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d102      	bne.n	80023c8 <lcdHLine2+0x118>
 80023c2:	2322      	movs	r3, #34	; 0x22
 80023c4:	75fb      	strb	r3, [r7, #23]
			break;
 80023c6:	e194      	b.n	80026f2 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	f040 818e 	bne.w	80026f2 <lcdHLine2+0x442>
 80023d6:	2311      	movs	r3, #17
 80023d8:	75fb      	strb	r3, [r7, #23]
			break;
 80023da:	e18a      	b.n	80026f2 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <lcdHLine2+0x144>
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d102      	bne.n	80023fa <lcdHLine2+0x14a>
 80023f4:	23aa      	movs	r3, #170	; 0xaa
 80023f6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 80023f8:	e17d      	b.n	80026f6 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <lcdHLine2+0x15c>
 8002406:	2322      	movs	r3, #34	; 0x22
 8002408:	75fb      	strb	r3, [r7, #23]
			break;
 800240a:	e174      	b.n	80026f6 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b03      	cmp	r3, #3
 8002416:	f040 816e 	bne.w	80026f6 <lcdHLine2+0x446>
 800241a:	2388      	movs	r3, #136	; 0x88
 800241c:	75fb      	strb	r3, [r7, #23]
			break;
 800241e:	e16a      	b.n	80026f6 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d005      	beq.n	8002438 <lcdHLine2+0x188>
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d102      	bne.n	800243e <lcdHLine2+0x18e>
 8002438:	2355      	movs	r3, #85	; 0x55
 800243a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 800243c:	e15d      	b.n	80026fa <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <lcdHLine2+0x1a0>
 800244a:	2388      	movs	r3, #136	; 0x88
 800244c:	75fb      	strb	r3, [r7, #23]
			break;
 800244e:	e154      	b.n	80026fa <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	f040 814e 	bne.w	80026fa <lcdHLine2+0x44a>
 800245e:	2322      	movs	r3, #34	; 0x22
 8002460:	75fb      	strb	r3, [r7, #23]
			break;
 8002462:	e14a      	b.n	80026fa <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <lcdHLine2+0x1cc>
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <lcdHLine2+0x1d2>
 800247c:	23cc      	movs	r3, #204	; 0xcc
 800247e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002480:	e13d      	b.n	80026fe <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d006      	beq.n	800249c <lcdHLine2+0x1ec>
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b03      	cmp	r3, #3
 8002498:	f040 8131 	bne.w	80026fe <lcdHLine2+0x44e>
 800249c:	2333      	movs	r3, #51	; 0x33
 800249e:	75fb      	strb	r3, [r7, #23]
			break;
 80024a0:	e12d      	b.n	80026fe <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <lcdHLine2+0x204>
 80024ae:	2355      	movs	r3, #85	; 0x55
 80024b0:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80024b2:	e126      	b.n	8002702 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8120 	beq.w	8002702 <lcdHLine2+0x452>
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	75fb      	strb	r3, [r7, #23]
			break;
 80024c6:	e11c      	b.n	8002702 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <lcdHLine2+0x22a>
 80024d4:	23cc      	movs	r3, #204	; 0xcc
 80024d6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80024d8:	e11c      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <lcdHLine2+0x23c>
 80024e6:	2344      	movs	r3, #68	; 0x44
 80024e8:	75fb      	strb	r3, [r7, #23]
			break;
 80024ea:	e113      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x00;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
			break;
 80024f0:	e110      	b.n	8002714 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <lcdHLine2+0x254>
 80024fe:	23ee      	movs	r3, #238	; 0xee
 8002500:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002502:	e107      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d005      	beq.n	800251c <lcdHLine2+0x26c>
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d102      	bne.n	8002522 <lcdHLine2+0x272>
 800251c:	2322      	movs	r3, #34	; 0x22
 800251e:	75fb      	strb	r3, [r7, #23]
			break;
 8002520:	e0f8      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
			break;
 8002526:	e0f5      	b.n	8002714 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <lcdHLine2+0x28a>
 8002534:	23ff      	movs	r3, #255	; 0xff
 8002536:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002538:	e0ec      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800253a:	2388      	movs	r3, #136	; 0x88
 800253c:	75fb      	strb	r3, [r7, #23]
			break;
 800253e:	e0e9      	b.n	8002714 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <lcdHLine2+0x2a2>
 800254c:	23aa      	movs	r3, #170	; 0xaa
 800254e:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002550:	e0d9      	b.n	8002706 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80d3 	beq.w	8002706 <lcdHLine2+0x456>
 8002560:	2300      	movs	r3, #0
 8002562:	75fb      	strb	r3, [r7, #23]
			break;
 8002564:	e0cf      	b.n	8002706 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <lcdHLine2+0x2ce>
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d102      	bne.n	8002584 <lcdHLine2+0x2d4>
 800257e:	23aa      	movs	r3, #170	; 0xaa
 8002580:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002582:	e0c7      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d102      	bne.n	8002596 <lcdHLine2+0x2e6>
 8002590:	2344      	movs	r3, #68	; 0x44
 8002592:	75fb      	strb	r3, [r7, #23]
			break;
 8002594:	e0be      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
			break;
 800259a:	e0bb      	b.n	8002714 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <lcdHLine2+0x304>
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d102      	bne.n	80025ba <lcdHLine2+0x30a>
 80025b4:	23ee      	movs	r3, #238	; 0xee
 80025b6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80025b8:	e0ac      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <lcdHLine2+0x31c>
 80025c6:	23aa      	movs	r3, #170	; 0xaa
 80025c8:	75fb      	strb	r3, [r7, #23]
			break;
 80025ca:	e0a3      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x00;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
			break;
 80025d0:	e0a0      	b.n	8002714 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <lcdHLine2+0x33a>
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d102      	bne.n	80025f0 <lcdHLine2+0x340>
 80025ea:	2344      	movs	r3, #68	; 0x44
 80025ec:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80025ee:	e08c      	b.n	800270a <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <lcdHLine2+0x352>
 80025fc:	23aa      	movs	r3, #170	; 0xaa
 80025fe:	75fb      	strb	r3, [r7, #23]
			break;
 8002600:	e083      	b.n	800270a <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b03      	cmp	r3, #3
 800260c:	d17d      	bne.n	800270a <lcdHLine2+0x45a>
 800260e:	2311      	movs	r3, #17
 8002610:	75fb      	strb	r3, [r7, #23]
			break;
 8002612:	e07a      	b.n	800270a <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	4baf      	ldr	r3, [pc, #700]	; (80028d4 <lcdHLine2+0x624>)
 8002618:	fba3 1302 	umull	r1, r3, r3, r2
 800261c:	0859      	lsrs	r1, r3, #1
 800261e:	460b      	mov	r3, r1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	440b      	add	r3, r1
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <lcdHLine2+0x382>
 800262c:	2355      	movs	r3, #85	; 0x55
 800262e:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002630:	e06d      	b.n	800270e <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	4ba7      	ldr	r3, [pc, #668]	; (80028d4 <lcdHLine2+0x624>)
 8002636:	fba3 1302 	umull	r1, r3, r3, r2
 800263a:	0859      	lsrs	r1, r3, #1
 800263c:	460b      	mov	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	440b      	add	r3, r1
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <lcdHLine2+0x3a0>
 800264a:	23aa      	movs	r3, #170	; 0xaa
 800264c:	75fb      	strb	r3, [r7, #23]
			break;
 800264e:	e05e      	b.n	800270e <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <lcdHLine2+0x624>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	0859      	lsrs	r1, r3, #1
 800265a:	460b      	mov	r3, r1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	440b      	add	r3, r1
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d152      	bne.n	800270e <lcdHLine2+0x45e>
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
			break;
 800266c:	e04f      	b.n	800270e <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <lcdHLine2+0x3d0>
 800267a:	2322      	movs	r3, #34	; 0x22
 800267c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 800267e:	e049      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <lcdHLine2+0x3e2>
 800268c:	2355      	movs	r3, #85	; 0x55
 800268e:	75fb      	strb	r3, [r7, #23]
			break;
 8002690:	e040      	b.n	8002714 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d102      	bne.n	80026a4 <lcdHLine2+0x3f4>
 800269e:	2388      	movs	r3, #136	; 0x88
 80026a0:	75fb      	strb	r3, [r7, #23]
			break;
 80026a2:	e037      	b.n	8002714 <lcdHLine2+0x464>
			else pattern = 0x00;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
			break;
 80026a8:	e034      	b.n	8002714 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d005      	beq.n	80026c2 <lcdHLine2+0x412>
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d102      	bne.n	80026c8 <lcdHLine2+0x418>
 80026c2:	2388      	movs	r3, #136	; 0x88
 80026c4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 80026c6:	e024      	b.n	8002712 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <lcdHLine2+0x42a>
 80026d4:	2377      	movs	r3, #119	; 0x77
 80026d6:	75fb      	strb	r3, [r7, #23]
			break;
 80026d8:	e01b      	b.n	8002712 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d115      	bne.n	8002712 <lcdHLine2+0x462>
 80026e6:	23aa      	movs	r3, #170	; 0xaa
 80026e8:	75fb      	strb	r3, [r7, #23]
			break;
 80026ea:	e012      	b.n	8002712 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
			break;
 80026f0:	e010      	b.n	8002714 <lcdHLine2+0x464>
			break;
 80026f2:	bf00      	nop
 80026f4:	e00e      	b.n	8002714 <lcdHLine2+0x464>
			break;
 80026f6:	bf00      	nop
 80026f8:	e00c      	b.n	8002714 <lcdHLine2+0x464>
			break;
 80026fa:	bf00      	nop
 80026fc:	e00a      	b.n	8002714 <lcdHLine2+0x464>
			break;
 80026fe:	bf00      	nop
 8002700:	e008      	b.n	8002714 <lcdHLine2+0x464>
			break;
 8002702:	bf00      	nop
 8002704:	e006      	b.n	8002714 <lcdHLine2+0x464>
			break;
 8002706:	bf00      	nop
 8002708:	e004      	b.n	8002714 <lcdHLine2+0x464>
			break;
 800270a:	bf00      	nop
 800270c:	e002      	b.n	8002714 <lcdHLine2+0x464>
			break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <lcdHLine2+0x464>
			break;
 8002712:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	b29b      	uxth	r3, r3
 800271a:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8002726:	88bb      	ldrh	r3, [r7, #4]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	b29b      	uxth	r3, r3
 800272c:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800272e:	88bb      	ldrh	r3, [r7, #4]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	2232      	movs	r2, #50	; 0x32
 800273c:	fb03 f202 	mul.w	r2, r3, r2
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	4413      	add	r3, r2
 8002744:	4a64      	ldr	r2, [pc, #400]	; (80028d8 <lcdHLine2+0x628>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	2232      	movs	r2, #50	; 0x32
 800274e:	fb03 f202 	mul.w	r2, r3, r2
 8002752:	7b7b      	ldrb	r3, [r7, #13]
 8002754:	4413      	add	r3, r2
 8002756:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <lcdHLine2+0x628>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 800275c:	23ff      	movs	r3, #255	; 0xff
 800275e:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002760:	7bbb      	ldrb	r3, [r7, #14]
 8002762:	f1c3 0208 	rsb	r2, r3, #8
 8002766:	88b9      	ldrh	r1, [r7, #4]
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	1acb      	subs	r3, r1, r3
 800276c:	3301      	adds	r3, #1
 800276e:	429a      	cmp	r2, r3
 8002770:	dd11      	ble.n	8002796 <lcdHLine2+0x4e6>
 8002772:	88ba      	ldrh	r2, [r7, #4]
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	3301      	adds	r3, #1
 800277a:	22ff      	movs	r2, #255	; 0xff
 800277c:	fa42 f303 	asr.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	fa42 f303 	asr.w	r3, r2, r3
 8002788:	b25a      	sxtb	r2, r3
 800278a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800278e:	4013      	ands	r3, r2
 8002790:	b25b      	sxtb	r3, r3
 8002792:	753b      	strb	r3, [r7, #20]
 8002794:	e001      	b.n	800279a <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	753b      	strb	r3, [r7, #20]
		switch(mode){
 800279a:	78bb      	ldrb	r3, [r7, #2]
 800279c:	2b03      	cmp	r3, #3
 800279e:	f200 8130 	bhi.w	8002a02 <lcdHLine2+0x752>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <lcdHLine2+0x4f8>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	0800283d 	.word	0x0800283d
 80027b0:	080028dd 	.word	0x080028dd
 80027b4:	08002961 	.word	0x08002961
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	fa42 f303 	asr.w	r3, r2, r3
 80027c0:	b25a      	sxtb	r2, r3
 80027c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80027d4:	7b3b      	ldrb	r3, [r7, #12]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	b25a      	sxtb	r2, r3
 80027e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b25a      	sxtb	r2, r3
 80027ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80027f4:	2301      	movs	r3, #1
 80027f6:	74fb      	strb	r3, [r7, #19]
 80027f8:	e019      	b.n	800282e <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	2232      	movs	r2, #50	; 0x32
 80027fe:	fb03 f202 	mul.w	r2, r3, r2
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	441a      	add	r2, r3
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	4413      	add	r3, r2
 800280a:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <lcdHLine2+0x628>)
 800280c:	5cd1      	ldrb	r1, [r2, r3]
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	2232      	movs	r2, #50	; 0x32
 8002812:	fb03 f202 	mul.w	r2, r3, r2
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	441a      	add	r2, r3
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	4413      	add	r3, r2
 800281e:	7dfa      	ldrb	r2, [r7, #23]
 8002820:	430a      	orrs	r2, r1
 8002822:	b2d1      	uxtb	r1, r2
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <lcdHLine2+0x628>)
 8002826:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	3301      	adds	r3, #1
 800282c:	74fb      	strb	r3, [r7, #19]
 800282e:	7cfa      	ldrb	r2, [r7, #19]
 8002830:	7b79      	ldrb	r1, [r7, #13]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	1acb      	subs	r3, r1, r3
 8002836:	429a      	cmp	r2, r3
 8002838:	dbdf      	blt.n	80027fa <lcdHLine2+0x54a>
			}
			break;
 800283a:	e0e2      	b.n	8002a02 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	fa42 f303 	asr.w	r3, r2, r3
 8002844:	b25a      	sxtb	r2, r3
 8002846:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800284a:	4013      	ands	r3, r2
 800284c:	b25b      	sxtb	r3, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	b25a      	sxtb	r2, r3
 8002852:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002856:	4013      	ands	r3, r2
 8002858:	b25b      	sxtb	r3, r3
 800285a:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 800285c:	7b3b      	ldrb	r3, [r7, #12]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	b25a      	sxtb	r2, r3
 800286a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800286e:	4013      	ands	r3, r2
 8002870:	b25b      	sxtb	r3, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	b25a      	sxtb	r2, r3
 8002876:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800287a:	4013      	ands	r3, r2
 800287c:	b25b      	sxtb	r3, r3
 800287e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002880:	2301      	movs	r3, #1
 8002882:	74bb      	strb	r3, [r7, #18]
 8002884:	e01e      	b.n	80028c4 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	2232      	movs	r2, #50	; 0x32
 800288a:	fb03 f202 	mul.w	r2, r3, r2
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	441a      	add	r2, r3
 8002892:	7cbb      	ldrb	r3, [r7, #18]
 8002894:	4413      	add	r3, r2
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <lcdHLine2+0x628>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	b25a      	sxtb	r2, r3
 800289c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	b259      	sxtb	r1, r3
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	2232      	movs	r2, #50	; 0x32
 80028ac:	fb03 f202 	mul.w	r2, r3, r2
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	441a      	add	r2, r3
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2c9      	uxtb	r1, r1
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <lcdHLine2+0x628>)
 80028bc:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80028be:	7cbb      	ldrb	r3, [r7, #18]
 80028c0:	3301      	adds	r3, #1
 80028c2:	74bb      	strb	r3, [r7, #18]
 80028c4:	7cba      	ldrb	r2, [r7, #18]
 80028c6:	7b79      	ldrb	r1, [r7, #13]
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	1acb      	subs	r3, r1, r3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dbda      	blt.n	8002886 <lcdHLine2+0x5d6>
			}
			break;
 80028d0:	e097      	b.n	8002a02 <lcdHLine2+0x752>
 80028d2:	bf00      	nop
 80028d4:	aaaaaaab 	.word	0xaaaaaaab
 80028d8:	2000069c 	.word	0x2000069c
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	fa42 f303 	asr.w	r3, r2, r3
 80028e4:	b25a      	sxtb	r2, r3
 80028e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80028f2:	4053      	eors	r3, r2
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 80028f8:	7b3b      	ldrb	r3, [r7, #12]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	b25a      	sxtb	r2, r3
 8002906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800290a:	4013      	ands	r3, r2
 800290c:	b25a      	sxtb	r2, r3
 800290e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002912:	4053      	eors	r3, r2
 8002914:	b25b      	sxtb	r3, r3
 8002916:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002918:	2301      	movs	r3, #1
 800291a:	747b      	strb	r3, [r7, #17]
 800291c:	e019      	b.n	8002952 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	2232      	movs	r2, #50	; 0x32
 8002922:	fb03 f202 	mul.w	r2, r3, r2
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	441a      	add	r2, r3
 800292a:	7c7b      	ldrb	r3, [r7, #17]
 800292c:	4413      	add	r3, r2
 800292e:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <lcdHLine2+0x788>)
 8002930:	5cd1      	ldrb	r1, [r2, r3]
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	2232      	movs	r2, #50	; 0x32
 8002936:	fb03 f202 	mul.w	r2, r3, r2
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	441a      	add	r2, r3
 800293e:	7c7b      	ldrb	r3, [r7, #17]
 8002940:	4413      	add	r3, r2
 8002942:	7dfa      	ldrb	r2, [r7, #23]
 8002944:	404a      	eors	r2, r1
 8002946:	b2d1      	uxtb	r1, r2
 8002948:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <lcdHLine2+0x788>)
 800294a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800294c:	7c7b      	ldrb	r3, [r7, #17]
 800294e:	3301      	adds	r3, #1
 8002950:	747b      	strb	r3, [r7, #17]
 8002952:	7c7a      	ldrb	r2, [r7, #17]
 8002954:	7b79      	ldrb	r1, [r7, #13]
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	1acb      	subs	r3, r1, r3
 800295a:	429a      	cmp	r2, r3
 800295c:	dbdf      	blt.n	800291e <lcdHLine2+0x66e>
			}
			break;
 800295e:	e050      	b.n	8002a02 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	fa42 f303 	asr.w	r3, r2, r3
 8002968:	b25a      	sxtb	r2, r3
 800296a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800296e:	4013      	ands	r3, r2
 8002970:	b25a      	sxtb	r2, r3
 8002972:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002976:	43db      	mvns	r3, r3
 8002978:	b259      	sxtb	r1, r3
 800297a:	7bbb      	ldrb	r3, [r7, #14]
 800297c:	f1c3 0308 	rsb	r3, r3, #8
 8002980:	20ff      	movs	r0, #255	; 0xff
 8002982:	fa00 f303 	lsl.w	r3, r0, r3
 8002986:	b25b      	sxtb	r3, r3
 8002988:	400b      	ands	r3, r1
 800298a:	b25b      	sxtb	r3, r3
 800298c:	4313      	orrs	r3, r2
 800298e:	b25b      	sxtb	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8002996:	7b3b      	ldrb	r3, [r7, #12]
 8002998:	f1c3 0307 	rsb	r3, r3, #7
 800299c:	22ff      	movs	r2, #255	; 0xff
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	b25a      	sxtb	r2, r3
 80029a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b25a      	sxtb	r2, r3
 80029ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	b259      	sxtb	r1, r3
 80029b4:	7b3b      	ldrb	r3, [r7, #12]
 80029b6:	3301      	adds	r3, #1
 80029b8:	20ff      	movs	r0, #255	; 0xff
 80029ba:	fa40 f303 	asr.w	r3, r0, r3
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	400b      	ands	r3, r1
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80029ce:	2301      	movs	r3, #1
 80029d0:	743b      	strb	r3, [r7, #16]
 80029d2:	e00f      	b.n	80029f4 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2232      	movs	r2, #50	; 0x32
 80029d8:	fb03 f202 	mul.w	r2, r3, r2
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	441a      	add	r2, r3
 80029e0:	7c3b      	ldrb	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	7dfa      	ldrb	r2, [r7, #23]
 80029e6:	43d2      	mvns	r2, r2
 80029e8:	b2d1      	uxtb	r1, r2
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <lcdHLine2+0x788>)
 80029ec:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80029ee:	7c3b      	ldrb	r3, [r7, #16]
 80029f0:	3301      	adds	r3, #1
 80029f2:	743b      	strb	r3, [r7, #16]
 80029f4:	7c3a      	ldrb	r2, [r7, #16]
 80029f6:	7b79      	ldrb	r1, [r7, #13]
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	1acb      	subs	r3, r1, r3
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dbe9      	blt.n	80029d4 <lcdHLine2+0x724>
			}
			break;
 8002a00:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	2232      	movs	r2, #50	; 0x32
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <lcdHLine2+0x788>)
 8002a10:	7dba      	ldrb	r2, [r7, #22]
 8002a12:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002a14:	7b7a      	ldrb	r2, [r7, #13]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d908      	bls.n	8002a2e <lcdHLine2+0x77e>
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2232      	movs	r2, #50	; 0x32
 8002a20:	fb03 f202 	mul.w	r2, r3, r2
 8002a24:	7b7b      	ldrb	r3, [r7, #13]
 8002a26:	4413      	add	r3, r2
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <lcdHLine2+0x788>)
 8002a2a:	7d7a      	ldrb	r2, [r7, #21]
 8002a2c:	54ca      	strb	r2, [r1, r3]
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc90      	pop	{r4, r7}
 8002a36:	4770      	bx	lr
 8002a38:	2000069c 	.word	0x2000069c

08002a3c <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002a3c:	b490      	push	{r4, r7}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	80fb      	strh	r3, [r7, #6]
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80bb      	strh	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	4613      	mov	r3, r2
 8002a58:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8002a74:	88bb      	ldrh	r3, [r7, #4]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	2232      	movs	r2, #50	; 0x32
 8002a82:	fb03 f202 	mul.w	r2, r3, r2
 8002a86:	7c7b      	ldrb	r3, [r7, #17]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a71      	ldr	r2, [pc, #452]	; (8002c50 <lcdHLine+0x214>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	2232      	movs	r2, #50	; 0x32
 8002a94:	fb03 f202 	mul.w	r2, r3, r2
 8002a98:	7c7b      	ldrb	r3, [r7, #17]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a6b      	ldr	r2, [pc, #428]	; (8002c50 <lcdHLine+0x214>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8002aa6:	23ff      	movs	r3, #255	; 0xff
 8002aa8:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002aaa:	7c3b      	ldrb	r3, [r7, #16]
 8002aac:	f1c3 0208 	rsb	r2, r3, #8
 8002ab0:	88b9      	ldrh	r1, [r7, #4]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	1acb      	subs	r3, r1, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dd09      	ble.n	8002ad0 <lcdHLine+0x94>
 8002abc:	88ba      	ldrh	r2, [r7, #4]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	fa42 f303 	asr.w	r3, r2, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002ad0:	78bb      	ldrb	r3, [r7, #2]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d067      	beq.n	8002ba6 <lcdHLine+0x16a>
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f300 809e 	bgt.w	8002c18 <lcdHLine+0x1dc>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <lcdHLine+0xaa>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d02e      	beq.n	8002b42 <lcdHLine+0x106>
 8002ae4:	e098      	b.n	8002c18 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8002ae6:	7d7a      	ldrb	r2, [r7, #21]
 8002ae8:	7c3b      	ldrb	r3, [r7, #16]
 8002aea:	fa42 f303 	asr.w	r3, r2, r3
 8002aee:	b25a      	sxtb	r2, r3
 8002af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002afa:	7bbb      	ldrb	r3, [r7, #14]
 8002afc:	f1c3 0307 	rsb	r3, r3, #7
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	b25a      	sxtb	r2, r3
 8002b08:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b12:	2301      	movs	r3, #1
 8002b14:	753b      	strb	r3, [r7, #20]
 8002b16:	e00d      	b.n	8002b34 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2232      	movs	r2, #50	; 0x32
 8002b1c:	fb03 f202 	mul.w	r2, r3, r2
 8002b20:	7c7b      	ldrb	r3, [r7, #17]
 8002b22:	441a      	add	r2, r3
 8002b24:	7d3b      	ldrb	r3, [r7, #20]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <lcdHLine+0x214>)
 8002b2a:	21ff      	movs	r1, #255	; 0xff
 8002b2c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b2e:	7d3b      	ldrb	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	753b      	strb	r3, [r7, #20]
 8002b34:	7d3a      	ldrb	r2, [r7, #20]
 8002b36:	7bf9      	ldrb	r1, [r7, #15]
 8002b38:	7c7b      	ldrb	r3, [r7, #17]
 8002b3a:	1acb      	subs	r3, r1, r3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbeb      	blt.n	8002b18 <lcdHLine+0xdc>
		}
		break;
 8002b40:	e06a      	b.n	8002c18 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8002b42:	7d7a      	ldrb	r2, [r7, #21]
 8002b44:	7c3b      	ldrb	r3, [r7, #16]
 8002b46:	fa42 f303 	asr.w	r3, r2, r3
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	b25a      	sxtb	r2, r3
 8002b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	f1c3 0307 	rsb	r3, r3, #7
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	b25a      	sxtb	r2, r3
 8002b6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b76:	2301      	movs	r3, #1
 8002b78:	74fb      	strb	r3, [r7, #19]
 8002b7a:	e00d      	b.n	8002b98 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	2232      	movs	r2, #50	; 0x32
 8002b80:	fb03 f202 	mul.w	r2, r3, r2
 8002b84:	7c7b      	ldrb	r3, [r7, #17]
 8002b86:	441a      	add	r2, r3
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <lcdHLine+0x214>)
 8002b8e:	2100      	movs	r1, #0
 8002b90:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	3301      	adds	r3, #1
 8002b96:	74fb      	strb	r3, [r7, #19]
 8002b98:	7cfa      	ldrb	r2, [r7, #19]
 8002b9a:	7bf9      	ldrb	r1, [r7, #15]
 8002b9c:	7c7b      	ldrb	r3, [r7, #17]
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbeb      	blt.n	8002b7c <lcdHLine+0x140>
		}
		break;
 8002ba4:	e038      	b.n	8002c18 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8002ba6:	7d7a      	ldrb	r2, [r7, #21]
 8002ba8:	7c3b      	ldrb	r3, [r7, #16]
 8002baa:	fa42 f303 	asr.w	r3, r2, r3
 8002bae:	b25a      	sxtb	r2, r3
 8002bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bb4:	4053      	eors	r3, r2
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002bba:	7bbb      	ldrb	r3, [r7, #14]
 8002bbc:	f1c3 0307 	rsb	r3, r3, #7
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bcc:	4053      	eors	r3, r2
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	74bb      	strb	r3, [r7, #18]
 8002bd6:	e018      	b.n	8002c0a <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2232      	movs	r2, #50	; 0x32
 8002bdc:	fb03 f202 	mul.w	r2, r3, r2
 8002be0:	7c7b      	ldrb	r3, [r7, #17]
 8002be2:	441a      	add	r2, r3
 8002be4:	7cbb      	ldrb	r3, [r7, #18]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <lcdHLine+0x214>)
 8002bea:	5cd2      	ldrb	r2, [r2, r3]
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	2132      	movs	r1, #50	; 0x32
 8002bf0:	fb03 f101 	mul.w	r1, r3, r1
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
 8002bf6:	4419      	add	r1, r3
 8002bf8:	7cbb      	ldrb	r3, [r7, #18]
 8002bfa:	440b      	add	r3, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	b2d1      	uxtb	r1, r2
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <lcdHLine+0x214>)
 8002c02:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c04:	7cbb      	ldrb	r3, [r7, #18]
 8002c06:	3301      	adds	r3, #1
 8002c08:	74bb      	strb	r3, [r7, #18]
 8002c0a:	7cba      	ldrb	r2, [r7, #18]
 8002c0c:	7bf9      	ldrb	r1, [r7, #15]
 8002c0e:	7c7b      	ldrb	r3, [r7, #17]
 8002c10:	1acb      	subs	r3, r1, r3
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dbe0      	blt.n	8002bd8 <lcdHLine+0x19c>
		}
		break;
 8002c16:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2232      	movs	r2, #50	; 0x32
 8002c1c:	fb03 f202 	mul.w	r2, r3, r2
 8002c20:	7c7b      	ldrb	r3, [r7, #17]
 8002c22:	4413      	add	r3, r2
 8002c24:	490a      	ldr	r1, [pc, #40]	; (8002c50 <lcdHLine+0x214>)
 8002c26:	7dfa      	ldrb	r2, [r7, #23]
 8002c28:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	7c7b      	ldrb	r3, [r7, #17]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d908      	bls.n	8002c44 <lcdHLine+0x208>
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	2232      	movs	r2, #50	; 0x32
 8002c36:	fb03 f202 	mul.w	r2, r3, r2
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4904      	ldr	r1, [pc, #16]	; (8002c50 <lcdHLine+0x214>)
 8002c40:	7dba      	ldrb	r2, [r7, #22]
 8002c42:	54ca      	strb	r2, [r1, r3]
}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc90      	pop	{r4, r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	2000069c 	.word	0x2000069c

08002c54 <lcdRefresh>:

void lcdRefresh(void){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <lcdRefresh+0x7c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d032      	beq.n	8002cc8 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8002c62:	2201      	movs	r2, #1
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	481b      	ldr	r0, [pc, #108]	; (8002cd4 <lcdRefresh+0x80>)
 8002c68:	f004 fcd4 	bl	8007614 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	e01c      	b.n	8002cac <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f93d 	bl	8001ef4 <reverse_uint8>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <lcdRefresh+0x84>)
 8002c80:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8002c82:	2396      	movs	r3, #150	; 0x96
 8002c84:	2202      	movs	r2, #2
 8002c86:	4914      	ldr	r1, [pc, #80]	; (8002cd8 <lcdRefresh+0x84>)
 8002c88:	4814      	ldr	r0, [pc, #80]	; (8002cdc <lcdRefresh+0x88>)
 8002c8a:	f006 ff34 	bl	8009af6 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	2232      	movs	r2, #50	; 0x32
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <lcdRefresh+0x8c>)
 8002c9a:	1899      	adds	r1, r3, r2
 8002c9c:	2396      	movs	r3, #150	; 0x96
 8002c9e:	2232      	movs	r2, #50	; 0x32
 8002ca0:	480e      	ldr	r0, [pc, #56]	; (8002cdc <lcdRefresh+0x88>)
 8002ca2:	f006 ff28 	bl	8009af6 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	2bf1      	cmp	r3, #241	; 0xf1
 8002cb0:	d9df      	bls.n	8002c72 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8002cb2:	2396      	movs	r3, #150	; 0x96
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	490b      	ldr	r1, [pc, #44]	; (8002ce4 <lcdRefresh+0x90>)
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <lcdRefresh+0x88>)
 8002cba:	f006 ff1c 	bl	8009af6 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2140      	movs	r1, #64	; 0x40
 8002cc2:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <lcdRefresh+0x80>)
 8002cc4:	f004 fca6 	bl	8007614 <HAL_GPIO_WritePin>
	}
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000144 	.word	0x20000144
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	20000148 	.word	0x20000148
 8002cdc:	20003830 	.word	0x20003830
 8002ce0:	2000069c 	.word	0x2000069c
 8002ce4:	20000698 	.word	0x20000698

08002ce8 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	80fb      	strh	r3, [r7, #6]
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80bb      	strh	r3, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
 8002d02:	4613      	mov	r3, r2
 8002d04:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e009      	b.n	8002d20 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002d0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	88b9      	ldrh	r1, [r7, #4]
 8002d14:	88f8      	ldrh	r0, [r7, #6]
 8002d16:	f7ff fe91 	bl	8002a3c <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d9f1      	bls.n	8002d0c <lcdRect+0x24>
	}
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}

08002d32 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8002d32:	b590      	push	{r4, r7, lr}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	4604      	mov	r4, r0
 8002d3a:	4608      	mov	r0, r1
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	80fb      	strh	r3, [r7, #6]
 8002d44:	4603      	mov	r3, r0
 8002d46:	80bb      	strh	r3, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d046      	beq.n	8002de6 <lcdRect2+0xb4>
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	78bb      	ldrb	r3, [r7, #2]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d042      	beq.n	8002de6 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e00d      	b.n	8002d82 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8002d66:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	88b9      	ldrh	r1, [r7, #4]
 8002d6e:	88f8      	ldrh	r0, [r7, #6]
 8002d70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4623      	mov	r3, r4
 8002d78:	f7ff fa9a 	bl	80022b0 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	78bb      	ldrb	r3, [r7, #2]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d9ed      	bls.n	8002d66 <lcdRect2+0x34>
		}
		if(outline){
 8002d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d029      	beq.n	8002de6 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8002d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	88b9      	ldrh	r1, [r7, #4]
 8002d9a:	88f8      	ldrh	r0, [r7, #6]
 8002d9c:	2401      	movs	r4, #1
 8002d9e:	9400      	str	r4, [sp, #0]
 8002da0:	f7ff fa86 	bl	80022b0 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8002da4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002da8:	78ba      	ldrb	r2, [r7, #2]
 8002daa:	88b9      	ldrh	r1, [r7, #4]
 8002dac:	88f8      	ldrh	r0, [r7, #6]
 8002dae:	2401      	movs	r4, #1
 8002db0:	9400      	str	r4, [sp, #0]
 8002db2:	f7ff fa7d 	bl	80022b0 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b299      	uxth	r1, r3
 8002dbe:	78bb      	ldrb	r3, [r7, #2]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc8:	88f8      	ldrh	r0, [r7, #6]
 8002dca:	f7ff f9fb 	bl	80021c4 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	78bb      	ldrb	r3, [r7, #2]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de0:	88b8      	ldrh	r0, [r7, #4]
 8002de2:	f7ff f9ef 	bl	80021c4 <lcdVLine>
		}
	}
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
	...

08002df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df8:	f004 f80e 	bl	8006e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dfc:	f000 f888 	bl	8002f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e00:	f7fe fe04 	bl	8001a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002e04:	f000 fd3a 	bl	800387c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002e08:	f000 f9b8 	bl	800317c <MX_SPI1_Init>
  MX_TIM1_Init();
 8002e0c:	f000 fb64 	bl	80034d8 <MX_TIM1_Init>
  MX_TIM10_Init();
 8002e10:	f000 fc04 	bl	800361c <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8002e14:	f000 fd5c 	bl	80038d0 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8002e18:	f7fe ffe4 	bl	8001de4 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002e1c:	f000 fc22 	bl	8003664 <MX_TIM11_Init>
  MX_RTC_Init();
 8002e20:	f000 f952 	bl	80030c8 <MX_RTC_Init>
  MX_TIM13_Init();
 8002e24:	f000 fc42 	bl	80036ac <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8002e28:	482b      	ldr	r0, [pc, #172]	; (8002ed8 <main+0xe8>)
 8002e2a:	f007 f86b 	bl	8009f04 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002e2e:	482a      	ldr	r0, [pc, #168]	; (8002ed8 <main+0xe8>)
 8002e30:	f007 f8b8 	bl	8009fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e34:	2100      	movs	r1, #0
 8002e36:	4828      	ldr	r0, [pc, #160]	; (8002ed8 <main+0xe8>)
 8002e38:	f007 f97e 	bl	800a138 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8002e3c:	4827      	ldr	r0, [pc, #156]	; (8002edc <main+0xec>)
 8002e3e:	f007 f8b1 	bl	8009fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8002e42:	4827      	ldr	r0, [pc, #156]	; (8002ee0 <main+0xf0>)
 8002e44:	f007 f8ae 	bl	8009fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8002e48:	4826      	ldr	r0, [pc, #152]	; (8002ee4 <main+0xf4>)
 8002e4a:	f007 f8ab 	bl	8009fa4 <HAL_TIM_Base_Start_IT>

  gpsDev = initGps(&huart6);
 8002e4e:	4c26      	ldr	r4, [pc, #152]	; (8002ee8 <main+0xf8>)
 8002e50:	463b      	mov	r3, r7
 8002e52:	4926      	ldr	r1, [pc, #152]	; (8002eec <main+0xfc>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fec5 	bl	8001be4 <initGps>
 8002e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e5e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e62:	4620      	mov	r0, r4
 8002e64:	4619      	mov	r1, r3
 8002e66:	f44f 7318 	mov.w	r3, #608	; 0x260
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f009 f99e 	bl	800c1ac <memcpy>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8002e70:	481f      	ldr	r0, [pc, #124]	; (8002ef0 <main+0x100>)
 8002e72:	f7fe f95d 	bl	8001130 <bmp_init>

  initButtons(btnsPtrs);
 8002e76:	481f      	ldr	r0, [pc, #124]	; (8002ef4 <main+0x104>)
 8002e78:	f7fe fc1a 	bl	80016b0 <initButtons>
//  initTimer();
//  setTimeout(1);
//  startClock();

//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8002e7c:	f240 118f 	movw	r1, #399	; 0x18f
 8002e80:	481d      	ldr	r0, [pc, #116]	; (8002ef8 <main+0x108>)
 8002e82:	f003 fe85 	bl	8006b90 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8002e86:	f240 128f 	movw	r2, #399	; 0x18f
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	481b      	ldr	r0, [pc, #108]	; (8002efc <main+0x10c>)
 8002e8e:	f003 fdc5 	bl	8006a1c <cbuf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8002e92:	f7ff f859 	bl	8001f48 <lcdClearBuffer>
  lcdRefresh();
 8002e96:	f7ff fedd 	bl	8002c54 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8002e9a:	4c19      	ldr	r4, [pc, #100]	; (8002f00 <main+0x110>)
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	4914      	ldr	r1, [pc, #80]	; (8002ef0 <main+0x100>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fbad 	bl	8001600 <getBmpData>
 8002ea6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eaa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		add_ring_buffer(&baroRing, (int)bmpData.temperature);
//		add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
//		add_ovw_ring_buffer(&baroRing, (int)(bmpData.pressure/10));
//		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
//		cbuf_ovw(&baroRing, &aaa);
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4913      	ldr	r1, [pc, #76]	; (8002f04 <main+0x114>)
 8002eb8:	4813      	ldr	r0, [pc, #76]	; (8002f08 <main+0x118>)
 8002eba:	f006 fba5 	bl	8009608 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <main+0x11c>)
 8002ec2:	4811      	ldr	r0, [pc, #68]	; (8002f08 <main+0x118>)
 8002ec4:	f006 fc82 	bl	80097cc <HAL_RTC_GetDate>
//		gpsDev.getData(&gpsDev);
	  lcdClearBuffer();
 8002ec8:	f7ff f83e 	bl	8001f48 <lcdClearBuffer>

	  // functions executed through GUI
	  showGui();
 8002ecc:	f7fe ff6c 	bl	8001da8 <showGui>

	  lcdRefresh();
 8002ed0:	f7ff fec0 	bl	8002c54 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 8002ed4:	e7e1      	b.n	8002e9a <main+0xaa>
 8002ed6:	bf00      	nop
 8002ed8:	2000388c 	.word	0x2000388c
 8002edc:	200038d4 	.word	0x200038d4
 8002ee0:	2000391c 	.word	0x2000391c
 8002ee4:	20003964 	.word	0x20003964
 8002ee8:	200035b0 	.word	0x200035b0
 8002eec:	200039f0 	.word	0x200039f0
 8002ef0:	20000514 	.word	0x20000514
 8002ef4:	2000002c 	.word	0x2000002c
 8002ef8:	200035a4 	.word	0x200035a4
 8002efc:	20003594 	.word	0x20003594
 8002f00:	20000558 	.word	0x20000558
 8002f04:	2000357c 	.word	0x2000357c
 8002f08:	20003810 	.word	0x20003810
 8002f0c:	20003590 	.word	0x20003590

08002f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b094      	sub	sp, #80	; 0x50
 8002f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f16:	f107 0320 	add.w	r3, r7, #32
 8002f1a:	2230      	movs	r2, #48	; 0x30
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f009 f952 	bl	800c1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <SystemClock_Config+0xd0>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <SystemClock_Config+0xd0>)
 8002f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <SystemClock_Config+0xd0>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <SystemClock_Config+0xd4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <SystemClock_Config+0xd4>)
 8002f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <SystemClock_Config+0xd4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f76:	2301      	movs	r3, #1
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f84:	2304      	movs	r3, #4
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f88:	23a8      	movs	r3, #168	; 0xa8
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f90:	2307      	movs	r3, #7
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f94:	f107 0320 	add.w	r3, r7, #32
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 fbcd 	bl	8008738 <HAL_RCC_OscConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002fa4:	f000 f882 	bl	80030ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa8:	230f      	movs	r3, #15
 8002faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fac:	2302      	movs	r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2105      	movs	r1, #5
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 fe2e 	bl	8008c28 <HAL_RCC_ClockConfig>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002fd2:	f000 f86b 	bl	80030ac <Error_Handler>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3750      	adds	r7, #80	; 0x50
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d108      	bne.n	800300c <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ffc:	78db      	ldrb	r3, [r3, #3]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003008:	f000 fa12 	bl	8003430 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 20Hz
	if(htim->Instance == TIM11){
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d102      	bne.n	800301c <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003016:	4819      	ldr	r0, [pc, #100]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003018:	f7fe fcde 	bl	80019d8 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d11f      	bne.n	8003066 <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003026:	2101      	movs	r1, #1
 8003028:	4816      	ldr	r0, [pc, #88]	; (8003084 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800302a:	f004 fb0c 	bl	8007646 <HAL_GPIO_TogglePin>
		add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003040:	ee17 1a90 	vmov	r1, s15
 8003044:	4811      	ldr	r0, [pc, #68]	; (800308c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003046:	f003 fdd6 	bl	8006bf6 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	b29b      	uxth	r3, r3
 8003058:	81fb      	strh	r3, [r7, #14]
		cbuf_ovw(&baroRing, &aaa);
 800305a:	f107 030e 	add.w	r3, r7, #14
 800305e:	4619      	mov	r1, r3
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003062:	f003 fd15 	bl	8006a90 <cbuf_ovw>

	}
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40014400 	.word	0x40014400
 8003074:	20003888 	.word	0x20003888
 8003078:	40014800 	.word	0x40014800
 800307c:	2000002c 	.word	0x2000002c
 8003080:	40001c00 	.word	0x40001c00
 8003084:	40020400 	.word	0x40020400
 8003088:	20000558 	.word	0x20000558
 800308c:	200035a4 	.word	0x200035a4
 8003090:	cccccccd 	.word	0xcccccccd
 8003094:	20003594 	.word	0x20003594

08003098 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b0:	b672      	cpsid	i
}
 80030b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ba:	4802      	ldr	r0, [pc, #8]	; (80030c4 <Error_Handler+0x18>)
 80030bc:	f004 faaa 	bl	8007614 <HAL_GPIO_WritePin>
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <Error_Handler+0x14>
 80030c2:	bf00      	nop
 80030c4:	40020400 	.word	0x40020400

080030c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80030dc:	2300      	movs	r3, #0
 80030de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <MX_RTC_Init+0x58>)
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <MX_RTC_Init+0x5c>)
 80030e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_RTC_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_RTC_Init+0x58>)
 80030ee:	227f      	movs	r2, #127	; 0x7f
 80030f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <MX_RTC_Init+0x58>)
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_RTC_Init+0x58>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <MX_RTC_Init+0x58>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_RTC_Init+0x58>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <MX_RTC_Init+0x58>)
 800310c:	f006 f96c 	bl	80093e8 <HAL_RTC_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003116:	f7ff ffc9 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20003810 	.word	0x20003810
 8003124:	40002800 	.word	0x40002800

08003128 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	2230      	movs	r2, #48	; 0x30
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f009 f845 	bl	800c1c8 <memset>
  if(rtcHandle->Instance==RTC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RTC_MspInit+0x4c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d111      	bne.n	800316c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003148:	2320      	movs	r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800314c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f005 ff86 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003162:	f7ff ffa3 	bl	80030ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_RTC_MspInit+0x50>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800316c:	bf00      	nop
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40002800 	.word	0x40002800
 8003178:	42470e3c 	.word	0x42470e3c

0800317c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <MX_SPI1_Init+0x64>)
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <MX_SPI1_Init+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <MX_SPI1_Init+0x64>)
 8003188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800318c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <MX_SPI1_Init+0x64>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <MX_SPI1_Init+0x64>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_SPI1_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031b0:	2220      	movs	r2, #32
 80031b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031bc:	2200      	movs	r2, #0
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031c8:	220a      	movs	r2, #10
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <MX_SPI1_Init+0x64>)
 80031ce:	f006 fc09 	bl	80099e4 <HAL_SPI_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031d8:	f7ff ff68 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20003830 	.word	0x20003830
 80031e4:	40013000 	.word	0x40013000

080031e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_SPI_MspInit+0x84>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12b      	bne.n	8003262 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_SPI_MspInit+0x88>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_SPI_MspInit+0x88>)
 8003214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_SPI_MspInit+0x88>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_SPI_MspInit+0x88>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_SPI_MspInit+0x88>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_SPI_MspInit+0x88>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003242:	23a0      	movs	r3, #160	; 0xa0
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003252:	2305      	movs	r3, #5
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	4805      	ldr	r0, [pc, #20]	; (8003274 <HAL_SPI_MspInit+0x8c>)
 800325e:	f004 f815 	bl	800728c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40013000 	.word	0x40013000
 8003270:	40023800 	.word	0x40023800
 8003274:	40020000 	.word	0x40020000

08003278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_MspInit+0x4c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <HAL_MspInit+0x4c>)
 8003288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328c:	6453      	str	r3, [r2, #68]	; 0x44
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_MspInit+0x4c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_MspInit+0x4c>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_MspInit+0x4c>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_MspInit+0x4c>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler+0x4>

080032ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 80032d2:	f7ff feeb 	bl	80030ac <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x8>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <MemManage_Handler+0x4>

080032de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <BusFault_Handler+0x4>

080032e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler+0x4>

080032ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003318:	f003 fdd0 	bl	8006ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003324:	4803      	ldr	r0, [pc, #12]	; (8003334 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003326:	f006 ffcf 	bl	800a2c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800332c:	f006 ffcc 	bl	800a2c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	2000388c 	.word	0x2000388c
 8003338:	200038d4 	.word	0x200038d4

0800333c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003340:	4803      	ldr	r0, [pc, #12]	; (8003350 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003342:	f006 ffc1 	bl	800a2c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003346:	4803      	ldr	r0, [pc, #12]	; (8003354 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003348:	f006 ffbe 	bl	800a2c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000388c 	.word	0x2000388c
 8003354:	2000391c 	.word	0x2000391c

08003358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 800335c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003360:	f004 f98c 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003364:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003368:	f004 f988 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800336c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003370:	f004 f984 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003374:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003378:	f004 f980 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800337c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003380:	f004 f97c 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003384:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003388:	f004 f978 	bl	800767c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003396:	f006 ff97 	bl	800a2c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20003964 	.word	0x20003964

080033a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <USART6_IRQHandler+0x10>)
 80033aa:	f007 ff29 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200039f0 	.word	0x200039f0

080033b8 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 80033bc:	2228      	movs	r2, #40	; 0x28
 80033be:	2100      	movs	r1, #0
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <clearTable+0x1c>)
 80033c2:	f008 ff01 	bl	800c1c8 <memset>
	stwT.position = 0;
 80033c6:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <clearTable+0x1c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000014c 	.word	0x2000014c

080033d8 <addItem>:
void addItem(stw_struct stwS){
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <addItem+0x38>)
 80033e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <addItem+0x38>)
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <addItem+0x38>)
 80033f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <addItem+0x38>)
 8003400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	2000014c 	.word	0x2000014c

08003414 <stwStart>:

void stwStart(void){
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <stwStart+0x18>)
 800341a:	78d3      	ldrb	r3, [r2, #3]
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	70d3      	strb	r3, [r2, #3]
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20003888 	.word	0x20003888

08003430 <stwTick>:
void stwTick(void){
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <stwTick+0x28>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003442:	4905      	ldr	r1, [pc, #20]	; (8003458 <stwTick+0x28>)
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	f362 0317 	bfi	r3, r2, #0, #24
 800344a:	600b      	str	r3, [r1, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20003888 	.word	0x20003888

0800345c <stwStop>:
void stwStop(void){
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <stwStop+0x18>)
 8003462:	78d3      	ldrb	r3, [r2, #3]
 8003464:	f36f 0300 	bfc	r3, #0, #1
 8003468:	70d3      	strb	r3, [r2, #3]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20003888 	.word	0x20003888

08003478 <stwClear>:
void stwClear(void){
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <stwClear+0x18>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	f36f 0317 	bfc	r3, #0, #24
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20003888 	.word	0x20003888

08003494 <stwSave>:
void stwSave(void){
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <stwSave+0x18>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <stwSave+0x1c>)
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80034a4:	4610      	mov	r0, r2
 80034a6:	4798      	blx	r3
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000014c 	.word	0x2000014c
 80034b0:	20003888 	.word	0x20003888

080034b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <SystemInit+0x20>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <SystemInit+0x20>)
 80034c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b096      	sub	sp, #88	; 0x58
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	615a      	str	r2, [r3, #20]
 8003508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	2220      	movs	r2, #32
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f008 fe59 	bl	800c1c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003518:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <MX_TIM1_Init+0x140>)
 800351a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 800351c:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <MX_TIM1_Init+0x13c>)
 800351e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <MX_TIM1_Init+0x13c>)
 800352c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <MX_TIM1_Init+0x13c>)
 800353a:	2200      	movs	r2, #0
 800353c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003544:	4833      	ldr	r0, [pc, #204]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003546:	f006 fcdd 	bl	8009f04 <HAL_TIM_Base_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003550:	f7ff fdac 	bl	80030ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800355a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800355e:	4619      	mov	r1, r3
 8003560:	482c      	ldr	r0, [pc, #176]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003562:	f007 f87b 	bl	800a65c <HAL_TIM_ConfigClockSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800356c:	f7ff fd9e 	bl	80030ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003570:	4828      	ldr	r0, [pc, #160]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003572:	f006 fd87 	bl	800a084 <HAL_TIM_PWM_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800357c:	f7ff fd96 	bl	80030ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800358c:	4619      	mov	r1, r3
 800358e:	4821      	ldr	r0, [pc, #132]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003590:	f007 fc64 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800359a:	f7ff fd87 	bl	80030ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800359e:	2360      	movs	r3, #96	; 0x60
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	2200      	movs	r2, #0
 80035c0:	4619      	mov	r1, r3
 80035c2:	4814      	ldr	r0, [pc, #80]	; (8003614 <MX_TIM1_Init+0x13c>)
 80035c4:	f006 ff88 	bl	800a4d8 <HAL_TIM_PWM_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80035ce:	f7ff fd6d 	bl	80030ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <MX_TIM1_Init+0x13c>)
 80035f6:	f007 fcad 	bl	800af54 <HAL_TIMEx_ConfigBreakDeadTime>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003600:	f7ff fd54 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <MX_TIM1_Init+0x13c>)
 8003606:	f000 f8ff 	bl	8003808 <HAL_TIM_MspPostInit>

}
 800360a:	bf00      	nop
 800360c:	3758      	adds	r7, #88	; 0x58
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000388c 	.word	0x2000388c
 8003618:	40010000 	.word	0x40010000

0800361c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <MX_TIM10_Init+0x40>)
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <MX_TIM10_Init+0x44>)
 8003624:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <MX_TIM10_Init+0x40>)
 8003628:	f244 129f 	movw	r2, #16799	; 0x419f
 800362c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <MX_TIM10_Init+0x40>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <MX_TIM10_Init+0x40>)
 8003636:	2263      	movs	r2, #99	; 0x63
 8003638:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b08      	ldr	r3, [pc, #32]	; (800365c <MX_TIM10_Init+0x40>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <MX_TIM10_Init+0x40>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <MX_TIM10_Init+0x40>)
 8003648:	f006 fc5c 	bl	8009f04 <HAL_TIM_Base_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003652:	f7ff fd2b 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200038d4 	.word	0x200038d4
 8003660:	40014400 	.word	0x40014400

08003664 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <MX_TIM11_Init+0x40>)
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <MX_TIM11_Init+0x44>)
 800366c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <MX_TIM11_Init+0x40>)
 8003670:	f244 129f 	movw	r2, #16799	; 0x419f
 8003674:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <MX_TIM11_Init+0x40>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <MX_TIM11_Init+0x40>)
 800367e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003682:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <MX_TIM11_Init+0x40>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <MX_TIM11_Init+0x40>)
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003690:	4804      	ldr	r0, [pc, #16]	; (80036a4 <MX_TIM11_Init+0x40>)
 8003692:	f006 fc37 	bl	8009f04 <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800369c:	f7ff fd06 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000391c 	.word	0x2000391c
 80036a8:	40014800 	.word	0x40014800

080036ac <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <MX_TIM13_Init+0x40>)
 80036b2:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <MX_TIM13_Init+0x44>)
 80036b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <MX_TIM13_Init+0x40>)
 80036b8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80036bc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <MX_TIM13_Init+0x40>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <MX_TIM13_Init+0x40>)
 80036c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80036ca:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <MX_TIM13_Init+0x40>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <MX_TIM13_Init+0x40>)
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80036d8:	4804      	ldr	r0, [pc, #16]	; (80036ec <MX_TIM13_Init+0x40>)
 80036da:	f006 fc13 	bl	8009f04 <HAL_TIM_Base_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80036e4:	f7ff fce2 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20003964 	.word	0x20003964
 80036f0:	40001c00 	.word	0x40001c00

080036f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3c      	ldr	r2, [pc, #240]	; (80037f4 <HAL_TIM_Base_MspInit+0x100>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11e      	bne.n	8003744 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2019      	movs	r0, #25
 8003728:	f003 fce7 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800372c:	2019      	movs	r0, #25
 800372e:	f003 fd00 	bl	8007132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	201a      	movs	r0, #26
 8003738:	f003 fcdf 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800373c:	201a      	movs	r0, #26
 800373e:	f003 fcf8 	bl	8007132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003742:	e052      	b.n	80037ea <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <HAL_TIM_Base_MspInit+0x108>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d116      	bne.n	800377c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2019      	movs	r0, #25
 8003770:	f003 fcc3 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003774:	2019      	movs	r0, #25
 8003776:	f003 fcdc 	bl	8007132 <HAL_NVIC_EnableIRQ>
}
 800377a:	e036      	b.n	80037ea <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIM_Base_MspInit+0x10c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d116      	bne.n	80037b4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	201a      	movs	r0, #26
 80037a8:	f003 fca7 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80037ac:	201a      	movs	r0, #26
 80037ae:	f003 fcc0 	bl	8007132 <HAL_NVIC_EnableIRQ>
}
 80037b2:	e01a      	b.n	80037ea <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIM_Base_MspInit+0x110>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_TIM_Base_MspInit+0x104>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	202c      	movs	r0, #44	; 0x2c
 80037e0:	f003 fc8b 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80037e4:	202c      	movs	r0, #44	; 0x2c
 80037e6:	f003 fca4 	bl	8007132 <HAL_NVIC_EnableIRQ>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800
 8003804:	40001c00 	.word	0x40001c00

08003808 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a12      	ldr	r2, [pc, #72]	; (8003870 <HAL_TIM_MspPostInit+0x68>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d11e      	bne.n	8003868 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_TIM_MspPostInit+0x6c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIM_MspPostInit+0x6c>)
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_TIM_MspPostInit+0x6c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800384a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003858:	2301      	movs	r3, #1
 800385a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800385c:	f107 030c 	add.w	r3, r7, #12
 8003860:	4619      	mov	r1, r3
 8003862:	4805      	ldr	r0, [pc, #20]	; (8003878 <HAL_TIM_MspPostInit+0x70>)
 8003864:	f003 fd12 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003868:	bf00      	nop
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010000 	.word	0x40010000
 8003874:	40023800 	.word	0x40023800
 8003878:	40021000 	.word	0x40021000

0800387c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <MX_USART3_UART_Init+0x50>)
 8003884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 8003888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800388c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_USART3_UART_Init+0x4c>)
 80038b4:	f007 fbb4 	bl	800b020 <HAL_UART_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80038be:	f7ff fbf5 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200039ac 	.word	0x200039ac
 80038cc:	40004800 	.word	0x40004800

080038d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <MX_USART6_UART_Init+0x50>)
 80038d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038f6:	2204      	movs	r2, #4
 80038f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <MX_USART6_UART_Init+0x4c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <MX_USART6_UART_Init+0x4c>)
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_USART6_UART_Init+0x4c>)
 8003908:	f007 fb8a 	bl	800b020 <HAL_UART_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003912:	f7ff fbcb 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200039f0 	.word	0x200039f0
 8003920:	40011400 	.word	0x40011400

08003924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a36      	ldr	r2, [pc, #216]	; (8003a1c <HAL_UART_MspInit+0xf8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d12d      	bne.n	80039a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a34      	ldr	r2, [pc, #208]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800397e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003990:	2307      	movs	r3, #7
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	4822      	ldr	r0, [pc, #136]	; (8003a24 <HAL_UART_MspInit+0x100>)
 800399c:	f003 fc76 	bl	800728c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80039a0:	e038      	b.n	8003a14 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_UART_MspInit+0x104>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d133      	bne.n	8003a14 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039b6:	f043 0320 	orr.w	r3, r3, #32
 80039ba:	6453      	str	r3, [r2, #68]	; 0x44
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6313      	str	r3, [r2, #48]	; 0x30
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_UART_MspInit+0xfc>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039e4:	23c0      	movs	r3, #192	; 0xc0
 80039e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039f4:	2308      	movs	r3, #8
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	4619      	mov	r1, r3
 80039fe:	480b      	ldr	r0, [pc, #44]	; (8003a2c <HAL_UART_MspInit+0x108>)
 8003a00:	f003 fc44 	bl	800728c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	2047      	movs	r0, #71	; 0x47
 8003a0a:	f003 fb76 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a0e:	2047      	movs	r0, #71	; 0x47
 8003a10:	f003 fb8f 	bl	8007132 <HAL_NVIC_EnableIRQ>
}
 8003a14:	bf00      	nop
 8003a16:	3730      	adds	r7, #48	; 0x30
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40004800 	.word	0x40004800
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40011400 	.word	0x40011400
 8003a2c:	40020800 	.word	0x40020800

08003a30 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <setDefaultClbcks+0x34>)
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <setDefaultClbcks+0x38>)
 8003a38:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <setDefaultClbcks+0x3c>)
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <setDefaultClbcks+0x40>)
 8003a3e:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <setDefaultClbcks+0x44>)
 8003a42:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <setDefaultClbcks+0x48>)
 8003a44:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <setDefaultClbcks+0x4c>)
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <setDefaultClbcks+0x50>)
 8003a4a:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <setDefaultClbcks+0x54>)
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <setDefaultClbcks+0x58>)
 8003a50:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <setDefaultClbcks+0x5c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000568 	.word	0x20000568
 8003a68:	08001ccd 	.word	0x08001ccd
 8003a6c:	200005b0 	.word	0x200005b0
 8003a70:	08001cdd 	.word	0x08001cdd
 8003a74:	2000058c 	.word	0x2000058c
 8003a78:	08003f71 	.word	0x08003f71
 8003a7c:	2000061c 	.word	0x2000061c
 8003a80:	08003fb5 	.word	0x08003fb5
 8003a84:	200005d4 	.word	0x200005d4
 8003a88:	08004001 	.word	0x08004001
 8003a8c:	200005f8 	.word	0x200005f8

08003a90 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003a94:	f7ff ffcc 	bl	8003a30 <setDefaultClbcks>
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8003a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa0:	b0b2      	sub	sp, #200	; 0xc8
 8003aa2:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	488b      	ldr	r0, [pc, #556]	; (8003cd4 <baroMain+0x238>)
 8003aa8:	f003 f850 	bl	8006b4c <cbuf_readn>
 8003aac:	4603      	mov	r3, r0
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4887      	ldr	r0, [pc, #540]	; (8003cd4 <baroMain+0x238>)
 8003ab8:	f003 f848 	bl	8006b4c <cbuf_readn>
 8003abc:	4603      	mov	r3, r0
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4884      	ldr	r0, [pc, #528]	; (8003cd8 <baroMain+0x23c>)
 8003ac8:	f003 f8e3 	bl	8006c92 <read_nth_ring_buffer>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4880      	ldr	r0, [pc, #512]	; (8003cd8 <baroMain+0x23c>)
 8003ad6:	f003 f8dc 	bl	8006c92 <read_nth_ring_buffer>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ae8:	222e      	movs	r2, #46	; 0x2e
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f008 fb6b 	bl	800c1c8 <memset>
	char str3[50] = {0};
 8003af2:	2300      	movs	r3, #0
 8003af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003afa:	222e      	movs	r2, #46	; 0x2e
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f008 fb62 	bl	800c1c8 <memset>
	char str4[50] = {0};
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	222e      	movs	r2, #46	; 0x2e
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f008 fb59 	bl	800c1c8 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8003b16:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <baroMain+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fd2e 	bl	800057c <__aeabi_f2d>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003b28:	496d      	ldr	r1, [pc, #436]	; (8003ce0 <baroMain+0x244>)
 8003b2a:	f009 fc7b 	bl	800d424 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8003b2e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003b32:	4b6c      	ldr	r3, [pc, #432]	; (8003ce4 <baroMain+0x248>)
 8003b34:	210e      	movs	r1, #14
 8003b36:	200a      	movs	r0, #10
 8003b38:	f7fe fb16 	bl	8002168 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8003b3c:	4b67      	ldr	r3, [pc, #412]	; (8003cdc <baroMain+0x240>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b48:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003ce8 <baroMain+0x24c>
 8003b4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b50:	ee16 0a90 	vmov	r0, s13
 8003b54:	f7fc fd12 	bl	800057c <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003b60:	4962      	ldr	r1, [pc, #392]	; (8003cec <baroMain+0x250>)
 8003b62:	f009 fc5f 	bl	800d424 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8003b66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003b6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <baroMain+0x248>)
 8003b6c:	211e      	movs	r1, #30
 8003b6e:	200a      	movs	r0, #10
 8003b70:	f7fe fafa 	bl	8002168 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <baroMain+0x254>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d123      	bne.n	8003bc4 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	495d      	ldr	r1, [pc, #372]	; (8003cf4 <baroMain+0x258>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f009 fc4f 	bl	800d424 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8003b86:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <baroMain+0x240>)
 8003b88:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b8c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003ce8 <baroMain+0x24c>
 8003b90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b94:	ee16 0a90 	vmov	r0, s13
 8003b98:	f7fc fcf0 	bl	800057c <__aeabi_f2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003ba4:	4954      	ldr	r1, [pc, #336]	; (8003cf8 <baroMain+0x25c>)
 8003ba6:	f009 fc3d 	bl	800d424 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <baroMain+0x260>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fce4 	bl	800057c <__aeabi_f2d>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003bbc:	4950      	ldr	r1, [pc, #320]	; (8003d00 <baroMain+0x264>)
 8003bbe:	f009 fc31 	bl	800d424 <siprintf>
 8003bc2:	e022      	b.n	8003c0a <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	494f      	ldr	r1, [pc, #316]	; (8003d04 <baroMain+0x268>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f009 fc2b 	bl	800d424 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <baroMain+0x240>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fcd2 	bl	800057c <__aeabi_f2d>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003be0:	4949      	ldr	r1, [pc, #292]	; (8003d08 <baroMain+0x26c>)
 8003be2:	f009 fc1f 	bl	800d424 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8003be6:	4b49      	ldr	r3, [pc, #292]	; (8003d0c <baroMain+0x270>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003ce8 <baroMain+0x24c>
 8003bf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bf4:	ee16 0a90 	vmov	r0, s13
 8003bf8:	f7fc fcc0 	bl	800057c <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003c04:	4942      	ldr	r1, [pc, #264]	; (8003d10 <baroMain+0x274>)
 8003c06:	f009 fc0d 	bl	800d424 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8003c0a:	1d3a      	adds	r2, r7, #4
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <baroMain+0x248>)
 8003c0e:	2132      	movs	r1, #50	; 0x32
 8003c10:	200a      	movs	r0, #10
 8003c12:	f7fe faa9 	bl	8002168 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8003c16:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003c1a:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <baroMain+0x248>)
 8003c1c:	2142      	movs	r1, #66	; 0x42
 8003c1e:	200a      	movs	r0, #10
 8003c20:	f7fe faa2 	bl	8002168 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8003c24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <baroMain+0x248>)
 8003c2a:	2152      	movs	r1, #82	; 0x52
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f7fe fa9b 	bl	8002168 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003c38:	e041      	b.n	8003cbe <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8003c3a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4824      	ldr	r0, [pc, #144]	; (8003cd4 <baroMain+0x238>)
 8003c42:	f002 ff83 	bl	8006b4c <cbuf_readn>
 8003c46:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8003c4a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4821      	ldr	r0, [pc, #132]	; (8003cd8 <baroMain+0x23c>)
 8003c52:	f003 f81e 	bl	8006c92 <read_nth_ring_buffer>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8003c5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d804      	bhi.n	8003c74 <baroMain+0x1d8>
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 8003c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d304      	bcc.n	8003c8c <baroMain+0x1f0>
 8003c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8003c8c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003c90:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d303      	bcc.n	8003ca0 <baroMain+0x204>
 8003c98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003c9c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8003ca0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003ca4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d803      	bhi.n	8003cb4 <baroMain+0x218>
 8003cac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003cb0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8003cb4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <baroMain+0x23c>)
 8003cc0:	891b      	ldrh	r3, [r3, #8]
 8003cc2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3b7      	bcc.n	8003c3a <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <baroMain+0x278>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8003cd2:	e0ba      	b.n	8003e4a <baroMain+0x3ae>
 8003cd4:	20003594 	.word	0x20003594
 8003cd8:	200035a4 	.word	0x200035a4
 8003cdc:	20000558 	.word	0x20000558
 8003ce0:	08013814 	.word	0x08013814
 8003ce4:	08014498 	.word	0x08014498
 8003ce8:	42c80000 	.word	0x42c80000
 8003cec:	0801382c 	.word	0x0801382c
 8003cf0:	20003a34 	.word	0x20003a34
 8003cf4:	08013848 	.word	0x08013848
 8003cf8:	0801385c 	.word	0x0801385c
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	08013880 	.word	0x08013880
 8003d04:	080138a0 	.word	0x080138a0
 8003d08:	080138b4 	.word	0x080138b4
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	080138d4 	.word	0x080138d4
 8003d14:	20000184 	.word	0x20000184
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8003d18:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003d1c:	4a8c      	ldr	r2, [pc, #560]	; (8003f50 <baroMain+0x4b4>)
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	4a8c      	ldr	r2, [pc, #560]	; (8003f54 <baroMain+0x4b8>)
 8003d24:	8912      	ldrh	r2, [r2, #8]
 8003d26:	fb03 f202 	mul.w	r2, r3, r2
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	; (8003f58 <baroMain+0x4bc>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4b87      	ldr	r3, [pc, #540]	; (8003f50 <baroMain+0x4b4>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	1acb      	subs	r3, r1, r3
 8003d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8003d3e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003d42:	4619      	mov	r1, r3
 8003d44:	4883      	ldr	r0, [pc, #524]	; (8003f54 <baroMain+0x4b8>)
 8003d46:	f002 ff01 	bl	8006b4c <cbuf_readn>
 8003d4a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8003d4e:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8003d52:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003d56:	1c5c      	adds	r4, r3, #1
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <baroMain+0x4c0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	; (8003f5c <baroMain+0x4c0>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <baroMain+0x4c4>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4611      	mov	r1, r2
 8003d72:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8003d76:	1a8a      	subs	r2, r1, r2
 8003d78:	fb03 f202 	mul.w	r2, r3, r2
 8003d7c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8003d80:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003d84:	1acb      	subs	r3, r1, r3
 8003d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d8a:	1aea      	subs	r2, r5, r3
 8003d8c:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <baroMain+0x4c0>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	2300      	movs	r3, #0
 8003d94:	9302      	str	r3, [sp, #8]
 8003d96:	2302      	movs	r3, #2
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4621      	mov	r1, r4
 8003da2:	f7fe ffc6 	bl	8002d32 <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8003da6:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 8003daa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003dae:	1c5e      	adds	r6, r3, #1
 8003db0:	4b6a      	ldr	r3, [pc, #424]	; (8003f5c <baroMain+0x4c0>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4698      	mov	r8, r3
 8003db6:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <baroMain+0x4c0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <baroMain+0x4c4>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	1ad4      	subs	r4, r2, r3
 8003dc2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4866      	ldr	r0, [pc, #408]	; (8003f64 <baroMain+0x4c8>)
 8003dca:	f002 ff62 	bl	8006c92 <read_nth_ring_buffer>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	fb03 f204 	mul.w	r2, r3, r4
 8003dda:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8003dde:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003de8:	eba8 0203 	sub.w	r2, r8, r3
 8003dec:	4b5b      	ldr	r3, [pc, #364]	; (8003f5c <baroMain+0x4c0>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	2300      	movs	r3, #0
 8003df4:	9302      	str	r3, [sp, #8]
 8003df6:	230e      	movs	r3, #14
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	f7fe ff95 	bl	8002d32 <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003e08:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <baroMain+0x4b4>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	4b52      	ldr	r3, [pc, #328]	; (8003f58 <baroMain+0x4bc>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4b52      	ldr	r3, [pc, #328]	; (8003f60 <baroMain+0x4c4>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f7fe fa46 	bl	80022b0 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003e24:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <baroMain+0x4b4>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <baroMain+0x4bc>)
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <baroMain+0x4c0>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	2302      	movs	r3, #2
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f7fe fa38 	bl	80022b0 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8003e40:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003e44:	3301      	adds	r3, #1
 8003e46:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8003e4a:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <baroMain+0x4bc>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f4ff af60 	bcc.w	8003d18 <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8003e58:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e6c:	ee16 0a90 	vmov	r0, s13
 8003e70:	f7fc fb84 	bl	800057c <__aeabi_f2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	1d38      	adds	r0, r7, #4
 8003e7a:	493b      	ldr	r1, [pc, #236]	; (8003f68 <baroMain+0x4cc>)
 8003e7c:	f009 fad2 	bl	800d424 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8003e80:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <baroMain+0x4c4>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	3b06      	subs	r3, #6
 8003e86:	b2d9      	uxtb	r1, r3
 8003e88:	1d3a      	adds	r2, r7, #4
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <baroMain+0x4d0>)
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fe f96b 	bl	8002168 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8003e92:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ea2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ea6:	ee16 0a90 	vmov	r0, s13
 8003eaa:	f7fc fb67 	bl	800057c <__aeabi_f2d>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	1d38      	adds	r0, r7, #4
 8003eb4:	492c      	ldr	r1, [pc, #176]	; (8003f68 <baroMain+0x4cc>)
 8003eb6:	f009 fab5 	bl	800d424 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <baroMain+0x4c0>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	3b06      	subs	r3, #6
 8003ec0:	b2d9      	uxtb	r1, r3
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <baroMain+0x4d0>)
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fe f94e 	bl	8002168 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8003ecc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003edc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ee0:	ee16 0a90 	vmov	r0, s13
 8003ee4:	f7fc fb4a 	bl	800057c <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	1d38      	adds	r0, r7, #4
 8003eee:	491e      	ldr	r1, [pc, #120]	; (8003f68 <baroMain+0x4cc>)
 8003ef0:	f009 fa98 	bl	800d424 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <baroMain+0x4c4>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	3b06      	subs	r3, #6
 8003efa:	b2d9      	uxtb	r1, r3
 8003efc:	1d3a      	adds	r2, r7, #4
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <baroMain+0x4d0>)
 8003f00:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003f04:	f7fe f930 	bl	8002168 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 8003f08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f1c:	ee16 0a90 	vmov	r0, s13
 8003f20:	f7fc fb2c 	bl	800057c <__aeabi_f2d>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	1d38      	adds	r0, r7, #4
 8003f2a:	490f      	ldr	r1, [pc, #60]	; (8003f68 <baroMain+0x4cc>)
 8003f2c:	f009 fa7a 	bl	800d424 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <baroMain+0x4c0>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3b06      	subs	r3, #6
 8003f36:	b2d9      	uxtb	r1, r3
 8003f38:	1d3a      	adds	r2, r7, #4
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <baroMain+0x4d0>)
 8003f3c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003f40:	f7fe f912 	bl	8002168 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8003f44:	bf00      	nop
 8003f46:	37b8      	adds	r7, #184	; 0xb8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000184 	.word	0x20000184
 8003f54:	20003594 	.word	0x20003594
 8003f58:	20000186 	.word	0x20000186
 8003f5c:	20000188 	.word	0x20000188
 8003f60:	20000189 	.word	0x20000189
 8003f64:	200035a4 	.word	0x200035a4
 8003f68:	080138f4 	.word	0x080138f4
 8003f6c:	0801401c 	.word	0x0801401c

08003f70 <changeBaroMode>:

void changeBaroMode(void){
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <changeBaroMode+0x34>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <changeBaroMode+0x38>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <changeBaroMode+0x3c>)
 8003f82:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <changeBaroMode+0x34>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 8003f8a:	e006      	b.n	8003f9a <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <changeBaroMode+0x38>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <changeBaroMode+0x40>)
 8003f92:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <changeBaroMode+0x34>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20003a34 	.word	0x20003a34
 8003fa8:	20000558 	.word	0x20000558
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <addBaro>:
void addBaro(void){
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <addBaro+0x40>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <addBaro+0x22>
			fixedAltitude += 1;
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <addBaro+0x44>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <addBaro+0x44>)
 8003fd0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8003fd4:	e009      	b.n	8003fea <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <addBaro+0x48>)
 8003fd8:	edd3 7a00 	vldr	s15, [r3]
 8003fdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <addBaro+0x48>)
 8003fe6:	edc3 7a00 	vstr	s15, [r3]
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	20003a34 	.word	0x20003a34
 8003ff8:	20000004 	.word	0x20000004
 8003ffc:	20000000 	.word	0x20000000

08004000 <remBaro>:
void remBaro(void){
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <remBaro+0x40>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <remBaro+0x22>
			fixedAltitude -= 1;
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <remBaro+0x44>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <remBaro+0x44>)
 800401c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8004020:	e009      	b.n	8004036 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <remBaro+0x48>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800402c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <remBaro+0x48>)
 8004032:	edc3 7a00 	vstr	s15, [r3]
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20003a34 	.word	0x20003a34
 8004044:	20000004 	.word	0x20000004
 8004048:	20000000 	.word	0x20000000

0800404c <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <setupCntxMenu+0x1c>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20003a38 	.word	0x20003a38

0800406c <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8004070:	f000 f87e 	bl	8004170 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <cntxSelect+0x1c>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <cntxSelect+0x20>)
 800407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4798      	blx	r3
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20003a36 	.word	0x20003a36
 800408c:	200001e0 	.word	0x200001e0

08004090 <nextItem>:

void nextItem(void){
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <nextItem+0x34>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <nextItem+0x38>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	3b01      	subs	r3, #1
 80040a0:	429a      	cmp	r2, r3
 80040a2:	da06      	bge.n	80040b2 <nextItem+0x22>
		cntxPosition++;
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <nextItem+0x34>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <nextItem+0x34>)
 80040ae:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 80040b0:	e002      	b.n	80040b8 <nextItem+0x28>
		cntxPosition = 0;
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <nextItem+0x34>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20003a36 	.word	0x20003a36
 80040c8:	2000018a 	.word	0x2000018a

080040cc <prevItem>:
void prevItem(void){
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <prevItem+0x30>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <prevItem+0x1a>
		cntxPosition--;
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <prevItem+0x30>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prevItem+0x30>)
 80040e2:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80040e4:	e005      	b.n	80040f2 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <prevItem+0x34>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b03      	ldr	r3, [pc, #12]	; (80040fc <prevItem+0x30>)
 80040f0:	701a      	strb	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	20003a36 	.word	0x20003a36
 8004100:	2000018a 	.word	0x2000018a

08004104 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <setDefaultClbcks+0x34>)
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <setDefaultClbcks+0x38>)
 800410c:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <setDefaultClbcks+0x3c>)
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <setDefaultClbcks+0x40>)
 8004112:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <setDefaultClbcks+0x3c>)
 8004116:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <setDefaultClbcks+0x40>)
 8004118:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <setDefaultClbcks+0x44>)
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <setDefaultClbcks+0x48>)
 800411e:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <setDefaultClbcks+0x4c>)
 8004122:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <setDefaultClbcks+0x50>)
 8004124:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <setDefaultClbcks+0x4c>)
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <setDefaultClbcks+0x50>)
 800412a:	61da      	str	r2, [r3, #28]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000061c 	.word	0x2000061c
 800413c:	08004171 	.word	0x08004171
 8004140:	200005b0 	.word	0x200005b0
 8004144:	080040cd 	.word	0x080040cd
 8004148:	2000058c 	.word	0x2000058c
 800414c:	0800406d 	.word	0x0800406d
 8004150:	20000568 	.word	0x20000568
 8004154:	08004091 	.word	0x08004091

08004158 <showCntxMenu>:

void showCntxMenu(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 800415c:	f7ff ffd2 	bl	8004104 <setDefaultClbcks>
	isCntxOpen = 1;
 8004160:	4b02      	ldr	r3, [pc, #8]	; (800416c <showCntxMenu+0x14>)
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20003a35 	.word	0x20003a35

08004170 <hideCntxMenu>:
void hideCntxMenu(void){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8004174:	f7fd fb36 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <hideCntxMenu+0x18>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4798      	blx	r3
	isCntxOpen = 0;
 800417e:	4b03      	ldr	r3, [pc, #12]	; (800418c <hideCntxMenu+0x1c>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20003a38 	.word	0x20003a38
 800418c:	20003a35 	.word	0x20003a35

08004190 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8004196:	4b35      	ldr	r3, [pc, #212]	; (800426c <enableCntxMenu+0xdc>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d062      	beq.n	8004264 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 800419e:	230e      	movs	r3, #14
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b33      	ldr	r3, [pc, #204]	; (8004270 <enableCntxMenu+0xe0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	330a      	adds	r3, #10
 80041ac:	2200      	movs	r2, #0
 80041ae:	9200      	str	r2, [sp, #0]
 80041b0:	2205      	movs	r2, #5
 80041b2:	21c8      	movs	r1, #200	; 0xc8
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fe fd97 	bl	8002ce8 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 80041ba:	2301      	movs	r3, #1
 80041bc:	2206      	movs	r2, #6
 80041be:	21c8      	movs	r1, #200	; 0xc8
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fe fc3b 	bl	8002a3c <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 80041c6:	230e      	movs	r3, #14
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <enableCntxMenu+0xe0>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	f103 020a 	add.w	r2, r3, #10
 80041d6:	2301      	movs	r3, #1
 80041d8:	21c8      	movs	r1, #200	; 0xc8
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fe fc2e 	bl	8002a3c <lcdHLine>
//		create list
		char item[30] = {0};
 80041e0:	2300      	movs	r3, #0
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	615a      	str	r2, [r3, #20]
 80041f4:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80041f6:	2300      	movs	r3, #0
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e018      	b.n	800422e <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <enableCntxMenu+0xe4>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	461a      	mov	r2, r3
 8004206:	463b      	mov	r3, r7
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f009 f90a 	bl	800d424 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 8004210:	220e      	movs	r2, #14
 8004212:	7ffb      	ldrb	r3, [r7, #31]
 8004214:	fb13 f302 	smulbb	r3, r3, r2
 8004218:	b2db      	uxtb	r3, r3
 800421a:	330a      	adds	r3, #10
 800421c:	b2d9      	uxtb	r1, r3
 800421e:	463a      	mov	r2, r7
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <enableCntxMenu+0xe8>)
 8004222:	2005      	movs	r0, #5
 8004224:	f7fd ffa0 	bl	8002168 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	3301      	adds	r3, #1
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <enableCntxMenu+0xe0>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	7ffa      	ldrb	r2, [r7, #31]
 8004234:	429a      	cmp	r2, r3
 8004236:	d3e1      	bcc.n	80041fc <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 8004238:	230e      	movs	r3, #14
 800423a:	461a      	mov	r2, r3
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <enableCntxMenu+0xec>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	f103 0208 	add.w	r2, r3, #8
 8004248:	230e      	movs	r3, #14
 800424a:	4619      	mov	r1, r3
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <enableCntxMenu+0xec>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	3308      	adds	r3, #8
 8004258:	2102      	movs	r1, #2
 800425a:	9100      	str	r1, [sp, #0]
 800425c:	21c8      	movs	r1, #200	; 0xc8
 800425e:	2000      	movs	r0, #0
 8004260:	f7fe fd42 	bl	8002ce8 <lcdRect>

	}
}
 8004264:	bf00      	nop
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20003a35 	.word	0x20003a35
 8004270:	2000018a 	.word	0x2000018a
 8004274:	200001e0 	.word	0x200001e0
 8004278:	08014f20 	.word	0x08014f20
 800427c:	20003a36 	.word	0x20003a36

08004280 <readGps>:
//#include <fonts/font_calibri13.h>

extern gpsDevice_t gpsDev;


void readGps(void){
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	gpsDev.getData(&gpsDev);
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <readGps+0x14>)
 8004286:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800428a:	4802      	ldr	r0, [pc, #8]	; (8004294 <readGps+0x14>)
 800428c:	4798      	blx	r3
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200035b0 	.word	0x200035b0

08004298 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <setDefaultClbcks+0x20>)
 800429e:	4a07      	ldr	r2, [pc, #28]	; (80042bc <setDefaultClbcks+0x24>)
 80042a0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <setDefaultClbcks+0x28>)
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <setDefaultClbcks+0x2c>)
 80042a6:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &readGps;
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <setDefaultClbcks+0x30>)
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <setDefaultClbcks+0x34>)
 80042ac:	611a      	str	r2, [r3, #16]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000568 	.word	0x20000568
 80042bc:	08001ccd 	.word	0x08001ccd
 80042c0:	200005b0 	.word	0x200005b0
 80042c4:	08001cdd 	.word	0x08001cdd
 80042c8:	2000058c 	.word	0x2000058c
 80042cc:	08004281 	.word	0x08004281

080042d0 <gpsSetup>:

void gpsSetup(void){
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80042d4:	f7ff ffe0 	bl	8004298 <setDefaultClbcks>

}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <gpsMain>:

void gpsMain(void){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80042e2:	2300      	movs	r3, #0
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
 80042f4:	615a      	str	r2, [r3, #20]
 80042f6:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "GPS will be shown");
 80042f8:	463b      	mov	r3, r7
 80042fa:	4907      	ldr	r1, [pc, #28]	; (8004318 <gpsMain+0x3c>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f009 f891 	bl	800d424 <siprintf>
	lcdPutStr(0, 0, tempStr, font_13_calibri);
 8004302:	463a      	mov	r2, r7
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <gpsMain+0x40>)
 8004306:	2100      	movs	r1, #0
 8004308:	2000      	movs	r0, #0
 800430a:	f7fd ff2d 	bl	8002168 <lcdPutStr>
//	lcdPutStr(0,210, tempStr, font_13_calibri);
//	sprintf(&tempStr, "%s", gpsDev.buffer);



}
 800430e:	bf00      	nop
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	080139b4 	.word	0x080139b4
 800431c:	080159a8 	.word	0x080159a8

08004320 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <setDefaultClbcks+0x1c>)
 8004326:	4a06      	ldr	r2, [pc, #24]	; (8004340 <setDefaultClbcks+0x20>)
 8004328:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <setDefaultClbcks+0x24>)
 800432c:	4a06      	ldr	r2, [pc, #24]	; (8004348 <setDefaultClbcks+0x28>)
 800432e:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000568 	.word	0x20000568
 8004340:	08001ccd 	.word	0x08001ccd
 8004344:	200005b0 	.word	0x200005b0
 8004348:	08001cdd 	.word	0x08001cdd

0800434c <localSetup>:
void localSetup(void){
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004350:	f7ff ffe6 	bl	8004320 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <localSetup+0x50>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <localSetup+0x54>)
 800435c:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <localSetup+0x50>)
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	461a      	mov	r2, r3
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <localSetup+0x54>)
 8004366:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <localSetup+0x50>)
 800436a:	789b      	ldrb	r3, [r3, #2]
 800436c:	461a      	mov	r2, r3
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <localSetup+0x54>)
 8004370:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <localSetup+0x58>)
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	461a      	mov	r2, r3
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <localSetup+0x54>)
 800437a:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <localSetup+0x58>)
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	3b01      	subs	r3, #1
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <localSetup+0x54>)
 8004384:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <localSetup+0x58>)
 8004388:	78db      	ldrb	r3, [r3, #3]
 800438a:	3364      	adds	r3, #100	; 0x64
 800438c:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <localSetup+0x54>)
 800438e:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004390:	4803      	ldr	r0, [pc, #12]	; (80043a0 <localSetup+0x54>)
 8004392:	f007 fff9 	bl	800c388 <mktime>
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000357c 	.word	0x2000357c
 80043a0:	20003a3c 	.word	0x20003a3c
 80043a4:	20003590 	.word	0x20003590

080043a8 <localMain>:


void localMain(void){
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b0c2      	sub	sp, #264	; 0x108
 80043ae:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 80043b0:	4bdd      	ldr	r3, [pc, #884]	; (8004728 <localMain+0x380>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4bdd      	ldr	r3, [pc, #884]	; (800472c <localMain+0x384>)
 80043b8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80043ba:	4bdb      	ldr	r3, [pc, #876]	; (8004728 <localMain+0x380>)
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	461a      	mov	r2, r3
 80043c0:	4bda      	ldr	r3, [pc, #872]	; (800472c <localMain+0x384>)
 80043c2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80043c4:	4bd8      	ldr	r3, [pc, #864]	; (8004728 <localMain+0x380>)
 80043c6:	789b      	ldrb	r3, [r3, #2]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4bd8      	ldr	r3, [pc, #864]	; (800472c <localMain+0x384>)
 80043cc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80043ce:	4bd8      	ldr	r3, [pc, #864]	; (8004730 <localMain+0x388>)
 80043d0:	789b      	ldrb	r3, [r3, #2]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4bd5      	ldr	r3, [pc, #852]	; (800472c <localMain+0x384>)
 80043d6:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80043d8:	4bd5      	ldr	r3, [pc, #852]	; (8004730 <localMain+0x388>)
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4ad3      	ldr	r2, [pc, #844]	; (800472c <localMain+0x384>)
 80043e0:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80043e2:	4bd3      	ldr	r3, [pc, #844]	; (8004730 <localMain+0x388>)
 80043e4:	78db      	ldrb	r3, [r3, #3]
 80043e6:	3364      	adds	r3, #100	; 0x64
 80043e8:	4ad0      	ldr	r2, [pc, #832]	; (800472c <localMain+0x384>)
 80043ea:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 80043ec:	48cf      	ldr	r0, [pc, #828]	; (800472c <localMain+0x384>)
 80043ee:	f007 ffcb 	bl	800c388 <mktime>

	char textBuffer[50] = {0};
 80043f2:	2300      	movs	r3, #0
 80043f4:	657b      	str	r3, [r7, #84]	; 0x54
 80043f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043fa:	222e      	movs	r2, #46	; 0x2e
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f007 fee2 	bl	800c1c8 <memset>
	char textBuffer2[50] = {0};
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440c:	222e      	movs	r2, #46	; 0x2e
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f007 fed9 	bl	800c1c8 <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8004416:	4bc5      	ldr	r3, [pc, #788]	; (800472c <localMain+0x384>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	1d9a      	adds	r2, r3, #6
 800441c:	4bc5      	ldr	r3, [pc, #788]	; (8004734 <localMain+0x38c>)
 800441e:	fb83 1302 	smull	r1, r3, r3, r2
 8004422:	4413      	add	r3, r2
 8004424:	1099      	asrs	r1, r3, #2
 8004426:	17d3      	asrs	r3, r2, #31
 8004428:	1ac9      	subs	r1, r1, r3
 800442a:	460b      	mov	r3, r1
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	1a5b      	subs	r3, r3, r1
 8004430:	1ad1      	subs	r1, r2, r3
 8004432:	b2cb      	uxtb	r3, r1
 8004434:	3301      	adds	r3, #1
 8004436:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 800443a:	4bbc      	ldr	r3, [pc, #752]	; (800472c <localMain+0x384>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f103 0208 	add.w	r2, r3, #8
 8004442:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	4aba      	ldr	r2, [pc, #744]	; (8004734 <localMain+0x38c>)
 800444a:	fb82 1203 	smull	r1, r2, r2, r3
 800444e:	441a      	add	r2, r3
 8004450:	1092      	asrs	r2, r2, #2
 8004452:	17db      	asrs	r3, r3, #31
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 800445a:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 800445e:	4bb3      	ldr	r3, [pc, #716]	; (800472c <localMain+0x384>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	3301      	adds	r3, #1
 8004464:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004468:	49b3      	ldr	r1, [pc, #716]	; (8004738 <localMain+0x390>)
 800446a:	f008 ffdb 	bl	800d424 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 800446e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004472:	4bb2      	ldr	r3, [pc, #712]	; (800473c <localMain+0x394>)
 8004474:	210a      	movs	r1, #10
 8004476:	200a      	movs	r0, #10
 8004478:	f7fd fe76 	bl	8002168 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 800447c:	48ab      	ldr	r0, [pc, #684]	; (800472c <localMain+0x384>)
 800447e:	f007 fde9 	bl	800c054 <asctime>
 8004482:	4602      	mov	r2, r0
 8004484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f008 ffca 	bl	800d424 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8004490:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004494:	4baa      	ldr	r3, [pc, #680]	; (8004740 <localMain+0x398>)
 8004496:	210a      	movs	r1, #10
 8004498:	20aa      	movs	r0, #170	; 0xaa
 800449a:	f7fd fe65 	bl	8002168 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 800449e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80044a2:	4ba2      	ldr	r3, [pc, #648]	; (800472c <localMain+0x384>)
 80044a4:	4aa7      	ldr	r2, [pc, #668]	; (8004744 <localMain+0x39c>)
 80044a6:	2128      	movs	r1, #40	; 0x28
 80044a8:	f009 fd86 	bl	800dfb8 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 80044ac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80044b0:	4ba3      	ldr	r3, [pc, #652]	; (8004740 <localMain+0x398>)
 80044b2:	2116      	movs	r1, #22
 80044b4:	20aa      	movs	r0, #170	; 0xaa
 80044b6:	f7fd fe57 	bl	8002168 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 80044ba:	4b9c      	ldr	r3, [pc, #624]	; (800472c <localMain+0x384>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 80044c2:	4b9a      	ldr	r3, [pc, #616]	; (800472c <localMain+0x384>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 80044ca:	4b98      	ldr	r3, [pc, #608]	; (800472c <localMain+0x384>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 80044d2:	2302      	movs	r3, #2
 80044d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 80044d8:	4b94      	ldr	r3, [pc, #592]	; (800472c <localMain+0x384>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 80044e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	1acb      	subs	r3, r1, r3
 80044f2:	3b0c      	subs	r3, #12
 80044f4:	4994      	ldr	r1, [pc, #592]	; (8004748 <localMain+0x3a0>)
 80044f6:	fb81 0103 	smull	r0, r1, r1, r3
 80044fa:	1089      	asrs	r1, r1, #2
 80044fc:	17db      	asrs	r3, r3, #31
 80044fe:	1acb      	subs	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f828 	bl	8000558 <__aeabi_i2d>
 8004508:	a371      	add	r3, pc, #452	; (adr r3, 80046d0 <localMain+0x328>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fc f88d 	bl	800062c <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f7fc fb5f 	bl	8000bdc <__aeabi_d2f>
 800451e:	4603      	mov	r3, r0
 8004520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8004524:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004528:	f7fc f828 	bl	800057c <__aeabi_f2d>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	ec43 2b10 	vmov	d0, r2, r3
 8004534:	f00c fc7c 	bl	8010e30 <cos>
 8004538:	ec51 0b10 	vmov	r0, r1, d0
 800453c:	a366      	add	r3, pc, #408	; (adr r3, 80046d8 <localMain+0x330>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fc f873 	bl	800062c <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	a364      	add	r3, pc, #400	; (adr r3, 80046e0 <localMain+0x338>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fb feb4 	bl	80002c0 <__adddf3>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4690      	mov	r8, r2
 800455e:	4699      	mov	r9, r3
 8004560:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004564:	f7fc f80a 	bl	800057c <__aeabi_f2d>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	ec43 2b10 	vmov	d0, r2, r3
 8004570:	f00c fcb2 	bl	8010ed8 <sin>
 8004574:	ec51 0b10 	vmov	r0, r1, d0
 8004578:	a35b      	add	r3, pc, #364	; (adr r3, 80046e8 <localMain+0x340>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f855 	bl	800062c <__aeabi_dmul>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4640      	mov	r0, r8
 8004588:	4649      	mov	r1, r9
 800458a:	f7fb fe97 	bl	80002bc <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4690      	mov	r8, r2
 8004594:	4699      	mov	r9, r3
 8004596:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800459a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800459e:	ee17 0a90 	vmov	r0, s15
 80045a2:	f7fb ffeb 	bl	800057c <__aeabi_f2d>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	ec43 2b10 	vmov	d0, r2, r3
 80045ae:	f00c fc3f 	bl	8010e30 <cos>
 80045b2:	ec51 0b10 	vmov	r0, r1, d0
 80045b6:	a34e      	add	r3, pc, #312	; (adr r3, 80046f0 <localMain+0x348>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fc f836 	bl	800062c <__aeabi_dmul>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4640      	mov	r0, r8
 80045c6:	4649      	mov	r1, r9
 80045c8:	f7fb fe78 	bl	80002bc <__aeabi_dsub>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4690      	mov	r8, r2
 80045d2:	4699      	mov	r9, r3
 80045d4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80045d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045dc:	ee17 0a90 	vmov	r0, s15
 80045e0:	f7fb ffcc 	bl	800057c <__aeabi_f2d>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	ec43 2b10 	vmov	d0, r2, r3
 80045ec:	f00c fc74 	bl	8010ed8 <sin>
 80045f0:	ec51 0b10 	vmov	r0, r1, d0
 80045f4:	a340      	add	r3, pc, #256	; (adr r3, 80046f8 <localMain+0x350>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f7fc f817 	bl	800062c <__aeabi_dmul>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4640      	mov	r0, r8
 8004604:	4649      	mov	r1, r9
 8004606:	f7fb fe59 	bl	80002bc <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	a33b      	add	r3, pc, #236	; (adr r3, 8004700 <localMain+0x358>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fc f808 	bl	800062c <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7fc fada 	bl	8000bdc <__aeabi_d2f>
 8004628:	4603      	mov	r3, r0
 800462a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 800462e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004632:	f7fb ffa3 	bl	800057c <__aeabi_f2d>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	ec43 2b10 	vmov	d0, r2, r3
 800463e:	f00c fbf7 	bl	8010e30 <cos>
 8004642:	ec51 0b10 	vmov	r0, r1, d0
 8004646:	a330      	add	r3, pc, #192	; (adr r3, 8004708 <localMain+0x360>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb ffee 	bl	800062c <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	a12e      	add	r1, pc, #184	; (adr r1, 8004710 <localMain+0x368>)
 8004656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800465a:	f7fb fe2f 	bl	80002bc <__aeabi_dsub>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800466a:	f7fb ff87 	bl	800057c <__aeabi_f2d>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	ec43 2b10 	vmov	d0, r2, r3
 8004676:	f00c fc2f 	bl	8010ed8 <sin>
 800467a:	ec51 0b10 	vmov	r0, r1, d0
 800467e:	a326      	add	r3, pc, #152	; (adr r3, 8004718 <localMain+0x370>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb ffd2 	bl	800062c <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4640      	mov	r0, r8
 800468e:	4649      	mov	r1, r9
 8004690:	f7fb fe16 	bl	80002c0 <__adddf3>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4690      	mov	r8, r2
 800469a:	4699      	mov	r9, r3
 800469c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80046a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046a4:	ee17 0a90 	vmov	r0, s15
 80046a8:	f7fb ff68 	bl	800057c <__aeabi_f2d>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	ec43 2b10 	vmov	d0, r2, r3
 80046b4:	f00c fbbc 	bl	8010e30 <cos>
 80046b8:	ec51 0b10 	vmov	r0, r1, d0
 80046bc:	a318      	add	r3, pc, #96	; (adr r3, 8004720 <localMain+0x378>)
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f7fb ffb3 	bl	800062c <__aeabi_dmul>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	e03f      	b.n	800474c <localMain+0x3a4>
 80046cc:	f3af 8000 	nop.w
 80046d0:	d4b3ac9a 	.word	0xd4b3ac9a
 80046d4:	3f91a099 	.word	0x3f91a099
 80046d8:	ba2be059 	.word	0xba2be059
 80046dc:	3f5e9af5 	.word	0x3f5e9af5
 80046e0:	30553261 	.word	0x30553261
 80046e4:	3f13a92a 	.word	0x3f13a92a
 80046e8:	83e8576d 	.word	0x83e8576d
 80046ec:	3fa06c65 	.word	0x3fa06c65
 80046f0:	183f91e6 	.word	0x183f91e6
 80046f4:	3f8dee78 	.word	0x3f8dee78
 80046f8:	fe260b2d 	.word	0xfe260b2d
 80046fc:	3fa4ea28 	.word	0x3fa4ea28
 8004700:	8f5c28f6 	.word	0x8f5c28f6
 8004704:	406ca5c2 	.word	0x406ca5c2
 8004708:	8051c9f7 	.word	0x8051c9f7
 800470c:	3fd99828 	.word	0x3fd99828
 8004710:	7c0f4517 	.word	0x7c0f4517
 8004714:	3f7c560c 	.word	0x3f7c560c
 8004718:	dd50a88f 	.word	0xdd50a88f
 800471c:	3fb1fc5c 	.word	0x3fb1fc5c
 8004720:	cfc829d0 	.word	0xcfc829d0
 8004724:	3f7bae46 	.word	0x3f7bae46
 8004728:	2000357c 	.word	0x2000357c
 800472c:	20003a3c 	.word	0x20003a3c
 8004730:	20003590 	.word	0x20003590
 8004734:	92492493 	.word	0x92492493
 8004738:	08013a80 	.word	0x08013a80
 800473c:	08016e80 	.word	0x08016e80
 8004740:	08016a04 	.word	0x08016a04
 8004744:	08013a90 	.word	0x08013a90
 8004748:	2aaaaaab 	.word	0x2aaaaaab
 800474c:	4640      	mov	r0, r8
 800474e:	4649      	mov	r1, r9
 8004750:	f7fb fdb4 	bl	80002bc <__aeabi_dsub>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4690      	mov	r8, r2
 800475a:	4699      	mov	r9, r3
 800475c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004760:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004764:	ee17 0a90 	vmov	r0, s15
 8004768:	f7fb ff08 	bl	800057c <__aeabi_f2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	ec43 2b10 	vmov	d0, r2, r3
 8004774:	f00c fbb0 	bl	8010ed8 <sin>
 8004778:	ec51 0b10 	vmov	r0, r1, d0
 800477c:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb ff52 	bl	800062c <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4640      	mov	r0, r8
 800478e:	4649      	mov	r1, r9
 8004790:	f7fb fd96 	bl	80002c0 <__adddf3>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4690      	mov	r8, r2
 800479a:	4699      	mov	r9, r3
 800479c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80047a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80047a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a8:	ee17 0a90 	vmov	r0, s15
 80047ac:	f7fb fee6 	bl	800057c <__aeabi_f2d>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	ec43 2b10 	vmov	d0, r2, r3
 80047b8:	f00c fb3a 	bl	8010e30 <cos>
 80047bc:	ec51 0b10 	vmov	r0, r1, d0
 80047c0:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb ff30 	bl	800062c <__aeabi_dmul>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	f7fb fd72 	bl	80002bc <__aeabi_dsub>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4690      	mov	r8, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80047e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80047e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ec:	ee17 0a90 	vmov	r0, s15
 80047f0:	f7fb fec4 	bl	800057c <__aeabi_f2d>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	ec43 2b10 	vmov	d0, r2, r3
 80047fc:	f00c fb6c 	bl	8010ed8 <sin>
 8004800:	ec51 0b10 	vmov	r0, r1, d0
 8004804:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb ff0e 	bl	800062c <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4640      	mov	r0, r8
 8004816:	4649      	mov	r1, r9
 8004818:	f7fb fd52 	bl	80002c0 <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fc f9da 	bl	8000bdc <__aeabi_d2f>
 8004828:	4603      	mov	r3, r0
 800482a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	4be9      	ldr	r3, [pc, #932]	; (8004bd8 <localMain+0x830>)
 8004834:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	4be7      	ldr	r3, [pc, #924]	; (8004bdc <localMain+0x834>)
 800483e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8004842:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004846:	f7fb fe99 	bl	800057c <__aeabi_f2d>
 800484a:	4680      	mov	r8, r0
 800484c:	4689      	mov	r9, r1
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	4be3      	ldr	r3, [pc, #908]	; (8004be0 <localMain+0x838>)
 8004854:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004858:	f7fb fee8 	bl	800062c <__aeabi_dmul>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4640      	mov	r0, r8
 8004862:	4649      	mov	r1, r9
 8004864:	f7fb fd2c 	bl	80002c0 <__adddf3>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4690      	mov	r8, r2
 800486e:	4699      	mov	r9, r3
 8004870:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe6b 	bl	8000558 <__aeabi_i2d>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4640      	mov	r0, r8
 8004888:	4649      	mov	r1, r9
 800488a:	f7fb fd17 	bl	80002bc <__aeabi_dsub>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	f7fc f9a1 	bl	8000bdc <__aeabi_d2f>
 800489a:	4603      	mov	r3, r0
 800489c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 80048a0:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80048b2:	4413      	add	r3, r2
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c8:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8004be4 <localMain+0x83c>
 80048cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80048d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d4:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80048d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048dc:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80048e0:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80048e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80048e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ec:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004be8 <localMain+0x840>
 80048f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048f4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 80048f8:	a3b5      	add	r3, pc, #724	; (adr r3, 8004bd0 <localMain+0x828>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004902:	f7fb fe93 	bl	800062c <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	4bb6      	ldr	r3, [pc, #728]	; (8004bec <localMain+0x844>)
 8004914:	f7fb ffb4 	bl	8000880 <__aeabi_ddiv>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	ec43 2b17 	vmov	d7, r2, r3
 8004920:	eeb0 0a47 	vmov.f32	s0, s14
 8004924:	eef0 0a67 	vmov.f32	s1, s15
 8004928:	f00c fad6 	bl	8010ed8 <sin>
 800492c:	ec59 8b10 	vmov	r8, r9, d0
 8004930:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004934:	f7fb fe22 	bl	800057c <__aeabi_f2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	ec43 2b10 	vmov	d0, r2, r3
 8004940:	f00c faca 	bl	8010ed8 <sin>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	4640      	mov	r0, r8
 800494a:	4649      	mov	r1, r9
 800494c:	f7fb fe6e 	bl	800062c <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4690      	mov	r8, r2
 8004956:	4699      	mov	r9, r3
 8004958:	a39d      	add	r3, pc, #628	; (adr r3, 8004bd0 <localMain+0x828>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004962:	f7fb fe63 	bl	800062c <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	4b9e      	ldr	r3, [pc, #632]	; (8004bec <localMain+0x844>)
 8004974:	f7fb ff84 	bl	8000880 <__aeabi_ddiv>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	ec43 2b17 	vmov	d7, r2, r3
 8004980:	eeb0 0a47 	vmov.f32	s0, s14
 8004984:	eef0 0a67 	vmov.f32	s1, s15
 8004988:	f00c fa52 	bl	8010e30 <cos>
 800498c:	ec5b ab10 	vmov	sl, fp, d0
 8004990:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004994:	f7fb fdf2 	bl	800057c <__aeabi_f2d>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	ec43 2b10 	vmov	d0, r2, r3
 80049a0:	f00c fa46 	bl	8010e30 <cos>
 80049a4:	ec53 2b10 	vmov	r2, r3, d0
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	f7fb fe3e 	bl	800062c <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4692      	mov	sl, r2
 80049b6:	469b      	mov	fp, r3
 80049b8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80049bc:	f7fb fdde 	bl	800057c <__aeabi_f2d>
 80049c0:	a383      	add	r3, pc, #524	; (adr r3, 8004bd0 <localMain+0x828>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe31 	bl	800062c <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	4b85      	ldr	r3, [pc, #532]	; (8004bec <localMain+0x844>)
 80049d8:	f7fb ff52 	bl	8000880 <__aeabi_ddiv>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	ec43 2b17 	vmov	d7, r2, r3
 80049e4:	eeb0 0a47 	vmov.f32	s0, s14
 80049e8:	eef0 0a67 	vmov.f32	s1, s15
 80049ec:	f00c fa20 	bl	8010e30 <cos>
 80049f0:	ec53 2b10 	vmov	r2, r3, d0
 80049f4:	4650      	mov	r0, sl
 80049f6:	4659      	mov	r1, fp
 80049f8:	f7fb fe18 	bl	800062c <__aeabi_dmul>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fb fc5c 	bl	80002c0 <__adddf3>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7fc f8e4 	bl	8000bdc <__aeabi_d2f>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 8004a1a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004a1e:	f7fb fdad 	bl	800057c <__aeabi_f2d>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	ec43 2b10 	vmov	d0, r2, r3
 8004a2a:	f00c fae1 	bl	8010ff0 <acos>
 8004a2e:	ec53 2b10 	vmov	r2, r3, d0
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	f7fc f8d1 	bl	8000bdc <__aeabi_d2f>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8004a40:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004a44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a50:	ee17 0a90 	vmov	r0, s15
 8004a54:	f7fb fd92 	bl	800057c <__aeabi_f2d>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	ec43 2b10 	vmov	d0, r2, r3
 8004a60:	f00c fb6a 	bl	8011138 <sqrt>
 8004a64:	ec53 2b10 	vmov	r2, r3, d0
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fc f8b6 	bl	8000bdc <__aeabi_d2f>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8004a76:	a356      	add	r3, pc, #344	; (adr r3, 8004bd0 <localMain+0x828>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a80:	f7fb fdd4 	bl	800062c <__aeabi_dmul>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	4b56      	ldr	r3, [pc, #344]	; (8004bec <localMain+0x844>)
 8004a92:	f7fb fef5 	bl	8000880 <__aeabi_ddiv>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	ec43 2b17 	vmov	d7, r2, r3
 8004a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004aa2:	eef0 0a67 	vmov.f32	s1, s15
 8004aa6:	f00c fa17 	bl	8010ed8 <sin>
 8004aaa:	ec59 8b10 	vmov	r8, r9, d0
 8004aae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004ab2:	f7fb fd63 	bl	800057c <__aeabi_f2d>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f7fb fdb5 	bl	800062c <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004ace:	f7fb fd55 	bl	800057c <__aeabi_f2d>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	ec43 2b10 	vmov	d0, r2, r3
 8004ada:	f00c f9fd 	bl	8010ed8 <sin>
 8004ade:	ec53 2b10 	vmov	r2, r3, d0
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb fbe9 	bl	80002bc <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004af4:	a336      	add	r3, pc, #216	; (adr r3, 8004bd0 <localMain+0x828>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004afe:	f7fb fd95 	bl	800062c <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <localMain+0x844>)
 8004b10:	f7fb feb6 	bl	8000880 <__aeabi_ddiv>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	ec43 2b17 	vmov	d7, r2, r3
 8004b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b20:	eef0 0a67 	vmov.f32	s1, s15
 8004b24:	f00c f984 	bl	8010e30 <cos>
 8004b28:	ec59 8b10 	vmov	r8, r9, d0
 8004b2c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004b30:	f7fb fd24 	bl	800057c <__aeabi_f2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	f7fb fd76 	bl	800062c <__aeabi_dmul>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f7fb fe9a 	bl	8000880 <__aeabi_ddiv>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	ec43 2b17 	vmov	d7, r2, r3
 8004b54:	eeb0 0a47 	vmov.f32	s0, s14
 8004b58:	eef0 0a67 	vmov.f32	s1, s15
 8004b5c:	f00c fa48 	bl	8010ff0 <acos>
 8004b60:	ec53 2b10 	vmov	r2, r3, d0
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	f7fc f838 	bl	8000bdc <__aeabi_d2f>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef1 7a67 	vneg.f32	s15, s15
 8004b76:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8004b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <localMain+0x848>)
 8004b84:	461c      	mov	r4, r3
 8004b86:	4615      	mov	r5, r2
 8004b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8004b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <localMain+0x84c>)
 8004ba6:	f7fb fb8b 	bl	80002c0 <__adddf3>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	a307      	add	r3, pc, #28	; (adr r3, 8004bd0 <localMain+0x828>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb fd38 	bl	800062c <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <localMain+0x844>)
 8004bca:	f7fb fe59 	bl	8000880 <__aeabi_ddiv>
 8004bce:	e01f      	b.n	8004c10 <localMain+0x868>
 8004bd0:	54442d18 	.word	0x54442d18
 8004bd4:	400921fb 	.word	0x400921fb
 8004bd8:	40310000 	.word	0x40310000
 8004bdc:	40498000 	.word	0x40498000
 8004be0:	40100000 	.word	0x40100000
 8004be4:	42700000 	.word	0x42700000
 8004be8:	43340000 	.word	0x43340000
 8004bec:	40668000 	.word	0x40668000
 8004bf0:	08013b68 	.word	0x08013b68
 8004bf4:	40568000 	.word	0x40568000
 8004bf8:	ab324852 	.word	0xab324852
 8004bfc:	3f4db877 	.word	0x3f4db877
 8004c00:	d9839475 	.word	0xd9839475
 8004c04:	3f661804 	.word	0x3f661804
 8004c08:	e646f156 	.word	0xe646f156
 8004c0c:	3f583f91 	.word	0x3f583f91
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8004c18:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8004c1c:	f00c f908 	bl	8010e30 <cos>
 8004c20:	ec55 4b10 	vmov	r4, r5, d0
 8004c24:	a3f0      	add	r3, pc, #960	; (adr r3, 8004fe8 <localMain+0xc40>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004c2e:	f7fb fcfd 	bl	800062c <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	4bec      	ldr	r3, [pc, #944]	; (8004ff0 <localMain+0xc48>)
 8004c40:	f7fb fe1e 	bl	8000880 <__aeabi_ddiv>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	ec43 2b17 	vmov	d7, r2, r3
 8004c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c50:	eef0 0a67 	vmov.f32	s1, s15
 8004c54:	f00c f8ec 	bl	8010e30 <cos>
 8004c58:	ec59 8b10 	vmov	r8, r9, d0
 8004c5c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004c60:	f7fb fc8c 	bl	800057c <__aeabi_f2d>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	ec43 2b10 	vmov	d0, r2, r3
 8004c6c:	f00c f8e0 	bl	8010e30 <cos>
 8004c70:	ec53 2b10 	vmov	r2, r3, d0
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb fcd8 	bl	800062c <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb fdfc 	bl	8000880 <__aeabi_ddiv>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	461d      	mov	r5, r3
 8004c90:	a3d5      	add	r3, pc, #852	; (adr r3, 8004fe8 <localMain+0xc40>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004c9a:	f7fb fcc7 	bl	800062c <__aeabi_dmul>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	4bd1      	ldr	r3, [pc, #836]	; (8004ff0 <localMain+0xc48>)
 8004cac:	f7fb fde8 	bl	8000880 <__aeabi_ddiv>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	ec43 2b17 	vmov	d7, r2, r3
 8004cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8004cbc:	eef0 0a67 	vmov.f32	s1, s15
 8004cc0:	f00c f962 	bl	8010f88 <tan>
 8004cc4:	ec59 8b10 	vmov	r8, r9, d0
 8004cc8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004ccc:	f7fb fc56 	bl	800057c <__aeabi_f2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	ec43 2b10 	vmov	d0, r2, r3
 8004cd8:	f00c f956 	bl	8010f88 <tan>
 8004cdc:	ec53 2b10 	vmov	r2, r3, d0
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fca2 	bl	800062c <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4620      	mov	r0, r4
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f7fb fae4 	bl	80002bc <__aeabi_dsub>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	ec43 2b17 	vmov	d7, r2, r3
 8004cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8004d00:	eef0 0a67 	vmov.f32	s1, s15
 8004d04:	f00c f974 	bl	8010ff0 <acos>
 8004d08:	ec53 2b10 	vmov	r2, r3, d0
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb ff64 	bl	8000bdc <__aeabi_d2f>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 8004d1a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004d1e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004ff4 <localMain+0xc4c>
 8004d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d26:	ee17 0a90 	vmov	r0, s15
 8004d2a:	f7fb fc27 	bl	800057c <__aeabi_f2d>
 8004d2e:	a3ae      	add	r3, pc, #696	; (adr r3, 8004fe8 <localMain+0xc40>)
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f7fb fda4 	bl	8000880 <__aeabi_ddiv>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004d44:	f7fb fabc 	bl	80002c0 <__adddf3>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	4ba8      	ldr	r3, [pc, #672]	; (8004ff8 <localMain+0xc50>)
 8004d56:	f7fb fc69 	bl	800062c <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	49a6      	ldr	r1, [pc, #664]	; (8004ffc <localMain+0xc54>)
 8004d64:	f7fb faaa 	bl	80002bc <__aeabi_dsub>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	461d      	mov	r5, r3
 8004d70:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004d74:	f7fb fc02 	bl	800057c <__aeabi_f2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb fa9c 	bl	80002bc <__aeabi_dsub>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fbdd 	bl	8000558 <__aeabi_i2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fa8b 	bl	80002c0 <__adddf3>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fb feeb 	bl	8000b8c <__aeabi_d2iz>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 8004dbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004dc0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004ff4 <localMain+0xc4c>
 8004dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dc8:	ee17 0a90 	vmov	r0, s15
 8004dcc:	f7fb fbd6 	bl	800057c <__aeabi_f2d>
 8004dd0:	a385      	add	r3, pc, #532	; (adr r3, 8004fe8 <localMain+0xc40>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fd53 	bl	8000880 <__aeabi_ddiv>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004de2:	f7fb fa6b 	bl	80002bc <__aeabi_dsub>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	4b81      	ldr	r3, [pc, #516]	; (8004ff8 <localMain+0xc50>)
 8004df4:	f7fb fc1a 	bl	800062c <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	f04f 0000 	mov.w	r0, #0
 8004e00:	497e      	ldr	r1, [pc, #504]	; (8004ffc <localMain+0xc54>)
 8004e02:	f7fb fa5b 	bl	80002bc <__aeabi_dsub>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004e12:	f7fb fbb3 	bl	800057c <__aeabi_f2d>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f7fb fa4d 	bl	80002bc <__aeabi_dsub>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4614      	mov	r4, r2
 8004e28:	461d      	mov	r5, r3
 8004e2a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb fb8e 	bl	8000558 <__aeabi_i2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb fa3c 	bl	80002c0 <__adddf3>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f7fb fe9c 	bl	8000b8c <__aeabi_d2iz>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	4b66      	ldr	r3, [pc, #408]	; (8004ff8 <localMain+0xc50>)
 8004e60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004e64:	f7fb fbe2 	bl	800062c <__aeabi_dmul>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	f04f 0000 	mov.w	r0, #0
 8004e70:	4962      	ldr	r1, [pc, #392]	; (8004ffc <localMain+0xc54>)
 8004e72:	f7fb fa23 	bl	80002bc <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004e82:	f7fb fb7b 	bl	800057c <__aeabi_f2d>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	f7fb fa15 	bl	80002bc <__aeabi_dsub>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4614      	mov	r4, r2
 8004e98:	461d      	mov	r5, r3
 8004e9a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fb56 	bl	8000558 <__aeabi_i2d>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7fb fa04 	bl	80002c0 <__adddf3>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb fe64 	bl	8000b8c <__aeabi_d2iz>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8004eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ece:	4a4c      	ldr	r2, [pc, #304]	; (8005000 <localMain+0xc58>)
 8004ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ed4:	441a      	add	r2, r3
 8004ed6:	1152      	asrs	r2, r2, #5
 8004ed8:	17db      	asrs	r3, r3, #31
 8004eda:	1ad4      	subs	r4, r2, r3
 8004edc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <localMain+0xc58>)
 8004ee2:	fb83 1302 	smull	r1, r3, r3, r2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	1159      	asrs	r1, r3, #5
 8004eea:	17d3      	asrs	r3, r2, #31
 8004eec:	1ac9      	subs	r1, r1, r3
 8004eee:	460b      	mov	r3, r1
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a5b      	subs	r3, r3, r1
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	1ad1      	subs	r1, r2, r3
 8004ef8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004efc:	460b      	mov	r3, r1
 8004efe:	4622      	mov	r2, r4
 8004f00:	4940      	ldr	r1, [pc, #256]	; (8005004 <localMain+0xc5c>)
 8004f02:	f008 fa8f 	bl	800d424 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 8004f06:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f0a:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <localMain+0xc60>)
 8004f0c:	211c      	movs	r1, #28
 8004f0e:	200a      	movs	r0, #10
 8004f10:	f7fd f92a 	bl	8002168 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8004f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f18:	4a39      	ldr	r2, [pc, #228]	; (8005000 <localMain+0xc58>)
 8004f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8004f1e:	441a      	add	r2, r3
 8004f20:	1152      	asrs	r2, r2, #5
 8004f22:	17db      	asrs	r3, r3, #31
 8004f24:	1ad4      	subs	r4, r2, r3
 8004f26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f2a:	4b35      	ldr	r3, [pc, #212]	; (8005000 <localMain+0xc58>)
 8004f2c:	fb83 1302 	smull	r1, r3, r3, r2
 8004f30:	4413      	add	r3, r2
 8004f32:	1159      	asrs	r1, r3, #5
 8004f34:	17d3      	asrs	r3, r2, #31
 8004f36:	1ac9      	subs	r1, r1, r3
 8004f38:	460b      	mov	r3, r1
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a5b      	subs	r3, r3, r1
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	1ad1      	subs	r1, r2, r3
 8004f42:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004f46:	460b      	mov	r3, r1
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4930      	ldr	r1, [pc, #192]	; (800500c <localMain+0xc64>)
 8004f4c:	f008 fa6a 	bl	800d424 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 8004f50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f54:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <localMain+0xc60>)
 8004f56:	212c      	movs	r1, #44	; 0x2c
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fd f905 	bl	8002168 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8004f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f62:	4a27      	ldr	r2, [pc, #156]	; (8005000 <localMain+0xc58>)
 8004f64:	fb82 1203 	smull	r1, r2, r2, r3
 8004f68:	441a      	add	r2, r3
 8004f6a:	1152      	asrs	r2, r2, #5
 8004f6c:	17db      	asrs	r3, r3, #31
 8004f6e:	1ad4      	subs	r4, r2, r3
 8004f70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004f74:	4b22      	ldr	r3, [pc, #136]	; (8005000 <localMain+0xc58>)
 8004f76:	fb83 1302 	smull	r1, r3, r3, r2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	1159      	asrs	r1, r3, #5
 8004f7e:	17d3      	asrs	r3, r2, #31
 8004f80:	1ac9      	subs	r1, r1, r3
 8004f82:	460b      	mov	r3, r1
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	1ad1      	subs	r1, r2, r3
 8004f8c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004f90:	460b      	mov	r3, r1
 8004f92:	4622      	mov	r2, r4
 8004f94:	491e      	ldr	r1, [pc, #120]	; (8005010 <localMain+0xc68>)
 8004f96:	f008 fa45 	bl	800d424 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8004f9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <localMain+0xc60>)
 8004fa0:	213c      	movs	r1, #60	; 0x3c
 8004fa2:	200a      	movs	r0, #10
 8004fa4:	f7fd f8e0 	bl	8002168 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8004fa8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004fac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004ff4 <localMain+0xc4c>
 8004fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb4:	ee17 0a90 	vmov	r0, s15
 8004fb8:	f7fb fae0 	bl	800057c <__aeabi_f2d>
 8004fbc:	a30a      	add	r3, pc, #40	; (adr r3, 8004fe8 <localMain+0xc40>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fc5d 	bl	8000880 <__aeabi_ddiv>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	f04f 0000 	mov.w	r0, #0
 8004fce:	4911      	ldr	r1, [pc, #68]	; (8005014 <localMain+0xc6c>)
 8004fd0:	f7fb f974 	bl	80002bc <__aeabi_dsub>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004fdc:	490e      	ldr	r1, [pc, #56]	; (8005018 <localMain+0xc70>)
 8004fde:	f008 fa21 	bl	800d424 <siprintf>
 8004fe2:	e01b      	b.n	800501c <localMain+0xc74>
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	54442d18 	.word	0x54442d18
 8004fec:	400921fb 	.word	0x400921fb
 8004ff0:	40668000 	.word	0x40668000
 8004ff4:	43340000 	.word	0x43340000
 8004ff8:	40100000 	.word	0x40100000
 8004ffc:	40868000 	.word	0x40868000
 8005000:	88888889 	.word	0x88888889
 8005004:	08013aa4 	.word	0x08013aa4
 8005008:	08017908 	.word	0x08017908
 800500c:	08013ab8 	.word	0x08013ab8
 8005010:	08013ac8 	.word	0x08013ac8
 8005014:	40568000 	.word	0x40568000
 8005018:	08013adc 	.word	0x08013adc
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 800501c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <localMain+0xcc8>)
 8005022:	2150      	movs	r1, #80	; 0x50
 8005024:	200a      	movs	r0, #10
 8005026:	f7fd f89f 	bl	8002168 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 800502a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800502e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005036:	d51f      	bpl.n	8005078 <localMain+0xcd0>
 8005038:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800503c:	eef1 7a67 	vneg.f32	s15, s15
 8005040:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005074 <localMain+0xccc>
 8005044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005048:	ee17 0a90 	vmov	r0, s15
 800504c:	f7fb fa96 	bl	800057c <__aeabi_f2d>
 8005050:	a305      	add	r3, pc, #20	; (adr r3, 8005068 <localMain+0xcc0>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb fc13 	bl	8000880 <__aeabi_ddiv>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8005062:	e025      	b.n	80050b0 <localMain+0xd08>
 8005064:	f3af 8000 	nop.w
 8005068:	54442d18 	.word	0x54442d18
 800506c:	400921fb 	.word	0x400921fb
 8005070:	08017908 	.word	0x08017908
 8005074:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8005078:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800507c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005074 <localMain+0xccc>
 8005080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005084:	ee17 0a90 	vmov	r0, s15
 8005088:	f7fb fa78 	bl	800057c <__aeabi_f2d>
 800508c:	a3db      	add	r3, pc, #876	; (adr r3, 80053fc <localMain+0x1054>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb fbf5 	bl	8000880 <__aeabi_ddiv>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	4bcb      	ldr	r3, [pc, #812]	; (80053d0 <localMain+0x1028>)
 80050a4:	f7fb f90c 	bl	80002c0 <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 80050b0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80050b4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80050b8:	49c6      	ldr	r1, [pc, #792]	; (80053d4 <localMain+0x102c>)
 80050ba:	f008 f9b3 	bl	800d424 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 80050be:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050c2:	4bc5      	ldr	r3, [pc, #788]	; (80053d8 <localMain+0x1030>)
 80050c4:	2160      	movs	r1, #96	; 0x60
 80050c6:	200a      	movs	r0, #10
 80050c8:	f7fd f84e 	bl	8002168 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 80050cc:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	461a      	mov	r2, r3
 80050da:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050de:	4413      	add	r3, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb fa39 	bl	8000558 <__aeabi_i2d>
 80050e6:	4604      	mov	r4, r0
 80050e8:	460d      	mov	r5, r1
 80050ea:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb fa22 	bl	8000538 <__aeabi_ui2d>
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	4bb8      	ldr	r3, [pc, #736]	; (80053dc <localMain+0x1034>)
 80050fa:	f7fb fbc1 	bl	8000880 <__aeabi_ddiv>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	f7fb f8db 	bl	80002c0 <__adddf3>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4614      	mov	r4, r2
 8005110:	461d      	mov	r5, r3
 8005112:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005116:	f7fb fa1f 	bl	8000558 <__aeabi_i2d>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb f8cb 	bl	80002bc <__aeabi_dsub>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	4bab      	ldr	r3, [pc, #684]	; (80053e0 <localMain+0x1038>)
 8005134:	f7fb fa7a 	bl	800062c <__aeabi_dmul>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	4618      	mov	r0, r3
 800514c:	f7fb fa04 	bl	8000558 <__aeabi_i2d>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb fb92 	bl	8000880 <__aeabi_ddiv>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 8005164:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005168:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800516c:	499d      	ldr	r1, [pc, #628]	; (80053e4 <localMain+0x103c>)
 800516e:	f008 f959 	bl	800d424 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 8005172:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005176:	4b98      	ldr	r3, [pc, #608]	; (80053d8 <localMain+0x1030>)
 8005178:	2174      	movs	r1, #116	; 0x74
 800517a:	200a      	movs	r0, #10
 800517c:	f7fc fff4 	bl	8002168 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8005180:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	4a97      	ldr	r2, [pc, #604]	; (80053e8 <localMain+0x1040>)
 800518c:	fb82 1203 	smull	r1, r2, r2, r3
 8005190:	441a      	add	r2, r3
 8005192:	1152      	asrs	r2, r2, #5
 8005194:	17db      	asrs	r3, r3, #31
 8005196:	1ad4      	subs	r4, r2, r3
 8005198:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800519c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051a0:	1ad2      	subs	r2, r2, r3
 80051a2:	4b91      	ldr	r3, [pc, #580]	; (80053e8 <localMain+0x1040>)
 80051a4:	fb83 1302 	smull	r1, r3, r3, r2
 80051a8:	4413      	add	r3, r2
 80051aa:	1159      	asrs	r1, r3, #5
 80051ac:	17d3      	asrs	r3, r2, #31
 80051ae:	1ac9      	subs	r1, r1, r3
 80051b0:	460b      	mov	r3, r1
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a5b      	subs	r3, r3, r1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	1ad1      	subs	r1, r2, r3
 80051ba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80051be:	460b      	mov	r3, r1
 80051c0:	4622      	mov	r2, r4
 80051c2:	498a      	ldr	r1, [pc, #552]	; (80053ec <localMain+0x1044>)
 80051c4:	f008 f92e 	bl	800d424 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 80051c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80051cc:	4b82      	ldr	r3, [pc, #520]	; (80053d8 <localMain+0x1030>)
 80051ce:	2184      	movs	r1, #132	; 0x84
 80051d0:	200a      	movs	r0, #10
 80051d2:	f7fc ffc9 	bl	8002168 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 80051d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051da:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a83      	ldr	r2, [pc, #524]	; (80053f0 <localMain+0x1048>)
 80051e4:	fb82 1203 	smull	r1, r2, r2, r3
 80051e8:	441a      	add	r2, r3
 80051ea:	1292      	asrs	r2, r2, #10
 80051ec:	17db      	asrs	r3, r3, #31
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	330a      	adds	r3, #10
 80051f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 80051f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051fc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	4a7a      	ldr	r2, [pc, #488]	; (80053f0 <localMain+0x1048>)
 8005206:	fb82 1203 	smull	r1, r2, r2, r3
 800520a:	441a      	add	r2, r3
 800520c:	1292      	asrs	r2, r2, #10
 800520e:	17db      	asrs	r3, r3, #31
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	b29b      	uxth	r3, r3
 8005214:	330a      	adds	r3, #10
 8005216:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 800521a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800521e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	4a72      	ldr	r2, [pc, #456]	; (80053f0 <localMain+0x1048>)
 8005228:	fb82 1203 	smull	r1, r2, r2, r3
 800522c:	441a      	add	r2, r3
 800522e:	1292      	asrs	r2, r2, #10
 8005230:	17db      	asrs	r3, r3, #31
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	b29b      	uxth	r3, r3
 8005236:	330a      	adds	r3, #10
 8005238:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 800523c:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	461a      	mov	r2, r3
 800524a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800524e:	4413      	add	r3, r2
 8005250:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	4a65      	ldr	r2, [pc, #404]	; (80053f0 <localMain+0x1048>)
 800525a:	fb82 1203 	smull	r1, r2, r2, r3
 800525e:	441a      	add	r2, r3
 8005260:	1292      	asrs	r2, r2, #10
 8005262:	17db      	asrs	r3, r3, #31
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	330a      	adds	r3, #10
 800526a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 800526e:	2301      	movs	r3, #1
 8005270:	22a5      	movs	r2, #165	; 0xa5
 8005272:	f240 1185 	movw	r1, #389	; 0x185
 8005276:	200a      	movs	r0, #10
 8005278:	f7fd fbe0 	bl	8002a3c <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 800527c:	2301      	movs	r3, #1
 800527e:	22a7      	movs	r2, #167	; 0xa7
 8005280:	21a3      	movs	r1, #163	; 0xa3
 8005282:	200a      	movs	r0, #10
 8005284:	f7fc ff9e 	bl	80021c4 <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8005288:	2301      	movs	r3, #1
 800528a:	22a7      	movs	r2, #167	; 0xa7
 800528c:	21a3      	movs	r1, #163	; 0xa3
 800528e:	f240 1085 	movw	r0, #389	; 0x185
 8005292:	f7fc ff97 	bl	80021c4 <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 8005296:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800529a:	2302      	movs	r3, #2
 800529c:	22aa      	movs	r2, #170	; 0xaa
 800529e:	21a0      	movs	r1, #160	; 0xa0
 80052a0:	f7fc ff90 	bl	80021c4 <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 80052a4:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 80052a8:	2302      	movs	r3, #2
 80052aa:	22aa      	movs	r2, #170	; 0xaa
 80052ac:	21a0      	movs	r1, #160	; 0xa0
 80052ae:	f7fc ff89 	bl	80021c4 <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 80052b2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80052b6:	2302      	movs	r3, #2
 80052b8:	22aa      	movs	r2, #170	; 0xaa
 80052ba:	21a0      	movs	r1, #160	; 0xa0
 80052bc:	f7fc ff82 	bl	80021c4 <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 80052c0:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 80052c4:	2302      	movs	r3, #2
 80052c6:	22af      	movs	r2, #175	; 0xaf
 80052c8:	219b      	movs	r1, #155	; 0x9b
 80052ca:	f7fc ff7b 	bl	80021c4 <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 80052ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d2:	4a45      	ldr	r2, [pc, #276]	; (80053e8 <localMain+0x1040>)
 80052d4:	fb82 1203 	smull	r1, r2, r2, r3
 80052d8:	441a      	add	r2, r3
 80052da:	1152      	asrs	r2, r2, #5
 80052dc:	17db      	asrs	r3, r3, #31
 80052de:	1ad4      	subs	r4, r2, r3
 80052e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80052e4:	4b40      	ldr	r3, [pc, #256]	; (80053e8 <localMain+0x1040>)
 80052e6:	fb83 1302 	smull	r1, r3, r3, r2
 80052ea:	4413      	add	r3, r2
 80052ec:	1159      	asrs	r1, r3, #5
 80052ee:	17d3      	asrs	r3, r2, #31
 80052f0:	1ac9      	subs	r1, r1, r3
 80052f2:	460b      	mov	r3, r1
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a5b      	subs	r3, r3, r1
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	1ad1      	subs	r1, r2, r3
 80052fc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005300:	460b      	mov	r3, r1
 8005302:	4622      	mov	r2, r4
 8005304:	493b      	ldr	r1, [pc, #236]	; (80053f4 <localMain+0x104c>)
 8005306:	f008 f88d 	bl	800d424 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 800530a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800530e:	3b13      	subs	r3, #19
 8005310:	b298      	uxth	r0, r3
 8005312:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <localMain+0x1050>)
 8005318:	21aa      	movs	r1, #170	; 0xaa
 800531a:	f7fc ff25 	bl	8002168 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 800531e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005322:	4a31      	ldr	r2, [pc, #196]	; (80053e8 <localMain+0x1040>)
 8005324:	fb82 1203 	smull	r1, r2, r2, r3
 8005328:	441a      	add	r2, r3
 800532a:	1152      	asrs	r2, r2, #5
 800532c:	17db      	asrs	r3, r3, #31
 800532e:	1ad4      	subs	r4, r2, r3
 8005330:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005334:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <localMain+0x1040>)
 8005336:	fb83 1302 	smull	r1, r3, r3, r2
 800533a:	4413      	add	r3, r2
 800533c:	1159      	asrs	r1, r3, #5
 800533e:	17d3      	asrs	r3, r2, #31
 8005340:	1ac9      	subs	r1, r1, r3
 8005342:	460b      	mov	r3, r1
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a5b      	subs	r3, r3, r1
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	1ad1      	subs	r1, r2, r3
 800534c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005350:	460b      	mov	r3, r1
 8005352:	4622      	mov	r2, r4
 8005354:	4927      	ldr	r1, [pc, #156]	; (80053f4 <localMain+0x104c>)
 8005356:	f008 f865 	bl	800d424 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 800535a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800535e:	3b13      	subs	r3, #19
 8005360:	b298      	uxth	r0, r3
 8005362:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <localMain+0x1050>)
 8005368:	21aa      	movs	r1, #170	; 0xaa
 800536a:	f7fc fefd 	bl	8002168 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 800536e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <localMain+0x1040>)
 8005374:	fb82 1203 	smull	r1, r2, r2, r3
 8005378:	441a      	add	r2, r3
 800537a:	1152      	asrs	r2, r2, #5
 800537c:	17db      	asrs	r3, r3, #31
 800537e:	1ad4      	subs	r4, r2, r3
 8005380:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <localMain+0x1040>)
 8005386:	fb83 1302 	smull	r1, r3, r3, r2
 800538a:	4413      	add	r3, r2
 800538c:	1159      	asrs	r1, r3, #5
 800538e:	17d3      	asrs	r3, r2, #31
 8005390:	1ac9      	subs	r1, r1, r3
 8005392:	460b      	mov	r3, r1
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a5b      	subs	r3, r3, r1
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	1ad1      	subs	r1, r2, r3
 800539c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80053a0:	460b      	mov	r3, r1
 80053a2:	4622      	mov	r2, r4
 80053a4:	4913      	ldr	r1, [pc, #76]	; (80053f4 <localMain+0x104c>)
 80053a6:	f008 f83d 	bl	800d424 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 80053aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053ae:	3b13      	subs	r3, #19
 80053b0:	b298      	uxth	r0, r3
 80053b2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <localMain+0x1050>)
 80053b8:	21aa      	movs	r1, #170	; 0xaa
 80053ba:	f7fc fed5 	bl	8002168 <lcdPutStr>
}
 80053be:	bf00      	nop
 80053c0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w
 80053d0:	40768000 	.word	0x40768000
 80053d4:	08013b00 	.word	0x08013b00
 80053d8:	08017908 	.word	0x08017908
 80053dc:	404e0000 	.word	0x404e0000
 80053e0:	40590000 	.word	0x40590000
 80053e4:	08013b20 	.word	0x08013b20
 80053e8:	88888889 	.word	0x88888889
 80053ec:	08013b40 	.word	0x08013b40
 80053f0:	b60b60b7 	.word	0xb60b60b7
 80053f4:	08013b5c 	.word	0x08013b5c
 80053f8:	08016a04 	.word	0x08016a04
 80053fc:	54442d18 	.word	0x54442d18
 8005400:	400921fb 	.word	0x400921fb

08005404 <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <prevPage+0x30>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <prevPage+0x1a>
		currentPage--;
 8005410:	4b08      	ldr	r3, [pc, #32]	; (8005434 <prevPage+0x30>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	3b01      	subs	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <prevPage+0x30>)
 800541a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 800541c:	e005      	b.n	800542a <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <prevPage+0x34>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3b01      	subs	r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b03      	ldr	r3, [pc, #12]	; (8005434 <prevPage+0x30>)
 8005428:	701a      	strb	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	20003a60 	.word	0x20003a60
 8005438:	2000018b 	.word	0x2000018b

0800543c <nextPage>:
void nextPage(void){
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <nextPage+0x34>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <nextPage+0x38>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	3b01      	subs	r3, #1
 800544c:	429a      	cmp	r2, r3
 800544e:	da06      	bge.n	800545e <nextPage+0x22>
		currentPage++;
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <nextPage+0x34>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <nextPage+0x34>)
 800545a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 800545c:	e002      	b.n	8005464 <nextPage+0x28>
		currentPage=0;
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <nextPage+0x34>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20003a60 	.word	0x20003a60
 8005474:	2000018b 	.word	0x2000018b

08005478 <showPage1>:

void showPage1(void){
 8005478:	b580      	push	{r7, lr}
 800547a:	b092      	sub	sp, #72	; 0x48
 800547c:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	615a      	str	r2, [r3, #20]
 8005494:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8005496:	2300      	movs	r3, #0
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
 80054a8:	615a      	str	r2, [r3, #20]
 80054aa:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <showPage1+0x94>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <showPage1+0x94>)
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <showPage1+0x94>)
 80054ba:	789b      	ldrb	r3, [r3, #2]
 80054bc:	4638      	mov	r0, r7
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	4913      	ldr	r1, [pc, #76]	; (8005510 <showPage1+0x98>)
 80054c4:	f007 ffae 	bl	800d424 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80054c8:	463a      	mov	r2, r7
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <showPage1+0x9c>)
 80054cc:	210b      	movs	r1, #11
 80054ce:	200e      	movs	r0, #14
 80054d0:	f7fc fe4a 	bl	8002168 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 80054d4:	2301      	movs	r3, #1
 80054d6:	2227      	movs	r2, #39	; 0x27
 80054d8:	2106      	movs	r1, #6
 80054da:	2001      	movs	r0, #1
 80054dc:	f7fc fe72 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 80054e0:	2301      	movs	r3, #1
 80054e2:	2228      	movs	r2, #40	; 0x28
 80054e4:	2105      	movs	r1, #5
 80054e6:	2002      	movs	r0, #2
 80054e8:	f7fc fe6c 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 80054ec:	2301      	movs	r3, #1
 80054ee:	2228      	movs	r2, #40	; 0x28
 80054f0:	2105      	movs	r1, #5
 80054f2:	2003      	movs	r0, #3
 80054f4:	f7fc fe66 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 80054f8:	2301      	movs	r3, #1
 80054fa:	2227      	movs	r2, #39	; 0x27
 80054fc:	2106      	movs	r1, #6
 80054fe:	2004      	movs	r0, #4
 8005500:	f7fc fe60 	bl	80021c4 <lcdVLine>
}
 8005504:	bf00      	nop
 8005506:	3740      	adds	r7, #64	; 0x40
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000357c 	.word	0x2000357c
 8005510:	08013c40 	.word	0x08013c40
 8005514:	0801ce88 	.word	0x0801ce88

08005518 <showPage2>:
void showPage2(void){
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800551e:	2300      	movs	r3, #0
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
 8005530:	615a      	str	r2, [r3, #20]
 8005532:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8005534:	463b      	mov	r3, r7
 8005536:	4913      	ldr	r1, [pc, #76]	; (8005584 <showPage2+0x6c>)
 8005538:	4618      	mov	r0, r3
 800553a:	f007 ff73 	bl	800d424 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800553e:	463a      	mov	r2, r7
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <showPage2+0x70>)
 8005542:	2132      	movs	r1, #50	; 0x32
 8005544:	200e      	movs	r0, #14
 8005546:	f7fc fe0f 	bl	8002168 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800554a:	2301      	movs	r3, #1
 800554c:	224e      	movs	r2, #78	; 0x4e
 800554e:	212d      	movs	r1, #45	; 0x2d
 8005550:	2001      	movs	r0, #1
 8005552:	f7fc fe37 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005556:	2301      	movs	r3, #1
 8005558:	224f      	movs	r2, #79	; 0x4f
 800555a:	212c      	movs	r1, #44	; 0x2c
 800555c:	2002      	movs	r0, #2
 800555e:	f7fc fe31 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005562:	2301      	movs	r3, #1
 8005564:	224f      	movs	r2, #79	; 0x4f
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	2003      	movs	r0, #3
 800556a:	f7fc fe2b 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800556e:	2301      	movs	r3, #1
 8005570:	224e      	movs	r2, #78	; 0x4e
 8005572:	212d      	movs	r1, #45	; 0x2d
 8005574:	2004      	movs	r0, #4
 8005576:	f7fc fe25 	bl	80021c4 <lcdVLine>
}
 800557a:	bf00      	nop
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08013c50 	.word	0x08013c50
 8005588:	0801ce88 	.word	0x0801ce88

0800558c <showPage3>:
void showPage3(void){
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005592:	2300      	movs	r3, #0
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
 80055a4:	615a      	str	r2, [r3, #20]
 80055a6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80055a8:	463b      	mov	r3, r7
 80055aa:	4913      	ldr	r1, [pc, #76]	; (80055f8 <showPage3+0x6c>)
 80055ac:	4618      	mov	r0, r3
 80055ae:	f007 ff39 	bl	800d424 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80055b2:	463a      	mov	r2, r7
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <showPage3+0x70>)
 80055b6:	2100      	movs	r1, #0
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fc fdd5 	bl	8002168 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80055be:	2301      	movs	r3, #1
 80055c0:	2275      	movs	r2, #117	; 0x75
 80055c2:	2154      	movs	r1, #84	; 0x54
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fc fdfd 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80055ca:	2301      	movs	r3, #1
 80055cc:	2276      	movs	r2, #118	; 0x76
 80055ce:	2153      	movs	r1, #83	; 0x53
 80055d0:	2002      	movs	r0, #2
 80055d2:	f7fc fdf7 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80055d6:	2301      	movs	r3, #1
 80055d8:	2276      	movs	r2, #118	; 0x76
 80055da:	2153      	movs	r1, #83	; 0x53
 80055dc:	2003      	movs	r0, #3
 80055de:	f7fc fdf1 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80055e2:	2301      	movs	r3, #1
 80055e4:	2275      	movs	r2, #117	; 0x75
 80055e6:	2154      	movs	r1, #84	; 0x54
 80055e8:	2004      	movs	r0, #4
 80055ea:	f7fc fdeb 	bl	80021c4 <lcdVLine>
}
 80055ee:	bf00      	nop
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	08013c54 	.word	0x08013c54
 80055fc:	0801ce88 	.word	0x0801ce88

08005600 <showPage4>:
void showPage4(void){
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
 8005618:	615a      	str	r2, [r3, #20]
 800561a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 800561c:	463b      	mov	r3, r7
 800561e:	4913      	ldr	r1, [pc, #76]	; (800566c <showPage4+0x6c>)
 8005620:	4618      	mov	r0, r3
 8005622:	f007 feff 	bl	800d424 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8005626:	463a      	mov	r2, r7
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <showPage4+0x70>)
 800562a:	2100      	movs	r1, #0
 800562c:	2000      	movs	r0, #0
 800562e:	f7fc fd9b 	bl	8002168 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005632:	2301      	movs	r3, #1
 8005634:	229c      	movs	r2, #156	; 0x9c
 8005636:	217b      	movs	r1, #123	; 0x7b
 8005638:	2001      	movs	r0, #1
 800563a:	f7fc fdc3 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800563e:	2301      	movs	r3, #1
 8005640:	229d      	movs	r2, #157	; 0x9d
 8005642:	217a      	movs	r1, #122	; 0x7a
 8005644:	2002      	movs	r0, #2
 8005646:	f7fc fdbd 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800564a:	2301      	movs	r3, #1
 800564c:	229d      	movs	r2, #157	; 0x9d
 800564e:	217a      	movs	r1, #122	; 0x7a
 8005650:	2003      	movs	r0, #3
 8005652:	f7fc fdb7 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005656:	2301      	movs	r3, #1
 8005658:	229c      	movs	r2, #156	; 0x9c
 800565a:	217b      	movs	r1, #123	; 0x7b
 800565c:	2004      	movs	r0, #4
 800565e:	f7fc fdb1 	bl	80021c4 <lcdVLine>
}
 8005662:	bf00      	nop
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08013c60 	.word	0x08013c60
 8005670:	0801ce88 	.word	0x0801ce88

08005674 <showPage5>:
void showPage5(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800567a:	2300      	movs	r3, #0
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
 800568c:	615a      	str	r2, [r3, #20]
 800568e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8005690:	463b      	mov	r3, r7
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <showPage5+0xb4>)
 8005694:	4618      	mov	r0, r3
 8005696:	f007 fec5 	bl	800d424 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 800569a:	463a      	mov	r2, r7
 800569c:	4b23      	ldr	r3, [pc, #140]	; (800572c <showPage5+0xb8>)
 800569e:	2100      	movs	r1, #0
 80056a0:	200a      	movs	r0, #10
 80056a2:	f7fc fd61 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80056a6:	463a      	mov	r2, r7
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <showPage5+0xbc>)
 80056aa:	210f      	movs	r1, #15
 80056ac:	200a      	movs	r0, #10
 80056ae:	f7fc fd5b 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80056b2:	463a      	mov	r2, r7
 80056b4:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <showPage5+0xc0>)
 80056b6:	2132      	movs	r1, #50	; 0x32
 80056b8:	200a      	movs	r0, #10
 80056ba:	f7fc fd55 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80056be:	463a      	mov	r2, r7
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <showPage5+0xc4>)
 80056c2:	213c      	movs	r1, #60	; 0x3c
 80056c4:	200a      	movs	r0, #10
 80056c6:	f7fc fd4f 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80056ca:	463a      	mov	r2, r7
 80056cc:	4b1b      	ldr	r3, [pc, #108]	; (800573c <showPage5+0xc8>)
 80056ce:	215a      	movs	r1, #90	; 0x5a
 80056d0:	200a      	movs	r0, #10
 80056d2:	f7fc fd49 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 80056d6:	463a      	mov	r2, r7
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <showPage5+0xcc>)
 80056da:	2178      	movs	r1, #120	; 0x78
 80056dc:	200a      	movs	r0, #10
 80056de:	f7fc fd43 	bl	8002168 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 80056e2:	463a      	mov	r2, r7
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <showPage5+0xd0>)
 80056e6:	2196      	movs	r1, #150	; 0x96
 80056e8:	200a      	movs	r0, #10
 80056ea:	f7fc fd3d 	bl	8002168 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80056ee:	2301      	movs	r3, #1
 80056f0:	22c3      	movs	r2, #195	; 0xc3
 80056f2:	21a2      	movs	r1, #162	; 0xa2
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fc fd65 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80056fa:	2301      	movs	r3, #1
 80056fc:	22c4      	movs	r2, #196	; 0xc4
 80056fe:	21a1      	movs	r1, #161	; 0xa1
 8005700:	2002      	movs	r0, #2
 8005702:	f7fc fd5f 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005706:	2301      	movs	r3, #1
 8005708:	22c4      	movs	r2, #196	; 0xc4
 800570a:	21a1      	movs	r1, #161	; 0xa1
 800570c:	2003      	movs	r0, #3
 800570e:	f7fc fd59 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8005712:	2301      	movs	r3, #1
 8005714:	22c3      	movs	r2, #195	; 0xc3
 8005716:	21a2      	movs	r1, #162	; 0xa2
 8005718:	2004      	movs	r0, #4
 800571a:	f7fc fd53 	bl	80021c4 <lcdVLine>
}
 800571e:	bf00      	nop
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	08013c6c 	.word	0x08013c6c
 800572c:	0801ad78 	.word	0x0801ad78
 8005730:	0801b8c0 	.word	0x0801b8c0
 8005734:	08018390 	.word	0x08018390
 8005738:	0801880c 	.word	0x0801880c
 800573c:	08019868 	.word	0x08019868
 8005740:	0801a2f0 	.word	0x0801a2f0
 8005744:	0801ce88 	.word	0x0801ce88

08005748 <showPage6>:
void showPage6(void){
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800574e:	2301      	movs	r3, #1
 8005750:	22ea      	movs	r2, #234	; 0xea
 8005752:	21c9      	movs	r1, #201	; 0xc9
 8005754:	2001      	movs	r0, #1
 8005756:	f7fc fd35 	bl	80021c4 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800575a:	2301      	movs	r3, #1
 800575c:	22eb      	movs	r2, #235	; 0xeb
 800575e:	21c8      	movs	r1, #200	; 0xc8
 8005760:	2002      	movs	r0, #2
 8005762:	f7fc fd2f 	bl	80021c4 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005766:	2301      	movs	r3, #1
 8005768:	22eb      	movs	r2, #235	; 0xeb
 800576a:	21c8      	movs	r1, #200	; 0xc8
 800576c:	2003      	movs	r0, #3
 800576e:	f7fc fd29 	bl	80021c4 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8005772:	2301      	movs	r3, #1
 8005774:	22ea      	movs	r2, #234	; 0xea
 8005776:	21c9      	movs	r1, #201	; 0xc9
 8005778:	2004      	movs	r0, #4
 800577a:	f7fc fd23 	bl	80021c4 <lcdVLine>
		lcdRect(0,399,25,80,1);
 800577e:	2301      	movs	r3, #1
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2350      	movs	r3, #80	; 0x50
 8005784:	2219      	movs	r2, #25
 8005786:	f240 118f 	movw	r1, #399	; 0x18f
 800578a:	2000      	movs	r0, #0
 800578c:	f7fd faac 	bl	8002ce8 <lcdRect>
		lcdRect(0,399,120,180,1);
 8005790:	2301      	movs	r3, #1
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	23b4      	movs	r3, #180	; 0xb4
 8005796:	2278      	movs	r2, #120	; 0x78
 8005798:	f240 118f 	movw	r1, #399	; 0x18f
 800579c:	2000      	movs	r0, #0
 800579e:	f7fd faa3 	bl	8002ce8 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80057a2:	2301      	movs	r3, #1
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	2300      	movs	r3, #0
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2303      	movs	r3, #3
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2332      	movs	r3, #50	; 0x32
 80057b0:	220a      	movs	r2, #10
 80057b2:	2132      	movs	r1, #50	; 0x32
 80057b4:	200a      	movs	r0, #10
 80057b6:	f7fd fabc 	bl	8002d32 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80057ba:	2301      	movs	r3, #1
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	2301      	movs	r3, #1
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	2303      	movs	r3, #3
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2332      	movs	r3, #50	; 0x32
 80057c8:	220a      	movs	r2, #10
 80057ca:	2164      	movs	r1, #100	; 0x64
 80057cc:	203c      	movs	r0, #60	; 0x3c
 80057ce:	f7fd fab0 	bl	8002d32 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 80057d2:	2301      	movs	r3, #1
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	2302      	movs	r3, #2
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	2303      	movs	r3, #3
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2332      	movs	r3, #50	; 0x32
 80057e0:	220a      	movs	r2, #10
 80057e2:	2196      	movs	r1, #150	; 0x96
 80057e4:	206e      	movs	r0, #110	; 0x6e
 80057e6:	f7fd faa4 	bl	8002d32 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 80057ea:	2301      	movs	r3, #1
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	2303      	movs	r3, #3
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2303      	movs	r3, #3
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2332      	movs	r3, #50	; 0x32
 80057f8:	220a      	movs	r2, #10
 80057fa:	21c8      	movs	r1, #200	; 0xc8
 80057fc:	20a0      	movs	r0, #160	; 0xa0
 80057fe:	f7fd fa98 	bl	8002d32 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8005802:	2301      	movs	r3, #1
 8005804:	9302      	str	r3, [sp, #8]
 8005806:	2304      	movs	r3, #4
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	2303      	movs	r3, #3
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2332      	movs	r3, #50	; 0x32
 8005810:	220a      	movs	r2, #10
 8005812:	21fa      	movs	r1, #250	; 0xfa
 8005814:	20d2      	movs	r0, #210	; 0xd2
 8005816:	f7fd fa8c 	bl	8002d32 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 800581a:	2301      	movs	r3, #1
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	2305      	movs	r3, #5
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	2303      	movs	r3, #3
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2332      	movs	r3, #50	; 0x32
 8005828:	220a      	movs	r2, #10
 800582a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800582e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005832:	f7fd fa7e 	bl	8002d32 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005836:	2301      	movs	r3, #1
 8005838:	9302      	str	r3, [sp, #8]
 800583a:	2306      	movs	r3, #6
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2303      	movs	r3, #3
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2332      	movs	r3, #50	; 0x32
 8005844:	220a      	movs	r2, #10
 8005846:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800584a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800584e:	f7fd fa70 	bl	8002d32 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8005852:	2301      	movs	r3, #1
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	2307      	movs	r3, #7
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	2303      	movs	r3, #3
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2364      	movs	r3, #100	; 0x64
 8005860:	223c      	movs	r2, #60	; 0x3c
 8005862:	2132      	movs	r1, #50	; 0x32
 8005864:	200a      	movs	r0, #10
 8005866:	f7fd fa64 	bl	8002d32 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800586a:	2301      	movs	r3, #1
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	2308      	movs	r3, #8
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	2303      	movs	r3, #3
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	2364      	movs	r3, #100	; 0x64
 8005878:	223c      	movs	r2, #60	; 0x3c
 800587a:	2164      	movs	r1, #100	; 0x64
 800587c:	203c      	movs	r0, #60	; 0x3c
 800587e:	f7fd fa58 	bl	8002d32 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8005882:	2301      	movs	r3, #1
 8005884:	9302      	str	r3, [sp, #8]
 8005886:	2309      	movs	r3, #9
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2303      	movs	r3, #3
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2364      	movs	r3, #100	; 0x64
 8005890:	223c      	movs	r2, #60	; 0x3c
 8005892:	2196      	movs	r1, #150	; 0x96
 8005894:	206e      	movs	r0, #110	; 0x6e
 8005896:	f7fd fa4c 	bl	8002d32 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 800589a:	2301      	movs	r3, #1
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	230a      	movs	r3, #10
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	2303      	movs	r3, #3
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2364      	movs	r3, #100	; 0x64
 80058a8:	223c      	movs	r2, #60	; 0x3c
 80058aa:	21c8      	movs	r1, #200	; 0xc8
 80058ac:	20a0      	movs	r0, #160	; 0xa0
 80058ae:	f7fd fa40 	bl	8002d32 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80058b2:	2301      	movs	r3, #1
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	230b      	movs	r3, #11
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	2303      	movs	r3, #3
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2364      	movs	r3, #100	; 0x64
 80058c0:	223c      	movs	r2, #60	; 0x3c
 80058c2:	21fa      	movs	r1, #250	; 0xfa
 80058c4:	20d2      	movs	r0, #210	; 0xd2
 80058c6:	f7fd fa34 	bl	8002d32 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80058ca:	2301      	movs	r3, #1
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	230c      	movs	r3, #12
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	2303      	movs	r3, #3
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2364      	movs	r3, #100	; 0x64
 80058d8:	223c      	movs	r2, #60	; 0x3c
 80058da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80058de:	f44f 7082 	mov.w	r0, #260	; 0x104
 80058e2:	f7fd fa26 	bl	8002d32 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 80058e6:	2301      	movs	r3, #1
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	230d      	movs	r3, #13
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	2303      	movs	r3, #3
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	2364      	movs	r3, #100	; 0x64
 80058f4:	223c      	movs	r2, #60	; 0x3c
 80058f6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80058fa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80058fe:	f7fd fa18 	bl	8002d32 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8005902:	2301      	movs	r3, #1
 8005904:	9302      	str	r3, [sp, #8]
 8005906:	230e      	movs	r3, #14
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	2303      	movs	r3, #3
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2396      	movs	r3, #150	; 0x96
 8005910:	226e      	movs	r2, #110	; 0x6e
 8005912:	2132      	movs	r1, #50	; 0x32
 8005914:	200a      	movs	r0, #10
 8005916:	f7fd fa0c 	bl	8002d32 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 800591a:	2301      	movs	r3, #1
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	230f      	movs	r3, #15
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	2303      	movs	r3, #3
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	2396      	movs	r3, #150	; 0x96
 8005928:	226e      	movs	r2, #110	; 0x6e
 800592a:	2164      	movs	r1, #100	; 0x64
 800592c:	203c      	movs	r0, #60	; 0x3c
 800592e:	f7fd fa00 	bl	8002d32 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8005932:	2301      	movs	r3, #1
 8005934:	9302      	str	r3, [sp, #8]
 8005936:	2310      	movs	r3, #16
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	2303      	movs	r3, #3
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2396      	movs	r3, #150	; 0x96
 8005940:	226e      	movs	r2, #110	; 0x6e
 8005942:	2196      	movs	r1, #150	; 0x96
 8005944:	206e      	movs	r0, #110	; 0x6e
 8005946:	f7fd f9f4 	bl	8002d32 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 800594a:	2301      	movs	r3, #1
 800594c:	9302      	str	r3, [sp, #8]
 800594e:	2311      	movs	r3, #17
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	2303      	movs	r3, #3
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	2396      	movs	r3, #150	; 0x96
 8005958:	226e      	movs	r2, #110	; 0x6e
 800595a:	21c8      	movs	r1, #200	; 0xc8
 800595c:	20a0      	movs	r0, #160	; 0xa0
 800595e:	f7fd f9e8 	bl	8002d32 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005962:	2301      	movs	r3, #1
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	2312      	movs	r3, #18
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2303      	movs	r3, #3
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2396      	movs	r3, #150	; 0x96
 8005970:	226e      	movs	r2, #110	; 0x6e
 8005972:	21fa      	movs	r1, #250	; 0xfa
 8005974:	20d2      	movs	r0, #210	; 0xd2
 8005976:	f7fd f9dc 	bl	8002d32 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 800597a:	2301      	movs	r3, #1
 800597c:	9302      	str	r3, [sp, #8]
 800597e:	2313      	movs	r3, #19
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	2303      	movs	r3, #3
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2396      	movs	r3, #150	; 0x96
 8005988:	226e      	movs	r2, #110	; 0x6e
 800598a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800598e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005992:	f7fd f9ce 	bl	8002d32 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8005996:	2301      	movs	r3, #1
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	2314      	movs	r3, #20
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	2303      	movs	r3, #3
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2396      	movs	r3, #150	; 0x96
 80059a4:	226e      	movs	r2, #110	; 0x6e
 80059a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059aa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80059ae:	f7fd f9c0 	bl	8002d32 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 80059b2:	2304      	movs	r3, #4
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	2301      	movs	r3, #1
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	23c8      	movs	r3, #200	; 0xc8
 80059bc:	22a0      	movs	r2, #160	; 0xa0
 80059be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059c2:	200a      	movs	r0, #10
 80059c4:	f7fd f9b5 	bl	8002d32 <lcdRect2>
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <showPage>:

void showPage(uint8_t pageNum){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d821      	bhi.n	8005a24 <showPage+0x54>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <showPage+0x18>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	08005a07 	.word	0x08005a07
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a13 	.word	0x08005a13
 80059f8:	08005a19 	.word	0x08005a19
 80059fc:	08005a1f 	.word	0x08005a1f
	case 0:
		showPage1();
 8005a00:	f7ff fd3a 	bl	8005478 <showPage1>
		break;
 8005a04:	e00e      	b.n	8005a24 <showPage+0x54>
	case 1:
		showPage2();
 8005a06:	f7ff fd87 	bl	8005518 <showPage2>
		break;
 8005a0a:	e00b      	b.n	8005a24 <showPage+0x54>
	case 2:
		showPage3();
 8005a0c:	f7ff fdbe 	bl	800558c <showPage3>
		break;
 8005a10:	e008      	b.n	8005a24 <showPage+0x54>
	case 3:
		showPage4();
 8005a12:	f7ff fdf5 	bl	8005600 <showPage4>
		break;
 8005a16:	e005      	b.n	8005a24 <showPage+0x54>
	case 4:
		showPage5();
 8005a18:	f7ff fe2c 	bl	8005674 <showPage5>
		break;
 8005a1c:	e002      	b.n	8005a24 <showPage+0x54>
	case 5:
		showPage6();
 8005a1e:	f7ff fe93 	bl	8005748 <showPage6>
		break;
 8005a22:	bf00      	nop
	}
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <setDefaultClbcks+0x28>)
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <setDefaultClbcks+0x2c>)
 8005a34:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <setDefaultClbcks+0x30>)
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <setDefaultClbcks+0x34>)
 8005a3a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <setDefaultClbcks+0x38>)
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <setDefaultClbcks+0x3c>)
 8005a40:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <setDefaultClbcks+0x40>)
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <setDefaultClbcks+0x44>)
 8005a46:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000568 	.word	0x20000568
 8005a58:	08001ccd 	.word	0x08001ccd
 8005a5c:	200005b0 	.word	0x200005b0
 8005a60:	08001cdd 	.word	0x08001cdd
 8005a64:	2000061c 	.word	0x2000061c
 8005a68:	08005405 	.word	0x08005405
 8005a6c:	200005d4 	.word	0x200005d4
 8005a70:	0800543d 	.word	0x0800543d

08005a74 <settingsSetup>:


void settingsSetup(void){
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005a78:	f7ff ffd8 	bl	8005a2c <setDefaultClbcks>
}
 8005a7c:	bf00      	nop
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <settingsMain>:

void settingsMain(void){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005a86:	2300      	movs	r3, #0
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	609a      	str	r2, [r3, #8]
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	611a      	str	r2, [r3, #16]
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <settingsMain+0x30>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff ff95 	bl	80059d0 <showPage>

}
 8005aa6:	bf00      	nop
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20003a60 	.word	0x20003a60

08005ab4 <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
	stwStart();
 8005ab8:	f7fd fcac 	bl	8003414 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005abc:	4b03      	ldr	r3, [pc, #12]	; (8005acc <startStopwatch+0x18>)
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <startStopwatch+0x1c>)
 8005ac0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <startStopwatch+0x20>)
 8005ac4:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <startStopwatch+0x24>)
 8005ac6:	611a      	str	r2, [r3, #16]
}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2000058c 	.word	0x2000058c
 8005ad0:	08005add 	.word	0x08005add
 8005ad4:	200005f8 	.word	0x200005f8
 8005ad8:	08005b1d 	.word	0x08005b1d

08005adc <stopStopwatch>:
void stopStopwatch(){
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
	stwStop();
 8005ae0:	f7fd fcbc 	bl	800345c <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <stopStopwatch+0x18>)
 8005ae6:	4a04      	ldr	r2, [pc, #16]	; (8005af8 <stopStopwatch+0x1c>)
 8005ae8:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005aea:	4b04      	ldr	r3, [pc, #16]	; (8005afc <stopStopwatch+0x20>)
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <stopStopwatch+0x24>)
 8005aee:	611a      	str	r2, [r3, #16]
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	2000058c 	.word	0x2000058c
 8005af8:	08005ab5 	.word	0x08005ab5
 8005afc:	200005f8 	.word	0x200005f8
 8005b00:	08005b05 	.word	0x08005b05

08005b04 <resetStopwatch>:
void resetStopwatch(){
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	stwClear();
 8005b08:	f7fd fcb6 	bl	8003478 <stwClear>
	stwT.clear();
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <resetStopwatch+0x14>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4798      	blx	r3
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000014c 	.word	0x2000014c

08005b1c <saveStopwatch>:
void saveStopwatch(){
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
	stwSave();
 8005b20:	f7fd fcb8 	bl	8003494 <stwSave>
}
 8005b24:	bf00      	nop
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <setDefaultClbcks+0x48>)
 8005b2e:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <setDefaultClbcks+0x4c>)
 8005b30:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <setDefaultClbcks+0x50>)
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <setDefaultClbcks+0x54>)
 8005b36:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <setDefaultClbcks+0x58>)
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <setDefaultClbcks+0x5c>)
 8005b3c:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <setDefaultClbcks+0x60>)
 8005b40:	78db      	ldrb	r3, [r3, #3]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <setDefaultClbcks+0x64>)
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <setDefaultClbcks+0x68>)
 8005b50:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005b52:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <setDefaultClbcks+0x6c>)
 8005b54:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <setDefaultClbcks+0x70>)
 8005b56:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005b58:	e005      	b.n	8005b66 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <setDefaultClbcks+0x64>)
 8005b5c:	4a0f      	ldr	r2, [pc, #60]	; (8005b9c <setDefaultClbcks+0x74>)
 8005b5e:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <setDefaultClbcks+0x6c>)
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <setDefaultClbcks+0x78>)
 8005b64:	611a      	str	r2, [r3, #16]
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	2000061c 	.word	0x2000061c
 8005b74:	08001ced 	.word	0x08001ced
 8005b78:	20000568 	.word	0x20000568
 8005b7c:	08001ccd 	.word	0x08001ccd
 8005b80:	200005b0 	.word	0x200005b0
 8005b84:	08001cdd 	.word	0x08001cdd
 8005b88:	20003888 	.word	0x20003888
 8005b8c:	2000058c 	.word	0x2000058c
 8005b90:	08005add 	.word	0x08005add
 8005b94:	200005f8 	.word	0x200005f8
 8005b98:	08005b1d 	.word	0x08005b1d
 8005b9c:	08005ab5 	.word	0x08005ab5
 8005ba0:	08005b05 	.word	0x08005b05

08005ba4 <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	4a22      	ldr	r2, [pc, #136]	; (8005c3c <convertTicks+0x98>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	0993      	lsrs	r3, r2, #6
 8005bc0:	491e      	ldr	r1, [pc, #120]	; (8005c3c <convertTicks+0x98>)
 8005bc2:	fba1 1303 	umull	r1, r3, r1, r3
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	491d      	ldr	r1, [pc, #116]	; (8005c40 <convertTicks+0x9c>)
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <convertTicks+0xa0>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <convertTicks+0xa0>)
 8005be0:	fba3 1302 	umull	r1, r3, r3, r2
 8005be4:	09db      	lsrs	r3, r3, #7
 8005be6:	f241 7170 	movw	r1, #6000	; 0x1770
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <convertTicks+0xa4>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <convertTicks+0xa4>)
 8005c00:	fba3 1302 	umull	r1, r3, r3, r2
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	2164      	movs	r1, #100	; 0x64
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	2300      	movs	r3, #0
 8005c18:	7b3a      	ldrb	r2, [r7, #12]
 8005c1a:	f362 0307 	bfi	r3, r2, #0, #8
 8005c1e:	7b7a      	ldrb	r2, [r7, #13]
 8005c20:	f362 230f 	bfi	r3, r2, #8, #8
 8005c24:	7bba      	ldrb	r2, [r7, #14]
 8005c26:	f362 4317 	bfi	r3, r2, #16, #8
 8005c2a:	7bfa      	ldrb	r2, [r7, #15]
 8005c2c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	002e9a77 	.word	0x002e9a77
 8005c40:	00057e40 	.word	0x00057e40
 8005c44:	057619f1 	.word	0x057619f1
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8005c56:	793b      	ldrb	r3, [r7, #4]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	797b      	ldrb	r3, [r7, #5]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	79bb      	ldrb	r3, [r7, #6]
 8005c60:	79fa      	ldrb	r2, [r7, #7]
 8005c62:	9201      	str	r2, [sp, #4]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4603      	mov	r3, r0
 8005c68:	460a      	mov	r2, r1
 8005c6a:	4904      	ldr	r1, [pc, #16]	; (8005c7c <stwString+0x30>)
 8005c6c:	6838      	ldr	r0, [r7, #0]
 8005c6e:	f007 fbd9 	bl	800d424 <siprintf>
	return str;
 8005c72:	683b      	ldr	r3, [r7, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08013d34 	.word	0x08013d34

08005c80 <updateStopwatch>:
void updateStopwatch(void){
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 8005c84:	4b2a      	ldr	r3, [pc, #168]	; (8005d30 <updateStopwatch+0xb0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005c8c:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <updateStopwatch+0xb4>)
 8005c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8005c92:	1452      	asrs	r2, r2, #17
 8005c94:	17db      	asrs	r3, r3, #31
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <updateStopwatch+0xb8>)
 8005c9c:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <updateStopwatch+0xb0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <updateStopwatch+0xb4>)
 8005caa:	fb83 1302 	smull	r1, r3, r3, r2
 8005cae:	1459      	asrs	r1, r3, #17
 8005cb0:	17d3      	asrs	r3, r2, #31
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	4921      	ldr	r1, [pc, #132]	; (8005d3c <updateStopwatch+0xbc>)
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <updateStopwatch+0xc0>)
 8005cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8005cc2:	11d2      	asrs	r2, r2, #7
 8005cc4:	17db      	asrs	r3, r3, #31
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <updateStopwatch+0xb8>)
 8005ccc:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 8005cce:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <updateStopwatch+0xb0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <updateStopwatch+0xc0>)
 8005cda:	fb83 1302 	smull	r1, r3, r3, r2
 8005cde:	11d9      	asrs	r1, r3, #7
 8005ce0:	17d3      	asrs	r3, r2, #31
 8005ce2:	1acb      	subs	r3, r1, r3
 8005ce4:	f241 7170 	movw	r1, #6000	; 0x1770
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <updateStopwatch+0xc4>)
 8005cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8005cf4:	1152      	asrs	r2, r2, #5
 8005cf6:	17db      	asrs	r3, r3, #31
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <updateStopwatch+0xb8>)
 8005cfe:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <updateStopwatch+0xb0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <updateStopwatch+0xc4>)
 8005d0c:	fb83 1302 	smull	r1, r3, r3, r2
 8005d10:	1159      	asrs	r1, r3, #5
 8005d12:	17d3      	asrs	r3, r2, #31
 8005d14:	1acb      	subs	r3, r1, r3
 8005d16:	2164      	movs	r1, #100	; 0x64
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <updateStopwatch+0xb8>)
 8005d22:	70da      	strb	r2, [r3, #3]
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20003888 	.word	0x20003888
 8005d34:	5d34edef 	.word	0x5d34edef
 8005d38:	20003a64 	.word	0x20003a64
 8005d3c:	00057e40 	.word	0x00057e40
 8005d40:	057619f1 	.word	0x057619f1
 8005d44:	51eb851f 	.word	0x51eb851f

08005d48 <stwSetup>:

void stwSetup(void){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005d4c:	f7ff feec 	bl	8005b28 <setDefaultClbcks>
}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b091      	sub	sp, #68	; 0x44
 8005d58:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005d62:	4b7c      	ldr	r3, [pc, #496]	; (8005f54 <stwMain+0x200>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b7a      	ldr	r3, [pc, #488]	; (8005f54 <stwMain+0x200>)
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	f107 0020 	add.w	r0, r7, #32
 8005d70:	4979      	ldr	r1, [pc, #484]	; (8005f58 <stwMain+0x204>)
 8005d72:	f007 fb57 	bl	800d424 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8005d76:	2314      	movs	r3, #20
 8005d78:	b29c      	uxth	r4, r3
 8005d7a:	f107 0320 	add.w	r3, r7, #32
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fa fa36 	bl	80001f0 <strlen>
 8005d84:	4603      	mov	r3, r0
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	fb14 f303 	smulbb	r3, r4, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8005d92:	b298      	uxth	r0, r3
 8005d94:	f107 0220 	add.w	r2, r7, #32
 8005d98:	4b70      	ldr	r3, [pc, #448]	; (8005f5c <stwMain+0x208>)
 8005d9a:	210a      	movs	r1, #10
 8005d9c:	f7fc f9e4 	bl	8002168 <lcdPutStr>

	updateStopwatch();
 8005da0:	f7ff ff6e 	bl	8005c80 <updateStopwatch>
	char tempStr2[30] = {0};
 8005da4:	2300      	movs	r3, #0
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	609a      	str	r2, [r3, #8]
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	611a      	str	r2, [r3, #16]
 8005db6:	615a      	str	r2, [r3, #20]
 8005db8:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8005dba:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <stwMain+0x20c>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8005dc2:	4b67      	ldr	r3, [pc, #412]	; (8005f60 <stwMain+0x20c>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	463b      	mov	r3, r7
 8005dca:	4966      	ldr	r1, [pc, #408]	; (8005f64 <stwMain+0x210>)
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f007 fb29 	bl	800d424 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8005dd2:	463a      	mov	r2, r7
 8005dd4:	4b61      	ldr	r3, [pc, #388]	; (8005f5c <stwMain+0x208>)
 8005dd6:	215f      	movs	r1, #95	; 0x5f
 8005dd8:	2014      	movs	r0, #20
 8005dda:	f7fc f9c5 	bl	8002168 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8005dde:	4b60      	ldr	r3, [pc, #384]	; (8005f60 <stwMain+0x20c>)
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b5e      	ldr	r3, [pc, #376]	; (8005f60 <stwMain+0x20c>)
 8005de6:	789b      	ldrb	r3, [r3, #2]
 8005de8:	4619      	mov	r1, r3
 8005dea:	4b5d      	ldr	r3, [pc, #372]	; (8005f60 <stwMain+0x20c>)
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	4638      	mov	r0, r7
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	460b      	mov	r3, r1
 8005df4:	495c      	ldr	r1, [pc, #368]	; (8005f68 <stwMain+0x214>)
 8005df6:	f007 fb15 	bl	800d424 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8005dfa:	2322      	movs	r3, #34	; 0x22
 8005dfc:	b29c      	uxth	r4, r3
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fa f9f5 	bl	80001f0 <strlen>
 8005e06:	4603      	mov	r3, r0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	fb14 f303 	smulbb	r3, r4, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005e14:	b298      	uxth	r0, r3
 8005e16:	463a      	mov	r2, r7
 8005e18:	4b54      	ldr	r3, [pc, #336]	; (8005f6c <stwMain+0x218>)
 8005e1a:	214c      	movs	r1, #76	; 0x4c
 8005e1c:	f7fc f9a4 	bl	8002168 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005e26:	e08b      	b.n	8005f40 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8005e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e2c:	4a50      	ldr	r2, [pc, #320]	; (8005f70 <stwMain+0x21c>)
 8005e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d07f      	beq.n	8005f36 <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8005e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	494d      	ldr	r1, [pc, #308]	; (8005f74 <stwMain+0x220>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f007 faef 	bl	800d424 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8005e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	3b7e      	subs	r3, #126	; 0x7e
 8005e50:	b2d9      	uxtb	r1, r3
 8005e52:	463a      	mov	r2, r7
 8005e54:	4b48      	ldr	r3, [pc, #288]	; (8005f78 <stwMain+0x224>)
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7fc f986 	bl	8002168 <lcdPutStr>
			if(i>0){
 8005e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d022      	beq.n	8005eaa <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8005e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	3b7e      	subs	r3, #126	; 0x7e
 8005e6e:	b2dc      	uxtb	r4, r3
 8005e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e74:	4a3e      	ldr	r2, [pc, #248]	; (8005f70 <stwMain+0x21c>)
 8005e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	493b      	ldr	r1, [pc, #236]	; (8005f70 <stwMain+0x21c>)
 8005e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fe8b 	bl	8005ba4 <convertTicks>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e92:	463b      	mov	r3, r7
 8005e94:	4619      	mov	r1, r3
 8005e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e98:	f7ff fed8 	bl	8005c4c <stwString>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <stwMain+0x224>)
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	2037      	movs	r0, #55	; 0x37
 8005ea4:	f7fc f960 	bl	8002168 <lcdPutStr>
 8005ea8:	e01a      	b.n	8005ee0 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8005eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	3b7e      	subs	r3, #126	; 0x7e
 8005eb4:	b2dc      	uxtb	r4, r3
 8005eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eba:	4a2d      	ldr	r2, [pc, #180]	; (8005f70 <stwMain+0x21c>)
 8005ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fe6f 	bl	8005ba4 <convertTicks>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eca:	463b      	mov	r3, r7
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ed0:	f7ff febc 	bl	8005c4c <stwString>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <stwMain+0x224>)
 8005ed8:	4621      	mov	r1, r4
 8005eda:	2037      	movs	r0, #55	; 0x37
 8005edc:	f7fc f944 	bl	8002168 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	4926      	ldr	r1, [pc, #152]	; (8005f7c <stwMain+0x228>)
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f007 fa9d 	bl	800d424 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8005eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	3b7e      	subs	r3, #126	; 0x7e
 8005ef4:	b2d9      	uxtb	r1, r3
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <stwMain+0x224>)
 8005efa:	20a5      	movs	r0, #165	; 0xa5
 8005efc:	f7fc f934 	bl	8002168 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8005f00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3b7e      	subs	r3, #126	; 0x7e
 8005f0a:	b2dc      	uxtb	r4, r3
 8005f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <stwMain+0x21c>)
 8005f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fe44 	bl	8005ba4 <convertTicks>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f20:	463b      	mov	r3, r7
 8005f22:	4619      	mov	r1, r3
 8005f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f26:	f7ff fe91 	bl	8005c4c <stwString>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <stwMain+0x224>)
 8005f2e:	4621      	mov	r1, r4
 8005f30:	20e1      	movs	r0, #225	; 0xe1
 8005f32:	f7fc f919 	bl	8002168 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8005f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	f67f af6f 	bls.w	8005e28 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	373c      	adds	r7, #60	; 0x3c
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}
 8005f54:	2000357c 	.word	0x2000357c
 8005f58:	08013d48 	.word	0x08013d48
 8005f5c:	0801f778 	.word	0x0801f778
 8005f60:	20003a64 	.word	0x20003a64
 8005f64:	08013d54 	.word	0x08013d54
 8005f68:	08013d5c 	.word	0x08013d5c
 8005f6c:	080215e0 	.word	0x080215e0
 8005f70:	2000014c 	.word	0x2000014c
 8005f74:	08013d6c 	.word	0x08013d6c
 8005f78:	0801ecf0 	.word	0x0801ecf0
 8005f7c:	08013d74 	.word	0x08013d74

08005f80 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <setDefaultClbcks+0x20>)
 8005f86:	4a07      	ldr	r2, [pc, #28]	; (8005fa4 <setDefaultClbcks+0x24>)
 8005f88:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <setDefaultClbcks+0x28>)
 8005f8c:	4a07      	ldr	r2, [pc, #28]	; (8005fac <setDefaultClbcks+0x2c>)
 8005f8e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <setDefaultClbcks+0x30>)
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <setDefaultClbcks+0x34>)
 8005f94:	611a      	str	r2, [r3, #16]
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	200005f8 	.word	0x200005f8
 8005fa4:	08004159 	.word	0x08004159
 8005fa8:	20000568 	.word	0x20000568
 8005fac:	08001ccd 	.word	0x08001ccd
 8005fb0:	200005b0 	.word	0x200005b0
 8005fb4:	08001cdd 	.word	0x08001cdd

08005fb8 <setTimeAction>:

static void setTimeAction(void){
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8005fbc:	4802      	ldr	r0, [pc, #8]	; (8005fc8 <setTimeAction+0x10>)
 8005fbe:	f7fb fea1 	bl	8001d04 <guiApplyView>
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000290 	.word	0x20000290

08005fcc <setDateAction>:
static void setDateAction(void){
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8005fd0:	4802      	ldr	r0, [pc, #8]	; (8005fdc <setDateAction+0x10>)
 8005fd2:	f7fb fe97 	bl	8001d04 <guiApplyView>
}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	2000025c 	.word	0x2000025c

08005fe0 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005fe4:	f7ff ffcc 	bl	8005f80 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8005fe8:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <faceSetup+0x14>)
 8005fea:	f7fe f82f 	bl	800404c <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08005f81 	.word	0x08005f81

08005ff8 <faceMain>:

void faceMain(void){
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b0b1      	sub	sp, #196	; 0xc4
 8005ffc:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	611a      	str	r2, [r3, #16]
 8006014:	615a      	str	r2, [r3, #20]
 8006016:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8006018:	4b83      	ldr	r3, [pc, #524]	; (8006228 <faceMain+0x230>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f7fa faad 	bl	800057c <__aeabi_f2d>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800602a:	4980      	ldr	r1, [pc, #512]	; (800622c <faceMain+0x234>)
 800602c:	f007 f9fa 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006030:	2314      	movs	r3, #20
 8006032:	b29c      	uxth	r4, r3
 8006034:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa f8d9 	bl	80001f0 <strlen>
 800603e:	4603      	mov	r3, r0
 8006040:	f1c3 030d 	rsb	r3, r3, #13
 8006044:	b29b      	uxth	r3, r3
 8006046:	fb14 f303 	smulbb	r3, r4, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	3323      	adds	r3, #35	; 0x23
 800604e:	b298      	uxth	r0, r3
 8006050:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006054:	4b76      	ldr	r3, [pc, #472]	; (8006230 <faceMain+0x238>)
 8006056:	210e      	movs	r1, #14
 8006058:	f7fc f886 	bl	8002168 <lcdPutStr>
	char baroStr[30] = {0};
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006062:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	611a      	str	r2, [r3, #16]
 8006072:	615a      	str	r2, [r3, #20]
 8006074:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8006076:	4b6c      	ldr	r3, [pc, #432]	; (8006228 <faceMain+0x230>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006234 <faceMain+0x23c>
 8006086:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800608a:	ee16 0a90 	vmov	r0, s13
 800608e:	f7fa fa75 	bl	800057c <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800609a:	4967      	ldr	r1, [pc, #412]	; (8006238 <faceMain+0x240>)
 800609c:	f007 f9c2 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 80060a0:	2314      	movs	r3, #20
 80060a2:	b29c      	uxth	r4, r3
 80060a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fa f8a1 	bl	80001f0 <strlen>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f1c3 030d 	rsb	r3, r3, #13
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	fb14 f303 	smulbb	r3, r4, r3
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3323      	adds	r3, #35	; 0x23
 80060be:	b298      	uxth	r0, r3
 80060c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80060c4:	4b5a      	ldr	r3, [pc, #360]	; (8006230 <faceMain+0x238>)
 80060c6:	212a      	movs	r1, #42	; 0x2a
 80060c8:	f7fc f84e 	bl	8002168 <lcdPutStr>

	char fracStr[30] = {0};
 80060cc:	2300      	movs	r3, #0
 80060ce:	663b      	str	r3, [r7, #96]	; 0x60
 80060d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	611a      	str	r2, [r3, #16]
 80060e0:	615a      	str	r2, [r3, #20]
 80060e2:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80060e4:	2300      	movs	r3, #0
 80060e6:	643b      	str	r3, [r7, #64]	; 0x40
 80060e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
 80060f8:	615a      	str	r2, [r3, #20]
 80060fa:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80060fc:	2300      	movs	r3, #0
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	611a      	str	r2, [r3, #16]
 8006110:	615a      	str	r2, [r3, #20]
 8006112:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8006114:	4b49      	ldr	r3, [pc, #292]	; (800623c <faceMain+0x244>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800611e:	4948      	ldr	r1, [pc, #288]	; (8006240 <faceMain+0x248>)
 8006120:	4618      	mov	r0, r3
 8006122:	f007 f97f 	bl	800d424 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8006126:	4b45      	ldr	r3, [pc, #276]	; (800623c <faceMain+0x244>)
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	461a      	mov	r2, r3
 800612c:	f107 0320 	add.w	r3, r7, #32
 8006130:	4943      	ldr	r1, [pc, #268]	; (8006240 <faceMain+0x248>)
 8006132:	4618      	mov	r0, r3
 8006134:	f007 f976 	bl	800d424 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8006138:	4b40      	ldr	r3, [pc, #256]	; (800623c <faceMain+0x244>)
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	461a      	mov	r2, r3
 800613e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006142:	493f      	ldr	r1, [pc, #252]	; (8006240 <faceMain+0x248>)
 8006144:	4618      	mov	r0, r3
 8006146:	f007 f96d 	bl	800d424 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800614a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <faceMain+0x24c>)
 8006150:	214c      	movs	r1, #76	; 0x4c
 8006152:	2014      	movs	r0, #20
 8006154:	f7fc f808 	bl	8002168 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8006158:	f107 0220 	add.w	r2, r7, #32
 800615c:	4b39      	ldr	r3, [pc, #228]	; (8006244 <faceMain+0x24c>)
 800615e:	214c      	movs	r1, #76	; 0x4c
 8006160:	20aa      	movs	r0, #170	; 0xaa
 8006162:	f7fc f801 	bl	8002168 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8006166:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800616a:	4b37      	ldr	r3, [pc, #220]	; (8006248 <faceMain+0x250>)
 800616c:	214c      	movs	r1, #76	; 0x4c
 800616e:	f240 103b 	movw	r0, #315	; 0x13b
 8006172:	f7fb fff9 	bl	8002168 <lcdPutStr>

	char buffString[30] = {0};
 8006176:	2300      	movs	r3, #0
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
 8006188:	615a      	str	r2, [r3, #20]
 800618a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800618c:	463b      	mov	r3, r7
 800618e:	492f      	ldr	r1, [pc, #188]	; (800624c <faceMain+0x254>)
 8006190:	4618      	mov	r0, r3
 8006192:	f007 f947 	bl	800d424 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8006196:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <faceMain+0x258>)
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	461a      	mov	r2, r3
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <faceMain+0x25c>)
 800619e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061a2:	4b2b      	ldr	r3, [pc, #172]	; (8006250 <faceMain+0x258>)
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80061aa:	4638      	mov	r0, r7
 80061ac:	492a      	ldr	r1, [pc, #168]	; (8006258 <faceMain+0x260>)
 80061ae:	f007 f939 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80061b2:	2314      	movs	r3, #20
 80061b4:	b29c      	uxth	r4, r3
 80061b6:	463b      	mov	r3, r7
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fa f819 	bl	80001f0 <strlen>
 80061be:	4603      	mov	r3, r0
 80061c0:	f1c3 030d 	rsb	r3, r3, #13
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	fb14 f303 	smulbb	r3, r4, r3
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3323      	adds	r3, #35	; 0x23
 80061ce:	b298      	uxth	r0, r3
 80061d0:	463a      	mov	r2, r7
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <faceMain+0x238>)
 80061d4:	21ae      	movs	r1, #174	; 0xae
 80061d6:	f7fb ffc7 	bl	8002168 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <faceMain+0x258>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <faceMain+0x264>)
 80061e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <faceMain+0x258>)
 80061e8:	789b      	ldrb	r3, [r3, #2]
 80061ea:	4638      	mov	r0, r7
 80061ec:	491a      	ldr	r1, [pc, #104]	; (8006258 <faceMain+0x260>)
 80061ee:	f007 f919 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80061f2:	2314      	movs	r3, #20
 80061f4:	b29c      	uxth	r4, r3
 80061f6:	463b      	mov	r3, r7
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7f9 fff9 	bl	80001f0 <strlen>
 80061fe:	4603      	mov	r3, r0
 8006200:	f1c3 030d 	rsb	r3, r3, #13
 8006204:	b29b      	uxth	r3, r3
 8006206:	fb14 f303 	smulbb	r3, r4, r3
 800620a:	b29b      	uxth	r3, r3
 800620c:	3323      	adds	r3, #35	; 0x23
 800620e:	b298      	uxth	r0, r3
 8006210:	463a      	mov	r2, r7
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <faceMain+0x238>)
 8006214:	21ca      	movs	r1, #202	; 0xca
 8006216:	f7fb ffa7 	bl	8002168 <lcdPutStr>

	enableCntxMenu();
 800621a:	f7fd ffb9 	bl	8004190 <enableCntxMenu>
}
 800621e:	bf00      	nop
 8006220:	37c4      	adds	r7, #196	; 0xc4
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}
 8006226:	bf00      	nop
 8006228:	20000558 	.word	0x20000558
 800622c:	08013e34 	.word	0x08013e34
 8006230:	08026c28 	.word	0x08026c28
 8006234:	42c80000 	.word	0x42c80000
 8006238:	08013e3c 	.word	0x08013e3c
 800623c:	2000357c 	.word	0x2000357c
 8006240:	08013e48 	.word	0x08013e48
 8006244:	0802e0d8 	.word	0x0802e0d8
 8006248:	08028a90 	.word	0x08028a90
 800624c:	08013e50 	.word	0x08013e50
 8006250:	20003590 	.word	0x20003590
 8006254:	200001ac 	.word	0x200001ac
 8006258:	08013e60 	.word	0x08013e60
 800625c:	2000018c 	.word	0x2000018c

08006260 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <setDefaultClbcks+0x34>)
 8006266:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <setDefaultClbcks+0x38>)
 8006268:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <setDefaultClbcks+0x3c>)
 800626c:	4a0c      	ldr	r2, [pc, #48]	; (80062a0 <setDefaultClbcks+0x40>)
 800626e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <setDefaultClbcks+0x44>)
 8006272:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <setDefaultClbcks+0x48>)
 8006274:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <setDefaultClbcks+0x4c>)
 8006278:	4a0d      	ldr	r2, [pc, #52]	; (80062b0 <setDefaultClbcks+0x50>)
 800627a:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800627c:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <setDefaultClbcks+0x54>)
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <setDefaultClbcks+0x58>)
 8006280:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <setDefaultClbcks+0x5c>)
 8006284:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <setDefaultClbcks+0x60>)
 8006286:	611a      	str	r2, [r3, #16]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	2000061c 	.word	0x2000061c
 8006298:	080065d1 	.word	0x080065d1
 800629c:	200005f8 	.word	0x200005f8
 80062a0:	08006491 	.word	0x08006491
 80062a4:	200005d4 	.word	0x200005d4
 80062a8:	080065dd 	.word	0x080065dd
 80062ac:	20000568 	.word	0x20000568
 80062b0:	08006549 	.word	0x08006549
 80062b4:	2000058c 	.word	0x2000058c
 80062b8:	08006461 	.word	0x08006461
 80062bc:	200005b0 	.word	0x200005b0
 80062c0:	080064c1 	.word	0x080064c1

080062c4 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80062c8:	f7ff ffca 	bl	8006260 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <dateInputSetup+0x24>)
 80062ce:	789a      	ldrb	r2, [r3, #2]
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <dateInputSetup+0x28>)
 80062d2:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <dateInputSetup+0x24>)
 80062d6:	785a      	ldrb	r2, [r3, #1]
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <dateInputSetup+0x28>)
 80062da:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 80062dc:	4b02      	ldr	r3, [pc, #8]	; (80062e8 <dateInputSetup+0x24>)
 80062de:	78da      	ldrb	r2, [r3, #3]
 80062e0:	4b02      	ldr	r3, [pc, #8]	; (80062ec <dateInputSetup+0x28>)
 80062e2:	709a      	strb	r2, [r3, #2]
}
 80062e4:	bf00      	nop
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20003590 	.word	0x20003590
 80062ec:	20003a6c 	.word	0x20003a6c

080062f0 <dateInputMain>:

void dateInputMain(void){
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 80062f6:	2300      	movs	r3, #0
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	611a      	str	r2, [r3, #16]
 8006308:	615a      	str	r2, [r3, #20]
 800630a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800630c:	463b      	mov	r3, r7
 800630e:	494a      	ldr	r1, [pc, #296]	; (8006438 <dateInputMain+0x148>)
 8006310:	4618      	mov	r0, r3
 8006312:	f007 f887 	bl	800d424 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8006316:	4b49      	ldr	r3, [pc, #292]	; (800643c <dateInputMain+0x14c>)
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	461a      	mov	r2, r3
 800631c:	4b48      	ldr	r3, [pc, #288]	; (8006440 <dateInputMain+0x150>)
 800631e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006322:	4b46      	ldr	r3, [pc, #280]	; (800643c <dateInputMain+0x14c>)
 8006324:	789b      	ldrb	r3, [r3, #2]
 8006326:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800632a:	4638      	mov	r0, r7
 800632c:	4945      	ldr	r1, [pc, #276]	; (8006444 <dateInputMain+0x154>)
 800632e:	f007 f879 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006332:	2314      	movs	r3, #20
 8006334:	b29c      	uxth	r4, r3
 8006336:	463b      	mov	r3, r7
 8006338:	4618      	mov	r0, r3
 800633a:	f7f9 ff59 	bl	80001f0 <strlen>
 800633e:	4603      	mov	r3, r0
 8006340:	f1c3 030d 	rsb	r3, r3, #13
 8006344:	b29b      	uxth	r3, r3
 8006346:	fb14 f303 	smulbb	r3, r4, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	3323      	adds	r3, #35	; 0x23
 800634e:	b298      	uxth	r0, r3
 8006350:	463a      	mov	r2, r7
 8006352:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <dateInputMain+0x158>)
 8006354:	21ae      	movs	r1, #174	; 0xae
 8006356:	f7fb ff07 	bl	8002168 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 800635a:	4b38      	ldr	r3, [pc, #224]	; (800643c <dateInputMain+0x14c>)
 800635c:	7818      	ldrb	r0, [r3, #0]
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <dateInputMain+0x14c>)
 8006360:	7859      	ldrb	r1, [r3, #1]
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <dateInputMain+0x14c>)
 8006364:	789b      	ldrb	r3, [r3, #2]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fcb0 	bl	8006cd4 <zellerCongruence>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	4b34      	ldr	r3, [pc, #208]	; (800644c <dateInputMain+0x15c>)
 800637a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800637e:	4b2f      	ldr	r3, [pc, #188]	; (800643c <dateInputMain+0x14c>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	4638      	mov	r0, r7
 8006384:	492f      	ldr	r1, [pc, #188]	; (8006444 <dateInputMain+0x154>)
 8006386:	f007 f84d 	bl	800d424 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800638a:	2314      	movs	r3, #20
 800638c:	b29c      	uxth	r4, r3
 800638e:	463b      	mov	r3, r7
 8006390:	4618      	mov	r0, r3
 8006392:	f7f9 ff2d 	bl	80001f0 <strlen>
 8006396:	4603      	mov	r3, r0
 8006398:	f1c3 030d 	rsb	r3, r3, #13
 800639c:	b29b      	uxth	r3, r3
 800639e:	fb14 f303 	smulbb	r3, r4, r3
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3323      	adds	r3, #35	; 0x23
 80063a6:	b298      	uxth	r0, r3
 80063a8:	463a      	mov	r2, r7
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <dateInputMain+0x158>)
 80063ac:	21ca      	movs	r1, #202	; 0xca
 80063ae:	f7fb fedb 	bl	8002168 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 80063b2:	4b27      	ldr	r3, [pc, #156]	; (8006450 <dateInputMain+0x160>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	4b26      	ldr	r3, [pc, #152]	; (8006454 <dateInputMain+0x164>)
 80063ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80063be:	4618      	mov	r0, r3
 80063c0:	4b23      	ldr	r3, [pc, #140]	; (8006450 <dateInputMain+0x160>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <dateInputMain+0x164>)
 80063c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b20      	ldr	r3, [pc, #128]	; (8006450 <dateInputMain+0x160>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4b20      	ldr	r3, [pc, #128]	; (8006458 <dateInputMain+0x168>)
 80063d6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80063da:	18d1      	adds	r1, r2, r3
 80063dc:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <dateInputMain+0x160>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <dateInputMain+0x16c>)
 80063e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80063e8:	461a      	mov	r2, r3
 80063ea:	2301      	movs	r3, #1
 80063ec:	f7fc fb26 	bl	8002a3c <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <dateInputMain+0x160>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <dateInputMain+0x164>)
 80063f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80063fc:	4618      	mov	r0, r3
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <dateInputMain+0x160>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <dateInputMain+0x164>)
 8006406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800640a:	461a      	mov	r2, r3
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <dateInputMain+0x160>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4619      	mov	r1, r3
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <dateInputMain+0x168>)
 8006414:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006418:	18d1      	adds	r1, r2, r3
 800641a:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <dateInputMain+0x160>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <dateInputMain+0x16c>)
 8006422:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	2301      	movs	r3, #1
 800642a:	f7fc fb07 	bl	8002a3c <lcdHLine>
}
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd90      	pop	{r4, r7, pc}
 8006436:	bf00      	nop
 8006438:	08013f20 	.word	0x08013f20
 800643c:	20003a6c 	.word	0x20003a6c
 8006440:	20000210 	.word	0x20000210
 8006444:	08013f30 	.word	0x08013f30
 8006448:	08030060 	.word	0x08030060
 800644c:	200001f0 	.word	0x200001f0
 8006450:	20003a68 	.word	0x20003a68
 8006454:	20000244 	.word	0x20000244
 8006458:	20000254 	.word	0x20000254
 800645c:	2000024c 	.word	0x2000024c

08006460 <cursorNext>:

static void cursorNext(void){
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <cursorNext+0x2c>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d806      	bhi.n	800647a <cursorNext+0x1a>
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <cursorNext+0x2c>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <cursorNext+0x2c>)
 8006476:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8006478:	e002      	b.n	8006480 <cursorNext+0x20>
	else curPosition = 0;
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <cursorNext+0x2c>)
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
}
 8006480:	bf00      	nop
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20003a68 	.word	0x20003a68

08006490 <cursorPrev>:
static void cursorPrev(void){
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8006494:	4b09      	ldr	r3, [pc, #36]	; (80064bc <cursorPrev+0x2c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <cursorPrev+0x1a>
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <cursorPrev+0x2c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <cursorPrev+0x2c>)
 80064a6:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 80064a8:	e002      	b.n	80064b0 <cursorPrev+0x20>
	else curPosition = 2;
 80064aa:	4b04      	ldr	r3, [pc, #16]	; (80064bc <cursorPrev+0x2c>)
 80064ac:	2202      	movs	r2, #2
 80064ae:	701a      	strb	r2, [r3, #0]
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20003a68 	.word	0x20003a68

080064c0 <increment>:
static void increment(void){
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
	switch(curPosition){
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <increment+0x80>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d024      	beq.n	8006516 <increment+0x56>
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	dc31      	bgt.n	8006534 <increment+0x74>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <increment+0x1a>
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d00f      	beq.n	80064f8 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 80064d8:	e02c      	b.n	8006534 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 80064da:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <increment+0x84>)
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b0b      	cmp	r3, #11
 80064e0:	d806      	bhi.n	80064f0 <increment+0x30>
 80064e2:	4b18      	ldr	r3, [pc, #96]	; (8006544 <increment+0x84>)
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	3301      	adds	r3, #1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b16      	ldr	r3, [pc, #88]	; (8006544 <increment+0x84>)
 80064ec:	705a      	strb	r2, [r3, #1]
			break;
 80064ee:	e021      	b.n	8006534 <increment+0x74>
			else valDatePos[1] = 1;
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <increment+0x84>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	705a      	strb	r2, [r3, #1]
			break;
 80064f6:	e01d      	b.n	8006534 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 80064f8:	4b12      	ldr	r3, [pc, #72]	; (8006544 <increment+0x84>)
 80064fa:	789b      	ldrb	r3, [r3, #2]
 80064fc:	2b63      	cmp	r3, #99	; 0x63
 80064fe:	d806      	bhi.n	800650e <increment+0x4e>
 8006500:	4b10      	ldr	r3, [pc, #64]	; (8006544 <increment+0x84>)
 8006502:	789b      	ldrb	r3, [r3, #2]
 8006504:	3301      	adds	r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <increment+0x84>)
 800650a:	709a      	strb	r2, [r3, #2]
			break;
 800650c:	e012      	b.n	8006534 <increment+0x74>
			else valDatePos[2] = 0;
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <increment+0x84>)
 8006510:	2200      	movs	r2, #0
 8006512:	709a      	strb	r2, [r3, #2]
			break;
 8006514:	e00e      	b.n	8006534 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <increment+0x84>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b1e      	cmp	r3, #30
 800651c:	d806      	bhi.n	800652c <increment+0x6c>
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <increment+0x84>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <increment+0x84>)
 8006528:	701a      	strb	r2, [r3, #0]
			break;
 800652a:	e002      	b.n	8006532 <increment+0x72>
			else valDatePos[0] = 1;
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <increment+0x84>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
			break;
 8006532:	bf00      	nop
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20003a68 	.word	0x20003a68
 8006544:	20003a6c 	.word	0x20003a6c

08006548 <decrement>:
static void decrement(void){
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800654c:	4b1e      	ldr	r3, [pc, #120]	; (80065c8 <decrement+0x80>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d024      	beq.n	800659e <decrement+0x56>
 8006554:	2b02      	cmp	r3, #2
 8006556:	dc31      	bgt.n	80065bc <decrement+0x74>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <decrement+0x1a>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d00f      	beq.n	8006580 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8006560:	e02c      	b.n	80065bc <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8006562:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <decrement+0x84>)
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <decrement+0x30>
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <decrement+0x84>)
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	3b01      	subs	r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <decrement+0x84>)
 8006574:	705a      	strb	r2, [r3, #1]
				break;
 8006576:	e021      	b.n	80065bc <decrement+0x74>
				else valDatePos[1] = 12;
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <decrement+0x84>)
 800657a:	220c      	movs	r2, #12
 800657c:	705a      	strb	r2, [r3, #1]
				break;
 800657e:	e01d      	b.n	80065bc <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8006580:	4b12      	ldr	r3, [pc, #72]	; (80065cc <decrement+0x84>)
 8006582:	789b      	ldrb	r3, [r3, #2]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <decrement+0x4e>
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <decrement+0x84>)
 800658a:	789b      	ldrb	r3, [r3, #2]
 800658c:	3b01      	subs	r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <decrement+0x84>)
 8006592:	709a      	strb	r2, [r3, #2]
				break;
 8006594:	e012      	b.n	80065bc <decrement+0x74>
				else valDatePos[2] = 100;
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <decrement+0x84>)
 8006598:	2264      	movs	r2, #100	; 0x64
 800659a:	709a      	strb	r2, [r3, #2]
				break;
 800659c:	e00e      	b.n	80065bc <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <decrement+0x84>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d906      	bls.n	80065b4 <decrement+0x6c>
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <decrement+0x84>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <decrement+0x84>)
 80065b0:	701a      	strb	r2, [r3, #0]
				break;
 80065b2:	e002      	b.n	80065ba <decrement+0x72>
				else valDatePos[0] = 31;
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <decrement+0x84>)
 80065b6:	221f      	movs	r2, #31
 80065b8:	701a      	strb	r2, [r3, #0]
				break;
 80065ba:	bf00      	nop
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20003a68 	.word	0x20003a68
 80065cc:	20003a6c 	.word	0x20003a6c

080065d0 <exit>:
static void exit(void){
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80065d4:	f7fb fbac 	bl	8001d30 <applySelectedScreen>
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}

080065dc <accept>:
static void accept(void){
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 80065e0:	4b15      	ldr	r3, [pc, #84]	; (8006638 <accept+0x5c>)
 80065e2:	785a      	ldrb	r2, [r3, #1]
 80065e4:	4b15      	ldr	r3, [pc, #84]	; (800663c <accept+0x60>)
 80065e6:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 80065e8:	4b13      	ldr	r3, [pc, #76]	; (8006638 <accept+0x5c>)
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <accept+0x60>)
 80065ee:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <accept+0x5c>)
 80065f2:	789a      	ldrb	r2, [r3, #2]
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <accept+0x60>)
 80065f6:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <accept+0x5c>)
 80065fa:	7818      	ldrb	r0, [r3, #0]
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <accept+0x5c>)
 80065fe:	7859      	ldrb	r1, [r3, #1]
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <accept+0x5c>)
 8006602:	789b      	ldrb	r3, [r3, #2]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	f000 fb61 	bl	8006cd4 <zellerCongruence>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <accept+0x60>)
 8006618:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800661a:	2200      	movs	r2, #0
 800661c:	4907      	ldr	r1, [pc, #28]	; (800663c <accept+0x60>)
 800661e:	4808      	ldr	r0, [pc, #32]	; (8006640 <accept+0x64>)
 8006620:	f003 f850 	bl	80096c4 <HAL_RTC_SetDate>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <accept+0x52>
	{
	Error_Handler();
 800662a:	f7fc fd3f 	bl	80030ac <Error_Handler>
	}
	exit();
 800662e:	f7ff ffcf 	bl	80065d0 <exit>
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20003a6c 	.word	0x20003a6c
 800663c:	20003590 	.word	0x20003590
 8006640:	20003810 	.word	0x20003810

08006644 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <setDefaultClbcks+0x34>)
 800664a:	4a0c      	ldr	r2, [pc, #48]	; (800667c <setDefaultClbcks+0x38>)
 800664c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <setDefaultClbcks+0x3c>)
 8006650:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <setDefaultClbcks+0x40>)
 8006652:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <setDefaultClbcks+0x44>)
 8006656:	4a0d      	ldr	r2, [pc, #52]	; (800668c <setDefaultClbcks+0x48>)
 8006658:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <setDefaultClbcks+0x4c>)
 800665c:	4a0d      	ldr	r2, [pc, #52]	; (8006694 <setDefaultClbcks+0x50>)
 800665e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006660:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <setDefaultClbcks+0x54>)
 8006662:	4a0e      	ldr	r2, [pc, #56]	; (800669c <setDefaultClbcks+0x58>)
 8006664:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8006666:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <setDefaultClbcks+0x5c>)
 8006668:	4a0e      	ldr	r2, [pc, #56]	; (80066a4 <setDefaultClbcks+0x60>)
 800666a:	611a      	str	r2, [r3, #16]
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2000061c 	.word	0x2000061c
 800667c:	080069c9 	.word	0x080069c9
 8006680:	200005f8 	.word	0x200005f8
 8006684:	0800680d 	.word	0x0800680d
 8006688:	200005d4 	.word	0x200005d4
 800668c:	080069d5 	.word	0x080069d5
 8006690:	20000568 	.word	0x20000568
 8006694:	080068f9 	.word	0x080068f9
 8006698:	2000058c 	.word	0x2000058c
 800669c:	080067dd 	.word	0x080067dd
 80066a0:	200005b0 	.word	0x200005b0
 80066a4:	0800683d 	.word	0x0800683d

080066a8 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80066ac:	f7ff ffca 	bl	8006644 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <timeInputSetup+0x24>)
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <timeInputSetup+0x28>)
 80066b6:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <timeInputSetup+0x24>)
 80066ba:	785a      	ldrb	r2, [r3, #1]
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <timeInputSetup+0x28>)
 80066be:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <timeInputSetup+0x24>)
 80066c2:	789a      	ldrb	r2, [r3, #2]
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <timeInputSetup+0x28>)
 80066c6:	709a      	strb	r2, [r3, #2]
}
 80066c8:	bf00      	nop
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	2000357c 	.word	0x2000357c
 80066d0:	20003a70 	.word	0x20003a70

080066d4 <timeInputMain>:

void timeInputMain(void){
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 80066da:	2300      	movs	r3, #0
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	1d3b      	adds	r3, r7, #4
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	609a      	str	r2, [r3, #8]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	611a      	str	r2, [r3, #16]
 80066ec:	615a      	str	r2, [r3, #20]
 80066ee:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 80066f0:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <timeInputMain+0xec>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	463b      	mov	r3, r7
 80066f8:	4932      	ldr	r1, [pc, #200]	; (80067c4 <timeInputMain+0xf0>)
 80066fa:	4618      	mov	r0, r3
 80066fc:	f006 fe92 	bl	800d424 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8006700:	463a      	mov	r2, r7
 8006702:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <timeInputMain+0xf4>)
 8006704:	214c      	movs	r1, #76	; 0x4c
 8006706:	2014      	movs	r0, #20
 8006708:	f7fb fd2e 	bl	8002168 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <timeInputMain+0xec>)
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	461a      	mov	r2, r3
 8006712:	463b      	mov	r3, r7
 8006714:	492b      	ldr	r1, [pc, #172]	; (80067c4 <timeInputMain+0xf0>)
 8006716:	4618      	mov	r0, r3
 8006718:	f006 fe84 	bl	800d424 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 800671c:	463a      	mov	r2, r7
 800671e:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <timeInputMain+0xf4>)
 8006720:	214c      	movs	r1, #76	; 0x4c
 8006722:	20aa      	movs	r0, #170	; 0xaa
 8006724:	f7fb fd20 	bl	8002168 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8006728:	4b28      	ldr	r3, [pc, #160]	; (80067cc <timeInputMain+0xf8>)
 800672a:	789b      	ldrb	r3, [r3, #2]
 800672c:	461a      	mov	r2, r3
 800672e:	463b      	mov	r3, r7
 8006730:	4924      	ldr	r1, [pc, #144]	; (80067c4 <timeInputMain+0xf0>)
 8006732:	4618      	mov	r0, r3
 8006734:	f006 fe76 	bl	800d424 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8006738:	463a      	mov	r2, r7
 800673a:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <timeInputMain+0xfc>)
 800673c:	214c      	movs	r1, #76	; 0x4c
 800673e:	f240 103b 	movw	r0, #315	; 0x13b
 8006742:	f7fb fd11 	bl	8002168 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8006746:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <timeInputMain+0x100>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <timeInputMain+0x104>)
 800674e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006752:	4618      	mov	r0, r3
 8006754:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <timeInputMain+0x100>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <timeInputMain+0x104>)
 800675c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006760:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006764:	2301      	movs	r3, #1
 8006766:	22af      	movs	r2, #175	; 0xaf
 8006768:	f7fc f968 	bl	8002a3c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 800676c:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <timeInputMain+0x100>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <timeInputMain+0x104>)
 8006774:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006778:	4618      	mov	r0, r3
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <timeInputMain+0x100>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <timeInputMain+0x104>)
 8006782:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006786:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800678a:	2301      	movs	r3, #1
 800678c:	22b0      	movs	r2, #176	; 0xb0
 800678e:	f7fc f955 	bl	8002a3c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <timeInputMain+0x100>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <timeInputMain+0x104>)
 800679a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800679e:	4618      	mov	r0, r3
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <timeInputMain+0x100>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <timeInputMain+0x104>)
 80067a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80067b0:	2301      	movs	r3, #1
 80067b2:	22b1      	movs	r2, #177	; 0xb1
 80067b4:	f7fc f942 	bl	8002a3c <lcdHLine>
}
 80067b8:	bf00      	nop
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20003a70 	.word	0x20003a70
 80067c4:	08013ff0 	.word	0x08013ff0
 80067c8:	08037510 	.word	0x08037510
 80067cc:	2000357c 	.word	0x2000357c
 80067d0:	08031ec8 	.word	0x08031ec8
 80067d4:	20003a6f 	.word	0x20003a6f
 80067d8:	20000284 	.word	0x20000284

080067dc <cursorNext>:

static void cursorNext(void){
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <cursorNext+0x2c>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d806      	bhi.n	80067f6 <cursorNext+0x1a>
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <cursorNext+0x2c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <cursorNext+0x2c>)
 80067f2:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80067f4:	e002      	b.n	80067fc <cursorNext+0x20>
	else curPosition = 0;
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <cursorNext+0x2c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20003a6f 	.word	0x20003a6f

0800680c <cursorPrev>:
static void cursorPrev(void){
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <cursorPrev+0x2c>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d006      	beq.n	8006826 <cursorPrev+0x1a>
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <cursorPrev+0x2c>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <cursorPrev+0x2c>)
 8006822:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8006824:	e002      	b.n	800682c <cursorPrev+0x20>
	else curPosition = 4;
 8006826:	4b04      	ldr	r3, [pc, #16]	; (8006838 <cursorPrev+0x2c>)
 8006828:	2204      	movs	r2, #4
 800682a:	701a      	strb	r2, [r3, #0]
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20003a6f 	.word	0x20003a6f

0800683c <increment>:
static void increment(void){
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006840:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <increment+0xb4>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d84d      	bhi.n	80068e4 <increment+0xa8>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <increment+0x14>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006865 	.word	0x08006865
 8006854:	08006883 	.word	0x08006883
 8006858:	080068a1 	.word	0x080068a1
 800685c:	080068bf 	.word	0x080068bf
 8006860:	080068dd 	.word	0x080068dd
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <increment+0xb8>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d806      	bhi.n	800687a <increment+0x3e>
 800686c:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <increment+0xb8>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	330a      	adds	r3, #10
 8006872:	b2da      	uxtb	r2, r3
 8006874:	4b1f      	ldr	r3, [pc, #124]	; (80068f4 <increment+0xb8>)
 8006876:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8006878:	e034      	b.n	80068e4 <increment+0xa8>
			else valTimePos[0] = 20;
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <increment+0xb8>)
 800687c:	2214      	movs	r2, #20
 800687e:	701a      	strb	r2, [r3, #0]
			break;
 8006880:	e030      	b.n	80068e4 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <increment+0xb8>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b17      	cmp	r3, #23
 8006888:	d806      	bhi.n	8006898 <increment+0x5c>
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <increment+0xb8>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	3301      	adds	r3, #1
 8006890:	b2da      	uxtb	r2, r3
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <increment+0xb8>)
 8006894:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8006896:	e025      	b.n	80068e4 <increment+0xa8>
			else valTimePos[0] = 0;
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <increment+0xb8>)
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
			break;
 800689e:	e021      	b.n	80068e4 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <increment+0xb8>)
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d806      	bhi.n	80068b6 <increment+0x7a>
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <increment+0xb8>)
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	330a      	adds	r3, #10
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <increment+0xb8>)
 80068b2:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80068b4:	e016      	b.n	80068e4 <increment+0xa8>
			else valTimePos[1] = 0;
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <increment+0xb8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
			break;
 80068bc:	e012      	b.n	80068e4 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <increment+0xb8>)
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b3a      	cmp	r3, #58	; 0x3a
 80068c4:	d806      	bhi.n	80068d4 <increment+0x98>
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <increment+0xb8>)
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	3301      	adds	r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <increment+0xb8>)
 80068d0:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80068d2:	e007      	b.n	80068e4 <increment+0xa8>
			else valTimePos[1] = 0;
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <increment+0xb8>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	705a      	strb	r2, [r3, #1]
			break;
 80068da:	e003      	b.n	80068e4 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <increment+0xb8>)
 80068de:	2200      	movs	r2, #0
 80068e0:	709a      	strb	r2, [r3, #2]
			break;
 80068e2:	bf00      	nop
	}
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20003a6f 	.word	0x20003a6f
 80068f4:	20003a70 	.word	0x20003a70

080068f8 <decrement>:
static void decrement(void){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
	switch(curPosition){
 80068fc:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <decrement+0xc0>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b04      	cmp	r3, #4
 8006902:	d857      	bhi.n	80069b4 <decrement+0xbc>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <decrement+0x14>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006921 	.word	0x08006921
 8006910:	0800693f 	.word	0x0800693f
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800697b 	.word	0x0800697b
 800691c:	08006999 	.word	0x08006999
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8006920:	4b26      	ldr	r3, [pc, #152]	; (80069bc <decrement+0xc4>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b09      	cmp	r3, #9
 8006926:	d906      	bls.n	8006936 <decrement+0x3e>
 8006928:	4b24      	ldr	r3, [pc, #144]	; (80069bc <decrement+0xc4>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	3b0a      	subs	r3, #10
 800692e:	b2da      	uxtb	r2, r3
 8006930:	4b22      	ldr	r3, [pc, #136]	; (80069bc <decrement+0xc4>)
 8006932:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8006934:	e03e      	b.n	80069b4 <decrement+0xbc>
				else valTimePos[0] = 0;
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <decrement+0xc4>)
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
				break;
 800693c:	e03a      	b.n	80069b4 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800693e:	4b1f      	ldr	r3, [pc, #124]	; (80069bc <decrement+0xc4>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <decrement+0x5c>
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <decrement+0xc4>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <decrement+0xc4>)
 8006950:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8006952:	e02f      	b.n	80069b4 <decrement+0xbc>
				else valTimePos[0] = 23;
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <decrement+0xc4>)
 8006956:	2217      	movs	r2, #23
 8006958:	701a      	strb	r2, [r3, #0]
				break;
 800695a:	e02b      	b.n	80069b4 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <decrement+0xc4>)
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b09      	cmp	r3, #9
 8006962:	d906      	bls.n	8006972 <decrement+0x7a>
 8006964:	4b15      	ldr	r3, [pc, #84]	; (80069bc <decrement+0xc4>)
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	3b0a      	subs	r3, #10
 800696a:	b2da      	uxtb	r2, r3
 800696c:	4b13      	ldr	r3, [pc, #76]	; (80069bc <decrement+0xc4>)
 800696e:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8006970:	e020      	b.n	80069b4 <decrement+0xbc>
				else valTimePos[1] = 0;
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <decrement+0xc4>)
 8006974:	2200      	movs	r2, #0
 8006976:	705a      	strb	r2, [r3, #1]
				break;
 8006978:	e01c      	b.n	80069b4 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <decrement+0xc4>)
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <decrement+0x98>
 8006982:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <decrement+0xc4>)
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	3b01      	subs	r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <decrement+0xc4>)
 800698c:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 800698e:	e011      	b.n	80069b4 <decrement+0xbc>
				else valTimePos[1] = 59;
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <decrement+0xc4>)
 8006992:	223b      	movs	r2, #59	; 0x3b
 8006994:	705a      	strb	r2, [r3, #1]
				break;
 8006996:	e00d      	b.n	80069b4 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <decrement+0xc8>)
 800699a:	2200      	movs	r2, #0
 800699c:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800699e:	2200      	movs	r2, #0
 80069a0:	4907      	ldr	r1, [pc, #28]	; (80069c0 <decrement+0xc8>)
 80069a2:	4808      	ldr	r0, [pc, #32]	; (80069c4 <decrement+0xcc>)
 80069a4:	f002 fd96 	bl	80094d4 <HAL_RTC_SetTime>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <decrement+0xba>
					{
						Error_Handler();
 80069ae:	f7fc fb7d 	bl	80030ac <Error_Handler>
					}
				break;
 80069b2:	bf00      	nop
		}
}
 80069b4:	bf00      	nop
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20003a6f 	.word	0x20003a6f
 80069bc:	20003a70 	.word	0x20003a70
 80069c0:	2000357c 	.word	0x2000357c
 80069c4:	20003810 	.word	0x20003810

080069c8 <exit>:
static void exit(void){
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80069cc:	f7fb f9b0 	bl	8001d30 <applySelectedScreen>
}
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <accept>:
static void accept(void){
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <accept+0x3c>)
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <accept+0x40>)
 80069de:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <accept+0x3c>)
 80069e2:	785a      	ldrb	r2, [r3, #1]
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <accept+0x40>)
 80069e6:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <accept+0x40>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <accept+0x40>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80069f4:	2200      	movs	r2, #0
 80069f6:	4907      	ldr	r1, [pc, #28]	; (8006a14 <accept+0x40>)
 80069f8:	4807      	ldr	r0, [pc, #28]	; (8006a18 <accept+0x44>)
 80069fa:	f002 fd6b 	bl	80094d4 <HAL_RTC_SetTime>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <accept+0x34>
	{
	Error_Handler();
 8006a04:	f7fc fb52 	bl	80030ac <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8006a08:	f7ff ffde 	bl	80069c8 <exit>
}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20003a70 	.word	0x20003a70
 8006a14:	2000357c 	.word	0x2000357c
 8006a18:	20003810 	.word	0x20003810

08006a1c <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	895b      	ldrh	r3, [r3, #10]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	4618      	mov	r0, r3
 8006a44:	f005 fba2 	bl	800c18c <malloc>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	80da      	strh	r2, [r3, #6]
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	891a      	ldrh	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	895b      	ldrh	r3, [r3, #10]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffe5 	bl	8006a6a <cbuf_isFull>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02a      	beq.n	8006afc <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	18d0      	adds	r0, r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	f005 fb73 	bl	800c1ac <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	3301      	adds	r3, #1
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	fb93 f1f2 	sdiv	r1, r3, r2
 8006ad4:	fb01 f202 	mul.w	r2, r1, r2
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	889b      	ldrh	r3, [r3, #4]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	8952      	ldrh	r2, [r2, #10]
 8006aea:	fb93 f1f2 	sdiv	r1, r3, r2
 8006aee:	fb01 f202 	mul.w	r2, r1, r2
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8006afa:	e023      	b.n	8006b44 <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	88db      	ldrh	r3, [r3, #6]
 8006b04:	4619      	mov	r1, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	18d0      	adds	r0, r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	f005 fb48 	bl	800c1ac <memcpy>
		b->elemNum++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	891b      	ldrh	r3, [r3, #8]
 8006b20:	3301      	adds	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	8952      	ldrh	r2, [r2, #10]
 8006b32:	fb93 f1f2 	sdiv	r1, r3, r2
 8006b36:	fb01 f202 	mul.w	r2, r1, r2
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	80da      	strh	r2, [r3, #6]
		return 1;
 8006b42:	2301      	movs	r3, #1
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	889a      	ldrh	r2, [r3, #4]
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	4413      	add	r3, r2
 8006b60:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	895a      	ldrh	r2, [r3, #10]
 8006b66:	887b      	ldrh	r3, [r7, #2]
 8006b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b6c:	fb01 f202 	mul.w	r2, r1, r2
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68c9      	ldr	r1, [r1, #12]
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	4413      	add	r3, r2
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	887a      	ldrh	r2, [r7, #2]
 8006ba0:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	895b      	ldrh	r3, [r3, #10]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f005 faef 	bl	800c18c <malloc>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	80da      	strh	r2, [r3, #6]
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	891a      	ldrh	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	895b      	ldrh	r3, [r3, #10]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ffe5 	bl	8006bd0 <ring_buffer_full>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d022      	beq.n	8006c52 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	88db      	ldrh	r3, [r3, #6]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	3301      	adds	r3, #1
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	8952      	ldrh	r2, [r2, #10]
 8006c26:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c2a:	fb01 f202 	mul.w	r2, r1, r2
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	889b      	ldrh	r3, [r3, #4]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	8952      	ldrh	r2, [r2, #10]
 8006c40:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c44:	fb01 f202 	mul.w	r2, r1, r2
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8006c50:	e01b      	b.n	8006c8a <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	891b      	ldrh	r3, [r3, #8]
 8006c66:	3301      	adds	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	88db      	ldrh	r3, [r3, #6]
 8006c72:	3301      	adds	r3, #1
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	8952      	ldrh	r2, [r2, #10]
 8006c78:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c7c:	fb01 f202 	mul.w	r2, r1, r2
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	80da      	strh	r2, [r3, #6]
		return 1;
 8006c88:	2301      	movs	r3, #1
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	889a      	ldrh	r2, [r3, #4]
 8006ca2:	887b      	ldrh	r3, [r7, #2]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	895a      	ldrh	r2, [r3, #10]
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cb2:	fb01 f202 	mul.w	r2, r1, r2
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	887b      	ldrh	r3, [r7, #2]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	681b      	ldr	r3, [r3, #0]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	71bb      	strb	r3, [r7, #6]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8006ce6:	79bb      	ldrb	r3, [r7, #6]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d104      	bne.n	8006cf6 <zellerCongruence+0x22>
	        month = 13;
 8006cec:	230d      	movs	r3, #13
 8006cee:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006cf0:	88bb      	ldrh	r3, [r7, #4]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8006cf6:	79bb      	ldrb	r3, [r7, #6]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d104      	bne.n	8006d06 <zellerCongruence+0x32>
	        month = 14;
 8006cfc:	230e      	movs	r3, #14
 8006cfe:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006d00:	88bb      	ldrh	r3, [r7, #4]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8006d0a:	79bb      	ldrb	r3, [r7, #6]
 8006d0c:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8006d0e:	88bb      	ldrh	r3, [r7, #4]
 8006d10:	4a29      	ldr	r2, [pc, #164]	; (8006db8 <zellerCongruence+0xe4>)
 8006d12:	fba2 1203 	umull	r1, r2, r2, r3
 8006d16:	0952      	lsrs	r2, r2, #5
 8006d18:	2164      	movs	r1, #100	; 0x64
 8006d1a:	fb01 f202 	mul.w	r2, r1, r2
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8006d24:	88bb      	ldrh	r3, [r7, #4]
 8006d26:	4a24      	ldr	r2, [pc, #144]	; (8006db8 <zellerCongruence+0xe4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006d32:	7bf9      	ldrb	r1, [r7, #15]
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	4613      	mov	r3, r2
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <zellerCongruence+0xe8>)
 8006d44:	fb82 0203 	smull	r0, r2, r2, r3
 8006d48:	1052      	asrs	r2, r2, #1
 8006d4a:	17db      	asrs	r3, r3, #31
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	18ca      	adds	r2, r1, r3
 8006d50:	7b7b      	ldrb	r3, [r7, #13]
 8006d52:	4413      	add	r3, r2
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	0892      	lsrs	r2, r2, #2
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8006d5c:	7b3a      	ldrb	r2, [r7, #12]
 8006d5e:	0892      	lsrs	r2, r2, #2
 8006d60:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006d62:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8006d64:	7b3a      	ldrb	r2, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006d6c:	440b      	add	r3, r1
 8006d6e:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <zellerCongruence+0xec>)
 8006d74:	fb83 1302 	smull	r1, r3, r3, r2
 8006d78:	4413      	add	r3, r2
 8006d7a:	1099      	asrs	r1, r3, #2
 8006d7c:	17d3      	asrs	r3, r2, #31
 8006d7e:	1ac9      	subs	r1, r1, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	1a5b      	subs	r3, r3, r1
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	1d5a      	adds	r2, r3, #5
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <zellerCongruence+0xec>)
 8006d90:	fb83 1302 	smull	r1, r3, r3, r2
 8006d94:	4413      	add	r3, r2
 8006d96:	1099      	asrs	r1, r3, #2
 8006d98:	17d3      	asrs	r3, r2, #31
 8006d9a:	1ac9      	subs	r1, r1, r3
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	1a5b      	subs	r3, r3, r1
 8006da2:	1ad1      	subs	r1, r2, r3
 8006da4:	b2cb      	uxtb	r3, r1
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2db      	uxtb	r3, r3
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	51eb851f 	.word	0x51eb851f
 8006dbc:	66666667 	.word	0x66666667
 8006dc0:	92492493 	.word	0x92492493

08006dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dfc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006dc8:	480d      	ldr	r0, [pc, #52]	; (8006e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006dca:	490e      	ldr	r1, [pc, #56]	; (8006e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006dcc:	4a0e      	ldr	r2, [pc, #56]	; (8006e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dd0:	e002      	b.n	8006dd8 <LoopCopyDataInit>

08006dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dd6:	3304      	adds	r3, #4

08006dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ddc:	d3f9      	bcc.n	8006dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dde:	4a0b      	ldr	r2, [pc, #44]	; (8006e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006de0:	4c0b      	ldr	r4, [pc, #44]	; (8006e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006de4:	e001      	b.n	8006dea <LoopFillZerobss>

08006de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006de8:	3204      	adds	r2, #4

08006dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006dec:	d3fb      	bcc.n	8006de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006dee:	f7fc fb61 	bl	80034b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006df2:	f005 f9a7 	bl	800c144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006df6:	f7fb fffb 	bl	8002df0 <main>
  bx  lr    
 8006dfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006dfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e04:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8006e08:	08039e50 	.word	0x08039e50
  ldr r2, =_sbss
 8006e0c:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8006e10:	20003ab8 	.word	0x20003ab8

08006e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e14:	e7fe      	b.n	8006e14 <ADC_IRQHandler>
	...

08006e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <HAL_Init+0x40>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <HAL_Init+0x40>)
 8006e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_Init+0x40>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <HAL_Init+0x40>)
 8006e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e34:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <HAL_Init+0x40>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <HAL_Init+0x40>)
 8006e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e40:	2003      	movs	r0, #3
 8006e42:	f000 f94f 	bl	80070e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e46:	2000      	movs	r0, #0
 8006e48:	f000 f808 	bl	8006e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e4c:	f7fc fa14 	bl	8003278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40023c00 	.word	0x40023c00

08006e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_InitTick+0x54>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <HAL_InitTick+0x58>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f967 	bl	800714e <HAL_SYSTICK_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e00e      	b.n	8006ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d80a      	bhi.n	8006ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e90:	2200      	movs	r2, #0
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	f000 f92f 	bl	80070fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e9c:	4a06      	ldr	r2, [pc, #24]	; (8006eb8 <HAL_InitTick+0x5c>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000180 	.word	0x20000180
 8006eb4:	200002bc 	.word	0x200002bc
 8006eb8:	200002b8 	.word	0x200002b8

08006ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_IncTick+0x20>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <HAL_IncTick+0x24>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4413      	add	r3, r2
 8006ecc:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <HAL_IncTick+0x24>)
 8006ece:	6013      	str	r3, [r2, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	200002bc 	.word	0x200002bc
 8006ee0:	20003a74 	.word	0x20003a74

08006ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <HAL_GetTick+0x14>)
 8006eea:	681b      	ldr	r3, [r3, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20003a74 	.word	0x20003a74

08006efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f04:	f7ff ffee 	bl	8006ee4 <HAL_GetTick>
 8006f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d005      	beq.n	8006f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <HAL_Delay+0x44>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f22:	bf00      	nop
 8006f24:	f7ff ffde 	bl	8006ee4 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d8f7      	bhi.n	8006f24 <HAL_Delay+0x28>
  {
  }
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200002bc 	.word	0x200002bc

08006f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <__NVIC_SetPriorityGrouping+0x44>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f60:	4013      	ands	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f76:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <__NVIC_SetPriorityGrouping+0x44>)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	60d3      	str	r3, [r2, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	0a1b      	lsrs	r3, r3, #8
 8006f96:	f003 0307 	and.w	r3, r3, #7
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	db0b      	blt.n	8006fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	f003 021f 	and.w	r2, r3, #31
 8006fc0:	4907      	ldr	r1, [pc, #28]	; (8006fe0 <__NVIC_EnableIRQ+0x38>)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	2001      	movs	r0, #1
 8006fca:	fa00 f202 	lsl.w	r2, r0, r2
 8006fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	e000e100 	.word	0xe000e100

08006fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	db0a      	blt.n	800700e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	490c      	ldr	r1, [pc, #48]	; (8007030 <__NVIC_SetPriority+0x4c>)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	0112      	lsls	r2, r2, #4
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	440b      	add	r3, r1
 8007008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800700c:	e00a      	b.n	8007024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	4908      	ldr	r1, [pc, #32]	; (8007034 <__NVIC_SetPriority+0x50>)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	3b04      	subs	r3, #4
 800701c:	0112      	lsls	r2, r2, #4
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	440b      	add	r3, r1
 8007022:	761a      	strb	r2, [r3, #24]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	e000e100 	.word	0xe000e100
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f1c3 0307 	rsb	r3, r3, #7
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf28      	it	cs
 8007056:	2304      	movcs	r3, #4
 8007058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3304      	adds	r3, #4
 800705e:	2b06      	cmp	r3, #6
 8007060:	d902      	bls.n	8007068 <NVIC_EncodePriority+0x30>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	3b03      	subs	r3, #3
 8007066:	e000      	b.n	800706a <NVIC_EncodePriority+0x32>
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	43da      	mvns	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	401a      	ands	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007080:	f04f 31ff 	mov.w	r1, #4294967295
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	43d9      	mvns	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007090:	4313      	orrs	r3, r2
         );
}
 8007092:	4618      	mov	r0, r3
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070b0:	d301      	bcc.n	80070b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070b2:	2301      	movs	r3, #1
 80070b4:	e00f      	b.n	80070d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070b6:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <SysTick_Config+0x40>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070be:	210f      	movs	r1, #15
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	f7ff ff8e 	bl	8006fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <SysTick_Config+0x40>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <SysTick_Config+0x40>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000e010 	.word	0xe000e010

080070e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff29 	bl	8006f44 <__NVIC_SetPriorityGrouping>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800710c:	f7ff ff3e 	bl	8006f8c <__NVIC_GetPriorityGrouping>
 8007110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	6978      	ldr	r0, [r7, #20]
 8007118:	f7ff ff8e 	bl	8007038 <NVIC_EncodePriority>
 800711c:	4602      	mov	r2, r0
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff5d 	bl	8006fe4 <__NVIC_SetPriority>
}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff31 	bl	8006fa8 <__NVIC_EnableIRQ>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ffa2 	bl	80070a0 <SysTick_Config>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007174:	f7ff feb6 	bl	8006ee4 <HAL_GetTick>
 8007178:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d008      	beq.n	8007198 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e052      	b.n	800723e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0216 	bic.w	r2, r2, #22
 80071a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <HAL_DMA_Abort+0x62>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0208 	bic.w	r2, r2, #8
 80071d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e8:	e013      	b.n	8007212 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ea:	f7ff fe7b 	bl	8006ee4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d90c      	bls.n	8007212 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2203      	movs	r2, #3
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e015      	b.n	800723e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e4      	bne.n	80071ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	223f      	movs	r2, #63	; 0x3f
 8007226:	409a      	lsls	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d004      	beq.n	8007264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2280      	movs	r2, #128	; 0x80
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e00c      	b.n	800727e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2205      	movs	r2, #5
 8007268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e177      	b.n	8007598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072a8:	2201      	movs	r2, #1
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	f040 8166 	bne.w	8007592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d005      	beq.n	80072de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d130      	bne.n	8007340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	2203      	movs	r2, #3
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4013      	ands	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007314:	2201      	movs	r2, #1
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	43db      	mvns	r3, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 0201 	and.w	r2, r3, #1
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4313      	orrs	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	2b03      	cmp	r3, #3
 800734a:	d017      	beq.n	800737c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	2203      	movs	r2, #3
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d123      	bne.n	80073d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	08da      	lsrs	r2, r3, #3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3208      	adds	r2, #8
 8007390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	220f      	movs	r2, #15
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	08da      	lsrs	r2, r3, #3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3208      	adds	r2, #8
 80073ca:	69b9      	ldr	r1, [r7, #24]
 80073cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	2203      	movs	r2, #3
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43db      	mvns	r3, r3
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	4013      	ands	r3, r2
 80073e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 0203 	and.w	r2, r3, #3
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80c0 	beq.w	8007592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	4b66      	ldr	r3, [pc, #408]	; (80075b0 <HAL_GPIO_Init+0x324>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	4a65      	ldr	r2, [pc, #404]	; (80075b0 <HAL_GPIO_Init+0x324>)
 800741c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007420:	6453      	str	r3, [r2, #68]	; 0x44
 8007422:	4b63      	ldr	r3, [pc, #396]	; (80075b0 <HAL_GPIO_Init+0x324>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800742e:	4a61      	ldr	r2, [pc, #388]	; (80075b4 <HAL_GPIO_Init+0x328>)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	089b      	lsrs	r3, r3, #2
 8007434:	3302      	adds	r3, #2
 8007436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	220f      	movs	r2, #15
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_GPIO_Init+0x32c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d037      	beq.n	80074ca <HAL_GPIO_Init+0x23e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a57      	ldr	r2, [pc, #348]	; (80075bc <HAL_GPIO_Init+0x330>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d031      	beq.n	80074c6 <HAL_GPIO_Init+0x23a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a56      	ldr	r2, [pc, #344]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d02b      	beq.n	80074c2 <HAL_GPIO_Init+0x236>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a55      	ldr	r2, [pc, #340]	; (80075c4 <HAL_GPIO_Init+0x338>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d025      	beq.n	80074be <HAL_GPIO_Init+0x232>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a54      	ldr	r2, [pc, #336]	; (80075c8 <HAL_GPIO_Init+0x33c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01f      	beq.n	80074ba <HAL_GPIO_Init+0x22e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a53      	ldr	r2, [pc, #332]	; (80075cc <HAL_GPIO_Init+0x340>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d019      	beq.n	80074b6 <HAL_GPIO_Init+0x22a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a52      	ldr	r2, [pc, #328]	; (80075d0 <HAL_GPIO_Init+0x344>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_GPIO_Init+0x226>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a51      	ldr	r2, [pc, #324]	; (80075d4 <HAL_GPIO_Init+0x348>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00d      	beq.n	80074ae <HAL_GPIO_Init+0x222>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a50      	ldr	r2, [pc, #320]	; (80075d8 <HAL_GPIO_Init+0x34c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d007      	beq.n	80074aa <HAL_GPIO_Init+0x21e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a4f      	ldr	r2, [pc, #316]	; (80075dc <HAL_GPIO_Init+0x350>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <HAL_GPIO_Init+0x21a>
 80074a2:	2309      	movs	r3, #9
 80074a4:	e012      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074a6:	230a      	movs	r3, #10
 80074a8:	e010      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074aa:	2308      	movs	r3, #8
 80074ac:	e00e      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074ae:	2307      	movs	r3, #7
 80074b0:	e00c      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074b2:	2306      	movs	r3, #6
 80074b4:	e00a      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074b6:	2305      	movs	r3, #5
 80074b8:	e008      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074ba:	2304      	movs	r3, #4
 80074bc:	e006      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074be:	2303      	movs	r3, #3
 80074c0:	e004      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e002      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <HAL_GPIO_Init+0x240>
 80074ca:	2300      	movs	r3, #0
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	f002 0203 	and.w	r2, r2, #3
 80074d2:	0092      	lsls	r2, r2, #2
 80074d4:	4093      	lsls	r3, r2
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074dc:	4935      	ldr	r1, [pc, #212]	; (80075b4 <HAL_GPIO_Init+0x328>)
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	089b      	lsrs	r3, r3, #2
 80074e2:	3302      	adds	r3, #2
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074ea:	4b3d      	ldr	r3, [pc, #244]	; (80075e0 <HAL_GPIO_Init+0x354>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800750e:	4a34      	ldr	r2, [pc, #208]	; (80075e0 <HAL_GPIO_Init+0x354>)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007514:	4b32      	ldr	r3, [pc, #200]	; (80075e0 <HAL_GPIO_Init+0x354>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	43db      	mvns	r3, r3
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	4013      	ands	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007538:	4a29      	ldr	r2, [pc, #164]	; (80075e0 <HAL_GPIO_Init+0x354>)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800753e:	4b28      	ldr	r3, [pc, #160]	; (80075e0 <HAL_GPIO_Init+0x354>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	43db      	mvns	r3, r3
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <HAL_GPIO_Init+0x354>)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <HAL_GPIO_Init+0x354>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	43db      	mvns	r3, r3
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4013      	ands	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800758c:	4a14      	ldr	r2, [pc, #80]	; (80075e0 <HAL_GPIO_Init+0x354>)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b0f      	cmp	r3, #15
 800759c:	f67f ae84 	bls.w	80072a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3724      	adds	r7, #36	; 0x24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40013800 	.word	0x40013800
 80075b8:	40020000 	.word	0x40020000
 80075bc:	40020400 	.word	0x40020400
 80075c0:	40020800 	.word	0x40020800
 80075c4:	40020c00 	.word	0x40020c00
 80075c8:	40021000 	.word	0x40021000
 80075cc:	40021400 	.word	0x40021400
 80075d0:	40021800 	.word	0x40021800
 80075d4:	40021c00 	.word	0x40021c00
 80075d8:	40022000 	.word	0x40022000
 80075dc:	40022400 	.word	0x40022400
 80075e0:	40013c00 	.word	0x40013c00

080075e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	887b      	ldrh	r3, [r7, #2]
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
 8007600:	e001      	b.n	8007606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
 8007620:	4613      	mov	r3, r2
 8007622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007624:	787b      	ldrb	r3, [r7, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800762a:	887a      	ldrh	r2, [r7, #2]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007630:	e003      	b.n	800763a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007632:	887b      	ldrh	r3, [r7, #2]
 8007634:	041a      	lsls	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	619a      	str	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007658:	887a      	ldrh	r2, [r7, #2]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4013      	ands	r3, r2
 800765e:	041a      	lsls	r2, r3, #16
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	43d9      	mvns	r1, r3
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	400b      	ands	r3, r1
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	619a      	str	r2, [r3, #24]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007686:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007688:	695a      	ldr	r2, [r3, #20]
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d006      	beq.n	80076a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007692:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f806 	bl	80076ac <HAL_GPIO_EXTI_Callback>
  }
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40013c00 	.word	0x40013c00

080076ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e12b      	b.n	800792e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fa fbba 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2224      	movs	r2, #36	; 0x24
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007728:	f001 fc76 	bl	8009018 <HAL_RCC_GetPCLK1Freq>
 800772c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4a81      	ldr	r2, [pc, #516]	; (8007938 <HAL_I2C_Init+0x274>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d807      	bhi.n	8007748 <HAL_I2C_Init+0x84>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a80      	ldr	r2, [pc, #512]	; (800793c <HAL_I2C_Init+0x278>)
 800773c:	4293      	cmp	r3, r2
 800773e:	bf94      	ite	ls
 8007740:	2301      	movls	r3, #1
 8007742:	2300      	movhi	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	e006      	b.n	8007756 <HAL_I2C_Init+0x92>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a7d      	ldr	r2, [pc, #500]	; (8007940 <HAL_I2C_Init+0x27c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	bf94      	ite	ls
 8007750:	2301      	movls	r3, #1
 8007752:	2300      	movhi	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e0e7      	b.n	800792e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a78      	ldr	r2, [pc, #480]	; (8007944 <HAL_I2C_Init+0x280>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	0c9b      	lsrs	r3, r3, #18
 8007768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a6a      	ldr	r2, [pc, #424]	; (8007938 <HAL_I2C_Init+0x274>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d802      	bhi.n	8007798 <HAL_I2C_Init+0xd4>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3301      	adds	r3, #1
 8007796:	e009      	b.n	80077ac <HAL_I2C_Init+0xe8>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800779e:	fb02 f303 	mul.w	r3, r2, r3
 80077a2:	4a69      	ldr	r2, [pc, #420]	; (8007948 <HAL_I2C_Init+0x284>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	099b      	lsrs	r3, r3, #6
 80077aa:	3301      	adds	r3, #1
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80077be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	495c      	ldr	r1, [pc, #368]	; (8007938 <HAL_I2C_Init+0x274>)
 80077c8:	428b      	cmp	r3, r1
 80077ca:	d819      	bhi.n	8007800 <HAL_I2C_Init+0x13c>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	1e59      	subs	r1, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80077e0:	400b      	ands	r3, r1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_I2C_Init+0x138>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1e59      	subs	r1, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80077f4:	3301      	adds	r3, #1
 80077f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077fa:	e051      	b.n	80078a0 <HAL_I2C_Init+0x1dc>
 80077fc:	2304      	movs	r3, #4
 80077fe:	e04f      	b.n	80078a0 <HAL_I2C_Init+0x1dc>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d111      	bne.n	800782c <HAL_I2C_Init+0x168>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	1e58      	subs	r0, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6859      	ldr	r1, [r3, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	440b      	add	r3, r1
 8007816:	fbb0 f3f3 	udiv	r3, r0, r3
 800781a:	3301      	adds	r3, #1
 800781c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007820:	2b00      	cmp	r3, #0
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	e012      	b.n	8007852 <HAL_I2C_Init+0x18e>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	1e58      	subs	r0, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6859      	ldr	r1, [r3, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	0099      	lsls	r1, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007842:	3301      	adds	r3, #1
 8007844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007848:	2b00      	cmp	r3, #0
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <HAL_I2C_Init+0x196>
 8007856:	2301      	movs	r3, #1
 8007858:	e022      	b.n	80078a0 <HAL_I2C_Init+0x1dc>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10e      	bne.n	8007880 <HAL_I2C_Init+0x1bc>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1e58      	subs	r0, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	440b      	add	r3, r1
 8007870:	fbb0 f3f3 	udiv	r3, r0, r3
 8007874:	3301      	adds	r3, #1
 8007876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800787a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787e:	e00f      	b.n	80078a0 <HAL_I2C_Init+0x1dc>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	1e58      	subs	r0, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6859      	ldr	r1, [r3, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	0099      	lsls	r1, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	fbb0 f3f3 	udiv	r3, r0, r3
 8007896:	3301      	adds	r3, #1
 8007898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800789c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	6809      	ldr	r1, [r1, #0]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69da      	ldr	r2, [r3, #28]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80078ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6911      	ldr	r1, [r2, #16]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68d2      	ldr	r2, [r2, #12]
 80078da:	4311      	orrs	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695a      	ldr	r2, [r3, #20]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	000186a0 	.word	0x000186a0
 800793c:	001e847f 	.word	0x001e847f
 8007940:	003d08ff 	.word	0x003d08ff
 8007944:	431bde83 	.word	0x431bde83
 8007948:	10624dd3 	.word	0x10624dd3

0800794c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	817b      	strh	r3, [r7, #10]
 800795e:	460b      	mov	r3, r1
 8007960:	813b      	strh	r3, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007966:	f7ff fabd 	bl	8006ee4 <HAL_GetTick>
 800796a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b20      	cmp	r3, #32
 8007976:	f040 80d9 	bne.w	8007b2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2319      	movs	r3, #25
 8007980:	2201      	movs	r2, #1
 8007982:	496d      	ldr	r1, [pc, #436]	; (8007b38 <HAL_I2C_Mem_Write+0x1ec>)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fc7f 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
 8007992:	e0cc      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_I2C_Mem_Write+0x56>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0c5      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d007      	beq.n	80079c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2221      	movs	r2, #33	; 0x21
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2240      	movs	r2, #64	; 0x40
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a4d      	ldr	r2, [pc, #308]	; (8007b3c <HAL_I2C_Mem_Write+0x1f0>)
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a0a:	88f8      	ldrh	r0, [r7, #6]
 8007a0c:	893a      	ldrh	r2, [r7, #8]
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4603      	mov	r3, r0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fab6 	bl	8007f8c <I2C_RequestMemoryWrite>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d052      	beq.n	8007acc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e081      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fd00 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e06b      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d11b      	bne.n	8007acc <HAL_I2C_Mem_Write+0x180>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d017      	beq.n	8007acc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1aa      	bne.n	8007a2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fcec 	bl	80084b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d107      	bne.n	8007afc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007afa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e016      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e000      	b.n	8007b2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007b2c:	2302      	movs	r3, #2
  }
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	00100002 	.word	0x00100002
 8007b3c:	ffff0000 	.word	0xffff0000

08007b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	; 0x30
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	817b      	strh	r3, [r7, #10]
 8007b52:	460b      	mov	r3, r1
 8007b54:	813b      	strh	r3, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b5a:	f7ff f9c3 	bl	8006ee4 <HAL_GetTick>
 8007b5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	f040 8208 	bne.w	8007f7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	2319      	movs	r3, #25
 8007b74:	2201      	movs	r2, #1
 8007b76:	497b      	ldr	r1, [pc, #492]	; (8007d64 <HAL_I2C_Mem_Read+0x224>)
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fb85 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
 8007b86:	e1fb      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_I2C_Mem_Read+0x56>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e1f4      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d007      	beq.n	8007bbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2222      	movs	r2, #34	; 0x22
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2240      	movs	r2, #64	; 0x40
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a5b      	ldr	r2, [pc, #364]	; (8007d68 <HAL_I2C_Mem_Read+0x228>)
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bfe:	88f8      	ldrh	r0, [r7, #6]
 8007c00:	893a      	ldrh	r2, [r7, #8]
 8007c02:	8979      	ldrh	r1, [r7, #10]
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fa52 	bl	80080b8 <I2C_RequestMemoryRead>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e1b0      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d113      	bne.n	8007c4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	623b      	str	r3, [r7, #32]
 8007c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e184      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d11b      	bne.n	8007c8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	61fb      	str	r3, [r7, #28]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e164      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d11b      	bne.n	8007cce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	e144      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ce4:	e138      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	f200 80f1 	bhi.w	8007ed2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d123      	bne.n	8007d40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fc1b 	bl	8008538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e139      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d3e:	e10b      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d14e      	bne.n	8007de6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	2200      	movs	r2, #0
 8007d50:	4906      	ldr	r1, [pc, #24]	; (8007d6c <HAL_I2C_Mem_Read+0x22c>)
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fa98 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e10e      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
 8007d62:	bf00      	nop
 8007d64:	00100002 	.word	0x00100002
 8007d68:	ffff0000 	.word	0xffff0000
 8007d6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007de4:	e0b8      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	2200      	movs	r2, #0
 8007dee:	4966      	ldr	r1, [pc, #408]	; (8007f88 <HAL_I2C_Mem_Read+0x448>)
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa49 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0bf      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2200      	movs	r2, #0
 8007e4a:	494f      	ldr	r1, [pc, #316]	; (8007f88 <HAL_I2C_Mem_Read+0x448>)
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fa1b 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e091      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	b2d2      	uxtb	r2, r2
 8007eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ed0:	e042      	b.n	8007f58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 fb2e 	bl	8008538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e04c      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d118      	bne.n	8007f58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f aec2 	bne.w	8007ce6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e000      	b.n	8007f80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f7e:	2302      	movs	r3, #2
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3728      	adds	r7, #40	; 0x28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	00010004 	.word	0x00010004

08007f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	817b      	strh	r3, [r7, #10]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	813b      	strh	r3, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f960 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fdc:	d103      	bne.n	8007fe6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e05f      	b.n	80080aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fea:	897b      	ldrh	r3, [r7, #10]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	492d      	ldr	r1, [pc, #180]	; (80080b4 <I2C_RequestMemoryWrite+0x128>)
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f998 	bl	8008336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e04c      	b.n	80080aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008028:	6a39      	ldr	r1, [r7, #32]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fa02 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00d      	beq.n	8008052 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b04      	cmp	r3, #4
 800803c:	d107      	bne.n	800804e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800804c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e02b      	b.n	80080aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d105      	bne.n	8008064 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	b2da      	uxtb	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	611a      	str	r2, [r3, #16]
 8008062:	e021      	b.n	80080a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008064:	893b      	ldrh	r3, [r7, #8]
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	b29b      	uxth	r3, r3
 800806a:	b2da      	uxtb	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008074:	6a39      	ldr	r1, [r7, #32]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f9dc 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b04      	cmp	r3, #4
 8008088:	d107      	bne.n	800809a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e005      	b.n	80080aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800809e:	893b      	ldrh	r3, [r7, #8]
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	00010002 	.word	0x00010002

080080b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	461a      	mov	r2, r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	817b      	strh	r3, [r7, #10]
 80080ca:	460b      	mov	r3, r1
 80080cc:	813b      	strh	r3, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f8c2 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00d      	beq.n	8008126 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008118:	d103      	bne.n	8008122 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e0aa      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	4952      	ldr	r1, [pc, #328]	; (8008284 <I2C_RequestMemoryRead+0x1cc>)
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f8fa 	bl	8008336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e097      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008164:	6a39      	ldr	r1, [r7, #32]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 f964 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00d      	beq.n	800818e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	2b04      	cmp	r3, #4
 8008178:	d107      	bne.n	800818a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e076      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d105      	bne.n	80081a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008194:	893b      	ldrh	r3, [r7, #8]
 8008196:	b2da      	uxtb	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	611a      	str	r2, [r3, #16]
 800819e:	e021      	b.n	80081e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081a0:	893b      	ldrh	r3, [r7, #8]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b0:	6a39      	ldr	r1, [r7, #32]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f93e 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d107      	bne.n	80081d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e050      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081da:	893b      	ldrh	r3, [r7, #8]
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	6a39      	ldr	r1, [r7, #32]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f923 	bl	8008434 <I2C_WaitOnTXEFlagUntilTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00d      	beq.n	8008210 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d107      	bne.n	800820c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800820a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e035      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800821e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	2200      	movs	r2, #0
 8008228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f82b 	bl	8008288 <I2C_WaitOnFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00d      	beq.n	8008254 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d103      	bne.n	8008250 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800824e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e013      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008254:	897b      	ldrh	r3, [r7, #10]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	b2da      	uxtb	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	6a3a      	ldr	r2, [r7, #32]
 8008268:	4906      	ldr	r1, [pc, #24]	; (8008284 <I2C_RequestMemoryRead+0x1cc>)
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f863 	bl	8008336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	00010002 	.word	0x00010002

08008288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008298:	e025      	b.n	80082e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a0:	d021      	beq.n	80082e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a2:	f7fe fe1f 	bl	8006ee4 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d302      	bcc.n	80082b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d116      	bne.n	80082e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e023      	b.n	800832e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d10d      	bne.n	800830c <I2C_WaitOnFlagUntilTimeout+0x84>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	43da      	mvns	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bf0c      	ite	eq
 8008302:	2301      	moveq	r3, #1
 8008304:	2300      	movne	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	e00c      	b.n	8008326 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	43da      	mvns	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4013      	ands	r3, r2
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	bf0c      	ite	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	2300      	movne	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	429a      	cmp	r2, r3
 800832a:	d0b6      	beq.n	800829a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008344:	e051      	b.n	80083ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008354:	d123      	bne.n	800839e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008364:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800836e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2220      	movs	r2, #32
 800837a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f043 0204 	orr.w	r2, r3, #4
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e046      	b.n	800842c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d021      	beq.n	80083ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a6:	f7fe fd9d 	bl	8006ee4 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d302      	bcc.n	80083bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d116      	bne.n	80083ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	f043 0220 	orr.w	r2, r3, #32
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e020      	b.n	800842c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	0c1b      	lsrs	r3, r3, #16
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d10c      	bne.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	43da      	mvns	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4013      	ands	r3, r2
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e00b      	b.n	8008426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	43da      	mvns	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4013      	ands	r3, r2
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	bf14      	ite	ne
 8008420:	2301      	movne	r3, #1
 8008422:	2300      	moveq	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d18d      	bne.n	8008346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008440:	e02d      	b.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f8ce 	bl	80085e4 <I2C_IsAcknowledgeFailed>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e02d      	b.n	80084ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d021      	beq.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845a:	f7fe fd43 	bl	8006ee4 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	d302      	bcc.n	8008470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d116      	bne.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f043 0220 	orr.w	r2, r3, #32
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e007      	b.n	80084ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a8:	2b80      	cmp	r3, #128	; 0x80
 80084aa:	d1ca      	bne.n	8008442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084c2:	e02d      	b.n	8008520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f88d 	bl	80085e4 <I2C_IsAcknowledgeFailed>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e02d      	b.n	8008530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d021      	beq.n	8008520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084dc:	f7fe fd02 	bl	8006ee4 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d116      	bne.n	8008520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	f043 0220 	orr.w	r2, r3, #32
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e007      	b.n	8008530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b04      	cmp	r3, #4
 800852c:	d1ca      	bne.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008544:	e042      	b.n	80085cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b10      	cmp	r3, #16
 8008552:	d119      	bne.n	8008588 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0210 	mvn.w	r2, #16
 800855c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e029      	b.n	80085dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008588:	f7fe fcac 	bl	8006ee4 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d116      	bne.n	80085cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	f043 0220 	orr.w	r2, r3, #32
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e007      	b.n	80085dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d6:	2b40      	cmp	r3, #64	; 0x40
 80085d8:	d1b5      	bne.n	8008546 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085fa:	d11b      	bne.n	8008634 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008604:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	f043 0204 	orr.w	r2, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e000      	b.n	8008636 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b20      	cmp	r3, #32
 8008656:	d129      	bne.n	80086ac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2224      	movs	r2, #36	; 0x24
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0210 	bic.w	r2, r2, #16
 800867e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e000      	b.n	80086ae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80086ac:	2302      	movs	r3, #2
  }
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d12a      	bne.n	800872a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2224      	movs	r2, #36	; 0x24
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	f023 030f 	bic.w	r3, r3, #15
 80086fa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	4313      	orrs	r3, r2
 8008704:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	89fa      	ldrh	r2, [r7, #14]
 800870c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f042 0201 	orr.w	r2, r2, #1
 800871c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	e000      	b.n	800872c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800872a:	2302      	movs	r3, #2
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e267      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d075      	beq.n	8008842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008756:	4b88      	ldr	r3, [pc, #544]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 030c 	and.w	r3, r3, #12
 800875e:	2b04      	cmp	r3, #4
 8008760:	d00c      	beq.n	800877c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008762:	4b85      	ldr	r3, [pc, #532]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800876a:	2b08      	cmp	r3, #8
 800876c:	d112      	bne.n	8008794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800876e:	4b82      	ldr	r3, [pc, #520]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800877a:	d10b      	bne.n	8008794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877c:	4b7e      	ldr	r3, [pc, #504]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05b      	beq.n	8008840 <HAL_RCC_OscConfig+0x108>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d157      	bne.n	8008840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e242      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879c:	d106      	bne.n	80087ac <HAL_RCC_OscConfig+0x74>
 800879e:	4b76      	ldr	r3, [pc, #472]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a75      	ldr	r2, [pc, #468]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e01d      	b.n	80087e8 <HAL_RCC_OscConfig+0xb0>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCC_OscConfig+0x98>
 80087b6:	4b70      	ldr	r3, [pc, #448]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a6f      	ldr	r2, [pc, #444]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4b6d      	ldr	r3, [pc, #436]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6c      	ldr	r2, [pc, #432]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e00b      	b.n	80087e8 <HAL_RCC_OscConfig+0xb0>
 80087d0:	4b69      	ldr	r3, [pc, #420]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a68      	ldr	r2, [pc, #416]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4b66      	ldr	r3, [pc, #408]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a65      	ldr	r2, [pc, #404]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80087e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d013      	beq.n	8008818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f0:	f7fe fb78 	bl	8006ee4 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f8:	f7fe fb74 	bl	8006ee4 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b64      	cmp	r3, #100	; 0x64
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e207      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880a:	4b5b      	ldr	r3, [pc, #364]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0xc0>
 8008816:	e014      	b.n	8008842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008818:	f7fe fb64 	bl	8006ee4 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008820:	f7fe fb60 	bl	8006ee4 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b64      	cmp	r3, #100	; 0x64
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e1f3      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008832:	4b51      	ldr	r3, [pc, #324]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f0      	bne.n	8008820 <HAL_RCC_OscConfig+0xe8>
 800883e:	e000      	b.n	8008842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d063      	beq.n	8008916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800884e:	4b4a      	ldr	r3, [pc, #296]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800885a:	4b47      	ldr	r3, [pc, #284]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008862:	2b08      	cmp	r3, #8
 8008864:	d11c      	bne.n	80088a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008866:	4b44      	ldr	r3, [pc, #272]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d116      	bne.n	80088a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008872:	4b41      	ldr	r3, [pc, #260]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_RCC_OscConfig+0x152>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e1c7      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888a:	4b3b      	ldr	r3, [pc, #236]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	4937      	ldr	r1, [pc, #220]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800889a:	4313      	orrs	r3, r2
 800889c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800889e:	e03a      	b.n	8008916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d020      	beq.n	80088ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088a8:	4b34      	ldr	r3, [pc, #208]	; (800897c <HAL_RCC_OscConfig+0x244>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ae:	f7fe fb19 	bl	8006ee4 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088b6:	f7fe fb15 	bl	8006ee4 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e1a8      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c8:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d4:	4b28      	ldr	r3, [pc, #160]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	4925      	ldr	r1, [pc, #148]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	600b      	str	r3, [r1, #0]
 80088e8:	e015      	b.n	8008916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ea:	4b24      	ldr	r3, [pc, #144]	; (800897c <HAL_RCC_OscConfig+0x244>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f0:	f7fe faf8 	bl	8006ee4 <HAL_GetTick>
 80088f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088f6:	e008      	b.n	800890a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088f8:	f7fe faf4 	bl	8006ee4 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e187      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890a:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f0      	bne.n	80088f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d036      	beq.n	8008990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d016      	beq.n	8008958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <HAL_RCC_OscConfig+0x248>)
 800892c:	2201      	movs	r2, #1
 800892e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008930:	f7fe fad8 	bl	8006ee4 <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008938:	f7fe fad4 	bl	8006ee4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e167      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894a:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <HAL_RCC_OscConfig+0x240>)
 800894c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x200>
 8008956:	e01b      	b.n	8008990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <HAL_RCC_OscConfig+0x248>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800895e:	f7fe fac1 	bl	8006ee4 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008964:	e00e      	b.n	8008984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008966:	f7fe fabd 	bl	8006ee4 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d907      	bls.n	8008984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e150      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
 8008978:	40023800 	.word	0x40023800
 800897c:	42470000 	.word	0x42470000
 8008980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008984:	4b88      	ldr	r3, [pc, #544]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1ea      	bne.n	8008966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8097 	beq.w	8008acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a2:	4b81      	ldr	r3, [pc, #516]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10f      	bne.n	80089ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	4b7d      	ldr	r3, [pc, #500]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	4a7c      	ldr	r2, [pc, #496]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 80089b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089bc:	6413      	str	r3, [r2, #64]	; 0x40
 80089be:	4b7a      	ldr	r3, [pc, #488]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ca:	2301      	movs	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ce:	4b77      	ldr	r3, [pc, #476]	; (8008bac <HAL_RCC_OscConfig+0x474>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d118      	bne.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089da:	4b74      	ldr	r3, [pc, #464]	; (8008bac <HAL_RCC_OscConfig+0x474>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a73      	ldr	r2, [pc, #460]	; (8008bac <HAL_RCC_OscConfig+0x474>)
 80089e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089e6:	f7fe fa7d 	bl	8006ee4 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ee:	f7fe fa79 	bl	8006ee4 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e10c      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a00:	4b6a      	ldr	r3, [pc, #424]	; (8008bac <HAL_RCC_OscConfig+0x474>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0f0      	beq.n	80089ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d106      	bne.n	8008a22 <HAL_RCC_OscConfig+0x2ea>
 8008a14:	4b64      	ldr	r3, [pc, #400]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a18:	4a63      	ldr	r2, [pc, #396]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a20:	e01c      	b.n	8008a5c <HAL_RCC_OscConfig+0x324>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d10c      	bne.n	8008a44 <HAL_RCC_OscConfig+0x30c>
 8008a2a:	4b5f      	ldr	r3, [pc, #380]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	4a5e      	ldr	r2, [pc, #376]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a30:	f043 0304 	orr.w	r3, r3, #4
 8008a34:	6713      	str	r3, [r2, #112]	; 0x70
 8008a36:	4b5c      	ldr	r3, [pc, #368]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3a:	4a5b      	ldr	r2, [pc, #364]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	6713      	str	r3, [r2, #112]	; 0x70
 8008a42:	e00b      	b.n	8008a5c <HAL_RCC_OscConfig+0x324>
 8008a44:	4b58      	ldr	r3, [pc, #352]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a48:	4a57      	ldr	r2, [pc, #348]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a50:	4b55      	ldr	r3, [pc, #340]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a54:	4a54      	ldr	r2, [pc, #336]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a56:	f023 0304 	bic.w	r3, r3, #4
 8008a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d015      	beq.n	8008a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a64:	f7fe fa3e 	bl	8006ee4 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a6a:	e00a      	b.n	8008a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a6c:	f7fe fa3a 	bl	8006ee4 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e0cb      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a82:	4b49      	ldr	r3, [pc, #292]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0ee      	beq.n	8008a6c <HAL_RCC_OscConfig+0x334>
 8008a8e:	e014      	b.n	8008aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a90:	f7fe fa28 	bl	8006ee4 <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a96:	e00a      	b.n	8008aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a98:	f7fe fa24 	bl	8006ee4 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e0b5      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aae:	4b3e      	ldr	r3, [pc, #248]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1ee      	bne.n	8008a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ac0:	4b39      	ldr	r3, [pc, #228]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80a1 	beq.w	8008c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ad6:	4b34      	ldr	r3, [pc, #208]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 030c 	and.w	r3, r3, #12
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d05c      	beq.n	8008b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d141      	bne.n	8008b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af0:	f7fe f9f8 	bl	8006ee4 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af8:	f7fe f9f4 	bl	8006ee4 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e087      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0a:	4b27      	ldr	r3, [pc, #156]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	019b      	lsls	r3, r3, #6
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	061b      	lsls	r3, r3, #24
 8008b3a:	491b      	ldr	r1, [pc, #108]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b42:	2201      	movs	r2, #1
 8008b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b46:	f7fe f9cd 	bl	8006ee4 <HAL_GetTick>
 8008b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b4c:	e008      	b.n	8008b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b4e:	f7fe f9c9 	bl	8006ee4 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e05c      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b60:	4b11      	ldr	r3, [pc, #68]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0f0      	beq.n	8008b4e <HAL_RCC_OscConfig+0x416>
 8008b6c:	e054      	b.n	8008c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b74:	f7fe f9b6 	bl	8006ee4 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b7c:	f7fe f9b2 	bl	8006ee4 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e045      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <HAL_RCC_OscConfig+0x470>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1f0      	bne.n	8008b7c <HAL_RCC_OscConfig+0x444>
 8008b9a:	e03d      	b.n	8008c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e038      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	40007000 	.word	0x40007000
 8008bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	; (8008c24 <HAL_RCC_OscConfig+0x4ec>)
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d028      	beq.n	8008c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d121      	bne.n	8008c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d11a      	bne.n	8008c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008be4:	4013      	ands	r3, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d111      	bne.n	8008c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d107      	bne.n	8008c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d001      	beq.n	8008c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40023800 	.word	0x40023800

08008c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0cc      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c3c:	4b68      	ldr	r3, [pc, #416]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d90c      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4a:	4b65      	ldr	r3, [pc, #404]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c52:	4b63      	ldr	r3, [pc, #396]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d001      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0b8      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d020      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c7c:	4b59      	ldr	r3, [pc, #356]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4a58      	ldr	r2, [pc, #352]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c94:	4b53      	ldr	r3, [pc, #332]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a52      	ldr	r2, [pc, #328]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca0:	4b50      	ldr	r3, [pc, #320]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	494d      	ldr	r1, [pc, #308]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d044      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc6:	4b47      	ldr	r3, [pc, #284]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d119      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e07f      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d003      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ce6:	4b3f      	ldr	r3, [pc, #252]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e06f      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf6:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e067      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d06:	4b37      	ldr	r3, [pc, #220]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f023 0203 	bic.w	r2, r3, #3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4934      	ldr	r1, [pc, #208]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d18:	f7fe f8e4 	bl	8006ee4 <HAL_GetTick>
 8008d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d20:	f7fe f8e0 	bl	8006ee4 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e04f      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d36:	4b2b      	ldr	r3, [pc, #172]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 020c 	and.w	r2, r3, #12
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d1eb      	bne.n	8008d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d20c      	bcs.n	8008d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d56:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d5e:	4b20      	ldr	r3, [pc, #128]	; (8008de0 <HAL_RCC_ClockConfig+0x1b8>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d001      	beq.n	8008d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e032      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d7c:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4916      	ldr	r1, [pc, #88]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d9a:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	490e      	ldr	r1, [pc, #56]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008dae:	f000 f821 	bl	8008df4 <HAL_RCC_GetSysClockFreq>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <HAL_RCC_ClockConfig+0x1bc>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	091b      	lsrs	r3, r3, #4
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	490a      	ldr	r1, [pc, #40]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008dc0:	5ccb      	ldrb	r3, [r1, r3]
 8008dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe f844 	bl	8006e5c <HAL_InitTick>

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023c00 	.word	0x40023c00
 8008de4:	40023800 	.word	0x40023800
 8008de8:	08014004 	.word	0x08014004
 8008dec:	20000180 	.word	0x20000180
 8008df0:	200002b8 	.word	0x200002b8

08008df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df8:	b094      	sub	sp, #80	; 0x50
 8008dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008e00:	2300      	movs	r3, #0
 8008e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e04:	2300      	movs	r3, #0
 8008e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e0c:	4b79      	ldr	r3, [pc, #484]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 030c 	and.w	r3, r3, #12
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d00d      	beq.n	8008e34 <HAL_RCC_GetSysClockFreq+0x40>
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	f200 80e1 	bhi.w	8008fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <HAL_RCC_GetSysClockFreq+0x34>
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d003      	beq.n	8008e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8008e26:	e0db      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e28:	4b73      	ldr	r3, [pc, #460]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e2c:	e0db      	b.n	8008fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e2e:	4b73      	ldr	r3, [pc, #460]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e32:	e0d8      	b.n	8008fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e34:	4b6f      	ldr	r3, [pc, #444]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e3e:	4b6d      	ldr	r3, [pc, #436]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d063      	beq.n	8008f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	099b      	lsrs	r3, r3, #6
 8008e50:	2200      	movs	r2, #0
 8008e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e5e:	2300      	movs	r3, #0
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
 8008e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	f04f 0000 	mov.w	r0, #0
 8008e6e:	f04f 0100 	mov.w	r1, #0
 8008e72:	0159      	lsls	r1, r3, #5
 8008e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e78:	0150      	lsls	r0, r2, #5
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4621      	mov	r1, r4
 8008e80:	1a51      	subs	r1, r2, r1
 8008e82:	6139      	str	r1, [r7, #16]
 8008e84:	4629      	mov	r1, r5
 8008e86:	eb63 0301 	sbc.w	r3, r3, r1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	018b      	lsls	r3, r1, #6
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	018a      	lsls	r2, r1, #6
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8008eac:	4659      	mov	r1, fp
 8008eae:	eb63 0901 	sbc.w	r9, r3, r1
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ec6:	4690      	mov	r8, r2
 8008ec8:	4699      	mov	r9, r3
 8008eca:	4623      	mov	r3, r4
 8008ecc:	eb18 0303 	adds.w	r3, r8, r3
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	eb49 0303 	adc.w	r3, r9, r3
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	024b      	lsls	r3, r1, #9
 8008eea:	4621      	mov	r1, r4
 8008eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	024a      	lsls	r2, r1, #9
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efa:	2200      	movs	r2, #0
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f04:	f7f7 feba 	bl	8000c7c <__aeabi_uldivmod>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f10:	e058      	b.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f12:	4b38      	ldr	r3, [pc, #224]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	099b      	lsrs	r3, r3, #6
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f22:	623b      	str	r3, [r7, #32]
 8008f24:	2300      	movs	r3, #0
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
 8008f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	464b      	mov	r3, r9
 8008f30:	f04f 0000 	mov.w	r0, #0
 8008f34:	f04f 0100 	mov.w	r1, #0
 8008f38:	0159      	lsls	r1, r3, #5
 8008f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f3e:	0150      	lsls	r0, r2, #5
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4641      	mov	r1, r8
 8008f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f64:	ebb2 040a 	subs.w	r4, r2, sl
 8008f68:	eb63 050b 	sbc.w	r5, r3, fp
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	00eb      	lsls	r3, r5, #3
 8008f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f7a:	00e2      	lsls	r2, r4, #3
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	461d      	mov	r5, r3
 8008f80:	4643      	mov	r3, r8
 8008f82:	18e3      	adds	r3, r4, r3
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	464b      	mov	r3, r9
 8008f88:	eb45 0303 	adc.w	r3, r5, r3
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	028b      	lsls	r3, r1, #10
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	028a      	lsls	r2, r1, #10
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4619      	mov	r1, r3
 8008fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fae:	2200      	movs	r2, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	61fa      	str	r2, [r7, #28]
 8008fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fb8:	f7f7 fe60 	bl	8000c7c <__aeabi_uldivmod>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	3301      	adds	r3, #1
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fde:	e002      	b.n	8008fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fe0:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3750      	adds	r7, #80	; 0x50
 8008fec:	46bd      	mov	sp, r7
 8008fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40023800 	.word	0x40023800
 8008ff8:	00f42400 	.word	0x00f42400
 8008ffc:	007a1200 	.word	0x007a1200

08009000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <HAL_RCC_GetHCLKFreq+0x14>)
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000180 	.word	0x20000180

08009018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800901c:	f7ff fff0 	bl	8009000 <HAL_RCC_GetHCLKFreq>
 8009020:	4602      	mov	r2, r0
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	0a9b      	lsrs	r3, r3, #10
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	4903      	ldr	r1, [pc, #12]	; (800903c <HAL_RCC_GetPCLK1Freq+0x24>)
 800902e:	5ccb      	ldrb	r3, [r1, r3]
 8009030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009034:	4618      	mov	r0, r3
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40023800 	.word	0x40023800
 800903c:	08014014 	.word	0x08014014

08009040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009044:	f7ff ffdc 	bl	8009000 <HAL_RCC_GetHCLKFreq>
 8009048:	4602      	mov	r2, r0
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	0b5b      	lsrs	r3, r3, #13
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	4903      	ldr	r1, [pc, #12]	; (8009064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009056:	5ccb      	ldrb	r3, [r1, r3]
 8009058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800905c:	4618      	mov	r0, r3
 800905e:	bd80      	pop	{r7, pc}
 8009060:	40023800 	.word	0x40023800
 8009064:	08014014 	.word	0x08014014

08009068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800908c:	2b00      	cmp	r3, #0
 800908e:	d105      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009098:	2b00      	cmp	r3, #0
 800909a:	d075      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800909c:	4b91      	ldr	r3, [pc, #580]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090a2:	f7fd ff1f 	bl	8006ee4 <HAL_GetTick>
 80090a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090a8:	e008      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090aa:	f7fd ff1b 	bl	8006ee4 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d901      	bls.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e189      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090bc:	4b8a      	ldr	r3, [pc, #552]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1f0      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	019a      	lsls	r2, r3, #6
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	071b      	lsls	r3, r3, #28
 80090e0:	4981      	ldr	r1, [pc, #516]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01f      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090f4:	4b7c      	ldr	r3, [pc, #496]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fa:	0f1b      	lsrs	r3, r3, #28
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	019a      	lsls	r2, r3, #6
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	061b      	lsls	r3, r3, #24
 800910e:	431a      	orrs	r2, r3
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	071b      	lsls	r3, r3, #28
 8009114:	4974      	ldr	r1, [pc, #464]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800911c:	4b72      	ldr	r3, [pc, #456]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800911e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009122:	f023 021f 	bic.w	r2, r3, #31
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	3b01      	subs	r3, #1
 800912c:	496e      	ldr	r1, [pc, #440]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800912e:	4313      	orrs	r3, r2
 8009130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00d      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	019a      	lsls	r2, r3, #6
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	071b      	lsls	r3, r3, #28
 8009154:	4964      	ldr	r1, [pc, #400]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800915c:	4b61      	ldr	r3, [pc, #388]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800915e:	2201      	movs	r2, #1
 8009160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009162:	f7fd febf 	bl	8006ee4 <HAL_GetTick>
 8009166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009168:	e008      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800916a:	f7fd febb 	bl	8006ee4 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e129      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800917c:	4b5a      	ldr	r3, [pc, #360]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0f0      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800919c:	2b00      	cmp	r3, #0
 800919e:	d079      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091a0:	4b52      	ldr	r3, [pc, #328]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091a6:	f7fd fe9d 	bl	8006ee4 <HAL_GetTick>
 80091aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091ac:	e008      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80091ae:	f7fd fe99 	bl	8006ee4 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e107      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091c0:	4b49      	ldr	r3, [pc, #292]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091cc:	d0ef      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d020      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80091da:	4b43      	ldr	r3, [pc, #268]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e0:	0f1b      	lsrs	r3, r3, #28
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	019a      	lsls	r2, r3, #6
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	061b      	lsls	r3, r3, #24
 80091f4:	431a      	orrs	r2, r3
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	493b      	ldr	r1, [pc, #236]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009202:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	3b01      	subs	r3, #1
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	4934      	ldr	r1, [pc, #208]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0308 	and.w	r3, r3, #8
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01e      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009228:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	0e1b      	lsrs	r3, r3, #24
 8009230:	f003 030f 	and.w	r3, r3, #15
 8009234:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	019a      	lsls	r2, r3, #6
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	061b      	lsls	r3, r3, #24
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	071b      	lsls	r3, r3, #28
 8009248:	4927      	ldr	r1, [pc, #156]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	4922      	ldr	r1, [pc, #136]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009266:	4b21      	ldr	r3, [pc, #132]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800926c:	f7fd fe3a 	bl	8006ee4 <HAL_GetTick>
 8009270:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009272:	e008      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009274:	f7fd fe36 	bl	8006ee4 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	2b02      	cmp	r3, #2
 8009280:	d901      	bls.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e0a4      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009286:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800928e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009292:	d1ef      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 808b 	beq.w	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	4a0f      	ldr	r2, [pc, #60]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b0:	6413      	str	r3, [r2, #64]	; 0x40
 80092b2:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80092be:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80092c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092ca:	f7fd fe0b 	bl	8006ee4 <HAL_GetTick>
 80092ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092d0:	e010      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80092d2:	f7fd fe07 	bl	8006ee4 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d909      	bls.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e075      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80092e4:	42470068 	.word	0x42470068
 80092e8:	40023800 	.word	0x40023800
 80092ec:	42470070 	.word	0x42470070
 80092f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092f4:	4b38      	ldr	r3, [pc, #224]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0e8      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009300:	4b36      	ldr	r3, [pc, #216]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009308:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02f      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	d028      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800931e:	4b2f      	ldr	r3, [pc, #188]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009328:	4b2d      	ldr	r3, [pc, #180]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800932a:	2201      	movs	r2, #1
 800932c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800932e:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009334:	4a29      	ldr	r2, [pc, #164]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800933a:	4b28      	ldr	r3, [pc, #160]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b01      	cmp	r3, #1
 8009344:	d114      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009346:	f7fd fdcd 	bl	8006ee4 <HAL_GetTick>
 800934a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800934c:	e00a      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800934e:	f7fd fdc9 	bl	8006ee4 <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	4293      	cmp	r3, r2
 800935e:	d901      	bls.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e035      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009364:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0ee      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800937c:	d10d      	bne.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800937e:	4b17      	ldr	r3, [pc, #92]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800938e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009392:	4912      	ldr	r1, [pc, #72]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009394:	4313      	orrs	r3, r2
 8009396:	608b      	str	r3, [r1, #8]
 8009398:	e005      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800939a:	4b10      	ldr	r3, [pc, #64]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	4a0f      	ldr	r2, [pc, #60]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80093a4:	6093      	str	r3, [r2, #8]
 80093a6:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b2:	490a      	ldr	r1, [pc, #40]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80093cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40007000 	.word	0x40007000
 80093dc:	40023800 	.word	0x40023800
 80093e0:	42470e40 	.word	0x42470e40
 80093e4:	424711e0 	.word	0x424711e0

080093e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e066      	b.n	80094cc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7f5b      	ldrb	r3, [r3, #29]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	d105      	bne.n	8009414 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f9 fe8a 	bl	8003128 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	22ca      	movs	r2, #202	; 0xca
 8009420:	625a      	str	r2, [r3, #36]	; 0x24
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2253      	movs	r2, #83	; 0x53
 8009428:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa45 	bl	80098ba <RTC_EnterInitMode>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d12c      	bne.n	8009494 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800944c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6899      	ldr	r1, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	431a      	orrs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68d2      	ldr	r2, [r2, #12]
 8009474:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6919      	ldr	r1, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	041a      	lsls	r2, r3, #16
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa4c 	bl	8009928 <RTC_ExitInitMode>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d113      	bne.n	80094c2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094a8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	22ff      	movs	r2, #255	; 0xff
 80094c8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094d4:	b590      	push	{r4, r7, lr}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	7f1b      	ldrb	r3, [r3, #28]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d101      	bne.n	80094f0 <HAL_RTC_SetTime+0x1c>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e087      	b.n	8009600 <HAL_RTC_SetTime+0x12c>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2202      	movs	r2, #2
 80094fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d126      	bne.n	8009550 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa29 	bl	8009972 <RTC_ByteToBcd2>
 8009520:	4603      	mov	r3, r0
 8009522:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	785b      	ldrb	r3, [r3, #1]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fa22 	bl	8009972 <RTC_ByteToBcd2>
 800952e:	4603      	mov	r3, r0
 8009530:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009532:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	789b      	ldrb	r3, [r3, #2]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fa1a 	bl	8009972 <RTC_ByteToBcd2>
 800953e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009540:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	78db      	ldrb	r3, [r3, #3]
 8009548:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]
 800954e:	e018      	b.n	8009582 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2200      	movs	r2, #0
 8009562:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009570:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009576:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	78db      	ldrb	r3, [r3, #3]
 800957c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	22ca      	movs	r2, #202	; 0xca
 8009588:	625a      	str	r2, [r3, #36]	; 0x24
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2253      	movs	r2, #83	; 0x53
 8009590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 f991 	bl	80098ba <RTC_EnterInitMode>
 8009598:	4603      	mov	r3, r0
 800959a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800959c:	7cfb      	ldrb	r3, [r7, #19]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d120      	bne.n	80095e4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80095ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80095b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6899      	ldr	r1, [r3, #8]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	68da      	ldr	r2, [r3, #12]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	431a      	orrs	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f9a4 	bl	8009928 <RTC_ExitInitMode>
 80095e0:	4603      	mov	r3, r0
 80095e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80095e4:	7cfb      	ldrb	r3, [r7, #19]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	22ff      	movs	r2, #255	; 0xff
 80095f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	771a      	strb	r2, [r3, #28]

  return status;
 80095fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8009600:	4618      	mov	r0, r3
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	bd90      	pop	{r4, r7, pc}

08009608 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800963a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800963e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	0c1b      	lsrs	r3, r3, #16
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800964a:	b2da      	uxtb	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	0a1b      	lsrs	r3, r3, #8
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965a:	b2da      	uxtb	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	0d9b      	lsrs	r3, r3, #22
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d11a      	bne.n	80096ba <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	f000 f98f 	bl	80099ac <RTC_Bcd2ToByte>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f986 	bl	80099ac <RTC_Bcd2ToByte>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	789b      	ldrb	r3, [r3, #2]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f97d 	bl	80099ac <RTC_Bcd2ToByte>
 80096b2:	4603      	mov	r3, r0
 80096b4:	461a      	mov	r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096c4:	b590      	push	{r4, r7, lr}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	7f1b      	ldrb	r3, [r3, #28]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_RTC_SetDate+0x1c>
 80096dc:	2302      	movs	r3, #2
 80096de:	e071      	b.n	80097c4 <HAL_RTC_SetDate+0x100>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2202      	movs	r2, #2
 80096ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10e      	bne.n	8009710 <HAL_RTC_SetDate+0x4c>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	785b      	ldrb	r3, [r3, #1]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d008      	beq.n	8009710 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	f023 0310 	bic.w	r3, r3, #16
 8009706:	b2db      	uxtb	r3, r3
 8009708:	330a      	adds	r3, #10
 800970a:	b2da      	uxtb	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11c      	bne.n	8009750 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	78db      	ldrb	r3, [r3, #3]
 800971a:	4618      	mov	r0, r3
 800971c:	f000 f929 	bl	8009972 <RTC_ByteToBcd2>
 8009720:	4603      	mov	r3, r0
 8009722:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f922 	bl	8009972 <RTC_ByteToBcd2>
 800972e:	4603      	mov	r3, r0
 8009730:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009732:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	789b      	ldrb	r3, [r3, #2]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f91a 	bl	8009972 <RTC_ByteToBcd2>
 800973e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009740:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800974a:	4313      	orrs	r3, r2
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e00e      	b.n	800976e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	78db      	ldrb	r3, [r3, #3]
 8009754:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800975c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009762:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800976a:	4313      	orrs	r3, r2
 800976c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	22ca      	movs	r2, #202	; 0xca
 8009774:	625a      	str	r2, [r3, #36]	; 0x24
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2253      	movs	r2, #83	; 0x53
 800977c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 f89b 	bl	80098ba <RTC_EnterInitMode>
 8009784:	4603      	mov	r3, r0
 8009786:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009788:	7cfb      	ldrb	r3, [r7, #19]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10c      	bne.n	80097a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009798:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800979c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f8c2 	bl	8009928 <RTC_ExitInitMode>
 80097a4:	4603      	mov	r3, r0
 80097a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80097a8:	7cfb      	ldrb	r3, [r7, #19]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	22ff      	movs	r2, #255	; 0xff
 80097ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	771a      	strb	r2, [r3, #28]

  return status;
 80097c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd90      	pop	{r4, r7, pc}

080097cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80097ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	0a1b      	lsrs	r3, r3, #8
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 031f 	and.w	r3, r3, #31
 8009800:	b2da      	uxtb	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980e:	b2da      	uxtb	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	0b5b      	lsrs	r3, r3, #13
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	b2da      	uxtb	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d11a      	bne.n	8009860 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	78db      	ldrb	r3, [r3, #3]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f8bc 	bl	80099ac <RTC_Bcd2ToByte>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f8b3 	bl	80099ac <RTC_Bcd2ToByte>
 8009846:	4603      	mov	r3, r0
 8009848:	461a      	mov	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	789b      	ldrb	r3, [r3, #2]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f8aa 	bl	80099ac <RTC_Bcd2ToByte>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009884:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009886:	f7fd fb2d 	bl	8006ee4 <HAL_GetTick>
 800988a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800988c:	e009      	b.n	80098a2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800988e:	f7fd fb29 	bl	8006ee4 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800989c:	d901      	bls.n	80098a2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e007      	b.n	80098b2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0ee      	beq.n	800988e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d122      	bne.n	800991e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68da      	ldr	r2, [r3, #12]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098e8:	f7fd fafc 	bl	8006ee4 <HAL_GetTick>
 80098ec:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80098ee:	e00c      	b.n	800990a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098f0:	f7fd faf8 	bl	8006ee4 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098fe:	d904      	bls.n	800990a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2204      	movs	r2, #4
 8009904:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <RTC_EnterInitMode+0x64>
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d1e8      	bne.n	80098f0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800991e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009942:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff ff89 	bl	800986a <HAL_RTC_WaitForSynchro>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d004      	beq.n	8009968 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	4603      	mov	r3, r0
 800997a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009980:	e005      	b.n	800998e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	3301      	adds	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	3b0a      	subs	r3, #10
 800998c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b09      	cmp	r3, #9
 8009992:	d8f6      	bhi.n	8009982 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	b2da      	uxtb	r2, r3
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	4313      	orrs	r3, r2
 800999e:	b2db      	uxtb	r3, r3
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	091b      	lsrs	r3, r3, #4
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	4413      	add	r3, r2
 80099d6:	b2db      	uxtb	r3, r3
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e07b      	b.n	8009aee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d108      	bne.n	8009a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a06:	d009      	beq.n	8009a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	61da      	str	r2, [r3, #28]
 8009a0e:	e005      	b.n	8009a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7f9 fbd6 	bl	80031e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a64:	431a      	orrs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a6e:	431a      	orrs	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a96:	431a      	orrs	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa0:	ea42 0103 	orr.w	r1, r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	0c1b      	lsrs	r3, r3, #16
 8009aba:	f003 0104 	and.w	r1, r3, #4
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	f003 0210 	and.w	r2, r3, #16
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b088      	sub	sp, #32
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	603b      	str	r3, [r7, #0]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_SPI_Transmit+0x22>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e126      	b.n	8009d66 <HAL_SPI_Transmit+0x270>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b20:	f7fd f9e0 	bl	8006ee4 <HAL_GetTick>
 8009b24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d002      	beq.n	8009b3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b36:	2302      	movs	r3, #2
 8009b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b3a:	e10b      	b.n	8009d54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <HAL_SPI_Transmit+0x52>
 8009b42:	88fb      	ldrh	r3, [r7, #6]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d102      	bne.n	8009b4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b4c:	e102      	b.n	8009d54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2203      	movs	r2, #3
 8009b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	88fa      	ldrh	r2, [r7, #6]
 8009b66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	88fa      	ldrh	r2, [r7, #6]
 8009b6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b94:	d10f      	bne.n	8009bb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d007      	beq.n	8009bd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bdc:	d14b      	bne.n	8009c76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_SPI_Transmit+0xf6>
 8009be6:	8afb      	ldrh	r3, [r7, #22]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d13e      	bne.n	8009c6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	881a      	ldrh	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	1c9a      	adds	r2, r3, #2
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c10:	e02b      	b.n	8009c6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d112      	bne.n	8009c46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c24:	881a      	ldrh	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c30:	1c9a      	adds	r2, r3, #2
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c44:	e011      	b.n	8009c6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c46:	f7fd f94d 	bl	8006ee4 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d803      	bhi.n	8009c5e <HAL_SPI_Transmit+0x168>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d102      	bne.n	8009c64 <HAL_SPI_Transmit+0x16e>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c68:	e074      	b.n	8009d54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1ce      	bne.n	8009c12 <HAL_SPI_Transmit+0x11c>
 8009c74:	e04c      	b.n	8009d10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <HAL_SPI_Transmit+0x18e>
 8009c7e:	8afb      	ldrh	r3, [r7, #22]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d140      	bne.n	8009d06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	7812      	ldrb	r2, [r2, #0]
 8009c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009caa:	e02c      	b.n	8009d06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d113      	bne.n	8009ce2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	330c      	adds	r3, #12
 8009cc4:	7812      	ldrb	r2, [r2, #0]
 8009cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ce0:	e011      	b.n	8009d06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ce2:	f7fd f8ff 	bl	8006ee4 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d803      	bhi.n	8009cfa <HAL_SPI_Transmit+0x204>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf8:	d102      	bne.n	8009d00 <HAL_SPI_Transmit+0x20a>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d04:	e026      	b.n	8009d54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1cd      	bne.n	8009cac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f8b3 	bl	8009e80 <SPI_EndRxTxTransaction>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2220      	movs	r2, #32
 8009d24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d2e:	2300      	movs	r3, #0
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	613b      	str	r3, [r7, #16]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	77fb      	strb	r3, [r7, #31]
 8009d50:	e000      	b.n	8009d54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009d52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d80:	f7fd f8b0 	bl	8006ee4 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	1a9b      	subs	r3, r3, r2
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d90:	f7fd f8a8 	bl	8006ee4 <HAL_GetTick>
 8009d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d96:	4b39      	ldr	r3, [pc, #228]	; (8009e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	015b      	lsls	r3, r3, #5
 8009d9c:	0d1b      	lsrs	r3, r3, #20
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	fb02 f303 	mul.w	r3, r2, r3
 8009da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009da6:	e054      	b.n	8009e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dae:	d050      	beq.n	8009e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009db0:	f7fd f898 	bl	8006ee4 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d902      	bls.n	8009dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d13d      	bne.n	8009e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dde:	d111      	bne.n	8009e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de8:	d004      	beq.n	8009df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df2:	d107      	bne.n	8009e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0c:	d10f      	bne.n	8009e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e017      	b.n	8009e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	bf0c      	ite	eq
 8009e62:	2301      	moveq	r3, #1
 8009e64:	2300      	movne	r3, #0
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d19b      	bne.n	8009da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000180 	.word	0x20000180

08009e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <SPI_EndRxTxTransaction+0x7c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <SPI_EndRxTxTransaction+0x80>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	0d5b      	lsrs	r3, r3, #21
 8009e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009eaa:	d112      	bne.n	8009ed2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2180      	movs	r1, #128	; 0x80
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff ff5a 	bl	8009d70 <SPI_WaitFlagStateUntilTimeout>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d016      	beq.n	8009ef0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec6:	f043 0220 	orr.w	r2, r3, #32
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00f      	b.n	8009ef2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee8:	2b80      	cmp	r3, #128	; 0x80
 8009eea:	d0f2      	beq.n	8009ed2 <SPI_EndRxTxTransaction+0x52>
 8009eec:	e000      	b.n	8009ef0 <SPI_EndRxTxTransaction+0x70>
        break;
 8009eee:	bf00      	nop
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000180 	.word	0x20000180
 8009f00:	165e9f81 	.word	0x165e9f81

08009f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e041      	b.n	8009f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7f9 fbe2 	bl	80036f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f000 fc7a 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d001      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e04e      	b.n	800a05a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a23      	ldr	r2, [pc, #140]	; (800a068 <HAL_TIM_Base_Start_IT+0xc4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d022      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe6:	d01d      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a1f      	ldr	r2, [pc, #124]	; (800a06c <HAL_TIM_Base_Start_IT+0xc8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d018      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <HAL_TIM_Base_Start_IT+0xcc>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d013      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a1c      	ldr	r2, [pc, #112]	; (800a074 <HAL_TIM_Base_Start_IT+0xd0>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d00e      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a1b      	ldr	r2, [pc, #108]	; (800a078 <HAL_TIM_Base_Start_IT+0xd4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d009      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a19      	ldr	r2, [pc, #100]	; (800a07c <HAL_TIM_Base_Start_IT+0xd8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d004      	beq.n	800a024 <HAL_TIM_Base_Start_IT+0x80>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a18      	ldr	r2, [pc, #96]	; (800a080 <HAL_TIM_Base_Start_IT+0xdc>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d111      	bne.n	800a048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b06      	cmp	r3, #6
 800a034:	d010      	beq.n	800a058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f042 0201 	orr.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a046:	e007      	b.n	800a058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	40010000 	.word	0x40010000
 800a06c:	40000400 	.word	0x40000400
 800a070:	40000800 	.word	0x40000800
 800a074:	40000c00 	.word	0x40000c00
 800a078:	40010400 	.word	0x40010400
 800a07c:	40014000 	.word	0x40014000
 800a080:	40001800 	.word	0x40001800

0800a084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e041      	b.n	800a11a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f839 	bl	800a122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f000 fbba 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x24>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e022      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x3e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e015      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x58>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e008      	b.n	800a1a2 <HAL_TIM_PWM_Start+0x6a>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	bf14      	ite	ne
 800a19c:	2301      	movne	r3, #1
 800a19e:	2300      	moveq	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e07c      	b.n	800a2a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <HAL_TIM_PWM_Start+0x82>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b8:	e013      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d104      	bne.n	800a1ca <HAL_TIM_PWM_Start+0x92>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c8:	e00b      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d104      	bne.n	800a1da <HAL_TIM_PWM_Start+0xa2>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d8:	e003      	b.n	800a1e2 <HAL_TIM_PWM_Start+0xaa>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fe10 	bl	800ae10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a2d      	ldr	r2, [pc, #180]	; (800a2ac <HAL_TIM_PWM_Start+0x174>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIM_PWM_Start+0xcc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a2c      	ldr	r2, [pc, #176]	; (800a2b0 <HAL_TIM_PWM_Start+0x178>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d101      	bne.n	800a208 <HAL_TIM_PWM_Start+0xd0>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <HAL_TIM_PWM_Start+0xd2>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a21c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a22      	ldr	r2, [pc, #136]	; (800a2ac <HAL_TIM_PWM_Start+0x174>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d022      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a230:	d01d      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1f      	ldr	r2, [pc, #124]	; (800a2b4 <HAL_TIM_PWM_Start+0x17c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d018      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1d      	ldr	r2, [pc, #116]	; (800a2b8 <HAL_TIM_PWM_Start+0x180>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d013      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <HAL_TIM_PWM_Start+0x184>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d00e      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <HAL_TIM_PWM_Start+0x178>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d009      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <HAL_TIM_PWM_Start+0x188>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d004      	beq.n	800a26e <HAL_TIM_PWM_Start+0x136>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <HAL_TIM_PWM_Start+0x18c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d111      	bne.n	800a292 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 0307 	and.w	r3, r3, #7
 800a278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b06      	cmp	r3, #6
 800a27e:	d010      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f042 0201 	orr.w	r2, r2, #1
 800a28e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a290:	e007      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0201 	orr.w	r2, r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	40010000 	.word	0x40010000
 800a2b0:	40010400 	.word	0x40010400
 800a2b4:	40000400 	.word	0x40000400
 800a2b8:	40000800 	.word	0x40000800
 800a2bc:	40000c00 	.word	0x40000c00
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	40001800 	.word	0x40001800

0800a2c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d122      	bne.n	800a324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d11b      	bne.n	800a324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0202 	mvn.w	r2, #2
 800a2f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa77 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a310:	e005      	b.n	800a31e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa69 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa7a 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d122      	bne.n	800a378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d11b      	bne.n	800a378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f06f 0204 	mvn.w	r2, #4
 800a348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2202      	movs	r2, #2
 800a34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa4d 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a364:	e005      	b.n	800a372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa3f 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa50 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b08      	cmp	r3, #8
 800a384:	d122      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b08      	cmp	r3, #8
 800a392:	d11b      	bne.n	800a3cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0208 	mvn.w	r2, #8
 800a39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa23 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a3b8:	e005      	b.n	800a3c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa15 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fa26 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d122      	bne.n	800a420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b10      	cmp	r3, #16
 800a3e6:	d11b      	bne.n	800a420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0210 	mvn.w	r2, #16
 800a3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2208      	movs	r2, #8
 800a3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9f9 	bl	800a7fe <HAL_TIM_IC_CaptureCallback>
 800a40c:	e005      	b.n	800a41a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f9eb 	bl	800a7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f9fc 	bl	800a812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d10e      	bne.n	800a44c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d107      	bne.n	800a44c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f06f 0201 	mvn.w	r2, #1
 800a444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7f8 fdce 	bl	8002fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b80      	cmp	r3, #128	; 0x80
 800a458:	d10e      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a464:	2b80      	cmp	r3, #128	; 0x80
 800a466:	d107      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fdca 	bl	800b00c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d10e      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d107      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9c1 	bl	800a826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d10e      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d107      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0220 	mvn.w	r2, #32
 800a4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd94 	bl	800aff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	e0ae      	b.n	800a654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b0c      	cmp	r3, #12
 800a502:	f200 809f 	bhi.w	800a644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a541 	.word	0x0800a541
 800a510:	0800a645 	.word	0x0800a645
 800a514:	0800a645 	.word	0x0800a645
 800a518:	0800a645 	.word	0x0800a645
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a645 	.word	0x0800a645
 800a524:	0800a645 	.word	0x0800a645
 800a528:	0800a645 	.word	0x0800a645
 800a52c:	0800a5c3 	.word	0x0800a5c3
 800a530:	0800a645 	.word	0x0800a645
 800a534:	0800a645 	.word	0x0800a645
 800a538:	0800a645 	.word	0x0800a645
 800a53c:	0800a603 	.word	0x0800a603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fa18 	bl	800a97c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0208 	orr.w	r2, r2, #8
 800a55a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0204 	bic.w	r2, r2, #4
 800a56a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6999      	ldr	r1, [r3, #24]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	619a      	str	r2, [r3, #24]
      break;
 800a57e:	e064      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fa68 	bl	800aa5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6999      	ldr	r1, [r3, #24]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	021a      	lsls	r2, r3, #8
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	619a      	str	r2, [r3, #24]
      break;
 800a5c0:	e043      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68b9      	ldr	r1, [r7, #8]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fabd 	bl	800ab48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0208 	orr.w	r2, r2, #8
 800a5dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69da      	ldr	r2, [r3, #28]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0204 	bic.w	r2, r2, #4
 800a5ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69d9      	ldr	r1, [r3, #28]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	61da      	str	r2, [r3, #28]
      break;
 800a600:	e023      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fb11 	bl	800ac30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a61c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a62c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69d9      	ldr	r1, [r3, #28]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	021a      	lsls	r2, r3, #8
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	61da      	str	r2, [r3, #28]
      break;
 800a642:	e002      	b.n	800a64a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	75fb      	strb	r3, [r7, #23]
      break;
 800a648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_TIM_ConfigClockSource+0x1c>
 800a674:	2302      	movs	r3, #2
 800a676:	e0b4      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x186>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a69e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b0:	d03e      	beq.n	800a730 <HAL_TIM_ConfigClockSource+0xd4>
 800a6b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b6:	f200 8087 	bhi.w	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6be:	f000 8086 	beq.w	800a7ce <HAL_TIM_ConfigClockSource+0x172>
 800a6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c6:	d87f      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c8:	2b70      	cmp	r3, #112	; 0x70
 800a6ca:	d01a      	beq.n	800a702 <HAL_TIM_ConfigClockSource+0xa6>
 800a6cc:	2b70      	cmp	r3, #112	; 0x70
 800a6ce:	d87b      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d0:	2b60      	cmp	r3, #96	; 0x60
 800a6d2:	d050      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x11a>
 800a6d4:	2b60      	cmp	r3, #96	; 0x60
 800a6d6:	d877      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d8:	2b50      	cmp	r3, #80	; 0x50
 800a6da:	d03c      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0xfa>
 800a6dc:	2b50      	cmp	r3, #80	; 0x50
 800a6de:	d873      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d058      	beq.n	800a796 <HAL_TIM_ConfigClockSource+0x13a>
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	d86f      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b30      	cmp	r3, #48	; 0x30
 800a6ea:	d064      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6ec:	2b30      	cmp	r3, #48	; 0x30
 800a6ee:	d86b      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f0:	2b20      	cmp	r3, #32
 800a6f2:	d060      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d867      	bhi.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d05c      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d05a      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a700:	e062      	b.n	800a7c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	6899      	ldr	r1, [r3, #8]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f000 fb5d 	bl	800add0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	609a      	str	r2, [r3, #8]
      break;
 800a72e:	e04f      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6899      	ldr	r1, [r3, #8]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f000 fb46 	bl	800add0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689a      	ldr	r2, [r3, #8]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a752:	609a      	str	r2, [r3, #8]
      break;
 800a754:	e03c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6859      	ldr	r1, [r3, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	f000 faba 	bl	800acdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2150      	movs	r1, #80	; 0x50
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fb13 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a774:	e02c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6859      	ldr	r1, [r3, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	f000 fad9 	bl	800ad3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2160      	movs	r1, #96	; 0x60
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fb03 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a794:	e01c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f000 fa9a 	bl	800acdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2140      	movs	r1, #64	; 0x40
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 faf3 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a7b4:	e00c      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f000 faea 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a7c6:	e003      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a7cc:	e000      	b.n	800a7d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
	...

0800a83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a40      	ldr	r2, [pc, #256]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d013      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85a:	d00f      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a3d      	ldr	r2, [pc, #244]	; (800a954 <TIM_Base_SetConfig+0x118>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d00b      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a3c      	ldr	r2, [pc, #240]	; (800a958 <TIM_Base_SetConfig+0x11c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a3b      	ldr	r2, [pc, #236]	; (800a95c <TIM_Base_SetConfig+0x120>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3a      	ldr	r2, [pc, #232]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a2f      	ldr	r2, [pc, #188]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d02b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89c:	d027      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a2c      	ldr	r2, [pc, #176]	; (800a954 <TIM_Base_SetConfig+0x118>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d023      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2b      	ldr	r2, [pc, #172]	; (800a958 <TIM_Base_SetConfig+0x11c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d01f      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a2a      	ldr	r2, [pc, #168]	; (800a95c <TIM_Base_SetConfig+0x120>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d01b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a29      	ldr	r2, [pc, #164]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d017      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a28      	ldr	r2, [pc, #160]	; (800a964 <TIM_Base_SetConfig+0x128>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d013      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a27      	ldr	r2, [pc, #156]	; (800a968 <TIM_Base_SetConfig+0x12c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00f      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a26      	ldr	r2, [pc, #152]	; (800a96c <TIM_Base_SetConfig+0x130>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d00b      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a25      	ldr	r2, [pc, #148]	; (800a970 <TIM_Base_SetConfig+0x134>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d007      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a24      	ldr	r2, [pc, #144]	; (800a974 <TIM_Base_SetConfig+0x138>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d003      	beq.n	800a8ee <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a23      	ldr	r2, [pc, #140]	; (800a978 <TIM_Base_SetConfig+0x13c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d108      	bne.n	800a900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <TIM_Base_SetConfig+0x114>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_Base_SetConfig+0xf8>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a0c      	ldr	r2, [pc, #48]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d103      	bne.n	800a93c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	691a      	ldr	r2, [r3, #16]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	615a      	str	r2, [r3, #20]
}
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40010000 	.word	0x40010000
 800a954:	40000400 	.word	0x40000400
 800a958:	40000800 	.word	0x40000800
 800a95c:	40000c00 	.word	0x40000c00
 800a960:	40010400 	.word	0x40010400
 800a964:	40014000 	.word	0x40014000
 800a968:	40014400 	.word	0x40014400
 800a96c:	40014800 	.word	0x40014800
 800a970:	40001800 	.word	0x40001800
 800a974:	40001c00 	.word	0x40001c00
 800a978:	40002000 	.word	0x40002000

0800a97c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f023 0302 	bic.w	r3, r3, #2
 800a9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a20      	ldr	r2, [pc, #128]	; (800aa54 <TIM_OC1_SetConfig+0xd8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d003      	beq.n	800a9e0 <TIM_OC1_SetConfig+0x64>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a1f      	ldr	r2, [pc, #124]	; (800aa58 <TIM_OC1_SetConfig+0xdc>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d10c      	bne.n	800a9fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f023 0308 	bic.w	r3, r3, #8
 800a9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f023 0304 	bic.w	r3, r3, #4
 800a9f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <TIM_OC1_SetConfig+0xd8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d003      	beq.n	800aa0a <TIM_OC1_SetConfig+0x8e>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a14      	ldr	r2, [pc, #80]	; (800aa58 <TIM_OC1_SetConfig+0xdc>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d111      	bne.n	800aa2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	621a      	str	r2, [r3, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40010000 	.word	0x40010000
 800aa58:	40010400 	.word	0x40010400

0800aa5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	f023 0210 	bic.w	r2, r3, #16
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	021b      	lsls	r3, r3, #8
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f023 0320 	bic.w	r3, r3, #32
 800aaa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a22      	ldr	r2, [pc, #136]	; (800ab40 <TIM_OC2_SetConfig+0xe4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <TIM_OC2_SetConfig+0x68>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <TIM_OC2_SetConfig+0xe8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d10d      	bne.n	800aae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a17      	ldr	r2, [pc, #92]	; (800ab40 <TIM_OC2_SetConfig+0xe4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d003      	beq.n	800aaf0 <TIM_OC2_SetConfig+0x94>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <TIM_OC2_SetConfig+0xe8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d113      	bne.n	800ab18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aafe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	621a      	str	r2, [r3, #32]
}
 800ab32:	bf00      	nop
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40010000 	.word	0x40010000
 800ab44:	40010400 	.word	0x40010400

0800ab48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	021b      	lsls	r3, r3, #8
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a21      	ldr	r2, [pc, #132]	; (800ac28 <TIM_OC3_SetConfig+0xe0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d003      	beq.n	800abae <TIM_OC3_SetConfig+0x66>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a20      	ldr	r2, [pc, #128]	; (800ac2c <TIM_OC3_SetConfig+0xe4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d10d      	bne.n	800abca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	021b      	lsls	r3, r3, #8
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <TIM_OC3_SetConfig+0xe0>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_OC3_SetConfig+0x92>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <TIM_OC3_SetConfig+0xe4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d113      	bne.n	800ac02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	621a      	str	r2, [r3, #32]
}
 800ac1c:	bf00      	nop
 800ac1e:	371c      	adds	r7, #28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40010400 	.word	0x40010400

0800ac30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	031b      	lsls	r3, r3, #12
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a12      	ldr	r2, [pc, #72]	; (800acd4 <TIM_OC4_SetConfig+0xa4>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_OC4_SetConfig+0x68>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a11      	ldr	r2, [pc, #68]	; (800acd8 <TIM_OC4_SetConfig+0xa8>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d109      	bne.n	800acac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	019b      	lsls	r3, r3, #6
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40010400 	.word	0x40010400

0800acdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f023 0201 	bic.w	r2, r3, #1
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f023 030a 	bic.w	r3, r3, #10
 800ad18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	621a      	str	r2, [r3, #32]
}
 800ad2e:	bf00      	nop
 800ad30:	371c      	adds	r7, #28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b087      	sub	sp, #28
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	031b      	lsls	r3, r3, #12
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	f043 0307 	orr.w	r3, r3, #7
 800adbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	609a      	str	r2, [r3, #8]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	021a      	lsls	r2, r3, #8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	609a      	str	r2, [r3, #8]
}
 800ae04:	bf00      	nop
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	2201      	movs	r2, #1
 800ae24:	fa02 f303 	lsl.w	r3, r2, r3
 800ae28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a1a      	ldr	r2, [r3, #32]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 031f 	and.w	r3, r3, #31
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	fa01 f303 	lsl.w	r3, r1, r3
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
	...

0800ae5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e05a      	b.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a21      	ldr	r2, [pc, #132]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d022      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec0:	d01d      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a1d      	ldr	r2, [pc, #116]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d018      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1b      	ldr	r2, [pc, #108]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d013      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d00e      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a18      	ldr	r2, [pc, #96]	; (800af48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d009      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a17      	ldr	r2, [pc, #92]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d004      	beq.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a15      	ldr	r2, [pc, #84]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d10c      	bne.n	800af18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	40010000 	.word	0x40010000
 800af3c:	40000400 	.word	0x40000400
 800af40:	40000800 	.word	0x40000800
 800af44:	40000c00 	.word	0x40000c00
 800af48:	40010400 	.word	0x40010400
 800af4c:	40014000 	.word	0x40014000
 800af50:	40001800 	.word	0x40001800

0800af54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e03d      	b.n	800afec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e03f      	b.n	800b0b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7f8 fc6c 	bl	8003924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2224      	movs	r2, #36	; 0x24
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fd81 	bl	800bb6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	691a      	ldr	r2, [r3, #16]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2220      	movs	r2, #32
 800b0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b08a      	sub	sp, #40	; 0x28
 800b0be:	af02      	add	r7, sp, #8
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	603b      	str	r3, [r7, #0]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b20      	cmp	r3, #32
 800b0d8:	f040 808c 	bne.w	800b1f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <HAL_UART_Receive+0x2e>
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e084      	b.n	800b1f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_UART_Receive+0x40>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e07d      	b.n	800b1f6 <HAL_UART_Receive+0x13c>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2222      	movs	r2, #34	; 0x22
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b116:	f7fb fee5 	bl	8006ee4 <HAL_GetTick>
 800b11a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	88fa      	ldrh	r2, [r7, #6]
 800b126:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b130:	d108      	bne.n	800b144 <HAL_UART_Receive+0x8a>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d104      	bne.n	800b144 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	e003      	b.n	800b14c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b154:	e043      	b.n	800b1de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2200      	movs	r2, #0
 800b15e:	2120      	movs	r1, #32
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 fafb 	bl	800b75c <UART_WaitOnFlagUntilTimeout>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e042      	b.n	800b1f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10c      	bne.n	800b190 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	b29a      	uxth	r2, r3
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	3302      	adds	r3, #2
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	e01f      	b.n	800b1d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b198:	d007      	beq.n	800b1aa <HAL_UART_Receive+0xf0>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <HAL_UART_Receive+0xfe>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	e008      	b.n	800b1ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1b6      	bne.n	800b156 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2220      	movs	r2, #32
 800b1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800b1f4:	2302      	movs	r3, #2
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b0ba      	sub	sp, #232	; 0xe8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b226:	2300      	movs	r3, #0
 800b228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b23e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10f      	bne.n	800b266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fbc9 	bl	800b9f6 <UART_Receive_IT>
      return;
 800b264:	e256      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 80de 	beq.w	800b42c <HAL_UART_IRQHandler+0x22c>
 800b270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80d1 	beq.w	800b42c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
 800b296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	f043 0201 	orr.w	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
 800b2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f043 0202 	orr.w	r2, r3, #2
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00b      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	f043 0204 	orr.w	r2, r3, #4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
 800b302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	f043 0208 	orr.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 81ed 	beq.w	800b70a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fb54 	bl	800b9f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b358:	2b40      	cmp	r3, #64	; 0x40
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	f003 0308 	and.w	r3, r3, #8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <HAL_UART_IRQHandler+0x17a>
 800b372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04f      	beq.n	800b41a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa5c 	bl	800b838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38a:	2b40      	cmp	r3, #64	; 0x40
 800b38c:	d141      	bne.n	800b412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3314      	adds	r3, #20
 800b394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1d9      	bne.n	800b38e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d013      	beq.n	800b40a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	4a7d      	ldr	r2, [pc, #500]	; (800b5dc <HAL_UART_IRQHandler+0x3dc>)
 800b3e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fb ff29 	bl	8007246 <HAL_DMA_Abort_IT>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d016      	beq.n	800b428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b408:	e00e      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f990 	bl	800b730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b410:	e00a      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f98c 	bl	800b730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b418:	e006      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f988 	bl	800b730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b426:	e170      	b.n	800b70a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b428:	bf00      	nop
    return;
 800b42a:	e16e      	b.n	800b70a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	2b01      	cmp	r3, #1
 800b432:	f040 814a 	bne.w	800b6ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43a:	f003 0310 	and.w	r3, r3, #16
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8143 	beq.w	800b6ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 813c 	beq.w	800b6ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b452:	2300      	movs	r3, #0
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60bb      	str	r3, [r7, #8]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	60bb      	str	r3, [r7, #8]
 800b466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b472:	2b40      	cmp	r3, #64	; 0x40
 800b474:	f040 80b4 	bne.w	800b5e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8140 	beq.w	800b70e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b496:	429a      	cmp	r2, r3
 800b498:	f080 8139 	bcs.w	800b70e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ae:	f000 8088 	beq.w	800b5c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1d9      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3314      	adds	r3, #20
 800b504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b510:	f023 0301 	bic.w	r3, r3, #1
 800b514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3314      	adds	r3, #20
 800b51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e1      	bne.n	800b4fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3314      	adds	r3, #20
 800b540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3314      	adds	r3, #20
 800b55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b55e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e3      	bne.n	800b53a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	330c      	adds	r3, #12
 800b586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b592:	f023 0310 	bic.w	r3, r3, #16
 800b596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	330c      	adds	r3, #12
 800b5a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b5a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b5a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e3      	bne.n	800b580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fb fdd2 	bl	8007166 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f8b6 	bl	800b744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5d8:	e099      	b.n	800b70e <HAL_UART_IRQHandler+0x50e>
 800b5da:	bf00      	nop
 800b5dc:	0800b8ff 	.word	0x0800b8ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 808b 	beq.w	800b712 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b5fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8086 	beq.w	800b712 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	330c      	adds	r3, #12
 800b60c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	330c      	adds	r3, #12
 800b626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b62a:	647a      	str	r2, [r7, #68]	; 0x44
 800b62c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1e3      	bne.n	800b606 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3314      	adds	r3, #20
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	623b      	str	r3, [r7, #32]
   return(result);
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	f023 0301 	bic.w	r3, r3, #1
 800b654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3314      	adds	r3, #20
 800b65e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b662:	633a      	str	r2, [r7, #48]	; 0x30
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e3      	bne.n	800b63e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	330c      	adds	r3, #12
 800b68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	60fb      	str	r3, [r7, #12]
   return(result);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0310 	bic.w	r3, r3, #16
 800b69a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	330c      	adds	r3, #12
 800b6a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b6a8:	61fa      	str	r2, [r7, #28]
 800b6aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	69b9      	ldr	r1, [r7, #24]
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e3      	bne.n	800b684 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f83e 	bl	800b744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6c8:	e023      	b.n	800b712 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d009      	beq.n	800b6ea <HAL_UART_IRQHandler+0x4ea>
 800b6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f91f 	bl	800b926 <UART_Transmit_IT>
    return;
 800b6e8:	e014      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00e      	beq.n	800b714 <HAL_UART_IRQHandler+0x514>
 800b6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d008      	beq.n	800b714 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f95f 	bl	800b9c6 <UART_EndTransmit_IT>
    return;
 800b708:	e004      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
    return;
 800b70a:	bf00      	nop
 800b70c:	e002      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
      return;
 800b70e:	bf00      	nop
 800b710:	e000      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
      return;
 800b712:	bf00      	nop
  }
}
 800b714:	37e8      	adds	r7, #232	; 0xe8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop

0800b71c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b090      	sub	sp, #64	; 0x40
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	4613      	mov	r3, r2
 800b76a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76c:	e050      	b.n	800b810 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d04c      	beq.n	800b810 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d007      	beq.n	800b78c <UART_WaitOnFlagUntilTimeout+0x30>
 800b77c:	f7fb fbb2 	bl	8006ee4 <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b788:	429a      	cmp	r2, r3
 800b78a:	d241      	bcs.n	800b810 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	330c      	adds	r3, #12
 800b792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	330c      	adds	r3, #12
 800b7aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7ac:	637a      	str	r2, [r7, #52]	; 0x34
 800b7ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e5      	bne.n	800b78c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f023 0301 	bic.w	r3, r3, #1
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3314      	adds	r3, #20
 800b7de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7e0:	623a      	str	r2, [r7, #32]
 800b7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e5      	bne.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2220      	movs	r2, #32
 800b800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e00f      	b.n	800b830 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	4013      	ands	r3, r2
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	bf0c      	ite	eq
 800b820:	2301      	moveq	r3, #1
 800b822:	2300      	movne	r3, #0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d09f      	beq.n	800b76e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3740      	adds	r7, #64	; 0x40
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b095      	sub	sp, #84	; 0x54
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	330c      	adds	r3, #12
 800b846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84a:	e853 3f00 	ldrex	r3, [r3]
 800b84e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b856:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	330c      	adds	r3, #12
 800b85e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b860:	643a      	str	r2, [r7, #64]	; 0x40
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e5      	bne.n	800b840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3314      	adds	r3, #20
 800b87a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	e853 3f00 	ldrex	r3, [r3]
 800b882:	61fb      	str	r3, [r7, #28]
   return(result);
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	f023 0301 	bic.w	r3, r3, #1
 800b88a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3314      	adds	r3, #20
 800b892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b894:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b89a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89c:	e841 2300 	strex	r3, r2, [r1]
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1e5      	bne.n	800b874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d119      	bne.n	800b8e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f023 0310 	bic.w	r3, r3, #16
 800b8c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8d0:	61ba      	str	r2, [r7, #24]
 800b8d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6979      	ldr	r1, [r7, #20]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e5      	bne.n	800b8b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b8f2:	bf00      	nop
 800b8f4:	3754      	adds	r7, #84	; 0x54
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7ff ff09 	bl	800b730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b91e:	bf00      	nop
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b21      	cmp	r3, #33	; 0x21
 800b938:	d13e      	bne.n	800b9b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b942:	d114      	bne.n	800b96e <UART_Transmit_IT+0x48>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d110      	bne.n	800b96e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	1c9a      	adds	r2, r3, #2
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	621a      	str	r2, [r3, #32]
 800b96c:	e008      	b.n	800b980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	1c59      	adds	r1, r3, #1
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6211      	str	r1, [r2, #32]
 800b978:	781a      	ldrb	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29b      	uxth	r3, r3
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	4619      	mov	r1, r3
 800b98e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10f      	bne.n	800b9b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	e000      	b.n	800b9ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b9b8:	2302      	movs	r3, #2
  }
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68da      	ldr	r2, [r3, #12]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fe98 	bl	800b71c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b08c      	sub	sp, #48	; 0x30
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b22      	cmp	r3, #34	; 0x22
 800ba08:	f040 80ab 	bne.w	800bb62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba14:	d117      	bne.n	800ba46 <UART_Receive_IT+0x50>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d113      	bne.n	800ba46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3e:	1c9a      	adds	r2, r3, #2
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28
 800ba44:	e026      	b.n	800ba94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba58:	d007      	beq.n	800ba6a <UART_Receive_IT+0x74>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <UART_Receive_IT+0x82>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	b2da      	uxtb	r2, r3
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	e008      	b.n	800ba8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4619      	mov	r1, r3
 800baa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d15a      	bne.n	800bb5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68da      	ldr	r2, [r3, #12]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f022 0220 	bic.w	r2, r2, #32
 800bab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695a      	ldr	r2, [r3, #20]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0201 	bic.w	r2, r2, #1
 800bad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d135      	bne.n	800bb54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	330c      	adds	r3, #12
 800baf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f023 0310 	bic.w	r3, r3, #16
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	330c      	adds	r3, #12
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	623a      	str	r2, [r7, #32]
 800bb10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	69f9      	ldr	r1, [r7, #28]
 800bb14:	6a3a      	ldr	r2, [r7, #32]
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e5      	bne.n	800baee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 0310 	and.w	r3, r3, #16
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d10a      	bne.n	800bb46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff fdf9 	bl	800b744 <HAL_UARTEx_RxEventCallback>
 800bb52:	e002      	b.n	800bb5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7f7 fa9f 	bl	8003098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e002      	b.n	800bb64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e000      	b.n	800bb64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bb62:	2302      	movs	r3, #2
  }
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3730      	adds	r7, #48	; 0x30
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb70:	b0c0      	sub	sp, #256	; 0x100
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb88:	68d9      	ldr	r1, [r3, #12]
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	ea40 0301 	orr.w	r3, r0, r1
 800bb94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	431a      	orrs	r2, r3
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bbc4:	f021 010c 	bic.w	r1, r1, #12
 800bbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbd2:	430b      	orrs	r3, r1
 800bbd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bbd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe6:	6999      	ldr	r1, [r3, #24]
 800bbe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	ea40 0301 	orr.w	r3, r0, r1
 800bbf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4b8f      	ldr	r3, [pc, #572]	; (800be38 <UART_SetConfig+0x2cc>)
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d005      	beq.n	800bc0c <UART_SetConfig+0xa0>
 800bc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b8d      	ldr	r3, [pc, #564]	; (800be3c <UART_SetConfig+0x2d0>)
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d104      	bne.n	800bc16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc0c:	f7fd fa18 	bl	8009040 <HAL_RCC_GetPCLK2Freq>
 800bc10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bc14:	e003      	b.n	800bc1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc16:	f7fd f9ff 	bl	8009018 <HAL_RCC_GetPCLK1Freq>
 800bc1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc28:	f040 810c 	bne.w	800be44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bc3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bc3e:	4622      	mov	r2, r4
 800bc40:	462b      	mov	r3, r5
 800bc42:	1891      	adds	r1, r2, r2
 800bc44:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc46:	415b      	adcs	r3, r3
 800bc48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bc4e:	4621      	mov	r1, r4
 800bc50:	eb12 0801 	adds.w	r8, r2, r1
 800bc54:	4629      	mov	r1, r5
 800bc56:	eb43 0901 	adc.w	r9, r3, r1
 800bc5a:	f04f 0200 	mov.w	r2, #0
 800bc5e:	f04f 0300 	mov.w	r3, #0
 800bc62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc6e:	4690      	mov	r8, r2
 800bc70:	4699      	mov	r9, r3
 800bc72:	4623      	mov	r3, r4
 800bc74:	eb18 0303 	adds.w	r3, r8, r3
 800bc78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	eb49 0303 	adc.w	r3, r9, r3
 800bc82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	18db      	adds	r3, r3, r3
 800bc9e:	653b      	str	r3, [r7, #80]	; 0x50
 800bca0:	4613      	mov	r3, r2
 800bca2:	eb42 0303 	adc.w	r3, r2, r3
 800bca6:	657b      	str	r3, [r7, #84]	; 0x54
 800bca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bcac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bcb0:	f7f4 ffe4 	bl	8000c7c <__aeabi_uldivmod>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	4b61      	ldr	r3, [pc, #388]	; (800be40 <UART_SetConfig+0x2d4>)
 800bcba:	fba3 2302 	umull	r2, r3, r3, r2
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	011c      	lsls	r4, r3, #4
 800bcc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bccc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bcd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bcd4:	4642      	mov	r2, r8
 800bcd6:	464b      	mov	r3, r9
 800bcd8:	1891      	adds	r1, r2, r2
 800bcda:	64b9      	str	r1, [r7, #72]	; 0x48
 800bcdc:	415b      	adcs	r3, r3
 800bcde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bce4:	4641      	mov	r1, r8
 800bce6:	eb12 0a01 	adds.w	sl, r2, r1
 800bcea:	4649      	mov	r1, r9
 800bcec:	eb43 0b01 	adc.w	fp, r3, r1
 800bcf0:	f04f 0200 	mov.w	r2, #0
 800bcf4:	f04f 0300 	mov.w	r3, #0
 800bcf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bcfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd04:	4692      	mov	sl, r2
 800bd06:	469b      	mov	fp, r3
 800bd08:	4643      	mov	r3, r8
 800bd0a:	eb1a 0303 	adds.w	r3, sl, r3
 800bd0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd12:	464b      	mov	r3, r9
 800bd14:	eb4b 0303 	adc.w	r3, fp, r3
 800bd18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd30:	460b      	mov	r3, r1
 800bd32:	18db      	adds	r3, r3, r3
 800bd34:	643b      	str	r3, [r7, #64]	; 0x40
 800bd36:	4613      	mov	r3, r2
 800bd38:	eb42 0303 	adc.w	r3, r2, r3
 800bd3c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bd46:	f7f4 ff99 	bl	8000c7c <__aeabi_uldivmod>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4b3b      	ldr	r3, [pc, #236]	; (800be40 <UART_SetConfig+0x2d4>)
 800bd52:	fba3 2301 	umull	r2, r3, r3, r1
 800bd56:	095b      	lsrs	r3, r3, #5
 800bd58:	2264      	movs	r2, #100	; 0x64
 800bd5a:	fb02 f303 	mul.w	r3, r2, r3
 800bd5e:	1acb      	subs	r3, r1, r3
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd66:	4b36      	ldr	r3, [pc, #216]	; (800be40 <UART_SetConfig+0x2d4>)
 800bd68:	fba3 2302 	umull	r2, r3, r3, r2
 800bd6c:	095b      	lsrs	r3, r3, #5
 800bd6e:	005b      	lsls	r3, r3, #1
 800bd70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd74:	441c      	add	r4, r3
 800bd76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd88:	4642      	mov	r2, r8
 800bd8a:	464b      	mov	r3, r9
 800bd8c:	1891      	adds	r1, r2, r2
 800bd8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd90:	415b      	adcs	r3, r3
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd98:	4641      	mov	r1, r8
 800bd9a:	1851      	adds	r1, r2, r1
 800bd9c:	6339      	str	r1, [r7, #48]	; 0x30
 800bd9e:	4649      	mov	r1, r9
 800bda0:	414b      	adcs	r3, r1
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	f04f 0300 	mov.w	r3, #0
 800bdac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	00cb      	lsls	r3, r1, #3
 800bdb4:	4651      	mov	r1, sl
 800bdb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdba:	4651      	mov	r1, sl
 800bdbc:	00ca      	lsls	r2, r1, #3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4642      	mov	r2, r8
 800bdc6:	189b      	adds	r3, r3, r2
 800bdc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdcc:	464b      	mov	r3, r9
 800bdce:	460a      	mov	r2, r1
 800bdd0:	eb42 0303 	adc.w	r3, r2, r3
 800bdd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bde4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bde8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bdec:	460b      	mov	r3, r1
 800bdee:	18db      	adds	r3, r3, r3
 800bdf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	eb42 0303 	adc.w	r3, r2, r3
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800be02:	f7f4 ff3b 	bl	8000c7c <__aeabi_uldivmod>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <UART_SetConfig+0x2d4>)
 800be0c:	fba3 1302 	umull	r1, r3, r3, r2
 800be10:	095b      	lsrs	r3, r3, #5
 800be12:	2164      	movs	r1, #100	; 0x64
 800be14:	fb01 f303 	mul.w	r3, r1, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	3332      	adds	r3, #50	; 0x32
 800be1e:	4a08      	ldr	r2, [pc, #32]	; (800be40 <UART_SetConfig+0x2d4>)
 800be20:	fba2 2303 	umull	r2, r3, r2, r3
 800be24:	095b      	lsrs	r3, r3, #5
 800be26:	f003 0207 	and.w	r2, r3, #7
 800be2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4422      	add	r2, r4
 800be32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be34:	e105      	b.n	800c042 <UART_SetConfig+0x4d6>
 800be36:	bf00      	nop
 800be38:	40011000 	.word	0x40011000
 800be3c:	40011400 	.word	0x40011400
 800be40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be48:	2200      	movs	r2, #0
 800be4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800be56:	4642      	mov	r2, r8
 800be58:	464b      	mov	r3, r9
 800be5a:	1891      	adds	r1, r2, r2
 800be5c:	6239      	str	r1, [r7, #32]
 800be5e:	415b      	adcs	r3, r3
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
 800be62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be66:	4641      	mov	r1, r8
 800be68:	1854      	adds	r4, r2, r1
 800be6a:	4649      	mov	r1, r9
 800be6c:	eb43 0501 	adc.w	r5, r3, r1
 800be70:	f04f 0200 	mov.w	r2, #0
 800be74:	f04f 0300 	mov.w	r3, #0
 800be78:	00eb      	lsls	r3, r5, #3
 800be7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be7e:	00e2      	lsls	r2, r4, #3
 800be80:	4614      	mov	r4, r2
 800be82:	461d      	mov	r5, r3
 800be84:	4643      	mov	r3, r8
 800be86:	18e3      	adds	r3, r4, r3
 800be88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be8c:	464b      	mov	r3, r9
 800be8e:	eb45 0303 	adc.w	r3, r5, r3
 800be92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bea6:	f04f 0200 	mov.w	r2, #0
 800beaa:	f04f 0300 	mov.w	r3, #0
 800beae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800beb2:	4629      	mov	r1, r5
 800beb4:	008b      	lsls	r3, r1, #2
 800beb6:	4621      	mov	r1, r4
 800beb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bebc:	4621      	mov	r1, r4
 800bebe:	008a      	lsls	r2, r1, #2
 800bec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bec4:	f7f4 feda 	bl	8000c7c <__aeabi_uldivmod>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4b60      	ldr	r3, [pc, #384]	; (800c050 <UART_SetConfig+0x4e4>)
 800bece:	fba3 2302 	umull	r2, r3, r3, r2
 800bed2:	095b      	lsrs	r3, r3, #5
 800bed4:	011c      	lsls	r4, r3, #4
 800bed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bee8:	4642      	mov	r2, r8
 800beea:	464b      	mov	r3, r9
 800beec:	1891      	adds	r1, r2, r2
 800beee:	61b9      	str	r1, [r7, #24]
 800bef0:	415b      	adcs	r3, r3
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bef8:	4641      	mov	r1, r8
 800befa:	1851      	adds	r1, r2, r1
 800befc:	6139      	str	r1, [r7, #16]
 800befe:	4649      	mov	r1, r9
 800bf00:	414b      	adcs	r3, r1
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	f04f 0200 	mov.w	r2, #0
 800bf08:	f04f 0300 	mov.w	r3, #0
 800bf0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf10:	4659      	mov	r1, fp
 800bf12:	00cb      	lsls	r3, r1, #3
 800bf14:	4651      	mov	r1, sl
 800bf16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf1a:	4651      	mov	r1, sl
 800bf1c:	00ca      	lsls	r2, r1, #3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4619      	mov	r1, r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	4642      	mov	r2, r8
 800bf26:	189b      	adds	r3, r3, r2
 800bf28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf2c:	464b      	mov	r3, r9
 800bf2e:	460a      	mov	r2, r1
 800bf30:	eb42 0303 	adc.w	r3, r2, r3
 800bf34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf42:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bf44:	f04f 0200 	mov.w	r2, #0
 800bf48:	f04f 0300 	mov.w	r3, #0
 800bf4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf50:	4649      	mov	r1, r9
 800bf52:	008b      	lsls	r3, r1, #2
 800bf54:	4641      	mov	r1, r8
 800bf56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf5a:	4641      	mov	r1, r8
 800bf5c:	008a      	lsls	r2, r1, #2
 800bf5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bf62:	f7f4 fe8b 	bl	8000c7c <__aeabi_uldivmod>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4b39      	ldr	r3, [pc, #228]	; (800c050 <UART_SetConfig+0x4e4>)
 800bf6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf70:	095b      	lsrs	r3, r3, #5
 800bf72:	2164      	movs	r1, #100	; 0x64
 800bf74:	fb01 f303 	mul.w	r3, r1, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	3332      	adds	r3, #50	; 0x32
 800bf7e:	4a34      	ldr	r2, [pc, #208]	; (800c050 <UART_SetConfig+0x4e4>)
 800bf80:	fba2 2303 	umull	r2, r3, r2, r3
 800bf84:	095b      	lsrs	r3, r3, #5
 800bf86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf8a:	441c      	add	r4, r3
 800bf8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf90:	2200      	movs	r2, #0
 800bf92:	673b      	str	r3, [r7, #112]	; 0x70
 800bf94:	677a      	str	r2, [r7, #116]	; 0x74
 800bf96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf9a:	4642      	mov	r2, r8
 800bf9c:	464b      	mov	r3, r9
 800bf9e:	1891      	adds	r1, r2, r2
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	415b      	adcs	r3, r3
 800bfa4:	60fb      	str	r3, [r7, #12]
 800bfa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfaa:	4641      	mov	r1, r8
 800bfac:	1851      	adds	r1, r2, r1
 800bfae:	6039      	str	r1, [r7, #0]
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	414b      	adcs	r3, r1
 800bfb4:	607b      	str	r3, [r7, #4]
 800bfb6:	f04f 0200 	mov.w	r2, #0
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bfc2:	4659      	mov	r1, fp
 800bfc4:	00cb      	lsls	r3, r1, #3
 800bfc6:	4651      	mov	r1, sl
 800bfc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfcc:	4651      	mov	r1, sl
 800bfce:	00ca      	lsls	r2, r1, #3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	189b      	adds	r3, r3, r2
 800bfda:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfdc:	464b      	mov	r3, r9
 800bfde:	460a      	mov	r2, r1
 800bfe0:	eb42 0303 	adc.w	r3, r2, r3
 800bfe4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	663b      	str	r3, [r7, #96]	; 0x60
 800bff0:	667a      	str	r2, [r7, #100]	; 0x64
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bffe:	4649      	mov	r1, r9
 800c000:	008b      	lsls	r3, r1, #2
 800c002:	4641      	mov	r1, r8
 800c004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c008:	4641      	mov	r1, r8
 800c00a:	008a      	lsls	r2, r1, #2
 800c00c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c010:	f7f4 fe34 	bl	8000c7c <__aeabi_uldivmod>
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <UART_SetConfig+0x4e4>)
 800c01a:	fba3 1302 	umull	r1, r3, r3, r2
 800c01e:	095b      	lsrs	r3, r3, #5
 800c020:	2164      	movs	r1, #100	; 0x64
 800c022:	fb01 f303 	mul.w	r3, r1, r3
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	011b      	lsls	r3, r3, #4
 800c02a:	3332      	adds	r3, #50	; 0x32
 800c02c:	4a08      	ldr	r2, [pc, #32]	; (800c050 <UART_SetConfig+0x4e4>)
 800c02e:	fba2 2303 	umull	r2, r3, r2, r3
 800c032:	095b      	lsrs	r3, r3, #5
 800c034:	f003 020f 	and.w	r2, r3, #15
 800c038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4422      	add	r2, r4
 800c040:	609a      	str	r2, [r3, #8]
}
 800c042:	bf00      	nop
 800c044:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c048:	46bd      	mov	sp, r7
 800c04a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c04e:	bf00      	nop
 800c050:	51eb851f 	.word	0x51eb851f

0800c054 <asctime>:
 800c054:	4b0d      	ldr	r3, [pc, #52]	; (800c08c <asctime+0x38>)
 800c056:	b570      	push	{r4, r5, r6, lr}
 800c058:	681d      	ldr	r5, [r3, #0]
 800c05a:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800c05c:	4604      	mov	r4, r0
 800c05e:	b976      	cbnz	r6, 800c07e <asctime+0x2a>
 800c060:	201a      	movs	r0, #26
 800c062:	f000 f893 	bl	800c18c <malloc>
 800c066:	4602      	mov	r2, r0
 800c068:	6428      	str	r0, [r5, #64]	; 0x40
 800c06a:	b920      	cbnz	r0, 800c076 <asctime+0x22>
 800c06c:	4b08      	ldr	r3, [pc, #32]	; (800c090 <asctime+0x3c>)
 800c06e:	4809      	ldr	r0, [pc, #36]	; (800c094 <asctime+0x40>)
 800c070:	2137      	movs	r1, #55	; 0x37
 800c072:	f000 f837 	bl	800c0e4 <__assert_func>
 800c076:	221a      	movs	r2, #26
 800c078:	4631      	mov	r1, r6
 800c07a:	f000 f8a5 	bl	800c1c8 <memset>
 800c07e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800c080:	4620      	mov	r0, r4
 800c082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c086:	f000 b807 	b.w	800c098 <asctime_r>
 800c08a:	bf00      	nop
 800c08c:	200002c0 	.word	0x200002c0
 800c090:	08039408 	.word	0x08039408
 800c094:	0803941f 	.word	0x0803941f

0800c098 <asctime_r>:
 800c098:	b510      	push	{r4, lr}
 800c09a:	460c      	mov	r4, r1
 800c09c:	6941      	ldr	r1, [r0, #20]
 800c09e:	6903      	ldr	r3, [r0, #16]
 800c0a0:	6982      	ldr	r2, [r0, #24]
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800c0a8:	9104      	str	r1, [sp, #16]
 800c0aa:	6801      	ldr	r1, [r0, #0]
 800c0ac:	9103      	str	r1, [sp, #12]
 800c0ae:	6841      	ldr	r1, [r0, #4]
 800c0b0:	9102      	str	r1, [sp, #8]
 800c0b2:	6881      	ldr	r1, [r0, #8]
 800c0b4:	9101      	str	r1, [sp, #4]
 800c0b6:	68c1      	ldr	r1, [r0, #12]
 800c0b8:	9100      	str	r1, [sp, #0]
 800c0ba:	4907      	ldr	r1, [pc, #28]	; (800c0d8 <asctime_r+0x40>)
 800c0bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c0c0:	440b      	add	r3, r1
 800c0c2:	4906      	ldr	r1, [pc, #24]	; (800c0dc <asctime_r+0x44>)
 800c0c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c0c8:	440a      	add	r2, r1
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	4904      	ldr	r1, [pc, #16]	; (800c0e0 <asctime_r+0x48>)
 800c0ce:	f001 f9a9 	bl	800d424 <siprintf>
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	b006      	add	sp, #24
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	080394b0 	.word	0x080394b0
 800c0dc:	0803949b 	.word	0x0803949b
 800c0e0:	0803947b 	.word	0x0803947b

0800c0e4 <__assert_func>:
 800c0e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0e6:	4614      	mov	r4, r2
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4b09      	ldr	r3, [pc, #36]	; (800c110 <__assert_func+0x2c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	68d8      	ldr	r0, [r3, #12]
 800c0f2:	b14c      	cbz	r4, 800c108 <__assert_func+0x24>
 800c0f4:	4b07      	ldr	r3, [pc, #28]	; (800c114 <__assert_func+0x30>)
 800c0f6:	9100      	str	r1, [sp, #0]
 800c0f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0fc:	4906      	ldr	r1, [pc, #24]	; (800c118 <__assert_func+0x34>)
 800c0fe:	462b      	mov	r3, r5
 800c100:	f000 f80e 	bl	800c120 <fiprintf>
 800c104:	f002 fafa 	bl	800e6fc <abort>
 800c108:	4b04      	ldr	r3, [pc, #16]	; (800c11c <__assert_func+0x38>)
 800c10a:	461c      	mov	r4, r3
 800c10c:	e7f3      	b.n	800c0f6 <__assert_func+0x12>
 800c10e:	bf00      	nop
 800c110:	200002c0 	.word	0x200002c0
 800c114:	080394d4 	.word	0x080394d4
 800c118:	080394e1 	.word	0x080394e1
 800c11c:	0803949a 	.word	0x0803949a

0800c120 <fiprintf>:
 800c120:	b40e      	push	{r1, r2, r3}
 800c122:	b503      	push	{r0, r1, lr}
 800c124:	4601      	mov	r1, r0
 800c126:	ab03      	add	r3, sp, #12
 800c128:	4805      	ldr	r0, [pc, #20]	; (800c140 <fiprintf+0x20>)
 800c12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c12e:	6800      	ldr	r0, [r0, #0]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	f000 fbcd 	bl	800c8d0 <_vfiprintf_r>
 800c136:	b002      	add	sp, #8
 800c138:	f85d eb04 	ldr.w	lr, [sp], #4
 800c13c:	b003      	add	sp, #12
 800c13e:	4770      	bx	lr
 800c140:	200002c0 	.word	0x200002c0

0800c144 <__libc_init_array>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	4d0d      	ldr	r5, [pc, #52]	; (800c17c <__libc_init_array+0x38>)
 800c148:	4c0d      	ldr	r4, [pc, #52]	; (800c180 <__libc_init_array+0x3c>)
 800c14a:	1b64      	subs	r4, r4, r5
 800c14c:	10a4      	asrs	r4, r4, #2
 800c14e:	2600      	movs	r6, #0
 800c150:	42a6      	cmp	r6, r4
 800c152:	d109      	bne.n	800c168 <__libc_init_array+0x24>
 800c154:	4d0b      	ldr	r5, [pc, #44]	; (800c184 <__libc_init_array+0x40>)
 800c156:	4c0c      	ldr	r4, [pc, #48]	; (800c188 <__libc_init_array+0x44>)
 800c158:	f007 faf0 	bl	801373c <_init>
 800c15c:	1b64      	subs	r4, r4, r5
 800c15e:	10a4      	asrs	r4, r4, #2
 800c160:	2600      	movs	r6, #0
 800c162:	42a6      	cmp	r6, r4
 800c164:	d105      	bne.n	800c172 <__libc_init_array+0x2e>
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16c:	4798      	blx	r3
 800c16e:	3601      	adds	r6, #1
 800c170:	e7ee      	b.n	800c150 <__libc_init_array+0xc>
 800c172:	f855 3b04 	ldr.w	r3, [r5], #4
 800c176:	4798      	blx	r3
 800c178:	3601      	adds	r6, #1
 800c17a:	e7f2      	b.n	800c162 <__libc_init_array+0x1e>
 800c17c:	08039e48 	.word	0x08039e48
 800c180:	08039e48 	.word	0x08039e48
 800c184:	08039e48 	.word	0x08039e48
 800c188:	08039e4c 	.word	0x08039e4c

0800c18c <malloc>:
 800c18c:	4b02      	ldr	r3, [pc, #8]	; (800c198 <malloc+0xc>)
 800c18e:	4601      	mov	r1, r0
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	f000 baff 	b.w	800c794 <_malloc_r>
 800c196:	bf00      	nop
 800c198:	200002c0 	.word	0x200002c0

0800c19c <free>:
 800c19c:	4b02      	ldr	r3, [pc, #8]	; (800c1a8 <free+0xc>)
 800c19e:	4601      	mov	r1, r0
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	f000 ba8b 	b.w	800c6bc <_free_r>
 800c1a6:	bf00      	nop
 800c1a8:	200002c0 	.word	0x200002c0

0800c1ac <memcpy>:
 800c1ac:	440a      	add	r2, r1
 800c1ae:	4291      	cmp	r1, r2
 800c1b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1b4:	d100      	bne.n	800c1b8 <memcpy+0xc>
 800c1b6:	4770      	bx	lr
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1c2:	4291      	cmp	r1, r2
 800c1c4:	d1f9      	bne.n	800c1ba <memcpy+0xe>
 800c1c6:	bd10      	pop	{r4, pc}

0800c1c8 <memset>:
 800c1c8:	4402      	add	r2, r0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d100      	bne.n	800c1d2 <memset+0xa>
 800c1d0:	4770      	bx	lr
 800c1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1d6:	e7f9      	b.n	800c1cc <memset+0x4>

0800c1d8 <validate_structure>:
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1da:	6801      	ldr	r1, [r0, #0]
 800c1dc:	293b      	cmp	r1, #59	; 0x3b
 800c1de:	4604      	mov	r4, r0
 800c1e0:	d911      	bls.n	800c206 <validate_structure+0x2e>
 800c1e2:	223c      	movs	r2, #60	; 0x3c
 800c1e4:	4668      	mov	r0, sp
 800c1e6:	f002 faa5 	bl	800e734 <div>
 800c1ea:	9a01      	ldr	r2, [sp, #4]
 800c1ec:	6863      	ldr	r3, [r4, #4]
 800c1ee:	9900      	ldr	r1, [sp, #0]
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	440b      	add	r3, r1
 800c1f4:	6063      	str	r3, [r4, #4]
 800c1f6:	bfbb      	ittet	lt
 800c1f8:	323c      	addlt	r2, #60	; 0x3c
 800c1fa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1fe:	6022      	strge	r2, [r4, #0]
 800c200:	6022      	strlt	r2, [r4, #0]
 800c202:	bfb8      	it	lt
 800c204:	6063      	strlt	r3, [r4, #4]
 800c206:	6861      	ldr	r1, [r4, #4]
 800c208:	293b      	cmp	r1, #59	; 0x3b
 800c20a:	d911      	bls.n	800c230 <validate_structure+0x58>
 800c20c:	223c      	movs	r2, #60	; 0x3c
 800c20e:	4668      	mov	r0, sp
 800c210:	f002 fa90 	bl	800e734 <div>
 800c214:	9a01      	ldr	r2, [sp, #4]
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	9900      	ldr	r1, [sp, #0]
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	440b      	add	r3, r1
 800c21e:	60a3      	str	r3, [r4, #8]
 800c220:	bfbb      	ittet	lt
 800c222:	323c      	addlt	r2, #60	; 0x3c
 800c224:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c228:	6062      	strge	r2, [r4, #4]
 800c22a:	6062      	strlt	r2, [r4, #4]
 800c22c:	bfb8      	it	lt
 800c22e:	60a3      	strlt	r3, [r4, #8]
 800c230:	68a1      	ldr	r1, [r4, #8]
 800c232:	2917      	cmp	r1, #23
 800c234:	d911      	bls.n	800c25a <validate_structure+0x82>
 800c236:	2218      	movs	r2, #24
 800c238:	4668      	mov	r0, sp
 800c23a:	f002 fa7b 	bl	800e734 <div>
 800c23e:	9a01      	ldr	r2, [sp, #4]
 800c240:	68e3      	ldr	r3, [r4, #12]
 800c242:	9900      	ldr	r1, [sp, #0]
 800c244:	2a00      	cmp	r2, #0
 800c246:	440b      	add	r3, r1
 800c248:	60e3      	str	r3, [r4, #12]
 800c24a:	bfbb      	ittet	lt
 800c24c:	3218      	addlt	r2, #24
 800c24e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c252:	60a2      	strge	r2, [r4, #8]
 800c254:	60a2      	strlt	r2, [r4, #8]
 800c256:	bfb8      	it	lt
 800c258:	60e3      	strlt	r3, [r4, #12]
 800c25a:	6921      	ldr	r1, [r4, #16]
 800c25c:	290b      	cmp	r1, #11
 800c25e:	d911      	bls.n	800c284 <validate_structure+0xac>
 800c260:	220c      	movs	r2, #12
 800c262:	4668      	mov	r0, sp
 800c264:	f002 fa66 	bl	800e734 <div>
 800c268:	9a01      	ldr	r2, [sp, #4]
 800c26a:	6963      	ldr	r3, [r4, #20]
 800c26c:	9900      	ldr	r1, [sp, #0]
 800c26e:	2a00      	cmp	r2, #0
 800c270:	440b      	add	r3, r1
 800c272:	6163      	str	r3, [r4, #20]
 800c274:	bfbb      	ittet	lt
 800c276:	320c      	addlt	r2, #12
 800c278:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c27c:	6122      	strge	r2, [r4, #16]
 800c27e:	6122      	strlt	r2, [r4, #16]
 800c280:	bfb8      	it	lt
 800c282:	6163      	strlt	r3, [r4, #20]
 800c284:	6963      	ldr	r3, [r4, #20]
 800c286:	0798      	lsls	r0, r3, #30
 800c288:	d120      	bne.n	800c2cc <validate_structure+0xf4>
 800c28a:	2164      	movs	r1, #100	; 0x64
 800c28c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c290:	fb01 3212 	mls	r2, r1, r2, r3
 800c294:	b9e2      	cbnz	r2, 800c2d0 <validate_structure+0xf8>
 800c296:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c29a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c29e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c2a2:	fb02 3311 	mls	r3, r2, r1, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	bf14      	ite	ne
 800c2aa:	231c      	movne	r3, #28
 800c2ac:	231d      	moveq	r3, #29
 800c2ae:	68e2      	ldr	r2, [r4, #12]
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	dc0f      	bgt.n	800c2d4 <validate_structure+0xfc>
 800c2b4:	4f33      	ldr	r7, [pc, #204]	; (800c384 <validate_structure+0x1ac>)
 800c2b6:	260b      	movs	r6, #11
 800c2b8:	2064      	movs	r0, #100	; 0x64
 800c2ba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c2be:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c2c2:	f1bc 0f00 	cmp.w	ip, #0
 800c2c6:	dd31      	ble.n	800c32c <validate_structure+0x154>
 800c2c8:	b003      	add	sp, #12
 800c2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2cc:	231c      	movs	r3, #28
 800c2ce:	e7ee      	b.n	800c2ae <validate_structure+0xd6>
 800c2d0:	231d      	movs	r3, #29
 800c2d2:	e7ec      	b.n	800c2ae <validate_structure+0xd6>
 800c2d4:	4e2b      	ldr	r6, [pc, #172]	; (800c384 <validate_structure+0x1ac>)
 800c2d6:	2700      	movs	r7, #0
 800c2d8:	2064      	movs	r0, #100	; 0x64
 800c2da:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c2de:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c2e2:	2a01      	cmp	r2, #1
 800c2e4:	bf14      	ite	ne
 800c2e6:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c2ea:	469c      	moveq	ip, r3
 800c2ec:	4561      	cmp	r1, ip
 800c2ee:	ddeb      	ble.n	800c2c8 <validate_structure+0xf0>
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	eba1 010c 	sub.w	r1, r1, ip
 800c2f6:	2a0c      	cmp	r2, #12
 800c2f8:	60e1      	str	r1, [r4, #12]
 800c2fa:	6122      	str	r2, [r4, #16]
 800c2fc:	d1ef      	bne.n	800c2de <validate_structure+0x106>
 800c2fe:	6963      	ldr	r3, [r4, #20]
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	0791      	lsls	r1, r2, #30
 800c304:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c308:	d137      	bne.n	800c37a <validate_structure+0x1a2>
 800c30a:	fb92 f1f0 	sdiv	r1, r2, r0
 800c30e:	fb00 2211 	mls	r2, r0, r1, r2
 800c312:	2a00      	cmp	r2, #0
 800c314:	d133      	bne.n	800c37e <validate_structure+0x1a6>
 800c316:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c31a:	fb93 f2f5 	sdiv	r2, r3, r5
 800c31e:	fb05 3312 	mls	r3, r5, r2, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	bf14      	ite	ne
 800c326:	231c      	movne	r3, #28
 800c328:	231d      	moveq	r3, #29
 800c32a:	e7d8      	b.n	800c2de <validate_structure+0x106>
 800c32c:	6921      	ldr	r1, [r4, #16]
 800c32e:	3901      	subs	r1, #1
 800c330:	6121      	str	r1, [r4, #16]
 800c332:	3101      	adds	r1, #1
 800c334:	d114      	bne.n	800c360 <validate_structure+0x188>
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	1e5a      	subs	r2, r3, #1
 800c33a:	0791      	lsls	r1, r2, #30
 800c33c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c340:	d117      	bne.n	800c372 <validate_structure+0x19a>
 800c342:	fb92 f1f0 	sdiv	r1, r2, r0
 800c346:	fb00 2211 	mls	r2, r0, r1, r2
 800c34a:	b9a2      	cbnz	r2, 800c376 <validate_structure+0x19e>
 800c34c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c350:	fb93 f2f5 	sdiv	r2, r3, r5
 800c354:	fb05 3312 	mls	r3, r5, r2, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bf14      	ite	ne
 800c35c:	231c      	movne	r3, #28
 800c35e:	231d      	moveq	r3, #29
 800c360:	6922      	ldr	r2, [r4, #16]
 800c362:	2a01      	cmp	r2, #1
 800c364:	bf14      	ite	ne
 800c366:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c36a:	461a      	moveq	r2, r3
 800c36c:	4462      	add	r2, ip
 800c36e:	60e2      	str	r2, [r4, #12]
 800c370:	e7a5      	b.n	800c2be <validate_structure+0xe6>
 800c372:	231c      	movs	r3, #28
 800c374:	e7f4      	b.n	800c360 <validate_structure+0x188>
 800c376:	231d      	movs	r3, #29
 800c378:	e7f2      	b.n	800c360 <validate_structure+0x188>
 800c37a:	231c      	movs	r3, #28
 800c37c:	e7af      	b.n	800c2de <validate_structure+0x106>
 800c37e:	231d      	movs	r3, #29
 800c380:	e7ad      	b.n	800c2de <validate_structure+0x106>
 800c382:	bf00      	nop
 800c384:	08039514 	.word	0x08039514

0800c388 <mktime>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	b085      	sub	sp, #20
 800c38e:	4607      	mov	r7, r0
 800c390:	f003 fa5c 	bl	800f84c <__gettzinfo>
 800c394:	4681      	mov	r9, r0
 800c396:	4638      	mov	r0, r7
 800c398:	f7ff ff1e 	bl	800c1d8 <validate_structure>
 800c39c:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c3a0:	233c      	movs	r3, #60	; 0x3c
 800c3a2:	fb03 4400 	mla	r4, r3, r0, r4
 800c3a6:	68b8      	ldr	r0, [r7, #8]
 800c3a8:	4abc      	ldr	r2, [pc, #752]	; (800c69c <mktime+0x314>)
 800c3aa:	697e      	ldr	r6, [r7, #20]
 800c3ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c3b0:	fb03 4400 	mla	r4, r3, r0, r4
 800c3b4:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c3b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c3bc:	3d01      	subs	r5, #1
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	4415      	add	r5, r2
 800c3c2:	dd11      	ble.n	800c3e8 <mktime+0x60>
 800c3c4:	07b1      	lsls	r1, r6, #30
 800c3c6:	d10f      	bne.n	800c3e8 <mktime+0x60>
 800c3c8:	2264      	movs	r2, #100	; 0x64
 800c3ca:	fb96 f3f2 	sdiv	r3, r6, r2
 800c3ce:	fb02 6313 	mls	r3, r2, r3, r6
 800c3d2:	b943      	cbnz	r3, 800c3e6 <mktime+0x5e>
 800c3d4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c3d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c3dc:	fb93 f1f2 	sdiv	r1, r3, r2
 800c3e0:	fb02 3311 	mls	r3, r2, r1, r3
 800c3e4:	b903      	cbnz	r3, 800c3e8 <mktime+0x60>
 800c3e6:	3501      	adds	r5, #1
 800c3e8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c3ec:	3310      	adds	r3, #16
 800c3ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	61fd      	str	r5, [r7, #28]
 800c3f6:	f200 815d 	bhi.w	800c6b4 <mktime+0x32c>
 800c3fa:	2e46      	cmp	r6, #70	; 0x46
 800c3fc:	dd71      	ble.n	800c4e2 <mktime+0x15a>
 800c3fe:	2346      	movs	r3, #70	; 0x46
 800c400:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c404:	2164      	movs	r1, #100	; 0x64
 800c406:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c40a:	079a      	lsls	r2, r3, #30
 800c40c:	d163      	bne.n	800c4d6 <mktime+0x14e>
 800c40e:	fb93 f2f1 	sdiv	r2, r3, r1
 800c412:	fb01 3212 	mls	r2, r1, r2, r3
 800c416:	2a00      	cmp	r2, #0
 800c418:	d160      	bne.n	800c4dc <mktime+0x154>
 800c41a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c41e:	fb92 fef0 	sdiv	lr, r2, r0
 800c422:	fb00 221e 	mls	r2, r0, lr, r2
 800c426:	2a00      	cmp	r2, #0
 800c428:	bf14      	ite	ne
 800c42a:	4662      	movne	r2, ip
 800c42c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c430:	3301      	adds	r3, #1
 800c432:	429e      	cmp	r6, r3
 800c434:	4415      	add	r5, r2
 800c436:	d1e8      	bne.n	800c40a <mktime+0x82>
 800c438:	4b99      	ldr	r3, [pc, #612]	; (800c6a0 <mktime+0x318>)
 800c43a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c43e:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c442:	f001 fef7 	bl	800e234 <__tz_lock>
 800c446:	f001 ff01 	bl	800e24c <_tzset_unlocked>
 800c44a:	4b96      	ldr	r3, [pc, #600]	; (800c6a4 <mktime+0x31c>)
 800c44c:	f8d3 b000 	ldr.w	fp, [r3]
 800c450:	f1bb 0f00 	cmp.w	fp, #0
 800c454:	d039      	beq.n	800c4ca <mktime+0x142>
 800c456:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c45a:	6978      	ldr	r0, [r7, #20]
 800c45c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c460:	f1bb 0f01 	cmp.w	fp, #1
 800c464:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c468:	46da      	mov	sl, fp
 800c46a:	bfa8      	it	ge
 800c46c:	f04f 0a01 	movge.w	sl, #1
 800c470:	4283      	cmp	r3, r0
 800c472:	d178      	bne.n	800c566 <mktime+0x1de>
 800c474:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c478:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c47c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c480:	1a5b      	subs	r3, r3, r1
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c488:	9303      	str	r3, [sp, #12]
 800c48a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c48e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	ebb3 0c02 	subs.w	ip, r3, r2
 800c498:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c49c:	4564      	cmp	r4, ip
 800c49e:	eb78 0300 	sbcs.w	r3, r8, r0
 800c4a2:	da66      	bge.n	800c572 <mktime+0x1ea>
 800c4a4:	f8d9 3000 	ldr.w	r3, [r9]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d06f      	beq.n	800c58c <mktime+0x204>
 800c4ac:	9b02      	ldr	r3, [sp, #8]
 800c4ae:	429c      	cmp	r4, r3
 800c4b0:	9b03      	ldr	r3, [sp, #12]
 800c4b2:	eb78 0303 	sbcs.w	r3, r8, r3
 800c4b6:	db03      	blt.n	800c4c0 <mktime+0x138>
 800c4b8:	4564      	cmp	r4, ip
 800c4ba:	eb78 0300 	sbcs.w	r3, r8, r0
 800c4be:	db6b      	blt.n	800c598 <mktime+0x210>
 800c4c0:	f1bb 0f00 	cmp.w	fp, #0
 800c4c4:	f04f 0b00 	mov.w	fp, #0
 800c4c8:	da6b      	bge.n	800c5a2 <mktime+0x21a>
 800c4ca:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c4ce:	190c      	adds	r4, r1, r4
 800c4d0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c4d4:	e0a9      	b.n	800c62a <mktime+0x2a2>
 800c4d6:	f240 126d 	movw	r2, #365	; 0x16d
 800c4da:	e7a9      	b.n	800c430 <mktime+0xa8>
 800c4dc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c4e0:	e7a6      	b.n	800c430 <mktime+0xa8>
 800c4e2:	d0a9      	beq.n	800c438 <mktime+0xb0>
 800c4e4:	2345      	movs	r3, #69	; 0x45
 800c4e6:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c4ea:	2164      	movs	r1, #100	; 0x64
 800c4ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c4f0:	e012      	b.n	800c518 <mktime+0x190>
 800c4f2:	bb62      	cbnz	r2, 800c54e <mktime+0x1c6>
 800c4f4:	fb93 f2f1 	sdiv	r2, r3, r1
 800c4f8:	fb01 3212 	mls	r2, r1, r2, r3
 800c4fc:	bb52      	cbnz	r2, 800c554 <mktime+0x1cc>
 800c4fe:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c502:	fb92 fef0 	sdiv	lr, r2, r0
 800c506:	fb00 221e 	mls	r2, r0, lr, r2
 800c50a:	2a00      	cmp	r2, #0
 800c50c:	bf14      	ite	ne
 800c50e:	4662      	movne	r2, ip
 800c510:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c514:	1aad      	subs	r5, r5, r2
 800c516:	3b01      	subs	r3, #1
 800c518:	429e      	cmp	r6, r3
 800c51a:	f003 0203 	and.w	r2, r3, #3
 800c51e:	dbe8      	blt.n	800c4f2 <mktime+0x16a>
 800c520:	b9da      	cbnz	r2, 800c55a <mktime+0x1d2>
 800c522:	2264      	movs	r2, #100	; 0x64
 800c524:	fb96 f3f2 	sdiv	r3, r6, r2
 800c528:	fb02 6313 	mls	r3, r2, r3, r6
 800c52c:	b9c3      	cbnz	r3, 800c560 <mktime+0x1d8>
 800c52e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c532:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c536:	fb93 f1f2 	sdiv	r1, r3, r2
 800c53a:	fb02 3311 	mls	r3, r2, r1, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f240 136d 	movw	r3, #365	; 0x16d
 800c544:	bf08      	it	eq
 800c546:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c54a:	1aed      	subs	r5, r5, r3
 800c54c:	e774      	b.n	800c438 <mktime+0xb0>
 800c54e:	f240 126d 	movw	r2, #365	; 0x16d
 800c552:	e7df      	b.n	800c514 <mktime+0x18c>
 800c554:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c558:	e7dc      	b.n	800c514 <mktime+0x18c>
 800c55a:	f240 136d 	movw	r3, #365	; 0x16d
 800c55e:	e7f4      	b.n	800c54a <mktime+0x1c2>
 800c560:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c564:	e7f1      	b.n	800c54a <mktime+0x1c2>
 800c566:	f001 fdbb 	bl	800e0e0 <__tzcalc_limits>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d182      	bne.n	800c474 <mktime+0xec>
 800c56e:	46d3      	mov	fp, sl
 800c570:	e050      	b.n	800c614 <mktime+0x28c>
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	1a5b      	subs	r3, r3, r1
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c57c:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c580:	9b01      	ldr	r3, [sp, #4]
 800c582:	429c      	cmp	r4, r3
 800c584:	eb78 030e 	sbcs.w	r3, r8, lr
 800c588:	dbf1      	blt.n	800c56e <mktime+0x1e6>
 800c58a:	e78b      	b.n	800c4a4 <mktime+0x11c>
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	429c      	cmp	r4, r3
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	eb78 0303 	sbcs.w	r3, r8, r3
 800c596:	db8f      	blt.n	800c4b8 <mktime+0x130>
 800c598:	f1bb 0f00 	cmp.w	fp, #0
 800c59c:	db3e      	blt.n	800c61c <mktime+0x294>
 800c59e:	f04f 0b01 	mov.w	fp, #1
 800c5a2:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c5a6:	f1ba 0f01 	cmp.w	sl, #1
 800c5aa:	d133      	bne.n	800c614 <mktime+0x28c>
 800c5ac:	f1bb 0f00 	cmp.w	fp, #0
 800c5b0:	d04e      	beq.n	800c650 <mktime+0x2c8>
 800c5b2:	1a52      	subs	r2, r2, r1
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	1914      	adds	r4, r2, r4
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c5c6:	f7ff fe07 	bl	800c1d8 <validate_structure>
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	ebb2 020a 	subs.w	r2, r2, sl
 800c5d0:	d020      	beq.n	800c614 <mktime+0x28c>
 800c5d2:	2a01      	cmp	r2, #1
 800c5d4:	dc3e      	bgt.n	800c654 <mktime+0x2cc>
 800c5d6:	1c90      	adds	r0, r2, #2
 800c5d8:	bfd8      	it	le
 800c5da:	2201      	movle	r2, #1
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	18d3      	adds	r3, r2, r3
 800c5e0:	4415      	add	r5, r2
 800c5e2:	d540      	bpl.n	800c666 <mktime+0x2de>
 800c5e4:	1e73      	subs	r3, r6, #1
 800c5e6:	0799      	lsls	r1, r3, #30
 800c5e8:	d137      	bne.n	800c65a <mktime+0x2d2>
 800c5ea:	2264      	movs	r2, #100	; 0x64
 800c5ec:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5f0:	fb02 3311 	mls	r3, r2, r1, r3
 800c5f4:	bba3      	cbnz	r3, 800c660 <mktime+0x2d8>
 800c5f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c5fa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c5fe:	fb96 f2f3 	sdiv	r2, r6, r3
 800c602:	fb03 6612 	mls	r6, r3, r2, r6
 800c606:	2e00      	cmp	r6, #0
 800c608:	f240 136d 	movw	r3, #365	; 0x16d
 800c60c:	bf18      	it	ne
 800c60e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c612:	61fb      	str	r3, [r7, #28]
 800c614:	f1bb 0f01 	cmp.w	fp, #1
 800c618:	f47f af57 	bne.w	800c4ca <mktime+0x142>
 800c61c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c620:	190c      	adds	r4, r1, r4
 800c622:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c626:	f04f 0b01 	mov.w	fp, #1
 800c62a:	f001 fe09 	bl	800e240 <__tz_unlock>
 800c62e:	3504      	adds	r5, #4
 800c630:	2307      	movs	r3, #7
 800c632:	fb95 f3f3 	sdiv	r3, r5, r3
 800c636:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c63a:	1aed      	subs	r5, r5, r3
 800c63c:	bf48      	it	mi
 800c63e:	3507      	addmi	r5, #7
 800c640:	f8c7 b020 	str.w	fp, [r7, #32]
 800c644:	61bd      	str	r5, [r7, #24]
 800c646:	4620      	mov	r0, r4
 800c648:	4641      	mov	r1, r8
 800c64a:	b005      	add	sp, #20
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	1a8a      	subs	r2, r1, r2
 800c652:	e7af      	b.n	800c5b4 <mktime+0x22c>
 800c654:	f04f 32ff 	mov.w	r2, #4294967295
 800c658:	e7c0      	b.n	800c5dc <mktime+0x254>
 800c65a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c65e:	e7d8      	b.n	800c612 <mktime+0x28a>
 800c660:	f240 136d 	movw	r3, #365	; 0x16d
 800c664:	e7d5      	b.n	800c612 <mktime+0x28a>
 800c666:	07b2      	lsls	r2, r6, #30
 800c668:	d11e      	bne.n	800c6a8 <mktime+0x320>
 800c66a:	2164      	movs	r1, #100	; 0x64
 800c66c:	fb96 f2f1 	sdiv	r2, r6, r1
 800c670:	fb01 6212 	mls	r2, r1, r2, r6
 800c674:	b9da      	cbnz	r2, 800c6ae <mktime+0x326>
 800c676:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c67a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c67e:	fb96 f1f2 	sdiv	r1, r6, r2
 800c682:	fb02 6611 	mls	r6, r2, r1, r6
 800c686:	2e00      	cmp	r6, #0
 800c688:	f240 126d 	movw	r2, #365	; 0x16d
 800c68c:	bf08      	it	eq
 800c68e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c692:	4293      	cmp	r3, r2
 800c694:	bfa8      	it	ge
 800c696:	1a9b      	subge	r3, r3, r2
 800c698:	e7bb      	b.n	800c612 <mktime+0x28a>
 800c69a:	bf00      	nop
 800c69c:	08039544 	.word	0x08039544
 800c6a0:	00015180 	.word	0x00015180
 800c6a4:	20003a9c 	.word	0x20003a9c
 800c6a8:	f240 126d 	movw	r2, #365	; 0x16d
 800c6ac:	e7f1      	b.n	800c692 <mktime+0x30a>
 800c6ae:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c6b2:	e7ee      	b.n	800c692 <mktime+0x30a>
 800c6b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c6b8:	46a0      	mov	r8, r4
 800c6ba:	e7c4      	b.n	800c646 <mktime+0x2be>

0800c6bc <_free_r>:
 800c6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6be:	2900      	cmp	r1, #0
 800c6c0:	d044      	beq.n	800c74c <_free_r+0x90>
 800c6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c6:	9001      	str	r0, [sp, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ce:	bfb8      	it	lt
 800c6d0:	18e4      	addlt	r4, r4, r3
 800c6d2:	f003 f95f 	bl	800f994 <__malloc_lock>
 800c6d6:	4a1e      	ldr	r2, [pc, #120]	; (800c750 <_free_r+0x94>)
 800c6d8:	9801      	ldr	r0, [sp, #4]
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	b933      	cbnz	r3, 800c6ec <_free_r+0x30>
 800c6de:	6063      	str	r3, [r4, #4]
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	b003      	add	sp, #12
 800c6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e8:	f003 b95a 	b.w	800f9a0 <__malloc_unlock>
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	d908      	bls.n	800c702 <_free_r+0x46>
 800c6f0:	6825      	ldr	r5, [r4, #0]
 800c6f2:	1961      	adds	r1, r4, r5
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	bf01      	itttt	eq
 800c6f8:	6819      	ldreq	r1, [r3, #0]
 800c6fa:	685b      	ldreq	r3, [r3, #4]
 800c6fc:	1949      	addeq	r1, r1, r5
 800c6fe:	6021      	streq	r1, [r4, #0]
 800c700:	e7ed      	b.n	800c6de <_free_r+0x22>
 800c702:	461a      	mov	r2, r3
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	b10b      	cbz	r3, 800c70c <_free_r+0x50>
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d9fa      	bls.n	800c702 <_free_r+0x46>
 800c70c:	6811      	ldr	r1, [r2, #0]
 800c70e:	1855      	adds	r5, r2, r1
 800c710:	42a5      	cmp	r5, r4
 800c712:	d10b      	bne.n	800c72c <_free_r+0x70>
 800c714:	6824      	ldr	r4, [r4, #0]
 800c716:	4421      	add	r1, r4
 800c718:	1854      	adds	r4, r2, r1
 800c71a:	42a3      	cmp	r3, r4
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	d1e0      	bne.n	800c6e2 <_free_r+0x26>
 800c720:	681c      	ldr	r4, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	6053      	str	r3, [r2, #4]
 800c726:	4421      	add	r1, r4
 800c728:	6011      	str	r1, [r2, #0]
 800c72a:	e7da      	b.n	800c6e2 <_free_r+0x26>
 800c72c:	d902      	bls.n	800c734 <_free_r+0x78>
 800c72e:	230c      	movs	r3, #12
 800c730:	6003      	str	r3, [r0, #0]
 800c732:	e7d6      	b.n	800c6e2 <_free_r+0x26>
 800c734:	6825      	ldr	r5, [r4, #0]
 800c736:	1961      	adds	r1, r4, r5
 800c738:	428b      	cmp	r3, r1
 800c73a:	bf04      	itt	eq
 800c73c:	6819      	ldreq	r1, [r3, #0]
 800c73e:	685b      	ldreq	r3, [r3, #4]
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	bf04      	itt	eq
 800c744:	1949      	addeq	r1, r1, r5
 800c746:	6021      	streq	r1, [r4, #0]
 800c748:	6054      	str	r4, [r2, #4]
 800c74a:	e7ca      	b.n	800c6e2 <_free_r+0x26>
 800c74c:	b003      	add	sp, #12
 800c74e:	bd30      	pop	{r4, r5, pc}
 800c750:	20003a78 	.word	0x20003a78

0800c754 <sbrk_aligned>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	4e0e      	ldr	r6, [pc, #56]	; (800c790 <sbrk_aligned+0x3c>)
 800c758:	460c      	mov	r4, r1
 800c75a:	6831      	ldr	r1, [r6, #0]
 800c75c:	4605      	mov	r5, r0
 800c75e:	b911      	cbnz	r1, 800c766 <sbrk_aligned+0x12>
 800c760:	f000 fe50 	bl	800d404 <_sbrk_r>
 800c764:	6030      	str	r0, [r6, #0]
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 fe4b 	bl	800d404 <_sbrk_r>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d00a      	beq.n	800c788 <sbrk_aligned+0x34>
 800c772:	1cc4      	adds	r4, r0, #3
 800c774:	f024 0403 	bic.w	r4, r4, #3
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d007      	beq.n	800c78c <sbrk_aligned+0x38>
 800c77c:	1a21      	subs	r1, r4, r0
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 fe40 	bl	800d404 <_sbrk_r>
 800c784:	3001      	adds	r0, #1
 800c786:	d101      	bne.n	800c78c <sbrk_aligned+0x38>
 800c788:	f04f 34ff 	mov.w	r4, #4294967295
 800c78c:	4620      	mov	r0, r4
 800c78e:	bd70      	pop	{r4, r5, r6, pc}
 800c790:	20003a7c 	.word	0x20003a7c

0800c794 <_malloc_r>:
 800c794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c798:	1ccd      	adds	r5, r1, #3
 800c79a:	f025 0503 	bic.w	r5, r5, #3
 800c79e:	3508      	adds	r5, #8
 800c7a0:	2d0c      	cmp	r5, #12
 800c7a2:	bf38      	it	cc
 800c7a4:	250c      	movcc	r5, #12
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	db01      	blt.n	800c7b0 <_malloc_r+0x1c>
 800c7ac:	42a9      	cmp	r1, r5
 800c7ae:	d905      	bls.n	800c7bc <_malloc_r+0x28>
 800c7b0:	230c      	movs	r3, #12
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	2600      	movs	r6, #0
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	4e2e      	ldr	r6, [pc, #184]	; (800c878 <_malloc_r+0xe4>)
 800c7be:	f003 f8e9 	bl	800f994 <__malloc_lock>
 800c7c2:	6833      	ldr	r3, [r6, #0]
 800c7c4:	461c      	mov	r4, r3
 800c7c6:	bb34      	cbnz	r4, 800c816 <_malloc_r+0x82>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	f7ff ffc2 	bl	800c754 <sbrk_aligned>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	d14d      	bne.n	800c872 <_malloc_r+0xde>
 800c7d6:	6834      	ldr	r4, [r6, #0]
 800c7d8:	4626      	mov	r6, r4
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d140      	bne.n	800c860 <_malloc_r+0xcc>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	eb04 0803 	add.w	r8, r4, r3
 800c7e8:	f000 fe0c 	bl	800d404 <_sbrk_r>
 800c7ec:	4580      	cmp	r8, r0
 800c7ee:	d13a      	bne.n	800c866 <_malloc_r+0xd2>
 800c7f0:	6821      	ldr	r1, [r4, #0]
 800c7f2:	3503      	adds	r5, #3
 800c7f4:	1a6d      	subs	r5, r5, r1
 800c7f6:	f025 0503 	bic.w	r5, r5, #3
 800c7fa:	3508      	adds	r5, #8
 800c7fc:	2d0c      	cmp	r5, #12
 800c7fe:	bf38      	it	cc
 800c800:	250c      	movcc	r5, #12
 800c802:	4629      	mov	r1, r5
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff ffa5 	bl	800c754 <sbrk_aligned>
 800c80a:	3001      	adds	r0, #1
 800c80c:	d02b      	beq.n	800c866 <_malloc_r+0xd2>
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	442b      	add	r3, r5
 800c812:	6023      	str	r3, [r4, #0]
 800c814:	e00e      	b.n	800c834 <_malloc_r+0xa0>
 800c816:	6822      	ldr	r2, [r4, #0]
 800c818:	1b52      	subs	r2, r2, r5
 800c81a:	d41e      	bmi.n	800c85a <_malloc_r+0xc6>
 800c81c:	2a0b      	cmp	r2, #11
 800c81e:	d916      	bls.n	800c84e <_malloc_r+0xba>
 800c820:	1961      	adds	r1, r4, r5
 800c822:	42a3      	cmp	r3, r4
 800c824:	6025      	str	r5, [r4, #0]
 800c826:	bf18      	it	ne
 800c828:	6059      	strne	r1, [r3, #4]
 800c82a:	6863      	ldr	r3, [r4, #4]
 800c82c:	bf08      	it	eq
 800c82e:	6031      	streq	r1, [r6, #0]
 800c830:	5162      	str	r2, [r4, r5]
 800c832:	604b      	str	r3, [r1, #4]
 800c834:	4638      	mov	r0, r7
 800c836:	f104 060b 	add.w	r6, r4, #11
 800c83a:	f003 f8b1 	bl	800f9a0 <__malloc_unlock>
 800c83e:	f026 0607 	bic.w	r6, r6, #7
 800c842:	1d23      	adds	r3, r4, #4
 800c844:	1af2      	subs	r2, r6, r3
 800c846:	d0b6      	beq.n	800c7b6 <_malloc_r+0x22>
 800c848:	1b9b      	subs	r3, r3, r6
 800c84a:	50a3      	str	r3, [r4, r2]
 800c84c:	e7b3      	b.n	800c7b6 <_malloc_r+0x22>
 800c84e:	6862      	ldr	r2, [r4, #4]
 800c850:	42a3      	cmp	r3, r4
 800c852:	bf0c      	ite	eq
 800c854:	6032      	streq	r2, [r6, #0]
 800c856:	605a      	strne	r2, [r3, #4]
 800c858:	e7ec      	b.n	800c834 <_malloc_r+0xa0>
 800c85a:	4623      	mov	r3, r4
 800c85c:	6864      	ldr	r4, [r4, #4]
 800c85e:	e7b2      	b.n	800c7c6 <_malloc_r+0x32>
 800c860:	4634      	mov	r4, r6
 800c862:	6876      	ldr	r6, [r6, #4]
 800c864:	e7b9      	b.n	800c7da <_malloc_r+0x46>
 800c866:	230c      	movs	r3, #12
 800c868:	603b      	str	r3, [r7, #0]
 800c86a:	4638      	mov	r0, r7
 800c86c:	f003 f898 	bl	800f9a0 <__malloc_unlock>
 800c870:	e7a1      	b.n	800c7b6 <_malloc_r+0x22>
 800c872:	6025      	str	r5, [r4, #0]
 800c874:	e7de      	b.n	800c834 <_malloc_r+0xa0>
 800c876:	bf00      	nop
 800c878:	20003a78 	.word	0x20003a78

0800c87c <__sfputc_r>:
 800c87c:	6893      	ldr	r3, [r2, #8]
 800c87e:	3b01      	subs	r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	b410      	push	{r4}
 800c884:	6093      	str	r3, [r2, #8]
 800c886:	da08      	bge.n	800c89a <__sfputc_r+0x1e>
 800c888:	6994      	ldr	r4, [r2, #24]
 800c88a:	42a3      	cmp	r3, r4
 800c88c:	db01      	blt.n	800c892 <__sfputc_r+0x16>
 800c88e:	290a      	cmp	r1, #10
 800c890:	d103      	bne.n	800c89a <__sfputc_r+0x1e>
 800c892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c896:	f001 be5f 	b.w	800e558 <__swbuf_r>
 800c89a:	6813      	ldr	r3, [r2, #0]
 800c89c:	1c58      	adds	r0, r3, #1
 800c89e:	6010      	str	r0, [r2, #0]
 800c8a0:	7019      	strb	r1, [r3, #0]
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <__sfputs_r>:
 800c8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	18d5      	adds	r5, r2, r3
 800c8b4:	42ac      	cmp	r4, r5
 800c8b6:	d101      	bne.n	800c8bc <__sfputs_r+0x12>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	e007      	b.n	800c8cc <__sfputs_r+0x22>
 800c8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c0:	463a      	mov	r2, r7
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ffda 	bl	800c87c <__sfputc_r>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d1f3      	bne.n	800c8b4 <__sfputs_r+0xa>
 800c8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8d0 <_vfiprintf_r>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	b09d      	sub	sp, #116	; 0x74
 800c8d8:	4614      	mov	r4, r2
 800c8da:	4698      	mov	r8, r3
 800c8dc:	4606      	mov	r6, r0
 800c8de:	b118      	cbz	r0, 800c8e8 <_vfiprintf_r+0x18>
 800c8e0:	6983      	ldr	r3, [r0, #24]
 800c8e2:	b90b      	cbnz	r3, 800c8e8 <_vfiprintf_r+0x18>
 800c8e4:	f002 fed0 	bl	800f688 <__sinit>
 800c8e8:	4b89      	ldr	r3, [pc, #548]	; (800cb10 <_vfiprintf_r+0x240>)
 800c8ea:	429d      	cmp	r5, r3
 800c8ec:	d11b      	bne.n	800c926 <_vfiprintf_r+0x56>
 800c8ee:	6875      	ldr	r5, [r6, #4]
 800c8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f2:	07d9      	lsls	r1, r3, #31
 800c8f4:	d405      	bmi.n	800c902 <_vfiprintf_r+0x32>
 800c8f6:	89ab      	ldrh	r3, [r5, #12]
 800c8f8:	059a      	lsls	r2, r3, #22
 800c8fa:	d402      	bmi.n	800c902 <_vfiprintf_r+0x32>
 800c8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8fe:	f002 ffb3 	bl	800f868 <__retarget_lock_acquire_recursive>
 800c902:	89ab      	ldrh	r3, [r5, #12]
 800c904:	071b      	lsls	r3, r3, #28
 800c906:	d501      	bpl.n	800c90c <_vfiprintf_r+0x3c>
 800c908:	692b      	ldr	r3, [r5, #16]
 800c90a:	b9eb      	cbnz	r3, 800c948 <_vfiprintf_r+0x78>
 800c90c:	4629      	mov	r1, r5
 800c90e:	4630      	mov	r0, r6
 800c910:	f001 fe86 	bl	800e620 <__swsetup_r>
 800c914:	b1c0      	cbz	r0, 800c948 <_vfiprintf_r+0x78>
 800c916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c918:	07dc      	lsls	r4, r3, #31
 800c91a:	d50e      	bpl.n	800c93a <_vfiprintf_r+0x6a>
 800c91c:	f04f 30ff 	mov.w	r0, #4294967295
 800c920:	b01d      	add	sp, #116	; 0x74
 800c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c926:	4b7b      	ldr	r3, [pc, #492]	; (800cb14 <_vfiprintf_r+0x244>)
 800c928:	429d      	cmp	r5, r3
 800c92a:	d101      	bne.n	800c930 <_vfiprintf_r+0x60>
 800c92c:	68b5      	ldr	r5, [r6, #8]
 800c92e:	e7df      	b.n	800c8f0 <_vfiprintf_r+0x20>
 800c930:	4b79      	ldr	r3, [pc, #484]	; (800cb18 <_vfiprintf_r+0x248>)
 800c932:	429d      	cmp	r5, r3
 800c934:	bf08      	it	eq
 800c936:	68f5      	ldreq	r5, [r6, #12]
 800c938:	e7da      	b.n	800c8f0 <_vfiprintf_r+0x20>
 800c93a:	89ab      	ldrh	r3, [r5, #12]
 800c93c:	0598      	lsls	r0, r3, #22
 800c93e:	d4ed      	bmi.n	800c91c <_vfiprintf_r+0x4c>
 800c940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c942:	f002 ff93 	bl	800f86c <__retarget_lock_release_recursive>
 800c946:	e7e9      	b.n	800c91c <_vfiprintf_r+0x4c>
 800c948:	2300      	movs	r3, #0
 800c94a:	9309      	str	r3, [sp, #36]	; 0x24
 800c94c:	2320      	movs	r3, #32
 800c94e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c952:	f8cd 800c 	str.w	r8, [sp, #12]
 800c956:	2330      	movs	r3, #48	; 0x30
 800c958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb1c <_vfiprintf_r+0x24c>
 800c95c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c960:	f04f 0901 	mov.w	r9, #1
 800c964:	4623      	mov	r3, r4
 800c966:	469a      	mov	sl, r3
 800c968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c96c:	b10a      	cbz	r2, 800c972 <_vfiprintf_r+0xa2>
 800c96e:	2a25      	cmp	r2, #37	; 0x25
 800c970:	d1f9      	bne.n	800c966 <_vfiprintf_r+0x96>
 800c972:	ebba 0b04 	subs.w	fp, sl, r4
 800c976:	d00b      	beq.n	800c990 <_vfiprintf_r+0xc0>
 800c978:	465b      	mov	r3, fp
 800c97a:	4622      	mov	r2, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	4630      	mov	r0, r6
 800c980:	f7ff ff93 	bl	800c8aa <__sfputs_r>
 800c984:	3001      	adds	r0, #1
 800c986:	f000 80aa 	beq.w	800cade <_vfiprintf_r+0x20e>
 800c98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c98c:	445a      	add	r2, fp
 800c98e:	9209      	str	r2, [sp, #36]	; 0x24
 800c990:	f89a 3000 	ldrb.w	r3, [sl]
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 80a2 	beq.w	800cade <_vfiprintf_r+0x20e>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a4:	f10a 0a01 	add.w	sl, sl, #1
 800c9a8:	9304      	str	r3, [sp, #16]
 800c9aa:	9307      	str	r3, [sp, #28]
 800c9ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c9b2:	4654      	mov	r4, sl
 800c9b4:	2205      	movs	r2, #5
 800c9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ba:	4858      	ldr	r0, [pc, #352]	; (800cb1c <_vfiprintf_r+0x24c>)
 800c9bc:	f7f3 fc20 	bl	8000200 <memchr>
 800c9c0:	9a04      	ldr	r2, [sp, #16]
 800c9c2:	b9d8      	cbnz	r0, 800c9fc <_vfiprintf_r+0x12c>
 800c9c4:	06d1      	lsls	r1, r2, #27
 800c9c6:	bf44      	itt	mi
 800c9c8:	2320      	movmi	r3, #32
 800c9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9ce:	0713      	lsls	r3, r2, #28
 800c9d0:	bf44      	itt	mi
 800c9d2:	232b      	movmi	r3, #43	; 0x2b
 800c9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9de:	d015      	beq.n	800ca0c <_vfiprintf_r+0x13c>
 800c9e0:	9a07      	ldr	r2, [sp, #28]
 800c9e2:	4654      	mov	r4, sl
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f04f 0c0a 	mov.w	ip, #10
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f0:	3b30      	subs	r3, #48	; 0x30
 800c9f2:	2b09      	cmp	r3, #9
 800c9f4:	d94e      	bls.n	800ca94 <_vfiprintf_r+0x1c4>
 800c9f6:	b1b0      	cbz	r0, 800ca26 <_vfiprintf_r+0x156>
 800c9f8:	9207      	str	r2, [sp, #28]
 800c9fa:	e014      	b.n	800ca26 <_vfiprintf_r+0x156>
 800c9fc:	eba0 0308 	sub.w	r3, r0, r8
 800ca00:	fa09 f303 	lsl.w	r3, r9, r3
 800ca04:	4313      	orrs	r3, r2
 800ca06:	9304      	str	r3, [sp, #16]
 800ca08:	46a2      	mov	sl, r4
 800ca0a:	e7d2      	b.n	800c9b2 <_vfiprintf_r+0xe2>
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	1d19      	adds	r1, r3, #4
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	9103      	str	r1, [sp, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	bfbb      	ittet	lt
 800ca18:	425b      	neglt	r3, r3
 800ca1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca1e:	9307      	strge	r3, [sp, #28]
 800ca20:	9307      	strlt	r3, [sp, #28]
 800ca22:	bfb8      	it	lt
 800ca24:	9204      	strlt	r2, [sp, #16]
 800ca26:	7823      	ldrb	r3, [r4, #0]
 800ca28:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2a:	d10c      	bne.n	800ca46 <_vfiprintf_r+0x176>
 800ca2c:	7863      	ldrb	r3, [r4, #1]
 800ca2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca30:	d135      	bne.n	800ca9e <_vfiprintf_r+0x1ce>
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	1d1a      	adds	r2, r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	9203      	str	r2, [sp, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bfb8      	it	lt
 800ca3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca42:	3402      	adds	r4, #2
 800ca44:	9305      	str	r3, [sp, #20]
 800ca46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb2c <_vfiprintf_r+0x25c>
 800ca4a:	7821      	ldrb	r1, [r4, #0]
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7f3 fbd6 	bl	8000200 <memchr>
 800ca54:	b140      	cbz	r0, 800ca68 <_vfiprintf_r+0x198>
 800ca56:	2340      	movs	r3, #64	; 0x40
 800ca58:	eba0 000a 	sub.w	r0, r0, sl
 800ca5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ca60:	9b04      	ldr	r3, [sp, #16]
 800ca62:	4303      	orrs	r3, r0
 800ca64:	3401      	adds	r4, #1
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6c:	482c      	ldr	r0, [pc, #176]	; (800cb20 <_vfiprintf_r+0x250>)
 800ca6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca72:	2206      	movs	r2, #6
 800ca74:	f7f3 fbc4 	bl	8000200 <memchr>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d03f      	beq.n	800cafc <_vfiprintf_r+0x22c>
 800ca7c:	4b29      	ldr	r3, [pc, #164]	; (800cb24 <_vfiprintf_r+0x254>)
 800ca7e:	bb1b      	cbnz	r3, 800cac8 <_vfiprintf_r+0x1f8>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	3307      	adds	r3, #7
 800ca84:	f023 0307 	bic.w	r3, r3, #7
 800ca88:	3308      	adds	r3, #8
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8e:	443b      	add	r3, r7
 800ca90:	9309      	str	r3, [sp, #36]	; 0x24
 800ca92:	e767      	b.n	800c964 <_vfiprintf_r+0x94>
 800ca94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca98:	460c      	mov	r4, r1
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7a5      	b.n	800c9ea <_vfiprintf_r+0x11a>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	3401      	adds	r4, #1
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0c0a 	mov.w	ip, #10
 800caaa:	4620      	mov	r0, r4
 800caac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab0:	3a30      	subs	r2, #48	; 0x30
 800cab2:	2a09      	cmp	r2, #9
 800cab4:	d903      	bls.n	800cabe <_vfiprintf_r+0x1ee>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0c5      	beq.n	800ca46 <_vfiprintf_r+0x176>
 800caba:	9105      	str	r1, [sp, #20]
 800cabc:	e7c3      	b.n	800ca46 <_vfiprintf_r+0x176>
 800cabe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac2:	4604      	mov	r4, r0
 800cac4:	2301      	movs	r3, #1
 800cac6:	e7f0      	b.n	800caaa <_vfiprintf_r+0x1da>
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	462a      	mov	r2, r5
 800cace:	4b16      	ldr	r3, [pc, #88]	; (800cb28 <_vfiprintf_r+0x258>)
 800cad0:	a904      	add	r1, sp, #16
 800cad2:	4630      	mov	r0, r6
 800cad4:	f000 f8cc 	bl	800cc70 <_printf_float>
 800cad8:	4607      	mov	r7, r0
 800cada:	1c78      	adds	r0, r7, #1
 800cadc:	d1d6      	bne.n	800ca8c <_vfiprintf_r+0x1bc>
 800cade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae0:	07d9      	lsls	r1, r3, #31
 800cae2:	d405      	bmi.n	800caf0 <_vfiprintf_r+0x220>
 800cae4:	89ab      	ldrh	r3, [r5, #12]
 800cae6:	059a      	lsls	r2, r3, #22
 800cae8:	d402      	bmi.n	800caf0 <_vfiprintf_r+0x220>
 800caea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caec:	f002 febe 	bl	800f86c <__retarget_lock_release_recursive>
 800caf0:	89ab      	ldrh	r3, [r5, #12]
 800caf2:	065b      	lsls	r3, r3, #25
 800caf4:	f53f af12 	bmi.w	800c91c <_vfiprintf_r+0x4c>
 800caf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cafa:	e711      	b.n	800c920 <_vfiprintf_r+0x50>
 800cafc:	ab03      	add	r3, sp, #12
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	462a      	mov	r2, r5
 800cb02:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <_vfiprintf_r+0x258>)
 800cb04:	a904      	add	r1, sp, #16
 800cb06:	4630      	mov	r0, r6
 800cb08:	f000 fb56 	bl	800d1b8 <_printf_i>
 800cb0c:	e7e4      	b.n	800cad8 <_vfiprintf_r+0x208>
 800cb0e:	bf00      	nop
 800cb10:	08039a10 	.word	0x08039a10
 800cb14:	08039a30 	.word	0x08039a30
 800cb18:	080399f0 	.word	0x080399f0
 800cb1c:	08039574 	.word	0x08039574
 800cb20:	0803957e 	.word	0x0803957e
 800cb24:	0800cc71 	.word	0x0800cc71
 800cb28:	0800c8ab 	.word	0x0800c8ab
 800cb2c:	0803957a 	.word	0x0803957a

0800cb30 <__cvt>:
 800cb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	ec55 4b10 	vmov	r4, r5, d0
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	460e      	mov	r6, r1
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	462b      	mov	r3, r5
 800cb40:	bfbb      	ittet	lt
 800cb42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb46:	461d      	movlt	r5, r3
 800cb48:	2300      	movge	r3, #0
 800cb4a:	232d      	movlt	r3, #45	; 0x2d
 800cb4c:	700b      	strb	r3, [r1, #0]
 800cb4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb54:	4691      	mov	r9, r2
 800cb56:	f023 0820 	bic.w	r8, r3, #32
 800cb5a:	bfbc      	itt	lt
 800cb5c:	4622      	movlt	r2, r4
 800cb5e:	4614      	movlt	r4, r2
 800cb60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb64:	d005      	beq.n	800cb72 <__cvt+0x42>
 800cb66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb6a:	d100      	bne.n	800cb6e <__cvt+0x3e>
 800cb6c:	3601      	adds	r6, #1
 800cb6e:	2102      	movs	r1, #2
 800cb70:	e000      	b.n	800cb74 <__cvt+0x44>
 800cb72:	2103      	movs	r1, #3
 800cb74:	ab03      	add	r3, sp, #12
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	ab02      	add	r3, sp, #8
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	ec45 4b10 	vmov	d0, r4, r5
 800cb80:	4653      	mov	r3, sl
 800cb82:	4632      	mov	r2, r6
 800cb84:	f001 fe78 	bl	800e878 <_dtoa_r>
 800cb88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	d102      	bne.n	800cb96 <__cvt+0x66>
 800cb90:	f019 0f01 	tst.w	r9, #1
 800cb94:	d022      	beq.n	800cbdc <__cvt+0xac>
 800cb96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb9a:	eb07 0906 	add.w	r9, r7, r6
 800cb9e:	d110      	bne.n	800cbc2 <__cvt+0x92>
 800cba0:	783b      	ldrb	r3, [r7, #0]
 800cba2:	2b30      	cmp	r3, #48	; 0x30
 800cba4:	d10a      	bne.n	800cbbc <__cvt+0x8c>
 800cba6:	2200      	movs	r2, #0
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 ffa5 	bl	8000afc <__aeabi_dcmpeq>
 800cbb2:	b918      	cbnz	r0, 800cbbc <__cvt+0x8c>
 800cbb4:	f1c6 0601 	rsb	r6, r6, #1
 800cbb8:	f8ca 6000 	str.w	r6, [sl]
 800cbbc:	f8da 3000 	ldr.w	r3, [sl]
 800cbc0:	4499      	add	r9, r3
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 ff97 	bl	8000afc <__aeabi_dcmpeq>
 800cbce:	b108      	cbz	r0, 800cbd4 <__cvt+0xa4>
 800cbd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbd4:	2230      	movs	r2, #48	; 0x30
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	454b      	cmp	r3, r9
 800cbda:	d307      	bcc.n	800cbec <__cvt+0xbc>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbe0:	1bdb      	subs	r3, r3, r7
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	b004      	add	sp, #16
 800cbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbec:	1c59      	adds	r1, r3, #1
 800cbee:	9103      	str	r1, [sp, #12]
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	e7f0      	b.n	800cbd6 <__cvt+0xa6>

0800cbf4 <__exponent>:
 800cbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	bfb8      	it	lt
 800cbfc:	4249      	neglt	r1, r1
 800cbfe:	f803 2b02 	strb.w	r2, [r3], #2
 800cc02:	bfb4      	ite	lt
 800cc04:	222d      	movlt	r2, #45	; 0x2d
 800cc06:	222b      	movge	r2, #43	; 0x2b
 800cc08:	2909      	cmp	r1, #9
 800cc0a:	7042      	strb	r2, [r0, #1]
 800cc0c:	dd2a      	ble.n	800cc64 <__exponent+0x70>
 800cc0e:	f10d 0407 	add.w	r4, sp, #7
 800cc12:	46a4      	mov	ip, r4
 800cc14:	270a      	movs	r7, #10
 800cc16:	46a6      	mov	lr, r4
 800cc18:	460a      	mov	r2, r1
 800cc1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc1e:	fb07 1516 	mls	r5, r7, r6, r1
 800cc22:	3530      	adds	r5, #48	; 0x30
 800cc24:	2a63      	cmp	r2, #99	; 0x63
 800cc26:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc2e:	4631      	mov	r1, r6
 800cc30:	dcf1      	bgt.n	800cc16 <__exponent+0x22>
 800cc32:	3130      	adds	r1, #48	; 0x30
 800cc34:	f1ae 0502 	sub.w	r5, lr, #2
 800cc38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc3c:	1c44      	adds	r4, r0, #1
 800cc3e:	4629      	mov	r1, r5
 800cc40:	4561      	cmp	r1, ip
 800cc42:	d30a      	bcc.n	800cc5a <__exponent+0x66>
 800cc44:	f10d 0209 	add.w	r2, sp, #9
 800cc48:	eba2 020e 	sub.w	r2, r2, lr
 800cc4c:	4565      	cmp	r5, ip
 800cc4e:	bf88      	it	hi
 800cc50:	2200      	movhi	r2, #0
 800cc52:	4413      	add	r3, r2
 800cc54:	1a18      	subs	r0, r3, r0
 800cc56:	b003      	add	sp, #12
 800cc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc62:	e7ed      	b.n	800cc40 <__exponent+0x4c>
 800cc64:	2330      	movs	r3, #48	; 0x30
 800cc66:	3130      	adds	r1, #48	; 0x30
 800cc68:	7083      	strb	r3, [r0, #2]
 800cc6a:	70c1      	strb	r1, [r0, #3]
 800cc6c:	1d03      	adds	r3, r0, #4
 800cc6e:	e7f1      	b.n	800cc54 <__exponent+0x60>

0800cc70 <_printf_float>:
 800cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	ed2d 8b02 	vpush	{d8}
 800cc78:	b08d      	sub	sp, #52	; 0x34
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc80:	4616      	mov	r6, r2
 800cc82:	461f      	mov	r7, r3
 800cc84:	4605      	mov	r5, r0
 800cc86:	f002 fde9 	bl	800f85c <_localeconv_r>
 800cc8a:	f8d0 a000 	ldr.w	sl, [r0]
 800cc8e:	4650      	mov	r0, sl
 800cc90:	f7f3 faae 	bl	80001f0 <strlen>
 800cc94:	2300      	movs	r3, #0
 800cc96:	930a      	str	r3, [sp, #40]	; 0x28
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	9305      	str	r3, [sp, #20]
 800cc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cca4:	3307      	adds	r3, #7
 800cca6:	f023 0307 	bic.w	r3, r3, #7
 800ccaa:	f103 0208 	add.w	r2, r3, #8
 800ccae:	f8c8 2000 	str.w	r2, [r8]
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ccba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ccbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccc2:	9307      	str	r3, [sp, #28]
 800ccc4:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccc8:	ee08 0a10 	vmov	s16, r0
 800cccc:	4b9f      	ldr	r3, [pc, #636]	; (800cf4c <_printf_float+0x2dc>)
 800ccce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	f7f3 ff43 	bl	8000b60 <__aeabi_dcmpun>
 800ccda:	bb88      	cbnz	r0, 800cd40 <_printf_float+0xd0>
 800ccdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cce0:	4b9a      	ldr	r3, [pc, #616]	; (800cf4c <_printf_float+0x2dc>)
 800cce2:	f04f 32ff 	mov.w	r2, #4294967295
 800cce6:	f7f3 ff1d 	bl	8000b24 <__aeabi_dcmple>
 800ccea:	bb48      	cbnz	r0, 800cd40 <_printf_float+0xd0>
 800ccec:	2200      	movs	r2, #0
 800ccee:	2300      	movs	r3, #0
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	f7f3 ff0c 	bl	8000b10 <__aeabi_dcmplt>
 800ccf8:	b110      	cbz	r0, 800cd00 <_printf_float+0x90>
 800ccfa:	232d      	movs	r3, #45	; 0x2d
 800ccfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd00:	4b93      	ldr	r3, [pc, #588]	; (800cf50 <_printf_float+0x2e0>)
 800cd02:	4894      	ldr	r0, [pc, #592]	; (800cf54 <_printf_float+0x2e4>)
 800cd04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cd08:	bf94      	ite	ls
 800cd0a:	4698      	movls	r8, r3
 800cd0c:	4680      	movhi	r8, r0
 800cd0e:	2303      	movs	r3, #3
 800cd10:	6123      	str	r3, [r4, #16]
 800cd12:	9b05      	ldr	r3, [sp, #20]
 800cd14:	f023 0204 	bic.w	r2, r3, #4
 800cd18:	6022      	str	r2, [r4, #0]
 800cd1a:	f04f 0900 	mov.w	r9, #0
 800cd1e:	9700      	str	r7, [sp, #0]
 800cd20:	4633      	mov	r3, r6
 800cd22:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd24:	4621      	mov	r1, r4
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 f9d8 	bl	800d0dc <_printf_common>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	f040 8090 	bne.w	800ce52 <_printf_float+0x1e2>
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	b00d      	add	sp, #52	; 0x34
 800cd38:	ecbd 8b02 	vpop	{d8}
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	4642      	mov	r2, r8
 800cd42:	464b      	mov	r3, r9
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 ff0a 	bl	8000b60 <__aeabi_dcmpun>
 800cd4c:	b140      	cbz	r0, 800cd60 <_printf_float+0xf0>
 800cd4e:	464b      	mov	r3, r9
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfbc      	itt	lt
 800cd54:	232d      	movlt	r3, #45	; 0x2d
 800cd56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd5a:	487f      	ldr	r0, [pc, #508]	; (800cf58 <_printf_float+0x2e8>)
 800cd5c:	4b7f      	ldr	r3, [pc, #508]	; (800cf5c <_printf_float+0x2ec>)
 800cd5e:	e7d1      	b.n	800cd04 <_printf_float+0x94>
 800cd60:	6863      	ldr	r3, [r4, #4]
 800cd62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd66:	9206      	str	r2, [sp, #24]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	d13f      	bne.n	800cdec <_printf_float+0x17c>
 800cd6c:	2306      	movs	r3, #6
 800cd6e:	6063      	str	r3, [r4, #4]
 800cd70:	9b05      	ldr	r3, [sp, #20]
 800cd72:	6861      	ldr	r1, [r4, #4]
 800cd74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	ab0a      	add	r3, sp, #40	; 0x28
 800cd7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd82:	ab09      	add	r3, sp, #36	; 0x24
 800cd84:	ec49 8b10 	vmov	d0, r8, r9
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	6022      	str	r2, [r4, #0]
 800cd8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd90:	4628      	mov	r0, r5
 800cd92:	f7ff fecd 	bl	800cb30 <__cvt>
 800cd96:	9b06      	ldr	r3, [sp, #24]
 800cd98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd9a:	2b47      	cmp	r3, #71	; 0x47
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	d108      	bne.n	800cdb2 <_printf_float+0x142>
 800cda0:	1cc8      	adds	r0, r1, #3
 800cda2:	db02      	blt.n	800cdaa <_printf_float+0x13a>
 800cda4:	6863      	ldr	r3, [r4, #4]
 800cda6:	4299      	cmp	r1, r3
 800cda8:	dd41      	ble.n	800ce2e <_printf_float+0x1be>
 800cdaa:	f1ab 0b02 	sub.w	fp, fp, #2
 800cdae:	fa5f fb8b 	uxtb.w	fp, fp
 800cdb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdb6:	d820      	bhi.n	800cdfa <_printf_float+0x18a>
 800cdb8:	3901      	subs	r1, #1
 800cdba:	465a      	mov	r2, fp
 800cdbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cdc0:	9109      	str	r1, [sp, #36]	; 0x24
 800cdc2:	f7ff ff17 	bl	800cbf4 <__exponent>
 800cdc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdc8:	1813      	adds	r3, r2, r0
 800cdca:	2a01      	cmp	r2, #1
 800cdcc:	4681      	mov	r9, r0
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	dc02      	bgt.n	800cdd8 <_printf_float+0x168>
 800cdd2:	6822      	ldr	r2, [r4, #0]
 800cdd4:	07d2      	lsls	r2, r2, #31
 800cdd6:	d501      	bpl.n	800cddc <_printf_float+0x16c>
 800cdd8:	3301      	adds	r3, #1
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d09c      	beq.n	800cd1e <_printf_float+0xae>
 800cde4:	232d      	movs	r3, #45	; 0x2d
 800cde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdea:	e798      	b.n	800cd1e <_printf_float+0xae>
 800cdec:	9a06      	ldr	r2, [sp, #24]
 800cdee:	2a47      	cmp	r2, #71	; 0x47
 800cdf0:	d1be      	bne.n	800cd70 <_printf_float+0x100>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1bc      	bne.n	800cd70 <_printf_float+0x100>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e7b9      	b.n	800cd6e <_printf_float+0xfe>
 800cdfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdfe:	d118      	bne.n	800ce32 <_printf_float+0x1c2>
 800ce00:	2900      	cmp	r1, #0
 800ce02:	6863      	ldr	r3, [r4, #4]
 800ce04:	dd0b      	ble.n	800ce1e <_printf_float+0x1ae>
 800ce06:	6121      	str	r1, [r4, #16]
 800ce08:	b913      	cbnz	r3, 800ce10 <_printf_float+0x1a0>
 800ce0a:	6822      	ldr	r2, [r4, #0]
 800ce0c:	07d0      	lsls	r0, r2, #31
 800ce0e:	d502      	bpl.n	800ce16 <_printf_float+0x1a6>
 800ce10:	3301      	adds	r3, #1
 800ce12:	440b      	add	r3, r1
 800ce14:	6123      	str	r3, [r4, #16]
 800ce16:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce18:	f04f 0900 	mov.w	r9, #0
 800ce1c:	e7de      	b.n	800cddc <_printf_float+0x16c>
 800ce1e:	b913      	cbnz	r3, 800ce26 <_printf_float+0x1b6>
 800ce20:	6822      	ldr	r2, [r4, #0]
 800ce22:	07d2      	lsls	r2, r2, #31
 800ce24:	d501      	bpl.n	800ce2a <_printf_float+0x1ba>
 800ce26:	3302      	adds	r3, #2
 800ce28:	e7f4      	b.n	800ce14 <_printf_float+0x1a4>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e7f2      	b.n	800ce14 <_printf_float+0x1a4>
 800ce2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce34:	4299      	cmp	r1, r3
 800ce36:	db05      	blt.n	800ce44 <_printf_float+0x1d4>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	6121      	str	r1, [r4, #16]
 800ce3c:	07d8      	lsls	r0, r3, #31
 800ce3e:	d5ea      	bpl.n	800ce16 <_printf_float+0x1a6>
 800ce40:	1c4b      	adds	r3, r1, #1
 800ce42:	e7e7      	b.n	800ce14 <_printf_float+0x1a4>
 800ce44:	2900      	cmp	r1, #0
 800ce46:	bfd4      	ite	le
 800ce48:	f1c1 0202 	rsble	r2, r1, #2
 800ce4c:	2201      	movgt	r2, #1
 800ce4e:	4413      	add	r3, r2
 800ce50:	e7e0      	b.n	800ce14 <_printf_float+0x1a4>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	055a      	lsls	r2, r3, #21
 800ce56:	d407      	bmi.n	800ce68 <_printf_float+0x1f8>
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	4642      	mov	r2, r8
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4628      	mov	r0, r5
 800ce60:	47b8      	blx	r7
 800ce62:	3001      	adds	r0, #1
 800ce64:	d12c      	bne.n	800cec0 <_printf_float+0x250>
 800ce66:	e764      	b.n	800cd32 <_printf_float+0xc2>
 800ce68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce6c:	f240 80e0 	bls.w	800d030 <_printf_float+0x3c0>
 800ce70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	f7f3 fe40 	bl	8000afc <__aeabi_dcmpeq>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d034      	beq.n	800ceea <_printf_float+0x27a>
 800ce80:	4a37      	ldr	r2, [pc, #220]	; (800cf60 <_printf_float+0x2f0>)
 800ce82:	2301      	movs	r3, #1
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f43f af51 	beq.w	800cd32 <_printf_float+0xc2>
 800ce90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce94:	429a      	cmp	r2, r3
 800ce96:	db02      	blt.n	800ce9e <_printf_float+0x22e>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	07d8      	lsls	r0, r3, #31
 800ce9c:	d510      	bpl.n	800cec0 <_printf_float+0x250>
 800ce9e:	ee18 3a10 	vmov	r3, s16
 800cea2:	4652      	mov	r2, sl
 800cea4:	4631      	mov	r1, r6
 800cea6:	4628      	mov	r0, r5
 800cea8:	47b8      	blx	r7
 800ceaa:	3001      	adds	r0, #1
 800ceac:	f43f af41 	beq.w	800cd32 <_printf_float+0xc2>
 800ceb0:	f04f 0800 	mov.w	r8, #0
 800ceb4:	f104 091a 	add.w	r9, r4, #26
 800ceb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceba:	3b01      	subs	r3, #1
 800cebc:	4543      	cmp	r3, r8
 800cebe:	dc09      	bgt.n	800ced4 <_printf_float+0x264>
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	079b      	lsls	r3, r3, #30
 800cec4:	f100 8105 	bmi.w	800d0d2 <_printf_float+0x462>
 800cec8:	68e0      	ldr	r0, [r4, #12]
 800ceca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cecc:	4298      	cmp	r0, r3
 800cece:	bfb8      	it	lt
 800ced0:	4618      	movlt	r0, r3
 800ced2:	e730      	b.n	800cd36 <_printf_float+0xc6>
 800ced4:	2301      	movs	r3, #1
 800ced6:	464a      	mov	r2, r9
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f af27 	beq.w	800cd32 <_printf_float+0xc2>
 800cee4:	f108 0801 	add.w	r8, r8, #1
 800cee8:	e7e6      	b.n	800ceb8 <_printf_float+0x248>
 800ceea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dc39      	bgt.n	800cf64 <_printf_float+0x2f4>
 800cef0:	4a1b      	ldr	r2, [pc, #108]	; (800cf60 <_printf_float+0x2f0>)
 800cef2:	2301      	movs	r3, #1
 800cef4:	4631      	mov	r1, r6
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	f43f af19 	beq.w	800cd32 <_printf_float+0xc2>
 800cf00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf04:	4313      	orrs	r3, r2
 800cf06:	d102      	bne.n	800cf0e <_printf_float+0x29e>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	07d9      	lsls	r1, r3, #31
 800cf0c:	d5d8      	bpl.n	800cec0 <_printf_float+0x250>
 800cf0e:	ee18 3a10 	vmov	r3, s16
 800cf12:	4652      	mov	r2, sl
 800cf14:	4631      	mov	r1, r6
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b8      	blx	r7
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	f43f af09 	beq.w	800cd32 <_printf_float+0xc2>
 800cf20:	f04f 0900 	mov.w	r9, #0
 800cf24:	f104 0a1a 	add.w	sl, r4, #26
 800cf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf2a:	425b      	negs	r3, r3
 800cf2c:	454b      	cmp	r3, r9
 800cf2e:	dc01      	bgt.n	800cf34 <_printf_float+0x2c4>
 800cf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf32:	e792      	b.n	800ce5a <_printf_float+0x1ea>
 800cf34:	2301      	movs	r3, #1
 800cf36:	4652      	mov	r2, sl
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b8      	blx	r7
 800cf3e:	3001      	adds	r0, #1
 800cf40:	f43f aef7 	beq.w	800cd32 <_printf_float+0xc2>
 800cf44:	f109 0901 	add.w	r9, r9, #1
 800cf48:	e7ee      	b.n	800cf28 <_printf_float+0x2b8>
 800cf4a:	bf00      	nop
 800cf4c:	7fefffff 	.word	0x7fefffff
 800cf50:	08039585 	.word	0x08039585
 800cf54:	08039589 	.word	0x08039589
 800cf58:	08039591 	.word	0x08039591
 800cf5c:	0803958d 	.word	0x0803958d
 800cf60:	08039c10 	.word	0x08039c10
 800cf64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	bfa8      	it	ge
 800cf6c:	461a      	movge	r2, r3
 800cf6e:	2a00      	cmp	r2, #0
 800cf70:	4691      	mov	r9, r2
 800cf72:	dc37      	bgt.n	800cfe4 <_printf_float+0x374>
 800cf74:	f04f 0b00 	mov.w	fp, #0
 800cf78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf7c:	f104 021a 	add.w	r2, r4, #26
 800cf80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	eba3 0309 	sub.w	r3, r3, r9
 800cf88:	455b      	cmp	r3, fp
 800cf8a:	dc33      	bgt.n	800cff4 <_printf_float+0x384>
 800cf8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf90:	429a      	cmp	r2, r3
 800cf92:	db3b      	blt.n	800d00c <_printf_float+0x39c>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	07da      	lsls	r2, r3, #31
 800cf98:	d438      	bmi.n	800d00c <_printf_float+0x39c>
 800cf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf9c:	9a05      	ldr	r2, [sp, #20]
 800cf9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa0:	1a9a      	subs	r2, r3, r2
 800cfa2:	eba3 0901 	sub.w	r9, r3, r1
 800cfa6:	4591      	cmp	r9, r2
 800cfa8:	bfa8      	it	ge
 800cfaa:	4691      	movge	r9, r2
 800cfac:	f1b9 0f00 	cmp.w	r9, #0
 800cfb0:	dc35      	bgt.n	800d01e <_printf_float+0x3ae>
 800cfb2:	f04f 0800 	mov.w	r8, #0
 800cfb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfba:	f104 0a1a 	add.w	sl, r4, #26
 800cfbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfc2:	1a9b      	subs	r3, r3, r2
 800cfc4:	eba3 0309 	sub.w	r3, r3, r9
 800cfc8:	4543      	cmp	r3, r8
 800cfca:	f77f af79 	ble.w	800cec0 <_printf_float+0x250>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	f43f aeaa 	beq.w	800cd32 <_printf_float+0xc2>
 800cfde:	f108 0801 	add.w	r8, r8, #1
 800cfe2:	e7ec      	b.n	800cfbe <_printf_float+0x34e>
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4642      	mov	r2, r8
 800cfea:	4628      	mov	r0, r5
 800cfec:	47b8      	blx	r7
 800cfee:	3001      	adds	r0, #1
 800cff0:	d1c0      	bne.n	800cf74 <_printf_float+0x304>
 800cff2:	e69e      	b.n	800cd32 <_printf_float+0xc2>
 800cff4:	2301      	movs	r3, #1
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	9205      	str	r2, [sp, #20]
 800cffc:	47b8      	blx	r7
 800cffe:	3001      	adds	r0, #1
 800d000:	f43f ae97 	beq.w	800cd32 <_printf_float+0xc2>
 800d004:	9a05      	ldr	r2, [sp, #20]
 800d006:	f10b 0b01 	add.w	fp, fp, #1
 800d00a:	e7b9      	b.n	800cf80 <_printf_float+0x310>
 800d00c:	ee18 3a10 	vmov	r3, s16
 800d010:	4652      	mov	r2, sl
 800d012:	4631      	mov	r1, r6
 800d014:	4628      	mov	r0, r5
 800d016:	47b8      	blx	r7
 800d018:	3001      	adds	r0, #1
 800d01a:	d1be      	bne.n	800cf9a <_printf_float+0x32a>
 800d01c:	e689      	b.n	800cd32 <_printf_float+0xc2>
 800d01e:	9a05      	ldr	r2, [sp, #20]
 800d020:	464b      	mov	r3, r9
 800d022:	4442      	add	r2, r8
 800d024:	4631      	mov	r1, r6
 800d026:	4628      	mov	r0, r5
 800d028:	47b8      	blx	r7
 800d02a:	3001      	adds	r0, #1
 800d02c:	d1c1      	bne.n	800cfb2 <_printf_float+0x342>
 800d02e:	e680      	b.n	800cd32 <_printf_float+0xc2>
 800d030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d032:	2a01      	cmp	r2, #1
 800d034:	dc01      	bgt.n	800d03a <_printf_float+0x3ca>
 800d036:	07db      	lsls	r3, r3, #31
 800d038:	d538      	bpl.n	800d0ac <_printf_float+0x43c>
 800d03a:	2301      	movs	r3, #1
 800d03c:	4642      	mov	r2, r8
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f ae74 	beq.w	800cd32 <_printf_float+0xc2>
 800d04a:	ee18 3a10 	vmov	r3, s16
 800d04e:	4652      	mov	r2, sl
 800d050:	4631      	mov	r1, r6
 800d052:	4628      	mov	r0, r5
 800d054:	47b8      	blx	r7
 800d056:	3001      	adds	r0, #1
 800d058:	f43f ae6b 	beq.w	800cd32 <_printf_float+0xc2>
 800d05c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d060:	2200      	movs	r2, #0
 800d062:	2300      	movs	r3, #0
 800d064:	f7f3 fd4a 	bl	8000afc <__aeabi_dcmpeq>
 800d068:	b9d8      	cbnz	r0, 800d0a2 <_printf_float+0x432>
 800d06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d06c:	f108 0201 	add.w	r2, r8, #1
 800d070:	3b01      	subs	r3, #1
 800d072:	4631      	mov	r1, r6
 800d074:	4628      	mov	r0, r5
 800d076:	47b8      	blx	r7
 800d078:	3001      	adds	r0, #1
 800d07a:	d10e      	bne.n	800d09a <_printf_float+0x42a>
 800d07c:	e659      	b.n	800cd32 <_printf_float+0xc2>
 800d07e:	2301      	movs	r3, #1
 800d080:	4652      	mov	r2, sl
 800d082:	4631      	mov	r1, r6
 800d084:	4628      	mov	r0, r5
 800d086:	47b8      	blx	r7
 800d088:	3001      	adds	r0, #1
 800d08a:	f43f ae52 	beq.w	800cd32 <_printf_float+0xc2>
 800d08e:	f108 0801 	add.w	r8, r8, #1
 800d092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d094:	3b01      	subs	r3, #1
 800d096:	4543      	cmp	r3, r8
 800d098:	dcf1      	bgt.n	800d07e <_printf_float+0x40e>
 800d09a:	464b      	mov	r3, r9
 800d09c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d0a0:	e6dc      	b.n	800ce5c <_printf_float+0x1ec>
 800d0a2:	f04f 0800 	mov.w	r8, #0
 800d0a6:	f104 0a1a 	add.w	sl, r4, #26
 800d0aa:	e7f2      	b.n	800d092 <_printf_float+0x422>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	4642      	mov	r2, r8
 800d0b0:	e7df      	b.n	800d072 <_printf_float+0x402>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	464a      	mov	r2, r9
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	f43f ae38 	beq.w	800cd32 <_printf_float+0xc2>
 800d0c2:	f108 0801 	add.w	r8, r8, #1
 800d0c6:	68e3      	ldr	r3, [r4, #12]
 800d0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0ca:	1a5b      	subs	r3, r3, r1
 800d0cc:	4543      	cmp	r3, r8
 800d0ce:	dcf0      	bgt.n	800d0b2 <_printf_float+0x442>
 800d0d0:	e6fa      	b.n	800cec8 <_printf_float+0x258>
 800d0d2:	f04f 0800 	mov.w	r8, #0
 800d0d6:	f104 0919 	add.w	r9, r4, #25
 800d0da:	e7f4      	b.n	800d0c6 <_printf_float+0x456>

0800d0dc <_printf_common>:
 800d0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e0:	4616      	mov	r6, r2
 800d0e2:	4699      	mov	r9, r3
 800d0e4:	688a      	ldr	r2, [r1, #8]
 800d0e6:	690b      	ldr	r3, [r1, #16]
 800d0e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	bfb8      	it	lt
 800d0f0:	4613      	movlt	r3, r2
 800d0f2:	6033      	str	r3, [r6, #0]
 800d0f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0f8:	4607      	mov	r7, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	b10a      	cbz	r2, 800d102 <_printf_common+0x26>
 800d0fe:	3301      	adds	r3, #1
 800d100:	6033      	str	r3, [r6, #0]
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	0699      	lsls	r1, r3, #26
 800d106:	bf42      	ittt	mi
 800d108:	6833      	ldrmi	r3, [r6, #0]
 800d10a:	3302      	addmi	r3, #2
 800d10c:	6033      	strmi	r3, [r6, #0]
 800d10e:	6825      	ldr	r5, [r4, #0]
 800d110:	f015 0506 	ands.w	r5, r5, #6
 800d114:	d106      	bne.n	800d124 <_printf_common+0x48>
 800d116:	f104 0a19 	add.w	sl, r4, #25
 800d11a:	68e3      	ldr	r3, [r4, #12]
 800d11c:	6832      	ldr	r2, [r6, #0]
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	42ab      	cmp	r3, r5
 800d122:	dc26      	bgt.n	800d172 <_printf_common+0x96>
 800d124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d128:	1e13      	subs	r3, r2, #0
 800d12a:	6822      	ldr	r2, [r4, #0]
 800d12c:	bf18      	it	ne
 800d12e:	2301      	movne	r3, #1
 800d130:	0692      	lsls	r2, r2, #26
 800d132:	d42b      	bmi.n	800d18c <_printf_common+0xb0>
 800d134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d138:	4649      	mov	r1, r9
 800d13a:	4638      	mov	r0, r7
 800d13c:	47c0      	blx	r8
 800d13e:	3001      	adds	r0, #1
 800d140:	d01e      	beq.n	800d180 <_printf_common+0xa4>
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	68e5      	ldr	r5, [r4, #12]
 800d146:	6832      	ldr	r2, [r6, #0]
 800d148:	f003 0306 	and.w	r3, r3, #6
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	bf08      	it	eq
 800d150:	1aad      	subeq	r5, r5, r2
 800d152:	68a3      	ldr	r3, [r4, #8]
 800d154:	6922      	ldr	r2, [r4, #16]
 800d156:	bf0c      	ite	eq
 800d158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d15c:	2500      	movne	r5, #0
 800d15e:	4293      	cmp	r3, r2
 800d160:	bfc4      	itt	gt
 800d162:	1a9b      	subgt	r3, r3, r2
 800d164:	18ed      	addgt	r5, r5, r3
 800d166:	2600      	movs	r6, #0
 800d168:	341a      	adds	r4, #26
 800d16a:	42b5      	cmp	r5, r6
 800d16c:	d11a      	bne.n	800d1a4 <_printf_common+0xc8>
 800d16e:	2000      	movs	r0, #0
 800d170:	e008      	b.n	800d184 <_printf_common+0xa8>
 800d172:	2301      	movs	r3, #1
 800d174:	4652      	mov	r2, sl
 800d176:	4649      	mov	r1, r9
 800d178:	4638      	mov	r0, r7
 800d17a:	47c0      	blx	r8
 800d17c:	3001      	adds	r0, #1
 800d17e:	d103      	bne.n	800d188 <_printf_common+0xac>
 800d180:	f04f 30ff 	mov.w	r0, #4294967295
 800d184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d188:	3501      	adds	r5, #1
 800d18a:	e7c6      	b.n	800d11a <_printf_common+0x3e>
 800d18c:	18e1      	adds	r1, r4, r3
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	2030      	movs	r0, #48	; 0x30
 800d192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d196:	4422      	add	r2, r4
 800d198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d19c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1a0:	3302      	adds	r3, #2
 800d1a2:	e7c7      	b.n	800d134 <_printf_common+0x58>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	47c0      	blx	r8
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	d0e6      	beq.n	800d180 <_printf_common+0xa4>
 800d1b2:	3601      	adds	r6, #1
 800d1b4:	e7d9      	b.n	800d16a <_printf_common+0x8e>
	...

0800d1b8 <_printf_i>:
 800d1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1bc:	7e0f      	ldrb	r7, [r1, #24]
 800d1be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1c0:	2f78      	cmp	r7, #120	; 0x78
 800d1c2:	4691      	mov	r9, r2
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	469a      	mov	sl, r3
 800d1ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1ce:	d807      	bhi.n	800d1e0 <_printf_i+0x28>
 800d1d0:	2f62      	cmp	r7, #98	; 0x62
 800d1d2:	d80a      	bhi.n	800d1ea <_printf_i+0x32>
 800d1d4:	2f00      	cmp	r7, #0
 800d1d6:	f000 80d8 	beq.w	800d38a <_printf_i+0x1d2>
 800d1da:	2f58      	cmp	r7, #88	; 0x58
 800d1dc:	f000 80a3 	beq.w	800d326 <_printf_i+0x16e>
 800d1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1e8:	e03a      	b.n	800d260 <_printf_i+0xa8>
 800d1ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1ee:	2b15      	cmp	r3, #21
 800d1f0:	d8f6      	bhi.n	800d1e0 <_printf_i+0x28>
 800d1f2:	a101      	add	r1, pc, #4	; (adr r1, 800d1f8 <_printf_i+0x40>)
 800d1f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1f8:	0800d251 	.word	0x0800d251
 800d1fc:	0800d265 	.word	0x0800d265
 800d200:	0800d1e1 	.word	0x0800d1e1
 800d204:	0800d1e1 	.word	0x0800d1e1
 800d208:	0800d1e1 	.word	0x0800d1e1
 800d20c:	0800d1e1 	.word	0x0800d1e1
 800d210:	0800d265 	.word	0x0800d265
 800d214:	0800d1e1 	.word	0x0800d1e1
 800d218:	0800d1e1 	.word	0x0800d1e1
 800d21c:	0800d1e1 	.word	0x0800d1e1
 800d220:	0800d1e1 	.word	0x0800d1e1
 800d224:	0800d371 	.word	0x0800d371
 800d228:	0800d295 	.word	0x0800d295
 800d22c:	0800d353 	.word	0x0800d353
 800d230:	0800d1e1 	.word	0x0800d1e1
 800d234:	0800d1e1 	.word	0x0800d1e1
 800d238:	0800d393 	.word	0x0800d393
 800d23c:	0800d1e1 	.word	0x0800d1e1
 800d240:	0800d295 	.word	0x0800d295
 800d244:	0800d1e1 	.word	0x0800d1e1
 800d248:	0800d1e1 	.word	0x0800d1e1
 800d24c:	0800d35b 	.word	0x0800d35b
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	1d1a      	adds	r2, r3, #4
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	602a      	str	r2, [r5, #0]
 800d258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d260:	2301      	movs	r3, #1
 800d262:	e0a3      	b.n	800d3ac <_printf_i+0x1f4>
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	6829      	ldr	r1, [r5, #0]
 800d268:	0606      	lsls	r6, r0, #24
 800d26a:	f101 0304 	add.w	r3, r1, #4
 800d26e:	d50a      	bpl.n	800d286 <_printf_i+0xce>
 800d270:	680e      	ldr	r6, [r1, #0]
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	2e00      	cmp	r6, #0
 800d276:	da03      	bge.n	800d280 <_printf_i+0xc8>
 800d278:	232d      	movs	r3, #45	; 0x2d
 800d27a:	4276      	negs	r6, r6
 800d27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d280:	485e      	ldr	r0, [pc, #376]	; (800d3fc <_printf_i+0x244>)
 800d282:	230a      	movs	r3, #10
 800d284:	e019      	b.n	800d2ba <_printf_i+0x102>
 800d286:	680e      	ldr	r6, [r1, #0]
 800d288:	602b      	str	r3, [r5, #0]
 800d28a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d28e:	bf18      	it	ne
 800d290:	b236      	sxthne	r6, r6
 800d292:	e7ef      	b.n	800d274 <_printf_i+0xbc>
 800d294:	682b      	ldr	r3, [r5, #0]
 800d296:	6820      	ldr	r0, [r4, #0]
 800d298:	1d19      	adds	r1, r3, #4
 800d29a:	6029      	str	r1, [r5, #0]
 800d29c:	0601      	lsls	r1, r0, #24
 800d29e:	d501      	bpl.n	800d2a4 <_printf_i+0xec>
 800d2a0:	681e      	ldr	r6, [r3, #0]
 800d2a2:	e002      	b.n	800d2aa <_printf_i+0xf2>
 800d2a4:	0646      	lsls	r6, r0, #25
 800d2a6:	d5fb      	bpl.n	800d2a0 <_printf_i+0xe8>
 800d2a8:	881e      	ldrh	r6, [r3, #0]
 800d2aa:	4854      	ldr	r0, [pc, #336]	; (800d3fc <_printf_i+0x244>)
 800d2ac:	2f6f      	cmp	r7, #111	; 0x6f
 800d2ae:	bf0c      	ite	eq
 800d2b0:	2308      	moveq	r3, #8
 800d2b2:	230a      	movne	r3, #10
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2ba:	6865      	ldr	r5, [r4, #4]
 800d2bc:	60a5      	str	r5, [r4, #8]
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	bfa2      	ittt	ge
 800d2c2:	6821      	ldrge	r1, [r4, #0]
 800d2c4:	f021 0104 	bicge.w	r1, r1, #4
 800d2c8:	6021      	strge	r1, [r4, #0]
 800d2ca:	b90e      	cbnz	r6, 800d2d0 <_printf_i+0x118>
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	d04d      	beq.n	800d36c <_printf_i+0x1b4>
 800d2d0:	4615      	mov	r5, r2
 800d2d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2d6:	fb03 6711 	mls	r7, r3, r1, r6
 800d2da:	5dc7      	ldrb	r7, [r0, r7]
 800d2dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2e0:	4637      	mov	r7, r6
 800d2e2:	42bb      	cmp	r3, r7
 800d2e4:	460e      	mov	r6, r1
 800d2e6:	d9f4      	bls.n	800d2d2 <_printf_i+0x11a>
 800d2e8:	2b08      	cmp	r3, #8
 800d2ea:	d10b      	bne.n	800d304 <_printf_i+0x14c>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	07de      	lsls	r6, r3, #31
 800d2f0:	d508      	bpl.n	800d304 <_printf_i+0x14c>
 800d2f2:	6923      	ldr	r3, [r4, #16]
 800d2f4:	6861      	ldr	r1, [r4, #4]
 800d2f6:	4299      	cmp	r1, r3
 800d2f8:	bfde      	ittt	le
 800d2fa:	2330      	movle	r3, #48	; 0x30
 800d2fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d300:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d304:	1b52      	subs	r2, r2, r5
 800d306:	6122      	str	r2, [r4, #16]
 800d308:	f8cd a000 	str.w	sl, [sp]
 800d30c:	464b      	mov	r3, r9
 800d30e:	aa03      	add	r2, sp, #12
 800d310:	4621      	mov	r1, r4
 800d312:	4640      	mov	r0, r8
 800d314:	f7ff fee2 	bl	800d0dc <_printf_common>
 800d318:	3001      	adds	r0, #1
 800d31a:	d14c      	bne.n	800d3b6 <_printf_i+0x1fe>
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	b004      	add	sp, #16
 800d322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d326:	4835      	ldr	r0, [pc, #212]	; (800d3fc <_printf_i+0x244>)
 800d328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d32c:	6829      	ldr	r1, [r5, #0]
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f851 6b04 	ldr.w	r6, [r1], #4
 800d334:	6029      	str	r1, [r5, #0]
 800d336:	061d      	lsls	r5, r3, #24
 800d338:	d514      	bpl.n	800d364 <_printf_i+0x1ac>
 800d33a:	07df      	lsls	r7, r3, #31
 800d33c:	bf44      	itt	mi
 800d33e:	f043 0320 	orrmi.w	r3, r3, #32
 800d342:	6023      	strmi	r3, [r4, #0]
 800d344:	b91e      	cbnz	r6, 800d34e <_printf_i+0x196>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	f023 0320 	bic.w	r3, r3, #32
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	2310      	movs	r3, #16
 800d350:	e7b0      	b.n	800d2b4 <_printf_i+0xfc>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	f043 0320 	orr.w	r3, r3, #32
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	2378      	movs	r3, #120	; 0x78
 800d35c:	4828      	ldr	r0, [pc, #160]	; (800d400 <_printf_i+0x248>)
 800d35e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d362:	e7e3      	b.n	800d32c <_printf_i+0x174>
 800d364:	0659      	lsls	r1, r3, #25
 800d366:	bf48      	it	mi
 800d368:	b2b6      	uxthmi	r6, r6
 800d36a:	e7e6      	b.n	800d33a <_printf_i+0x182>
 800d36c:	4615      	mov	r5, r2
 800d36e:	e7bb      	b.n	800d2e8 <_printf_i+0x130>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	6826      	ldr	r6, [r4, #0]
 800d374:	6961      	ldr	r1, [r4, #20]
 800d376:	1d18      	adds	r0, r3, #4
 800d378:	6028      	str	r0, [r5, #0]
 800d37a:	0635      	lsls	r5, r6, #24
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	d501      	bpl.n	800d384 <_printf_i+0x1cc>
 800d380:	6019      	str	r1, [r3, #0]
 800d382:	e002      	b.n	800d38a <_printf_i+0x1d2>
 800d384:	0670      	lsls	r0, r6, #25
 800d386:	d5fb      	bpl.n	800d380 <_printf_i+0x1c8>
 800d388:	8019      	strh	r1, [r3, #0]
 800d38a:	2300      	movs	r3, #0
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	4615      	mov	r5, r2
 800d390:	e7ba      	b.n	800d308 <_printf_i+0x150>
 800d392:	682b      	ldr	r3, [r5, #0]
 800d394:	1d1a      	adds	r2, r3, #4
 800d396:	602a      	str	r2, [r5, #0]
 800d398:	681d      	ldr	r5, [r3, #0]
 800d39a:	6862      	ldr	r2, [r4, #4]
 800d39c:	2100      	movs	r1, #0
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f7f2 ff2e 	bl	8000200 <memchr>
 800d3a4:	b108      	cbz	r0, 800d3aa <_printf_i+0x1f2>
 800d3a6:	1b40      	subs	r0, r0, r5
 800d3a8:	6060      	str	r0, [r4, #4]
 800d3aa:	6863      	ldr	r3, [r4, #4]
 800d3ac:	6123      	str	r3, [r4, #16]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b4:	e7a8      	b.n	800d308 <_printf_i+0x150>
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	4640      	mov	r0, r8
 800d3be:	47d0      	blx	sl
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d0ab      	beq.n	800d31c <_printf_i+0x164>
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	079b      	lsls	r3, r3, #30
 800d3c8:	d413      	bmi.n	800d3f2 <_printf_i+0x23a>
 800d3ca:	68e0      	ldr	r0, [r4, #12]
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	4298      	cmp	r0, r3
 800d3d0:	bfb8      	it	lt
 800d3d2:	4618      	movlt	r0, r3
 800d3d4:	e7a4      	b.n	800d320 <_printf_i+0x168>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	4632      	mov	r2, r6
 800d3da:	4649      	mov	r1, r9
 800d3dc:	4640      	mov	r0, r8
 800d3de:	47d0      	blx	sl
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d09b      	beq.n	800d31c <_printf_i+0x164>
 800d3e4:	3501      	adds	r5, #1
 800d3e6:	68e3      	ldr	r3, [r4, #12]
 800d3e8:	9903      	ldr	r1, [sp, #12]
 800d3ea:	1a5b      	subs	r3, r3, r1
 800d3ec:	42ab      	cmp	r3, r5
 800d3ee:	dcf2      	bgt.n	800d3d6 <_printf_i+0x21e>
 800d3f0:	e7eb      	b.n	800d3ca <_printf_i+0x212>
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	f104 0619 	add.w	r6, r4, #25
 800d3f8:	e7f5      	b.n	800d3e6 <_printf_i+0x22e>
 800d3fa:	bf00      	nop
 800d3fc:	08039595 	.word	0x08039595
 800d400:	080395a6 	.word	0x080395a6

0800d404 <_sbrk_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4d06      	ldr	r5, [pc, #24]	; (800d420 <_sbrk_r+0x1c>)
 800d408:	2300      	movs	r3, #0
 800d40a:	4604      	mov	r4, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	602b      	str	r3, [r5, #0]
 800d410:	f006 f97c 	bl	801370c <_sbrk>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_sbrk_r+0x1a>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_sbrk_r+0x1a>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	20003aac 	.word	0x20003aac

0800d424 <siprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b500      	push	{lr}
 800d428:	b09c      	sub	sp, #112	; 0x70
 800d42a:	ab1d      	add	r3, sp, #116	; 0x74
 800d42c:	9002      	str	r0, [sp, #8]
 800d42e:	9006      	str	r0, [sp, #24]
 800d430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d434:	4809      	ldr	r0, [pc, #36]	; (800d45c <siprintf+0x38>)
 800d436:	9107      	str	r1, [sp, #28]
 800d438:	9104      	str	r1, [sp, #16]
 800d43a:	4909      	ldr	r1, [pc, #36]	; (800d460 <siprintf+0x3c>)
 800d43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d440:	9105      	str	r1, [sp, #20]
 800d442:	6800      	ldr	r0, [r0, #0]
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	a902      	add	r1, sp, #8
 800d448:	f002 fed4 	bl	80101f4 <_svfiprintf_r>
 800d44c:	9b02      	ldr	r3, [sp, #8]
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	b01c      	add	sp, #112	; 0x70
 800d454:	f85d eb04 	ldr.w	lr, [sp], #4
 800d458:	b003      	add	sp, #12
 800d45a:	4770      	bx	lr
 800d45c:	200002c0 	.word	0x200002c0
 800d460:	ffff0208 	.word	0xffff0208

0800d464 <siscanf>:
 800d464:	b40e      	push	{r1, r2, r3}
 800d466:	b510      	push	{r4, lr}
 800d468:	b09f      	sub	sp, #124	; 0x7c
 800d46a:	ac21      	add	r4, sp, #132	; 0x84
 800d46c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d470:	f854 2b04 	ldr.w	r2, [r4], #4
 800d474:	9201      	str	r2, [sp, #4]
 800d476:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d47a:	9004      	str	r0, [sp, #16]
 800d47c:	9008      	str	r0, [sp, #32]
 800d47e:	f7f2 feb7 	bl	80001f0 <strlen>
 800d482:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <siscanf+0x50>)
 800d484:	9005      	str	r0, [sp, #20]
 800d486:	9009      	str	r0, [sp, #36]	; 0x24
 800d488:	930d      	str	r3, [sp, #52]	; 0x34
 800d48a:	480b      	ldr	r0, [pc, #44]	; (800d4b8 <siscanf+0x54>)
 800d48c:	9a01      	ldr	r2, [sp, #4]
 800d48e:	6800      	ldr	r0, [r0, #0]
 800d490:	9403      	str	r4, [sp, #12]
 800d492:	2300      	movs	r3, #0
 800d494:	9311      	str	r3, [sp, #68]	; 0x44
 800d496:	9316      	str	r3, [sp, #88]	; 0x58
 800d498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d49c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d4a0:	a904      	add	r1, sp, #16
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	f003 f800 	bl	80104a8 <__ssvfiscanf_r>
 800d4a8:	b01f      	add	sp, #124	; 0x7c
 800d4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ae:	b003      	add	sp, #12
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	0800d4df 	.word	0x0800d4df
 800d4b8:	200002c0 	.word	0x200002c0

0800d4bc <__sread>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	460c      	mov	r4, r1
 800d4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c4:	f003 faba 	bl	8010a3c <_read_r>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	bfab      	itete	ge
 800d4cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d4d0:	181b      	addge	r3, r3, r0
 800d4d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4d6:	bfac      	ite	ge
 800d4d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4da:	81a3      	strhlt	r3, [r4, #12]
 800d4dc:	bd10      	pop	{r4, pc}

0800d4de <__seofread>:
 800d4de:	2000      	movs	r0, #0
 800d4e0:	4770      	bx	lr

0800d4e2 <__swrite>:
 800d4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	461f      	mov	r7, r3
 800d4e8:	898b      	ldrh	r3, [r1, #12]
 800d4ea:	05db      	lsls	r3, r3, #23
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	4616      	mov	r6, r2
 800d4f2:	d505      	bpl.n	800d500 <__swrite+0x1e>
 800d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f002 f9b8 	bl	800f870 <_lseek_r>
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	4632      	mov	r2, r6
 800d50e:	463b      	mov	r3, r7
 800d510:	4628      	mov	r0, r5
 800d512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d516:	f001 b871 	b.w	800e5fc <_write_r>

0800d51a <__sseek>:
 800d51a:	b510      	push	{r4, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d522:	f002 f9a5 	bl	800f870 <_lseek_r>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	bf15      	itete	ne
 800d52c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d52e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d536:	81a3      	strheq	r3, [r4, #12]
 800d538:	bf18      	it	ne
 800d53a:	81a3      	strhne	r3, [r4, #12]
 800d53c:	bd10      	pop	{r4, pc}

0800d53e <__sclose>:
 800d53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d542:	f001 b8e7 	b.w	800e714 <_close_r>
	...

0800d548 <iso_year_adjust>:
 800d548:	6942      	ldr	r2, [r0, #20]
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	f240 736c 	movw	r3, #1900	; 0x76c
 800d550:	bfa8      	it	ge
 800d552:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800d556:	4413      	add	r3, r2
 800d558:	0792      	lsls	r2, r2, #30
 800d55a:	d105      	bne.n	800d568 <iso_year_adjust+0x20>
 800d55c:	2164      	movs	r1, #100	; 0x64
 800d55e:	fb93 f2f1 	sdiv	r2, r3, r1
 800d562:	fb01 3212 	mls	r2, r1, r2, r3
 800d566:	b9da      	cbnz	r2, 800d5a0 <iso_year_adjust+0x58>
 800d568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d56c:	fb93 f1f2 	sdiv	r1, r3, r2
 800d570:	fb02 3311 	mls	r3, r2, r1, r3
 800d574:	fab3 f383 	clz	r3, r3
 800d578:	095b      	lsrs	r3, r3, #5
 800d57a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800d57e:	0040      	lsls	r0, r0, #1
 800d580:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800d584:	4418      	add	r0, r3
 800d586:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800d58a:	4298      	cmp	r0, r3
 800d58c:	d03a      	beq.n	800d604 <iso_year_adjust+0xbc>
 800d58e:	dc21      	bgt.n	800d5d4 <iso_year_adjust+0x8c>
 800d590:	2801      	cmp	r0, #1
 800d592:	dc1a      	bgt.n	800d5ca <iso_year_adjust+0x82>
 800d594:	2800      	cmp	r0, #0
 800d596:	bfb4      	ite	lt
 800d598:	2000      	movlt	r0, #0
 800d59a:	f04f 30ff 	movge.w	r0, #4294967295
 800d59e:	4770      	bx	lr
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e7ea      	b.n	800d57a <iso_year_adjust+0x32>
 800d5a4:	2817      	cmp	r0, #23
 800d5a6:	d813      	bhi.n	800d5d0 <iso_year_adjust+0x88>
 800d5a8:	e8df f000 	tbb	[pc, r0]
 800d5ac:	0c0c0c0c 	.word	0x0c0c0c0c
 800d5b0:	0c0c1212 	.word	0x0c0c1212
 800d5b4:	12121212 	.word	0x12121212
 800d5b8:	12121212 	.word	0x12121212
 800d5bc:	0c0c1212 	.word	0x0c0c1212
 800d5c0:	0c0c1212 	.word	0x0c0c1212
 800d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c8:	4770      	bx	lr
 800d5ca:	380a      	subs	r0, #10
 800d5cc:	2817      	cmp	r0, #23
 800d5ce:	d9e9      	bls.n	800d5a4 <iso_year_adjust+0x5c>
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	4770      	bx	lr
 800d5d4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800d5d8:	4298      	cmp	r0, r3
 800d5da:	dc06      	bgt.n	800d5ea <iso_year_adjust+0xa2>
 800d5dc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800d5e0:	4298      	cmp	r0, r3
 800d5e2:	bfd4      	ite	le
 800d5e4:	2000      	movle	r0, #0
 800d5e6:	2001      	movgt	r0, #1
 800d5e8:	4770      	bx	lr
 800d5ea:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800d5ee:	3802      	subs	r0, #2
 800d5f0:	2815      	cmp	r0, #21
 800d5f2:	d8ed      	bhi.n	800d5d0 <iso_year_adjust+0x88>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4083      	lsls	r3, r0
 800d5f8:	4803      	ldr	r0, [pc, #12]	; (800d608 <iso_year_adjust+0xc0>)
 800d5fa:	4018      	ands	r0, r3
 800d5fc:	3800      	subs	r0, #0
 800d5fe:	bf18      	it	ne
 800d600:	2001      	movne	r0, #1
 800d602:	4770      	bx	lr
 800d604:	2001      	movs	r0, #1
 800d606:	4770      	bx	lr
 800d608:	002a001f 	.word	0x002a001f

0800d60c <__strftime.isra.0>:
 800d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	b08f      	sub	sp, #60	; 0x3c
 800d612:	461e      	mov	r6, r3
 800d614:	2300      	movs	r3, #0
 800d616:	4607      	mov	r7, r0
 800d618:	460d      	mov	r5, r1
 800d61a:	9302      	str	r3, [sp, #8]
 800d61c:	461c      	mov	r4, r3
 800d61e:	7813      	ldrb	r3, [r2, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 84ba 	beq.w	800df9a <__strftime.isra.0+0x98e>
 800d626:	2b25      	cmp	r3, #37	; 0x25
 800d628:	d11f      	bne.n	800d66a <__strftime.isra.0+0x5e>
 800d62a:	f892 b001 	ldrb.w	fp, [r2, #1]
 800d62e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800d632:	d024      	beq.n	800d67e <__strftime.isra.0+0x72>
 800d634:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d638:	d021      	beq.n	800d67e <__strftime.isra.0+0x72>
 800d63a:	f102 0801 	add.w	r8, r2, #1
 800d63e:	f04f 0b00 	mov.w	fp, #0
 800d642:	f898 2000 	ldrb.w	r2, [r8]
 800d646:	3a31      	subs	r2, #49	; 0x31
 800d648:	2a08      	cmp	r2, #8
 800d64a:	d81b      	bhi.n	800d684 <__strftime.isra.0+0x78>
 800d64c:	4640      	mov	r0, r8
 800d64e:	220a      	movs	r2, #10
 800d650:	a906      	add	r1, sp, #24
 800d652:	f000 fd3b 	bl	800e0cc <strtoul>
 800d656:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d65a:	4681      	mov	r9, r0
 800d65c:	f898 2000 	ldrb.w	r2, [r8]
 800d660:	2a45      	cmp	r2, #69	; 0x45
 800d662:	d112      	bne.n	800d68a <__strftime.isra.0+0x7e>
 800d664:	f108 0801 	add.w	r8, r8, #1
 800d668:	e011      	b.n	800d68e <__strftime.isra.0+0x82>
 800d66a:	1e69      	subs	r1, r5, #1
 800d66c:	42a1      	cmp	r1, r4
 800d66e:	d802      	bhi.n	800d676 <__strftime.isra.0+0x6a>
 800d670:	2400      	movs	r4, #0
 800d672:	f000 bc95 	b.w	800dfa0 <__strftime.isra.0+0x994>
 800d676:	553b      	strb	r3, [r7, r4]
 800d678:	3201      	adds	r2, #1
 800d67a:	3401      	adds	r4, #1
 800d67c:	e7cf      	b.n	800d61e <__strftime.isra.0+0x12>
 800d67e:	f102 0802 	add.w	r8, r2, #2
 800d682:	e7de      	b.n	800d642 <__strftime.isra.0+0x36>
 800d684:	f04f 0900 	mov.w	r9, #0
 800d688:	e7e8      	b.n	800d65c <__strftime.isra.0+0x50>
 800d68a:	2a4f      	cmp	r2, #79	; 0x4f
 800d68c:	d0ea      	beq.n	800d664 <__strftime.isra.0+0x58>
 800d68e:	f898 0000 	ldrb.w	r0, [r8]
 800d692:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800d696:	2a55      	cmp	r2, #85	; 0x55
 800d698:	d8ea      	bhi.n	800d670 <__strftime.isra.0+0x64>
 800d69a:	a301      	add	r3, pc, #4	; (adr r3, 800d6a0 <__strftime.isra.0+0x94>)
 800d69c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800d6a0:	0800df8f 	.word	0x0800df8f
 800d6a4:	0800d671 	.word	0x0800d671
 800d6a8:	0800d671 	.word	0x0800d671
 800d6ac:	0800d671 	.word	0x0800d671
 800d6b0:	0800d671 	.word	0x0800d671
 800d6b4:	0800d671 	.word	0x0800d671
 800d6b8:	0800d671 	.word	0x0800d671
 800d6bc:	0800d671 	.word	0x0800d671
 800d6c0:	0800d671 	.word	0x0800d671
 800d6c4:	0800d671 	.word	0x0800d671
 800d6c8:	0800d671 	.word	0x0800d671
 800d6cc:	0800d671 	.word	0x0800d671
 800d6d0:	0800d671 	.word	0x0800d671
 800d6d4:	0800d671 	.word	0x0800d671
 800d6d8:	0800d671 	.word	0x0800d671
 800d6dc:	0800d671 	.word	0x0800d671
 800d6e0:	0800d671 	.word	0x0800d671
 800d6e4:	0800d671 	.word	0x0800d671
 800d6e8:	0800d671 	.word	0x0800d671
 800d6ec:	0800d671 	.word	0x0800d671
 800d6f0:	0800d671 	.word	0x0800d671
 800d6f4:	0800d671 	.word	0x0800d671
 800d6f8:	0800d671 	.word	0x0800d671
 800d6fc:	0800d671 	.word	0x0800d671
 800d700:	0800d671 	.word	0x0800d671
 800d704:	0800d671 	.word	0x0800d671
 800d708:	0800d671 	.word	0x0800d671
 800d70c:	0800d671 	.word	0x0800d671
 800d710:	0800d835 	.word	0x0800d835
 800d714:	0800d88d 	.word	0x0800d88d
 800d718:	0800d8fb 	.word	0x0800d8fb
 800d71c:	0800d999 	.word	0x0800d999
 800d720:	0800d671 	.word	0x0800d671
 800d724:	0800d9e5 	.word	0x0800d9e5
 800d728:	0800dad1 	.word	0x0800dad1
 800d72c:	0800dbab 	.word	0x0800dbab
 800d730:	0800dbb9 	.word	0x0800dbb9
 800d734:	0800d671 	.word	0x0800d671
 800d738:	0800d671 	.word	0x0800d671
 800d73c:	0800d671 	.word	0x0800d671
 800d740:	0800dbe9 	.word	0x0800dbe9
 800d744:	0800d671 	.word	0x0800d671
 800d748:	0800d671 	.word	0x0800d671
 800d74c:	0800dbfd 	.word	0x0800dbfd
 800d750:	0800d671 	.word	0x0800d671
 800d754:	0800dc4f 	.word	0x0800dc4f
 800d758:	0800dd63 	.word	0x0800dd63
 800d75c:	0800dd73 	.word	0x0800dd73
 800d760:	0800dd9b 	.word	0x0800dd9b
 800d764:	0800ddd5 	.word	0x0800ddd5
 800d768:	0800de49 	.word	0x0800de49
 800d76c:	0800d8f3 	.word	0x0800d8f3
 800d770:	0800de75 	.word	0x0800de75
 800d774:	0800df3d 	.word	0x0800df3d
 800d778:	0800d671 	.word	0x0800d671
 800d77c:	0800d671 	.word	0x0800d671
 800d780:	0800d671 	.word	0x0800d671
 800d784:	0800d671 	.word	0x0800d671
 800d788:	0800d671 	.word	0x0800d671
 800d78c:	0800d671 	.word	0x0800d671
 800d790:	0800d7f9 	.word	0x0800d7f9
 800d794:	0800d863 	.word	0x0800d863
 800d798:	0800d8b9 	.word	0x0800d8b9
 800d79c:	0800d975 	.word	0x0800d975
 800d7a0:	0800d975 	.word	0x0800d975
 800d7a4:	0800d671 	.word	0x0800d671
 800d7a8:	0800da37 	.word	0x0800da37
 800d7ac:	0800d863 	.word	0x0800d863
 800d7b0:	0800d671 	.word	0x0800d671
 800d7b4:	0800dbdb 	.word	0x0800dbdb
 800d7b8:	0800dbab 	.word	0x0800dbab
 800d7bc:	0800dbb9 	.word	0x0800dbb9
 800d7c0:	0800dbe3 	.word	0x0800dbe3
 800d7c4:	0800dbed 	.word	0x0800dbed
 800d7c8:	0800d671 	.word	0x0800d671
 800d7cc:	0800dbfd 	.word	0x0800dbfd
 800d7d0:	0800d671 	.word	0x0800d671
 800d7d4:	0800d8e3 	.word	0x0800d8e3
 800d7d8:	0800dc61 	.word	0x0800dc61
 800d7dc:	0800dd67 	.word	0x0800dd67
 800d7e0:	0800dd81 	.word	0x0800dd81
 800d7e4:	0800d671 	.word	0x0800d671
 800d7e8:	0800de3b 	.word	0x0800de3b
 800d7ec:	0800d8eb 	.word	0x0800d8eb
 800d7f0:	0800de59 	.word	0x0800de59
 800d7f4:	0800dec7 	.word	0x0800dec7
 800d7f8:	69b3      	ldr	r3, [r6, #24]
 800d7fa:	4aa9      	ldr	r2, [pc, #676]	; (800daa0 <__strftime.isra.0+0x494>)
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d802:	4648      	mov	r0, r9
 800d804:	f7f2 fcf4 	bl	80001f0 <strlen>
 800d808:	f109 39ff 	add.w	r9, r9, #4294967295
 800d80c:	4420      	add	r0, r4
 800d80e:	1e6b      	subs	r3, r5, #1
 800d810:	42a0      	cmp	r0, r4
 800d812:	d107      	bne.n	800d824 <__strftime.isra.0+0x218>
 800d814:	f898 3000 	ldrb.w	r3, [r8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 83be 	beq.w	800df9a <__strftime.isra.0+0x98e>
 800d81e:	f108 0201 	add.w	r2, r8, #1
 800d822:	e6fc      	b.n	800d61e <__strftime.isra.0+0x12>
 800d824:	42a3      	cmp	r3, r4
 800d826:	f67f af23 	bls.w	800d670 <__strftime.isra.0+0x64>
 800d82a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d82e:	553a      	strb	r2, [r7, r4]
 800d830:	3401      	adds	r4, #1
 800d832:	e7ed      	b.n	800d810 <__strftime.isra.0+0x204>
 800d834:	69b2      	ldr	r2, [r6, #24]
 800d836:	4b9a      	ldr	r3, [pc, #616]	; (800daa0 <__strftime.isra.0+0x494>)
 800d838:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d83c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800d840:	4648      	mov	r0, r9
 800d842:	f7f2 fcd5 	bl	80001f0 <strlen>
 800d846:	f109 39ff 	add.w	r9, r9, #4294967295
 800d84a:	4420      	add	r0, r4
 800d84c:	1e6b      	subs	r3, r5, #1
 800d84e:	42a0      	cmp	r0, r4
 800d850:	d0e0      	beq.n	800d814 <__strftime.isra.0+0x208>
 800d852:	42a3      	cmp	r3, r4
 800d854:	f67f af0c 	bls.w	800d670 <__strftime.isra.0+0x64>
 800d858:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d85c:	553a      	strb	r2, [r7, r4]
 800d85e:	3401      	adds	r4, #1
 800d860:	e7f5      	b.n	800d84e <__strftime.isra.0+0x242>
 800d862:	4b8f      	ldr	r3, [pc, #572]	; (800daa0 <__strftime.isra.0+0x494>)
 800d864:	6932      	ldr	r2, [r6, #16]
 800d866:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800d86a:	4648      	mov	r0, r9
 800d86c:	f7f2 fcc0 	bl	80001f0 <strlen>
 800d870:	f109 39ff 	add.w	r9, r9, #4294967295
 800d874:	4420      	add	r0, r4
 800d876:	1e6b      	subs	r3, r5, #1
 800d878:	42a0      	cmp	r0, r4
 800d87a:	d0cb      	beq.n	800d814 <__strftime.isra.0+0x208>
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	f67f aef7 	bls.w	800d670 <__strftime.isra.0+0x64>
 800d882:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d886:	553a      	strb	r2, [r7, r4]
 800d888:	3401      	adds	r4, #1
 800d88a:	e7f5      	b.n	800d878 <__strftime.isra.0+0x26c>
 800d88c:	6933      	ldr	r3, [r6, #16]
 800d88e:	4a84      	ldr	r2, [pc, #528]	; (800daa0 <__strftime.isra.0+0x494>)
 800d890:	330c      	adds	r3, #12
 800d892:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d896:	4648      	mov	r0, r9
 800d898:	f7f2 fcaa 	bl	80001f0 <strlen>
 800d89c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d8a0:	4420      	add	r0, r4
 800d8a2:	1e6b      	subs	r3, r5, #1
 800d8a4:	42a0      	cmp	r0, r4
 800d8a6:	d0b5      	beq.n	800d814 <__strftime.isra.0+0x208>
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	f67f aee1 	bls.w	800d670 <__strftime.isra.0+0x64>
 800d8ae:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d8b2:	553a      	strb	r2, [r7, r4]
 800d8b4:	3401      	adds	r4, #1
 800d8b6:	e7f5      	b.n	800d8a4 <__strftime.isra.0+0x298>
 800d8b8:	4b79      	ldr	r3, [pc, #484]	; (800daa0 <__strftime.isra.0+0x494>)
 800d8ba:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800d8be:	4648      	mov	r0, r9
 800d8c0:	f7f2 fc96 	bl	80001f0 <strlen>
 800d8c4:	f899 3000 	ldrb.w	r3, [r9]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0a3      	beq.n	800d814 <__strftime.isra.0+0x208>
 800d8cc:	4633      	mov	r3, r6
 800d8ce:	464a      	mov	r2, r9
 800d8d0:	1b29      	subs	r1, r5, r4
 800d8d2:	1938      	adds	r0, r7, r4
 800d8d4:	f7ff fe9a 	bl	800d60c <__strftime.isra.0>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f77f aec9 	ble.w	800d670 <__strftime.isra.0+0x64>
 800d8de:	4404      	add	r4, r0
 800d8e0:	e798      	b.n	800d814 <__strftime.isra.0+0x208>
 800d8e2:	4b6f      	ldr	r3, [pc, #444]	; (800daa0 <__strftime.isra.0+0x494>)
 800d8e4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800d8e8:	e7e9      	b.n	800d8be <__strftime.isra.0+0x2b2>
 800d8ea:	4b6d      	ldr	r3, [pc, #436]	; (800daa0 <__strftime.isra.0+0x494>)
 800d8ec:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800d8f0:	e7e5      	b.n	800d8be <__strftime.isra.0+0x2b2>
 800d8f2:	4b6b      	ldr	r3, [pc, #428]	; (800daa0 <__strftime.isra.0+0x494>)
 800d8f4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800d8f8:	e7e1      	b.n	800d8be <__strftime.isra.0+0x2b2>
 800d8fa:	496a      	ldr	r1, [pc, #424]	; (800daa4 <__strftime.isra.0+0x498>)
 800d8fc:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800d900:	458a      	cmp	sl, r1
 800d902:	bfac      	ite	ge
 800d904:	2100      	movge	r1, #0
 800d906:	2101      	movlt	r1, #1
 800d908:	f1ba 0f00 	cmp.w	sl, #0
 800d90c:	db11      	blt.n	800d932 <__strftime.isra.0+0x326>
 800d90e:	2064      	movs	r0, #100	; 0x64
 800d910:	fb9a f0f0 	sdiv	r0, sl, r0
 800d914:	3013      	adds	r0, #19
 800d916:	f1bb 0f00 	cmp.w	fp, #0
 800d91a:	d014      	beq.n	800d946 <__strftime.isra.0+0x33a>
 800d91c:	2863      	cmp	r0, #99	; 0x63
 800d91e:	dd27      	ble.n	800d970 <__strftime.isra.0+0x364>
 800d920:	4b61      	ldr	r3, [pc, #388]	; (800daa8 <__strftime.isra.0+0x49c>)
 800d922:	4a62      	ldr	r2, [pc, #392]	; (800daac <__strftime.isra.0+0x4a0>)
 800d924:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d928:	bf18      	it	ne
 800d92a:	461a      	movne	r2, r3
 800d92c:	f8df c198 	ldr.w	ip, [pc, #408]	; 800dac8 <__strftime.isra.0+0x4bc>
 800d930:	e00c      	b.n	800d94c <__strftime.isra.0+0x340>
 800d932:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800d936:	9103      	str	r1, [sp, #12]
 800d938:	f000 fee7 	bl	800e70a <abs>
 800d93c:	2264      	movs	r2, #100	; 0x64
 800d93e:	9903      	ldr	r1, [sp, #12]
 800d940:	fb90 f0f2 	sdiv	r0, r0, r2
 800d944:	e7e7      	b.n	800d916 <__strftime.isra.0+0x30a>
 800d946:	4a58      	ldr	r2, [pc, #352]	; (800daa8 <__strftime.isra.0+0x49c>)
 800d948:	f8df c180 	ldr.w	ip, [pc, #384]	; 800dacc <__strftime.isra.0+0x4c0>
 800d94c:	4b58      	ldr	r3, [pc, #352]	; (800dab0 <__strftime.isra.0+0x4a4>)
 800d94e:	9001      	str	r0, [sp, #4]
 800d950:	f1b9 0f02 	cmp.w	r9, #2
 800d954:	bf2c      	ite	cs
 800d956:	ebc1 0109 	rsbcs	r1, r1, r9
 800d95a:	f1c1 0102 	rsbcc	r1, r1, #2
 800d95e:	9100      	str	r1, [sp, #0]
 800d960:	4950      	ldr	r1, [pc, #320]	; (800daa4 <__strftime.isra.0+0x498>)
 800d962:	458a      	cmp	sl, r1
 800d964:	bfa8      	it	ge
 800d966:	4613      	movge	r3, r2
 800d968:	4662      	mov	r2, ip
 800d96a:	1b29      	subs	r1, r5, r4
 800d96c:	1938      	adds	r0, r7, r4
 800d96e:	e028      	b.n	800d9c2 <__strftime.isra.0+0x3b6>
 800d970:	4a4d      	ldr	r2, [pc, #308]	; (800daa8 <__strftime.isra.0+0x49c>)
 800d972:	e7db      	b.n	800d92c <__strftime.isra.0+0x320>
 800d974:	494f      	ldr	r1, [pc, #316]	; (800dab4 <__strftime.isra.0+0x4a8>)
 800d976:	4a50      	ldr	r2, [pc, #320]	; (800dab8 <__strftime.isra.0+0x4ac>)
 800d978:	68f3      	ldr	r3, [r6, #12]
 800d97a:	2864      	cmp	r0, #100	; 0x64
 800d97c:	bf08      	it	eq
 800d97e:	460a      	moveq	r2, r1
 800d980:	1b29      	subs	r1, r5, r4
 800d982:	1938      	adds	r0, r7, r4
 800d984:	f003 f8e8 	bl	8010b58 <sniprintf>
 800d988:	2800      	cmp	r0, #0
 800d98a:	f6ff ae71 	blt.w	800d670 <__strftime.isra.0+0x64>
 800d98e:	4404      	add	r4, r0
 800d990:	42a5      	cmp	r5, r4
 800d992:	f63f af3f 	bhi.w	800d814 <__strftime.isra.0+0x208>
 800d996:	e66b      	b.n	800d670 <__strftime.isra.0+0x64>
 800d998:	6970      	ldr	r0, [r6, #20]
 800d99a:	6933      	ldr	r3, [r6, #16]
 800d99c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	eb07 0904 	add.w	r9, r7, r4
 800d9a6:	eba5 0104 	sub.w	r1, r5, r4
 800d9aa:	f103 0301 	add.w	r3, r3, #1
 800d9ae:	db0b      	blt.n	800d9c8 <__strftime.isra.0+0x3bc>
 800d9b0:	2264      	movs	r2, #100	; 0x64
 800d9b2:	fb90 fcf2 	sdiv	ip, r0, r2
 800d9b6:	fb02 001c 	mls	r0, r2, ip, r0
 800d9ba:	4a40      	ldr	r2, [pc, #256]	; (800dabc <__strftime.isra.0+0x4b0>)
 800d9bc:	e9cd a000 	strd	sl, r0, [sp]
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f003 f8c9 	bl	8010b58 <sniprintf>
 800d9c6:	e7df      	b.n	800d988 <__strftime.isra.0+0x37c>
 800d9c8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d9cc:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800d9d0:	f000 fe9b 	bl	800e70a <abs>
 800d9d4:	2264      	movs	r2, #100	; 0x64
 800d9d6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800d9da:	fb90 fcf2 	sdiv	ip, r0, r2
 800d9de:	fb0c 0012 	mls	r0, ip, r2, r0
 800d9e2:	e7ea      	b.n	800d9ba <__strftime.isra.0+0x3ae>
 800d9e4:	2225      	movs	r2, #37	; 0x25
 800d9e6:	f88d 2018 	strb.w	r2, [sp, #24]
 800d9ea:	f1bb 0f00 	cmp.w	fp, #0
 800d9ee:	d011      	beq.n	800da14 <__strftime.isra.0+0x408>
 800d9f0:	f1b9 0f06 	cmp.w	r9, #6
 800d9f4:	bf38      	it	cc
 800d9f6:	f04f 0906 	movcc.w	r9, #6
 800d9fa:	f1b9 0306 	subs.w	r3, r9, #6
 800d9fe:	f88d b019 	strb.w	fp, [sp, #25]
 800da02:	d10c      	bne.n	800da1e <__strftime.isra.0+0x412>
 800da04:	f10d 001a 	add.w	r0, sp, #26
 800da08:	492d      	ldr	r1, [pc, #180]	; (800dac0 <__strftime.isra.0+0x4b4>)
 800da0a:	f003 f8d9 	bl	8010bc0 <strcpy>
 800da0e:	4633      	mov	r3, r6
 800da10:	aa06      	add	r2, sp, #24
 800da12:	e75d      	b.n	800d8d0 <__strftime.isra.0+0x2c4>
 800da14:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800da18:	f04f 090a 	mov.w	r9, #10
 800da1c:	e7ed      	b.n	800d9fa <__strftime.isra.0+0x3ee>
 800da1e:	4a29      	ldr	r2, [pc, #164]	; (800dac4 <__strftime.isra.0+0x4b8>)
 800da20:	211e      	movs	r1, #30
 800da22:	f10d 001a 	add.w	r0, sp, #26
 800da26:	f003 f897 	bl	8010b58 <sniprintf>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	ddea      	ble.n	800da04 <__strftime.isra.0+0x3f8>
 800da2e:	f10d 031a 	add.w	r3, sp, #26
 800da32:	4418      	add	r0, r3
 800da34:	e7e8      	b.n	800da08 <__strftime.isra.0+0x3fc>
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff fd86 	bl	800d548 <iso_year_adjust>
 800da3c:	4681      	mov	r9, r0
 800da3e:	6970      	ldr	r0, [r6, #20]
 800da40:	2800      	cmp	r0, #0
 800da42:	db11      	blt.n	800da68 <__strftime.isra.0+0x45c>
 800da44:	2364      	movs	r3, #100	; 0x64
 800da46:	fb90 f2f3 	sdiv	r2, r0, r3
 800da4a:	fb03 0012 	mls	r0, r3, r2, r0
 800da4e:	2264      	movs	r2, #100	; 0x64
 800da50:	4481      	add	r9, r0
 800da52:	fb99 f3f2 	sdiv	r3, r9, r2
 800da56:	fb02 9913 	mls	r9, r2, r3, r9
 800da5a:	4491      	add	r9, r2
 800da5c:	fbb9 f3f2 	udiv	r3, r9, r2
 800da60:	fb02 9313 	mls	r3, r2, r3, r9
 800da64:	4a13      	ldr	r2, [pc, #76]	; (800dab4 <__strftime.isra.0+0x4a8>)
 800da66:	e78b      	b.n	800d980 <__strftime.isra.0+0x374>
 800da68:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800da6c:	f000 fe4d 	bl	800e70a <abs>
 800da70:	2364      	movs	r3, #100	; 0x64
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	fb90 f2f3 	sdiv	r2, r0, r3
 800da7a:	fb02 0013 	mls	r0, r2, r3, r0
 800da7e:	da07      	bge.n	800da90 <__strftime.isra.0+0x484>
 800da80:	6972      	ldr	r2, [r6, #20]
 800da82:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800da86:	429a      	cmp	r2, r3
 800da88:	bfb8      	it	lt
 800da8a:	f04f 0901 	movlt.w	r9, #1
 800da8e:	e7de      	b.n	800da4e <__strftime.isra.0+0x442>
 800da90:	d0dd      	beq.n	800da4e <__strftime.isra.0+0x442>
 800da92:	6972      	ldr	r2, [r6, #20]
 800da94:	4b03      	ldr	r3, [pc, #12]	; (800daa4 <__strftime.isra.0+0x498>)
 800da96:	429a      	cmp	r2, r3
 800da98:	bfb8      	it	lt
 800da9a:	f04f 39ff 	movlt.w	r9, #4294967295
 800da9e:	e7d6      	b.n	800da4e <__strftime.isra.0+0x442>
 800daa0:	0803973c 	.word	0x0803973c
 800daa4:	fffff894 	.word	0xfffff894
 800daa8:	0803949a 	.word	0x0803949a
 800daac:	080395c6 	.word	0x080395c6
 800dab0:	08039c0d 	.word	0x08039c0d
 800dab4:	080395d6 	.word	0x080395d6
 800dab8:	080395c8 	.word	0x080395c8
 800dabc:	080395cc 	.word	0x080395cc
 800dac0:	080395df 	.word	0x080395df
 800dac4:	080395db 	.word	0x080395db
 800dac8:	080395be 	.word	0x080395be
 800dacc:	080395b7 	.word	0x080395b7
 800dad0:	6971      	ldr	r1, [r6, #20]
 800dad2:	4ab6      	ldr	r2, [pc, #728]	; (800ddac <__strftime.isra.0+0x7a0>)
 800dad4:	4291      	cmp	r1, r2
 800dad6:	bfac      	ite	ge
 800dad8:	2300      	movge	r3, #0
 800dada:	2301      	movlt	r3, #1
 800dadc:	4630      	mov	r0, r6
 800dade:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800dae2:	f7ff fd31 	bl	800d548 <iso_year_adjust>
 800dae6:	9904      	ldr	r1, [sp, #16]
 800dae8:	2900      	cmp	r1, #0
 800daea:	4682      	mov	sl, r0
 800daec:	db2c      	blt.n	800db48 <__strftime.isra.0+0x53c>
 800daee:	2264      	movs	r2, #100	; 0x64
 800daf0:	fb91 f2f2 	sdiv	r2, r1, r2
 800daf4:	3213      	adds	r2, #19
 800daf6:	6970      	ldr	r0, [r6, #20]
 800daf8:	2800      	cmp	r0, #0
 800dafa:	db30      	blt.n	800db5e <__strftime.isra.0+0x552>
 800dafc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800db00:	fb90 fefc 	sdiv	lr, r0, ip
 800db04:	fb0c 001e 	mls	r0, ip, lr, r0
 800db08:	f1ba 0f00 	cmp.w	sl, #0
 800db0c:	da36      	bge.n	800db7c <__strftime.isra.0+0x570>
 800db0e:	6971      	ldr	r1, [r6, #20]
 800db10:	4ba7      	ldr	r3, [pc, #668]	; (800ddb0 <__strftime.isra.0+0x7a4>)
 800db12:	4299      	cmp	r1, r3
 800db14:	db3d      	blt.n	800db92 <__strftime.isra.0+0x586>
 800db16:	4482      	add	sl, r0
 800db18:	f1ba 3fff 	cmp.w	sl, #4294967295
 800db1c:	d13e      	bne.n	800db9c <__strftime.isra.0+0x590>
 800db1e:	3a01      	subs	r2, #1
 800db20:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	2064      	movs	r0, #100	; 0x64
 800db28:	fb00 aa02 	mla	sl, r0, r2, sl
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 81ad 	beq.w	800de8c <__strftime.isra.0+0x880>
 800db32:	222d      	movs	r2, #45	; 0x2d
 800db34:	f88d 2018 	strb.w	r2, [sp, #24]
 800db38:	f1b9 0f00 	cmp.w	r9, #0
 800db3c:	d001      	beq.n	800db42 <__strftime.isra.0+0x536>
 800db3e:	f109 39ff 	add.w	r9, r9, #4294967295
 800db42:	f10d 0219 	add.w	r2, sp, #25
 800db46:	e1ac      	b.n	800dea2 <__strftime.isra.0+0x896>
 800db48:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800db4c:	9104      	str	r1, [sp, #16]
 800db4e:	f000 fddc 	bl	800e70a <abs>
 800db52:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800db56:	9904      	ldr	r1, [sp, #16]
 800db58:	fb90 f2fc 	sdiv	r2, r0, ip
 800db5c:	e7cb      	b.n	800daf6 <__strftime.isra.0+0x4ea>
 800db5e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800db62:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800db66:	f000 fdd0 	bl	800e70a <abs>
 800db6a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800db6e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800db72:	fb90 fefc 	sdiv	lr, r0, ip
 800db76:	fb0e 001c 	mls	r0, lr, ip, r0
 800db7a:	e7c5      	b.n	800db08 <__strftime.isra.0+0x4fc>
 800db7c:	d0cb      	beq.n	800db16 <__strftime.isra.0+0x50a>
 800db7e:	4b8b      	ldr	r3, [pc, #556]	; (800ddac <__strftime.isra.0+0x7a0>)
 800db80:	4299      	cmp	r1, r3
 800db82:	bfb4      	ite	lt
 800db84:	2301      	movlt	r3, #1
 800db86:	2300      	movge	r3, #0
 800db88:	9303      	str	r3, [sp, #12]
 800db8a:	bfb8      	it	lt
 800db8c:	f04f 3aff 	movlt.w	sl, #4294967295
 800db90:	e7c1      	b.n	800db16 <__strftime.isra.0+0x50a>
 800db92:	f04f 0a01 	mov.w	sl, #1
 800db96:	f8cd a00c 	str.w	sl, [sp, #12]
 800db9a:	e7bc      	b.n	800db16 <__strftime.isra.0+0x50a>
 800db9c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800dba0:	bf04      	itt	eq
 800dba2:	3201      	addeq	r2, #1
 800dba4:	f04f 0a00 	moveq.w	sl, #0
 800dba8:	e7bc      	b.n	800db24 <__strftime.isra.0+0x518>
 800dbaa:	4982      	ldr	r1, [pc, #520]	; (800ddb4 <__strftime.isra.0+0x7a8>)
 800dbac:	4a82      	ldr	r2, [pc, #520]	; (800ddb8 <__strftime.isra.0+0x7ac>)
 800dbae:	68b3      	ldr	r3, [r6, #8]
 800dbb0:	286b      	cmp	r0, #107	; 0x6b
 800dbb2:	bf08      	it	eq
 800dbb4:	460a      	moveq	r2, r1
 800dbb6:	e6e3      	b.n	800d980 <__strftime.isra.0+0x374>
 800dbb8:	68b3      	ldr	r3, [r6, #8]
 800dbba:	b163      	cbz	r3, 800dbd6 <__strftime.isra.0+0x5ca>
 800dbbc:	2b0c      	cmp	r3, #12
 800dbbe:	d004      	beq.n	800dbca <__strftime.isra.0+0x5be>
 800dbc0:	210c      	movs	r1, #12
 800dbc2:	fb93 f2f1 	sdiv	r2, r3, r1
 800dbc6:	fb01 3312 	mls	r3, r1, r2, r3
 800dbca:	497b      	ldr	r1, [pc, #492]	; (800ddb8 <__strftime.isra.0+0x7ac>)
 800dbcc:	4a79      	ldr	r2, [pc, #484]	; (800ddb4 <__strftime.isra.0+0x7a8>)
 800dbce:	2849      	cmp	r0, #73	; 0x49
 800dbd0:	bf08      	it	eq
 800dbd2:	460a      	moveq	r2, r1
 800dbd4:	e6d4      	b.n	800d980 <__strftime.isra.0+0x374>
 800dbd6:	230c      	movs	r3, #12
 800dbd8:	e7f7      	b.n	800dbca <__strftime.isra.0+0x5be>
 800dbda:	69f3      	ldr	r3, [r6, #28]
 800dbdc:	4a77      	ldr	r2, [pc, #476]	; (800ddbc <__strftime.isra.0+0x7b0>)
 800dbde:	3301      	adds	r3, #1
 800dbe0:	e6ce      	b.n	800d980 <__strftime.isra.0+0x374>
 800dbe2:	6933      	ldr	r3, [r6, #16]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	e73d      	b.n	800da64 <__strftime.isra.0+0x458>
 800dbe8:	6873      	ldr	r3, [r6, #4]
 800dbea:	e73b      	b.n	800da64 <__strftime.isra.0+0x458>
 800dbec:	1e6b      	subs	r3, r5, #1
 800dbee:	429c      	cmp	r4, r3
 800dbf0:	f4bf ad3e 	bcs.w	800d670 <__strftime.isra.0+0x64>
 800dbf4:	230a      	movs	r3, #10
 800dbf6:	553b      	strb	r3, [r7, r4]
 800dbf8:	3401      	adds	r4, #1
 800dbfa:	e60b      	b.n	800d814 <__strftime.isra.0+0x208>
 800dbfc:	68b3      	ldr	r3, [r6, #8]
 800dbfe:	2b0b      	cmp	r3, #11
 800dc00:	4b6f      	ldr	r3, [pc, #444]	; (800ddc0 <__strftime.isra.0+0x7b4>)
 800dc02:	bfd4      	ite	le
 800dc04:	2200      	movle	r2, #0
 800dc06:	2201      	movgt	r2, #1
 800dc08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dc0c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800dc10:	4648      	mov	r0, r9
 800dc12:	f7f2 faed 	bl	80001f0 <strlen>
 800dc16:	f109 32ff 	add.w	r2, r9, #4294967295
 800dc1a:	4420      	add	r0, r4
 800dc1c:	f105 3cff 	add.w	ip, r5, #4294967295
 800dc20:	42a0      	cmp	r0, r4
 800dc22:	f43f adf7 	beq.w	800d814 <__strftime.isra.0+0x208>
 800dc26:	45a4      	cmp	ip, r4
 800dc28:	f67f ad22 	bls.w	800d670 <__strftime.isra.0+0x64>
 800dc2c:	f898 1000 	ldrb.w	r1, [r8]
 800dc30:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800dc34:	2950      	cmp	r1, #80	; 0x50
 800dc36:	d107      	bne.n	800dc48 <__strftime.isra.0+0x63c>
 800dc38:	4962      	ldr	r1, [pc, #392]	; (800ddc4 <__strftime.isra.0+0x7b8>)
 800dc3a:	5cc9      	ldrb	r1, [r1, r3]
 800dc3c:	f001 0103 	and.w	r1, r1, #3
 800dc40:	2901      	cmp	r1, #1
 800dc42:	bf08      	it	eq
 800dc44:	3320      	addeq	r3, #32
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	553b      	strb	r3, [r7, r4]
 800dc4a:	3401      	adds	r4, #1
 800dc4c:	e7e8      	b.n	800dc20 <__strftime.isra.0+0x614>
 800dc4e:	6873      	ldr	r3, [r6, #4]
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	4a5d      	ldr	r2, [pc, #372]	; (800ddc8 <__strftime.isra.0+0x7bc>)
 800dc54:	68b3      	ldr	r3, [r6, #8]
 800dc56:	1b29      	subs	r1, r5, r4
 800dc58:	1938      	adds	r0, r7, r4
 800dc5a:	f002 ff7d 	bl	8010b58 <sniprintf>
 800dc5e:	e693      	b.n	800d988 <__strftime.isra.0+0x37c>
 800dc60:	6a33      	ldr	r3, [r6, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	db7a      	blt.n	800dd5c <__strftime.isra.0+0x750>
 800dc66:	f000 fae5 	bl	800e234 <__tz_lock>
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	b90b      	cbnz	r3, 800dc72 <__strftime.isra.0+0x666>
 800dc6e:	f000 faed 	bl	800e24c <_tzset_unlocked>
 800dc72:	f001 fdeb 	bl	800f84c <__gettzinfo>
 800dc76:	6a33      	ldr	r3, [r6, #32]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	bfd4      	ite	le
 800dc7c:	2200      	movle	r2, #0
 800dc7e:	2201      	movgt	r2, #1
 800dc80:	2328      	movs	r3, #40	; 0x28
 800dc82:	fb02 3303 	mla	r3, r2, r3, r3
 800dc86:	58c3      	ldr	r3, [r0, r3]
 800dc88:	f1c3 0900 	rsb	r9, r3, #0
 800dc8c:	f000 fad8 	bl	800e240 <__tz_unlock>
 800dc90:	2301      	movs	r3, #1
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	6972      	ldr	r2, [r6, #20]
 800dc96:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800dc9a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800dc9e:	f16c 0c00 	sbc.w	ip, ip, #0
 800dca2:	f1bc 0f00 	cmp.w	ip, #0
 800dca6:	eba5 0104 	sub.w	r1, r5, r4
 800dcaa:	eb07 0004 	add.w	r0, r7, r4
 800dcae:	da02      	bge.n	800dcb6 <__strftime.isra.0+0x6aa>
 800dcb0:	3303      	adds	r3, #3
 800dcb2:	f14c 0c00 	adc.w	ip, ip, #0
 800dcb6:	089b      	lsrs	r3, r3, #2
 800dcb8:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800dcbc:	f102 3aff 	add.w	sl, r2, #4294967295
 800dcc0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800dcc4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800dcc8:	fb9a fefe 	sdiv	lr, sl, lr
 800dccc:	ebb3 030e 	subs.w	r3, r3, lr
 800dcd0:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800dcd4:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800dcd8:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800dcdc:	fb9a fefe 	sdiv	lr, sl, lr
 800dce0:	eb13 030e 	adds.w	r3, r3, lr
 800dce4:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800dce8:	3a46      	subs	r2, #70	; 0x46
 800dcea:	f240 1c6d 	movw	ip, #365	; 0x16d
 800dcee:	fb0c f202 	mul.w	r2, ip, r2
 800dcf2:	189b      	adds	r3, r3, r2
 800dcf4:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800dcf8:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800dcfc:	f04f 0c18 	mov.w	ip, #24
 800dd00:	eb13 030e 	adds.w	r3, r3, lr
 800dd04:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800dd08:	fba3 3e0c 	umull	r3, lr, r3, ip
 800dd0c:	fb0c e202 	mla	r2, ip, r2, lr
 800dd10:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800dd14:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800dd18:	eb13 030e 	adds.w	r3, r3, lr
 800dd1c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800dd20:	fba3 320c 	umull	r3, r2, r3, ip
 800dd24:	fb0c 220e 	mla	r2, ip, lr, r2
 800dd28:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800dd2c:	eb13 030e 	adds.w	r3, r3, lr
 800dd30:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800dd34:	fba3 3e0c 	umull	r3, lr, r3, ip
 800dd38:	fb0c e202 	mla	r2, ip, r2, lr
 800dd3c:	f8d6 e000 	ldr.w	lr, [r6]
 800dd40:	eb13 030e 	adds.w	r3, r3, lr
 800dd44:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800dd48:	ebb3 0309 	subs.w	r3, r3, r9
 800dd4c:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800dd50:	e9cd 3200 	strd	r3, r2, [sp]
 800dd54:	4a1d      	ldr	r2, [pc, #116]	; (800ddcc <__strftime.isra.0+0x7c0>)
 800dd56:	f002 feff 	bl	8010b58 <sniprintf>
 800dd5a:	e615      	b.n	800d988 <__strftime.isra.0+0x37c>
 800dd5c:	f04f 0900 	mov.w	r9, #0
 800dd60:	e798      	b.n	800dc94 <__strftime.isra.0+0x688>
 800dd62:	6833      	ldr	r3, [r6, #0]
 800dd64:	e67e      	b.n	800da64 <__strftime.isra.0+0x458>
 800dd66:	1e6b      	subs	r3, r5, #1
 800dd68:	429c      	cmp	r4, r3
 800dd6a:	f4bf ac81 	bcs.w	800d670 <__strftime.isra.0+0x64>
 800dd6e:	2309      	movs	r3, #9
 800dd70:	e741      	b.n	800dbf6 <__strftime.isra.0+0x5ea>
 800dd72:	6833      	ldr	r3, [r6, #0]
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	6873      	ldr	r3, [r6, #4]
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <__strftime.isra.0+0x7c4>)
 800dd7c:	68b3      	ldr	r3, [r6, #8]
 800dd7e:	e5f4      	b.n	800d96a <__strftime.isra.0+0x35e>
 800dd80:	1e6b      	subs	r3, r5, #1
 800dd82:	429c      	cmp	r4, r3
 800dd84:	f4bf ac74 	bcs.w	800d670 <__strftime.isra.0+0x64>
 800dd88:	69b3      	ldr	r3, [r6, #24]
 800dd8a:	1c62      	adds	r2, r4, #1
 800dd8c:	b91b      	cbnz	r3, 800dd96 <__strftime.isra.0+0x78a>
 800dd8e:	2337      	movs	r3, #55	; 0x37
 800dd90:	553b      	strb	r3, [r7, r4]
 800dd92:	4614      	mov	r4, r2
 800dd94:	e53e      	b.n	800d814 <__strftime.isra.0+0x208>
 800dd96:	3330      	adds	r3, #48	; 0x30
 800dd98:	e7fa      	b.n	800dd90 <__strftime.isra.0+0x784>
 800dd9a:	69f3      	ldr	r3, [r6, #28]
 800dd9c:	69b2      	ldr	r2, [r6, #24]
 800dd9e:	3307      	adds	r3, #7
 800dda0:	1a9b      	subs	r3, r3, r2
 800dda2:	2207      	movs	r2, #7
 800dda4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dda8:	e65c      	b.n	800da64 <__strftime.isra.0+0x458>
 800ddaa:	bf00      	nop
 800ddac:	fffff894 	.word	0xfffff894
 800ddb0:	fffff895 	.word	0xfffff895
 800ddb4:	080395c8 	.word	0x080395c8
 800ddb8:	080395d6 	.word	0x080395d6
 800ddbc:	080395eb 	.word	0x080395eb
 800ddc0:	0803973c 	.word	0x0803973c
 800ddc4:	08039875 	.word	0x08039875
 800ddc8:	080395fa 	.word	0x080395fa
 800ddcc:	080395f0 	.word	0x080395f0
 800ddd0:	080395f5 	.word	0x080395f5
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff fbb7 	bl	800d548 <iso_year_adjust>
 800ddda:	69b2      	ldr	r2, [r6, #24]
 800dddc:	b132      	cbz	r2, 800ddec <__strftime.isra.0+0x7e0>
 800ddde:	3a01      	subs	r2, #1
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dc28      	bgt.n	800de36 <__strftime.isra.0+0x82a>
 800dde4:	69f3      	ldr	r3, [r6, #28]
 800dde6:	d103      	bne.n	800ddf0 <__strftime.isra.0+0x7e4>
 800dde8:	330a      	adds	r3, #10
 800ddea:	e7d9      	b.n	800dda0 <__strftime.isra.0+0x794>
 800ddec:	2206      	movs	r2, #6
 800ddee:	e7f7      	b.n	800dde0 <__strftime.isra.0+0x7d4>
 800ddf0:	6971      	ldr	r1, [r6, #20]
 800ddf2:	2900      	cmp	r1, #0
 800ddf4:	eba2 0203 	sub.w	r2, r2, r3
 800ddf8:	f240 736b 	movw	r3, #1899	; 0x76b
 800ddfc:	bfa8      	it	ge
 800ddfe:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800de02:	440b      	add	r3, r1
 800de04:	0799      	lsls	r1, r3, #30
 800de06:	d105      	bne.n	800de14 <__strftime.isra.0+0x808>
 800de08:	2064      	movs	r0, #100	; 0x64
 800de0a:	fb93 f1f0 	sdiv	r1, r3, r0
 800de0e:	fb00 3111 	mls	r1, r0, r1, r3
 800de12:	b971      	cbnz	r1, 800de32 <__strftime.isra.0+0x826>
 800de14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800de18:	fb93 f0f1 	sdiv	r0, r3, r1
 800de1c:	fb01 3310 	mls	r3, r1, r0, r3
 800de20:	fab3 f383 	clz	r3, r3
 800de24:	095b      	lsrs	r3, r3, #5
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b05      	cmp	r3, #5
 800de2a:	bfb4      	ite	lt
 800de2c:	2335      	movlt	r3, #53	; 0x35
 800de2e:	2334      	movge	r3, #52	; 0x34
 800de30:	e618      	b.n	800da64 <__strftime.isra.0+0x458>
 800de32:	2301      	movs	r3, #1
 800de34:	e7f7      	b.n	800de26 <__strftime.isra.0+0x81a>
 800de36:	2301      	movs	r3, #1
 800de38:	e614      	b.n	800da64 <__strftime.isra.0+0x458>
 800de3a:	1e6b      	subs	r3, r5, #1
 800de3c:	429c      	cmp	r4, r3
 800de3e:	f4bf ac17 	bcs.w	800d670 <__strftime.isra.0+0x64>
 800de42:	69b3      	ldr	r3, [r6, #24]
 800de44:	3330      	adds	r3, #48	; 0x30
 800de46:	e6d6      	b.n	800dbf6 <__strftime.isra.0+0x5ea>
 800de48:	69b2      	ldr	r2, [r6, #24]
 800de4a:	b11a      	cbz	r2, 800de54 <__strftime.isra.0+0x848>
 800de4c:	3a01      	subs	r2, #1
 800de4e:	69f3      	ldr	r3, [r6, #28]
 800de50:	3307      	adds	r3, #7
 800de52:	e7a5      	b.n	800dda0 <__strftime.isra.0+0x794>
 800de54:	2206      	movs	r2, #6
 800de56:	e7fa      	b.n	800de4e <__strftime.isra.0+0x842>
 800de58:	6970      	ldr	r0, [r6, #20]
 800de5a:	2800      	cmp	r0, #0
 800de5c:	db05      	blt.n	800de6a <__strftime.isra.0+0x85e>
 800de5e:	2364      	movs	r3, #100	; 0x64
 800de60:	fb90 f2f3 	sdiv	r2, r0, r3
 800de64:	fb02 0313 	mls	r3, r2, r3, r0
 800de68:	e5fc      	b.n	800da64 <__strftime.isra.0+0x458>
 800de6a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800de6e:	f000 fc4c 	bl	800e70a <abs>
 800de72:	e7f4      	b.n	800de5e <__strftime.isra.0+0x852>
 800de74:	6972      	ldr	r2, [r6, #20]
 800de76:	494c      	ldr	r1, [pc, #304]	; (800dfa8 <__strftime.isra.0+0x99c>)
 800de78:	428a      	cmp	r2, r1
 800de7a:	da05      	bge.n	800de88 <__strftime.isra.0+0x87c>
 800de7c:	202d      	movs	r0, #45	; 0x2d
 800de7e:	f88d 0018 	strb.w	r0, [sp, #24]
 800de82:	eba1 0a02 	sub.w	sl, r1, r2
 800de86:	e657      	b.n	800db38 <__strftime.isra.0+0x52c>
 800de88:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800de8c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800de90:	d106      	bne.n	800dea0 <__strftime.isra.0+0x894>
 800de92:	f242 720f 	movw	r2, #9999	; 0x270f
 800de96:	4592      	cmp	sl, r2
 800de98:	d902      	bls.n	800dea0 <__strftime.isra.0+0x894>
 800de9a:	f88d b018 	strb.w	fp, [sp, #24]
 800de9e:	e64b      	b.n	800db38 <__strftime.isra.0+0x52c>
 800dea0:	aa06      	add	r2, sp, #24
 800dea2:	2125      	movs	r1, #37	; 0x25
 800dea4:	7011      	strb	r1, [r2, #0]
 800dea6:	f1bb 0f00 	cmp.w	fp, #0
 800deaa:	d108      	bne.n	800debe <__strftime.isra.0+0x8b2>
 800deac:	1c50      	adds	r0, r2, #1
 800deae:	493f      	ldr	r1, [pc, #252]	; (800dfac <__strftime.isra.0+0x9a0>)
 800deb0:	f002 fe86 	bl	8010bc0 <strcpy>
 800deb4:	f8cd a000 	str.w	sl, [sp]
 800deb8:	464b      	mov	r3, r9
 800deba:	aa06      	add	r2, sp, #24
 800debc:	e6cb      	b.n	800dc56 <__strftime.isra.0+0x64a>
 800debe:	2330      	movs	r3, #48	; 0x30
 800dec0:	1c90      	adds	r0, r2, #2
 800dec2:	7053      	strb	r3, [r2, #1]
 800dec4:	e7f3      	b.n	800deae <__strftime.isra.0+0x8a2>
 800dec6:	6a33      	ldr	r3, [r6, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f6ff aca3 	blt.w	800d814 <__strftime.isra.0+0x208>
 800dece:	f000 f9b1 	bl	800e234 <__tz_lock>
 800ded2:	9b02      	ldr	r3, [sp, #8]
 800ded4:	b90b      	cbnz	r3, 800deda <__strftime.isra.0+0x8ce>
 800ded6:	f000 f9b9 	bl	800e24c <_tzset_unlocked>
 800deda:	f001 fcb7 	bl	800f84c <__gettzinfo>
 800dede:	6a33      	ldr	r3, [r6, #32]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bfd4      	ite	le
 800dee4:	2200      	movle	r2, #0
 800dee6:	2201      	movgt	r2, #1
 800dee8:	2328      	movs	r3, #40	; 0x28
 800deea:	fb02 3303 	mla	r3, r2, r3, r3
 800deee:	eb07 0a04 	add.w	sl, r7, r4
 800def2:	58c3      	ldr	r3, [r0, r3]
 800def4:	f1c3 0900 	rsb	r9, r3, #0
 800def8:	f000 f9a2 	bl	800e240 <__tz_unlock>
 800defc:	233c      	movs	r3, #60	; 0x3c
 800defe:	fb99 f0f3 	sdiv	r0, r9, r3
 800df02:	f001 fca7 	bl	800f854 <labs>
 800df06:	233c      	movs	r3, #60	; 0x3c
 800df08:	eba5 0b04 	sub.w	fp, r5, r4
 800df0c:	fb90 f2f3 	sdiv	r2, r0, r3
 800df10:	fb02 0013 	mls	r0, r2, r3, r0
 800df14:	9000      	str	r0, [sp, #0]
 800df16:	4a26      	ldr	r2, [pc, #152]	; (800dfb0 <__strftime.isra.0+0x9a4>)
 800df18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800df1c:	4659      	mov	r1, fp
 800df1e:	4650      	mov	r0, sl
 800df20:	fb99 f3f3 	sdiv	r3, r9, r3
 800df24:	f002 fe18 	bl	8010b58 <sniprintf>
 800df28:	2800      	cmp	r0, #0
 800df2a:	f6ff aba1 	blt.w	800d670 <__strftime.isra.0+0x64>
 800df2e:	4404      	add	r4, r0
 800df30:	42a5      	cmp	r5, r4
 800df32:	f67f ab9d 	bls.w	800d670 <__strftime.isra.0+0x64>
 800df36:	2301      	movs	r3, #1
 800df38:	9302      	str	r3, [sp, #8]
 800df3a:	e46b      	b.n	800d814 <__strftime.isra.0+0x208>
 800df3c:	6a33      	ldr	r3, [r6, #32]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f6ff ac68 	blt.w	800d814 <__strftime.isra.0+0x208>
 800df44:	f000 f976 	bl	800e234 <__tz_lock>
 800df48:	9b02      	ldr	r3, [sp, #8]
 800df4a:	b90b      	cbnz	r3, 800df50 <__strftime.isra.0+0x944>
 800df4c:	f000 f97e 	bl	800e24c <_tzset_unlocked>
 800df50:	6a33      	ldr	r3, [r6, #32]
 800df52:	4a18      	ldr	r2, [pc, #96]	; (800dfb4 <__strftime.isra.0+0x9a8>)
 800df54:	2b00      	cmp	r3, #0
 800df56:	bfd4      	ite	le
 800df58:	2300      	movle	r3, #0
 800df5a:	2301      	movgt	r3, #1
 800df5c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800df60:	4648      	mov	r0, r9
 800df62:	f7f2 f945 	bl	80001f0 <strlen>
 800df66:	f109 39ff 	add.w	r9, r9, #4294967295
 800df6a:	4420      	add	r0, r4
 800df6c:	1e6b      	subs	r3, r5, #1
 800df6e:	42a0      	cmp	r0, r4
 800df70:	d102      	bne.n	800df78 <__strftime.isra.0+0x96c>
 800df72:	f000 f965 	bl	800e240 <__tz_unlock>
 800df76:	e7de      	b.n	800df36 <__strftime.isra.0+0x92a>
 800df78:	42a3      	cmp	r3, r4
 800df7a:	d904      	bls.n	800df86 <__strftime.isra.0+0x97a>
 800df7c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800df80:	553a      	strb	r2, [r7, r4]
 800df82:	3401      	adds	r4, #1
 800df84:	e7f3      	b.n	800df6e <__strftime.isra.0+0x962>
 800df86:	f000 f95b 	bl	800e240 <__tz_unlock>
 800df8a:	f7ff bb71 	b.w	800d670 <__strftime.isra.0+0x64>
 800df8e:	1e6b      	subs	r3, r5, #1
 800df90:	429c      	cmp	r4, r3
 800df92:	f4bf ab6d 	bcs.w	800d670 <__strftime.isra.0+0x64>
 800df96:	2325      	movs	r3, #37	; 0x25
 800df98:	e62d      	b.n	800dbf6 <__strftime.isra.0+0x5ea>
 800df9a:	b10d      	cbz	r5, 800dfa0 <__strftime.isra.0+0x994>
 800df9c:	2300      	movs	r3, #0
 800df9e:	553b      	strb	r3, [r7, r4]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	b00f      	add	sp, #60	; 0x3c
 800dfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa8:	fffff894 	.word	0xfffff894
 800dfac:	080395e7 	.word	0x080395e7
 800dfb0:	08039604 	.word	0x08039604
 800dfb4:	20000324 	.word	0x20000324

0800dfb8 <strftime>:
 800dfb8:	f7ff bb28 	b.w	800d60c <__strftime.isra.0>

0800dfbc <strncpy>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	3901      	subs	r1, #1
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	b132      	cbz	r2, 800dfd2 <strncpy+0x16>
 800dfc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dfc8:	f803 4b01 	strb.w	r4, [r3], #1
 800dfcc:	3a01      	subs	r2, #1
 800dfce:	2c00      	cmp	r4, #0
 800dfd0:	d1f7      	bne.n	800dfc2 <strncpy+0x6>
 800dfd2:	441a      	add	r2, r3
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d100      	bne.n	800dfdc <strncpy+0x20>
 800dfda:	bd10      	pop	{r4, pc}
 800dfdc:	f803 1b01 	strb.w	r1, [r3], #1
 800dfe0:	e7f9      	b.n	800dfd6 <strncpy+0x1a>
	...

0800dfe4 <_strtoul_l.constprop.0>:
 800dfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	4f36      	ldr	r7, [pc, #216]	; (800e0c4 <_strtoul_l.constprop.0+0xe0>)
 800dfea:	4686      	mov	lr, r0
 800dfec:	460d      	mov	r5, r1
 800dfee:	4628      	mov	r0, r5
 800dff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dff4:	5de6      	ldrb	r6, [r4, r7]
 800dff6:	f016 0608 	ands.w	r6, r6, #8
 800dffa:	d1f8      	bne.n	800dfee <_strtoul_l.constprop.0+0xa>
 800dffc:	2c2d      	cmp	r4, #45	; 0x2d
 800dffe:	d12f      	bne.n	800e060 <_strtoul_l.constprop.0+0x7c>
 800e000:	782c      	ldrb	r4, [r5, #0]
 800e002:	2601      	movs	r6, #1
 800e004:	1c85      	adds	r5, r0, #2
 800e006:	2b00      	cmp	r3, #0
 800e008:	d057      	beq.n	800e0ba <_strtoul_l.constprop.0+0xd6>
 800e00a:	2b10      	cmp	r3, #16
 800e00c:	d109      	bne.n	800e022 <_strtoul_l.constprop.0+0x3e>
 800e00e:	2c30      	cmp	r4, #48	; 0x30
 800e010:	d107      	bne.n	800e022 <_strtoul_l.constprop.0+0x3e>
 800e012:	7828      	ldrb	r0, [r5, #0]
 800e014:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e018:	2858      	cmp	r0, #88	; 0x58
 800e01a:	d149      	bne.n	800e0b0 <_strtoul_l.constprop.0+0xcc>
 800e01c:	786c      	ldrb	r4, [r5, #1]
 800e01e:	2310      	movs	r3, #16
 800e020:	3502      	adds	r5, #2
 800e022:	f04f 38ff 	mov.w	r8, #4294967295
 800e026:	2700      	movs	r7, #0
 800e028:	fbb8 f8f3 	udiv	r8, r8, r3
 800e02c:	fb03 f908 	mul.w	r9, r3, r8
 800e030:	ea6f 0909 	mvn.w	r9, r9
 800e034:	4638      	mov	r0, r7
 800e036:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e03a:	f1bc 0f09 	cmp.w	ip, #9
 800e03e:	d814      	bhi.n	800e06a <_strtoul_l.constprop.0+0x86>
 800e040:	4664      	mov	r4, ip
 800e042:	42a3      	cmp	r3, r4
 800e044:	dd22      	ble.n	800e08c <_strtoul_l.constprop.0+0xa8>
 800e046:	2f00      	cmp	r7, #0
 800e048:	db1d      	blt.n	800e086 <_strtoul_l.constprop.0+0xa2>
 800e04a:	4580      	cmp	r8, r0
 800e04c:	d31b      	bcc.n	800e086 <_strtoul_l.constprop.0+0xa2>
 800e04e:	d101      	bne.n	800e054 <_strtoul_l.constprop.0+0x70>
 800e050:	45a1      	cmp	r9, r4
 800e052:	db18      	blt.n	800e086 <_strtoul_l.constprop.0+0xa2>
 800e054:	fb00 4003 	mla	r0, r0, r3, r4
 800e058:	2701      	movs	r7, #1
 800e05a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e05e:	e7ea      	b.n	800e036 <_strtoul_l.constprop.0+0x52>
 800e060:	2c2b      	cmp	r4, #43	; 0x2b
 800e062:	bf04      	itt	eq
 800e064:	782c      	ldrbeq	r4, [r5, #0]
 800e066:	1c85      	addeq	r5, r0, #2
 800e068:	e7cd      	b.n	800e006 <_strtoul_l.constprop.0+0x22>
 800e06a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e06e:	f1bc 0f19 	cmp.w	ip, #25
 800e072:	d801      	bhi.n	800e078 <_strtoul_l.constprop.0+0x94>
 800e074:	3c37      	subs	r4, #55	; 0x37
 800e076:	e7e4      	b.n	800e042 <_strtoul_l.constprop.0+0x5e>
 800e078:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e07c:	f1bc 0f19 	cmp.w	ip, #25
 800e080:	d804      	bhi.n	800e08c <_strtoul_l.constprop.0+0xa8>
 800e082:	3c57      	subs	r4, #87	; 0x57
 800e084:	e7dd      	b.n	800e042 <_strtoul_l.constprop.0+0x5e>
 800e086:	f04f 37ff 	mov.w	r7, #4294967295
 800e08a:	e7e6      	b.n	800e05a <_strtoul_l.constprop.0+0x76>
 800e08c:	2f00      	cmp	r7, #0
 800e08e:	da07      	bge.n	800e0a0 <_strtoul_l.constprop.0+0xbc>
 800e090:	2322      	movs	r3, #34	; 0x22
 800e092:	f8ce 3000 	str.w	r3, [lr]
 800e096:	f04f 30ff 	mov.w	r0, #4294967295
 800e09a:	b932      	cbnz	r2, 800e0aa <_strtoul_l.constprop.0+0xc6>
 800e09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0a0:	b106      	cbz	r6, 800e0a4 <_strtoul_l.constprop.0+0xc0>
 800e0a2:	4240      	negs	r0, r0
 800e0a4:	2a00      	cmp	r2, #0
 800e0a6:	d0f9      	beq.n	800e09c <_strtoul_l.constprop.0+0xb8>
 800e0a8:	b107      	cbz	r7, 800e0ac <_strtoul_l.constprop.0+0xc8>
 800e0aa:	1e69      	subs	r1, r5, #1
 800e0ac:	6011      	str	r1, [r2, #0]
 800e0ae:	e7f5      	b.n	800e09c <_strtoul_l.constprop.0+0xb8>
 800e0b0:	2430      	movs	r4, #48	; 0x30
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1b5      	bne.n	800e022 <_strtoul_l.constprop.0+0x3e>
 800e0b6:	2308      	movs	r3, #8
 800e0b8:	e7b3      	b.n	800e022 <_strtoul_l.constprop.0+0x3e>
 800e0ba:	2c30      	cmp	r4, #48	; 0x30
 800e0bc:	d0a9      	beq.n	800e012 <_strtoul_l.constprop.0+0x2e>
 800e0be:	230a      	movs	r3, #10
 800e0c0:	e7af      	b.n	800e022 <_strtoul_l.constprop.0+0x3e>
 800e0c2:	bf00      	nop
 800e0c4:	08039875 	.word	0x08039875

0800e0c8 <_strtoul_r>:
 800e0c8:	f7ff bf8c 	b.w	800dfe4 <_strtoul_l.constprop.0>

0800e0cc <strtoul>:
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	460a      	mov	r2, r1
 800e0d0:	4601      	mov	r1, r0
 800e0d2:	4802      	ldr	r0, [pc, #8]	; (800e0dc <strtoul+0x10>)
 800e0d4:	6800      	ldr	r0, [r0, #0]
 800e0d6:	f7ff bf85 	b.w	800dfe4 <_strtoul_l.constprop.0>
 800e0da:	bf00      	nop
 800e0dc:	200002c0 	.word	0x200002c0

0800e0e0 <__tzcalc_limits>:
 800e0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	f001 fbb1 	bl	800f84c <__gettzinfo>
 800e0ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800e0ee:	429d      	cmp	r5, r3
 800e0f0:	f340 8099 	ble.w	800e226 <__tzcalc_limits+0x146>
 800e0f4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800e0f8:	18ac      	adds	r4, r5, r2
 800e0fa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800e0fe:	f240 126d 	movw	r2, #365	; 0x16d
 800e102:	10a4      	asrs	r4, r4, #2
 800e104:	fb02 4403 	mla	r4, r2, r3, r4
 800e108:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800e10c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800e110:	fb93 f3f2 	sdiv	r3, r3, r2
 800e114:	441c      	add	r4, r3
 800e116:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e11a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800e11e:	fb95 fcf3 	sdiv	ip, r5, r3
 800e122:	fb03 5c1c 	mls	ip, r3, ip, r5
 800e126:	186a      	adds	r2, r5, r1
 800e128:	fabc f68c 	clz	r6, ip
 800e12c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e130:	f005 0303 	and.w	r3, r5, #3
 800e134:	4414      	add	r4, r2
 800e136:	2264      	movs	r2, #100	; 0x64
 800e138:	6045      	str	r5, [r0, #4]
 800e13a:	fb95 f7f2 	sdiv	r7, r5, r2
 800e13e:	0976      	lsrs	r6, r6, #5
 800e140:	fb02 5717 	mls	r7, r2, r7, r5
 800e144:	4601      	mov	r1, r0
 800e146:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	f04f 0a07 	mov.w	sl, #7
 800e150:	7a0d      	ldrb	r5, [r1, #8]
 800e152:	694b      	ldr	r3, [r1, #20]
 800e154:	2d4a      	cmp	r5, #74	; 0x4a
 800e156:	d12d      	bne.n	800e1b4 <__tzcalc_limits+0xd4>
 800e158:	9a00      	ldr	r2, [sp, #0]
 800e15a:	eb04 0e03 	add.w	lr, r4, r3
 800e15e:	b902      	cbnz	r2, 800e162 <__tzcalc_limits+0x82>
 800e160:	b917      	cbnz	r7, 800e168 <__tzcalc_limits+0x88>
 800e162:	f1bc 0f00 	cmp.w	ip, #0
 800e166:	d123      	bne.n	800e1b0 <__tzcalc_limits+0xd0>
 800e168:	2b3b      	cmp	r3, #59	; 0x3b
 800e16a:	bfd4      	ite	le
 800e16c:	2300      	movle	r3, #0
 800e16e:	2301      	movgt	r3, #1
 800e170:	4473      	add	r3, lr
 800e172:	3b01      	subs	r3, #1
 800e174:	698d      	ldr	r5, [r1, #24]
 800e176:	4a2d      	ldr	r2, [pc, #180]	; (800e22c <__tzcalc_limits+0x14c>)
 800e178:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800e17c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800e180:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e182:	18ed      	adds	r5, r5, r3
 800e184:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800e188:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800e18c:	3128      	adds	r1, #40	; 0x28
 800e18e:	458b      	cmp	fp, r1
 800e190:	d1de      	bne.n	800e150 <__tzcalc_limits+0x70>
 800e192:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800e196:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800e19a:	428c      	cmp	r4, r1
 800e19c:	eb72 0303 	sbcs.w	r3, r2, r3
 800e1a0:	bfb4      	ite	lt
 800e1a2:	2301      	movlt	r3, #1
 800e1a4:	2300      	movge	r3, #0
 800e1a6:	6003      	str	r3, [r0, #0]
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	b003      	add	sp, #12
 800e1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e7dd      	b.n	800e170 <__tzcalc_limits+0x90>
 800e1b4:	2d44      	cmp	r5, #68	; 0x44
 800e1b6:	d101      	bne.n	800e1bc <__tzcalc_limits+0xdc>
 800e1b8:	4423      	add	r3, r4
 800e1ba:	e7db      	b.n	800e174 <__tzcalc_limits+0x94>
 800e1bc:	9a00      	ldr	r2, [sp, #0]
 800e1be:	bb62      	cbnz	r2, 800e21a <__tzcalc_limits+0x13a>
 800e1c0:	2f00      	cmp	r7, #0
 800e1c2:	bf0c      	ite	eq
 800e1c4:	4635      	moveq	r5, r6
 800e1c6:	2501      	movne	r5, #1
 800e1c8:	68ca      	ldr	r2, [r1, #12]
 800e1ca:	9201      	str	r2, [sp, #4]
 800e1cc:	4a18      	ldr	r2, [pc, #96]	; (800e230 <__tzcalc_limits+0x150>)
 800e1ce:	f04f 0930 	mov.w	r9, #48	; 0x30
 800e1d2:	fb09 2505 	mla	r5, r9, r5, r2
 800e1d6:	46a6      	mov	lr, r4
 800e1d8:	f04f 0800 	mov.w	r8, #0
 800e1dc:	3d04      	subs	r5, #4
 800e1de:	9a01      	ldr	r2, [sp, #4]
 800e1e0:	f108 0801 	add.w	r8, r8, #1
 800e1e4:	4542      	cmp	r2, r8
 800e1e6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800e1ea:	dc18      	bgt.n	800e21e <__tzcalc_limits+0x13e>
 800e1ec:	f10e 0504 	add.w	r5, lr, #4
 800e1f0:	fb95 f8fa 	sdiv	r8, r5, sl
 800e1f4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800e1f8:	eba5 0808 	sub.w	r8, r5, r8
 800e1fc:	ebb3 0808 	subs.w	r8, r3, r8
 800e200:	690b      	ldr	r3, [r1, #16]
 800e202:	f103 33ff 	add.w	r3, r3, #4294967295
 800e206:	bf48      	it	mi
 800e208:	f108 0807 	addmi.w	r8, r8, #7
 800e20c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e210:	4443      	add	r3, r8
 800e212:	454b      	cmp	r3, r9
 800e214:	da05      	bge.n	800e222 <__tzcalc_limits+0x142>
 800e216:	4473      	add	r3, lr
 800e218:	e7ac      	b.n	800e174 <__tzcalc_limits+0x94>
 800e21a:	4635      	mov	r5, r6
 800e21c:	e7d4      	b.n	800e1c8 <__tzcalc_limits+0xe8>
 800e21e:	44ce      	add	lr, r9
 800e220:	e7dd      	b.n	800e1de <__tzcalc_limits+0xfe>
 800e222:	3b07      	subs	r3, #7
 800e224:	e7f5      	b.n	800e212 <__tzcalc_limits+0x132>
 800e226:	2000      	movs	r0, #0
 800e228:	e7bf      	b.n	800e1aa <__tzcalc_limits+0xca>
 800e22a:	bf00      	nop
 800e22c:	00015180 	.word	0x00015180
 800e230:	08039a50 	.word	0x08039a50

0800e234 <__tz_lock>:
 800e234:	4801      	ldr	r0, [pc, #4]	; (800e23c <__tz_lock+0x8>)
 800e236:	f001 bb16 	b.w	800f866 <__retarget_lock_acquire>
 800e23a:	bf00      	nop
 800e23c:	20003aa8 	.word	0x20003aa8

0800e240 <__tz_unlock>:
 800e240:	4801      	ldr	r0, [pc, #4]	; (800e248 <__tz_unlock+0x8>)
 800e242:	f001 bb12 	b.w	800f86a <__retarget_lock_release>
 800e246:	bf00      	nop
 800e248:	20003aa8 	.word	0x20003aa8

0800e24c <_tzset_unlocked>:
 800e24c:	4b01      	ldr	r3, [pc, #4]	; (800e254 <_tzset_unlocked+0x8>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	f000 b802 	b.w	800e258 <_tzset_unlocked_r>
 800e254:	200002c0 	.word	0x200002c0

0800e258 <_tzset_unlocked_r>:
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	b08d      	sub	sp, #52	; 0x34
 800e25e:	4607      	mov	r7, r0
 800e260:	f001 faf4 	bl	800f84c <__gettzinfo>
 800e264:	49b0      	ldr	r1, [pc, #704]	; (800e528 <_tzset_unlocked_r+0x2d0>)
 800e266:	4eb1      	ldr	r6, [pc, #708]	; (800e52c <_tzset_unlocked_r+0x2d4>)
 800e268:	4605      	mov	r5, r0
 800e26a:	4638      	mov	r0, r7
 800e26c:	f001 fae6 	bl	800f83c <_getenv_r>
 800e270:	4604      	mov	r4, r0
 800e272:	b970      	cbnz	r0, 800e292 <_tzset_unlocked_r+0x3a>
 800e274:	4bae      	ldr	r3, [pc, #696]	; (800e530 <_tzset_unlocked_r+0x2d8>)
 800e276:	4aaf      	ldr	r2, [pc, #700]	; (800e534 <_tzset_unlocked_r+0x2dc>)
 800e278:	6018      	str	r0, [r3, #0]
 800e27a:	4baf      	ldr	r3, [pc, #700]	; (800e538 <_tzset_unlocked_r+0x2e0>)
 800e27c:	6018      	str	r0, [r3, #0]
 800e27e:	4baf      	ldr	r3, [pc, #700]	; (800e53c <_tzset_unlocked_r+0x2e4>)
 800e280:	6830      	ldr	r0, [r6, #0]
 800e282:	e9c3 2200 	strd	r2, r2, [r3]
 800e286:	f7fd ff89 	bl	800c19c <free>
 800e28a:	6034      	str	r4, [r6, #0]
 800e28c:	b00d      	add	sp, #52	; 0x34
 800e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e292:	6831      	ldr	r1, [r6, #0]
 800e294:	2900      	cmp	r1, #0
 800e296:	d162      	bne.n	800e35e <_tzset_unlocked_r+0x106>
 800e298:	6830      	ldr	r0, [r6, #0]
 800e29a:	f7fd ff7f 	bl	800c19c <free>
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f7f1 ffa6 	bl	80001f0 <strlen>
 800e2a4:	1c41      	adds	r1, r0, #1
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7fe fa74 	bl	800c794 <_malloc_r>
 800e2ac:	6030      	str	r0, [r6, #0]
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d15a      	bne.n	800e368 <_tzset_unlocked_r+0x110>
 800e2b2:	7823      	ldrb	r3, [r4, #0]
 800e2b4:	4aa2      	ldr	r2, [pc, #648]	; (800e540 <_tzset_unlocked_r+0x2e8>)
 800e2b6:	49a3      	ldr	r1, [pc, #652]	; (800e544 <_tzset_unlocked_r+0x2ec>)
 800e2b8:	2b3a      	cmp	r3, #58	; 0x3a
 800e2ba:	bf08      	it	eq
 800e2bc:	3401      	addeq	r4, #1
 800e2be:	ae0a      	add	r6, sp, #40	; 0x28
 800e2c0:	4633      	mov	r3, r6
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f7ff f8ce 	bl	800d464 <siscanf>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	dddf      	ble.n	800e28c <_tzset_unlocked_r+0x34>
 800e2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ce:	18e7      	adds	r7, r4, r3
 800e2d0:	5ce3      	ldrb	r3, [r4, r3]
 800e2d2:	2b2d      	cmp	r3, #45	; 0x2d
 800e2d4:	d14c      	bne.n	800e370 <_tzset_unlocked_r+0x118>
 800e2d6:	3701      	adds	r7, #1
 800e2d8:	f04f 38ff 	mov.w	r8, #4294967295
 800e2dc:	f10d 0a20 	add.w	sl, sp, #32
 800e2e0:	f10d 0b1e 	add.w	fp, sp, #30
 800e2e4:	2400      	movs	r4, #0
 800e2e6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e2ea:	4997      	ldr	r1, [pc, #604]	; (800e548 <_tzset_unlocked_r+0x2f0>)
 800e2ec:	9603      	str	r6, [sp, #12]
 800e2ee:	f8cd b000 	str.w	fp, [sp]
 800e2f2:	4633      	mov	r3, r6
 800e2f4:	aa07      	add	r2, sp, #28
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e2fc:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e300:	f7ff f8b0 	bl	800d464 <siscanf>
 800e304:	42a0      	cmp	r0, r4
 800e306:	ddc1      	ble.n	800e28c <_tzset_unlocked_r+0x34>
 800e308:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e30c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e310:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800e554 <_tzset_unlocked_r+0x2fc>
 800e314:	213c      	movs	r1, #60	; 0x3c
 800e316:	fb01 3302 	mla	r3, r1, r2, r3
 800e31a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e31e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e322:	fb01 3302 	mla	r3, r1, r2, r3
 800e326:	fb08 f303 	mul.w	r3, r8, r3
 800e32a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e53c <_tzset_unlocked_r+0x2e4>
 800e32e:	62ab      	str	r3, [r5, #40]	; 0x28
 800e330:	4b83      	ldr	r3, [pc, #524]	; (800e540 <_tzset_unlocked_r+0x2e8>)
 800e332:	f8c8 3000 	str.w	r3, [r8]
 800e336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e338:	4982      	ldr	r1, [pc, #520]	; (800e544 <_tzset_unlocked_r+0x2ec>)
 800e33a:	441f      	add	r7, r3
 800e33c:	464a      	mov	r2, r9
 800e33e:	4633      	mov	r3, r6
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff f88f 	bl	800d464 <siscanf>
 800e346:	42a0      	cmp	r0, r4
 800e348:	dc18      	bgt.n	800e37c <_tzset_unlocked_r+0x124>
 800e34a:	f8d8 3000 	ldr.w	r3, [r8]
 800e34e:	f8c8 3004 	str.w	r3, [r8, #4]
 800e352:	4b77      	ldr	r3, [pc, #476]	; (800e530 <_tzset_unlocked_r+0x2d8>)
 800e354:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	4b77      	ldr	r3, [pc, #476]	; (800e538 <_tzset_unlocked_r+0x2e0>)
 800e35a:	601c      	str	r4, [r3, #0]
 800e35c:	e796      	b.n	800e28c <_tzset_unlocked_r+0x34>
 800e35e:	f7f1 ff9f 	bl	80002a0 <strcmp>
 800e362:	2800      	cmp	r0, #0
 800e364:	d198      	bne.n	800e298 <_tzset_unlocked_r+0x40>
 800e366:	e791      	b.n	800e28c <_tzset_unlocked_r+0x34>
 800e368:	4621      	mov	r1, r4
 800e36a:	f002 fc29 	bl	8010bc0 <strcpy>
 800e36e:	e7a0      	b.n	800e2b2 <_tzset_unlocked_r+0x5a>
 800e370:	2b2b      	cmp	r3, #43	; 0x2b
 800e372:	bf08      	it	eq
 800e374:	3701      	addeq	r7, #1
 800e376:	f04f 0801 	mov.w	r8, #1
 800e37a:	e7af      	b.n	800e2dc <_tzset_unlocked_r+0x84>
 800e37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e37e:	f8c8 9004 	str.w	r9, [r8, #4]
 800e382:	18fc      	adds	r4, r7, r3
 800e384:	5cfb      	ldrb	r3, [r7, r3]
 800e386:	2b2d      	cmp	r3, #45	; 0x2d
 800e388:	f040 808b 	bne.w	800e4a2 <_tzset_unlocked_r+0x24a>
 800e38c:	3401      	adds	r4, #1
 800e38e:	f04f 37ff 	mov.w	r7, #4294967295
 800e392:	2300      	movs	r3, #0
 800e394:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e398:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e39c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e3a2:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e3a6:	e9cd b600 	strd	fp, r6, [sp]
 800e3aa:	4967      	ldr	r1, [pc, #412]	; (800e548 <_tzset_unlocked_r+0x2f0>)
 800e3ac:	4633      	mov	r3, r6
 800e3ae:	aa07      	add	r2, sp, #28
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7ff f857 	bl	800d464 <siscanf>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	dc78      	bgt.n	800e4ac <_tzset_unlocked_r+0x254>
 800e3ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e3bc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800e3c0:	652b      	str	r3, [r5, #80]	; 0x50
 800e3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c4:	462f      	mov	r7, r5
 800e3c6:	441c      	add	r4, r3
 800e3c8:	f04f 0900 	mov.w	r9, #0
 800e3cc:	7823      	ldrb	r3, [r4, #0]
 800e3ce:	2b2c      	cmp	r3, #44	; 0x2c
 800e3d0:	bf08      	it	eq
 800e3d2:	3401      	addeq	r4, #1
 800e3d4:	f894 8000 	ldrb.w	r8, [r4]
 800e3d8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800e3dc:	d178      	bne.n	800e4d0 <_tzset_unlocked_r+0x278>
 800e3de:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e3e2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e3e6:	ab09      	add	r3, sp, #36	; 0x24
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	4958      	ldr	r1, [pc, #352]	; (800e54c <_tzset_unlocked_r+0x2f4>)
 800e3ec:	9603      	str	r6, [sp, #12]
 800e3ee:	4633      	mov	r3, r6
 800e3f0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f7ff f835 	bl	800d464 <siscanf>
 800e3fa:	2803      	cmp	r0, #3
 800e3fc:	f47f af46 	bne.w	800e28c <_tzset_unlocked_r+0x34>
 800e400:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e404:	1e4b      	subs	r3, r1, #1
 800e406:	2b0b      	cmp	r3, #11
 800e408:	f63f af40 	bhi.w	800e28c <_tzset_unlocked_r+0x34>
 800e40c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e410:	1e53      	subs	r3, r2, #1
 800e412:	2b04      	cmp	r3, #4
 800e414:	f63f af3a 	bhi.w	800e28c <_tzset_unlocked_r+0x34>
 800e418:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e41c:	2b06      	cmp	r3, #6
 800e41e:	f63f af35 	bhi.w	800e28c <_tzset_unlocked_r+0x34>
 800e422:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e426:	f887 8008 	strb.w	r8, [r7, #8]
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e42e:	eb04 0803 	add.w	r8, r4, r3
 800e432:	2302      	movs	r3, #2
 800e434:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e438:	2300      	movs	r3, #0
 800e43a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e43e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e442:	930a      	str	r3, [sp, #40]	; 0x28
 800e444:	f898 3000 	ldrb.w	r3, [r8]
 800e448:	2b2f      	cmp	r3, #47	; 0x2f
 800e44a:	d109      	bne.n	800e460 <_tzset_unlocked_r+0x208>
 800e44c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e450:	e9cd b600 	strd	fp, r6, [sp]
 800e454:	493e      	ldr	r1, [pc, #248]	; (800e550 <_tzset_unlocked_r+0x2f8>)
 800e456:	4633      	mov	r3, r6
 800e458:	aa07      	add	r2, sp, #28
 800e45a:	4640      	mov	r0, r8
 800e45c:	f7ff f802 	bl	800d464 <siscanf>
 800e460:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e464:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e468:	213c      	movs	r1, #60	; 0x3c
 800e46a:	fb01 3302 	mla	r3, r1, r2, r3
 800e46e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e476:	fb01 3302 	mla	r3, r1, r2, r3
 800e47a:	61bb      	str	r3, [r7, #24]
 800e47c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e47e:	3728      	adds	r7, #40	; 0x28
 800e480:	4444      	add	r4, r8
 800e482:	f1b9 0f00 	cmp.w	r9, #0
 800e486:	d020      	beq.n	800e4ca <_tzset_unlocked_r+0x272>
 800e488:	6868      	ldr	r0, [r5, #4]
 800e48a:	f7ff fe29 	bl	800e0e0 <__tzcalc_limits>
 800e48e:	4b28      	ldr	r3, [pc, #160]	; (800e530 <_tzset_unlocked_r+0x2d8>)
 800e490:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e496:	1a9b      	subs	r3, r3, r2
 800e498:	4a27      	ldr	r2, [pc, #156]	; (800e538 <_tzset_unlocked_r+0x2e0>)
 800e49a:	bf18      	it	ne
 800e49c:	2301      	movne	r3, #1
 800e49e:	6013      	str	r3, [r2, #0]
 800e4a0:	e6f4      	b.n	800e28c <_tzset_unlocked_r+0x34>
 800e4a2:	2b2b      	cmp	r3, #43	; 0x2b
 800e4a4:	bf08      	it	eq
 800e4a6:	3401      	addeq	r4, #1
 800e4a8:	2701      	movs	r7, #1
 800e4aa:	e772      	b.n	800e392 <_tzset_unlocked_r+0x13a>
 800e4ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e4b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e4b4:	213c      	movs	r1, #60	; 0x3c
 800e4b6:	fb01 3302 	mla	r3, r1, r2, r3
 800e4ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e4be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e4c2:	fb01 3302 	mla	r3, r1, r2, r3
 800e4c6:	437b      	muls	r3, r7
 800e4c8:	e77a      	b.n	800e3c0 <_tzset_unlocked_r+0x168>
 800e4ca:	f04f 0901 	mov.w	r9, #1
 800e4ce:	e77d      	b.n	800e3cc <_tzset_unlocked_r+0x174>
 800e4d0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800e4d4:	bf06      	itte	eq
 800e4d6:	3401      	addeq	r4, #1
 800e4d8:	4643      	moveq	r3, r8
 800e4da:	2344      	movne	r3, #68	; 0x44
 800e4dc:	220a      	movs	r2, #10
 800e4de:	a90b      	add	r1, sp, #44	; 0x2c
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	9305      	str	r3, [sp, #20]
 800e4e4:	f7ff fdf2 	bl	800e0cc <strtoul>
 800e4e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e4ec:	9b05      	ldr	r3, [sp, #20]
 800e4ee:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e4f2:	45a0      	cmp	r8, r4
 800e4f4:	d114      	bne.n	800e520 <_tzset_unlocked_r+0x2c8>
 800e4f6:	234d      	movs	r3, #77	; 0x4d
 800e4f8:	f1b9 0f00 	cmp.w	r9, #0
 800e4fc:	d107      	bne.n	800e50e <_tzset_unlocked_r+0x2b6>
 800e4fe:	722b      	strb	r3, [r5, #8]
 800e500:	2103      	movs	r1, #3
 800e502:	2302      	movs	r3, #2
 800e504:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800e508:	f8c5 9014 	str.w	r9, [r5, #20]
 800e50c:	e791      	b.n	800e432 <_tzset_unlocked_r+0x1da>
 800e50e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800e512:	220b      	movs	r2, #11
 800e514:	2301      	movs	r3, #1
 800e516:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800e51a:	2300      	movs	r3, #0
 800e51c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e51e:	e788      	b.n	800e432 <_tzset_unlocked_r+0x1da>
 800e520:	b280      	uxth	r0, r0
 800e522:	723b      	strb	r3, [r7, #8]
 800e524:	6178      	str	r0, [r7, #20]
 800e526:	e784      	b.n	800e432 <_tzset_unlocked_r+0x1da>
 800e528:	08039838 	.word	0x08039838
 800e52c:	20003a98 	.word	0x20003a98
 800e530:	20003aa0 	.word	0x20003aa0
 800e534:	0803983b 	.word	0x0803983b
 800e538:	20003a9c 	.word	0x20003a9c
 800e53c:	20000324 	.word	0x20000324
 800e540:	20003a8b 	.word	0x20003a8b
 800e544:	0803983f 	.word	0x0803983f
 800e548:	08039862 	.word	0x08039862
 800e54c:	0803984e 	.word	0x0803984e
 800e550:	08039861 	.word	0x08039861
 800e554:	20003a80 	.word	0x20003a80

0800e558 <__swbuf_r>:
 800e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55a:	460e      	mov	r6, r1
 800e55c:	4614      	mov	r4, r2
 800e55e:	4605      	mov	r5, r0
 800e560:	b118      	cbz	r0, 800e56a <__swbuf_r+0x12>
 800e562:	6983      	ldr	r3, [r0, #24]
 800e564:	b90b      	cbnz	r3, 800e56a <__swbuf_r+0x12>
 800e566:	f001 f88f 	bl	800f688 <__sinit>
 800e56a:	4b21      	ldr	r3, [pc, #132]	; (800e5f0 <__swbuf_r+0x98>)
 800e56c:	429c      	cmp	r4, r3
 800e56e:	d12b      	bne.n	800e5c8 <__swbuf_r+0x70>
 800e570:	686c      	ldr	r4, [r5, #4]
 800e572:	69a3      	ldr	r3, [r4, #24]
 800e574:	60a3      	str	r3, [r4, #8]
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	071a      	lsls	r2, r3, #28
 800e57a:	d52f      	bpl.n	800e5dc <__swbuf_r+0x84>
 800e57c:	6923      	ldr	r3, [r4, #16]
 800e57e:	b36b      	cbz	r3, 800e5dc <__swbuf_r+0x84>
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	6820      	ldr	r0, [r4, #0]
 800e584:	1ac0      	subs	r0, r0, r3
 800e586:	6963      	ldr	r3, [r4, #20]
 800e588:	b2f6      	uxtb	r6, r6
 800e58a:	4283      	cmp	r3, r0
 800e58c:	4637      	mov	r7, r6
 800e58e:	dc04      	bgt.n	800e59a <__swbuf_r+0x42>
 800e590:	4621      	mov	r1, r4
 800e592:	4628      	mov	r0, r5
 800e594:	f000 ffe4 	bl	800f560 <_fflush_r>
 800e598:	bb30      	cbnz	r0, 800e5e8 <__swbuf_r+0x90>
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	60a3      	str	r3, [r4, #8]
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	6022      	str	r2, [r4, #0]
 800e5a6:	701e      	strb	r6, [r3, #0]
 800e5a8:	6963      	ldr	r3, [r4, #20]
 800e5aa:	3001      	adds	r0, #1
 800e5ac:	4283      	cmp	r3, r0
 800e5ae:	d004      	beq.n	800e5ba <__swbuf_r+0x62>
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	07db      	lsls	r3, r3, #31
 800e5b4:	d506      	bpl.n	800e5c4 <__swbuf_r+0x6c>
 800e5b6:	2e0a      	cmp	r6, #10
 800e5b8:	d104      	bne.n	800e5c4 <__swbuf_r+0x6c>
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f000 ffcf 	bl	800f560 <_fflush_r>
 800e5c2:	b988      	cbnz	r0, 800e5e8 <__swbuf_r+0x90>
 800e5c4:	4638      	mov	r0, r7
 800e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	; (800e5f4 <__swbuf_r+0x9c>)
 800e5ca:	429c      	cmp	r4, r3
 800e5cc:	d101      	bne.n	800e5d2 <__swbuf_r+0x7a>
 800e5ce:	68ac      	ldr	r4, [r5, #8]
 800e5d0:	e7cf      	b.n	800e572 <__swbuf_r+0x1a>
 800e5d2:	4b09      	ldr	r3, [pc, #36]	; (800e5f8 <__swbuf_r+0xa0>)
 800e5d4:	429c      	cmp	r4, r3
 800e5d6:	bf08      	it	eq
 800e5d8:	68ec      	ldreq	r4, [r5, #12]
 800e5da:	e7ca      	b.n	800e572 <__swbuf_r+0x1a>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f000 f81e 	bl	800e620 <__swsetup_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d0cb      	beq.n	800e580 <__swbuf_r+0x28>
 800e5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ec:	e7ea      	b.n	800e5c4 <__swbuf_r+0x6c>
 800e5ee:	bf00      	nop
 800e5f0:	08039a10 	.word	0x08039a10
 800e5f4:	08039a30 	.word	0x08039a30
 800e5f8:	080399f0 	.word	0x080399f0

0800e5fc <_write_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4d07      	ldr	r5, [pc, #28]	; (800e61c <_write_r+0x20>)
 800e600:	4604      	mov	r4, r0
 800e602:	4608      	mov	r0, r1
 800e604:	4611      	mov	r1, r2
 800e606:	2200      	movs	r2, #0
 800e608:	602a      	str	r2, [r5, #0]
 800e60a:	461a      	mov	r2, r3
 800e60c:	f005 f88c 	bl	8013728 <_write>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d102      	bne.n	800e61a <_write_r+0x1e>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	b103      	cbz	r3, 800e61a <_write_r+0x1e>
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	20003aac 	.word	0x20003aac

0800e620 <__swsetup_r>:
 800e620:	4b32      	ldr	r3, [pc, #200]	; (800e6ec <__swsetup_r+0xcc>)
 800e622:	b570      	push	{r4, r5, r6, lr}
 800e624:	681d      	ldr	r5, [r3, #0]
 800e626:	4606      	mov	r6, r0
 800e628:	460c      	mov	r4, r1
 800e62a:	b125      	cbz	r5, 800e636 <__swsetup_r+0x16>
 800e62c:	69ab      	ldr	r3, [r5, #24]
 800e62e:	b913      	cbnz	r3, 800e636 <__swsetup_r+0x16>
 800e630:	4628      	mov	r0, r5
 800e632:	f001 f829 	bl	800f688 <__sinit>
 800e636:	4b2e      	ldr	r3, [pc, #184]	; (800e6f0 <__swsetup_r+0xd0>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d10f      	bne.n	800e65c <__swsetup_r+0x3c>
 800e63c:	686c      	ldr	r4, [r5, #4]
 800e63e:	89a3      	ldrh	r3, [r4, #12]
 800e640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e644:	0719      	lsls	r1, r3, #28
 800e646:	d42c      	bmi.n	800e6a2 <__swsetup_r+0x82>
 800e648:	06dd      	lsls	r5, r3, #27
 800e64a:	d411      	bmi.n	800e670 <__swsetup_r+0x50>
 800e64c:	2309      	movs	r3, #9
 800e64e:	6033      	str	r3, [r6, #0]
 800e650:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e654:	81a3      	strh	r3, [r4, #12]
 800e656:	f04f 30ff 	mov.w	r0, #4294967295
 800e65a:	e03e      	b.n	800e6da <__swsetup_r+0xba>
 800e65c:	4b25      	ldr	r3, [pc, #148]	; (800e6f4 <__swsetup_r+0xd4>)
 800e65e:	429c      	cmp	r4, r3
 800e660:	d101      	bne.n	800e666 <__swsetup_r+0x46>
 800e662:	68ac      	ldr	r4, [r5, #8]
 800e664:	e7eb      	b.n	800e63e <__swsetup_r+0x1e>
 800e666:	4b24      	ldr	r3, [pc, #144]	; (800e6f8 <__swsetup_r+0xd8>)
 800e668:	429c      	cmp	r4, r3
 800e66a:	bf08      	it	eq
 800e66c:	68ec      	ldreq	r4, [r5, #12]
 800e66e:	e7e6      	b.n	800e63e <__swsetup_r+0x1e>
 800e670:	0758      	lsls	r0, r3, #29
 800e672:	d512      	bpl.n	800e69a <__swsetup_r+0x7a>
 800e674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e676:	b141      	cbz	r1, 800e68a <__swsetup_r+0x6a>
 800e678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e67c:	4299      	cmp	r1, r3
 800e67e:	d002      	beq.n	800e686 <__swsetup_r+0x66>
 800e680:	4630      	mov	r0, r6
 800e682:	f7fe f81b 	bl	800c6bc <_free_r>
 800e686:	2300      	movs	r3, #0
 800e688:	6363      	str	r3, [r4, #52]	; 0x34
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	2300      	movs	r3, #0
 800e694:	6063      	str	r3, [r4, #4]
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f043 0308 	orr.w	r3, r3, #8
 800e6a0:	81a3      	strh	r3, [r4, #12]
 800e6a2:	6923      	ldr	r3, [r4, #16]
 800e6a4:	b94b      	cbnz	r3, 800e6ba <__swsetup_r+0x9a>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6b0:	d003      	beq.n	800e6ba <__swsetup_r+0x9a>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f001 f913 	bl	800f8e0 <__smakebuf_r>
 800e6ba:	89a0      	ldrh	r0, [r4, #12]
 800e6bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6c0:	f010 0301 	ands.w	r3, r0, #1
 800e6c4:	d00a      	beq.n	800e6dc <__swsetup_r+0xbc>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	60a3      	str	r3, [r4, #8]
 800e6ca:	6963      	ldr	r3, [r4, #20]
 800e6cc:	425b      	negs	r3, r3
 800e6ce:	61a3      	str	r3, [r4, #24]
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	b943      	cbnz	r3, 800e6e6 <__swsetup_r+0xc6>
 800e6d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6d8:	d1ba      	bne.n	800e650 <__swsetup_r+0x30>
 800e6da:	bd70      	pop	{r4, r5, r6, pc}
 800e6dc:	0781      	lsls	r1, r0, #30
 800e6de:	bf58      	it	pl
 800e6e0:	6963      	ldrpl	r3, [r4, #20]
 800e6e2:	60a3      	str	r3, [r4, #8]
 800e6e4:	e7f4      	b.n	800e6d0 <__swsetup_r+0xb0>
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	e7f7      	b.n	800e6da <__swsetup_r+0xba>
 800e6ea:	bf00      	nop
 800e6ec:	200002c0 	.word	0x200002c0
 800e6f0:	08039a10 	.word	0x08039a10
 800e6f4:	08039a30 	.word	0x08039a30
 800e6f8:	080399f0 	.word	0x080399f0

0800e6fc <abort>:
 800e6fc:	b508      	push	{r3, lr}
 800e6fe:	2006      	movs	r0, #6
 800e700:	f002 fa0e 	bl	8010b20 <raise>
 800e704:	2001      	movs	r0, #1
 800e706:	f005 f817 	bl	8013738 <_exit>

0800e70a <abs>:
 800e70a:	2800      	cmp	r0, #0
 800e70c:	bfb8      	it	lt
 800e70e:	4240      	neglt	r0, r0
 800e710:	4770      	bx	lr
	...

0800e714 <_close_r>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	4d06      	ldr	r5, [pc, #24]	; (800e730 <_close_r+0x1c>)
 800e718:	2300      	movs	r3, #0
 800e71a:	4604      	mov	r4, r0
 800e71c:	4608      	mov	r0, r1
 800e71e:	602b      	str	r3, [r5, #0]
 800e720:	f004 ffbc 	bl	801369c <_close>
 800e724:	1c43      	adds	r3, r0, #1
 800e726:	d102      	bne.n	800e72e <_close_r+0x1a>
 800e728:	682b      	ldr	r3, [r5, #0]
 800e72a:	b103      	cbz	r3, 800e72e <_close_r+0x1a>
 800e72c:	6023      	str	r3, [r4, #0]
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	20003aac 	.word	0x20003aac

0800e734 <div>:
 800e734:	2900      	cmp	r1, #0
 800e736:	b510      	push	{r4, lr}
 800e738:	fb91 f4f2 	sdiv	r4, r1, r2
 800e73c:	fb02 1314 	mls	r3, r2, r4, r1
 800e740:	db06      	blt.n	800e750 <div+0x1c>
 800e742:	2b00      	cmp	r3, #0
 800e744:	da01      	bge.n	800e74a <div+0x16>
 800e746:	3401      	adds	r4, #1
 800e748:	1a9b      	subs	r3, r3, r2
 800e74a:	e9c0 4300 	strd	r4, r3, [r0]
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	2b00      	cmp	r3, #0
 800e752:	bfc4      	itt	gt
 800e754:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e758:	189b      	addgt	r3, r3, r2
 800e75a:	e7f6      	b.n	800e74a <div+0x16>

0800e75c <quorem>:
 800e75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	6903      	ldr	r3, [r0, #16]
 800e762:	690c      	ldr	r4, [r1, #16]
 800e764:	42a3      	cmp	r3, r4
 800e766:	4607      	mov	r7, r0
 800e768:	f2c0 8081 	blt.w	800e86e <quorem+0x112>
 800e76c:	3c01      	subs	r4, #1
 800e76e:	f101 0814 	add.w	r8, r1, #20
 800e772:	f100 0514 	add.w	r5, r0, #20
 800e776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e77a:	9301      	str	r3, [sp, #4]
 800e77c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e784:	3301      	adds	r3, #1
 800e786:	429a      	cmp	r2, r3
 800e788:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e78c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e790:	fbb2 f6f3 	udiv	r6, r2, r3
 800e794:	d331      	bcc.n	800e7fa <quorem+0x9e>
 800e796:	f04f 0e00 	mov.w	lr, #0
 800e79a:	4640      	mov	r0, r8
 800e79c:	46ac      	mov	ip, r5
 800e79e:	46f2      	mov	sl, lr
 800e7a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7a4:	b293      	uxth	r3, r2
 800e7a6:	fb06 e303 	mla	r3, r6, r3, lr
 800e7aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	ebaa 0303 	sub.w	r3, sl, r3
 800e7b4:	f8dc a000 	ldr.w	sl, [ip]
 800e7b8:	0c12      	lsrs	r2, r2, #16
 800e7ba:	fa13 f38a 	uxtah	r3, r3, sl
 800e7be:	fb06 e202 	mla	r2, r6, r2, lr
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	9b00      	ldr	r3, [sp, #0]
 800e7c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7ca:	b292      	uxth	r2, r2
 800e7cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7d8:	4581      	cmp	r9, r0
 800e7da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7de:	f84c 3b04 	str.w	r3, [ip], #4
 800e7e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7e6:	d2db      	bcs.n	800e7a0 <quorem+0x44>
 800e7e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7ec:	b92b      	cbnz	r3, 800e7fa <quorem+0x9e>
 800e7ee:	9b01      	ldr	r3, [sp, #4]
 800e7f0:	3b04      	subs	r3, #4
 800e7f2:	429d      	cmp	r5, r3
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	d32e      	bcc.n	800e856 <quorem+0xfa>
 800e7f8:	613c      	str	r4, [r7, #16]
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	f001 fb58 	bl	800feb0 <__mcmp>
 800e800:	2800      	cmp	r0, #0
 800e802:	db24      	blt.n	800e84e <quorem+0xf2>
 800e804:	3601      	adds	r6, #1
 800e806:	4628      	mov	r0, r5
 800e808:	f04f 0c00 	mov.w	ip, #0
 800e80c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e810:	f8d0 e000 	ldr.w	lr, [r0]
 800e814:	b293      	uxth	r3, r2
 800e816:	ebac 0303 	sub.w	r3, ip, r3
 800e81a:	0c12      	lsrs	r2, r2, #16
 800e81c:	fa13 f38e 	uxtah	r3, r3, lr
 800e820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e828:	b29b      	uxth	r3, r3
 800e82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e82e:	45c1      	cmp	r9, r8
 800e830:	f840 3b04 	str.w	r3, [r0], #4
 800e834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e838:	d2e8      	bcs.n	800e80c <quorem+0xb0>
 800e83a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e842:	b922      	cbnz	r2, 800e84e <quorem+0xf2>
 800e844:	3b04      	subs	r3, #4
 800e846:	429d      	cmp	r5, r3
 800e848:	461a      	mov	r2, r3
 800e84a:	d30a      	bcc.n	800e862 <quorem+0x106>
 800e84c:	613c      	str	r4, [r7, #16]
 800e84e:	4630      	mov	r0, r6
 800e850:	b003      	add	sp, #12
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	6812      	ldr	r2, [r2, #0]
 800e858:	3b04      	subs	r3, #4
 800e85a:	2a00      	cmp	r2, #0
 800e85c:	d1cc      	bne.n	800e7f8 <quorem+0x9c>
 800e85e:	3c01      	subs	r4, #1
 800e860:	e7c7      	b.n	800e7f2 <quorem+0x96>
 800e862:	6812      	ldr	r2, [r2, #0]
 800e864:	3b04      	subs	r3, #4
 800e866:	2a00      	cmp	r2, #0
 800e868:	d1f0      	bne.n	800e84c <quorem+0xf0>
 800e86a:	3c01      	subs	r4, #1
 800e86c:	e7eb      	b.n	800e846 <quorem+0xea>
 800e86e:	2000      	movs	r0, #0
 800e870:	e7ee      	b.n	800e850 <quorem+0xf4>
 800e872:	0000      	movs	r0, r0
 800e874:	0000      	movs	r0, r0
	...

0800e878 <_dtoa_r>:
 800e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	ed2d 8b04 	vpush	{d8-d9}
 800e880:	ec57 6b10 	vmov	r6, r7, d0
 800e884:	b093      	sub	sp, #76	; 0x4c
 800e886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e88c:	9106      	str	r1, [sp, #24]
 800e88e:	ee10 aa10 	vmov	sl, s0
 800e892:	4604      	mov	r4, r0
 800e894:	9209      	str	r2, [sp, #36]	; 0x24
 800e896:	930c      	str	r3, [sp, #48]	; 0x30
 800e898:	46bb      	mov	fp, r7
 800e89a:	b975      	cbnz	r5, 800e8ba <_dtoa_r+0x42>
 800e89c:	2010      	movs	r0, #16
 800e89e:	f7fd fc75 	bl	800c18c <malloc>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800e8a6:	b920      	cbnz	r0, 800e8b2 <_dtoa_r+0x3a>
 800e8a8:	4ba7      	ldr	r3, [pc, #668]	; (800eb48 <_dtoa_r+0x2d0>)
 800e8aa:	21ea      	movs	r1, #234	; 0xea
 800e8ac:	48a7      	ldr	r0, [pc, #668]	; (800eb4c <_dtoa_r+0x2d4>)
 800e8ae:	f7fd fc19 	bl	800c0e4 <__assert_func>
 800e8b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8b6:	6005      	str	r5, [r0, #0]
 800e8b8:	60c5      	str	r5, [r0, #12]
 800e8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8bc:	6819      	ldr	r1, [r3, #0]
 800e8be:	b151      	cbz	r1, 800e8d6 <_dtoa_r+0x5e>
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	604a      	str	r2, [r1, #4]
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	4093      	lsls	r3, r2
 800e8c8:	608b      	str	r3, [r1, #8]
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f001 f8ae 	bl	800fa2c <_Bfree>
 800e8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
 800e8d6:	1e3b      	subs	r3, r7, #0
 800e8d8:	bfaa      	itet	ge
 800e8da:	2300      	movge	r3, #0
 800e8dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e8e0:	f8c8 3000 	strge.w	r3, [r8]
 800e8e4:	4b9a      	ldr	r3, [pc, #616]	; (800eb50 <_dtoa_r+0x2d8>)
 800e8e6:	bfbc      	itt	lt
 800e8e8:	2201      	movlt	r2, #1
 800e8ea:	f8c8 2000 	strlt.w	r2, [r8]
 800e8ee:	ea33 030b 	bics.w	r3, r3, fp
 800e8f2:	d11b      	bne.n	800e92c <_dtoa_r+0xb4>
 800e8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e900:	4333      	orrs	r3, r6
 800e902:	f000 8592 	beq.w	800f42a <_dtoa_r+0xbb2>
 800e906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e908:	b963      	cbnz	r3, 800e924 <_dtoa_r+0xac>
 800e90a:	4b92      	ldr	r3, [pc, #584]	; (800eb54 <_dtoa_r+0x2dc>)
 800e90c:	e022      	b.n	800e954 <_dtoa_r+0xdc>
 800e90e:	4b92      	ldr	r3, [pc, #584]	; (800eb58 <_dtoa_r+0x2e0>)
 800e910:	9301      	str	r3, [sp, #4]
 800e912:	3308      	adds	r3, #8
 800e914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	9801      	ldr	r0, [sp, #4]
 800e91a:	b013      	add	sp, #76	; 0x4c
 800e91c:	ecbd 8b04 	vpop	{d8-d9}
 800e920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e924:	4b8b      	ldr	r3, [pc, #556]	; (800eb54 <_dtoa_r+0x2dc>)
 800e926:	9301      	str	r3, [sp, #4]
 800e928:	3303      	adds	r3, #3
 800e92a:	e7f3      	b.n	800e914 <_dtoa_r+0x9c>
 800e92c:	2200      	movs	r2, #0
 800e92e:	2300      	movs	r3, #0
 800e930:	4650      	mov	r0, sl
 800e932:	4659      	mov	r1, fp
 800e934:	f7f2 f8e2 	bl	8000afc <__aeabi_dcmpeq>
 800e938:	ec4b ab19 	vmov	d9, sl, fp
 800e93c:	4680      	mov	r8, r0
 800e93e:	b158      	cbz	r0, 800e958 <_dtoa_r+0xe0>
 800e940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e942:	2301      	movs	r3, #1
 800e944:	6013      	str	r3, [r2, #0]
 800e946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 856b 	beq.w	800f424 <_dtoa_r+0xbac>
 800e94e:	4883      	ldr	r0, [pc, #524]	; (800eb5c <_dtoa_r+0x2e4>)
 800e950:	6018      	str	r0, [r3, #0]
 800e952:	1e43      	subs	r3, r0, #1
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	e7df      	b.n	800e918 <_dtoa_r+0xa0>
 800e958:	ec4b ab10 	vmov	d0, sl, fp
 800e95c:	aa10      	add	r2, sp, #64	; 0x40
 800e95e:	a911      	add	r1, sp, #68	; 0x44
 800e960:	4620      	mov	r0, r4
 800e962:	f001 fb4b 	bl	800fffc <__d2b>
 800e966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e96a:	ee08 0a10 	vmov	s16, r0
 800e96e:	2d00      	cmp	r5, #0
 800e970:	f000 8084 	beq.w	800ea7c <_dtoa_r+0x204>
 800e974:	ee19 3a90 	vmov	r3, s19
 800e978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e97c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e980:	4656      	mov	r6, sl
 800e982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e98a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e98e:	4b74      	ldr	r3, [pc, #464]	; (800eb60 <_dtoa_r+0x2e8>)
 800e990:	2200      	movs	r2, #0
 800e992:	4630      	mov	r0, r6
 800e994:	4639      	mov	r1, r7
 800e996:	f7f1 fc91 	bl	80002bc <__aeabi_dsub>
 800e99a:	a365      	add	r3, pc, #404	; (adr r3, 800eb30 <_dtoa_r+0x2b8>)
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	f7f1 fe44 	bl	800062c <__aeabi_dmul>
 800e9a4:	a364      	add	r3, pc, #400	; (adr r3, 800eb38 <_dtoa_r+0x2c0>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	f7f1 fc89 	bl	80002c0 <__adddf3>
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	460f      	mov	r7, r1
 800e9b4:	f7f1 fdd0 	bl	8000558 <__aeabi_i2d>
 800e9b8:	a361      	add	r3, pc, #388	; (adr r3, 800eb40 <_dtoa_r+0x2c8>)
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f7f1 fe35 	bl	800062c <__aeabi_dmul>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f1 fc79 	bl	80002c0 <__adddf3>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	460f      	mov	r7, r1
 800e9d2:	f7f2 f8db 	bl	8000b8c <__aeabi_d2iz>
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	9000      	str	r0, [sp, #0]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4630      	mov	r0, r6
 800e9de:	4639      	mov	r1, r7
 800e9e0:	f7f2 f896 	bl	8000b10 <__aeabi_dcmplt>
 800e9e4:	b150      	cbz	r0, 800e9fc <_dtoa_r+0x184>
 800e9e6:	9800      	ldr	r0, [sp, #0]
 800e9e8:	f7f1 fdb6 	bl	8000558 <__aeabi_i2d>
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	463b      	mov	r3, r7
 800e9f0:	f7f2 f884 	bl	8000afc <__aeabi_dcmpeq>
 800e9f4:	b910      	cbnz	r0, 800e9fc <_dtoa_r+0x184>
 800e9f6:	9b00      	ldr	r3, [sp, #0]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	9b00      	ldr	r3, [sp, #0]
 800e9fe:	2b16      	cmp	r3, #22
 800ea00:	d85a      	bhi.n	800eab8 <_dtoa_r+0x240>
 800ea02:	9a00      	ldr	r2, [sp, #0]
 800ea04:	4b57      	ldr	r3, [pc, #348]	; (800eb64 <_dtoa_r+0x2ec>)
 800ea06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	ec51 0b19 	vmov	r0, r1, d9
 800ea12:	f7f2 f87d 	bl	8000b10 <__aeabi_dcmplt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d050      	beq.n	800eabc <_dtoa_r+0x244>
 800ea1a:	9b00      	ldr	r3, [sp, #0]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	2300      	movs	r3, #0
 800ea22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea26:	1b5d      	subs	r5, r3, r5
 800ea28:	1e6b      	subs	r3, r5, #1
 800ea2a:	9305      	str	r3, [sp, #20]
 800ea2c:	bf45      	ittet	mi
 800ea2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea32:	9304      	strmi	r3, [sp, #16]
 800ea34:	2300      	movpl	r3, #0
 800ea36:	2300      	movmi	r3, #0
 800ea38:	bf4c      	ite	mi
 800ea3a:	9305      	strmi	r3, [sp, #20]
 800ea3c:	9304      	strpl	r3, [sp, #16]
 800ea3e:	9b00      	ldr	r3, [sp, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	db3d      	blt.n	800eac0 <_dtoa_r+0x248>
 800ea44:	9b05      	ldr	r3, [sp, #20]
 800ea46:	9a00      	ldr	r2, [sp, #0]
 800ea48:	920a      	str	r2, [sp, #40]	; 0x28
 800ea4a:	4413      	add	r3, r2
 800ea4c:	9305      	str	r3, [sp, #20]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9307      	str	r3, [sp, #28]
 800ea52:	9b06      	ldr	r3, [sp, #24]
 800ea54:	2b09      	cmp	r3, #9
 800ea56:	f200 8089 	bhi.w	800eb6c <_dtoa_r+0x2f4>
 800ea5a:	2b05      	cmp	r3, #5
 800ea5c:	bfc4      	itt	gt
 800ea5e:	3b04      	subgt	r3, #4
 800ea60:	9306      	strgt	r3, [sp, #24]
 800ea62:	9b06      	ldr	r3, [sp, #24]
 800ea64:	f1a3 0302 	sub.w	r3, r3, #2
 800ea68:	bfcc      	ite	gt
 800ea6a:	2500      	movgt	r5, #0
 800ea6c:	2501      	movle	r5, #1
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	f200 8087 	bhi.w	800eb82 <_dtoa_r+0x30a>
 800ea74:	e8df f003 	tbb	[pc, r3]
 800ea78:	59383a2d 	.word	0x59383a2d
 800ea7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea80:	441d      	add	r5, r3
 800ea82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea86:	2b20      	cmp	r3, #32
 800ea88:	bfc1      	itttt	gt
 800ea8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea92:	fa0b f303 	lslgt.w	r3, fp, r3
 800ea96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea9a:	bfda      	itte	le
 800ea9c:	f1c3 0320 	rsble	r3, r3, #32
 800eaa0:	fa06 f003 	lslle.w	r0, r6, r3
 800eaa4:	4318      	orrgt	r0, r3
 800eaa6:	f7f1 fd47 	bl	8000538 <__aeabi_ui2d>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4606      	mov	r6, r0
 800eaae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eab2:	3d01      	subs	r5, #1
 800eab4:	930e      	str	r3, [sp, #56]	; 0x38
 800eab6:	e76a      	b.n	800e98e <_dtoa_r+0x116>
 800eab8:	2301      	movs	r3, #1
 800eaba:	e7b2      	b.n	800ea22 <_dtoa_r+0x1aa>
 800eabc:	900b      	str	r0, [sp, #44]	; 0x2c
 800eabe:	e7b1      	b.n	800ea24 <_dtoa_r+0x1ac>
 800eac0:	9b04      	ldr	r3, [sp, #16]
 800eac2:	9a00      	ldr	r2, [sp, #0]
 800eac4:	1a9b      	subs	r3, r3, r2
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	4253      	negs	r3, r2
 800eaca:	9307      	str	r3, [sp, #28]
 800eacc:	2300      	movs	r3, #0
 800eace:	930a      	str	r3, [sp, #40]	; 0x28
 800ead0:	e7bf      	b.n	800ea52 <_dtoa_r+0x1da>
 800ead2:	2300      	movs	r3, #0
 800ead4:	9308      	str	r3, [sp, #32]
 800ead6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dc55      	bgt.n	800eb88 <_dtoa_r+0x310>
 800eadc:	2301      	movs	r3, #1
 800eade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eae2:	461a      	mov	r2, r3
 800eae4:	9209      	str	r2, [sp, #36]	; 0x24
 800eae6:	e00c      	b.n	800eb02 <_dtoa_r+0x28a>
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7f3      	b.n	800ead4 <_dtoa_r+0x25c>
 800eaec:	2300      	movs	r3, #0
 800eaee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf0:	9308      	str	r3, [sp, #32]
 800eaf2:	9b00      	ldr	r3, [sp, #0]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	9302      	str	r3, [sp, #8]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	9303      	str	r3, [sp, #12]
 800eafe:	bfb8      	it	lt
 800eb00:	2301      	movlt	r3, #1
 800eb02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb04:	2200      	movs	r2, #0
 800eb06:	6042      	str	r2, [r0, #4]
 800eb08:	2204      	movs	r2, #4
 800eb0a:	f102 0614 	add.w	r6, r2, #20
 800eb0e:	429e      	cmp	r6, r3
 800eb10:	6841      	ldr	r1, [r0, #4]
 800eb12:	d93d      	bls.n	800eb90 <_dtoa_r+0x318>
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 ff49 	bl	800f9ac <_Balloc>
 800eb1a:	9001      	str	r0, [sp, #4]
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d13b      	bne.n	800eb98 <_dtoa_r+0x320>
 800eb20:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <_dtoa_r+0x2f0>)
 800eb22:	4602      	mov	r2, r0
 800eb24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb28:	e6c0      	b.n	800e8ac <_dtoa_r+0x34>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e7df      	b.n	800eaee <_dtoa_r+0x276>
 800eb2e:	bf00      	nop
 800eb30:	636f4361 	.word	0x636f4361
 800eb34:	3fd287a7 	.word	0x3fd287a7
 800eb38:	8b60c8b3 	.word	0x8b60c8b3
 800eb3c:	3fc68a28 	.word	0x3fc68a28
 800eb40:	509f79fb 	.word	0x509f79fb
 800eb44:	3fd34413 	.word	0x3fd34413
 800eb48:	08039408 	.word	0x08039408
 800eb4c:	08039982 	.word	0x08039982
 800eb50:	7ff00000 	.word	0x7ff00000
 800eb54:	0803997e 	.word	0x0803997e
 800eb58:	08039975 	.word	0x08039975
 800eb5c:	08039c11 	.word	0x08039c11
 800eb60:	3ff80000 	.word	0x3ff80000
 800eb64:	08039b38 	.word	0x08039b38
 800eb68:	080399dd 	.word	0x080399dd
 800eb6c:	2501      	movs	r5, #1
 800eb6e:	2300      	movs	r3, #0
 800eb70:	9306      	str	r3, [sp, #24]
 800eb72:	9508      	str	r5, [sp, #32]
 800eb74:	f04f 33ff 	mov.w	r3, #4294967295
 800eb78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	2312      	movs	r3, #18
 800eb80:	e7b0      	b.n	800eae4 <_dtoa_r+0x26c>
 800eb82:	2301      	movs	r3, #1
 800eb84:	9308      	str	r3, [sp, #32]
 800eb86:	e7f5      	b.n	800eb74 <_dtoa_r+0x2fc>
 800eb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb8e:	e7b8      	b.n	800eb02 <_dtoa_r+0x28a>
 800eb90:	3101      	adds	r1, #1
 800eb92:	6041      	str	r1, [r0, #4]
 800eb94:	0052      	lsls	r2, r2, #1
 800eb96:	e7b8      	b.n	800eb0a <_dtoa_r+0x292>
 800eb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb9a:	9a01      	ldr	r2, [sp, #4]
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	9b03      	ldr	r3, [sp, #12]
 800eba0:	2b0e      	cmp	r3, #14
 800eba2:	f200 809d 	bhi.w	800ece0 <_dtoa_r+0x468>
 800eba6:	2d00      	cmp	r5, #0
 800eba8:	f000 809a 	beq.w	800ece0 <_dtoa_r+0x468>
 800ebac:	9b00      	ldr	r3, [sp, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	dd32      	ble.n	800ec18 <_dtoa_r+0x3a0>
 800ebb2:	4ab7      	ldr	r2, [pc, #732]	; (800ee90 <_dtoa_r+0x618>)
 800ebb4:	f003 030f 	and.w	r3, r3, #15
 800ebb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebc0:	9b00      	ldr	r3, [sp, #0]
 800ebc2:	05d8      	lsls	r0, r3, #23
 800ebc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ebc8:	d516      	bpl.n	800ebf8 <_dtoa_r+0x380>
 800ebca:	4bb2      	ldr	r3, [pc, #712]	; (800ee94 <_dtoa_r+0x61c>)
 800ebcc:	ec51 0b19 	vmov	r0, r1, d9
 800ebd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebd4:	f7f1 fe54 	bl	8000880 <__aeabi_ddiv>
 800ebd8:	f007 070f 	and.w	r7, r7, #15
 800ebdc:	4682      	mov	sl, r0
 800ebde:	468b      	mov	fp, r1
 800ebe0:	2503      	movs	r5, #3
 800ebe2:	4eac      	ldr	r6, [pc, #688]	; (800ee94 <_dtoa_r+0x61c>)
 800ebe4:	b957      	cbnz	r7, 800ebfc <_dtoa_r+0x384>
 800ebe6:	4642      	mov	r2, r8
 800ebe8:	464b      	mov	r3, r9
 800ebea:	4650      	mov	r0, sl
 800ebec:	4659      	mov	r1, fp
 800ebee:	f7f1 fe47 	bl	8000880 <__aeabi_ddiv>
 800ebf2:	4682      	mov	sl, r0
 800ebf4:	468b      	mov	fp, r1
 800ebf6:	e028      	b.n	800ec4a <_dtoa_r+0x3d2>
 800ebf8:	2502      	movs	r5, #2
 800ebfa:	e7f2      	b.n	800ebe2 <_dtoa_r+0x36a>
 800ebfc:	07f9      	lsls	r1, r7, #31
 800ebfe:	d508      	bpl.n	800ec12 <_dtoa_r+0x39a>
 800ec00:	4640      	mov	r0, r8
 800ec02:	4649      	mov	r1, r9
 800ec04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec08:	f7f1 fd10 	bl	800062c <__aeabi_dmul>
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	4680      	mov	r8, r0
 800ec10:	4689      	mov	r9, r1
 800ec12:	107f      	asrs	r7, r7, #1
 800ec14:	3608      	adds	r6, #8
 800ec16:	e7e5      	b.n	800ebe4 <_dtoa_r+0x36c>
 800ec18:	f000 809b 	beq.w	800ed52 <_dtoa_r+0x4da>
 800ec1c:	9b00      	ldr	r3, [sp, #0]
 800ec1e:	4f9d      	ldr	r7, [pc, #628]	; (800ee94 <_dtoa_r+0x61c>)
 800ec20:	425e      	negs	r6, r3
 800ec22:	4b9b      	ldr	r3, [pc, #620]	; (800ee90 <_dtoa_r+0x618>)
 800ec24:	f006 020f 	and.w	r2, r6, #15
 800ec28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec30:	ec51 0b19 	vmov	r0, r1, d9
 800ec34:	f7f1 fcfa 	bl	800062c <__aeabi_dmul>
 800ec38:	1136      	asrs	r6, r6, #4
 800ec3a:	4682      	mov	sl, r0
 800ec3c:	468b      	mov	fp, r1
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2502      	movs	r5, #2
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d17a      	bne.n	800ed3c <_dtoa_r+0x4c4>
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1d3      	bne.n	800ebf2 <_dtoa_r+0x37a>
 800ec4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f000 8082 	beq.w	800ed56 <_dtoa_r+0x4de>
 800ec52:	4b91      	ldr	r3, [pc, #580]	; (800ee98 <_dtoa_r+0x620>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	4650      	mov	r0, sl
 800ec58:	4659      	mov	r1, fp
 800ec5a:	f7f1 ff59 	bl	8000b10 <__aeabi_dcmplt>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d079      	beq.n	800ed56 <_dtoa_r+0x4de>
 800ec62:	9b03      	ldr	r3, [sp, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d076      	beq.n	800ed56 <_dtoa_r+0x4de>
 800ec68:	9b02      	ldr	r3, [sp, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	dd36      	ble.n	800ecdc <_dtoa_r+0x464>
 800ec6e:	9b00      	ldr	r3, [sp, #0]
 800ec70:	4650      	mov	r0, sl
 800ec72:	4659      	mov	r1, fp
 800ec74:	1e5f      	subs	r7, r3, #1
 800ec76:	2200      	movs	r2, #0
 800ec78:	4b88      	ldr	r3, [pc, #544]	; (800ee9c <_dtoa_r+0x624>)
 800ec7a:	f7f1 fcd7 	bl	800062c <__aeabi_dmul>
 800ec7e:	9e02      	ldr	r6, [sp, #8]
 800ec80:	4682      	mov	sl, r0
 800ec82:	468b      	mov	fp, r1
 800ec84:	3501      	adds	r5, #1
 800ec86:	4628      	mov	r0, r5
 800ec88:	f7f1 fc66 	bl	8000558 <__aeabi_i2d>
 800ec8c:	4652      	mov	r2, sl
 800ec8e:	465b      	mov	r3, fp
 800ec90:	f7f1 fccc 	bl	800062c <__aeabi_dmul>
 800ec94:	4b82      	ldr	r3, [pc, #520]	; (800eea0 <_dtoa_r+0x628>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	f7f1 fb12 	bl	80002c0 <__adddf3>
 800ec9c:	46d0      	mov	r8, sl
 800ec9e:	46d9      	mov	r9, fp
 800eca0:	4682      	mov	sl, r0
 800eca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800eca6:	2e00      	cmp	r6, #0
 800eca8:	d158      	bne.n	800ed5c <_dtoa_r+0x4e4>
 800ecaa:	4b7e      	ldr	r3, [pc, #504]	; (800eea4 <_dtoa_r+0x62c>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	4640      	mov	r0, r8
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	f7f1 fb03 	bl	80002bc <__aeabi_dsub>
 800ecb6:	4652      	mov	r2, sl
 800ecb8:	465b      	mov	r3, fp
 800ecba:	4680      	mov	r8, r0
 800ecbc:	4689      	mov	r9, r1
 800ecbe:	f7f1 ff45 	bl	8000b4c <__aeabi_dcmpgt>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	f040 8295 	bne.w	800f1f2 <_dtoa_r+0x97a>
 800ecc8:	4652      	mov	r2, sl
 800ecca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecce:	4640      	mov	r0, r8
 800ecd0:	4649      	mov	r1, r9
 800ecd2:	f7f1 ff1d 	bl	8000b10 <__aeabi_dcmplt>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f040 8289 	bne.w	800f1ee <_dtoa_r+0x976>
 800ecdc:	ec5b ab19 	vmov	sl, fp, d9
 800ece0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f2c0 8148 	blt.w	800ef78 <_dtoa_r+0x700>
 800ece8:	9a00      	ldr	r2, [sp, #0]
 800ecea:	2a0e      	cmp	r2, #14
 800ecec:	f300 8144 	bgt.w	800ef78 <_dtoa_r+0x700>
 800ecf0:	4b67      	ldr	r3, [pc, #412]	; (800ee90 <_dtoa_r+0x618>)
 800ecf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f280 80d5 	bge.w	800eeac <_dtoa_r+0x634>
 800ed02:	9b03      	ldr	r3, [sp, #12]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f300 80d1 	bgt.w	800eeac <_dtoa_r+0x634>
 800ed0a:	f040 826f 	bne.w	800f1ec <_dtoa_r+0x974>
 800ed0e:	4b65      	ldr	r3, [pc, #404]	; (800eea4 <_dtoa_r+0x62c>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	4640      	mov	r0, r8
 800ed14:	4649      	mov	r1, r9
 800ed16:	f7f1 fc89 	bl	800062c <__aeabi_dmul>
 800ed1a:	4652      	mov	r2, sl
 800ed1c:	465b      	mov	r3, fp
 800ed1e:	f7f1 ff0b 	bl	8000b38 <__aeabi_dcmpge>
 800ed22:	9e03      	ldr	r6, [sp, #12]
 800ed24:	4637      	mov	r7, r6
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f040 8245 	bne.w	800f1b6 <_dtoa_r+0x93e>
 800ed2c:	9d01      	ldr	r5, [sp, #4]
 800ed2e:	2331      	movs	r3, #49	; 0x31
 800ed30:	f805 3b01 	strb.w	r3, [r5], #1
 800ed34:	9b00      	ldr	r3, [sp, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	e240      	b.n	800f1be <_dtoa_r+0x946>
 800ed3c:	07f2      	lsls	r2, r6, #31
 800ed3e:	d505      	bpl.n	800ed4c <_dtoa_r+0x4d4>
 800ed40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed44:	f7f1 fc72 	bl	800062c <__aeabi_dmul>
 800ed48:	3501      	adds	r5, #1
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	1076      	asrs	r6, r6, #1
 800ed4e:	3708      	adds	r7, #8
 800ed50:	e777      	b.n	800ec42 <_dtoa_r+0x3ca>
 800ed52:	2502      	movs	r5, #2
 800ed54:	e779      	b.n	800ec4a <_dtoa_r+0x3d2>
 800ed56:	9f00      	ldr	r7, [sp, #0]
 800ed58:	9e03      	ldr	r6, [sp, #12]
 800ed5a:	e794      	b.n	800ec86 <_dtoa_r+0x40e>
 800ed5c:	9901      	ldr	r1, [sp, #4]
 800ed5e:	4b4c      	ldr	r3, [pc, #304]	; (800ee90 <_dtoa_r+0x618>)
 800ed60:	4431      	add	r1, r6
 800ed62:	910d      	str	r1, [sp, #52]	; 0x34
 800ed64:	9908      	ldr	r1, [sp, #32]
 800ed66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed6e:	2900      	cmp	r1, #0
 800ed70:	d043      	beq.n	800edfa <_dtoa_r+0x582>
 800ed72:	494d      	ldr	r1, [pc, #308]	; (800eea8 <_dtoa_r+0x630>)
 800ed74:	2000      	movs	r0, #0
 800ed76:	f7f1 fd83 	bl	8000880 <__aeabi_ddiv>
 800ed7a:	4652      	mov	r2, sl
 800ed7c:	465b      	mov	r3, fp
 800ed7e:	f7f1 fa9d 	bl	80002bc <__aeabi_dsub>
 800ed82:	9d01      	ldr	r5, [sp, #4]
 800ed84:	4682      	mov	sl, r0
 800ed86:	468b      	mov	fp, r1
 800ed88:	4649      	mov	r1, r9
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	f7f1 fefe 	bl	8000b8c <__aeabi_d2iz>
 800ed90:	4606      	mov	r6, r0
 800ed92:	f7f1 fbe1 	bl	8000558 <__aeabi_i2d>
 800ed96:	4602      	mov	r2, r0
 800ed98:	460b      	mov	r3, r1
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	4649      	mov	r1, r9
 800ed9e:	f7f1 fa8d 	bl	80002bc <__aeabi_dsub>
 800eda2:	3630      	adds	r6, #48	; 0x30
 800eda4:	f805 6b01 	strb.w	r6, [r5], #1
 800eda8:	4652      	mov	r2, sl
 800edaa:	465b      	mov	r3, fp
 800edac:	4680      	mov	r8, r0
 800edae:	4689      	mov	r9, r1
 800edb0:	f7f1 feae 	bl	8000b10 <__aeabi_dcmplt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d163      	bne.n	800ee80 <_dtoa_r+0x608>
 800edb8:	4642      	mov	r2, r8
 800edba:	464b      	mov	r3, r9
 800edbc:	4936      	ldr	r1, [pc, #216]	; (800ee98 <_dtoa_r+0x620>)
 800edbe:	2000      	movs	r0, #0
 800edc0:	f7f1 fa7c 	bl	80002bc <__aeabi_dsub>
 800edc4:	4652      	mov	r2, sl
 800edc6:	465b      	mov	r3, fp
 800edc8:	f7f1 fea2 	bl	8000b10 <__aeabi_dcmplt>
 800edcc:	2800      	cmp	r0, #0
 800edce:	f040 80b5 	bne.w	800ef3c <_dtoa_r+0x6c4>
 800edd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edd4:	429d      	cmp	r5, r3
 800edd6:	d081      	beq.n	800ecdc <_dtoa_r+0x464>
 800edd8:	4b30      	ldr	r3, [pc, #192]	; (800ee9c <_dtoa_r+0x624>)
 800edda:	2200      	movs	r2, #0
 800eddc:	4650      	mov	r0, sl
 800edde:	4659      	mov	r1, fp
 800ede0:	f7f1 fc24 	bl	800062c <__aeabi_dmul>
 800ede4:	4b2d      	ldr	r3, [pc, #180]	; (800ee9c <_dtoa_r+0x624>)
 800ede6:	4682      	mov	sl, r0
 800ede8:	468b      	mov	fp, r1
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	2200      	movs	r2, #0
 800edf0:	f7f1 fc1c 	bl	800062c <__aeabi_dmul>
 800edf4:	4680      	mov	r8, r0
 800edf6:	4689      	mov	r9, r1
 800edf8:	e7c6      	b.n	800ed88 <_dtoa_r+0x510>
 800edfa:	4650      	mov	r0, sl
 800edfc:	4659      	mov	r1, fp
 800edfe:	f7f1 fc15 	bl	800062c <__aeabi_dmul>
 800ee02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee04:	9d01      	ldr	r5, [sp, #4]
 800ee06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee08:	4682      	mov	sl, r0
 800ee0a:	468b      	mov	fp, r1
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	4640      	mov	r0, r8
 800ee10:	f7f1 febc 	bl	8000b8c <__aeabi_d2iz>
 800ee14:	4606      	mov	r6, r0
 800ee16:	f7f1 fb9f 	bl	8000558 <__aeabi_i2d>
 800ee1a:	3630      	adds	r6, #48	; 0x30
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4640      	mov	r0, r8
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fa4a 	bl	80002bc <__aeabi_dsub>
 800ee28:	f805 6b01 	strb.w	r6, [r5], #1
 800ee2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee2e:	429d      	cmp	r5, r3
 800ee30:	4680      	mov	r8, r0
 800ee32:	4689      	mov	r9, r1
 800ee34:	f04f 0200 	mov.w	r2, #0
 800ee38:	d124      	bne.n	800ee84 <_dtoa_r+0x60c>
 800ee3a:	4b1b      	ldr	r3, [pc, #108]	; (800eea8 <_dtoa_r+0x630>)
 800ee3c:	4650      	mov	r0, sl
 800ee3e:	4659      	mov	r1, fp
 800ee40:	f7f1 fa3e 	bl	80002c0 <__adddf3>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fe7e 	bl	8000b4c <__aeabi_dcmpgt>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d173      	bne.n	800ef3c <_dtoa_r+0x6c4>
 800ee54:	4652      	mov	r2, sl
 800ee56:	465b      	mov	r3, fp
 800ee58:	4913      	ldr	r1, [pc, #76]	; (800eea8 <_dtoa_r+0x630>)
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f7f1 fa2e 	bl	80002bc <__aeabi_dsub>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4640      	mov	r0, r8
 800ee66:	4649      	mov	r1, r9
 800ee68:	f7f1 fe52 	bl	8000b10 <__aeabi_dcmplt>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	f43f af35 	beq.w	800ecdc <_dtoa_r+0x464>
 800ee72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee74:	1e6b      	subs	r3, r5, #1
 800ee76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee7c:	2b30      	cmp	r3, #48	; 0x30
 800ee7e:	d0f8      	beq.n	800ee72 <_dtoa_r+0x5fa>
 800ee80:	9700      	str	r7, [sp, #0]
 800ee82:	e049      	b.n	800ef18 <_dtoa_r+0x6a0>
 800ee84:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <_dtoa_r+0x624>)
 800ee86:	f7f1 fbd1 	bl	800062c <__aeabi_dmul>
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	4689      	mov	r9, r1
 800ee8e:	e7bd      	b.n	800ee0c <_dtoa_r+0x594>
 800ee90:	08039b38 	.word	0x08039b38
 800ee94:	08039b10 	.word	0x08039b10
 800ee98:	3ff00000 	.word	0x3ff00000
 800ee9c:	40240000 	.word	0x40240000
 800eea0:	401c0000 	.word	0x401c0000
 800eea4:	40140000 	.word	0x40140000
 800eea8:	3fe00000 	.word	0x3fe00000
 800eeac:	9d01      	ldr	r5, [sp, #4]
 800eeae:	4656      	mov	r6, sl
 800eeb0:	465f      	mov	r7, fp
 800eeb2:	4642      	mov	r2, r8
 800eeb4:	464b      	mov	r3, r9
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	4639      	mov	r1, r7
 800eeba:	f7f1 fce1 	bl	8000880 <__aeabi_ddiv>
 800eebe:	f7f1 fe65 	bl	8000b8c <__aeabi_d2iz>
 800eec2:	4682      	mov	sl, r0
 800eec4:	f7f1 fb48 	bl	8000558 <__aeabi_i2d>
 800eec8:	4642      	mov	r2, r8
 800eeca:	464b      	mov	r3, r9
 800eecc:	f7f1 fbae 	bl	800062c <__aeabi_dmul>
 800eed0:	4602      	mov	r2, r0
 800eed2:	460b      	mov	r3, r1
 800eed4:	4630      	mov	r0, r6
 800eed6:	4639      	mov	r1, r7
 800eed8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eedc:	f7f1 f9ee 	bl	80002bc <__aeabi_dsub>
 800eee0:	f805 6b01 	strb.w	r6, [r5], #1
 800eee4:	9e01      	ldr	r6, [sp, #4]
 800eee6:	9f03      	ldr	r7, [sp, #12]
 800eee8:	1bae      	subs	r6, r5, r6
 800eeea:	42b7      	cmp	r7, r6
 800eeec:	4602      	mov	r2, r0
 800eeee:	460b      	mov	r3, r1
 800eef0:	d135      	bne.n	800ef5e <_dtoa_r+0x6e6>
 800eef2:	f7f1 f9e5 	bl	80002c0 <__adddf3>
 800eef6:	4642      	mov	r2, r8
 800eef8:	464b      	mov	r3, r9
 800eefa:	4606      	mov	r6, r0
 800eefc:	460f      	mov	r7, r1
 800eefe:	f7f1 fe25 	bl	8000b4c <__aeabi_dcmpgt>
 800ef02:	b9d0      	cbnz	r0, 800ef3a <_dtoa_r+0x6c2>
 800ef04:	4642      	mov	r2, r8
 800ef06:	464b      	mov	r3, r9
 800ef08:	4630      	mov	r0, r6
 800ef0a:	4639      	mov	r1, r7
 800ef0c:	f7f1 fdf6 	bl	8000afc <__aeabi_dcmpeq>
 800ef10:	b110      	cbz	r0, 800ef18 <_dtoa_r+0x6a0>
 800ef12:	f01a 0f01 	tst.w	sl, #1
 800ef16:	d110      	bne.n	800ef3a <_dtoa_r+0x6c2>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	ee18 1a10 	vmov	r1, s16
 800ef1e:	f000 fd85 	bl	800fa2c <_Bfree>
 800ef22:	2300      	movs	r3, #0
 800ef24:	9800      	ldr	r0, [sp, #0]
 800ef26:	702b      	strb	r3, [r5, #0]
 800ef28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	6018      	str	r0, [r3, #0]
 800ef2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f43f acf1 	beq.w	800e918 <_dtoa_r+0xa0>
 800ef36:	601d      	str	r5, [r3, #0]
 800ef38:	e4ee      	b.n	800e918 <_dtoa_r+0xa0>
 800ef3a:	9f00      	ldr	r7, [sp, #0]
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	461d      	mov	r5, r3
 800ef40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef44:	2a39      	cmp	r2, #57	; 0x39
 800ef46:	d106      	bne.n	800ef56 <_dtoa_r+0x6de>
 800ef48:	9a01      	ldr	r2, [sp, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d1f7      	bne.n	800ef3e <_dtoa_r+0x6c6>
 800ef4e:	9901      	ldr	r1, [sp, #4]
 800ef50:	2230      	movs	r2, #48	; 0x30
 800ef52:	3701      	adds	r7, #1
 800ef54:	700a      	strb	r2, [r1, #0]
 800ef56:	781a      	ldrb	r2, [r3, #0]
 800ef58:	3201      	adds	r2, #1
 800ef5a:	701a      	strb	r2, [r3, #0]
 800ef5c:	e790      	b.n	800ee80 <_dtoa_r+0x608>
 800ef5e:	4ba6      	ldr	r3, [pc, #664]	; (800f1f8 <_dtoa_r+0x980>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	f7f1 fb63 	bl	800062c <__aeabi_dmul>
 800ef66:	2200      	movs	r2, #0
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	f7f1 fdc5 	bl	8000afc <__aeabi_dcmpeq>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d09d      	beq.n	800eeb2 <_dtoa_r+0x63a>
 800ef76:	e7cf      	b.n	800ef18 <_dtoa_r+0x6a0>
 800ef78:	9a08      	ldr	r2, [sp, #32]
 800ef7a:	2a00      	cmp	r2, #0
 800ef7c:	f000 80d7 	beq.w	800f12e <_dtoa_r+0x8b6>
 800ef80:	9a06      	ldr	r2, [sp, #24]
 800ef82:	2a01      	cmp	r2, #1
 800ef84:	f300 80ba 	bgt.w	800f0fc <_dtoa_r+0x884>
 800ef88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	f000 80b2 	beq.w	800f0f4 <_dtoa_r+0x87c>
 800ef90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef94:	9e07      	ldr	r6, [sp, #28]
 800ef96:	9d04      	ldr	r5, [sp, #16]
 800ef98:	9a04      	ldr	r2, [sp, #16]
 800ef9a:	441a      	add	r2, r3
 800ef9c:	9204      	str	r2, [sp, #16]
 800ef9e:	9a05      	ldr	r2, [sp, #20]
 800efa0:	2101      	movs	r1, #1
 800efa2:	441a      	add	r2, r3
 800efa4:	4620      	mov	r0, r4
 800efa6:	9205      	str	r2, [sp, #20]
 800efa8:	f000 fdf8 	bl	800fb9c <__i2b>
 800efac:	4607      	mov	r7, r0
 800efae:	2d00      	cmp	r5, #0
 800efb0:	dd0c      	ble.n	800efcc <_dtoa_r+0x754>
 800efb2:	9b05      	ldr	r3, [sp, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	dd09      	ble.n	800efcc <_dtoa_r+0x754>
 800efb8:	42ab      	cmp	r3, r5
 800efba:	9a04      	ldr	r2, [sp, #16]
 800efbc:	bfa8      	it	ge
 800efbe:	462b      	movge	r3, r5
 800efc0:	1ad2      	subs	r2, r2, r3
 800efc2:	9204      	str	r2, [sp, #16]
 800efc4:	9a05      	ldr	r2, [sp, #20]
 800efc6:	1aed      	subs	r5, r5, r3
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	9305      	str	r3, [sp, #20]
 800efcc:	9b07      	ldr	r3, [sp, #28]
 800efce:	b31b      	cbz	r3, 800f018 <_dtoa_r+0x7a0>
 800efd0:	9b08      	ldr	r3, [sp, #32]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f000 80af 	beq.w	800f136 <_dtoa_r+0x8be>
 800efd8:	2e00      	cmp	r6, #0
 800efda:	dd13      	ble.n	800f004 <_dtoa_r+0x78c>
 800efdc:	4639      	mov	r1, r7
 800efde:	4632      	mov	r2, r6
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 fe9b 	bl	800fd1c <__pow5mult>
 800efe6:	ee18 2a10 	vmov	r2, s16
 800efea:	4601      	mov	r1, r0
 800efec:	4607      	mov	r7, r0
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 fdea 	bl	800fbc8 <__multiply>
 800eff4:	ee18 1a10 	vmov	r1, s16
 800eff8:	4680      	mov	r8, r0
 800effa:	4620      	mov	r0, r4
 800effc:	f000 fd16 	bl	800fa2c <_Bfree>
 800f000:	ee08 8a10 	vmov	s16, r8
 800f004:	9b07      	ldr	r3, [sp, #28]
 800f006:	1b9a      	subs	r2, r3, r6
 800f008:	d006      	beq.n	800f018 <_dtoa_r+0x7a0>
 800f00a:	ee18 1a10 	vmov	r1, s16
 800f00e:	4620      	mov	r0, r4
 800f010:	f000 fe84 	bl	800fd1c <__pow5mult>
 800f014:	ee08 0a10 	vmov	s16, r0
 800f018:	2101      	movs	r1, #1
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fdbe 	bl	800fb9c <__i2b>
 800f020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f022:	2b00      	cmp	r3, #0
 800f024:	4606      	mov	r6, r0
 800f026:	f340 8088 	ble.w	800f13a <_dtoa_r+0x8c2>
 800f02a:	461a      	mov	r2, r3
 800f02c:	4601      	mov	r1, r0
 800f02e:	4620      	mov	r0, r4
 800f030:	f000 fe74 	bl	800fd1c <__pow5mult>
 800f034:	9b06      	ldr	r3, [sp, #24]
 800f036:	2b01      	cmp	r3, #1
 800f038:	4606      	mov	r6, r0
 800f03a:	f340 8081 	ble.w	800f140 <_dtoa_r+0x8c8>
 800f03e:	f04f 0800 	mov.w	r8, #0
 800f042:	6933      	ldr	r3, [r6, #16]
 800f044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f048:	6918      	ldr	r0, [r3, #16]
 800f04a:	f000 fd57 	bl	800fafc <__hi0bits>
 800f04e:	f1c0 0020 	rsb	r0, r0, #32
 800f052:	9b05      	ldr	r3, [sp, #20]
 800f054:	4418      	add	r0, r3
 800f056:	f010 001f 	ands.w	r0, r0, #31
 800f05a:	f000 8092 	beq.w	800f182 <_dtoa_r+0x90a>
 800f05e:	f1c0 0320 	rsb	r3, r0, #32
 800f062:	2b04      	cmp	r3, #4
 800f064:	f340 808a 	ble.w	800f17c <_dtoa_r+0x904>
 800f068:	f1c0 001c 	rsb	r0, r0, #28
 800f06c:	9b04      	ldr	r3, [sp, #16]
 800f06e:	4403      	add	r3, r0
 800f070:	9304      	str	r3, [sp, #16]
 800f072:	9b05      	ldr	r3, [sp, #20]
 800f074:	4403      	add	r3, r0
 800f076:	4405      	add	r5, r0
 800f078:	9305      	str	r3, [sp, #20]
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dd07      	ble.n	800f090 <_dtoa_r+0x818>
 800f080:	ee18 1a10 	vmov	r1, s16
 800f084:	461a      	mov	r2, r3
 800f086:	4620      	mov	r0, r4
 800f088:	f000 fea2 	bl	800fdd0 <__lshift>
 800f08c:	ee08 0a10 	vmov	s16, r0
 800f090:	9b05      	ldr	r3, [sp, #20]
 800f092:	2b00      	cmp	r3, #0
 800f094:	dd05      	ble.n	800f0a2 <_dtoa_r+0x82a>
 800f096:	4631      	mov	r1, r6
 800f098:	461a      	mov	r2, r3
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 fe98 	bl	800fdd0 <__lshift>
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d06e      	beq.n	800f186 <_dtoa_r+0x90e>
 800f0a8:	ee18 0a10 	vmov	r0, s16
 800f0ac:	4631      	mov	r1, r6
 800f0ae:	f000 feff 	bl	800feb0 <__mcmp>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	da67      	bge.n	800f186 <_dtoa_r+0x90e>
 800f0b6:	9b00      	ldr	r3, [sp, #0]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	ee18 1a10 	vmov	r1, s16
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	220a      	movs	r2, #10
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f000 fcd3 	bl	800fa70 <__multadd>
 800f0ca:	9b08      	ldr	r3, [sp, #32]
 800f0cc:	ee08 0a10 	vmov	s16, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f000 81b1 	beq.w	800f438 <_dtoa_r+0xbc0>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4639      	mov	r1, r7
 800f0da:	220a      	movs	r2, #10
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f000 fcc7 	bl	800fa70 <__multadd>
 800f0e2:	9b02      	ldr	r3, [sp, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	f300 808e 	bgt.w	800f208 <_dtoa_r+0x990>
 800f0ec:	9b06      	ldr	r3, [sp, #24]
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	dc51      	bgt.n	800f196 <_dtoa_r+0x91e>
 800f0f2:	e089      	b.n	800f208 <_dtoa_r+0x990>
 800f0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0fa:	e74b      	b.n	800ef94 <_dtoa_r+0x71c>
 800f0fc:	9b03      	ldr	r3, [sp, #12]
 800f0fe:	1e5e      	subs	r6, r3, #1
 800f100:	9b07      	ldr	r3, [sp, #28]
 800f102:	42b3      	cmp	r3, r6
 800f104:	bfbf      	itttt	lt
 800f106:	9b07      	ldrlt	r3, [sp, #28]
 800f108:	9607      	strlt	r6, [sp, #28]
 800f10a:	1af2      	sublt	r2, r6, r3
 800f10c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f10e:	bfb6      	itet	lt
 800f110:	189b      	addlt	r3, r3, r2
 800f112:	1b9e      	subge	r6, r3, r6
 800f114:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	bfb8      	it	lt
 800f11a:	2600      	movlt	r6, #0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	bfb7      	itett	lt
 800f120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f128:	1a9d      	sublt	r5, r3, r2
 800f12a:	2300      	movlt	r3, #0
 800f12c:	e734      	b.n	800ef98 <_dtoa_r+0x720>
 800f12e:	9e07      	ldr	r6, [sp, #28]
 800f130:	9d04      	ldr	r5, [sp, #16]
 800f132:	9f08      	ldr	r7, [sp, #32]
 800f134:	e73b      	b.n	800efae <_dtoa_r+0x736>
 800f136:	9a07      	ldr	r2, [sp, #28]
 800f138:	e767      	b.n	800f00a <_dtoa_r+0x792>
 800f13a:	9b06      	ldr	r3, [sp, #24]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	dc18      	bgt.n	800f172 <_dtoa_r+0x8fa>
 800f140:	f1ba 0f00 	cmp.w	sl, #0
 800f144:	d115      	bne.n	800f172 <_dtoa_r+0x8fa>
 800f146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f14a:	b993      	cbnz	r3, 800f172 <_dtoa_r+0x8fa>
 800f14c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f150:	0d1b      	lsrs	r3, r3, #20
 800f152:	051b      	lsls	r3, r3, #20
 800f154:	b183      	cbz	r3, 800f178 <_dtoa_r+0x900>
 800f156:	9b04      	ldr	r3, [sp, #16]
 800f158:	3301      	adds	r3, #1
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	9b05      	ldr	r3, [sp, #20]
 800f15e:	3301      	adds	r3, #1
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	f04f 0801 	mov.w	r8, #1
 800f166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f47f af6a 	bne.w	800f042 <_dtoa_r+0x7ca>
 800f16e:	2001      	movs	r0, #1
 800f170:	e76f      	b.n	800f052 <_dtoa_r+0x7da>
 800f172:	f04f 0800 	mov.w	r8, #0
 800f176:	e7f6      	b.n	800f166 <_dtoa_r+0x8ee>
 800f178:	4698      	mov	r8, r3
 800f17a:	e7f4      	b.n	800f166 <_dtoa_r+0x8ee>
 800f17c:	f43f af7d 	beq.w	800f07a <_dtoa_r+0x802>
 800f180:	4618      	mov	r0, r3
 800f182:	301c      	adds	r0, #28
 800f184:	e772      	b.n	800f06c <_dtoa_r+0x7f4>
 800f186:	9b03      	ldr	r3, [sp, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc37      	bgt.n	800f1fc <_dtoa_r+0x984>
 800f18c:	9b06      	ldr	r3, [sp, #24]
 800f18e:	2b02      	cmp	r3, #2
 800f190:	dd34      	ble.n	800f1fc <_dtoa_r+0x984>
 800f192:	9b03      	ldr	r3, [sp, #12]
 800f194:	9302      	str	r3, [sp, #8]
 800f196:	9b02      	ldr	r3, [sp, #8]
 800f198:	b96b      	cbnz	r3, 800f1b6 <_dtoa_r+0x93e>
 800f19a:	4631      	mov	r1, r6
 800f19c:	2205      	movs	r2, #5
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f000 fc66 	bl	800fa70 <__multadd>
 800f1a4:	4601      	mov	r1, r0
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	ee18 0a10 	vmov	r0, s16
 800f1ac:	f000 fe80 	bl	800feb0 <__mcmp>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	f73f adbb 	bgt.w	800ed2c <_dtoa_r+0x4b4>
 800f1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b8:	9d01      	ldr	r5, [sp, #4]
 800f1ba:	43db      	mvns	r3, r3
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	f04f 0800 	mov.w	r8, #0
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f000 fc31 	bl	800fa2c <_Bfree>
 800f1ca:	2f00      	cmp	r7, #0
 800f1cc:	f43f aea4 	beq.w	800ef18 <_dtoa_r+0x6a0>
 800f1d0:	f1b8 0f00 	cmp.w	r8, #0
 800f1d4:	d005      	beq.n	800f1e2 <_dtoa_r+0x96a>
 800f1d6:	45b8      	cmp	r8, r7
 800f1d8:	d003      	beq.n	800f1e2 <_dtoa_r+0x96a>
 800f1da:	4641      	mov	r1, r8
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fc25 	bl	800fa2c <_Bfree>
 800f1e2:	4639      	mov	r1, r7
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 fc21 	bl	800fa2c <_Bfree>
 800f1ea:	e695      	b.n	800ef18 <_dtoa_r+0x6a0>
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	4637      	mov	r7, r6
 800f1f0:	e7e1      	b.n	800f1b6 <_dtoa_r+0x93e>
 800f1f2:	9700      	str	r7, [sp, #0]
 800f1f4:	4637      	mov	r7, r6
 800f1f6:	e599      	b.n	800ed2c <_dtoa_r+0x4b4>
 800f1f8:	40240000 	.word	0x40240000
 800f1fc:	9b08      	ldr	r3, [sp, #32]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 80ca 	beq.w	800f398 <_dtoa_r+0xb20>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	9302      	str	r3, [sp, #8]
 800f208:	2d00      	cmp	r5, #0
 800f20a:	dd05      	ble.n	800f218 <_dtoa_r+0x9a0>
 800f20c:	4639      	mov	r1, r7
 800f20e:	462a      	mov	r2, r5
 800f210:	4620      	mov	r0, r4
 800f212:	f000 fddd 	bl	800fdd0 <__lshift>
 800f216:	4607      	mov	r7, r0
 800f218:	f1b8 0f00 	cmp.w	r8, #0
 800f21c:	d05b      	beq.n	800f2d6 <_dtoa_r+0xa5e>
 800f21e:	6879      	ldr	r1, [r7, #4]
 800f220:	4620      	mov	r0, r4
 800f222:	f000 fbc3 	bl	800f9ac <_Balloc>
 800f226:	4605      	mov	r5, r0
 800f228:	b928      	cbnz	r0, 800f236 <_dtoa_r+0x9be>
 800f22a:	4b87      	ldr	r3, [pc, #540]	; (800f448 <_dtoa_r+0xbd0>)
 800f22c:	4602      	mov	r2, r0
 800f22e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f232:	f7ff bb3b 	b.w	800e8ac <_dtoa_r+0x34>
 800f236:	693a      	ldr	r2, [r7, #16]
 800f238:	3202      	adds	r2, #2
 800f23a:	0092      	lsls	r2, r2, #2
 800f23c:	f107 010c 	add.w	r1, r7, #12
 800f240:	300c      	adds	r0, #12
 800f242:	f7fc ffb3 	bl	800c1ac <memcpy>
 800f246:	2201      	movs	r2, #1
 800f248:	4629      	mov	r1, r5
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fdc0 	bl	800fdd0 <__lshift>
 800f250:	9b01      	ldr	r3, [sp, #4]
 800f252:	f103 0901 	add.w	r9, r3, #1
 800f256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f25a:	4413      	add	r3, r2
 800f25c:	9305      	str	r3, [sp, #20]
 800f25e:	f00a 0301 	and.w	r3, sl, #1
 800f262:	46b8      	mov	r8, r7
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	4607      	mov	r7, r0
 800f268:	4631      	mov	r1, r6
 800f26a:	ee18 0a10 	vmov	r0, s16
 800f26e:	f7ff fa75 	bl	800e75c <quorem>
 800f272:	4641      	mov	r1, r8
 800f274:	9002      	str	r0, [sp, #8]
 800f276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f27a:	ee18 0a10 	vmov	r0, s16
 800f27e:	f000 fe17 	bl	800feb0 <__mcmp>
 800f282:	463a      	mov	r2, r7
 800f284:	9003      	str	r0, [sp, #12]
 800f286:	4631      	mov	r1, r6
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fe2d 	bl	800fee8 <__mdiff>
 800f28e:	68c2      	ldr	r2, [r0, #12]
 800f290:	f109 3bff 	add.w	fp, r9, #4294967295
 800f294:	4605      	mov	r5, r0
 800f296:	bb02      	cbnz	r2, 800f2da <_dtoa_r+0xa62>
 800f298:	4601      	mov	r1, r0
 800f29a:	ee18 0a10 	vmov	r0, s16
 800f29e:	f000 fe07 	bl	800feb0 <__mcmp>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	9207      	str	r2, [sp, #28]
 800f2aa:	f000 fbbf 	bl	800fa2c <_Bfree>
 800f2ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f2b2:	ea43 0102 	orr.w	r1, r3, r2
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	430b      	orrs	r3, r1
 800f2ba:	464d      	mov	r5, r9
 800f2bc:	d10f      	bne.n	800f2de <_dtoa_r+0xa66>
 800f2be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2c2:	d02a      	beq.n	800f31a <_dtoa_r+0xaa2>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dd02      	ble.n	800f2d0 <_dtoa_r+0xa58>
 800f2ca:	9b02      	ldr	r3, [sp, #8]
 800f2cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f2d0:	f88b a000 	strb.w	sl, [fp]
 800f2d4:	e775      	b.n	800f1c2 <_dtoa_r+0x94a>
 800f2d6:	4638      	mov	r0, r7
 800f2d8:	e7ba      	b.n	800f250 <_dtoa_r+0x9d8>
 800f2da:	2201      	movs	r2, #1
 800f2dc:	e7e2      	b.n	800f2a4 <_dtoa_r+0xa2c>
 800f2de:	9b03      	ldr	r3, [sp, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	db04      	blt.n	800f2ee <_dtoa_r+0xa76>
 800f2e4:	9906      	ldr	r1, [sp, #24]
 800f2e6:	430b      	orrs	r3, r1
 800f2e8:	9904      	ldr	r1, [sp, #16]
 800f2ea:	430b      	orrs	r3, r1
 800f2ec:	d122      	bne.n	800f334 <_dtoa_r+0xabc>
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	ddee      	ble.n	800f2d0 <_dtoa_r+0xa58>
 800f2f2:	ee18 1a10 	vmov	r1, s16
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f000 fd69 	bl	800fdd0 <__lshift>
 800f2fe:	4631      	mov	r1, r6
 800f300:	ee08 0a10 	vmov	s16, r0
 800f304:	f000 fdd4 	bl	800feb0 <__mcmp>
 800f308:	2800      	cmp	r0, #0
 800f30a:	dc03      	bgt.n	800f314 <_dtoa_r+0xa9c>
 800f30c:	d1e0      	bne.n	800f2d0 <_dtoa_r+0xa58>
 800f30e:	f01a 0f01 	tst.w	sl, #1
 800f312:	d0dd      	beq.n	800f2d0 <_dtoa_r+0xa58>
 800f314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f318:	d1d7      	bne.n	800f2ca <_dtoa_r+0xa52>
 800f31a:	2339      	movs	r3, #57	; 0x39
 800f31c:	f88b 3000 	strb.w	r3, [fp]
 800f320:	462b      	mov	r3, r5
 800f322:	461d      	mov	r5, r3
 800f324:	3b01      	subs	r3, #1
 800f326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f32a:	2a39      	cmp	r2, #57	; 0x39
 800f32c:	d071      	beq.n	800f412 <_dtoa_r+0xb9a>
 800f32e:	3201      	adds	r2, #1
 800f330:	701a      	strb	r2, [r3, #0]
 800f332:	e746      	b.n	800f1c2 <_dtoa_r+0x94a>
 800f334:	2a00      	cmp	r2, #0
 800f336:	dd07      	ble.n	800f348 <_dtoa_r+0xad0>
 800f338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f33c:	d0ed      	beq.n	800f31a <_dtoa_r+0xaa2>
 800f33e:	f10a 0301 	add.w	r3, sl, #1
 800f342:	f88b 3000 	strb.w	r3, [fp]
 800f346:	e73c      	b.n	800f1c2 <_dtoa_r+0x94a>
 800f348:	9b05      	ldr	r3, [sp, #20]
 800f34a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f34e:	4599      	cmp	r9, r3
 800f350:	d047      	beq.n	800f3e2 <_dtoa_r+0xb6a>
 800f352:	ee18 1a10 	vmov	r1, s16
 800f356:	2300      	movs	r3, #0
 800f358:	220a      	movs	r2, #10
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 fb88 	bl	800fa70 <__multadd>
 800f360:	45b8      	cmp	r8, r7
 800f362:	ee08 0a10 	vmov	s16, r0
 800f366:	f04f 0300 	mov.w	r3, #0
 800f36a:	f04f 020a 	mov.w	r2, #10
 800f36e:	4641      	mov	r1, r8
 800f370:	4620      	mov	r0, r4
 800f372:	d106      	bne.n	800f382 <_dtoa_r+0xb0a>
 800f374:	f000 fb7c 	bl	800fa70 <__multadd>
 800f378:	4680      	mov	r8, r0
 800f37a:	4607      	mov	r7, r0
 800f37c:	f109 0901 	add.w	r9, r9, #1
 800f380:	e772      	b.n	800f268 <_dtoa_r+0x9f0>
 800f382:	f000 fb75 	bl	800fa70 <__multadd>
 800f386:	4639      	mov	r1, r7
 800f388:	4680      	mov	r8, r0
 800f38a:	2300      	movs	r3, #0
 800f38c:	220a      	movs	r2, #10
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 fb6e 	bl	800fa70 <__multadd>
 800f394:	4607      	mov	r7, r0
 800f396:	e7f1      	b.n	800f37c <_dtoa_r+0xb04>
 800f398:	9b03      	ldr	r3, [sp, #12]
 800f39a:	9302      	str	r3, [sp, #8]
 800f39c:	9d01      	ldr	r5, [sp, #4]
 800f39e:	ee18 0a10 	vmov	r0, s16
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	f7ff f9da 	bl	800e75c <quorem>
 800f3a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f3ac:	9b01      	ldr	r3, [sp, #4]
 800f3ae:	f805 ab01 	strb.w	sl, [r5], #1
 800f3b2:	1aea      	subs	r2, r5, r3
 800f3b4:	9b02      	ldr	r3, [sp, #8]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	dd09      	ble.n	800f3ce <_dtoa_r+0xb56>
 800f3ba:	ee18 1a10 	vmov	r1, s16
 800f3be:	2300      	movs	r3, #0
 800f3c0:	220a      	movs	r2, #10
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f000 fb54 	bl	800fa70 <__multadd>
 800f3c8:	ee08 0a10 	vmov	s16, r0
 800f3cc:	e7e7      	b.n	800f39e <_dtoa_r+0xb26>
 800f3ce:	9b02      	ldr	r3, [sp, #8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	bfc8      	it	gt
 800f3d4:	461d      	movgt	r5, r3
 800f3d6:	9b01      	ldr	r3, [sp, #4]
 800f3d8:	bfd8      	it	le
 800f3da:	2501      	movle	r5, #1
 800f3dc:	441d      	add	r5, r3
 800f3de:	f04f 0800 	mov.w	r8, #0
 800f3e2:	ee18 1a10 	vmov	r1, s16
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 fcf1 	bl	800fdd0 <__lshift>
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	ee08 0a10 	vmov	s16, r0
 800f3f4:	f000 fd5c 	bl	800feb0 <__mcmp>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	dc91      	bgt.n	800f320 <_dtoa_r+0xaa8>
 800f3fc:	d102      	bne.n	800f404 <_dtoa_r+0xb8c>
 800f3fe:	f01a 0f01 	tst.w	sl, #1
 800f402:	d18d      	bne.n	800f320 <_dtoa_r+0xaa8>
 800f404:	462b      	mov	r3, r5
 800f406:	461d      	mov	r5, r3
 800f408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f40c:	2a30      	cmp	r2, #48	; 0x30
 800f40e:	d0fa      	beq.n	800f406 <_dtoa_r+0xb8e>
 800f410:	e6d7      	b.n	800f1c2 <_dtoa_r+0x94a>
 800f412:	9a01      	ldr	r2, [sp, #4]
 800f414:	429a      	cmp	r2, r3
 800f416:	d184      	bne.n	800f322 <_dtoa_r+0xaaa>
 800f418:	9b00      	ldr	r3, [sp, #0]
 800f41a:	3301      	adds	r3, #1
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	2331      	movs	r3, #49	; 0x31
 800f420:	7013      	strb	r3, [r2, #0]
 800f422:	e6ce      	b.n	800f1c2 <_dtoa_r+0x94a>
 800f424:	4b09      	ldr	r3, [pc, #36]	; (800f44c <_dtoa_r+0xbd4>)
 800f426:	f7ff ba95 	b.w	800e954 <_dtoa_r+0xdc>
 800f42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f47f aa6e 	bne.w	800e90e <_dtoa_r+0x96>
 800f432:	4b07      	ldr	r3, [pc, #28]	; (800f450 <_dtoa_r+0xbd8>)
 800f434:	f7ff ba8e 	b.w	800e954 <_dtoa_r+0xdc>
 800f438:	9b02      	ldr	r3, [sp, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	dcae      	bgt.n	800f39c <_dtoa_r+0xb24>
 800f43e:	9b06      	ldr	r3, [sp, #24]
 800f440:	2b02      	cmp	r3, #2
 800f442:	f73f aea8 	bgt.w	800f196 <_dtoa_r+0x91e>
 800f446:	e7a9      	b.n	800f39c <_dtoa_r+0xb24>
 800f448:	080399dd 	.word	0x080399dd
 800f44c:	08039c10 	.word	0x08039c10
 800f450:	08039975 	.word	0x08039975

0800f454 <__sflush_r>:
 800f454:	898a      	ldrh	r2, [r1, #12]
 800f456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45a:	4605      	mov	r5, r0
 800f45c:	0710      	lsls	r0, r2, #28
 800f45e:	460c      	mov	r4, r1
 800f460:	d458      	bmi.n	800f514 <__sflush_r+0xc0>
 800f462:	684b      	ldr	r3, [r1, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	dc05      	bgt.n	800f474 <__sflush_r+0x20>
 800f468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	dc02      	bgt.n	800f474 <__sflush_r+0x20>
 800f46e:	2000      	movs	r0, #0
 800f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f476:	2e00      	cmp	r6, #0
 800f478:	d0f9      	beq.n	800f46e <__sflush_r+0x1a>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f480:	682f      	ldr	r7, [r5, #0]
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	d032      	beq.n	800f4ec <__sflush_r+0x98>
 800f486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	075a      	lsls	r2, r3, #29
 800f48c:	d505      	bpl.n	800f49a <__sflush_r+0x46>
 800f48e:	6863      	ldr	r3, [r4, #4]
 800f490:	1ac0      	subs	r0, r0, r3
 800f492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f494:	b10b      	cbz	r3, 800f49a <__sflush_r+0x46>
 800f496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f498:	1ac0      	subs	r0, r0, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	4602      	mov	r2, r0
 800f49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4a0:	6a21      	ldr	r1, [r4, #32]
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	47b0      	blx	r6
 800f4a6:	1c43      	adds	r3, r0, #1
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	d106      	bne.n	800f4ba <__sflush_r+0x66>
 800f4ac:	6829      	ldr	r1, [r5, #0]
 800f4ae:	291d      	cmp	r1, #29
 800f4b0:	d82c      	bhi.n	800f50c <__sflush_r+0xb8>
 800f4b2:	4a2a      	ldr	r2, [pc, #168]	; (800f55c <__sflush_r+0x108>)
 800f4b4:	40ca      	lsrs	r2, r1
 800f4b6:	07d6      	lsls	r6, r2, #31
 800f4b8:	d528      	bpl.n	800f50c <__sflush_r+0xb8>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	6062      	str	r2, [r4, #4]
 800f4be:	04d9      	lsls	r1, r3, #19
 800f4c0:	6922      	ldr	r2, [r4, #16]
 800f4c2:	6022      	str	r2, [r4, #0]
 800f4c4:	d504      	bpl.n	800f4d0 <__sflush_r+0x7c>
 800f4c6:	1c42      	adds	r2, r0, #1
 800f4c8:	d101      	bne.n	800f4ce <__sflush_r+0x7a>
 800f4ca:	682b      	ldr	r3, [r5, #0]
 800f4cc:	b903      	cbnz	r3, 800f4d0 <__sflush_r+0x7c>
 800f4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800f4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4d2:	602f      	str	r7, [r5, #0]
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	d0ca      	beq.n	800f46e <__sflush_r+0x1a>
 800f4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4dc:	4299      	cmp	r1, r3
 800f4de:	d002      	beq.n	800f4e6 <__sflush_r+0x92>
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7fd f8eb 	bl	800c6bc <_free_r>
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800f4ea:	e7c1      	b.n	800f470 <__sflush_r+0x1c>
 800f4ec:	6a21      	ldr	r1, [r4, #32]
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b0      	blx	r6
 800f4f4:	1c41      	adds	r1, r0, #1
 800f4f6:	d1c7      	bne.n	800f488 <__sflush_r+0x34>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0c4      	beq.n	800f488 <__sflush_r+0x34>
 800f4fe:	2b1d      	cmp	r3, #29
 800f500:	d001      	beq.n	800f506 <__sflush_r+0xb2>
 800f502:	2b16      	cmp	r3, #22
 800f504:	d101      	bne.n	800f50a <__sflush_r+0xb6>
 800f506:	602f      	str	r7, [r5, #0]
 800f508:	e7b1      	b.n	800f46e <__sflush_r+0x1a>
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f510:	81a3      	strh	r3, [r4, #12]
 800f512:	e7ad      	b.n	800f470 <__sflush_r+0x1c>
 800f514:	690f      	ldr	r7, [r1, #16]
 800f516:	2f00      	cmp	r7, #0
 800f518:	d0a9      	beq.n	800f46e <__sflush_r+0x1a>
 800f51a:	0793      	lsls	r3, r2, #30
 800f51c:	680e      	ldr	r6, [r1, #0]
 800f51e:	bf08      	it	eq
 800f520:	694b      	ldreq	r3, [r1, #20]
 800f522:	600f      	str	r7, [r1, #0]
 800f524:	bf18      	it	ne
 800f526:	2300      	movne	r3, #0
 800f528:	eba6 0807 	sub.w	r8, r6, r7
 800f52c:	608b      	str	r3, [r1, #8]
 800f52e:	f1b8 0f00 	cmp.w	r8, #0
 800f532:	dd9c      	ble.n	800f46e <__sflush_r+0x1a>
 800f534:	6a21      	ldr	r1, [r4, #32]
 800f536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f538:	4643      	mov	r3, r8
 800f53a:	463a      	mov	r2, r7
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b0      	blx	r6
 800f540:	2800      	cmp	r0, #0
 800f542:	dc06      	bgt.n	800f552 <__sflush_r+0xfe>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295
 800f550:	e78e      	b.n	800f470 <__sflush_r+0x1c>
 800f552:	4407      	add	r7, r0
 800f554:	eba8 0800 	sub.w	r8, r8, r0
 800f558:	e7e9      	b.n	800f52e <__sflush_r+0xda>
 800f55a:	bf00      	nop
 800f55c:	20400001 	.word	0x20400001

0800f560 <_fflush_r>:
 800f560:	b538      	push	{r3, r4, r5, lr}
 800f562:	690b      	ldr	r3, [r1, #16]
 800f564:	4605      	mov	r5, r0
 800f566:	460c      	mov	r4, r1
 800f568:	b913      	cbnz	r3, 800f570 <_fflush_r+0x10>
 800f56a:	2500      	movs	r5, #0
 800f56c:	4628      	mov	r0, r5
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	b118      	cbz	r0, 800f57a <_fflush_r+0x1a>
 800f572:	6983      	ldr	r3, [r0, #24]
 800f574:	b90b      	cbnz	r3, 800f57a <_fflush_r+0x1a>
 800f576:	f000 f887 	bl	800f688 <__sinit>
 800f57a:	4b14      	ldr	r3, [pc, #80]	; (800f5cc <_fflush_r+0x6c>)
 800f57c:	429c      	cmp	r4, r3
 800f57e:	d11b      	bne.n	800f5b8 <_fflush_r+0x58>
 800f580:	686c      	ldr	r4, [r5, #4]
 800f582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d0ef      	beq.n	800f56a <_fflush_r+0xa>
 800f58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f58c:	07d0      	lsls	r0, r2, #31
 800f58e:	d404      	bmi.n	800f59a <_fflush_r+0x3a>
 800f590:	0599      	lsls	r1, r3, #22
 800f592:	d402      	bmi.n	800f59a <_fflush_r+0x3a>
 800f594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f596:	f000 f967 	bl	800f868 <__retarget_lock_acquire_recursive>
 800f59a:	4628      	mov	r0, r5
 800f59c:	4621      	mov	r1, r4
 800f59e:	f7ff ff59 	bl	800f454 <__sflush_r>
 800f5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5a4:	07da      	lsls	r2, r3, #31
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	d4e0      	bmi.n	800f56c <_fflush_r+0xc>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	059b      	lsls	r3, r3, #22
 800f5ae:	d4dd      	bmi.n	800f56c <_fflush_r+0xc>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b2:	f000 f95b 	bl	800f86c <__retarget_lock_release_recursive>
 800f5b6:	e7d9      	b.n	800f56c <_fflush_r+0xc>
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <_fflush_r+0x70>)
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	d101      	bne.n	800f5c2 <_fflush_r+0x62>
 800f5be:	68ac      	ldr	r4, [r5, #8]
 800f5c0:	e7df      	b.n	800f582 <_fflush_r+0x22>
 800f5c2:	4b04      	ldr	r3, [pc, #16]	; (800f5d4 <_fflush_r+0x74>)
 800f5c4:	429c      	cmp	r4, r3
 800f5c6:	bf08      	it	eq
 800f5c8:	68ec      	ldreq	r4, [r5, #12]
 800f5ca:	e7da      	b.n	800f582 <_fflush_r+0x22>
 800f5cc:	08039a10 	.word	0x08039a10
 800f5d0:	08039a30 	.word	0x08039a30
 800f5d4:	080399f0 	.word	0x080399f0

0800f5d8 <std>:
 800f5d8:	2300      	movs	r3, #0
 800f5da:	b510      	push	{r4, lr}
 800f5dc:	4604      	mov	r4, r0
 800f5de:	e9c0 3300 	strd	r3, r3, [r0]
 800f5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5e6:	6083      	str	r3, [r0, #8]
 800f5e8:	8181      	strh	r1, [r0, #12]
 800f5ea:	6643      	str	r3, [r0, #100]	; 0x64
 800f5ec:	81c2      	strh	r2, [r0, #14]
 800f5ee:	6183      	str	r3, [r0, #24]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	2208      	movs	r2, #8
 800f5f4:	305c      	adds	r0, #92	; 0x5c
 800f5f6:	f7fc fde7 	bl	800c1c8 <memset>
 800f5fa:	4b05      	ldr	r3, [pc, #20]	; (800f610 <std+0x38>)
 800f5fc:	6263      	str	r3, [r4, #36]	; 0x24
 800f5fe:	4b05      	ldr	r3, [pc, #20]	; (800f614 <std+0x3c>)
 800f600:	62a3      	str	r3, [r4, #40]	; 0x28
 800f602:	4b05      	ldr	r3, [pc, #20]	; (800f618 <std+0x40>)
 800f604:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <std+0x44>)
 800f608:	6224      	str	r4, [r4, #32]
 800f60a:	6323      	str	r3, [r4, #48]	; 0x30
 800f60c:	bd10      	pop	{r4, pc}
 800f60e:	bf00      	nop
 800f610:	0800d4bd 	.word	0x0800d4bd
 800f614:	0800d4e3 	.word	0x0800d4e3
 800f618:	0800d51b 	.word	0x0800d51b
 800f61c:	0800d53f 	.word	0x0800d53f

0800f620 <_cleanup_r>:
 800f620:	4901      	ldr	r1, [pc, #4]	; (800f628 <_cleanup_r+0x8>)
 800f622:	f000 b8af 	b.w	800f784 <_fwalk_reent>
 800f626:	bf00      	nop
 800f628:	0800f561 	.word	0x0800f561

0800f62c <__sfmoreglue>:
 800f62c:	b570      	push	{r4, r5, r6, lr}
 800f62e:	2268      	movs	r2, #104	; 0x68
 800f630:	1e4d      	subs	r5, r1, #1
 800f632:	4355      	muls	r5, r2
 800f634:	460e      	mov	r6, r1
 800f636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f63a:	f7fd f8ab 	bl	800c794 <_malloc_r>
 800f63e:	4604      	mov	r4, r0
 800f640:	b140      	cbz	r0, 800f654 <__sfmoreglue+0x28>
 800f642:	2100      	movs	r1, #0
 800f644:	e9c0 1600 	strd	r1, r6, [r0]
 800f648:	300c      	adds	r0, #12
 800f64a:	60a0      	str	r0, [r4, #8]
 800f64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f650:	f7fc fdba 	bl	800c1c8 <memset>
 800f654:	4620      	mov	r0, r4
 800f656:	bd70      	pop	{r4, r5, r6, pc}

0800f658 <__sfp_lock_acquire>:
 800f658:	4801      	ldr	r0, [pc, #4]	; (800f660 <__sfp_lock_acquire+0x8>)
 800f65a:	f000 b905 	b.w	800f868 <__retarget_lock_acquire_recursive>
 800f65e:	bf00      	nop
 800f660:	20003aa6 	.word	0x20003aa6

0800f664 <__sfp_lock_release>:
 800f664:	4801      	ldr	r0, [pc, #4]	; (800f66c <__sfp_lock_release+0x8>)
 800f666:	f000 b901 	b.w	800f86c <__retarget_lock_release_recursive>
 800f66a:	bf00      	nop
 800f66c:	20003aa6 	.word	0x20003aa6

0800f670 <__sinit_lock_acquire>:
 800f670:	4801      	ldr	r0, [pc, #4]	; (800f678 <__sinit_lock_acquire+0x8>)
 800f672:	f000 b8f9 	b.w	800f868 <__retarget_lock_acquire_recursive>
 800f676:	bf00      	nop
 800f678:	20003aa7 	.word	0x20003aa7

0800f67c <__sinit_lock_release>:
 800f67c:	4801      	ldr	r0, [pc, #4]	; (800f684 <__sinit_lock_release+0x8>)
 800f67e:	f000 b8f5 	b.w	800f86c <__retarget_lock_release_recursive>
 800f682:	bf00      	nop
 800f684:	20003aa7 	.word	0x20003aa7

0800f688 <__sinit>:
 800f688:	b510      	push	{r4, lr}
 800f68a:	4604      	mov	r4, r0
 800f68c:	f7ff fff0 	bl	800f670 <__sinit_lock_acquire>
 800f690:	69a3      	ldr	r3, [r4, #24]
 800f692:	b11b      	cbz	r3, 800f69c <__sinit+0x14>
 800f694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f698:	f7ff bff0 	b.w	800f67c <__sinit_lock_release>
 800f69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6a0:	6523      	str	r3, [r4, #80]	; 0x50
 800f6a2:	4b13      	ldr	r3, [pc, #76]	; (800f6f0 <__sinit+0x68>)
 800f6a4:	4a13      	ldr	r2, [pc, #76]	; (800f6f4 <__sinit+0x6c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6aa:	42a3      	cmp	r3, r4
 800f6ac:	bf04      	itt	eq
 800f6ae:	2301      	moveq	r3, #1
 800f6b0:	61a3      	streq	r3, [r4, #24]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 f820 	bl	800f6f8 <__sfp>
 800f6b8:	6060      	str	r0, [r4, #4]
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 f81c 	bl	800f6f8 <__sfp>
 800f6c0:	60a0      	str	r0, [r4, #8]
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f000 f818 	bl	800f6f8 <__sfp>
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	60e0      	str	r0, [r4, #12]
 800f6cc:	2104      	movs	r1, #4
 800f6ce:	6860      	ldr	r0, [r4, #4]
 800f6d0:	f7ff ff82 	bl	800f5d8 <std>
 800f6d4:	68a0      	ldr	r0, [r4, #8]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	2109      	movs	r1, #9
 800f6da:	f7ff ff7d 	bl	800f5d8 <std>
 800f6de:	68e0      	ldr	r0, [r4, #12]
 800f6e0:	2202      	movs	r2, #2
 800f6e2:	2112      	movs	r1, #18
 800f6e4:	f7ff ff78 	bl	800f5d8 <std>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	61a3      	str	r3, [r4, #24]
 800f6ec:	e7d2      	b.n	800f694 <__sinit+0xc>
 800f6ee:	bf00      	nop
 800f6f0:	08039510 	.word	0x08039510
 800f6f4:	0800f621 	.word	0x0800f621

0800f6f8 <__sfp>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	4607      	mov	r7, r0
 800f6fc:	f7ff ffac 	bl	800f658 <__sfp_lock_acquire>
 800f700:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <__sfp+0x84>)
 800f702:	681e      	ldr	r6, [r3, #0]
 800f704:	69b3      	ldr	r3, [r6, #24]
 800f706:	b913      	cbnz	r3, 800f70e <__sfp+0x16>
 800f708:	4630      	mov	r0, r6
 800f70a:	f7ff ffbd 	bl	800f688 <__sinit>
 800f70e:	3648      	adds	r6, #72	; 0x48
 800f710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f714:	3b01      	subs	r3, #1
 800f716:	d503      	bpl.n	800f720 <__sfp+0x28>
 800f718:	6833      	ldr	r3, [r6, #0]
 800f71a:	b30b      	cbz	r3, 800f760 <__sfp+0x68>
 800f71c:	6836      	ldr	r6, [r6, #0]
 800f71e:	e7f7      	b.n	800f710 <__sfp+0x18>
 800f720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f724:	b9d5      	cbnz	r5, 800f75c <__sfp+0x64>
 800f726:	4b16      	ldr	r3, [pc, #88]	; (800f780 <__sfp+0x88>)
 800f728:	60e3      	str	r3, [r4, #12]
 800f72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f72e:	6665      	str	r5, [r4, #100]	; 0x64
 800f730:	f000 f898 	bl	800f864 <__retarget_lock_init_recursive>
 800f734:	f7ff ff96 	bl	800f664 <__sfp_lock_release>
 800f738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f740:	6025      	str	r5, [r4, #0]
 800f742:	61a5      	str	r5, [r4, #24]
 800f744:	2208      	movs	r2, #8
 800f746:	4629      	mov	r1, r5
 800f748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f74c:	f7fc fd3c 	bl	800c1c8 <memset>
 800f750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f758:	4620      	mov	r0, r4
 800f75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f75c:	3468      	adds	r4, #104	; 0x68
 800f75e:	e7d9      	b.n	800f714 <__sfp+0x1c>
 800f760:	2104      	movs	r1, #4
 800f762:	4638      	mov	r0, r7
 800f764:	f7ff ff62 	bl	800f62c <__sfmoreglue>
 800f768:	4604      	mov	r4, r0
 800f76a:	6030      	str	r0, [r6, #0]
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d1d5      	bne.n	800f71c <__sfp+0x24>
 800f770:	f7ff ff78 	bl	800f664 <__sfp_lock_release>
 800f774:	230c      	movs	r3, #12
 800f776:	603b      	str	r3, [r7, #0]
 800f778:	e7ee      	b.n	800f758 <__sfp+0x60>
 800f77a:	bf00      	nop
 800f77c:	08039510 	.word	0x08039510
 800f780:	ffff0001 	.word	0xffff0001

0800f784 <_fwalk_reent>:
 800f784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f788:	4606      	mov	r6, r0
 800f78a:	4688      	mov	r8, r1
 800f78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f790:	2700      	movs	r7, #0
 800f792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f796:	f1b9 0901 	subs.w	r9, r9, #1
 800f79a:	d505      	bpl.n	800f7a8 <_fwalk_reent+0x24>
 800f79c:	6824      	ldr	r4, [r4, #0]
 800f79e:	2c00      	cmp	r4, #0
 800f7a0:	d1f7      	bne.n	800f792 <_fwalk_reent+0xe>
 800f7a2:	4638      	mov	r0, r7
 800f7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a8:	89ab      	ldrh	r3, [r5, #12]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d907      	bls.n	800f7be <_fwalk_reent+0x3a>
 800f7ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	d003      	beq.n	800f7be <_fwalk_reent+0x3a>
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	47c0      	blx	r8
 800f7bc:	4307      	orrs	r7, r0
 800f7be:	3568      	adds	r5, #104	; 0x68
 800f7c0:	e7e9      	b.n	800f796 <_fwalk_reent+0x12>
	...

0800f7c4 <_findenv_r>:
 800f7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f838 <_findenv_r+0x74>
 800f7cc:	4607      	mov	r7, r0
 800f7ce:	4689      	mov	r9, r1
 800f7d0:	4616      	mov	r6, r2
 800f7d2:	f001 facf 	bl	8010d74 <__env_lock>
 800f7d6:	f8da 4000 	ldr.w	r4, [sl]
 800f7da:	b134      	cbz	r4, 800f7ea <_findenv_r+0x26>
 800f7dc:	464b      	mov	r3, r9
 800f7de:	4698      	mov	r8, r3
 800f7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7e4:	b13a      	cbz	r2, 800f7f6 <_findenv_r+0x32>
 800f7e6:	2a3d      	cmp	r2, #61	; 0x3d
 800f7e8:	d1f9      	bne.n	800f7de <_findenv_r+0x1a>
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	f001 fac8 	bl	8010d80 <__env_unlock>
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f6:	eba8 0809 	sub.w	r8, r8, r9
 800f7fa:	46a3      	mov	fp, r4
 800f7fc:	f854 0b04 	ldr.w	r0, [r4], #4
 800f800:	2800      	cmp	r0, #0
 800f802:	d0f2      	beq.n	800f7ea <_findenv_r+0x26>
 800f804:	4642      	mov	r2, r8
 800f806:	4649      	mov	r1, r9
 800f808:	f001 f9e2 	bl	8010bd0 <strncmp>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d1f4      	bne.n	800f7fa <_findenv_r+0x36>
 800f810:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f814:	eb03 0508 	add.w	r5, r3, r8
 800f818:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f81c:	2b3d      	cmp	r3, #61	; 0x3d
 800f81e:	d1ec      	bne.n	800f7fa <_findenv_r+0x36>
 800f820:	f8da 3000 	ldr.w	r3, [sl]
 800f824:	ebab 0303 	sub.w	r3, fp, r3
 800f828:	109b      	asrs	r3, r3, #2
 800f82a:	4638      	mov	r0, r7
 800f82c:	6033      	str	r3, [r6, #0]
 800f82e:	f001 faa7 	bl	8010d80 <__env_unlock>
 800f832:	1c68      	adds	r0, r5, #1
 800f834:	e7dd      	b.n	800f7f2 <_findenv_r+0x2e>
 800f836:	bf00      	nop
 800f838:	20000388 	.word	0x20000388

0800f83c <_getenv_r>:
 800f83c:	b507      	push	{r0, r1, r2, lr}
 800f83e:	aa01      	add	r2, sp, #4
 800f840:	f7ff ffc0 	bl	800f7c4 <_findenv_r>
 800f844:	b003      	add	sp, #12
 800f846:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f84c <__gettzinfo>:
 800f84c:	4800      	ldr	r0, [pc, #0]	; (800f850 <__gettzinfo+0x4>)
 800f84e:	4770      	bx	lr
 800f850:	20000330 	.word	0x20000330

0800f854 <labs>:
 800f854:	2800      	cmp	r0, #0
 800f856:	bfb8      	it	lt
 800f858:	4240      	neglt	r0, r0
 800f85a:	4770      	bx	lr

0800f85c <_localeconv_r>:
 800f85c:	4800      	ldr	r0, [pc, #0]	; (800f860 <_localeconv_r+0x4>)
 800f85e:	4770      	bx	lr
 800f860:	2000047c 	.word	0x2000047c

0800f864 <__retarget_lock_init_recursive>:
 800f864:	4770      	bx	lr

0800f866 <__retarget_lock_acquire>:
 800f866:	4770      	bx	lr

0800f868 <__retarget_lock_acquire_recursive>:
 800f868:	4770      	bx	lr

0800f86a <__retarget_lock_release>:
 800f86a:	4770      	bx	lr

0800f86c <__retarget_lock_release_recursive>:
 800f86c:	4770      	bx	lr
	...

0800f870 <_lseek_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	4d07      	ldr	r5, [pc, #28]	; (800f890 <_lseek_r+0x20>)
 800f874:	4604      	mov	r4, r0
 800f876:	4608      	mov	r0, r1
 800f878:	4611      	mov	r1, r2
 800f87a:	2200      	movs	r2, #0
 800f87c:	602a      	str	r2, [r5, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	f003 ff34 	bl	80136ec <_lseek>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	d102      	bne.n	800f88e <_lseek_r+0x1e>
 800f888:	682b      	ldr	r3, [r5, #0]
 800f88a:	b103      	cbz	r3, 800f88e <_lseek_r+0x1e>
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	20003aac 	.word	0x20003aac

0800f894 <__swhatbuf_r>:
 800f894:	b570      	push	{r4, r5, r6, lr}
 800f896:	460e      	mov	r6, r1
 800f898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f89c:	2900      	cmp	r1, #0
 800f89e:	b096      	sub	sp, #88	; 0x58
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	461d      	mov	r5, r3
 800f8a4:	da08      	bge.n	800f8b8 <__swhatbuf_r+0x24>
 800f8a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	602a      	str	r2, [r5, #0]
 800f8ae:	061a      	lsls	r2, r3, #24
 800f8b0:	d410      	bmi.n	800f8d4 <__swhatbuf_r+0x40>
 800f8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8b6:	e00e      	b.n	800f8d6 <__swhatbuf_r+0x42>
 800f8b8:	466a      	mov	r2, sp
 800f8ba:	f001 fa6d 	bl	8010d98 <_fstat_r>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	dbf1      	blt.n	800f8a6 <__swhatbuf_r+0x12>
 800f8c2:	9a01      	ldr	r2, [sp, #4]
 800f8c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f8c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f8cc:	425a      	negs	r2, r3
 800f8ce:	415a      	adcs	r2, r3
 800f8d0:	602a      	str	r2, [r5, #0]
 800f8d2:	e7ee      	b.n	800f8b2 <__swhatbuf_r+0x1e>
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	b016      	add	sp, #88	; 0x58
 800f8dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f8e0 <__smakebuf_r>:
 800f8e0:	898b      	ldrh	r3, [r1, #12]
 800f8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8e4:	079d      	lsls	r5, r3, #30
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	d507      	bpl.n	800f8fc <__smakebuf_r+0x1c>
 800f8ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	6123      	str	r3, [r4, #16]
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	6163      	str	r3, [r4, #20]
 800f8f8:	b002      	add	sp, #8
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}
 800f8fc:	ab01      	add	r3, sp, #4
 800f8fe:	466a      	mov	r2, sp
 800f900:	f7ff ffc8 	bl	800f894 <__swhatbuf_r>
 800f904:	9900      	ldr	r1, [sp, #0]
 800f906:	4605      	mov	r5, r0
 800f908:	4630      	mov	r0, r6
 800f90a:	f7fc ff43 	bl	800c794 <_malloc_r>
 800f90e:	b948      	cbnz	r0, 800f924 <__smakebuf_r+0x44>
 800f910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f914:	059a      	lsls	r2, r3, #22
 800f916:	d4ef      	bmi.n	800f8f8 <__smakebuf_r+0x18>
 800f918:	f023 0303 	bic.w	r3, r3, #3
 800f91c:	f043 0302 	orr.w	r3, r3, #2
 800f920:	81a3      	strh	r3, [r4, #12]
 800f922:	e7e3      	b.n	800f8ec <__smakebuf_r+0xc>
 800f924:	4b0d      	ldr	r3, [pc, #52]	; (800f95c <__smakebuf_r+0x7c>)
 800f926:	62b3      	str	r3, [r6, #40]	; 0x28
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	6020      	str	r0, [r4, #0]
 800f92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f930:	81a3      	strh	r3, [r4, #12]
 800f932:	9b00      	ldr	r3, [sp, #0]
 800f934:	6163      	str	r3, [r4, #20]
 800f936:	9b01      	ldr	r3, [sp, #4]
 800f938:	6120      	str	r0, [r4, #16]
 800f93a:	b15b      	cbz	r3, 800f954 <__smakebuf_r+0x74>
 800f93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f940:	4630      	mov	r0, r6
 800f942:	f001 fa3b 	bl	8010dbc <_isatty_r>
 800f946:	b128      	cbz	r0, 800f954 <__smakebuf_r+0x74>
 800f948:	89a3      	ldrh	r3, [r4, #12]
 800f94a:	f023 0303 	bic.w	r3, r3, #3
 800f94e:	f043 0301 	orr.w	r3, r3, #1
 800f952:	81a3      	strh	r3, [r4, #12]
 800f954:	89a0      	ldrh	r0, [r4, #12]
 800f956:	4305      	orrs	r5, r0
 800f958:	81a5      	strh	r5, [r4, #12]
 800f95a:	e7cd      	b.n	800f8f8 <__smakebuf_r+0x18>
 800f95c:	0800f621 	.word	0x0800f621

0800f960 <memmove>:
 800f960:	4288      	cmp	r0, r1
 800f962:	b510      	push	{r4, lr}
 800f964:	eb01 0402 	add.w	r4, r1, r2
 800f968:	d902      	bls.n	800f970 <memmove+0x10>
 800f96a:	4284      	cmp	r4, r0
 800f96c:	4623      	mov	r3, r4
 800f96e:	d807      	bhi.n	800f980 <memmove+0x20>
 800f970:	1e43      	subs	r3, r0, #1
 800f972:	42a1      	cmp	r1, r4
 800f974:	d008      	beq.n	800f988 <memmove+0x28>
 800f976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f97e:	e7f8      	b.n	800f972 <memmove+0x12>
 800f980:	4402      	add	r2, r0
 800f982:	4601      	mov	r1, r0
 800f984:	428a      	cmp	r2, r1
 800f986:	d100      	bne.n	800f98a <memmove+0x2a>
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f992:	e7f7      	b.n	800f984 <memmove+0x24>

0800f994 <__malloc_lock>:
 800f994:	4801      	ldr	r0, [pc, #4]	; (800f99c <__malloc_lock+0x8>)
 800f996:	f7ff bf67 	b.w	800f868 <__retarget_lock_acquire_recursive>
 800f99a:	bf00      	nop
 800f99c:	20003aa5 	.word	0x20003aa5

0800f9a0 <__malloc_unlock>:
 800f9a0:	4801      	ldr	r0, [pc, #4]	; (800f9a8 <__malloc_unlock+0x8>)
 800f9a2:	f7ff bf63 	b.w	800f86c <__retarget_lock_release_recursive>
 800f9a6:	bf00      	nop
 800f9a8:	20003aa5 	.word	0x20003aa5

0800f9ac <_Balloc>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	b976      	cbnz	r6, 800f9d4 <_Balloc+0x28>
 800f9b6:	2010      	movs	r0, #16
 800f9b8:	f7fc fbe8 	bl	800c18c <malloc>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	6260      	str	r0, [r4, #36]	; 0x24
 800f9c0:	b920      	cbnz	r0, 800f9cc <_Balloc+0x20>
 800f9c2:	4b18      	ldr	r3, [pc, #96]	; (800fa24 <_Balloc+0x78>)
 800f9c4:	4818      	ldr	r0, [pc, #96]	; (800fa28 <_Balloc+0x7c>)
 800f9c6:	2166      	movs	r1, #102	; 0x66
 800f9c8:	f7fc fb8c 	bl	800c0e4 <__assert_func>
 800f9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9d0:	6006      	str	r6, [r0, #0]
 800f9d2:	60c6      	str	r6, [r0, #12]
 800f9d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f9d6:	68f3      	ldr	r3, [r6, #12]
 800f9d8:	b183      	cbz	r3, 800f9fc <_Balloc+0x50>
 800f9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9e2:	b9b8      	cbnz	r0, 800fa14 <_Balloc+0x68>
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	fa01 f605 	lsl.w	r6, r1, r5
 800f9ea:	1d72      	adds	r2, r6, #5
 800f9ec:	0092      	lsls	r2, r2, #2
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fb60 	bl	80100b4 <_calloc_r>
 800f9f4:	b160      	cbz	r0, 800fa10 <_Balloc+0x64>
 800f9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f9fa:	e00e      	b.n	800fa1a <_Balloc+0x6e>
 800f9fc:	2221      	movs	r2, #33	; 0x21
 800f9fe:	2104      	movs	r1, #4
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fb57 	bl	80100b4 <_calloc_r>
 800fa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa08:	60f0      	str	r0, [r6, #12]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1e4      	bne.n	800f9da <_Balloc+0x2e>
 800fa10:	2000      	movs	r0, #0
 800fa12:	bd70      	pop	{r4, r5, r6, pc}
 800fa14:	6802      	ldr	r2, [r0, #0]
 800fa16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa20:	e7f7      	b.n	800fa12 <_Balloc+0x66>
 800fa22:	bf00      	nop
 800fa24:	08039408 	.word	0x08039408
 800fa28:	08039ab0 	.word	0x08039ab0

0800fa2c <_Bfree>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa30:	4605      	mov	r5, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	b976      	cbnz	r6, 800fa54 <_Bfree+0x28>
 800fa36:	2010      	movs	r0, #16
 800fa38:	f7fc fba8 	bl	800c18c <malloc>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	6268      	str	r0, [r5, #36]	; 0x24
 800fa40:	b920      	cbnz	r0, 800fa4c <_Bfree+0x20>
 800fa42:	4b09      	ldr	r3, [pc, #36]	; (800fa68 <_Bfree+0x3c>)
 800fa44:	4809      	ldr	r0, [pc, #36]	; (800fa6c <_Bfree+0x40>)
 800fa46:	218a      	movs	r1, #138	; 0x8a
 800fa48:	f7fc fb4c 	bl	800c0e4 <__assert_func>
 800fa4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa50:	6006      	str	r6, [r0, #0]
 800fa52:	60c6      	str	r6, [r0, #12]
 800fa54:	b13c      	cbz	r4, 800fa66 <_Bfree+0x3a>
 800fa56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fa58:	6862      	ldr	r2, [r4, #4]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa60:	6021      	str	r1, [r4, #0]
 800fa62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa66:	bd70      	pop	{r4, r5, r6, pc}
 800fa68:	08039408 	.word	0x08039408
 800fa6c:	08039ab0 	.word	0x08039ab0

0800fa70 <__multadd>:
 800fa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa74:	690d      	ldr	r5, [r1, #16]
 800fa76:	4607      	mov	r7, r0
 800fa78:	460c      	mov	r4, r1
 800fa7a:	461e      	mov	r6, r3
 800fa7c:	f101 0c14 	add.w	ip, r1, #20
 800fa80:	2000      	movs	r0, #0
 800fa82:	f8dc 3000 	ldr.w	r3, [ip]
 800fa86:	b299      	uxth	r1, r3
 800fa88:	fb02 6101 	mla	r1, r2, r1, r6
 800fa8c:	0c1e      	lsrs	r6, r3, #16
 800fa8e:	0c0b      	lsrs	r3, r1, #16
 800fa90:	fb02 3306 	mla	r3, r2, r6, r3
 800fa94:	b289      	uxth	r1, r1
 800fa96:	3001      	adds	r0, #1
 800fa98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa9c:	4285      	cmp	r5, r0
 800fa9e:	f84c 1b04 	str.w	r1, [ip], #4
 800faa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800faa6:	dcec      	bgt.n	800fa82 <__multadd+0x12>
 800faa8:	b30e      	cbz	r6, 800faee <__multadd+0x7e>
 800faaa:	68a3      	ldr	r3, [r4, #8]
 800faac:	42ab      	cmp	r3, r5
 800faae:	dc19      	bgt.n	800fae4 <__multadd+0x74>
 800fab0:	6861      	ldr	r1, [r4, #4]
 800fab2:	4638      	mov	r0, r7
 800fab4:	3101      	adds	r1, #1
 800fab6:	f7ff ff79 	bl	800f9ac <_Balloc>
 800faba:	4680      	mov	r8, r0
 800fabc:	b928      	cbnz	r0, 800faca <__multadd+0x5a>
 800fabe:	4602      	mov	r2, r0
 800fac0:	4b0c      	ldr	r3, [pc, #48]	; (800faf4 <__multadd+0x84>)
 800fac2:	480d      	ldr	r0, [pc, #52]	; (800faf8 <__multadd+0x88>)
 800fac4:	21b5      	movs	r1, #181	; 0xb5
 800fac6:	f7fc fb0d 	bl	800c0e4 <__assert_func>
 800faca:	6922      	ldr	r2, [r4, #16]
 800facc:	3202      	adds	r2, #2
 800face:	f104 010c 	add.w	r1, r4, #12
 800fad2:	0092      	lsls	r2, r2, #2
 800fad4:	300c      	adds	r0, #12
 800fad6:	f7fc fb69 	bl	800c1ac <memcpy>
 800fada:	4621      	mov	r1, r4
 800fadc:	4638      	mov	r0, r7
 800fade:	f7ff ffa5 	bl	800fa2c <_Bfree>
 800fae2:	4644      	mov	r4, r8
 800fae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fae8:	3501      	adds	r5, #1
 800faea:	615e      	str	r6, [r3, #20]
 800faec:	6125      	str	r5, [r4, #16]
 800faee:	4620      	mov	r0, r4
 800faf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf4:	080399dd 	.word	0x080399dd
 800faf8:	08039ab0 	.word	0x08039ab0

0800fafc <__hi0bits>:
 800fafc:	0c03      	lsrs	r3, r0, #16
 800fafe:	041b      	lsls	r3, r3, #16
 800fb00:	b9d3      	cbnz	r3, 800fb38 <__hi0bits+0x3c>
 800fb02:	0400      	lsls	r0, r0, #16
 800fb04:	2310      	movs	r3, #16
 800fb06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fb0a:	bf04      	itt	eq
 800fb0c:	0200      	lsleq	r0, r0, #8
 800fb0e:	3308      	addeq	r3, #8
 800fb10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fb14:	bf04      	itt	eq
 800fb16:	0100      	lsleq	r0, r0, #4
 800fb18:	3304      	addeq	r3, #4
 800fb1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fb1e:	bf04      	itt	eq
 800fb20:	0080      	lsleq	r0, r0, #2
 800fb22:	3302      	addeq	r3, #2
 800fb24:	2800      	cmp	r0, #0
 800fb26:	db05      	blt.n	800fb34 <__hi0bits+0x38>
 800fb28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fb2c:	f103 0301 	add.w	r3, r3, #1
 800fb30:	bf08      	it	eq
 800fb32:	2320      	moveq	r3, #32
 800fb34:	4618      	mov	r0, r3
 800fb36:	4770      	bx	lr
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e7e4      	b.n	800fb06 <__hi0bits+0xa>

0800fb3c <__lo0bits>:
 800fb3c:	6803      	ldr	r3, [r0, #0]
 800fb3e:	f013 0207 	ands.w	r2, r3, #7
 800fb42:	4601      	mov	r1, r0
 800fb44:	d00b      	beq.n	800fb5e <__lo0bits+0x22>
 800fb46:	07da      	lsls	r2, r3, #31
 800fb48:	d423      	bmi.n	800fb92 <__lo0bits+0x56>
 800fb4a:	0798      	lsls	r0, r3, #30
 800fb4c:	bf49      	itett	mi
 800fb4e:	085b      	lsrmi	r3, r3, #1
 800fb50:	089b      	lsrpl	r3, r3, #2
 800fb52:	2001      	movmi	r0, #1
 800fb54:	600b      	strmi	r3, [r1, #0]
 800fb56:	bf5c      	itt	pl
 800fb58:	600b      	strpl	r3, [r1, #0]
 800fb5a:	2002      	movpl	r0, #2
 800fb5c:	4770      	bx	lr
 800fb5e:	b298      	uxth	r0, r3
 800fb60:	b9a8      	cbnz	r0, 800fb8e <__lo0bits+0x52>
 800fb62:	0c1b      	lsrs	r3, r3, #16
 800fb64:	2010      	movs	r0, #16
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	b90a      	cbnz	r2, 800fb6e <__lo0bits+0x32>
 800fb6a:	3008      	adds	r0, #8
 800fb6c:	0a1b      	lsrs	r3, r3, #8
 800fb6e:	071a      	lsls	r2, r3, #28
 800fb70:	bf04      	itt	eq
 800fb72:	091b      	lsreq	r3, r3, #4
 800fb74:	3004      	addeq	r0, #4
 800fb76:	079a      	lsls	r2, r3, #30
 800fb78:	bf04      	itt	eq
 800fb7a:	089b      	lsreq	r3, r3, #2
 800fb7c:	3002      	addeq	r0, #2
 800fb7e:	07da      	lsls	r2, r3, #31
 800fb80:	d403      	bmi.n	800fb8a <__lo0bits+0x4e>
 800fb82:	085b      	lsrs	r3, r3, #1
 800fb84:	f100 0001 	add.w	r0, r0, #1
 800fb88:	d005      	beq.n	800fb96 <__lo0bits+0x5a>
 800fb8a:	600b      	str	r3, [r1, #0]
 800fb8c:	4770      	bx	lr
 800fb8e:	4610      	mov	r0, r2
 800fb90:	e7e9      	b.n	800fb66 <__lo0bits+0x2a>
 800fb92:	2000      	movs	r0, #0
 800fb94:	4770      	bx	lr
 800fb96:	2020      	movs	r0, #32
 800fb98:	4770      	bx	lr
	...

0800fb9c <__i2b>:
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	460c      	mov	r4, r1
 800fba0:	2101      	movs	r1, #1
 800fba2:	f7ff ff03 	bl	800f9ac <_Balloc>
 800fba6:	4602      	mov	r2, r0
 800fba8:	b928      	cbnz	r0, 800fbb6 <__i2b+0x1a>
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <__i2b+0x24>)
 800fbac:	4805      	ldr	r0, [pc, #20]	; (800fbc4 <__i2b+0x28>)
 800fbae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fbb2:	f7fc fa97 	bl	800c0e4 <__assert_func>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	6144      	str	r4, [r0, #20]
 800fbba:	6103      	str	r3, [r0, #16]
 800fbbc:	bd10      	pop	{r4, pc}
 800fbbe:	bf00      	nop
 800fbc0:	080399dd 	.word	0x080399dd
 800fbc4:	08039ab0 	.word	0x08039ab0

0800fbc8 <__multiply>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	4691      	mov	r9, r2
 800fbce:	690a      	ldr	r2, [r1, #16]
 800fbd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	bfb8      	it	lt
 800fbd8:	460b      	movlt	r3, r1
 800fbda:	460c      	mov	r4, r1
 800fbdc:	bfbc      	itt	lt
 800fbde:	464c      	movlt	r4, r9
 800fbe0:	4699      	movlt	r9, r3
 800fbe2:	6927      	ldr	r7, [r4, #16]
 800fbe4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fbe8:	68a3      	ldr	r3, [r4, #8]
 800fbea:	6861      	ldr	r1, [r4, #4]
 800fbec:	eb07 060a 	add.w	r6, r7, sl
 800fbf0:	42b3      	cmp	r3, r6
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	bfb8      	it	lt
 800fbf6:	3101      	addlt	r1, #1
 800fbf8:	f7ff fed8 	bl	800f9ac <_Balloc>
 800fbfc:	b930      	cbnz	r0, 800fc0c <__multiply+0x44>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	4b44      	ldr	r3, [pc, #272]	; (800fd14 <__multiply+0x14c>)
 800fc02:	4845      	ldr	r0, [pc, #276]	; (800fd18 <__multiply+0x150>)
 800fc04:	f240 115d 	movw	r1, #349	; 0x15d
 800fc08:	f7fc fa6c 	bl	800c0e4 <__assert_func>
 800fc0c:	f100 0514 	add.w	r5, r0, #20
 800fc10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc14:	462b      	mov	r3, r5
 800fc16:	2200      	movs	r2, #0
 800fc18:	4543      	cmp	r3, r8
 800fc1a:	d321      	bcc.n	800fc60 <__multiply+0x98>
 800fc1c:	f104 0314 	add.w	r3, r4, #20
 800fc20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fc24:	f109 0314 	add.w	r3, r9, #20
 800fc28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fc2c:	9202      	str	r2, [sp, #8]
 800fc2e:	1b3a      	subs	r2, r7, r4
 800fc30:	3a15      	subs	r2, #21
 800fc32:	f022 0203 	bic.w	r2, r2, #3
 800fc36:	3204      	adds	r2, #4
 800fc38:	f104 0115 	add.w	r1, r4, #21
 800fc3c:	428f      	cmp	r7, r1
 800fc3e:	bf38      	it	cc
 800fc40:	2204      	movcc	r2, #4
 800fc42:	9201      	str	r2, [sp, #4]
 800fc44:	9a02      	ldr	r2, [sp, #8]
 800fc46:	9303      	str	r3, [sp, #12]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d80c      	bhi.n	800fc66 <__multiply+0x9e>
 800fc4c:	2e00      	cmp	r6, #0
 800fc4e:	dd03      	ble.n	800fc58 <__multiply+0x90>
 800fc50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d05a      	beq.n	800fd0e <__multiply+0x146>
 800fc58:	6106      	str	r6, [r0, #16]
 800fc5a:	b005      	add	sp, #20
 800fc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc60:	f843 2b04 	str.w	r2, [r3], #4
 800fc64:	e7d8      	b.n	800fc18 <__multiply+0x50>
 800fc66:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc6a:	f1ba 0f00 	cmp.w	sl, #0
 800fc6e:	d024      	beq.n	800fcba <__multiply+0xf2>
 800fc70:	f104 0e14 	add.w	lr, r4, #20
 800fc74:	46a9      	mov	r9, r5
 800fc76:	f04f 0c00 	mov.w	ip, #0
 800fc7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc7e:	f8d9 1000 	ldr.w	r1, [r9]
 800fc82:	fa1f fb82 	uxth.w	fp, r2
 800fc86:	b289      	uxth	r1, r1
 800fc88:	fb0a 110b 	mla	r1, sl, fp, r1
 800fc8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fc90:	f8d9 2000 	ldr.w	r2, [r9]
 800fc94:	4461      	add	r1, ip
 800fc96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800fc9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fca2:	b289      	uxth	r1, r1
 800fca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fca8:	4577      	cmp	r7, lr
 800fcaa:	f849 1b04 	str.w	r1, [r9], #4
 800fcae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcb2:	d8e2      	bhi.n	800fc7a <__multiply+0xb2>
 800fcb4:	9a01      	ldr	r2, [sp, #4]
 800fcb6:	f845 c002 	str.w	ip, [r5, r2]
 800fcba:	9a03      	ldr	r2, [sp, #12]
 800fcbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fcc0:	3304      	adds	r3, #4
 800fcc2:	f1b9 0f00 	cmp.w	r9, #0
 800fcc6:	d020      	beq.n	800fd0a <__multiply+0x142>
 800fcc8:	6829      	ldr	r1, [r5, #0]
 800fcca:	f104 0c14 	add.w	ip, r4, #20
 800fcce:	46ae      	mov	lr, r5
 800fcd0:	f04f 0a00 	mov.w	sl, #0
 800fcd4:	f8bc b000 	ldrh.w	fp, [ip]
 800fcd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fcdc:	fb09 220b 	mla	r2, r9, fp, r2
 800fce0:	4492      	add	sl, r2
 800fce2:	b289      	uxth	r1, r1
 800fce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fce8:	f84e 1b04 	str.w	r1, [lr], #4
 800fcec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fcf0:	f8be 1000 	ldrh.w	r1, [lr]
 800fcf4:	0c12      	lsrs	r2, r2, #16
 800fcf6:	fb09 1102 	mla	r1, r9, r2, r1
 800fcfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fcfe:	4567      	cmp	r7, ip
 800fd00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fd04:	d8e6      	bhi.n	800fcd4 <__multiply+0x10c>
 800fd06:	9a01      	ldr	r2, [sp, #4]
 800fd08:	50a9      	str	r1, [r5, r2]
 800fd0a:	3504      	adds	r5, #4
 800fd0c:	e79a      	b.n	800fc44 <__multiply+0x7c>
 800fd0e:	3e01      	subs	r6, #1
 800fd10:	e79c      	b.n	800fc4c <__multiply+0x84>
 800fd12:	bf00      	nop
 800fd14:	080399dd 	.word	0x080399dd
 800fd18:	08039ab0 	.word	0x08039ab0

0800fd1c <__pow5mult>:
 800fd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd20:	4615      	mov	r5, r2
 800fd22:	f012 0203 	ands.w	r2, r2, #3
 800fd26:	4606      	mov	r6, r0
 800fd28:	460f      	mov	r7, r1
 800fd2a:	d007      	beq.n	800fd3c <__pow5mult+0x20>
 800fd2c:	4c25      	ldr	r4, [pc, #148]	; (800fdc4 <__pow5mult+0xa8>)
 800fd2e:	3a01      	subs	r2, #1
 800fd30:	2300      	movs	r3, #0
 800fd32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd36:	f7ff fe9b 	bl	800fa70 <__multadd>
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	10ad      	asrs	r5, r5, #2
 800fd3e:	d03d      	beq.n	800fdbc <__pow5mult+0xa0>
 800fd40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fd42:	b97c      	cbnz	r4, 800fd64 <__pow5mult+0x48>
 800fd44:	2010      	movs	r0, #16
 800fd46:	f7fc fa21 	bl	800c18c <malloc>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	6270      	str	r0, [r6, #36]	; 0x24
 800fd4e:	b928      	cbnz	r0, 800fd5c <__pow5mult+0x40>
 800fd50:	4b1d      	ldr	r3, [pc, #116]	; (800fdc8 <__pow5mult+0xac>)
 800fd52:	481e      	ldr	r0, [pc, #120]	; (800fdcc <__pow5mult+0xb0>)
 800fd54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fd58:	f7fc f9c4 	bl	800c0e4 <__assert_func>
 800fd5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd60:	6004      	str	r4, [r0, #0]
 800fd62:	60c4      	str	r4, [r0, #12]
 800fd64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd6c:	b94c      	cbnz	r4, 800fd82 <__pow5mult+0x66>
 800fd6e:	f240 2171 	movw	r1, #625	; 0x271
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7ff ff12 	bl	800fb9c <__i2b>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd7e:	4604      	mov	r4, r0
 800fd80:	6003      	str	r3, [r0, #0]
 800fd82:	f04f 0900 	mov.w	r9, #0
 800fd86:	07eb      	lsls	r3, r5, #31
 800fd88:	d50a      	bpl.n	800fda0 <__pow5mult+0x84>
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f7ff ff1a 	bl	800fbc8 <__multiply>
 800fd94:	4639      	mov	r1, r7
 800fd96:	4680      	mov	r8, r0
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f7ff fe47 	bl	800fa2c <_Bfree>
 800fd9e:	4647      	mov	r7, r8
 800fda0:	106d      	asrs	r5, r5, #1
 800fda2:	d00b      	beq.n	800fdbc <__pow5mult+0xa0>
 800fda4:	6820      	ldr	r0, [r4, #0]
 800fda6:	b938      	cbnz	r0, 800fdb8 <__pow5mult+0x9c>
 800fda8:	4622      	mov	r2, r4
 800fdaa:	4621      	mov	r1, r4
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff ff0b 	bl	800fbc8 <__multiply>
 800fdb2:	6020      	str	r0, [r4, #0]
 800fdb4:	f8c0 9000 	str.w	r9, [r0]
 800fdb8:	4604      	mov	r4, r0
 800fdba:	e7e4      	b.n	800fd86 <__pow5mult+0x6a>
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc2:	bf00      	nop
 800fdc4:	08039c00 	.word	0x08039c00
 800fdc8:	08039408 	.word	0x08039408
 800fdcc:	08039ab0 	.word	0x08039ab0

0800fdd0 <__lshift>:
 800fdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd4:	460c      	mov	r4, r1
 800fdd6:	6849      	ldr	r1, [r1, #4]
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdde:	68a3      	ldr	r3, [r4, #8]
 800fde0:	4607      	mov	r7, r0
 800fde2:	4691      	mov	r9, r2
 800fde4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fde8:	f108 0601 	add.w	r6, r8, #1
 800fdec:	42b3      	cmp	r3, r6
 800fdee:	db0b      	blt.n	800fe08 <__lshift+0x38>
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f7ff fddb 	bl	800f9ac <_Balloc>
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	b948      	cbnz	r0, 800fe0e <__lshift+0x3e>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	4b2a      	ldr	r3, [pc, #168]	; (800fea8 <__lshift+0xd8>)
 800fdfe:	482b      	ldr	r0, [pc, #172]	; (800feac <__lshift+0xdc>)
 800fe00:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fe04:	f7fc f96e 	bl	800c0e4 <__assert_func>
 800fe08:	3101      	adds	r1, #1
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	e7ee      	b.n	800fdec <__lshift+0x1c>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f100 0114 	add.w	r1, r0, #20
 800fe14:	f100 0210 	add.w	r2, r0, #16
 800fe18:	4618      	mov	r0, r3
 800fe1a:	4553      	cmp	r3, sl
 800fe1c:	db37      	blt.n	800fe8e <__lshift+0xbe>
 800fe1e:	6920      	ldr	r0, [r4, #16]
 800fe20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe24:	f104 0314 	add.w	r3, r4, #20
 800fe28:	f019 091f 	ands.w	r9, r9, #31
 800fe2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe34:	d02f      	beq.n	800fe96 <__lshift+0xc6>
 800fe36:	f1c9 0e20 	rsb	lr, r9, #32
 800fe3a:	468a      	mov	sl, r1
 800fe3c:	f04f 0c00 	mov.w	ip, #0
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	fa02 f209 	lsl.w	r2, r2, r9
 800fe46:	ea42 020c 	orr.w	r2, r2, ip
 800fe4a:	f84a 2b04 	str.w	r2, [sl], #4
 800fe4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe52:	4298      	cmp	r0, r3
 800fe54:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fe58:	d8f2      	bhi.n	800fe40 <__lshift+0x70>
 800fe5a:	1b03      	subs	r3, r0, r4
 800fe5c:	3b15      	subs	r3, #21
 800fe5e:	f023 0303 	bic.w	r3, r3, #3
 800fe62:	3304      	adds	r3, #4
 800fe64:	f104 0215 	add.w	r2, r4, #21
 800fe68:	4290      	cmp	r0, r2
 800fe6a:	bf38      	it	cc
 800fe6c:	2304      	movcc	r3, #4
 800fe6e:	f841 c003 	str.w	ip, [r1, r3]
 800fe72:	f1bc 0f00 	cmp.w	ip, #0
 800fe76:	d001      	beq.n	800fe7c <__lshift+0xac>
 800fe78:	f108 0602 	add.w	r6, r8, #2
 800fe7c:	3e01      	subs	r6, #1
 800fe7e:	4638      	mov	r0, r7
 800fe80:	612e      	str	r6, [r5, #16]
 800fe82:	4621      	mov	r1, r4
 800fe84:	f7ff fdd2 	bl	800fa2c <_Bfree>
 800fe88:	4628      	mov	r0, r5
 800fe8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe92:	3301      	adds	r3, #1
 800fe94:	e7c1      	b.n	800fe1a <__lshift+0x4a>
 800fe96:	3904      	subs	r1, #4
 800fe98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fea0:	4298      	cmp	r0, r3
 800fea2:	d8f9      	bhi.n	800fe98 <__lshift+0xc8>
 800fea4:	e7ea      	b.n	800fe7c <__lshift+0xac>
 800fea6:	bf00      	nop
 800fea8:	080399dd 	.word	0x080399dd
 800feac:	08039ab0 	.word	0x08039ab0

0800feb0 <__mcmp>:
 800feb0:	b530      	push	{r4, r5, lr}
 800feb2:	6902      	ldr	r2, [r0, #16]
 800feb4:	690c      	ldr	r4, [r1, #16]
 800feb6:	1b12      	subs	r2, r2, r4
 800feb8:	d10e      	bne.n	800fed8 <__mcmp+0x28>
 800feba:	f100 0314 	add.w	r3, r0, #20
 800febe:	3114      	adds	r1, #20
 800fec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fed0:	42a5      	cmp	r5, r4
 800fed2:	d003      	beq.n	800fedc <__mcmp+0x2c>
 800fed4:	d305      	bcc.n	800fee2 <__mcmp+0x32>
 800fed6:	2201      	movs	r2, #1
 800fed8:	4610      	mov	r0, r2
 800feda:	bd30      	pop	{r4, r5, pc}
 800fedc:	4283      	cmp	r3, r0
 800fede:	d3f3      	bcc.n	800fec8 <__mcmp+0x18>
 800fee0:	e7fa      	b.n	800fed8 <__mcmp+0x28>
 800fee2:	f04f 32ff 	mov.w	r2, #4294967295
 800fee6:	e7f7      	b.n	800fed8 <__mcmp+0x28>

0800fee8 <__mdiff>:
 800fee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	460c      	mov	r4, r1
 800feee:	4606      	mov	r6, r0
 800fef0:	4611      	mov	r1, r2
 800fef2:	4620      	mov	r0, r4
 800fef4:	4690      	mov	r8, r2
 800fef6:	f7ff ffdb 	bl	800feb0 <__mcmp>
 800fefa:	1e05      	subs	r5, r0, #0
 800fefc:	d110      	bne.n	800ff20 <__mdiff+0x38>
 800fefe:	4629      	mov	r1, r5
 800ff00:	4630      	mov	r0, r6
 800ff02:	f7ff fd53 	bl	800f9ac <_Balloc>
 800ff06:	b930      	cbnz	r0, 800ff16 <__mdiff+0x2e>
 800ff08:	4b3a      	ldr	r3, [pc, #232]	; (800fff4 <__mdiff+0x10c>)
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	f240 2132 	movw	r1, #562	; 0x232
 800ff10:	4839      	ldr	r0, [pc, #228]	; (800fff8 <__mdiff+0x110>)
 800ff12:	f7fc f8e7 	bl	800c0e4 <__assert_func>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff20:	bfa4      	itt	ge
 800ff22:	4643      	movge	r3, r8
 800ff24:	46a0      	movge	r8, r4
 800ff26:	4630      	mov	r0, r6
 800ff28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff2c:	bfa6      	itte	ge
 800ff2e:	461c      	movge	r4, r3
 800ff30:	2500      	movge	r5, #0
 800ff32:	2501      	movlt	r5, #1
 800ff34:	f7ff fd3a 	bl	800f9ac <_Balloc>
 800ff38:	b920      	cbnz	r0, 800ff44 <__mdiff+0x5c>
 800ff3a:	4b2e      	ldr	r3, [pc, #184]	; (800fff4 <__mdiff+0x10c>)
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ff42:	e7e5      	b.n	800ff10 <__mdiff+0x28>
 800ff44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff48:	6926      	ldr	r6, [r4, #16]
 800ff4a:	60c5      	str	r5, [r0, #12]
 800ff4c:	f104 0914 	add.w	r9, r4, #20
 800ff50:	f108 0514 	add.w	r5, r8, #20
 800ff54:	f100 0e14 	add.w	lr, r0, #20
 800ff58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff60:	f108 0210 	add.w	r2, r8, #16
 800ff64:	46f2      	mov	sl, lr
 800ff66:	2100      	movs	r1, #0
 800ff68:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ff70:	fa1f f883 	uxth.w	r8, r3
 800ff74:	fa11 f18b 	uxtah	r1, r1, fp
 800ff78:	0c1b      	lsrs	r3, r3, #16
 800ff7a:	eba1 0808 	sub.w	r8, r1, r8
 800ff7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff86:	fa1f f888 	uxth.w	r8, r8
 800ff8a:	1419      	asrs	r1, r3, #16
 800ff8c:	454e      	cmp	r6, r9
 800ff8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ff92:	f84a 3b04 	str.w	r3, [sl], #4
 800ff96:	d8e7      	bhi.n	800ff68 <__mdiff+0x80>
 800ff98:	1b33      	subs	r3, r6, r4
 800ff9a:	3b15      	subs	r3, #21
 800ff9c:	f023 0303 	bic.w	r3, r3, #3
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	3415      	adds	r4, #21
 800ffa4:	42a6      	cmp	r6, r4
 800ffa6:	bf38      	it	cc
 800ffa8:	2304      	movcc	r3, #4
 800ffaa:	441d      	add	r5, r3
 800ffac:	4473      	add	r3, lr
 800ffae:	469e      	mov	lr, r3
 800ffb0:	462e      	mov	r6, r5
 800ffb2:	4566      	cmp	r6, ip
 800ffb4:	d30e      	bcc.n	800ffd4 <__mdiff+0xec>
 800ffb6:	f10c 0203 	add.w	r2, ip, #3
 800ffba:	1b52      	subs	r2, r2, r5
 800ffbc:	f022 0203 	bic.w	r2, r2, #3
 800ffc0:	3d03      	subs	r5, #3
 800ffc2:	45ac      	cmp	ip, r5
 800ffc4:	bf38      	it	cc
 800ffc6:	2200      	movcc	r2, #0
 800ffc8:	441a      	add	r2, r3
 800ffca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ffce:	b17b      	cbz	r3, 800fff0 <__mdiff+0x108>
 800ffd0:	6107      	str	r7, [r0, #16]
 800ffd2:	e7a3      	b.n	800ff1c <__mdiff+0x34>
 800ffd4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ffd8:	fa11 f288 	uxtah	r2, r1, r8
 800ffdc:	1414      	asrs	r4, r2, #16
 800ffde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ffe2:	b292      	uxth	r2, r2
 800ffe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ffe8:	f84e 2b04 	str.w	r2, [lr], #4
 800ffec:	1421      	asrs	r1, r4, #16
 800ffee:	e7e0      	b.n	800ffb2 <__mdiff+0xca>
 800fff0:	3f01      	subs	r7, #1
 800fff2:	e7ea      	b.n	800ffca <__mdiff+0xe2>
 800fff4:	080399dd 	.word	0x080399dd
 800fff8:	08039ab0 	.word	0x08039ab0

0800fffc <__d2b>:
 800fffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010000:	4689      	mov	r9, r1
 8010002:	2101      	movs	r1, #1
 8010004:	ec57 6b10 	vmov	r6, r7, d0
 8010008:	4690      	mov	r8, r2
 801000a:	f7ff fccf 	bl	800f9ac <_Balloc>
 801000e:	4604      	mov	r4, r0
 8010010:	b930      	cbnz	r0, 8010020 <__d2b+0x24>
 8010012:	4602      	mov	r2, r0
 8010014:	4b25      	ldr	r3, [pc, #148]	; (80100ac <__d2b+0xb0>)
 8010016:	4826      	ldr	r0, [pc, #152]	; (80100b0 <__d2b+0xb4>)
 8010018:	f240 310a 	movw	r1, #778	; 0x30a
 801001c:	f7fc f862 	bl	800c0e4 <__assert_func>
 8010020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010028:	bb35      	cbnz	r5, 8010078 <__d2b+0x7c>
 801002a:	2e00      	cmp	r6, #0
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	d028      	beq.n	8010082 <__d2b+0x86>
 8010030:	4668      	mov	r0, sp
 8010032:	9600      	str	r6, [sp, #0]
 8010034:	f7ff fd82 	bl	800fb3c <__lo0bits>
 8010038:	9900      	ldr	r1, [sp, #0]
 801003a:	b300      	cbz	r0, 801007e <__d2b+0x82>
 801003c:	9a01      	ldr	r2, [sp, #4]
 801003e:	f1c0 0320 	rsb	r3, r0, #32
 8010042:	fa02 f303 	lsl.w	r3, r2, r3
 8010046:	430b      	orrs	r3, r1
 8010048:	40c2      	lsrs	r2, r0
 801004a:	6163      	str	r3, [r4, #20]
 801004c:	9201      	str	r2, [sp, #4]
 801004e:	9b01      	ldr	r3, [sp, #4]
 8010050:	61a3      	str	r3, [r4, #24]
 8010052:	2b00      	cmp	r3, #0
 8010054:	bf14      	ite	ne
 8010056:	2202      	movne	r2, #2
 8010058:	2201      	moveq	r2, #1
 801005a:	6122      	str	r2, [r4, #16]
 801005c:	b1d5      	cbz	r5, 8010094 <__d2b+0x98>
 801005e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010062:	4405      	add	r5, r0
 8010064:	f8c9 5000 	str.w	r5, [r9]
 8010068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801006c:	f8c8 0000 	str.w	r0, [r8]
 8010070:	4620      	mov	r0, r4
 8010072:	b003      	add	sp, #12
 8010074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801007c:	e7d5      	b.n	801002a <__d2b+0x2e>
 801007e:	6161      	str	r1, [r4, #20]
 8010080:	e7e5      	b.n	801004e <__d2b+0x52>
 8010082:	a801      	add	r0, sp, #4
 8010084:	f7ff fd5a 	bl	800fb3c <__lo0bits>
 8010088:	9b01      	ldr	r3, [sp, #4]
 801008a:	6163      	str	r3, [r4, #20]
 801008c:	2201      	movs	r2, #1
 801008e:	6122      	str	r2, [r4, #16]
 8010090:	3020      	adds	r0, #32
 8010092:	e7e3      	b.n	801005c <__d2b+0x60>
 8010094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801009c:	f8c9 0000 	str.w	r0, [r9]
 80100a0:	6918      	ldr	r0, [r3, #16]
 80100a2:	f7ff fd2b 	bl	800fafc <__hi0bits>
 80100a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100aa:	e7df      	b.n	801006c <__d2b+0x70>
 80100ac:	080399dd 	.word	0x080399dd
 80100b0:	08039ab0 	.word	0x08039ab0

080100b4 <_calloc_r>:
 80100b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100b6:	fba1 2402 	umull	r2, r4, r1, r2
 80100ba:	b94c      	cbnz	r4, 80100d0 <_calloc_r+0x1c>
 80100bc:	4611      	mov	r1, r2
 80100be:	9201      	str	r2, [sp, #4]
 80100c0:	f7fc fb68 	bl	800c794 <_malloc_r>
 80100c4:	9a01      	ldr	r2, [sp, #4]
 80100c6:	4605      	mov	r5, r0
 80100c8:	b930      	cbnz	r0, 80100d8 <_calloc_r+0x24>
 80100ca:	4628      	mov	r0, r5
 80100cc:	b003      	add	sp, #12
 80100ce:	bd30      	pop	{r4, r5, pc}
 80100d0:	220c      	movs	r2, #12
 80100d2:	6002      	str	r2, [r0, #0]
 80100d4:	2500      	movs	r5, #0
 80100d6:	e7f8      	b.n	80100ca <_calloc_r+0x16>
 80100d8:	4621      	mov	r1, r4
 80100da:	f7fc f875 	bl	800c1c8 <memset>
 80100de:	e7f4      	b.n	80100ca <_calloc_r+0x16>

080100e0 <_realloc_r>:
 80100e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e4:	4680      	mov	r8, r0
 80100e6:	4614      	mov	r4, r2
 80100e8:	460e      	mov	r6, r1
 80100ea:	b921      	cbnz	r1, 80100f6 <_realloc_r+0x16>
 80100ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	4611      	mov	r1, r2
 80100f2:	f7fc bb4f 	b.w	800c794 <_malloc_r>
 80100f6:	b92a      	cbnz	r2, 8010104 <_realloc_r+0x24>
 80100f8:	f7fc fae0 	bl	800c6bc <_free_r>
 80100fc:	4625      	mov	r5, r4
 80100fe:	4628      	mov	r0, r5
 8010100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010104:	f000 fe7c 	bl	8010e00 <_malloc_usable_size_r>
 8010108:	4284      	cmp	r4, r0
 801010a:	4607      	mov	r7, r0
 801010c:	d802      	bhi.n	8010114 <_realloc_r+0x34>
 801010e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010112:	d812      	bhi.n	801013a <_realloc_r+0x5a>
 8010114:	4621      	mov	r1, r4
 8010116:	4640      	mov	r0, r8
 8010118:	f7fc fb3c 	bl	800c794 <_malloc_r>
 801011c:	4605      	mov	r5, r0
 801011e:	2800      	cmp	r0, #0
 8010120:	d0ed      	beq.n	80100fe <_realloc_r+0x1e>
 8010122:	42bc      	cmp	r4, r7
 8010124:	4622      	mov	r2, r4
 8010126:	4631      	mov	r1, r6
 8010128:	bf28      	it	cs
 801012a:	463a      	movcs	r2, r7
 801012c:	f7fc f83e 	bl	800c1ac <memcpy>
 8010130:	4631      	mov	r1, r6
 8010132:	4640      	mov	r0, r8
 8010134:	f7fc fac2 	bl	800c6bc <_free_r>
 8010138:	e7e1      	b.n	80100fe <_realloc_r+0x1e>
 801013a:	4635      	mov	r5, r6
 801013c:	e7df      	b.n	80100fe <_realloc_r+0x1e>

0801013e <__ssputs_r>:
 801013e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010142:	688e      	ldr	r6, [r1, #8]
 8010144:	429e      	cmp	r6, r3
 8010146:	4682      	mov	sl, r0
 8010148:	460c      	mov	r4, r1
 801014a:	4690      	mov	r8, r2
 801014c:	461f      	mov	r7, r3
 801014e:	d838      	bhi.n	80101c2 <__ssputs_r+0x84>
 8010150:	898a      	ldrh	r2, [r1, #12]
 8010152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010156:	d032      	beq.n	80101be <__ssputs_r+0x80>
 8010158:	6825      	ldr	r5, [r4, #0]
 801015a:	6909      	ldr	r1, [r1, #16]
 801015c:	eba5 0901 	sub.w	r9, r5, r1
 8010160:	6965      	ldr	r5, [r4, #20]
 8010162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801016a:	3301      	adds	r3, #1
 801016c:	444b      	add	r3, r9
 801016e:	106d      	asrs	r5, r5, #1
 8010170:	429d      	cmp	r5, r3
 8010172:	bf38      	it	cc
 8010174:	461d      	movcc	r5, r3
 8010176:	0553      	lsls	r3, r2, #21
 8010178:	d531      	bpl.n	80101de <__ssputs_r+0xa0>
 801017a:	4629      	mov	r1, r5
 801017c:	f7fc fb0a 	bl	800c794 <_malloc_r>
 8010180:	4606      	mov	r6, r0
 8010182:	b950      	cbnz	r0, 801019a <__ssputs_r+0x5c>
 8010184:	230c      	movs	r3, #12
 8010186:	f8ca 3000 	str.w	r3, [sl]
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	f04f 30ff 	mov.w	r0, #4294967295
 8010196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019a:	6921      	ldr	r1, [r4, #16]
 801019c:	464a      	mov	r2, r9
 801019e:	f7fc f805 	bl	800c1ac <memcpy>
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	6126      	str	r6, [r4, #16]
 80101b0:	6165      	str	r5, [r4, #20]
 80101b2:	444e      	add	r6, r9
 80101b4:	eba5 0509 	sub.w	r5, r5, r9
 80101b8:	6026      	str	r6, [r4, #0]
 80101ba:	60a5      	str	r5, [r4, #8]
 80101bc:	463e      	mov	r6, r7
 80101be:	42be      	cmp	r6, r7
 80101c0:	d900      	bls.n	80101c4 <__ssputs_r+0x86>
 80101c2:	463e      	mov	r6, r7
 80101c4:	6820      	ldr	r0, [r4, #0]
 80101c6:	4632      	mov	r2, r6
 80101c8:	4641      	mov	r1, r8
 80101ca:	f7ff fbc9 	bl	800f960 <memmove>
 80101ce:	68a3      	ldr	r3, [r4, #8]
 80101d0:	1b9b      	subs	r3, r3, r6
 80101d2:	60a3      	str	r3, [r4, #8]
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	4433      	add	r3, r6
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	2000      	movs	r0, #0
 80101dc:	e7db      	b.n	8010196 <__ssputs_r+0x58>
 80101de:	462a      	mov	r2, r5
 80101e0:	f7ff ff7e 	bl	80100e0 <_realloc_r>
 80101e4:	4606      	mov	r6, r0
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d1e1      	bne.n	80101ae <__ssputs_r+0x70>
 80101ea:	6921      	ldr	r1, [r4, #16]
 80101ec:	4650      	mov	r0, sl
 80101ee:	f7fc fa65 	bl	800c6bc <_free_r>
 80101f2:	e7c7      	b.n	8010184 <__ssputs_r+0x46>

080101f4 <_svfiprintf_r>:
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4698      	mov	r8, r3
 80101fa:	898b      	ldrh	r3, [r1, #12]
 80101fc:	061b      	lsls	r3, r3, #24
 80101fe:	b09d      	sub	sp, #116	; 0x74
 8010200:	4607      	mov	r7, r0
 8010202:	460d      	mov	r5, r1
 8010204:	4614      	mov	r4, r2
 8010206:	d50e      	bpl.n	8010226 <_svfiprintf_r+0x32>
 8010208:	690b      	ldr	r3, [r1, #16]
 801020a:	b963      	cbnz	r3, 8010226 <_svfiprintf_r+0x32>
 801020c:	2140      	movs	r1, #64	; 0x40
 801020e:	f7fc fac1 	bl	800c794 <_malloc_r>
 8010212:	6028      	str	r0, [r5, #0]
 8010214:	6128      	str	r0, [r5, #16]
 8010216:	b920      	cbnz	r0, 8010222 <_svfiprintf_r+0x2e>
 8010218:	230c      	movs	r3, #12
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	f04f 30ff 	mov.w	r0, #4294967295
 8010220:	e0d1      	b.n	80103c6 <_svfiprintf_r+0x1d2>
 8010222:	2340      	movs	r3, #64	; 0x40
 8010224:	616b      	str	r3, [r5, #20]
 8010226:	2300      	movs	r3, #0
 8010228:	9309      	str	r3, [sp, #36]	; 0x24
 801022a:	2320      	movs	r3, #32
 801022c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010230:	f8cd 800c 	str.w	r8, [sp, #12]
 8010234:	2330      	movs	r3, #48	; 0x30
 8010236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103e0 <_svfiprintf_r+0x1ec>
 801023a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801023e:	f04f 0901 	mov.w	r9, #1
 8010242:	4623      	mov	r3, r4
 8010244:	469a      	mov	sl, r3
 8010246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801024a:	b10a      	cbz	r2, 8010250 <_svfiprintf_r+0x5c>
 801024c:	2a25      	cmp	r2, #37	; 0x25
 801024e:	d1f9      	bne.n	8010244 <_svfiprintf_r+0x50>
 8010250:	ebba 0b04 	subs.w	fp, sl, r4
 8010254:	d00b      	beq.n	801026e <_svfiprintf_r+0x7a>
 8010256:	465b      	mov	r3, fp
 8010258:	4622      	mov	r2, r4
 801025a:	4629      	mov	r1, r5
 801025c:	4638      	mov	r0, r7
 801025e:	f7ff ff6e 	bl	801013e <__ssputs_r>
 8010262:	3001      	adds	r0, #1
 8010264:	f000 80aa 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801026a:	445a      	add	r2, fp
 801026c:	9209      	str	r2, [sp, #36]	; 0x24
 801026e:	f89a 3000 	ldrb.w	r3, [sl]
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 80a2 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010278:	2300      	movs	r3, #0
 801027a:	f04f 32ff 	mov.w	r2, #4294967295
 801027e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010282:	f10a 0a01 	add.w	sl, sl, #1
 8010286:	9304      	str	r3, [sp, #16]
 8010288:	9307      	str	r3, [sp, #28]
 801028a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801028e:	931a      	str	r3, [sp, #104]	; 0x68
 8010290:	4654      	mov	r4, sl
 8010292:	2205      	movs	r2, #5
 8010294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010298:	4851      	ldr	r0, [pc, #324]	; (80103e0 <_svfiprintf_r+0x1ec>)
 801029a:	f7ef ffb1 	bl	8000200 <memchr>
 801029e:	9a04      	ldr	r2, [sp, #16]
 80102a0:	b9d8      	cbnz	r0, 80102da <_svfiprintf_r+0xe6>
 80102a2:	06d0      	lsls	r0, r2, #27
 80102a4:	bf44      	itt	mi
 80102a6:	2320      	movmi	r3, #32
 80102a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ac:	0711      	lsls	r1, r2, #28
 80102ae:	bf44      	itt	mi
 80102b0:	232b      	movmi	r3, #43	; 0x2b
 80102b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102b6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ba:	2b2a      	cmp	r3, #42	; 0x2a
 80102bc:	d015      	beq.n	80102ea <_svfiprintf_r+0xf6>
 80102be:	9a07      	ldr	r2, [sp, #28]
 80102c0:	4654      	mov	r4, sl
 80102c2:	2000      	movs	r0, #0
 80102c4:	f04f 0c0a 	mov.w	ip, #10
 80102c8:	4621      	mov	r1, r4
 80102ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ce:	3b30      	subs	r3, #48	; 0x30
 80102d0:	2b09      	cmp	r3, #9
 80102d2:	d94e      	bls.n	8010372 <_svfiprintf_r+0x17e>
 80102d4:	b1b0      	cbz	r0, 8010304 <_svfiprintf_r+0x110>
 80102d6:	9207      	str	r2, [sp, #28]
 80102d8:	e014      	b.n	8010304 <_svfiprintf_r+0x110>
 80102da:	eba0 0308 	sub.w	r3, r0, r8
 80102de:	fa09 f303 	lsl.w	r3, r9, r3
 80102e2:	4313      	orrs	r3, r2
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	46a2      	mov	sl, r4
 80102e8:	e7d2      	b.n	8010290 <_svfiprintf_r+0x9c>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	1d19      	adds	r1, r3, #4
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	9103      	str	r1, [sp, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	bfbb      	ittet	lt
 80102f6:	425b      	neglt	r3, r3
 80102f8:	f042 0202 	orrlt.w	r2, r2, #2
 80102fc:	9307      	strge	r3, [sp, #28]
 80102fe:	9307      	strlt	r3, [sp, #28]
 8010300:	bfb8      	it	lt
 8010302:	9204      	strlt	r2, [sp, #16]
 8010304:	7823      	ldrb	r3, [r4, #0]
 8010306:	2b2e      	cmp	r3, #46	; 0x2e
 8010308:	d10c      	bne.n	8010324 <_svfiprintf_r+0x130>
 801030a:	7863      	ldrb	r3, [r4, #1]
 801030c:	2b2a      	cmp	r3, #42	; 0x2a
 801030e:	d135      	bne.n	801037c <_svfiprintf_r+0x188>
 8010310:	9b03      	ldr	r3, [sp, #12]
 8010312:	1d1a      	adds	r2, r3, #4
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	9203      	str	r2, [sp, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	bfb8      	it	lt
 801031c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010320:	3402      	adds	r4, #2
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103f0 <_svfiprintf_r+0x1fc>
 8010328:	7821      	ldrb	r1, [r4, #0]
 801032a:	2203      	movs	r2, #3
 801032c:	4650      	mov	r0, sl
 801032e:	f7ef ff67 	bl	8000200 <memchr>
 8010332:	b140      	cbz	r0, 8010346 <_svfiprintf_r+0x152>
 8010334:	2340      	movs	r3, #64	; 0x40
 8010336:	eba0 000a 	sub.w	r0, r0, sl
 801033a:	fa03 f000 	lsl.w	r0, r3, r0
 801033e:	9b04      	ldr	r3, [sp, #16]
 8010340:	4303      	orrs	r3, r0
 8010342:	3401      	adds	r4, #1
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034a:	4826      	ldr	r0, [pc, #152]	; (80103e4 <_svfiprintf_r+0x1f0>)
 801034c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010350:	2206      	movs	r2, #6
 8010352:	f7ef ff55 	bl	8000200 <memchr>
 8010356:	2800      	cmp	r0, #0
 8010358:	d038      	beq.n	80103cc <_svfiprintf_r+0x1d8>
 801035a:	4b23      	ldr	r3, [pc, #140]	; (80103e8 <_svfiprintf_r+0x1f4>)
 801035c:	bb1b      	cbnz	r3, 80103a6 <_svfiprintf_r+0x1b2>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	3307      	adds	r3, #7
 8010362:	f023 0307 	bic.w	r3, r3, #7
 8010366:	3308      	adds	r3, #8
 8010368:	9303      	str	r3, [sp, #12]
 801036a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036c:	4433      	add	r3, r6
 801036e:	9309      	str	r3, [sp, #36]	; 0x24
 8010370:	e767      	b.n	8010242 <_svfiprintf_r+0x4e>
 8010372:	fb0c 3202 	mla	r2, ip, r2, r3
 8010376:	460c      	mov	r4, r1
 8010378:	2001      	movs	r0, #1
 801037a:	e7a5      	b.n	80102c8 <_svfiprintf_r+0xd4>
 801037c:	2300      	movs	r3, #0
 801037e:	3401      	adds	r4, #1
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	4619      	mov	r1, r3
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4620      	mov	r0, r4
 801038a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801038e:	3a30      	subs	r2, #48	; 0x30
 8010390:	2a09      	cmp	r2, #9
 8010392:	d903      	bls.n	801039c <_svfiprintf_r+0x1a8>
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0c5      	beq.n	8010324 <_svfiprintf_r+0x130>
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	e7c3      	b.n	8010324 <_svfiprintf_r+0x130>
 801039c:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a0:	4604      	mov	r4, r0
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7f0      	b.n	8010388 <_svfiprintf_r+0x194>
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462a      	mov	r2, r5
 80103ac:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7fc fc5d 	bl	800cc70 <_printf_float>
 80103b6:	1c42      	adds	r2, r0, #1
 80103b8:	4606      	mov	r6, r0
 80103ba:	d1d6      	bne.n	801036a <_svfiprintf_r+0x176>
 80103bc:	89ab      	ldrh	r3, [r5, #12]
 80103be:	065b      	lsls	r3, r3, #25
 80103c0:	f53f af2c 	bmi.w	801021c <_svfiprintf_r+0x28>
 80103c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103c6:	b01d      	add	sp, #116	; 0x74
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	ab03      	add	r3, sp, #12
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	462a      	mov	r2, r5
 80103d2:	4b06      	ldr	r3, [pc, #24]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103d4:	a904      	add	r1, sp, #16
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7fc feee 	bl	800d1b8 <_printf_i>
 80103dc:	e7eb      	b.n	80103b6 <_svfiprintf_r+0x1c2>
 80103de:	bf00      	nop
 80103e0:	08039574 	.word	0x08039574
 80103e4:	0803957e 	.word	0x0803957e
 80103e8:	0800cc71 	.word	0x0800cc71
 80103ec:	0801013f 	.word	0x0801013f
 80103f0:	0803957a 	.word	0x0803957a

080103f4 <_sungetc_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	1c4b      	adds	r3, r1, #1
 80103f8:	4614      	mov	r4, r2
 80103fa:	d103      	bne.n	8010404 <_sungetc_r+0x10>
 80103fc:	f04f 35ff 	mov.w	r5, #4294967295
 8010400:	4628      	mov	r0, r5
 8010402:	bd38      	pop	{r3, r4, r5, pc}
 8010404:	8993      	ldrh	r3, [r2, #12]
 8010406:	f023 0320 	bic.w	r3, r3, #32
 801040a:	8193      	strh	r3, [r2, #12]
 801040c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801040e:	6852      	ldr	r2, [r2, #4]
 8010410:	b2cd      	uxtb	r5, r1
 8010412:	b18b      	cbz	r3, 8010438 <_sungetc_r+0x44>
 8010414:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010416:	4293      	cmp	r3, r2
 8010418:	dd08      	ble.n	801042c <_sungetc_r+0x38>
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	1e5a      	subs	r2, r3, #1
 801041e:	6022      	str	r2, [r4, #0]
 8010420:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010424:	6863      	ldr	r3, [r4, #4]
 8010426:	3301      	adds	r3, #1
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	e7e9      	b.n	8010400 <_sungetc_r+0xc>
 801042c:	4621      	mov	r1, r4
 801042e:	f000 fc67 	bl	8010d00 <__submore>
 8010432:	2800      	cmp	r0, #0
 8010434:	d0f1      	beq.n	801041a <_sungetc_r+0x26>
 8010436:	e7e1      	b.n	80103fc <_sungetc_r+0x8>
 8010438:	6921      	ldr	r1, [r4, #16]
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	b151      	cbz	r1, 8010454 <_sungetc_r+0x60>
 801043e:	4299      	cmp	r1, r3
 8010440:	d208      	bcs.n	8010454 <_sungetc_r+0x60>
 8010442:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010446:	42a9      	cmp	r1, r5
 8010448:	d104      	bne.n	8010454 <_sungetc_r+0x60>
 801044a:	3b01      	subs	r3, #1
 801044c:	3201      	adds	r2, #1
 801044e:	6023      	str	r3, [r4, #0]
 8010450:	6062      	str	r2, [r4, #4]
 8010452:	e7d5      	b.n	8010400 <_sungetc_r+0xc>
 8010454:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801045c:	6363      	str	r3, [r4, #52]	; 0x34
 801045e:	2303      	movs	r3, #3
 8010460:	63a3      	str	r3, [r4, #56]	; 0x38
 8010462:	4623      	mov	r3, r4
 8010464:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010468:	6023      	str	r3, [r4, #0]
 801046a:	2301      	movs	r3, #1
 801046c:	e7dc      	b.n	8010428 <_sungetc_r+0x34>

0801046e <__ssrefill_r>:
 801046e:	b510      	push	{r4, lr}
 8010470:	460c      	mov	r4, r1
 8010472:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010474:	b169      	cbz	r1, 8010492 <__ssrefill_r+0x24>
 8010476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801047a:	4299      	cmp	r1, r3
 801047c:	d001      	beq.n	8010482 <__ssrefill_r+0x14>
 801047e:	f7fc f91d 	bl	800c6bc <_free_r>
 8010482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010484:	6063      	str	r3, [r4, #4]
 8010486:	2000      	movs	r0, #0
 8010488:	6360      	str	r0, [r4, #52]	; 0x34
 801048a:	b113      	cbz	r3, 8010492 <__ssrefill_r+0x24>
 801048c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801048e:	6023      	str	r3, [r4, #0]
 8010490:	bd10      	pop	{r4, pc}
 8010492:	6923      	ldr	r3, [r4, #16]
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	2300      	movs	r3, #0
 8010498:	6063      	str	r3, [r4, #4]
 801049a:	89a3      	ldrh	r3, [r4, #12]
 801049c:	f043 0320 	orr.w	r3, r3, #32
 80104a0:	81a3      	strh	r3, [r4, #12]
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295
 80104a6:	e7f3      	b.n	8010490 <__ssrefill_r+0x22>

080104a8 <__ssvfiscanf_r>:
 80104a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ac:	460c      	mov	r4, r1
 80104ae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80104b2:	2100      	movs	r1, #0
 80104b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80104b8:	49a6      	ldr	r1, [pc, #664]	; (8010754 <__ssvfiscanf_r+0x2ac>)
 80104ba:	91a0      	str	r1, [sp, #640]	; 0x280
 80104bc:	f10d 0804 	add.w	r8, sp, #4
 80104c0:	49a5      	ldr	r1, [pc, #660]	; (8010758 <__ssvfiscanf_r+0x2b0>)
 80104c2:	4fa6      	ldr	r7, [pc, #664]	; (801075c <__ssvfiscanf_r+0x2b4>)
 80104c4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010760 <__ssvfiscanf_r+0x2b8>
 80104c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80104cc:	4606      	mov	r6, r0
 80104ce:	91a1      	str	r1, [sp, #644]	; 0x284
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	7813      	ldrb	r3, [r2, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 815a 	beq.w	801078e <__ssvfiscanf_r+0x2e6>
 80104da:	5dd9      	ldrb	r1, [r3, r7]
 80104dc:	f011 0108 	ands.w	r1, r1, #8
 80104e0:	f102 0501 	add.w	r5, r2, #1
 80104e4:	d019      	beq.n	801051a <__ssvfiscanf_r+0x72>
 80104e6:	6863      	ldr	r3, [r4, #4]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	dd0f      	ble.n	801050c <__ssvfiscanf_r+0x64>
 80104ec:	6823      	ldr	r3, [r4, #0]
 80104ee:	781a      	ldrb	r2, [r3, #0]
 80104f0:	5cba      	ldrb	r2, [r7, r2]
 80104f2:	0712      	lsls	r2, r2, #28
 80104f4:	d401      	bmi.n	80104fa <__ssvfiscanf_r+0x52>
 80104f6:	462a      	mov	r2, r5
 80104f8:	e7eb      	b.n	80104d2 <__ssvfiscanf_r+0x2a>
 80104fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80104fc:	3201      	adds	r2, #1
 80104fe:	9245      	str	r2, [sp, #276]	; 0x114
 8010500:	6862      	ldr	r2, [r4, #4]
 8010502:	3301      	adds	r3, #1
 8010504:	3a01      	subs	r2, #1
 8010506:	6062      	str	r2, [r4, #4]
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	e7ec      	b.n	80104e6 <__ssvfiscanf_r+0x3e>
 801050c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801050e:	4621      	mov	r1, r4
 8010510:	4630      	mov	r0, r6
 8010512:	4798      	blx	r3
 8010514:	2800      	cmp	r0, #0
 8010516:	d0e9      	beq.n	80104ec <__ssvfiscanf_r+0x44>
 8010518:	e7ed      	b.n	80104f6 <__ssvfiscanf_r+0x4e>
 801051a:	2b25      	cmp	r3, #37	; 0x25
 801051c:	d012      	beq.n	8010544 <__ssvfiscanf_r+0x9c>
 801051e:	469a      	mov	sl, r3
 8010520:	6863      	ldr	r3, [r4, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	f340 8091 	ble.w	801064a <__ssvfiscanf_r+0x1a2>
 8010528:	6822      	ldr	r2, [r4, #0]
 801052a:	7813      	ldrb	r3, [r2, #0]
 801052c:	4553      	cmp	r3, sl
 801052e:	f040 812e 	bne.w	801078e <__ssvfiscanf_r+0x2e6>
 8010532:	6863      	ldr	r3, [r4, #4]
 8010534:	3b01      	subs	r3, #1
 8010536:	6063      	str	r3, [r4, #4]
 8010538:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801053a:	3201      	adds	r2, #1
 801053c:	3301      	adds	r3, #1
 801053e:	6022      	str	r2, [r4, #0]
 8010540:	9345      	str	r3, [sp, #276]	; 0x114
 8010542:	e7d8      	b.n	80104f6 <__ssvfiscanf_r+0x4e>
 8010544:	9141      	str	r1, [sp, #260]	; 0x104
 8010546:	9143      	str	r1, [sp, #268]	; 0x10c
 8010548:	7853      	ldrb	r3, [r2, #1]
 801054a:	2b2a      	cmp	r3, #42	; 0x2a
 801054c:	bf02      	ittt	eq
 801054e:	2310      	moveq	r3, #16
 8010550:	1c95      	addeq	r5, r2, #2
 8010552:	9341      	streq	r3, [sp, #260]	; 0x104
 8010554:	220a      	movs	r2, #10
 8010556:	46aa      	mov	sl, r5
 8010558:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801055c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010560:	2b09      	cmp	r3, #9
 8010562:	d91d      	bls.n	80105a0 <__ssvfiscanf_r+0xf8>
 8010564:	487e      	ldr	r0, [pc, #504]	; (8010760 <__ssvfiscanf_r+0x2b8>)
 8010566:	2203      	movs	r2, #3
 8010568:	f7ef fe4a 	bl	8000200 <memchr>
 801056c:	b140      	cbz	r0, 8010580 <__ssvfiscanf_r+0xd8>
 801056e:	2301      	movs	r3, #1
 8010570:	eba0 0009 	sub.w	r0, r0, r9
 8010574:	fa03 f000 	lsl.w	r0, r3, r0
 8010578:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801057a:	4318      	orrs	r0, r3
 801057c:	9041      	str	r0, [sp, #260]	; 0x104
 801057e:	4655      	mov	r5, sl
 8010580:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010584:	2b78      	cmp	r3, #120	; 0x78
 8010586:	d806      	bhi.n	8010596 <__ssvfiscanf_r+0xee>
 8010588:	2b57      	cmp	r3, #87	; 0x57
 801058a:	d810      	bhi.n	80105ae <__ssvfiscanf_r+0x106>
 801058c:	2b25      	cmp	r3, #37	; 0x25
 801058e:	d0c6      	beq.n	801051e <__ssvfiscanf_r+0x76>
 8010590:	d856      	bhi.n	8010640 <__ssvfiscanf_r+0x198>
 8010592:	2b00      	cmp	r3, #0
 8010594:	d064      	beq.n	8010660 <__ssvfiscanf_r+0x1b8>
 8010596:	2303      	movs	r3, #3
 8010598:	9347      	str	r3, [sp, #284]	; 0x11c
 801059a:	230a      	movs	r3, #10
 801059c:	9342      	str	r3, [sp, #264]	; 0x108
 801059e:	e071      	b.n	8010684 <__ssvfiscanf_r+0x1dc>
 80105a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80105a2:	fb02 1103 	mla	r1, r2, r3, r1
 80105a6:	3930      	subs	r1, #48	; 0x30
 80105a8:	9143      	str	r1, [sp, #268]	; 0x10c
 80105aa:	4655      	mov	r5, sl
 80105ac:	e7d3      	b.n	8010556 <__ssvfiscanf_r+0xae>
 80105ae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80105b2:	2a20      	cmp	r2, #32
 80105b4:	d8ef      	bhi.n	8010596 <__ssvfiscanf_r+0xee>
 80105b6:	a101      	add	r1, pc, #4	; (adr r1, 80105bc <__ssvfiscanf_r+0x114>)
 80105b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80105bc:	0801066f 	.word	0x0801066f
 80105c0:	08010597 	.word	0x08010597
 80105c4:	08010597 	.word	0x08010597
 80105c8:	080106cd 	.word	0x080106cd
 80105cc:	08010597 	.word	0x08010597
 80105d0:	08010597 	.word	0x08010597
 80105d4:	08010597 	.word	0x08010597
 80105d8:	08010597 	.word	0x08010597
 80105dc:	08010597 	.word	0x08010597
 80105e0:	08010597 	.word	0x08010597
 80105e4:	08010597 	.word	0x08010597
 80105e8:	080106e3 	.word	0x080106e3
 80105ec:	080106b9 	.word	0x080106b9
 80105f0:	08010647 	.word	0x08010647
 80105f4:	08010647 	.word	0x08010647
 80105f8:	08010647 	.word	0x08010647
 80105fc:	08010597 	.word	0x08010597
 8010600:	080106bd 	.word	0x080106bd
 8010604:	08010597 	.word	0x08010597
 8010608:	08010597 	.word	0x08010597
 801060c:	08010597 	.word	0x08010597
 8010610:	08010597 	.word	0x08010597
 8010614:	080106f3 	.word	0x080106f3
 8010618:	080106c5 	.word	0x080106c5
 801061c:	08010667 	.word	0x08010667
 8010620:	08010597 	.word	0x08010597
 8010624:	08010597 	.word	0x08010597
 8010628:	080106ef 	.word	0x080106ef
 801062c:	08010597 	.word	0x08010597
 8010630:	080106b9 	.word	0x080106b9
 8010634:	08010597 	.word	0x08010597
 8010638:	08010597 	.word	0x08010597
 801063c:	0801066f 	.word	0x0801066f
 8010640:	3b45      	subs	r3, #69	; 0x45
 8010642:	2b02      	cmp	r3, #2
 8010644:	d8a7      	bhi.n	8010596 <__ssvfiscanf_r+0xee>
 8010646:	2305      	movs	r3, #5
 8010648:	e01b      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 801064a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801064c:	4621      	mov	r1, r4
 801064e:	4630      	mov	r0, r6
 8010650:	4798      	blx	r3
 8010652:	2800      	cmp	r0, #0
 8010654:	f43f af68 	beq.w	8010528 <__ssvfiscanf_r+0x80>
 8010658:	9844      	ldr	r0, [sp, #272]	; 0x110
 801065a:	2800      	cmp	r0, #0
 801065c:	f040 808d 	bne.w	801077a <__ssvfiscanf_r+0x2d2>
 8010660:	f04f 30ff 	mov.w	r0, #4294967295
 8010664:	e08f      	b.n	8010786 <__ssvfiscanf_r+0x2de>
 8010666:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010668:	f042 0220 	orr.w	r2, r2, #32
 801066c:	9241      	str	r2, [sp, #260]	; 0x104
 801066e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010674:	9241      	str	r2, [sp, #260]	; 0x104
 8010676:	2210      	movs	r2, #16
 8010678:	2b6f      	cmp	r3, #111	; 0x6f
 801067a:	9242      	str	r2, [sp, #264]	; 0x108
 801067c:	bf34      	ite	cc
 801067e:	2303      	movcc	r3, #3
 8010680:	2304      	movcs	r3, #4
 8010682:	9347      	str	r3, [sp, #284]	; 0x11c
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	dd42      	ble.n	8010710 <__ssvfiscanf_r+0x268>
 801068a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801068c:	0659      	lsls	r1, r3, #25
 801068e:	d404      	bmi.n	801069a <__ssvfiscanf_r+0x1f2>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	781a      	ldrb	r2, [r3, #0]
 8010694:	5cba      	ldrb	r2, [r7, r2]
 8010696:	0712      	lsls	r2, r2, #28
 8010698:	d441      	bmi.n	801071e <__ssvfiscanf_r+0x276>
 801069a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801069c:	2b02      	cmp	r3, #2
 801069e:	dc50      	bgt.n	8010742 <__ssvfiscanf_r+0x29a>
 80106a0:	466b      	mov	r3, sp
 80106a2:	4622      	mov	r2, r4
 80106a4:	a941      	add	r1, sp, #260	; 0x104
 80106a6:	4630      	mov	r0, r6
 80106a8:	f000 f876 	bl	8010798 <_scanf_chars>
 80106ac:	2801      	cmp	r0, #1
 80106ae:	d06e      	beq.n	801078e <__ssvfiscanf_r+0x2e6>
 80106b0:	2802      	cmp	r0, #2
 80106b2:	f47f af20 	bne.w	80104f6 <__ssvfiscanf_r+0x4e>
 80106b6:	e7cf      	b.n	8010658 <__ssvfiscanf_r+0x1b0>
 80106b8:	220a      	movs	r2, #10
 80106ba:	e7dd      	b.n	8010678 <__ssvfiscanf_r+0x1d0>
 80106bc:	2300      	movs	r3, #0
 80106be:	9342      	str	r3, [sp, #264]	; 0x108
 80106c0:	2303      	movs	r3, #3
 80106c2:	e7de      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 80106c4:	2308      	movs	r3, #8
 80106c6:	9342      	str	r3, [sp, #264]	; 0x108
 80106c8:	2304      	movs	r3, #4
 80106ca:	e7da      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 80106cc:	4629      	mov	r1, r5
 80106ce:	4640      	mov	r0, r8
 80106d0:	f000 f9c6 	bl	8010a60 <__sccl>
 80106d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80106d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106da:	9341      	str	r3, [sp, #260]	; 0x104
 80106dc:	4605      	mov	r5, r0
 80106de:	2301      	movs	r3, #1
 80106e0:	e7cf      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 80106e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80106e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e8:	9341      	str	r3, [sp, #260]	; 0x104
 80106ea:	2300      	movs	r3, #0
 80106ec:	e7c9      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 80106ee:	2302      	movs	r3, #2
 80106f0:	e7c7      	b.n	8010682 <__ssvfiscanf_r+0x1da>
 80106f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80106f4:	06c3      	lsls	r3, r0, #27
 80106f6:	f53f aefe 	bmi.w	80104f6 <__ssvfiscanf_r+0x4e>
 80106fa:	9b00      	ldr	r3, [sp, #0]
 80106fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80106fe:	1d19      	adds	r1, r3, #4
 8010700:	9100      	str	r1, [sp, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f010 0f01 	tst.w	r0, #1
 8010708:	bf14      	ite	ne
 801070a:	801a      	strhne	r2, [r3, #0]
 801070c:	601a      	streq	r2, [r3, #0]
 801070e:	e6f2      	b.n	80104f6 <__ssvfiscanf_r+0x4e>
 8010710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010712:	4621      	mov	r1, r4
 8010714:	4630      	mov	r0, r6
 8010716:	4798      	blx	r3
 8010718:	2800      	cmp	r0, #0
 801071a:	d0b6      	beq.n	801068a <__ssvfiscanf_r+0x1e2>
 801071c:	e79c      	b.n	8010658 <__ssvfiscanf_r+0x1b0>
 801071e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010720:	3201      	adds	r2, #1
 8010722:	9245      	str	r2, [sp, #276]	; 0x114
 8010724:	6862      	ldr	r2, [r4, #4]
 8010726:	3a01      	subs	r2, #1
 8010728:	2a00      	cmp	r2, #0
 801072a:	6062      	str	r2, [r4, #4]
 801072c:	dd02      	ble.n	8010734 <__ssvfiscanf_r+0x28c>
 801072e:	3301      	adds	r3, #1
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	e7ad      	b.n	8010690 <__ssvfiscanf_r+0x1e8>
 8010734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010736:	4621      	mov	r1, r4
 8010738:	4630      	mov	r0, r6
 801073a:	4798      	blx	r3
 801073c:	2800      	cmp	r0, #0
 801073e:	d0a7      	beq.n	8010690 <__ssvfiscanf_r+0x1e8>
 8010740:	e78a      	b.n	8010658 <__ssvfiscanf_r+0x1b0>
 8010742:	2b04      	cmp	r3, #4
 8010744:	dc0e      	bgt.n	8010764 <__ssvfiscanf_r+0x2bc>
 8010746:	466b      	mov	r3, sp
 8010748:	4622      	mov	r2, r4
 801074a:	a941      	add	r1, sp, #260	; 0x104
 801074c:	4630      	mov	r0, r6
 801074e:	f000 f87d 	bl	801084c <_scanf_i>
 8010752:	e7ab      	b.n	80106ac <__ssvfiscanf_r+0x204>
 8010754:	080103f5 	.word	0x080103f5
 8010758:	0801046f 	.word	0x0801046f
 801075c:	08039875 	.word	0x08039875
 8010760:	0803957a 	.word	0x0803957a
 8010764:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <__ssvfiscanf_r+0x2ec>)
 8010766:	2b00      	cmp	r3, #0
 8010768:	f43f aec5 	beq.w	80104f6 <__ssvfiscanf_r+0x4e>
 801076c:	466b      	mov	r3, sp
 801076e:	4622      	mov	r2, r4
 8010770:	a941      	add	r1, sp, #260	; 0x104
 8010772:	4630      	mov	r0, r6
 8010774:	f3af 8000 	nop.w
 8010778:	e798      	b.n	80106ac <__ssvfiscanf_r+0x204>
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010780:	bf18      	it	ne
 8010782:	f04f 30ff 	movne.w	r0, #4294967295
 8010786:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801078e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010790:	e7f9      	b.n	8010786 <__ssvfiscanf_r+0x2de>
 8010792:	bf00      	nop
 8010794:	00000000 	.word	0x00000000

08010798 <_scanf_chars>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4615      	mov	r5, r2
 801079e:	688a      	ldr	r2, [r1, #8]
 80107a0:	4680      	mov	r8, r0
 80107a2:	460c      	mov	r4, r1
 80107a4:	b932      	cbnz	r2, 80107b4 <_scanf_chars+0x1c>
 80107a6:	698a      	ldr	r2, [r1, #24]
 80107a8:	2a00      	cmp	r2, #0
 80107aa:	bf0c      	ite	eq
 80107ac:	2201      	moveq	r2, #1
 80107ae:	f04f 32ff 	movne.w	r2, #4294967295
 80107b2:	608a      	str	r2, [r1, #8]
 80107b4:	6822      	ldr	r2, [r4, #0]
 80107b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010848 <_scanf_chars+0xb0>
 80107ba:	06d1      	lsls	r1, r2, #27
 80107bc:	bf5f      	itttt	pl
 80107be:	681a      	ldrpl	r2, [r3, #0]
 80107c0:	1d11      	addpl	r1, r2, #4
 80107c2:	6019      	strpl	r1, [r3, #0]
 80107c4:	6816      	ldrpl	r6, [r2, #0]
 80107c6:	2700      	movs	r7, #0
 80107c8:	69a0      	ldr	r0, [r4, #24]
 80107ca:	b188      	cbz	r0, 80107f0 <_scanf_chars+0x58>
 80107cc:	2801      	cmp	r0, #1
 80107ce:	d107      	bne.n	80107e0 <_scanf_chars+0x48>
 80107d0:	682a      	ldr	r2, [r5, #0]
 80107d2:	7811      	ldrb	r1, [r2, #0]
 80107d4:	6962      	ldr	r2, [r4, #20]
 80107d6:	5c52      	ldrb	r2, [r2, r1]
 80107d8:	b952      	cbnz	r2, 80107f0 <_scanf_chars+0x58>
 80107da:	2f00      	cmp	r7, #0
 80107dc:	d031      	beq.n	8010842 <_scanf_chars+0xaa>
 80107de:	e022      	b.n	8010826 <_scanf_chars+0x8e>
 80107e0:	2802      	cmp	r0, #2
 80107e2:	d120      	bne.n	8010826 <_scanf_chars+0x8e>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80107ec:	071b      	lsls	r3, r3, #28
 80107ee:	d41a      	bmi.n	8010826 <_scanf_chars+0x8e>
 80107f0:	6823      	ldr	r3, [r4, #0]
 80107f2:	06da      	lsls	r2, r3, #27
 80107f4:	bf5e      	ittt	pl
 80107f6:	682b      	ldrpl	r3, [r5, #0]
 80107f8:	781b      	ldrbpl	r3, [r3, #0]
 80107fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80107fe:	682a      	ldr	r2, [r5, #0]
 8010800:	686b      	ldr	r3, [r5, #4]
 8010802:	3201      	adds	r2, #1
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	68a2      	ldr	r2, [r4, #8]
 8010808:	3b01      	subs	r3, #1
 801080a:	3a01      	subs	r2, #1
 801080c:	606b      	str	r3, [r5, #4]
 801080e:	3701      	adds	r7, #1
 8010810:	60a2      	str	r2, [r4, #8]
 8010812:	b142      	cbz	r2, 8010826 <_scanf_chars+0x8e>
 8010814:	2b00      	cmp	r3, #0
 8010816:	dcd7      	bgt.n	80107c8 <_scanf_chars+0x30>
 8010818:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801081c:	4629      	mov	r1, r5
 801081e:	4640      	mov	r0, r8
 8010820:	4798      	blx	r3
 8010822:	2800      	cmp	r0, #0
 8010824:	d0d0      	beq.n	80107c8 <_scanf_chars+0x30>
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	f013 0310 	ands.w	r3, r3, #16
 801082c:	d105      	bne.n	801083a <_scanf_chars+0xa2>
 801082e:	68e2      	ldr	r2, [r4, #12]
 8010830:	3201      	adds	r2, #1
 8010832:	60e2      	str	r2, [r4, #12]
 8010834:	69a2      	ldr	r2, [r4, #24]
 8010836:	b102      	cbz	r2, 801083a <_scanf_chars+0xa2>
 8010838:	7033      	strb	r3, [r6, #0]
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	443b      	add	r3, r7
 801083e:	6123      	str	r3, [r4, #16]
 8010840:	2000      	movs	r0, #0
 8010842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010846:	bf00      	nop
 8010848:	08039875 	.word	0x08039875

0801084c <_scanf_i>:
 801084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	4698      	mov	r8, r3
 8010852:	4b76      	ldr	r3, [pc, #472]	; (8010a2c <_scanf_i+0x1e0>)
 8010854:	460c      	mov	r4, r1
 8010856:	4682      	mov	sl, r0
 8010858:	4616      	mov	r6, r2
 801085a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801085e:	b087      	sub	sp, #28
 8010860:	ab03      	add	r3, sp, #12
 8010862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010866:	4b72      	ldr	r3, [pc, #456]	; (8010a30 <_scanf_i+0x1e4>)
 8010868:	69a1      	ldr	r1, [r4, #24]
 801086a:	4a72      	ldr	r2, [pc, #456]	; (8010a34 <_scanf_i+0x1e8>)
 801086c:	2903      	cmp	r1, #3
 801086e:	bf18      	it	ne
 8010870:	461a      	movne	r2, r3
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	9201      	str	r2, [sp, #4]
 8010876:	1e5a      	subs	r2, r3, #1
 8010878:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801087c:	bf88      	it	hi
 801087e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010882:	4627      	mov	r7, r4
 8010884:	bf82      	ittt	hi
 8010886:	eb03 0905 	addhi.w	r9, r3, r5
 801088a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801088e:	60a3      	strhi	r3, [r4, #8]
 8010890:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010894:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010898:	bf98      	it	ls
 801089a:	f04f 0900 	movls.w	r9, #0
 801089e:	6023      	str	r3, [r4, #0]
 80108a0:	463d      	mov	r5, r7
 80108a2:	f04f 0b00 	mov.w	fp, #0
 80108a6:	6831      	ldr	r1, [r6, #0]
 80108a8:	ab03      	add	r3, sp, #12
 80108aa:	7809      	ldrb	r1, [r1, #0]
 80108ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80108b0:	2202      	movs	r2, #2
 80108b2:	f7ef fca5 	bl	8000200 <memchr>
 80108b6:	b328      	cbz	r0, 8010904 <_scanf_i+0xb8>
 80108b8:	f1bb 0f01 	cmp.w	fp, #1
 80108bc:	d159      	bne.n	8010972 <_scanf_i+0x126>
 80108be:	6862      	ldr	r2, [r4, #4]
 80108c0:	b92a      	cbnz	r2, 80108ce <_scanf_i+0x82>
 80108c2:	6822      	ldr	r2, [r4, #0]
 80108c4:	2308      	movs	r3, #8
 80108c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108ca:	6063      	str	r3, [r4, #4]
 80108cc:	6022      	str	r2, [r4, #0]
 80108ce:	6822      	ldr	r2, [r4, #0]
 80108d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80108d4:	6022      	str	r2, [r4, #0]
 80108d6:	68a2      	ldr	r2, [r4, #8]
 80108d8:	1e51      	subs	r1, r2, #1
 80108da:	60a1      	str	r1, [r4, #8]
 80108dc:	b192      	cbz	r2, 8010904 <_scanf_i+0xb8>
 80108de:	6832      	ldr	r2, [r6, #0]
 80108e0:	1c51      	adds	r1, r2, #1
 80108e2:	6031      	str	r1, [r6, #0]
 80108e4:	7812      	ldrb	r2, [r2, #0]
 80108e6:	f805 2b01 	strb.w	r2, [r5], #1
 80108ea:	6872      	ldr	r2, [r6, #4]
 80108ec:	3a01      	subs	r2, #1
 80108ee:	2a00      	cmp	r2, #0
 80108f0:	6072      	str	r2, [r6, #4]
 80108f2:	dc07      	bgt.n	8010904 <_scanf_i+0xb8>
 80108f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80108f8:	4631      	mov	r1, r6
 80108fa:	4650      	mov	r0, sl
 80108fc:	4790      	blx	r2
 80108fe:	2800      	cmp	r0, #0
 8010900:	f040 8085 	bne.w	8010a0e <_scanf_i+0x1c2>
 8010904:	f10b 0b01 	add.w	fp, fp, #1
 8010908:	f1bb 0f03 	cmp.w	fp, #3
 801090c:	d1cb      	bne.n	80108a6 <_scanf_i+0x5a>
 801090e:	6863      	ldr	r3, [r4, #4]
 8010910:	b90b      	cbnz	r3, 8010916 <_scanf_i+0xca>
 8010912:	230a      	movs	r3, #10
 8010914:	6063      	str	r3, [r4, #4]
 8010916:	6863      	ldr	r3, [r4, #4]
 8010918:	4947      	ldr	r1, [pc, #284]	; (8010a38 <_scanf_i+0x1ec>)
 801091a:	6960      	ldr	r0, [r4, #20]
 801091c:	1ac9      	subs	r1, r1, r3
 801091e:	f000 f89f 	bl	8010a60 <__sccl>
 8010922:	f04f 0b00 	mov.w	fp, #0
 8010926:	68a3      	ldr	r3, [r4, #8]
 8010928:	6822      	ldr	r2, [r4, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d03d      	beq.n	80109aa <_scanf_i+0x15e>
 801092e:	6831      	ldr	r1, [r6, #0]
 8010930:	6960      	ldr	r0, [r4, #20]
 8010932:	f891 c000 	ldrb.w	ip, [r1]
 8010936:	f810 000c 	ldrb.w	r0, [r0, ip]
 801093a:	2800      	cmp	r0, #0
 801093c:	d035      	beq.n	80109aa <_scanf_i+0x15e>
 801093e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010942:	d124      	bne.n	801098e <_scanf_i+0x142>
 8010944:	0510      	lsls	r0, r2, #20
 8010946:	d522      	bpl.n	801098e <_scanf_i+0x142>
 8010948:	f10b 0b01 	add.w	fp, fp, #1
 801094c:	f1b9 0f00 	cmp.w	r9, #0
 8010950:	d003      	beq.n	801095a <_scanf_i+0x10e>
 8010952:	3301      	adds	r3, #1
 8010954:	f109 39ff 	add.w	r9, r9, #4294967295
 8010958:	60a3      	str	r3, [r4, #8]
 801095a:	6873      	ldr	r3, [r6, #4]
 801095c:	3b01      	subs	r3, #1
 801095e:	2b00      	cmp	r3, #0
 8010960:	6073      	str	r3, [r6, #4]
 8010962:	dd1b      	ble.n	801099c <_scanf_i+0x150>
 8010964:	6833      	ldr	r3, [r6, #0]
 8010966:	3301      	adds	r3, #1
 8010968:	6033      	str	r3, [r6, #0]
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	3b01      	subs	r3, #1
 801096e:	60a3      	str	r3, [r4, #8]
 8010970:	e7d9      	b.n	8010926 <_scanf_i+0xda>
 8010972:	f1bb 0f02 	cmp.w	fp, #2
 8010976:	d1ae      	bne.n	80108d6 <_scanf_i+0x8a>
 8010978:	6822      	ldr	r2, [r4, #0]
 801097a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801097e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010982:	d1bf      	bne.n	8010904 <_scanf_i+0xb8>
 8010984:	2310      	movs	r3, #16
 8010986:	6063      	str	r3, [r4, #4]
 8010988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801098c:	e7a2      	b.n	80108d4 <_scanf_i+0x88>
 801098e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010992:	6022      	str	r2, [r4, #0]
 8010994:	780b      	ldrb	r3, [r1, #0]
 8010996:	f805 3b01 	strb.w	r3, [r5], #1
 801099a:	e7de      	b.n	801095a <_scanf_i+0x10e>
 801099c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80109a0:	4631      	mov	r1, r6
 80109a2:	4650      	mov	r0, sl
 80109a4:	4798      	blx	r3
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d0df      	beq.n	801096a <_scanf_i+0x11e>
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	05db      	lsls	r3, r3, #23
 80109ae:	d50d      	bpl.n	80109cc <_scanf_i+0x180>
 80109b0:	42bd      	cmp	r5, r7
 80109b2:	d909      	bls.n	80109c8 <_scanf_i+0x17c>
 80109b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80109b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109bc:	4632      	mov	r2, r6
 80109be:	4650      	mov	r0, sl
 80109c0:	4798      	blx	r3
 80109c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80109c6:	464d      	mov	r5, r9
 80109c8:	42bd      	cmp	r5, r7
 80109ca:	d02d      	beq.n	8010a28 <_scanf_i+0x1dc>
 80109cc:	6822      	ldr	r2, [r4, #0]
 80109ce:	f012 0210 	ands.w	r2, r2, #16
 80109d2:	d113      	bne.n	80109fc <_scanf_i+0x1b0>
 80109d4:	702a      	strb	r2, [r5, #0]
 80109d6:	6863      	ldr	r3, [r4, #4]
 80109d8:	9e01      	ldr	r6, [sp, #4]
 80109da:	4639      	mov	r1, r7
 80109dc:	4650      	mov	r0, sl
 80109de:	47b0      	blx	r6
 80109e0:	6821      	ldr	r1, [r4, #0]
 80109e2:	f8d8 3000 	ldr.w	r3, [r8]
 80109e6:	f011 0f20 	tst.w	r1, #32
 80109ea:	d013      	beq.n	8010a14 <_scanf_i+0x1c8>
 80109ec:	1d1a      	adds	r2, r3, #4
 80109ee:	f8c8 2000 	str.w	r2, [r8]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	6018      	str	r0, [r3, #0]
 80109f6:	68e3      	ldr	r3, [r4, #12]
 80109f8:	3301      	adds	r3, #1
 80109fa:	60e3      	str	r3, [r4, #12]
 80109fc:	1bed      	subs	r5, r5, r7
 80109fe:	44ab      	add	fp, r5
 8010a00:	6925      	ldr	r5, [r4, #16]
 8010a02:	445d      	add	r5, fp
 8010a04:	6125      	str	r5, [r4, #16]
 8010a06:	2000      	movs	r0, #0
 8010a08:	b007      	add	sp, #28
 8010a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a0e:	f04f 0b00 	mov.w	fp, #0
 8010a12:	e7ca      	b.n	80109aa <_scanf_i+0x15e>
 8010a14:	1d1a      	adds	r2, r3, #4
 8010a16:	f8c8 2000 	str.w	r2, [r8]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f011 0f01 	tst.w	r1, #1
 8010a20:	bf14      	ite	ne
 8010a22:	8018      	strhne	r0, [r3, #0]
 8010a24:	6018      	streq	r0, [r3, #0]
 8010a26:	e7e6      	b.n	80109f6 <_scanf_i+0x1aa>
 8010a28:	2001      	movs	r0, #1
 8010a2a:	e7ed      	b.n	8010a08 <_scanf_i+0x1bc>
 8010a2c:	08013ff8 	.word	0x08013ff8
 8010a30:	0800e0c9 	.word	0x0800e0c9
 8010a34:	08010cfd 	.word	0x08010cfd
 8010a38:	08039c25 	.word	0x08039c25

08010a3c <_read_r>:
 8010a3c:	b538      	push	{r3, r4, r5, lr}
 8010a3e:	4d07      	ldr	r5, [pc, #28]	; (8010a5c <_read_r+0x20>)
 8010a40:	4604      	mov	r4, r0
 8010a42:	4608      	mov	r0, r1
 8010a44:	4611      	mov	r1, r2
 8010a46:	2200      	movs	r2, #0
 8010a48:	602a      	str	r2, [r5, #0]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	f002 fe56 	bl	80136fc <_read>
 8010a50:	1c43      	adds	r3, r0, #1
 8010a52:	d102      	bne.n	8010a5a <_read_r+0x1e>
 8010a54:	682b      	ldr	r3, [r5, #0]
 8010a56:	b103      	cbz	r3, 8010a5a <_read_r+0x1e>
 8010a58:	6023      	str	r3, [r4, #0]
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	20003aac 	.word	0x20003aac

08010a60 <__sccl>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	780b      	ldrb	r3, [r1, #0]
 8010a64:	4604      	mov	r4, r0
 8010a66:	2b5e      	cmp	r3, #94	; 0x5e
 8010a68:	bf0b      	itete	eq
 8010a6a:	784b      	ldrbeq	r3, [r1, #1]
 8010a6c:	1c48      	addne	r0, r1, #1
 8010a6e:	1c88      	addeq	r0, r1, #2
 8010a70:	2200      	movne	r2, #0
 8010a72:	bf08      	it	eq
 8010a74:	2201      	moveq	r2, #1
 8010a76:	1e61      	subs	r1, r4, #1
 8010a78:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010a7c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010a80:	42a9      	cmp	r1, r5
 8010a82:	d1fb      	bne.n	8010a7c <__sccl+0x1c>
 8010a84:	b90b      	cbnz	r3, 8010a8a <__sccl+0x2a>
 8010a86:	3801      	subs	r0, #1
 8010a88:	bd70      	pop	{r4, r5, r6, pc}
 8010a8a:	f082 0201 	eor.w	r2, r2, #1
 8010a8e:	54e2      	strb	r2, [r4, r3]
 8010a90:	4605      	mov	r5, r0
 8010a92:	4628      	mov	r0, r5
 8010a94:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010a98:	292d      	cmp	r1, #45	; 0x2d
 8010a9a:	d006      	beq.n	8010aaa <__sccl+0x4a>
 8010a9c:	295d      	cmp	r1, #93	; 0x5d
 8010a9e:	d0f3      	beq.n	8010a88 <__sccl+0x28>
 8010aa0:	b909      	cbnz	r1, 8010aa6 <__sccl+0x46>
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	e7f0      	b.n	8010a88 <__sccl+0x28>
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	e7f1      	b.n	8010a8e <__sccl+0x2e>
 8010aaa:	786e      	ldrb	r6, [r5, #1]
 8010aac:	2e5d      	cmp	r6, #93	; 0x5d
 8010aae:	d0fa      	beq.n	8010aa6 <__sccl+0x46>
 8010ab0:	42b3      	cmp	r3, r6
 8010ab2:	dcf8      	bgt.n	8010aa6 <__sccl+0x46>
 8010ab4:	3502      	adds	r5, #2
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	3101      	adds	r1, #1
 8010aba:	428e      	cmp	r6, r1
 8010abc:	5462      	strb	r2, [r4, r1]
 8010abe:	dcfb      	bgt.n	8010ab8 <__sccl+0x58>
 8010ac0:	1af1      	subs	r1, r6, r3
 8010ac2:	3901      	subs	r1, #1
 8010ac4:	1c58      	adds	r0, r3, #1
 8010ac6:	42b3      	cmp	r3, r6
 8010ac8:	bfa8      	it	ge
 8010aca:	2100      	movge	r1, #0
 8010acc:	1843      	adds	r3, r0, r1
 8010ace:	e7e0      	b.n	8010a92 <__sccl+0x32>

08010ad0 <_raise_r>:
 8010ad0:	291f      	cmp	r1, #31
 8010ad2:	b538      	push	{r3, r4, r5, lr}
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	d904      	bls.n	8010ae4 <_raise_r+0x14>
 8010ada:	2316      	movs	r3, #22
 8010adc:	6003      	str	r3, [r0, #0]
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}
 8010ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ae6:	b112      	cbz	r2, 8010aee <_raise_r+0x1e>
 8010ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aec:	b94b      	cbnz	r3, 8010b02 <_raise_r+0x32>
 8010aee:	4620      	mov	r0, r4
 8010af0:	f000 f830 	bl	8010b54 <_getpid_r>
 8010af4:	462a      	mov	r2, r5
 8010af6:	4601      	mov	r1, r0
 8010af8:	4620      	mov	r0, r4
 8010afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010afe:	f000 b817 	b.w	8010b30 <_kill_r>
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d00a      	beq.n	8010b1c <_raise_r+0x4c>
 8010b06:	1c59      	adds	r1, r3, #1
 8010b08:	d103      	bne.n	8010b12 <_raise_r+0x42>
 8010b0a:	2316      	movs	r3, #22
 8010b0c:	6003      	str	r3, [r0, #0]
 8010b0e:	2001      	movs	r0, #1
 8010b10:	e7e7      	b.n	8010ae2 <_raise_r+0x12>
 8010b12:	2400      	movs	r4, #0
 8010b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b18:	4628      	mov	r0, r5
 8010b1a:	4798      	blx	r3
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	e7e0      	b.n	8010ae2 <_raise_r+0x12>

08010b20 <raise>:
 8010b20:	4b02      	ldr	r3, [pc, #8]	; (8010b2c <raise+0xc>)
 8010b22:	4601      	mov	r1, r0
 8010b24:	6818      	ldr	r0, [r3, #0]
 8010b26:	f7ff bfd3 	b.w	8010ad0 <_raise_r>
 8010b2a:	bf00      	nop
 8010b2c:	200002c0 	.word	0x200002c0

08010b30 <_kill_r>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	4d07      	ldr	r5, [pc, #28]	; (8010b50 <_kill_r+0x20>)
 8010b34:	2300      	movs	r3, #0
 8010b36:	4604      	mov	r4, r0
 8010b38:	4608      	mov	r0, r1
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	f002 fdcd 	bl	80136dc <_kill>
 8010b42:	1c43      	adds	r3, r0, #1
 8010b44:	d102      	bne.n	8010b4c <_kill_r+0x1c>
 8010b46:	682b      	ldr	r3, [r5, #0]
 8010b48:	b103      	cbz	r3, 8010b4c <_kill_r+0x1c>
 8010b4a:	6023      	str	r3, [r4, #0]
 8010b4c:	bd38      	pop	{r3, r4, r5, pc}
 8010b4e:	bf00      	nop
 8010b50:	20003aac 	.word	0x20003aac

08010b54 <_getpid_r>:
 8010b54:	f002 bdb2 	b.w	80136bc <_getpid>

08010b58 <sniprintf>:
 8010b58:	b40c      	push	{r2, r3}
 8010b5a:	b530      	push	{r4, r5, lr}
 8010b5c:	4b17      	ldr	r3, [pc, #92]	; (8010bbc <sniprintf+0x64>)
 8010b5e:	1e0c      	subs	r4, r1, #0
 8010b60:	681d      	ldr	r5, [r3, #0]
 8010b62:	b09d      	sub	sp, #116	; 0x74
 8010b64:	da08      	bge.n	8010b78 <sniprintf+0x20>
 8010b66:	238b      	movs	r3, #139	; 0x8b
 8010b68:	602b      	str	r3, [r5, #0]
 8010b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b6e:	b01d      	add	sp, #116	; 0x74
 8010b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b74:	b002      	add	sp, #8
 8010b76:	4770      	bx	lr
 8010b78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010b7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010b80:	bf14      	ite	ne
 8010b82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010b86:	4623      	moveq	r3, r4
 8010b88:	9304      	str	r3, [sp, #16]
 8010b8a:	9307      	str	r3, [sp, #28]
 8010b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b90:	9002      	str	r0, [sp, #8]
 8010b92:	9006      	str	r0, [sp, #24]
 8010b94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010b98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010b9a:	ab21      	add	r3, sp, #132	; 0x84
 8010b9c:	a902      	add	r1, sp, #8
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	f7ff fb27 	bl	80101f4 <_svfiprintf_r>
 8010ba6:	1c43      	adds	r3, r0, #1
 8010ba8:	bfbc      	itt	lt
 8010baa:	238b      	movlt	r3, #139	; 0x8b
 8010bac:	602b      	strlt	r3, [r5, #0]
 8010bae:	2c00      	cmp	r4, #0
 8010bb0:	d0dd      	beq.n	8010b6e <sniprintf+0x16>
 8010bb2:	9b02      	ldr	r3, [sp, #8]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	701a      	strb	r2, [r3, #0]
 8010bb8:	e7d9      	b.n	8010b6e <sniprintf+0x16>
 8010bba:	bf00      	nop
 8010bbc:	200002c0 	.word	0x200002c0

08010bc0 <strcpy>:
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bc6:	f803 2b01 	strb.w	r2, [r3], #1
 8010bca:	2a00      	cmp	r2, #0
 8010bcc:	d1f9      	bne.n	8010bc2 <strcpy+0x2>
 8010bce:	4770      	bx	lr

08010bd0 <strncmp>:
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	b17a      	cbz	r2, 8010bf4 <strncmp+0x24>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	3901      	subs	r1, #1
 8010bd8:	1884      	adds	r4, r0, r2
 8010bda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010bde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010be2:	4290      	cmp	r0, r2
 8010be4:	d101      	bne.n	8010bea <strncmp+0x1a>
 8010be6:	42a3      	cmp	r3, r4
 8010be8:	d101      	bne.n	8010bee <strncmp+0x1e>
 8010bea:	1a80      	subs	r0, r0, r2
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d1f3      	bne.n	8010bda <strncmp+0xa>
 8010bf2:	e7fa      	b.n	8010bea <strncmp+0x1a>
 8010bf4:	4610      	mov	r0, r2
 8010bf6:	e7f9      	b.n	8010bec <strncmp+0x1c>

08010bf8 <_strtol_l.constprop.0>:
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bfe:	d001      	beq.n	8010c04 <_strtol_l.constprop.0+0xc>
 8010c00:	2b24      	cmp	r3, #36	; 0x24
 8010c02:	d906      	bls.n	8010c12 <_strtol_l.constprop.0+0x1a>
 8010c04:	f000 f8c2 	bl	8010d8c <__errno>
 8010c08:	2316      	movs	r3, #22
 8010c0a:	6003      	str	r3, [r0, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010cf8 <_strtol_l.constprop.0+0x100>
 8010c16:	460d      	mov	r5, r1
 8010c18:	462e      	mov	r6, r5
 8010c1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010c22:	f017 0708 	ands.w	r7, r7, #8
 8010c26:	d1f7      	bne.n	8010c18 <_strtol_l.constprop.0+0x20>
 8010c28:	2c2d      	cmp	r4, #45	; 0x2d
 8010c2a:	d132      	bne.n	8010c92 <_strtol_l.constprop.0+0x9a>
 8010c2c:	782c      	ldrb	r4, [r5, #0]
 8010c2e:	2701      	movs	r7, #1
 8010c30:	1cb5      	adds	r5, r6, #2
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d05b      	beq.n	8010cee <_strtol_l.constprop.0+0xf6>
 8010c36:	2b10      	cmp	r3, #16
 8010c38:	d109      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010c3a:	2c30      	cmp	r4, #48	; 0x30
 8010c3c:	d107      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010c3e:	782c      	ldrb	r4, [r5, #0]
 8010c40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010c44:	2c58      	cmp	r4, #88	; 0x58
 8010c46:	d14d      	bne.n	8010ce4 <_strtol_l.constprop.0+0xec>
 8010c48:	786c      	ldrb	r4, [r5, #1]
 8010c4a:	2310      	movs	r3, #16
 8010c4c:	3502      	adds	r5, #2
 8010c4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010c52:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c56:	f04f 0c00 	mov.w	ip, #0
 8010c5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010c5e:	4666      	mov	r6, ip
 8010c60:	fb03 8a19 	mls	sl, r3, r9, r8
 8010c64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010c68:	f1be 0f09 	cmp.w	lr, #9
 8010c6c:	d816      	bhi.n	8010c9c <_strtol_l.constprop.0+0xa4>
 8010c6e:	4674      	mov	r4, lr
 8010c70:	42a3      	cmp	r3, r4
 8010c72:	dd24      	ble.n	8010cbe <_strtol_l.constprop.0+0xc6>
 8010c74:	f1bc 0f00 	cmp.w	ip, #0
 8010c78:	db1e      	blt.n	8010cb8 <_strtol_l.constprop.0+0xc0>
 8010c7a:	45b1      	cmp	r9, r6
 8010c7c:	d31c      	bcc.n	8010cb8 <_strtol_l.constprop.0+0xc0>
 8010c7e:	d101      	bne.n	8010c84 <_strtol_l.constprop.0+0x8c>
 8010c80:	45a2      	cmp	sl, r4
 8010c82:	db19      	blt.n	8010cb8 <_strtol_l.constprop.0+0xc0>
 8010c84:	fb06 4603 	mla	r6, r6, r3, r4
 8010c88:	f04f 0c01 	mov.w	ip, #1
 8010c8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c90:	e7e8      	b.n	8010c64 <_strtol_l.constprop.0+0x6c>
 8010c92:	2c2b      	cmp	r4, #43	; 0x2b
 8010c94:	bf04      	itt	eq
 8010c96:	782c      	ldrbeq	r4, [r5, #0]
 8010c98:	1cb5      	addeq	r5, r6, #2
 8010c9a:	e7ca      	b.n	8010c32 <_strtol_l.constprop.0+0x3a>
 8010c9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010ca0:	f1be 0f19 	cmp.w	lr, #25
 8010ca4:	d801      	bhi.n	8010caa <_strtol_l.constprop.0+0xb2>
 8010ca6:	3c37      	subs	r4, #55	; 0x37
 8010ca8:	e7e2      	b.n	8010c70 <_strtol_l.constprop.0+0x78>
 8010caa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010cae:	f1be 0f19 	cmp.w	lr, #25
 8010cb2:	d804      	bhi.n	8010cbe <_strtol_l.constprop.0+0xc6>
 8010cb4:	3c57      	subs	r4, #87	; 0x57
 8010cb6:	e7db      	b.n	8010c70 <_strtol_l.constprop.0+0x78>
 8010cb8:	f04f 3cff 	mov.w	ip, #4294967295
 8010cbc:	e7e6      	b.n	8010c8c <_strtol_l.constprop.0+0x94>
 8010cbe:	f1bc 0f00 	cmp.w	ip, #0
 8010cc2:	da05      	bge.n	8010cd0 <_strtol_l.constprop.0+0xd8>
 8010cc4:	2322      	movs	r3, #34	; 0x22
 8010cc6:	6003      	str	r3, [r0, #0]
 8010cc8:	4646      	mov	r6, r8
 8010cca:	b942      	cbnz	r2, 8010cde <_strtol_l.constprop.0+0xe6>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	e79e      	b.n	8010c0e <_strtol_l.constprop.0+0x16>
 8010cd0:	b107      	cbz	r7, 8010cd4 <_strtol_l.constprop.0+0xdc>
 8010cd2:	4276      	negs	r6, r6
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	d0f9      	beq.n	8010ccc <_strtol_l.constprop.0+0xd4>
 8010cd8:	f1bc 0f00 	cmp.w	ip, #0
 8010cdc:	d000      	beq.n	8010ce0 <_strtol_l.constprop.0+0xe8>
 8010cde:	1e69      	subs	r1, r5, #1
 8010ce0:	6011      	str	r1, [r2, #0]
 8010ce2:	e7f3      	b.n	8010ccc <_strtol_l.constprop.0+0xd4>
 8010ce4:	2430      	movs	r4, #48	; 0x30
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1b1      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cea:	2308      	movs	r3, #8
 8010cec:	e7af      	b.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cee:	2c30      	cmp	r4, #48	; 0x30
 8010cf0:	d0a5      	beq.n	8010c3e <_strtol_l.constprop.0+0x46>
 8010cf2:	230a      	movs	r3, #10
 8010cf4:	e7ab      	b.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cf6:	bf00      	nop
 8010cf8:	08039875 	.word	0x08039875

08010cfc <_strtol_r>:
 8010cfc:	f7ff bf7c 	b.w	8010bf8 <_strtol_l.constprop.0>

08010d00 <__submore>:
 8010d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d04:	460c      	mov	r4, r1
 8010d06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d0c:	4299      	cmp	r1, r3
 8010d0e:	d11d      	bne.n	8010d4c <__submore+0x4c>
 8010d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d14:	f7fb fd3e 	bl	800c794 <_malloc_r>
 8010d18:	b918      	cbnz	r0, 8010d22 <__submore+0x22>
 8010d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d26:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010d32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010d36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010d3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010d42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010d46:	6020      	str	r0, [r4, #0]
 8010d48:	2000      	movs	r0, #0
 8010d4a:	e7e8      	b.n	8010d1e <__submore+0x1e>
 8010d4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010d4e:	0077      	lsls	r7, r6, #1
 8010d50:	463a      	mov	r2, r7
 8010d52:	f7ff f9c5 	bl	80100e0 <_realloc_r>
 8010d56:	4605      	mov	r5, r0
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d0de      	beq.n	8010d1a <__submore+0x1a>
 8010d5c:	eb00 0806 	add.w	r8, r0, r6
 8010d60:	4601      	mov	r1, r0
 8010d62:	4632      	mov	r2, r6
 8010d64:	4640      	mov	r0, r8
 8010d66:	f7fb fa21 	bl	800c1ac <memcpy>
 8010d6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010d6e:	f8c4 8000 	str.w	r8, [r4]
 8010d72:	e7e9      	b.n	8010d48 <__submore+0x48>

08010d74 <__env_lock>:
 8010d74:	4801      	ldr	r0, [pc, #4]	; (8010d7c <__env_lock+0x8>)
 8010d76:	f7fe bd77 	b.w	800f868 <__retarget_lock_acquire_recursive>
 8010d7a:	bf00      	nop
 8010d7c:	20003aa4 	.word	0x20003aa4

08010d80 <__env_unlock>:
 8010d80:	4801      	ldr	r0, [pc, #4]	; (8010d88 <__env_unlock+0x8>)
 8010d82:	f7fe bd73 	b.w	800f86c <__retarget_lock_release_recursive>
 8010d86:	bf00      	nop
 8010d88:	20003aa4 	.word	0x20003aa4

08010d8c <__errno>:
 8010d8c:	4b01      	ldr	r3, [pc, #4]	; (8010d94 <__errno+0x8>)
 8010d8e:	6818      	ldr	r0, [r3, #0]
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	200002c0 	.word	0x200002c0

08010d98 <_fstat_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_fstat_r+0x20>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f002 fc81 	bl	80136ac <_fstat>
 8010daa:	1c43      	adds	r3, r0, #1
 8010dac:	d102      	bne.n	8010db4 <_fstat_r+0x1c>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b103      	cbz	r3, 8010db4 <_fstat_r+0x1c>
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	20003aac 	.word	0x20003aac

08010dbc <_isatty_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d06      	ldr	r5, [pc, #24]	; (8010dd8 <_isatty_r+0x1c>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f002 fc80 	bl	80136cc <_isatty>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_isatty_r+0x1a>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_isatty_r+0x1a>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	20003aac 	.word	0x20003aac

08010ddc <__ascii_mbtowc>:
 8010ddc:	b082      	sub	sp, #8
 8010dde:	b901      	cbnz	r1, 8010de2 <__ascii_mbtowc+0x6>
 8010de0:	a901      	add	r1, sp, #4
 8010de2:	b142      	cbz	r2, 8010df6 <__ascii_mbtowc+0x1a>
 8010de4:	b14b      	cbz	r3, 8010dfa <__ascii_mbtowc+0x1e>
 8010de6:	7813      	ldrb	r3, [r2, #0]
 8010de8:	600b      	str	r3, [r1, #0]
 8010dea:	7812      	ldrb	r2, [r2, #0]
 8010dec:	1e10      	subs	r0, r2, #0
 8010dee:	bf18      	it	ne
 8010df0:	2001      	movne	r0, #1
 8010df2:	b002      	add	sp, #8
 8010df4:	4770      	bx	lr
 8010df6:	4610      	mov	r0, r2
 8010df8:	e7fb      	b.n	8010df2 <__ascii_mbtowc+0x16>
 8010dfa:	f06f 0001 	mvn.w	r0, #1
 8010dfe:	e7f8      	b.n	8010df2 <__ascii_mbtowc+0x16>

08010e00 <_malloc_usable_size_r>:
 8010e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e04:	1f18      	subs	r0, r3, #4
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	bfbc      	itt	lt
 8010e0a:	580b      	ldrlt	r3, [r1, r0]
 8010e0c:	18c0      	addlt	r0, r0, r3
 8010e0e:	4770      	bx	lr

08010e10 <__ascii_wctomb>:
 8010e10:	b149      	cbz	r1, 8010e26 <__ascii_wctomb+0x16>
 8010e12:	2aff      	cmp	r2, #255	; 0xff
 8010e14:	bf85      	ittet	hi
 8010e16:	238a      	movhi	r3, #138	; 0x8a
 8010e18:	6003      	strhi	r3, [r0, #0]
 8010e1a:	700a      	strbls	r2, [r1, #0]
 8010e1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e20:	bf98      	it	ls
 8010e22:	2001      	movls	r0, #1
 8010e24:	4770      	bx	lr
 8010e26:	4608      	mov	r0, r1
 8010e28:	4770      	bx	lr
 8010e2a:	0000      	movs	r0, r0
 8010e2c:	0000      	movs	r0, r0
	...

08010e30 <cos>:
 8010e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e32:	ec53 2b10 	vmov	r2, r3, d0
 8010e36:	4826      	ldr	r0, [pc, #152]	; (8010ed0 <cos+0xa0>)
 8010e38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e3c:	4281      	cmp	r1, r0
 8010e3e:	dc06      	bgt.n	8010e4e <cos+0x1e>
 8010e40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010ec8 <cos+0x98>
 8010e44:	b005      	add	sp, #20
 8010e46:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e4a:	f001 bbf1 	b.w	8012630 <__kernel_cos>
 8010e4e:	4821      	ldr	r0, [pc, #132]	; (8010ed4 <cos+0xa4>)
 8010e50:	4281      	cmp	r1, r0
 8010e52:	dd09      	ble.n	8010e68 <cos+0x38>
 8010e54:	ee10 0a10 	vmov	r0, s0
 8010e58:	4619      	mov	r1, r3
 8010e5a:	f7ef fa2f 	bl	80002bc <__aeabi_dsub>
 8010e5e:	ec41 0b10 	vmov	d0, r0, r1
 8010e62:	b005      	add	sp, #20
 8010e64:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e68:	4668      	mov	r0, sp
 8010e6a:	f001 f921 	bl	80120b0 <__ieee754_rem_pio2>
 8010e6e:	f000 0003 	and.w	r0, r0, #3
 8010e72:	2801      	cmp	r0, #1
 8010e74:	d00b      	beq.n	8010e8e <cos+0x5e>
 8010e76:	2802      	cmp	r0, #2
 8010e78:	d016      	beq.n	8010ea8 <cos+0x78>
 8010e7a:	b9e0      	cbnz	r0, 8010eb6 <cos+0x86>
 8010e7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e80:	ed9d 0b00 	vldr	d0, [sp]
 8010e84:	f001 fbd4 	bl	8012630 <__kernel_cos>
 8010e88:	ec51 0b10 	vmov	r0, r1, d0
 8010e8c:	e7e7      	b.n	8010e5e <cos+0x2e>
 8010e8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e92:	ed9d 0b00 	vldr	d0, [sp]
 8010e96:	f001 ffe3 	bl	8012e60 <__kernel_sin>
 8010e9a:	ec53 2b10 	vmov	r2, r3, d0
 8010e9e:	ee10 0a10 	vmov	r0, s0
 8010ea2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ea6:	e7da      	b.n	8010e5e <cos+0x2e>
 8010ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eac:	ed9d 0b00 	vldr	d0, [sp]
 8010eb0:	f001 fbbe 	bl	8012630 <__kernel_cos>
 8010eb4:	e7f1      	b.n	8010e9a <cos+0x6a>
 8010eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eba:	ed9d 0b00 	vldr	d0, [sp]
 8010ebe:	2001      	movs	r0, #1
 8010ec0:	f001 ffce 	bl	8012e60 <__kernel_sin>
 8010ec4:	e7e0      	b.n	8010e88 <cos+0x58>
 8010ec6:	bf00      	nop
	...
 8010ed0:	3fe921fb 	.word	0x3fe921fb
 8010ed4:	7fefffff 	.word	0x7fefffff

08010ed8 <sin>:
 8010ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eda:	ec53 2b10 	vmov	r2, r3, d0
 8010ede:	4828      	ldr	r0, [pc, #160]	; (8010f80 <sin+0xa8>)
 8010ee0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ee4:	4281      	cmp	r1, r0
 8010ee6:	dc07      	bgt.n	8010ef8 <sin+0x20>
 8010ee8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010f78 <sin+0xa0>
 8010eec:	2000      	movs	r0, #0
 8010eee:	b005      	add	sp, #20
 8010ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ef4:	f001 bfb4 	b.w	8012e60 <__kernel_sin>
 8010ef8:	4822      	ldr	r0, [pc, #136]	; (8010f84 <sin+0xac>)
 8010efa:	4281      	cmp	r1, r0
 8010efc:	dd09      	ble.n	8010f12 <sin+0x3a>
 8010efe:	ee10 0a10 	vmov	r0, s0
 8010f02:	4619      	mov	r1, r3
 8010f04:	f7ef f9da 	bl	80002bc <__aeabi_dsub>
 8010f08:	ec41 0b10 	vmov	d0, r0, r1
 8010f0c:	b005      	add	sp, #20
 8010f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f12:	4668      	mov	r0, sp
 8010f14:	f001 f8cc 	bl	80120b0 <__ieee754_rem_pio2>
 8010f18:	f000 0003 	and.w	r0, r0, #3
 8010f1c:	2801      	cmp	r0, #1
 8010f1e:	d00c      	beq.n	8010f3a <sin+0x62>
 8010f20:	2802      	cmp	r0, #2
 8010f22:	d011      	beq.n	8010f48 <sin+0x70>
 8010f24:	b9f0      	cbnz	r0, 8010f64 <sin+0x8c>
 8010f26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f2a:	ed9d 0b00 	vldr	d0, [sp]
 8010f2e:	2001      	movs	r0, #1
 8010f30:	f001 ff96 	bl	8012e60 <__kernel_sin>
 8010f34:	ec51 0b10 	vmov	r0, r1, d0
 8010f38:	e7e6      	b.n	8010f08 <sin+0x30>
 8010f3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f3e:	ed9d 0b00 	vldr	d0, [sp]
 8010f42:	f001 fb75 	bl	8012630 <__kernel_cos>
 8010f46:	e7f5      	b.n	8010f34 <sin+0x5c>
 8010f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f4c:	ed9d 0b00 	vldr	d0, [sp]
 8010f50:	2001      	movs	r0, #1
 8010f52:	f001 ff85 	bl	8012e60 <__kernel_sin>
 8010f56:	ec53 2b10 	vmov	r2, r3, d0
 8010f5a:	ee10 0a10 	vmov	r0, s0
 8010f5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f62:	e7d1      	b.n	8010f08 <sin+0x30>
 8010f64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f68:	ed9d 0b00 	vldr	d0, [sp]
 8010f6c:	f001 fb60 	bl	8012630 <__kernel_cos>
 8010f70:	e7f1      	b.n	8010f56 <sin+0x7e>
 8010f72:	bf00      	nop
 8010f74:	f3af 8000 	nop.w
	...
 8010f80:	3fe921fb 	.word	0x3fe921fb
 8010f84:	7fefffff 	.word	0x7fefffff

08010f88 <tan>:
 8010f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f8a:	ec53 2b10 	vmov	r2, r3, d0
 8010f8e:	4816      	ldr	r0, [pc, #88]	; (8010fe8 <tan+0x60>)
 8010f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010f94:	4281      	cmp	r1, r0
 8010f96:	dc07      	bgt.n	8010fa8 <tan+0x20>
 8010f98:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010fe0 <tan+0x58>
 8010f9c:	2001      	movs	r0, #1
 8010f9e:	b005      	add	sp, #20
 8010fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fa4:	f002 b81c 	b.w	8012fe0 <__kernel_tan>
 8010fa8:	4810      	ldr	r0, [pc, #64]	; (8010fec <tan+0x64>)
 8010faa:	4281      	cmp	r1, r0
 8010fac:	dd09      	ble.n	8010fc2 <tan+0x3a>
 8010fae:	ee10 0a10 	vmov	r0, s0
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	f7ef f982 	bl	80002bc <__aeabi_dsub>
 8010fb8:	ec41 0b10 	vmov	d0, r0, r1
 8010fbc:	b005      	add	sp, #20
 8010fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fc2:	4668      	mov	r0, sp
 8010fc4:	f001 f874 	bl	80120b0 <__ieee754_rem_pio2>
 8010fc8:	0040      	lsls	r0, r0, #1
 8010fca:	f000 0002 	and.w	r0, r0, #2
 8010fce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fd2:	ed9d 0b00 	vldr	d0, [sp]
 8010fd6:	f1c0 0001 	rsb	r0, r0, #1
 8010fda:	f002 f801 	bl	8012fe0 <__kernel_tan>
 8010fde:	e7ed      	b.n	8010fbc <tan+0x34>
	...
 8010fe8:	3fe921fb 	.word	0x3fe921fb
 8010fec:	7fefffff 	.word	0x7fefffff

08010ff0 <acos>:
 8010ff0:	b538      	push	{r3, r4, r5, lr}
 8010ff2:	ed2d 8b02 	vpush	{d8}
 8010ff6:	ec55 4b10 	vmov	r4, r5, d0
 8010ffa:	f000 f8c9 	bl	8011190 <__ieee754_acos>
 8010ffe:	4622      	mov	r2, r4
 8011000:	462b      	mov	r3, r5
 8011002:	4620      	mov	r0, r4
 8011004:	4629      	mov	r1, r5
 8011006:	eeb0 8a40 	vmov.f32	s16, s0
 801100a:	eef0 8a60 	vmov.f32	s17, s1
 801100e:	f7ef fda7 	bl	8000b60 <__aeabi_dcmpun>
 8011012:	b9a8      	cbnz	r0, 8011040 <acos+0x50>
 8011014:	ec45 4b10 	vmov	d0, r4, r5
 8011018:	f002 fa1c 	bl	8013454 <fabs>
 801101c:	4b0c      	ldr	r3, [pc, #48]	; (8011050 <acos+0x60>)
 801101e:	ec51 0b10 	vmov	r0, r1, d0
 8011022:	2200      	movs	r2, #0
 8011024:	f7ef fd92 	bl	8000b4c <__aeabi_dcmpgt>
 8011028:	b150      	cbz	r0, 8011040 <acos+0x50>
 801102a:	f7ff feaf 	bl	8010d8c <__errno>
 801102e:	ecbd 8b02 	vpop	{d8}
 8011032:	2321      	movs	r3, #33	; 0x21
 8011034:	6003      	str	r3, [r0, #0]
 8011036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801103a:	4806      	ldr	r0, [pc, #24]	; (8011054 <acos+0x64>)
 801103c:	f002 baa0 	b.w	8013580 <nan>
 8011040:	eeb0 0a48 	vmov.f32	s0, s16
 8011044:	eef0 0a68 	vmov.f32	s1, s17
 8011048:	ecbd 8b02 	vpop	{d8}
 801104c:	bd38      	pop	{r3, r4, r5, pc}
 801104e:	bf00      	nop
 8011050:	3ff00000 	.word	0x3ff00000
 8011054:	0803949a 	.word	0x0803949a

08011058 <pow>:
 8011058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105a:	ed2d 8b02 	vpush	{d8}
 801105e:	eeb0 8a40 	vmov.f32	s16, s0
 8011062:	eef0 8a60 	vmov.f32	s17, s1
 8011066:	ec55 4b11 	vmov	r4, r5, d1
 801106a:	f000 faf1 	bl	8011650 <__ieee754_pow>
 801106e:	4622      	mov	r2, r4
 8011070:	462b      	mov	r3, r5
 8011072:	4620      	mov	r0, r4
 8011074:	4629      	mov	r1, r5
 8011076:	ec57 6b10 	vmov	r6, r7, d0
 801107a:	f7ef fd71 	bl	8000b60 <__aeabi_dcmpun>
 801107e:	2800      	cmp	r0, #0
 8011080:	d13b      	bne.n	80110fa <pow+0xa2>
 8011082:	ec51 0b18 	vmov	r0, r1, d8
 8011086:	2200      	movs	r2, #0
 8011088:	2300      	movs	r3, #0
 801108a:	f7ef fd37 	bl	8000afc <__aeabi_dcmpeq>
 801108e:	b1b8      	cbz	r0, 80110c0 <pow+0x68>
 8011090:	2200      	movs	r2, #0
 8011092:	2300      	movs	r3, #0
 8011094:	4620      	mov	r0, r4
 8011096:	4629      	mov	r1, r5
 8011098:	f7ef fd30 	bl	8000afc <__aeabi_dcmpeq>
 801109c:	2800      	cmp	r0, #0
 801109e:	d146      	bne.n	801112e <pow+0xd6>
 80110a0:	ec45 4b10 	vmov	d0, r4, r5
 80110a4:	f002 f9df 	bl	8013466 <finite>
 80110a8:	b338      	cbz	r0, 80110fa <pow+0xa2>
 80110aa:	2200      	movs	r2, #0
 80110ac:	2300      	movs	r3, #0
 80110ae:	4620      	mov	r0, r4
 80110b0:	4629      	mov	r1, r5
 80110b2:	f7ef fd2d 	bl	8000b10 <__aeabi_dcmplt>
 80110b6:	b300      	cbz	r0, 80110fa <pow+0xa2>
 80110b8:	f7ff fe68 	bl	8010d8c <__errno>
 80110bc:	2322      	movs	r3, #34	; 0x22
 80110be:	e01b      	b.n	80110f8 <pow+0xa0>
 80110c0:	ec47 6b10 	vmov	d0, r6, r7
 80110c4:	f002 f9cf 	bl	8013466 <finite>
 80110c8:	b9e0      	cbnz	r0, 8011104 <pow+0xac>
 80110ca:	eeb0 0a48 	vmov.f32	s0, s16
 80110ce:	eef0 0a68 	vmov.f32	s1, s17
 80110d2:	f002 f9c8 	bl	8013466 <finite>
 80110d6:	b1a8      	cbz	r0, 8011104 <pow+0xac>
 80110d8:	ec45 4b10 	vmov	d0, r4, r5
 80110dc:	f002 f9c3 	bl	8013466 <finite>
 80110e0:	b180      	cbz	r0, 8011104 <pow+0xac>
 80110e2:	4632      	mov	r2, r6
 80110e4:	463b      	mov	r3, r7
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f7ef fd39 	bl	8000b60 <__aeabi_dcmpun>
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d0e2      	beq.n	80110b8 <pow+0x60>
 80110f2:	f7ff fe4b 	bl	8010d8c <__errno>
 80110f6:	2321      	movs	r3, #33	; 0x21
 80110f8:	6003      	str	r3, [r0, #0]
 80110fa:	ecbd 8b02 	vpop	{d8}
 80110fe:	ec47 6b10 	vmov	d0, r6, r7
 8011102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011104:	2200      	movs	r2, #0
 8011106:	2300      	movs	r3, #0
 8011108:	4630      	mov	r0, r6
 801110a:	4639      	mov	r1, r7
 801110c:	f7ef fcf6 	bl	8000afc <__aeabi_dcmpeq>
 8011110:	2800      	cmp	r0, #0
 8011112:	d0f2      	beq.n	80110fa <pow+0xa2>
 8011114:	eeb0 0a48 	vmov.f32	s0, s16
 8011118:	eef0 0a68 	vmov.f32	s1, s17
 801111c:	f002 f9a3 	bl	8013466 <finite>
 8011120:	2800      	cmp	r0, #0
 8011122:	d0ea      	beq.n	80110fa <pow+0xa2>
 8011124:	ec45 4b10 	vmov	d0, r4, r5
 8011128:	f002 f99d 	bl	8013466 <finite>
 801112c:	e7c3      	b.n	80110b6 <pow+0x5e>
 801112e:	4f01      	ldr	r7, [pc, #4]	; (8011134 <pow+0xdc>)
 8011130:	2600      	movs	r6, #0
 8011132:	e7e2      	b.n	80110fa <pow+0xa2>
 8011134:	3ff00000 	.word	0x3ff00000

08011138 <sqrt>:
 8011138:	b538      	push	{r3, r4, r5, lr}
 801113a:	ed2d 8b02 	vpush	{d8}
 801113e:	ec55 4b10 	vmov	r4, r5, d0
 8011142:	f001 f9c1 	bl	80124c8 <__ieee754_sqrt>
 8011146:	4622      	mov	r2, r4
 8011148:	462b      	mov	r3, r5
 801114a:	4620      	mov	r0, r4
 801114c:	4629      	mov	r1, r5
 801114e:	eeb0 8a40 	vmov.f32	s16, s0
 8011152:	eef0 8a60 	vmov.f32	s17, s1
 8011156:	f7ef fd03 	bl	8000b60 <__aeabi_dcmpun>
 801115a:	b990      	cbnz	r0, 8011182 <sqrt+0x4a>
 801115c:	2200      	movs	r2, #0
 801115e:	2300      	movs	r3, #0
 8011160:	4620      	mov	r0, r4
 8011162:	4629      	mov	r1, r5
 8011164:	f7ef fcd4 	bl	8000b10 <__aeabi_dcmplt>
 8011168:	b158      	cbz	r0, 8011182 <sqrt+0x4a>
 801116a:	f7ff fe0f 	bl	8010d8c <__errno>
 801116e:	2321      	movs	r3, #33	; 0x21
 8011170:	6003      	str	r3, [r0, #0]
 8011172:	2200      	movs	r2, #0
 8011174:	2300      	movs	r3, #0
 8011176:	4610      	mov	r0, r2
 8011178:	4619      	mov	r1, r3
 801117a:	f7ef fb81 	bl	8000880 <__aeabi_ddiv>
 801117e:	ec41 0b18 	vmov	d8, r0, r1
 8011182:	eeb0 0a48 	vmov.f32	s0, s16
 8011186:	eef0 0a68 	vmov.f32	s1, s17
 801118a:	ecbd 8b02 	vpop	{d8}
 801118e:	bd38      	pop	{r3, r4, r5, pc}

08011190 <__ieee754_acos>:
 8011190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	ec55 4b10 	vmov	r4, r5, d0
 8011198:	49b7      	ldr	r1, [pc, #732]	; (8011478 <__ieee754_acos+0x2e8>)
 801119a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801119e:	428b      	cmp	r3, r1
 80111a0:	dd1b      	ble.n	80111da <__ieee754_acos+0x4a>
 80111a2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80111a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80111aa:	4323      	orrs	r3, r4
 80111ac:	d106      	bne.n	80111bc <__ieee754_acos+0x2c>
 80111ae:	2d00      	cmp	r5, #0
 80111b0:	f300 8211 	bgt.w	80115d6 <__ieee754_acos+0x446>
 80111b4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011410 <__ieee754_acos+0x280>
 80111b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111bc:	ee10 2a10 	vmov	r2, s0
 80111c0:	462b      	mov	r3, r5
 80111c2:	ee10 0a10 	vmov	r0, s0
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef f878 	bl	80002bc <__aeabi_dsub>
 80111cc:	4602      	mov	r2, r0
 80111ce:	460b      	mov	r3, r1
 80111d0:	f7ef fb56 	bl	8000880 <__aeabi_ddiv>
 80111d4:	ec41 0b10 	vmov	d0, r0, r1
 80111d8:	e7ee      	b.n	80111b8 <__ieee754_acos+0x28>
 80111da:	49a8      	ldr	r1, [pc, #672]	; (801147c <__ieee754_acos+0x2ec>)
 80111dc:	428b      	cmp	r3, r1
 80111de:	f300 8087 	bgt.w	80112f0 <__ieee754_acos+0x160>
 80111e2:	4aa7      	ldr	r2, [pc, #668]	; (8011480 <__ieee754_acos+0x2f0>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	f340 81f9 	ble.w	80115dc <__ieee754_acos+0x44c>
 80111ea:	ee10 2a10 	vmov	r2, s0
 80111ee:	ee10 0a10 	vmov	r0, s0
 80111f2:	462b      	mov	r3, r5
 80111f4:	4629      	mov	r1, r5
 80111f6:	f7ef fa19 	bl	800062c <__aeabi_dmul>
 80111fa:	a387      	add	r3, pc, #540	; (adr r3, 8011418 <__ieee754_acos+0x288>)
 80111fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011200:	4606      	mov	r6, r0
 8011202:	460f      	mov	r7, r1
 8011204:	f7ef fa12 	bl	800062c <__aeabi_dmul>
 8011208:	a385      	add	r3, pc, #532	; (adr r3, 8011420 <__ieee754_acos+0x290>)
 801120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120e:	f7ef f857 	bl	80002c0 <__adddf3>
 8011212:	4632      	mov	r2, r6
 8011214:	463b      	mov	r3, r7
 8011216:	f7ef fa09 	bl	800062c <__aeabi_dmul>
 801121a:	a383      	add	r3, pc, #524	; (adr r3, 8011428 <__ieee754_acos+0x298>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	f7ef f84c 	bl	80002bc <__aeabi_dsub>
 8011224:	4632      	mov	r2, r6
 8011226:	463b      	mov	r3, r7
 8011228:	f7ef fa00 	bl	800062c <__aeabi_dmul>
 801122c:	a380      	add	r3, pc, #512	; (adr r3, 8011430 <__ieee754_acos+0x2a0>)
 801122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011232:	f7ef f845 	bl	80002c0 <__adddf3>
 8011236:	4632      	mov	r2, r6
 8011238:	463b      	mov	r3, r7
 801123a:	f7ef f9f7 	bl	800062c <__aeabi_dmul>
 801123e:	a37e      	add	r3, pc, #504	; (adr r3, 8011438 <__ieee754_acos+0x2a8>)
 8011240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011244:	f7ef f83a 	bl	80002bc <__aeabi_dsub>
 8011248:	4632      	mov	r2, r6
 801124a:	463b      	mov	r3, r7
 801124c:	f7ef f9ee 	bl	800062c <__aeabi_dmul>
 8011250:	a37b      	add	r3, pc, #492	; (adr r3, 8011440 <__ieee754_acos+0x2b0>)
 8011252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011256:	f7ef f833 	bl	80002c0 <__adddf3>
 801125a:	4632      	mov	r2, r6
 801125c:	463b      	mov	r3, r7
 801125e:	f7ef f9e5 	bl	800062c <__aeabi_dmul>
 8011262:	a379      	add	r3, pc, #484	; (adr r3, 8011448 <__ieee754_acos+0x2b8>)
 8011264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011268:	4680      	mov	r8, r0
 801126a:	4689      	mov	r9, r1
 801126c:	4630      	mov	r0, r6
 801126e:	4639      	mov	r1, r7
 8011270:	f7ef f9dc 	bl	800062c <__aeabi_dmul>
 8011274:	a376      	add	r3, pc, #472	; (adr r3, 8011450 <__ieee754_acos+0x2c0>)
 8011276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127a:	f7ef f81f 	bl	80002bc <__aeabi_dsub>
 801127e:	4632      	mov	r2, r6
 8011280:	463b      	mov	r3, r7
 8011282:	f7ef f9d3 	bl	800062c <__aeabi_dmul>
 8011286:	a374      	add	r3, pc, #464	; (adr r3, 8011458 <__ieee754_acos+0x2c8>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	f7ef f818 	bl	80002c0 <__adddf3>
 8011290:	4632      	mov	r2, r6
 8011292:	463b      	mov	r3, r7
 8011294:	f7ef f9ca 	bl	800062c <__aeabi_dmul>
 8011298:	a371      	add	r3, pc, #452	; (adr r3, 8011460 <__ieee754_acos+0x2d0>)
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	f7ef f80d 	bl	80002bc <__aeabi_dsub>
 80112a2:	4632      	mov	r2, r6
 80112a4:	463b      	mov	r3, r7
 80112a6:	f7ef f9c1 	bl	800062c <__aeabi_dmul>
 80112aa:	4b76      	ldr	r3, [pc, #472]	; (8011484 <__ieee754_acos+0x2f4>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	f7ef f807 	bl	80002c0 <__adddf3>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4640      	mov	r0, r8
 80112b8:	4649      	mov	r1, r9
 80112ba:	f7ef fae1 	bl	8000880 <__aeabi_ddiv>
 80112be:	4622      	mov	r2, r4
 80112c0:	462b      	mov	r3, r5
 80112c2:	f7ef f9b3 	bl	800062c <__aeabi_dmul>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	a167      	add	r1, pc, #412	; (adr r1, 8011468 <__ieee754_acos+0x2d8>)
 80112cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112d0:	f7ee fff4 	bl	80002bc <__aeabi_dsub>
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	4620      	mov	r0, r4
 80112da:	4629      	mov	r1, r5
 80112dc:	f7ee ffee 	bl	80002bc <__aeabi_dsub>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	a162      	add	r1, pc, #392	; (adr r1, 8011470 <__ieee754_acos+0x2e0>)
 80112e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112ea:	f7ee ffe7 	bl	80002bc <__aeabi_dsub>
 80112ee:	e771      	b.n	80111d4 <__ieee754_acos+0x44>
 80112f0:	2d00      	cmp	r5, #0
 80112f2:	f280 80cb 	bge.w	801148c <__ieee754_acos+0x2fc>
 80112f6:	ee10 0a10 	vmov	r0, s0
 80112fa:	4b62      	ldr	r3, [pc, #392]	; (8011484 <__ieee754_acos+0x2f4>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	4629      	mov	r1, r5
 8011300:	f7ee ffde 	bl	80002c0 <__adddf3>
 8011304:	4b60      	ldr	r3, [pc, #384]	; (8011488 <__ieee754_acos+0x2f8>)
 8011306:	2200      	movs	r2, #0
 8011308:	f7ef f990 	bl	800062c <__aeabi_dmul>
 801130c:	a342      	add	r3, pc, #264	; (adr r3, 8011418 <__ieee754_acos+0x288>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	4604      	mov	r4, r0
 8011314:	460d      	mov	r5, r1
 8011316:	f7ef f989 	bl	800062c <__aeabi_dmul>
 801131a:	a341      	add	r3, pc, #260	; (adr r3, 8011420 <__ieee754_acos+0x290>)
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	f7ee ffce 	bl	80002c0 <__adddf3>
 8011324:	4622      	mov	r2, r4
 8011326:	462b      	mov	r3, r5
 8011328:	f7ef f980 	bl	800062c <__aeabi_dmul>
 801132c:	a33e      	add	r3, pc, #248	; (adr r3, 8011428 <__ieee754_acos+0x298>)
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	f7ee ffc3 	bl	80002bc <__aeabi_dsub>
 8011336:	4622      	mov	r2, r4
 8011338:	462b      	mov	r3, r5
 801133a:	f7ef f977 	bl	800062c <__aeabi_dmul>
 801133e:	a33c      	add	r3, pc, #240	; (adr r3, 8011430 <__ieee754_acos+0x2a0>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	f7ee ffbc 	bl	80002c0 <__adddf3>
 8011348:	4622      	mov	r2, r4
 801134a:	462b      	mov	r3, r5
 801134c:	f7ef f96e 	bl	800062c <__aeabi_dmul>
 8011350:	a339      	add	r3, pc, #228	; (adr r3, 8011438 <__ieee754_acos+0x2a8>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffb1 	bl	80002bc <__aeabi_dsub>
 801135a:	4622      	mov	r2, r4
 801135c:	462b      	mov	r3, r5
 801135e:	f7ef f965 	bl	800062c <__aeabi_dmul>
 8011362:	a337      	add	r3, pc, #220	; (adr r3, 8011440 <__ieee754_acos+0x2b0>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	f7ee ffaa 	bl	80002c0 <__adddf3>
 801136c:	4622      	mov	r2, r4
 801136e:	462b      	mov	r3, r5
 8011370:	f7ef f95c 	bl	800062c <__aeabi_dmul>
 8011374:	ec45 4b10 	vmov	d0, r4, r5
 8011378:	4680      	mov	r8, r0
 801137a:	4689      	mov	r9, r1
 801137c:	f001 f8a4 	bl	80124c8 <__ieee754_sqrt>
 8011380:	a331      	add	r3, pc, #196	; (adr r3, 8011448 <__ieee754_acos+0x2b8>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	4620      	mov	r0, r4
 8011388:	4629      	mov	r1, r5
 801138a:	ec57 6b10 	vmov	r6, r7, d0
 801138e:	f7ef f94d 	bl	800062c <__aeabi_dmul>
 8011392:	a32f      	add	r3, pc, #188	; (adr r3, 8011450 <__ieee754_acos+0x2c0>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ee ff90 	bl	80002bc <__aeabi_dsub>
 801139c:	4622      	mov	r2, r4
 801139e:	462b      	mov	r3, r5
 80113a0:	f7ef f944 	bl	800062c <__aeabi_dmul>
 80113a4:	a32c      	add	r3, pc, #176	; (adr r3, 8011458 <__ieee754_acos+0x2c8>)
 80113a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113aa:	f7ee ff89 	bl	80002c0 <__adddf3>
 80113ae:	4622      	mov	r2, r4
 80113b0:	462b      	mov	r3, r5
 80113b2:	f7ef f93b 	bl	800062c <__aeabi_dmul>
 80113b6:	a32a      	add	r3, pc, #168	; (adr r3, 8011460 <__ieee754_acos+0x2d0>)
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	f7ee ff7e 	bl	80002bc <__aeabi_dsub>
 80113c0:	4622      	mov	r2, r4
 80113c2:	462b      	mov	r3, r5
 80113c4:	f7ef f932 	bl	800062c <__aeabi_dmul>
 80113c8:	4b2e      	ldr	r3, [pc, #184]	; (8011484 <__ieee754_acos+0x2f4>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	f7ee ff78 	bl	80002c0 <__adddf3>
 80113d0:	4602      	mov	r2, r0
 80113d2:	460b      	mov	r3, r1
 80113d4:	4640      	mov	r0, r8
 80113d6:	4649      	mov	r1, r9
 80113d8:	f7ef fa52 	bl	8000880 <__aeabi_ddiv>
 80113dc:	4632      	mov	r2, r6
 80113de:	463b      	mov	r3, r7
 80113e0:	f7ef f924 	bl	800062c <__aeabi_dmul>
 80113e4:	a320      	add	r3, pc, #128	; (adr r3, 8011468 <__ieee754_acos+0x2d8>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	f7ee ff67 	bl	80002bc <__aeabi_dsub>
 80113ee:	4632      	mov	r2, r6
 80113f0:	463b      	mov	r3, r7
 80113f2:	f7ee ff65 	bl	80002c0 <__adddf3>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	f7ee ff61 	bl	80002c0 <__adddf3>
 80113fe:	4602      	mov	r2, r0
 8011400:	460b      	mov	r3, r1
 8011402:	a103      	add	r1, pc, #12	; (adr r1, 8011410 <__ieee754_acos+0x280>)
 8011404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011408:	e76f      	b.n	80112ea <__ieee754_acos+0x15a>
 801140a:	bf00      	nop
 801140c:	f3af 8000 	nop.w
 8011410:	54442d18 	.word	0x54442d18
 8011414:	400921fb 	.word	0x400921fb
 8011418:	0dfdf709 	.word	0x0dfdf709
 801141c:	3f023de1 	.word	0x3f023de1
 8011420:	7501b288 	.word	0x7501b288
 8011424:	3f49efe0 	.word	0x3f49efe0
 8011428:	b5688f3b 	.word	0xb5688f3b
 801142c:	3fa48228 	.word	0x3fa48228
 8011430:	0e884455 	.word	0x0e884455
 8011434:	3fc9c155 	.word	0x3fc9c155
 8011438:	03eb6f7d 	.word	0x03eb6f7d
 801143c:	3fd4d612 	.word	0x3fd4d612
 8011440:	55555555 	.word	0x55555555
 8011444:	3fc55555 	.word	0x3fc55555
 8011448:	b12e9282 	.word	0xb12e9282
 801144c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011450:	1b8d0159 	.word	0x1b8d0159
 8011454:	3fe6066c 	.word	0x3fe6066c
 8011458:	9c598ac8 	.word	0x9c598ac8
 801145c:	40002ae5 	.word	0x40002ae5
 8011460:	1c8a2d4b 	.word	0x1c8a2d4b
 8011464:	40033a27 	.word	0x40033a27
 8011468:	33145c07 	.word	0x33145c07
 801146c:	3c91a626 	.word	0x3c91a626
 8011470:	54442d18 	.word	0x54442d18
 8011474:	3ff921fb 	.word	0x3ff921fb
 8011478:	3fefffff 	.word	0x3fefffff
 801147c:	3fdfffff 	.word	0x3fdfffff
 8011480:	3c600000 	.word	0x3c600000
 8011484:	3ff00000 	.word	0x3ff00000
 8011488:	3fe00000 	.word	0x3fe00000
 801148c:	ee10 2a10 	vmov	r2, s0
 8011490:	462b      	mov	r3, r5
 8011492:	496d      	ldr	r1, [pc, #436]	; (8011648 <__ieee754_acos+0x4b8>)
 8011494:	2000      	movs	r0, #0
 8011496:	f7ee ff11 	bl	80002bc <__aeabi_dsub>
 801149a:	4b6c      	ldr	r3, [pc, #432]	; (801164c <__ieee754_acos+0x4bc>)
 801149c:	2200      	movs	r2, #0
 801149e:	f7ef f8c5 	bl	800062c <__aeabi_dmul>
 80114a2:	4604      	mov	r4, r0
 80114a4:	460d      	mov	r5, r1
 80114a6:	ec45 4b10 	vmov	d0, r4, r5
 80114aa:	f001 f80d 	bl	80124c8 <__ieee754_sqrt>
 80114ae:	a34e      	add	r3, pc, #312	; (adr r3, 80115e8 <__ieee754_acos+0x458>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	ec59 8b10 	vmov	r8, r9, d0
 80114bc:	f7ef f8b6 	bl	800062c <__aeabi_dmul>
 80114c0:	a34b      	add	r3, pc, #300	; (adr r3, 80115f0 <__ieee754_acos+0x460>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	f7ee fefb 	bl	80002c0 <__adddf3>
 80114ca:	4622      	mov	r2, r4
 80114cc:	462b      	mov	r3, r5
 80114ce:	f7ef f8ad 	bl	800062c <__aeabi_dmul>
 80114d2:	a349      	add	r3, pc, #292	; (adr r3, 80115f8 <__ieee754_acos+0x468>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	f7ee fef0 	bl	80002bc <__aeabi_dsub>
 80114dc:	4622      	mov	r2, r4
 80114de:	462b      	mov	r3, r5
 80114e0:	f7ef f8a4 	bl	800062c <__aeabi_dmul>
 80114e4:	a346      	add	r3, pc, #280	; (adr r3, 8011600 <__ieee754_acos+0x470>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	f7ee fee9 	bl	80002c0 <__adddf3>
 80114ee:	4622      	mov	r2, r4
 80114f0:	462b      	mov	r3, r5
 80114f2:	f7ef f89b 	bl	800062c <__aeabi_dmul>
 80114f6:	a344      	add	r3, pc, #272	; (adr r3, 8011608 <__ieee754_acos+0x478>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	f7ee fede 	bl	80002bc <__aeabi_dsub>
 8011500:	4622      	mov	r2, r4
 8011502:	462b      	mov	r3, r5
 8011504:	f7ef f892 	bl	800062c <__aeabi_dmul>
 8011508:	a341      	add	r3, pc, #260	; (adr r3, 8011610 <__ieee754_acos+0x480>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ee fed7 	bl	80002c0 <__adddf3>
 8011512:	4622      	mov	r2, r4
 8011514:	462b      	mov	r3, r5
 8011516:	f7ef f889 	bl	800062c <__aeabi_dmul>
 801151a:	a33f      	add	r3, pc, #252	; (adr r3, 8011618 <__ieee754_acos+0x488>)
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	4682      	mov	sl, r0
 8011522:	468b      	mov	fp, r1
 8011524:	4620      	mov	r0, r4
 8011526:	4629      	mov	r1, r5
 8011528:	f7ef f880 	bl	800062c <__aeabi_dmul>
 801152c:	a33c      	add	r3, pc, #240	; (adr r3, 8011620 <__ieee754_acos+0x490>)
 801152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011532:	f7ee fec3 	bl	80002bc <__aeabi_dsub>
 8011536:	4622      	mov	r2, r4
 8011538:	462b      	mov	r3, r5
 801153a:	f7ef f877 	bl	800062c <__aeabi_dmul>
 801153e:	a33a      	add	r3, pc, #232	; (adr r3, 8011628 <__ieee754_acos+0x498>)
 8011540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011544:	f7ee febc 	bl	80002c0 <__adddf3>
 8011548:	4622      	mov	r2, r4
 801154a:	462b      	mov	r3, r5
 801154c:	f7ef f86e 	bl	800062c <__aeabi_dmul>
 8011550:	a337      	add	r3, pc, #220	; (adr r3, 8011630 <__ieee754_acos+0x4a0>)
 8011552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011556:	f7ee feb1 	bl	80002bc <__aeabi_dsub>
 801155a:	4622      	mov	r2, r4
 801155c:	462b      	mov	r3, r5
 801155e:	f7ef f865 	bl	800062c <__aeabi_dmul>
 8011562:	4b39      	ldr	r3, [pc, #228]	; (8011648 <__ieee754_acos+0x4b8>)
 8011564:	2200      	movs	r2, #0
 8011566:	f7ee feab 	bl	80002c0 <__adddf3>
 801156a:	4602      	mov	r2, r0
 801156c:	460b      	mov	r3, r1
 801156e:	4650      	mov	r0, sl
 8011570:	4659      	mov	r1, fp
 8011572:	f7ef f985 	bl	8000880 <__aeabi_ddiv>
 8011576:	4642      	mov	r2, r8
 8011578:	464b      	mov	r3, r9
 801157a:	f7ef f857 	bl	800062c <__aeabi_dmul>
 801157e:	2600      	movs	r6, #0
 8011580:	4682      	mov	sl, r0
 8011582:	468b      	mov	fp, r1
 8011584:	4632      	mov	r2, r6
 8011586:	464b      	mov	r3, r9
 8011588:	4630      	mov	r0, r6
 801158a:	4649      	mov	r1, r9
 801158c:	f7ef f84e 	bl	800062c <__aeabi_dmul>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee fe90 	bl	80002bc <__aeabi_dsub>
 801159c:	4632      	mov	r2, r6
 801159e:	4604      	mov	r4, r0
 80115a0:	460d      	mov	r5, r1
 80115a2:	464b      	mov	r3, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	4649      	mov	r1, r9
 80115a8:	f7ee fe8a 	bl	80002c0 <__adddf3>
 80115ac:	4602      	mov	r2, r0
 80115ae:	460b      	mov	r3, r1
 80115b0:	4620      	mov	r0, r4
 80115b2:	4629      	mov	r1, r5
 80115b4:	f7ef f964 	bl	8000880 <__aeabi_ddiv>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	4650      	mov	r0, sl
 80115be:	4659      	mov	r1, fp
 80115c0:	f7ee fe7e 	bl	80002c0 <__adddf3>
 80115c4:	4632      	mov	r2, r6
 80115c6:	464b      	mov	r3, r9
 80115c8:	f7ee fe7a 	bl	80002c0 <__adddf3>
 80115cc:	4602      	mov	r2, r0
 80115ce:	460b      	mov	r3, r1
 80115d0:	f7ee fe76 	bl	80002c0 <__adddf3>
 80115d4:	e5fe      	b.n	80111d4 <__ieee754_acos+0x44>
 80115d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011638 <__ieee754_acos+0x4a8>
 80115da:	e5ed      	b.n	80111b8 <__ieee754_acos+0x28>
 80115dc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011640 <__ieee754_acos+0x4b0>
 80115e0:	e5ea      	b.n	80111b8 <__ieee754_acos+0x28>
 80115e2:	bf00      	nop
 80115e4:	f3af 8000 	nop.w
 80115e8:	0dfdf709 	.word	0x0dfdf709
 80115ec:	3f023de1 	.word	0x3f023de1
 80115f0:	7501b288 	.word	0x7501b288
 80115f4:	3f49efe0 	.word	0x3f49efe0
 80115f8:	b5688f3b 	.word	0xb5688f3b
 80115fc:	3fa48228 	.word	0x3fa48228
 8011600:	0e884455 	.word	0x0e884455
 8011604:	3fc9c155 	.word	0x3fc9c155
 8011608:	03eb6f7d 	.word	0x03eb6f7d
 801160c:	3fd4d612 	.word	0x3fd4d612
 8011610:	55555555 	.word	0x55555555
 8011614:	3fc55555 	.word	0x3fc55555
 8011618:	b12e9282 	.word	0xb12e9282
 801161c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011620:	1b8d0159 	.word	0x1b8d0159
 8011624:	3fe6066c 	.word	0x3fe6066c
 8011628:	9c598ac8 	.word	0x9c598ac8
 801162c:	40002ae5 	.word	0x40002ae5
 8011630:	1c8a2d4b 	.word	0x1c8a2d4b
 8011634:	40033a27 	.word	0x40033a27
	...
 8011640:	54442d18 	.word	0x54442d18
 8011644:	3ff921fb 	.word	0x3ff921fb
 8011648:	3ff00000 	.word	0x3ff00000
 801164c:	3fe00000 	.word	0x3fe00000

08011650 <__ieee754_pow>:
 8011650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011654:	ed2d 8b06 	vpush	{d8-d10}
 8011658:	b089      	sub	sp, #36	; 0x24
 801165a:	ed8d 1b00 	vstr	d1, [sp]
 801165e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011662:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011666:	ea58 0102 	orrs.w	r1, r8, r2
 801166a:	ec57 6b10 	vmov	r6, r7, d0
 801166e:	d115      	bne.n	801169c <__ieee754_pow+0x4c>
 8011670:	19b3      	adds	r3, r6, r6
 8011672:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011676:	4152      	adcs	r2, r2
 8011678:	4299      	cmp	r1, r3
 801167a:	4b89      	ldr	r3, [pc, #548]	; (80118a0 <__ieee754_pow+0x250>)
 801167c:	4193      	sbcs	r3, r2
 801167e:	f080 84d2 	bcs.w	8012026 <__ieee754_pow+0x9d6>
 8011682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011686:	4630      	mov	r0, r6
 8011688:	4639      	mov	r1, r7
 801168a:	f7ee fe19 	bl	80002c0 <__adddf3>
 801168e:	ec41 0b10 	vmov	d0, r0, r1
 8011692:	b009      	add	sp, #36	; 0x24
 8011694:	ecbd 8b06 	vpop	{d8-d10}
 8011698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169c:	4b81      	ldr	r3, [pc, #516]	; (80118a4 <__ieee754_pow+0x254>)
 801169e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80116a2:	429c      	cmp	r4, r3
 80116a4:	ee10 aa10 	vmov	sl, s0
 80116a8:	463d      	mov	r5, r7
 80116aa:	dc06      	bgt.n	80116ba <__ieee754_pow+0x6a>
 80116ac:	d101      	bne.n	80116b2 <__ieee754_pow+0x62>
 80116ae:	2e00      	cmp	r6, #0
 80116b0:	d1e7      	bne.n	8011682 <__ieee754_pow+0x32>
 80116b2:	4598      	cmp	r8, r3
 80116b4:	dc01      	bgt.n	80116ba <__ieee754_pow+0x6a>
 80116b6:	d10f      	bne.n	80116d8 <__ieee754_pow+0x88>
 80116b8:	b172      	cbz	r2, 80116d8 <__ieee754_pow+0x88>
 80116ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80116be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80116c2:	ea55 050a 	orrs.w	r5, r5, sl
 80116c6:	d1dc      	bne.n	8011682 <__ieee754_pow+0x32>
 80116c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80116cc:	18db      	adds	r3, r3, r3
 80116ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80116d2:	4152      	adcs	r2, r2
 80116d4:	429d      	cmp	r5, r3
 80116d6:	e7d0      	b.n	801167a <__ieee754_pow+0x2a>
 80116d8:	2d00      	cmp	r5, #0
 80116da:	da3b      	bge.n	8011754 <__ieee754_pow+0x104>
 80116dc:	4b72      	ldr	r3, [pc, #456]	; (80118a8 <__ieee754_pow+0x258>)
 80116de:	4598      	cmp	r8, r3
 80116e0:	dc51      	bgt.n	8011786 <__ieee754_pow+0x136>
 80116e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80116e6:	4598      	cmp	r8, r3
 80116e8:	f340 84ac 	ble.w	8012044 <__ieee754_pow+0x9f4>
 80116ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80116f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80116f4:	2b14      	cmp	r3, #20
 80116f6:	dd0f      	ble.n	8011718 <__ieee754_pow+0xc8>
 80116f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80116fc:	fa22 f103 	lsr.w	r1, r2, r3
 8011700:	fa01 f303 	lsl.w	r3, r1, r3
 8011704:	4293      	cmp	r3, r2
 8011706:	f040 849d 	bne.w	8012044 <__ieee754_pow+0x9f4>
 801170a:	f001 0101 	and.w	r1, r1, #1
 801170e:	f1c1 0302 	rsb	r3, r1, #2
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	b182      	cbz	r2, 8011738 <__ieee754_pow+0xe8>
 8011716:	e05f      	b.n	80117d8 <__ieee754_pow+0x188>
 8011718:	2a00      	cmp	r2, #0
 801171a:	d15b      	bne.n	80117d4 <__ieee754_pow+0x184>
 801171c:	f1c3 0314 	rsb	r3, r3, #20
 8011720:	fa48 f103 	asr.w	r1, r8, r3
 8011724:	fa01 f303 	lsl.w	r3, r1, r3
 8011728:	4543      	cmp	r3, r8
 801172a:	f040 8488 	bne.w	801203e <__ieee754_pow+0x9ee>
 801172e:	f001 0101 	and.w	r1, r1, #1
 8011732:	f1c1 0302 	rsb	r3, r1, #2
 8011736:	9304      	str	r3, [sp, #16]
 8011738:	4b5c      	ldr	r3, [pc, #368]	; (80118ac <__ieee754_pow+0x25c>)
 801173a:	4598      	cmp	r8, r3
 801173c:	d132      	bne.n	80117a4 <__ieee754_pow+0x154>
 801173e:	f1b9 0f00 	cmp.w	r9, #0
 8011742:	f280 8478 	bge.w	8012036 <__ieee754_pow+0x9e6>
 8011746:	4959      	ldr	r1, [pc, #356]	; (80118ac <__ieee754_pow+0x25c>)
 8011748:	4632      	mov	r2, r6
 801174a:	463b      	mov	r3, r7
 801174c:	2000      	movs	r0, #0
 801174e:	f7ef f897 	bl	8000880 <__aeabi_ddiv>
 8011752:	e79c      	b.n	801168e <__ieee754_pow+0x3e>
 8011754:	2300      	movs	r3, #0
 8011756:	9304      	str	r3, [sp, #16]
 8011758:	2a00      	cmp	r2, #0
 801175a:	d13d      	bne.n	80117d8 <__ieee754_pow+0x188>
 801175c:	4b51      	ldr	r3, [pc, #324]	; (80118a4 <__ieee754_pow+0x254>)
 801175e:	4598      	cmp	r8, r3
 8011760:	d1ea      	bne.n	8011738 <__ieee754_pow+0xe8>
 8011762:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801176a:	ea53 030a 	orrs.w	r3, r3, sl
 801176e:	f000 845a 	beq.w	8012026 <__ieee754_pow+0x9d6>
 8011772:	4b4f      	ldr	r3, [pc, #316]	; (80118b0 <__ieee754_pow+0x260>)
 8011774:	429c      	cmp	r4, r3
 8011776:	dd08      	ble.n	801178a <__ieee754_pow+0x13a>
 8011778:	f1b9 0f00 	cmp.w	r9, #0
 801177c:	f2c0 8457 	blt.w	801202e <__ieee754_pow+0x9de>
 8011780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011784:	e783      	b.n	801168e <__ieee754_pow+0x3e>
 8011786:	2302      	movs	r3, #2
 8011788:	e7e5      	b.n	8011756 <__ieee754_pow+0x106>
 801178a:	f1b9 0f00 	cmp.w	r9, #0
 801178e:	f04f 0000 	mov.w	r0, #0
 8011792:	f04f 0100 	mov.w	r1, #0
 8011796:	f6bf af7a 	bge.w	801168e <__ieee754_pow+0x3e>
 801179a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801179e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80117a2:	e774      	b.n	801168e <__ieee754_pow+0x3e>
 80117a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80117a8:	d106      	bne.n	80117b8 <__ieee754_pow+0x168>
 80117aa:	4632      	mov	r2, r6
 80117ac:	463b      	mov	r3, r7
 80117ae:	4630      	mov	r0, r6
 80117b0:	4639      	mov	r1, r7
 80117b2:	f7ee ff3b 	bl	800062c <__aeabi_dmul>
 80117b6:	e76a      	b.n	801168e <__ieee754_pow+0x3e>
 80117b8:	4b3e      	ldr	r3, [pc, #248]	; (80118b4 <__ieee754_pow+0x264>)
 80117ba:	4599      	cmp	r9, r3
 80117bc:	d10c      	bne.n	80117d8 <__ieee754_pow+0x188>
 80117be:	2d00      	cmp	r5, #0
 80117c0:	db0a      	blt.n	80117d8 <__ieee754_pow+0x188>
 80117c2:	ec47 6b10 	vmov	d0, r6, r7
 80117c6:	b009      	add	sp, #36	; 0x24
 80117c8:	ecbd 8b06 	vpop	{d8-d10}
 80117cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d0:	f000 be7a 	b.w	80124c8 <__ieee754_sqrt>
 80117d4:	2300      	movs	r3, #0
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	ec47 6b10 	vmov	d0, r6, r7
 80117dc:	f001 fe3a 	bl	8013454 <fabs>
 80117e0:	ec51 0b10 	vmov	r0, r1, d0
 80117e4:	f1ba 0f00 	cmp.w	sl, #0
 80117e8:	d129      	bne.n	801183e <__ieee754_pow+0x1ee>
 80117ea:	b124      	cbz	r4, 80117f6 <__ieee754_pow+0x1a6>
 80117ec:	4b2f      	ldr	r3, [pc, #188]	; (80118ac <__ieee754_pow+0x25c>)
 80117ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d123      	bne.n	801183e <__ieee754_pow+0x1ee>
 80117f6:	f1b9 0f00 	cmp.w	r9, #0
 80117fa:	da05      	bge.n	8011808 <__ieee754_pow+0x1b8>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	2000      	movs	r0, #0
 8011802:	492a      	ldr	r1, [pc, #168]	; (80118ac <__ieee754_pow+0x25c>)
 8011804:	f7ef f83c 	bl	8000880 <__aeabi_ddiv>
 8011808:	2d00      	cmp	r5, #0
 801180a:	f6bf af40 	bge.w	801168e <__ieee754_pow+0x3e>
 801180e:	9b04      	ldr	r3, [sp, #16]
 8011810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011818:	4323      	orrs	r3, r4
 801181a:	d108      	bne.n	801182e <__ieee754_pow+0x1de>
 801181c:	4602      	mov	r2, r0
 801181e:	460b      	mov	r3, r1
 8011820:	4610      	mov	r0, r2
 8011822:	4619      	mov	r1, r3
 8011824:	f7ee fd4a 	bl	80002bc <__aeabi_dsub>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	e78f      	b.n	801174e <__ieee754_pow+0xfe>
 801182e:	9b04      	ldr	r3, [sp, #16]
 8011830:	2b01      	cmp	r3, #1
 8011832:	f47f af2c 	bne.w	801168e <__ieee754_pow+0x3e>
 8011836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801183a:	4619      	mov	r1, r3
 801183c:	e727      	b.n	801168e <__ieee754_pow+0x3e>
 801183e:	0feb      	lsrs	r3, r5, #31
 8011840:	3b01      	subs	r3, #1
 8011842:	9306      	str	r3, [sp, #24]
 8011844:	9a06      	ldr	r2, [sp, #24]
 8011846:	9b04      	ldr	r3, [sp, #16]
 8011848:	4313      	orrs	r3, r2
 801184a:	d102      	bne.n	8011852 <__ieee754_pow+0x202>
 801184c:	4632      	mov	r2, r6
 801184e:	463b      	mov	r3, r7
 8011850:	e7e6      	b.n	8011820 <__ieee754_pow+0x1d0>
 8011852:	4b19      	ldr	r3, [pc, #100]	; (80118b8 <__ieee754_pow+0x268>)
 8011854:	4598      	cmp	r8, r3
 8011856:	f340 80fb 	ble.w	8011a50 <__ieee754_pow+0x400>
 801185a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801185e:	4598      	cmp	r8, r3
 8011860:	4b13      	ldr	r3, [pc, #76]	; (80118b0 <__ieee754_pow+0x260>)
 8011862:	dd0c      	ble.n	801187e <__ieee754_pow+0x22e>
 8011864:	429c      	cmp	r4, r3
 8011866:	dc0f      	bgt.n	8011888 <__ieee754_pow+0x238>
 8011868:	f1b9 0f00 	cmp.w	r9, #0
 801186c:	da0f      	bge.n	801188e <__ieee754_pow+0x23e>
 801186e:	2000      	movs	r0, #0
 8011870:	b009      	add	sp, #36	; 0x24
 8011872:	ecbd 8b06 	vpop	{d8-d10}
 8011876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f001 bde2 	b.w	8013442 <__math_oflow>
 801187e:	429c      	cmp	r4, r3
 8011880:	dbf2      	blt.n	8011868 <__ieee754_pow+0x218>
 8011882:	4b0a      	ldr	r3, [pc, #40]	; (80118ac <__ieee754_pow+0x25c>)
 8011884:	429c      	cmp	r4, r3
 8011886:	dd19      	ble.n	80118bc <__ieee754_pow+0x26c>
 8011888:	f1b9 0f00 	cmp.w	r9, #0
 801188c:	dcef      	bgt.n	801186e <__ieee754_pow+0x21e>
 801188e:	2000      	movs	r0, #0
 8011890:	b009      	add	sp, #36	; 0x24
 8011892:	ecbd 8b06 	vpop	{d8-d10}
 8011896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189a:	f001 bdc9 	b.w	8013430 <__math_uflow>
 801189e:	bf00      	nop
 80118a0:	fff00000 	.word	0xfff00000
 80118a4:	7ff00000 	.word	0x7ff00000
 80118a8:	433fffff 	.word	0x433fffff
 80118ac:	3ff00000 	.word	0x3ff00000
 80118b0:	3fefffff 	.word	0x3fefffff
 80118b4:	3fe00000 	.word	0x3fe00000
 80118b8:	41e00000 	.word	0x41e00000
 80118bc:	4b60      	ldr	r3, [pc, #384]	; (8011a40 <__ieee754_pow+0x3f0>)
 80118be:	2200      	movs	r2, #0
 80118c0:	f7ee fcfc 	bl	80002bc <__aeabi_dsub>
 80118c4:	a354      	add	r3, pc, #336	; (adr r3, 8011a18 <__ieee754_pow+0x3c8>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	4604      	mov	r4, r0
 80118cc:	460d      	mov	r5, r1
 80118ce:	f7ee fead 	bl	800062c <__aeabi_dmul>
 80118d2:	a353      	add	r3, pc, #332	; (adr r3, 8011a20 <__ieee754_pow+0x3d0>)
 80118d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d8:	4606      	mov	r6, r0
 80118da:	460f      	mov	r7, r1
 80118dc:	4620      	mov	r0, r4
 80118de:	4629      	mov	r1, r5
 80118e0:	f7ee fea4 	bl	800062c <__aeabi_dmul>
 80118e4:	4b57      	ldr	r3, [pc, #348]	; (8011a44 <__ieee754_pow+0x3f4>)
 80118e6:	4682      	mov	sl, r0
 80118e8:	468b      	mov	fp, r1
 80118ea:	2200      	movs	r2, #0
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee fe9c 	bl	800062c <__aeabi_dmul>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	a14b      	add	r1, pc, #300	; (adr r1, 8011a28 <__ieee754_pow+0x3d8>)
 80118fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118fe:	f7ee fcdd 	bl	80002bc <__aeabi_dsub>
 8011902:	4622      	mov	r2, r4
 8011904:	462b      	mov	r3, r5
 8011906:	f7ee fe91 	bl	800062c <__aeabi_dmul>
 801190a:	4602      	mov	r2, r0
 801190c:	460b      	mov	r3, r1
 801190e:	2000      	movs	r0, #0
 8011910:	494d      	ldr	r1, [pc, #308]	; (8011a48 <__ieee754_pow+0x3f8>)
 8011912:	f7ee fcd3 	bl	80002bc <__aeabi_dsub>
 8011916:	4622      	mov	r2, r4
 8011918:	4680      	mov	r8, r0
 801191a:	4689      	mov	r9, r1
 801191c:	462b      	mov	r3, r5
 801191e:	4620      	mov	r0, r4
 8011920:	4629      	mov	r1, r5
 8011922:	f7ee fe83 	bl	800062c <__aeabi_dmul>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4640      	mov	r0, r8
 801192c:	4649      	mov	r1, r9
 801192e:	f7ee fe7d 	bl	800062c <__aeabi_dmul>
 8011932:	a33f      	add	r3, pc, #252	; (adr r3, 8011a30 <__ieee754_pow+0x3e0>)
 8011934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011938:	f7ee fe78 	bl	800062c <__aeabi_dmul>
 801193c:	4602      	mov	r2, r0
 801193e:	460b      	mov	r3, r1
 8011940:	4650      	mov	r0, sl
 8011942:	4659      	mov	r1, fp
 8011944:	f7ee fcba 	bl	80002bc <__aeabi_dsub>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	4680      	mov	r8, r0
 801194e:	4689      	mov	r9, r1
 8011950:	4630      	mov	r0, r6
 8011952:	4639      	mov	r1, r7
 8011954:	f7ee fcb4 	bl	80002c0 <__adddf3>
 8011958:	2000      	movs	r0, #0
 801195a:	4632      	mov	r2, r6
 801195c:	463b      	mov	r3, r7
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	f7ee fcab 	bl	80002bc <__aeabi_dsub>
 8011966:	4602      	mov	r2, r0
 8011968:	460b      	mov	r3, r1
 801196a:	4640      	mov	r0, r8
 801196c:	4649      	mov	r1, r9
 801196e:	f7ee fca5 	bl	80002bc <__aeabi_dsub>
 8011972:	9b04      	ldr	r3, [sp, #16]
 8011974:	9a06      	ldr	r2, [sp, #24]
 8011976:	3b01      	subs	r3, #1
 8011978:	4313      	orrs	r3, r2
 801197a:	4682      	mov	sl, r0
 801197c:	468b      	mov	fp, r1
 801197e:	f040 81e7 	bne.w	8011d50 <__ieee754_pow+0x700>
 8011982:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011a38 <__ieee754_pow+0x3e8>
 8011986:	eeb0 8a47 	vmov.f32	s16, s14
 801198a:	eef0 8a67 	vmov.f32	s17, s15
 801198e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011992:	2600      	movs	r6, #0
 8011994:	4632      	mov	r2, r6
 8011996:	463b      	mov	r3, r7
 8011998:	e9dd 0100 	ldrd	r0, r1, [sp]
 801199c:	f7ee fc8e 	bl	80002bc <__aeabi_dsub>
 80119a0:	4622      	mov	r2, r4
 80119a2:	462b      	mov	r3, r5
 80119a4:	f7ee fe42 	bl	800062c <__aeabi_dmul>
 80119a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119ac:	4680      	mov	r8, r0
 80119ae:	4689      	mov	r9, r1
 80119b0:	4650      	mov	r0, sl
 80119b2:	4659      	mov	r1, fp
 80119b4:	f7ee fe3a 	bl	800062c <__aeabi_dmul>
 80119b8:	4602      	mov	r2, r0
 80119ba:	460b      	mov	r3, r1
 80119bc:	4640      	mov	r0, r8
 80119be:	4649      	mov	r1, r9
 80119c0:	f7ee fc7e 	bl	80002c0 <__adddf3>
 80119c4:	4632      	mov	r2, r6
 80119c6:	463b      	mov	r3, r7
 80119c8:	4680      	mov	r8, r0
 80119ca:	4689      	mov	r9, r1
 80119cc:	4620      	mov	r0, r4
 80119ce:	4629      	mov	r1, r5
 80119d0:	f7ee fe2c 	bl	800062c <__aeabi_dmul>
 80119d4:	460b      	mov	r3, r1
 80119d6:	4604      	mov	r4, r0
 80119d8:	460d      	mov	r5, r1
 80119da:	4602      	mov	r2, r0
 80119dc:	4649      	mov	r1, r9
 80119de:	4640      	mov	r0, r8
 80119e0:	f7ee fc6e 	bl	80002c0 <__adddf3>
 80119e4:	4b19      	ldr	r3, [pc, #100]	; (8011a4c <__ieee754_pow+0x3fc>)
 80119e6:	4299      	cmp	r1, r3
 80119e8:	ec45 4b19 	vmov	d9, r4, r5
 80119ec:	4606      	mov	r6, r0
 80119ee:	460f      	mov	r7, r1
 80119f0:	468b      	mov	fp, r1
 80119f2:	f340 82f1 	ble.w	8011fd8 <__ieee754_pow+0x988>
 80119f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80119fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80119fe:	4303      	orrs	r3, r0
 8011a00:	f000 81e4 	beq.w	8011dcc <__ieee754_pow+0x77c>
 8011a04:	ec51 0b18 	vmov	r0, r1, d8
 8011a08:	2200      	movs	r2, #0
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f7ef f880 	bl	8000b10 <__aeabi_dcmplt>
 8011a10:	3800      	subs	r0, #0
 8011a12:	bf18      	it	ne
 8011a14:	2001      	movne	r0, #1
 8011a16:	e72b      	b.n	8011870 <__ieee754_pow+0x220>
 8011a18:	60000000 	.word	0x60000000
 8011a1c:	3ff71547 	.word	0x3ff71547
 8011a20:	f85ddf44 	.word	0xf85ddf44
 8011a24:	3e54ae0b 	.word	0x3e54ae0b
 8011a28:	55555555 	.word	0x55555555
 8011a2c:	3fd55555 	.word	0x3fd55555
 8011a30:	652b82fe 	.word	0x652b82fe
 8011a34:	3ff71547 	.word	0x3ff71547
 8011a38:	00000000 	.word	0x00000000
 8011a3c:	bff00000 	.word	0xbff00000
 8011a40:	3ff00000 	.word	0x3ff00000
 8011a44:	3fd00000 	.word	0x3fd00000
 8011a48:	3fe00000 	.word	0x3fe00000
 8011a4c:	408fffff 	.word	0x408fffff
 8011a50:	4bd5      	ldr	r3, [pc, #852]	; (8011da8 <__ieee754_pow+0x758>)
 8011a52:	402b      	ands	r3, r5
 8011a54:	2200      	movs	r2, #0
 8011a56:	b92b      	cbnz	r3, 8011a64 <__ieee754_pow+0x414>
 8011a58:	4bd4      	ldr	r3, [pc, #848]	; (8011dac <__ieee754_pow+0x75c>)
 8011a5a:	f7ee fde7 	bl	800062c <__aeabi_dmul>
 8011a5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011a62:	460c      	mov	r4, r1
 8011a64:	1523      	asrs	r3, r4, #20
 8011a66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a6a:	4413      	add	r3, r2
 8011a6c:	9305      	str	r3, [sp, #20]
 8011a6e:	4bd0      	ldr	r3, [pc, #832]	; (8011db0 <__ieee754_pow+0x760>)
 8011a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011a74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011a78:	429c      	cmp	r4, r3
 8011a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a7e:	dd08      	ble.n	8011a92 <__ieee754_pow+0x442>
 8011a80:	4bcc      	ldr	r3, [pc, #816]	; (8011db4 <__ieee754_pow+0x764>)
 8011a82:	429c      	cmp	r4, r3
 8011a84:	f340 8162 	ble.w	8011d4c <__ieee754_pow+0x6fc>
 8011a88:	9b05      	ldr	r3, [sp, #20]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	9305      	str	r3, [sp, #20]
 8011a8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a92:	2400      	movs	r4, #0
 8011a94:	00e3      	lsls	r3, r4, #3
 8011a96:	9307      	str	r3, [sp, #28]
 8011a98:	4bc7      	ldr	r3, [pc, #796]	; (8011db8 <__ieee754_pow+0x768>)
 8011a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a9e:	ed93 7b00 	vldr	d7, [r3]
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	ec53 2b17 	vmov	r2, r3, d7
 8011aa8:	eeb0 9a47 	vmov.f32	s18, s14
 8011aac:	eef0 9a67 	vmov.f32	s19, s15
 8011ab0:	4682      	mov	sl, r0
 8011ab2:	f7ee fc03 	bl	80002bc <__aeabi_dsub>
 8011ab6:	4652      	mov	r2, sl
 8011ab8:	4606      	mov	r6, r0
 8011aba:	460f      	mov	r7, r1
 8011abc:	462b      	mov	r3, r5
 8011abe:	ec51 0b19 	vmov	r0, r1, d9
 8011ac2:	f7ee fbfd 	bl	80002c0 <__adddf3>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	460b      	mov	r3, r1
 8011aca:	2000      	movs	r0, #0
 8011acc:	49bb      	ldr	r1, [pc, #748]	; (8011dbc <__ieee754_pow+0x76c>)
 8011ace:	f7ee fed7 	bl	8000880 <__aeabi_ddiv>
 8011ad2:	ec41 0b1a 	vmov	d10, r0, r1
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	4630      	mov	r0, r6
 8011adc:	4639      	mov	r1, r7
 8011ade:	f7ee fda5 	bl	800062c <__aeabi_dmul>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ae8:	9302      	str	r3, [sp, #8]
 8011aea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011aee:	46ab      	mov	fp, r5
 8011af0:	106d      	asrs	r5, r5, #1
 8011af2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011af6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011afa:	ec41 0b18 	vmov	d8, r0, r1
 8011afe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011b02:	2200      	movs	r2, #0
 8011b04:	4640      	mov	r0, r8
 8011b06:	4649      	mov	r1, r9
 8011b08:	4614      	mov	r4, r2
 8011b0a:	461d      	mov	r5, r3
 8011b0c:	f7ee fd8e 	bl	800062c <__aeabi_dmul>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4630      	mov	r0, r6
 8011b16:	4639      	mov	r1, r7
 8011b18:	f7ee fbd0 	bl	80002bc <__aeabi_dsub>
 8011b1c:	ec53 2b19 	vmov	r2, r3, d9
 8011b20:	4606      	mov	r6, r0
 8011b22:	460f      	mov	r7, r1
 8011b24:	4620      	mov	r0, r4
 8011b26:	4629      	mov	r1, r5
 8011b28:	f7ee fbc8 	bl	80002bc <__aeabi_dsub>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	460b      	mov	r3, r1
 8011b30:	4650      	mov	r0, sl
 8011b32:	4659      	mov	r1, fp
 8011b34:	f7ee fbc2 	bl	80002bc <__aeabi_dsub>
 8011b38:	4642      	mov	r2, r8
 8011b3a:	464b      	mov	r3, r9
 8011b3c:	f7ee fd76 	bl	800062c <__aeabi_dmul>
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	4630      	mov	r0, r6
 8011b46:	4639      	mov	r1, r7
 8011b48:	f7ee fbb8 	bl	80002bc <__aeabi_dsub>
 8011b4c:	ec53 2b1a 	vmov	r2, r3, d10
 8011b50:	f7ee fd6c 	bl	800062c <__aeabi_dmul>
 8011b54:	ec53 2b18 	vmov	r2, r3, d8
 8011b58:	ec41 0b19 	vmov	d9, r0, r1
 8011b5c:	ec51 0b18 	vmov	r0, r1, d8
 8011b60:	f7ee fd64 	bl	800062c <__aeabi_dmul>
 8011b64:	a37c      	add	r3, pc, #496	; (adr r3, 8011d58 <__ieee754_pow+0x708>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	460d      	mov	r5, r1
 8011b6e:	f7ee fd5d 	bl	800062c <__aeabi_dmul>
 8011b72:	a37b      	add	r3, pc, #492	; (adr r3, 8011d60 <__ieee754_pow+0x710>)
 8011b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b78:	f7ee fba2 	bl	80002c0 <__adddf3>
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	462b      	mov	r3, r5
 8011b80:	f7ee fd54 	bl	800062c <__aeabi_dmul>
 8011b84:	a378      	add	r3, pc, #480	; (adr r3, 8011d68 <__ieee754_pow+0x718>)
 8011b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8a:	f7ee fb99 	bl	80002c0 <__adddf3>
 8011b8e:	4622      	mov	r2, r4
 8011b90:	462b      	mov	r3, r5
 8011b92:	f7ee fd4b 	bl	800062c <__aeabi_dmul>
 8011b96:	a376      	add	r3, pc, #472	; (adr r3, 8011d70 <__ieee754_pow+0x720>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	f7ee fb90 	bl	80002c0 <__adddf3>
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	462b      	mov	r3, r5
 8011ba4:	f7ee fd42 	bl	800062c <__aeabi_dmul>
 8011ba8:	a373      	add	r3, pc, #460	; (adr r3, 8011d78 <__ieee754_pow+0x728>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	f7ee fb87 	bl	80002c0 <__adddf3>
 8011bb2:	4622      	mov	r2, r4
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	f7ee fd39 	bl	800062c <__aeabi_dmul>
 8011bba:	a371      	add	r3, pc, #452	; (adr r3, 8011d80 <__ieee754_pow+0x730>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	f7ee fb7e 	bl	80002c0 <__adddf3>
 8011bc4:	4622      	mov	r2, r4
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460f      	mov	r7, r1
 8011bca:	462b      	mov	r3, r5
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7ee fd2c 	bl	800062c <__aeabi_dmul>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	4630      	mov	r0, r6
 8011bda:	4639      	mov	r1, r7
 8011bdc:	f7ee fd26 	bl	800062c <__aeabi_dmul>
 8011be0:	4642      	mov	r2, r8
 8011be2:	4604      	mov	r4, r0
 8011be4:	460d      	mov	r5, r1
 8011be6:	464b      	mov	r3, r9
 8011be8:	ec51 0b18 	vmov	r0, r1, d8
 8011bec:	f7ee fb68 	bl	80002c0 <__adddf3>
 8011bf0:	ec53 2b19 	vmov	r2, r3, d9
 8011bf4:	f7ee fd1a 	bl	800062c <__aeabi_dmul>
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	462b      	mov	r3, r5
 8011bfc:	f7ee fb60 	bl	80002c0 <__adddf3>
 8011c00:	4642      	mov	r2, r8
 8011c02:	4682      	mov	sl, r0
 8011c04:	468b      	mov	fp, r1
 8011c06:	464b      	mov	r3, r9
 8011c08:	4640      	mov	r0, r8
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	f7ee fd0e 	bl	800062c <__aeabi_dmul>
 8011c10:	4b6b      	ldr	r3, [pc, #428]	; (8011dc0 <__ieee754_pow+0x770>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	4606      	mov	r6, r0
 8011c16:	460f      	mov	r7, r1
 8011c18:	f7ee fb52 	bl	80002c0 <__adddf3>
 8011c1c:	4652      	mov	r2, sl
 8011c1e:	465b      	mov	r3, fp
 8011c20:	f7ee fb4e 	bl	80002c0 <__adddf3>
 8011c24:	2000      	movs	r0, #0
 8011c26:	4604      	mov	r4, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4640      	mov	r0, r8
 8011c30:	4649      	mov	r1, r9
 8011c32:	f7ee fcfb 	bl	800062c <__aeabi_dmul>
 8011c36:	4b62      	ldr	r3, [pc, #392]	; (8011dc0 <__ieee754_pow+0x770>)
 8011c38:	4680      	mov	r8, r0
 8011c3a:	4689      	mov	r9, r1
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	4620      	mov	r0, r4
 8011c40:	4629      	mov	r1, r5
 8011c42:	f7ee fb3b 	bl	80002bc <__aeabi_dsub>
 8011c46:	4632      	mov	r2, r6
 8011c48:	463b      	mov	r3, r7
 8011c4a:	f7ee fb37 	bl	80002bc <__aeabi_dsub>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	4650      	mov	r0, sl
 8011c54:	4659      	mov	r1, fp
 8011c56:	f7ee fb31 	bl	80002bc <__aeabi_dsub>
 8011c5a:	ec53 2b18 	vmov	r2, r3, d8
 8011c5e:	f7ee fce5 	bl	800062c <__aeabi_dmul>
 8011c62:	4622      	mov	r2, r4
 8011c64:	4606      	mov	r6, r0
 8011c66:	460f      	mov	r7, r1
 8011c68:	462b      	mov	r3, r5
 8011c6a:	ec51 0b19 	vmov	r0, r1, d9
 8011c6e:	f7ee fcdd 	bl	800062c <__aeabi_dmul>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4630      	mov	r0, r6
 8011c78:	4639      	mov	r1, r7
 8011c7a:	f7ee fb21 	bl	80002c0 <__adddf3>
 8011c7e:	4606      	mov	r6, r0
 8011c80:	460f      	mov	r7, r1
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	4640      	mov	r0, r8
 8011c88:	4649      	mov	r1, r9
 8011c8a:	f7ee fb19 	bl	80002c0 <__adddf3>
 8011c8e:	a33e      	add	r3, pc, #248	; (adr r3, 8011d88 <__ieee754_pow+0x738>)
 8011c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c94:	2000      	movs	r0, #0
 8011c96:	4604      	mov	r4, r0
 8011c98:	460d      	mov	r5, r1
 8011c9a:	f7ee fcc7 	bl	800062c <__aeabi_dmul>
 8011c9e:	4642      	mov	r2, r8
 8011ca0:	ec41 0b18 	vmov	d8, r0, r1
 8011ca4:	464b      	mov	r3, r9
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4629      	mov	r1, r5
 8011caa:	f7ee fb07 	bl	80002bc <__aeabi_dsub>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	4639      	mov	r1, r7
 8011cb6:	f7ee fb01 	bl	80002bc <__aeabi_dsub>
 8011cba:	a335      	add	r3, pc, #212	; (adr r3, 8011d90 <__ieee754_pow+0x740>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fcb4 	bl	800062c <__aeabi_dmul>
 8011cc4:	a334      	add	r3, pc, #208	; (adr r3, 8011d98 <__ieee754_pow+0x748>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	4606      	mov	r6, r0
 8011ccc:	460f      	mov	r7, r1
 8011cce:	4620      	mov	r0, r4
 8011cd0:	4629      	mov	r1, r5
 8011cd2:	f7ee fcab 	bl	800062c <__aeabi_dmul>
 8011cd6:	4602      	mov	r2, r0
 8011cd8:	460b      	mov	r3, r1
 8011cda:	4630      	mov	r0, r6
 8011cdc:	4639      	mov	r1, r7
 8011cde:	f7ee faef 	bl	80002c0 <__adddf3>
 8011ce2:	9a07      	ldr	r2, [sp, #28]
 8011ce4:	4b37      	ldr	r3, [pc, #220]	; (8011dc4 <__ieee754_pow+0x774>)
 8011ce6:	4413      	add	r3, r2
 8011ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cec:	f7ee fae8 	bl	80002c0 <__adddf3>
 8011cf0:	4682      	mov	sl, r0
 8011cf2:	9805      	ldr	r0, [sp, #20]
 8011cf4:	468b      	mov	fp, r1
 8011cf6:	f7ee fc2f 	bl	8000558 <__aeabi_i2d>
 8011cfa:	9a07      	ldr	r2, [sp, #28]
 8011cfc:	4b32      	ldr	r3, [pc, #200]	; (8011dc8 <__ieee754_pow+0x778>)
 8011cfe:	4413      	add	r3, r2
 8011d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d04:	4606      	mov	r6, r0
 8011d06:	460f      	mov	r7, r1
 8011d08:	4652      	mov	r2, sl
 8011d0a:	465b      	mov	r3, fp
 8011d0c:	ec51 0b18 	vmov	r0, r1, d8
 8011d10:	f7ee fad6 	bl	80002c0 <__adddf3>
 8011d14:	4642      	mov	r2, r8
 8011d16:	464b      	mov	r3, r9
 8011d18:	f7ee fad2 	bl	80002c0 <__adddf3>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	f7ee face 	bl	80002c0 <__adddf3>
 8011d24:	2000      	movs	r0, #0
 8011d26:	4632      	mov	r2, r6
 8011d28:	463b      	mov	r3, r7
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	460d      	mov	r5, r1
 8011d2e:	f7ee fac5 	bl	80002bc <__aeabi_dsub>
 8011d32:	4642      	mov	r2, r8
 8011d34:	464b      	mov	r3, r9
 8011d36:	f7ee fac1 	bl	80002bc <__aeabi_dsub>
 8011d3a:	ec53 2b18 	vmov	r2, r3, d8
 8011d3e:	f7ee fabd 	bl	80002bc <__aeabi_dsub>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	4650      	mov	r0, sl
 8011d48:	4659      	mov	r1, fp
 8011d4a:	e610      	b.n	801196e <__ieee754_pow+0x31e>
 8011d4c:	2401      	movs	r4, #1
 8011d4e:	e6a1      	b.n	8011a94 <__ieee754_pow+0x444>
 8011d50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011da0 <__ieee754_pow+0x750>
 8011d54:	e617      	b.n	8011986 <__ieee754_pow+0x336>
 8011d56:	bf00      	nop
 8011d58:	4a454eef 	.word	0x4a454eef
 8011d5c:	3fca7e28 	.word	0x3fca7e28
 8011d60:	93c9db65 	.word	0x93c9db65
 8011d64:	3fcd864a 	.word	0x3fcd864a
 8011d68:	a91d4101 	.word	0xa91d4101
 8011d6c:	3fd17460 	.word	0x3fd17460
 8011d70:	518f264d 	.word	0x518f264d
 8011d74:	3fd55555 	.word	0x3fd55555
 8011d78:	db6fabff 	.word	0xdb6fabff
 8011d7c:	3fdb6db6 	.word	0x3fdb6db6
 8011d80:	33333303 	.word	0x33333303
 8011d84:	3fe33333 	.word	0x3fe33333
 8011d88:	e0000000 	.word	0xe0000000
 8011d8c:	3feec709 	.word	0x3feec709
 8011d90:	dc3a03fd 	.word	0xdc3a03fd
 8011d94:	3feec709 	.word	0x3feec709
 8011d98:	145b01f5 	.word	0x145b01f5
 8011d9c:	be3e2fe0 	.word	0xbe3e2fe0
 8011da0:	00000000 	.word	0x00000000
 8011da4:	3ff00000 	.word	0x3ff00000
 8011da8:	7ff00000 	.word	0x7ff00000
 8011dac:	43400000 	.word	0x43400000
 8011db0:	0003988e 	.word	0x0003988e
 8011db4:	000bb679 	.word	0x000bb679
 8011db8:	08039c38 	.word	0x08039c38
 8011dbc:	3ff00000 	.word	0x3ff00000
 8011dc0:	40080000 	.word	0x40080000
 8011dc4:	08039c58 	.word	0x08039c58
 8011dc8:	08039c48 	.word	0x08039c48
 8011dcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80120a4 <__ieee754_pow+0xa54>)
 8011dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd2:	4640      	mov	r0, r8
 8011dd4:	4649      	mov	r1, r9
 8011dd6:	f7ee fa73 	bl	80002c0 <__adddf3>
 8011dda:	4622      	mov	r2, r4
 8011ddc:	ec41 0b1a 	vmov	d10, r0, r1
 8011de0:	462b      	mov	r3, r5
 8011de2:	4630      	mov	r0, r6
 8011de4:	4639      	mov	r1, r7
 8011de6:	f7ee fa69 	bl	80002bc <__aeabi_dsub>
 8011dea:	4602      	mov	r2, r0
 8011dec:	460b      	mov	r3, r1
 8011dee:	ec51 0b1a 	vmov	r0, r1, d10
 8011df2:	f7ee feab 	bl	8000b4c <__aeabi_dcmpgt>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	f47f ae04 	bne.w	8011a04 <__ieee754_pow+0x3b4>
 8011dfc:	4aa4      	ldr	r2, [pc, #656]	; (8012090 <__ieee754_pow+0xa40>)
 8011dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e02:	4293      	cmp	r3, r2
 8011e04:	f340 8108 	ble.w	8012018 <__ieee754_pow+0x9c8>
 8011e08:	151b      	asrs	r3, r3, #20
 8011e0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011e0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011e12:	fa4a f303 	asr.w	r3, sl, r3
 8011e16:	445b      	add	r3, fp
 8011e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e1c:	4e9d      	ldr	r6, [pc, #628]	; (8012094 <__ieee754_pow+0xa44>)
 8011e1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e22:	4116      	asrs	r6, r2
 8011e24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011e28:	2000      	movs	r0, #0
 8011e2a:	ea23 0106 	bic.w	r1, r3, r6
 8011e2e:	f1c2 0214 	rsb	r2, r2, #20
 8011e32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011e36:	fa4a fa02 	asr.w	sl, sl, r2
 8011e3a:	f1bb 0f00 	cmp.w	fp, #0
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4620      	mov	r0, r4
 8011e44:	4629      	mov	r1, r5
 8011e46:	bfb8      	it	lt
 8011e48:	f1ca 0a00 	rsblt	sl, sl, #0
 8011e4c:	f7ee fa36 	bl	80002bc <__aeabi_dsub>
 8011e50:	ec41 0b19 	vmov	d9, r0, r1
 8011e54:	4642      	mov	r2, r8
 8011e56:	464b      	mov	r3, r9
 8011e58:	ec51 0b19 	vmov	r0, r1, d9
 8011e5c:	f7ee fa30 	bl	80002c0 <__adddf3>
 8011e60:	a37b      	add	r3, pc, #492	; (adr r3, 8012050 <__ieee754_pow+0xa00>)
 8011e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e66:	2000      	movs	r0, #0
 8011e68:	4604      	mov	r4, r0
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	f7ee fbde 	bl	800062c <__aeabi_dmul>
 8011e70:	ec53 2b19 	vmov	r2, r3, d9
 8011e74:	4606      	mov	r6, r0
 8011e76:	460f      	mov	r7, r1
 8011e78:	4620      	mov	r0, r4
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	f7ee fa1e 	bl	80002bc <__aeabi_dsub>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	4640      	mov	r0, r8
 8011e86:	4649      	mov	r1, r9
 8011e88:	f7ee fa18 	bl	80002bc <__aeabi_dsub>
 8011e8c:	a372      	add	r3, pc, #456	; (adr r3, 8012058 <__ieee754_pow+0xa08>)
 8011e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e92:	f7ee fbcb 	bl	800062c <__aeabi_dmul>
 8011e96:	a372      	add	r3, pc, #456	; (adr r3, 8012060 <__ieee754_pow+0xa10>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	4680      	mov	r8, r0
 8011e9e:	4689      	mov	r9, r1
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	4629      	mov	r1, r5
 8011ea4:	f7ee fbc2 	bl	800062c <__aeabi_dmul>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	460b      	mov	r3, r1
 8011eac:	4640      	mov	r0, r8
 8011eae:	4649      	mov	r1, r9
 8011eb0:	f7ee fa06 	bl	80002c0 <__adddf3>
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	460d      	mov	r5, r1
 8011eb8:	4602      	mov	r2, r0
 8011eba:	460b      	mov	r3, r1
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	4639      	mov	r1, r7
 8011ec0:	f7ee f9fe 	bl	80002c0 <__adddf3>
 8011ec4:	4632      	mov	r2, r6
 8011ec6:	463b      	mov	r3, r7
 8011ec8:	4680      	mov	r8, r0
 8011eca:	4689      	mov	r9, r1
 8011ecc:	f7ee f9f6 	bl	80002bc <__aeabi_dsub>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	f7ee f9f0 	bl	80002bc <__aeabi_dsub>
 8011edc:	4642      	mov	r2, r8
 8011ede:	4606      	mov	r6, r0
 8011ee0:	460f      	mov	r7, r1
 8011ee2:	464b      	mov	r3, r9
 8011ee4:	4640      	mov	r0, r8
 8011ee6:	4649      	mov	r1, r9
 8011ee8:	f7ee fba0 	bl	800062c <__aeabi_dmul>
 8011eec:	a35e      	add	r3, pc, #376	; (adr r3, 8012068 <__ieee754_pow+0xa18>)
 8011eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	460d      	mov	r5, r1
 8011ef6:	f7ee fb99 	bl	800062c <__aeabi_dmul>
 8011efa:	a35d      	add	r3, pc, #372	; (adr r3, 8012070 <__ieee754_pow+0xa20>)
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	f7ee f9dc 	bl	80002bc <__aeabi_dsub>
 8011f04:	4622      	mov	r2, r4
 8011f06:	462b      	mov	r3, r5
 8011f08:	f7ee fb90 	bl	800062c <__aeabi_dmul>
 8011f0c:	a35a      	add	r3, pc, #360	; (adr r3, 8012078 <__ieee754_pow+0xa28>)
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	f7ee f9d5 	bl	80002c0 <__adddf3>
 8011f16:	4622      	mov	r2, r4
 8011f18:	462b      	mov	r3, r5
 8011f1a:	f7ee fb87 	bl	800062c <__aeabi_dmul>
 8011f1e:	a358      	add	r3, pc, #352	; (adr r3, 8012080 <__ieee754_pow+0xa30>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	f7ee f9ca 	bl	80002bc <__aeabi_dsub>
 8011f28:	4622      	mov	r2, r4
 8011f2a:	462b      	mov	r3, r5
 8011f2c:	f7ee fb7e 	bl	800062c <__aeabi_dmul>
 8011f30:	a355      	add	r3, pc, #340	; (adr r3, 8012088 <__ieee754_pow+0xa38>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	f7ee f9c3 	bl	80002c0 <__adddf3>
 8011f3a:	4622      	mov	r2, r4
 8011f3c:	462b      	mov	r3, r5
 8011f3e:	f7ee fb75 	bl	800062c <__aeabi_dmul>
 8011f42:	4602      	mov	r2, r0
 8011f44:	460b      	mov	r3, r1
 8011f46:	4640      	mov	r0, r8
 8011f48:	4649      	mov	r1, r9
 8011f4a:	f7ee f9b7 	bl	80002bc <__aeabi_dsub>
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	4602      	mov	r2, r0
 8011f54:	460b      	mov	r3, r1
 8011f56:	4640      	mov	r0, r8
 8011f58:	4649      	mov	r1, r9
 8011f5a:	f7ee fb67 	bl	800062c <__aeabi_dmul>
 8011f5e:	2200      	movs	r2, #0
 8011f60:	ec41 0b19 	vmov	d9, r0, r1
 8011f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f68:	4620      	mov	r0, r4
 8011f6a:	4629      	mov	r1, r5
 8011f6c:	f7ee f9a6 	bl	80002bc <__aeabi_dsub>
 8011f70:	4602      	mov	r2, r0
 8011f72:	460b      	mov	r3, r1
 8011f74:	ec51 0b19 	vmov	r0, r1, d9
 8011f78:	f7ee fc82 	bl	8000880 <__aeabi_ddiv>
 8011f7c:	4632      	mov	r2, r6
 8011f7e:	4604      	mov	r4, r0
 8011f80:	460d      	mov	r5, r1
 8011f82:	463b      	mov	r3, r7
 8011f84:	4640      	mov	r0, r8
 8011f86:	4649      	mov	r1, r9
 8011f88:	f7ee fb50 	bl	800062c <__aeabi_dmul>
 8011f8c:	4632      	mov	r2, r6
 8011f8e:	463b      	mov	r3, r7
 8011f90:	f7ee f996 	bl	80002c0 <__adddf3>
 8011f94:	4602      	mov	r2, r0
 8011f96:	460b      	mov	r3, r1
 8011f98:	4620      	mov	r0, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	f7ee f98e 	bl	80002bc <__aeabi_dsub>
 8011fa0:	4642      	mov	r2, r8
 8011fa2:	464b      	mov	r3, r9
 8011fa4:	f7ee f98a 	bl	80002bc <__aeabi_dsub>
 8011fa8:	460b      	mov	r3, r1
 8011faa:	4602      	mov	r2, r0
 8011fac:	493a      	ldr	r1, [pc, #232]	; (8012098 <__ieee754_pow+0xa48>)
 8011fae:	2000      	movs	r0, #0
 8011fb0:	f7ee f984 	bl	80002bc <__aeabi_dsub>
 8011fb4:	ec41 0b10 	vmov	d0, r0, r1
 8011fb8:	ee10 3a90 	vmov	r3, s1
 8011fbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fc4:	da2b      	bge.n	801201e <__ieee754_pow+0x9ce>
 8011fc6:	4650      	mov	r0, sl
 8011fc8:	f001 fae2 	bl	8013590 <scalbn>
 8011fcc:	ec51 0b10 	vmov	r0, r1, d0
 8011fd0:	ec53 2b18 	vmov	r2, r3, d8
 8011fd4:	f7ff bbed 	b.w	80117b2 <__ieee754_pow+0x162>
 8011fd8:	4b30      	ldr	r3, [pc, #192]	; (801209c <__ieee754_pow+0xa4c>)
 8011fda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011fde:	429e      	cmp	r6, r3
 8011fe0:	f77f af0c 	ble.w	8011dfc <__ieee754_pow+0x7ac>
 8011fe4:	4b2e      	ldr	r3, [pc, #184]	; (80120a0 <__ieee754_pow+0xa50>)
 8011fe6:	440b      	add	r3, r1
 8011fe8:	4303      	orrs	r3, r0
 8011fea:	d009      	beq.n	8012000 <__ieee754_pow+0x9b0>
 8011fec:	ec51 0b18 	vmov	r0, r1, d8
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	f7ee fd8c 	bl	8000b10 <__aeabi_dcmplt>
 8011ff8:	3800      	subs	r0, #0
 8011ffa:	bf18      	it	ne
 8011ffc:	2001      	movne	r0, #1
 8011ffe:	e447      	b.n	8011890 <__ieee754_pow+0x240>
 8012000:	4622      	mov	r2, r4
 8012002:	462b      	mov	r3, r5
 8012004:	f7ee f95a 	bl	80002bc <__aeabi_dsub>
 8012008:	4642      	mov	r2, r8
 801200a:	464b      	mov	r3, r9
 801200c:	f7ee fd94 	bl	8000b38 <__aeabi_dcmpge>
 8012010:	2800      	cmp	r0, #0
 8012012:	f43f aef3 	beq.w	8011dfc <__ieee754_pow+0x7ac>
 8012016:	e7e9      	b.n	8011fec <__ieee754_pow+0x99c>
 8012018:	f04f 0a00 	mov.w	sl, #0
 801201c:	e71a      	b.n	8011e54 <__ieee754_pow+0x804>
 801201e:	ec51 0b10 	vmov	r0, r1, d0
 8012022:	4619      	mov	r1, r3
 8012024:	e7d4      	b.n	8011fd0 <__ieee754_pow+0x980>
 8012026:	491c      	ldr	r1, [pc, #112]	; (8012098 <__ieee754_pow+0xa48>)
 8012028:	2000      	movs	r0, #0
 801202a:	f7ff bb30 	b.w	801168e <__ieee754_pow+0x3e>
 801202e:	2000      	movs	r0, #0
 8012030:	2100      	movs	r1, #0
 8012032:	f7ff bb2c 	b.w	801168e <__ieee754_pow+0x3e>
 8012036:	4630      	mov	r0, r6
 8012038:	4639      	mov	r1, r7
 801203a:	f7ff bb28 	b.w	801168e <__ieee754_pow+0x3e>
 801203e:	9204      	str	r2, [sp, #16]
 8012040:	f7ff bb7a 	b.w	8011738 <__ieee754_pow+0xe8>
 8012044:	2300      	movs	r3, #0
 8012046:	f7ff bb64 	b.w	8011712 <__ieee754_pow+0xc2>
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w
 8012050:	00000000 	.word	0x00000000
 8012054:	3fe62e43 	.word	0x3fe62e43
 8012058:	fefa39ef 	.word	0xfefa39ef
 801205c:	3fe62e42 	.word	0x3fe62e42
 8012060:	0ca86c39 	.word	0x0ca86c39
 8012064:	be205c61 	.word	0xbe205c61
 8012068:	72bea4d0 	.word	0x72bea4d0
 801206c:	3e663769 	.word	0x3e663769
 8012070:	c5d26bf1 	.word	0xc5d26bf1
 8012074:	3ebbbd41 	.word	0x3ebbbd41
 8012078:	af25de2c 	.word	0xaf25de2c
 801207c:	3f11566a 	.word	0x3f11566a
 8012080:	16bebd93 	.word	0x16bebd93
 8012084:	3f66c16c 	.word	0x3f66c16c
 8012088:	5555553e 	.word	0x5555553e
 801208c:	3fc55555 	.word	0x3fc55555
 8012090:	3fe00000 	.word	0x3fe00000
 8012094:	000fffff 	.word	0x000fffff
 8012098:	3ff00000 	.word	0x3ff00000
 801209c:	4090cbff 	.word	0x4090cbff
 80120a0:	3f6f3400 	.word	0x3f6f3400
 80120a4:	652b82fe 	.word	0x652b82fe
 80120a8:	3c971547 	.word	0x3c971547
 80120ac:	00000000 	.word	0x00000000

080120b0 <__ieee754_rem_pio2>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	ed2d 8b02 	vpush	{d8}
 80120b8:	ec55 4b10 	vmov	r4, r5, d0
 80120bc:	4bca      	ldr	r3, [pc, #808]	; (80123e8 <__ieee754_rem_pio2+0x338>)
 80120be:	b08b      	sub	sp, #44	; 0x2c
 80120c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80120c4:	4598      	cmp	r8, r3
 80120c6:	4682      	mov	sl, r0
 80120c8:	9502      	str	r5, [sp, #8]
 80120ca:	dc08      	bgt.n	80120de <__ieee754_rem_pio2+0x2e>
 80120cc:	2200      	movs	r2, #0
 80120ce:	2300      	movs	r3, #0
 80120d0:	ed80 0b00 	vstr	d0, [r0]
 80120d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80120d8:	f04f 0b00 	mov.w	fp, #0
 80120dc:	e028      	b.n	8012130 <__ieee754_rem_pio2+0x80>
 80120de:	4bc3      	ldr	r3, [pc, #780]	; (80123ec <__ieee754_rem_pio2+0x33c>)
 80120e0:	4598      	cmp	r8, r3
 80120e2:	dc78      	bgt.n	80121d6 <__ieee754_rem_pio2+0x126>
 80120e4:	9b02      	ldr	r3, [sp, #8]
 80120e6:	4ec2      	ldr	r6, [pc, #776]	; (80123f0 <__ieee754_rem_pio2+0x340>)
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	ee10 0a10 	vmov	r0, s0
 80120ee:	a3b0      	add	r3, pc, #704	; (adr r3, 80123b0 <__ieee754_rem_pio2+0x300>)
 80120f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f4:	4629      	mov	r1, r5
 80120f6:	dd39      	ble.n	801216c <__ieee754_rem_pio2+0xbc>
 80120f8:	f7ee f8e0 	bl	80002bc <__aeabi_dsub>
 80120fc:	45b0      	cmp	r8, r6
 80120fe:	4604      	mov	r4, r0
 8012100:	460d      	mov	r5, r1
 8012102:	d01b      	beq.n	801213c <__ieee754_rem_pio2+0x8c>
 8012104:	a3ac      	add	r3, pc, #688	; (adr r3, 80123b8 <__ieee754_rem_pio2+0x308>)
 8012106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210a:	f7ee f8d7 	bl	80002bc <__aeabi_dsub>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	e9ca 2300 	strd	r2, r3, [sl]
 8012116:	4620      	mov	r0, r4
 8012118:	4629      	mov	r1, r5
 801211a:	f7ee f8cf 	bl	80002bc <__aeabi_dsub>
 801211e:	a3a6      	add	r3, pc, #664	; (adr r3, 80123b8 <__ieee754_rem_pio2+0x308>)
 8012120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012124:	f7ee f8ca 	bl	80002bc <__aeabi_dsub>
 8012128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801212c:	f04f 0b01 	mov.w	fp, #1
 8012130:	4658      	mov	r0, fp
 8012132:	b00b      	add	sp, #44	; 0x2c
 8012134:	ecbd 8b02 	vpop	{d8}
 8012138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213c:	a3a0      	add	r3, pc, #640	; (adr r3, 80123c0 <__ieee754_rem_pio2+0x310>)
 801213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012142:	f7ee f8bb 	bl	80002bc <__aeabi_dsub>
 8012146:	a3a0      	add	r3, pc, #640	; (adr r3, 80123c8 <__ieee754_rem_pio2+0x318>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	4604      	mov	r4, r0
 801214e:	460d      	mov	r5, r1
 8012150:	f7ee f8b4 	bl	80002bc <__aeabi_dsub>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	e9ca 2300 	strd	r2, r3, [sl]
 801215c:	4620      	mov	r0, r4
 801215e:	4629      	mov	r1, r5
 8012160:	f7ee f8ac 	bl	80002bc <__aeabi_dsub>
 8012164:	a398      	add	r3, pc, #608	; (adr r3, 80123c8 <__ieee754_rem_pio2+0x318>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	e7db      	b.n	8012124 <__ieee754_rem_pio2+0x74>
 801216c:	f7ee f8a8 	bl	80002c0 <__adddf3>
 8012170:	45b0      	cmp	r8, r6
 8012172:	4604      	mov	r4, r0
 8012174:	460d      	mov	r5, r1
 8012176:	d016      	beq.n	80121a6 <__ieee754_rem_pio2+0xf6>
 8012178:	a38f      	add	r3, pc, #572	; (adr r3, 80123b8 <__ieee754_rem_pio2+0x308>)
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	f7ee f89f 	bl	80002c0 <__adddf3>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	e9ca 2300 	strd	r2, r3, [sl]
 801218a:	4620      	mov	r0, r4
 801218c:	4629      	mov	r1, r5
 801218e:	f7ee f895 	bl	80002bc <__aeabi_dsub>
 8012192:	a389      	add	r3, pc, #548	; (adr r3, 80123b8 <__ieee754_rem_pio2+0x308>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	f7ee f892 	bl	80002c0 <__adddf3>
 801219c:	f04f 3bff 	mov.w	fp, #4294967295
 80121a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80121a4:	e7c4      	b.n	8012130 <__ieee754_rem_pio2+0x80>
 80121a6:	a386      	add	r3, pc, #536	; (adr r3, 80123c0 <__ieee754_rem_pio2+0x310>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	f7ee f888 	bl	80002c0 <__adddf3>
 80121b0:	a385      	add	r3, pc, #532	; (adr r3, 80123c8 <__ieee754_rem_pio2+0x318>)
 80121b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b6:	4604      	mov	r4, r0
 80121b8:	460d      	mov	r5, r1
 80121ba:	f7ee f881 	bl	80002c0 <__adddf3>
 80121be:	4602      	mov	r2, r0
 80121c0:	460b      	mov	r3, r1
 80121c2:	e9ca 2300 	strd	r2, r3, [sl]
 80121c6:	4620      	mov	r0, r4
 80121c8:	4629      	mov	r1, r5
 80121ca:	f7ee f877 	bl	80002bc <__aeabi_dsub>
 80121ce:	a37e      	add	r3, pc, #504	; (adr r3, 80123c8 <__ieee754_rem_pio2+0x318>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	e7e0      	b.n	8012198 <__ieee754_rem_pio2+0xe8>
 80121d6:	4b87      	ldr	r3, [pc, #540]	; (80123f4 <__ieee754_rem_pio2+0x344>)
 80121d8:	4598      	cmp	r8, r3
 80121da:	f300 80d9 	bgt.w	8012390 <__ieee754_rem_pio2+0x2e0>
 80121de:	f001 f939 	bl	8013454 <fabs>
 80121e2:	ec55 4b10 	vmov	r4, r5, d0
 80121e6:	ee10 0a10 	vmov	r0, s0
 80121ea:	a379      	add	r3, pc, #484	; (adr r3, 80123d0 <__ieee754_rem_pio2+0x320>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	4629      	mov	r1, r5
 80121f2:	f7ee fa1b 	bl	800062c <__aeabi_dmul>
 80121f6:	4b80      	ldr	r3, [pc, #512]	; (80123f8 <__ieee754_rem_pio2+0x348>)
 80121f8:	2200      	movs	r2, #0
 80121fa:	f7ee f861 	bl	80002c0 <__adddf3>
 80121fe:	f7ee fcc5 	bl	8000b8c <__aeabi_d2iz>
 8012202:	4683      	mov	fp, r0
 8012204:	f7ee f9a8 	bl	8000558 <__aeabi_i2d>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	ec43 2b18 	vmov	d8, r2, r3
 8012210:	a367      	add	r3, pc, #412	; (adr r3, 80123b0 <__ieee754_rem_pio2+0x300>)
 8012212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012216:	f7ee fa09 	bl	800062c <__aeabi_dmul>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	4620      	mov	r0, r4
 8012220:	4629      	mov	r1, r5
 8012222:	f7ee f84b 	bl	80002bc <__aeabi_dsub>
 8012226:	a364      	add	r3, pc, #400	; (adr r3, 80123b8 <__ieee754_rem_pio2+0x308>)
 8012228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222c:	4606      	mov	r6, r0
 801222e:	460f      	mov	r7, r1
 8012230:	ec51 0b18 	vmov	r0, r1, d8
 8012234:	f7ee f9fa 	bl	800062c <__aeabi_dmul>
 8012238:	f1bb 0f1f 	cmp.w	fp, #31
 801223c:	4604      	mov	r4, r0
 801223e:	460d      	mov	r5, r1
 8012240:	dc0d      	bgt.n	801225e <__ieee754_rem_pio2+0x1ae>
 8012242:	4b6e      	ldr	r3, [pc, #440]	; (80123fc <__ieee754_rem_pio2+0x34c>)
 8012244:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801224c:	4543      	cmp	r3, r8
 801224e:	d006      	beq.n	801225e <__ieee754_rem_pio2+0x1ae>
 8012250:	4622      	mov	r2, r4
 8012252:	462b      	mov	r3, r5
 8012254:	4630      	mov	r0, r6
 8012256:	4639      	mov	r1, r7
 8012258:	f7ee f830 	bl	80002bc <__aeabi_dsub>
 801225c:	e00f      	b.n	801227e <__ieee754_rem_pio2+0x1ce>
 801225e:	462b      	mov	r3, r5
 8012260:	4622      	mov	r2, r4
 8012262:	4630      	mov	r0, r6
 8012264:	4639      	mov	r1, r7
 8012266:	f7ee f829 	bl	80002bc <__aeabi_dsub>
 801226a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801226e:	9303      	str	r3, [sp, #12]
 8012270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012274:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012278:	f1b8 0f10 	cmp.w	r8, #16
 801227c:	dc02      	bgt.n	8012284 <__ieee754_rem_pio2+0x1d4>
 801227e:	e9ca 0100 	strd	r0, r1, [sl]
 8012282:	e039      	b.n	80122f8 <__ieee754_rem_pio2+0x248>
 8012284:	a34e      	add	r3, pc, #312	; (adr r3, 80123c0 <__ieee754_rem_pio2+0x310>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	ec51 0b18 	vmov	r0, r1, d8
 801228e:	f7ee f9cd 	bl	800062c <__aeabi_dmul>
 8012292:	4604      	mov	r4, r0
 8012294:	460d      	mov	r5, r1
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	4630      	mov	r0, r6
 801229c:	4639      	mov	r1, r7
 801229e:	f7ee f80d 	bl	80002bc <__aeabi_dsub>
 80122a2:	4602      	mov	r2, r0
 80122a4:	460b      	mov	r3, r1
 80122a6:	4680      	mov	r8, r0
 80122a8:	4689      	mov	r9, r1
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f7ee f805 	bl	80002bc <__aeabi_dsub>
 80122b2:	4622      	mov	r2, r4
 80122b4:	462b      	mov	r3, r5
 80122b6:	f7ee f801 	bl	80002bc <__aeabi_dsub>
 80122ba:	a343      	add	r3, pc, #268	; (adr r3, 80123c8 <__ieee754_rem_pio2+0x318>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	4604      	mov	r4, r0
 80122c2:	460d      	mov	r5, r1
 80122c4:	ec51 0b18 	vmov	r0, r1, d8
 80122c8:	f7ee f9b0 	bl	800062c <__aeabi_dmul>
 80122cc:	4622      	mov	r2, r4
 80122ce:	462b      	mov	r3, r5
 80122d0:	f7ed fff4 	bl	80002bc <__aeabi_dsub>
 80122d4:	4602      	mov	r2, r0
 80122d6:	460b      	mov	r3, r1
 80122d8:	4604      	mov	r4, r0
 80122da:	460d      	mov	r5, r1
 80122dc:	4640      	mov	r0, r8
 80122de:	4649      	mov	r1, r9
 80122e0:	f7ed ffec 	bl	80002bc <__aeabi_dsub>
 80122e4:	9a03      	ldr	r2, [sp, #12]
 80122e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	2b31      	cmp	r3, #49	; 0x31
 80122ee:	dc24      	bgt.n	801233a <__ieee754_rem_pio2+0x28a>
 80122f0:	e9ca 0100 	strd	r0, r1, [sl]
 80122f4:	4646      	mov	r6, r8
 80122f6:	464f      	mov	r7, r9
 80122f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80122fc:	4630      	mov	r0, r6
 80122fe:	4642      	mov	r2, r8
 8012300:	464b      	mov	r3, r9
 8012302:	4639      	mov	r1, r7
 8012304:	f7ed ffda 	bl	80002bc <__aeabi_dsub>
 8012308:	462b      	mov	r3, r5
 801230a:	4622      	mov	r2, r4
 801230c:	f7ed ffd6 	bl	80002bc <__aeabi_dsub>
 8012310:	9b02      	ldr	r3, [sp, #8]
 8012312:	2b00      	cmp	r3, #0
 8012314:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012318:	f6bf af0a 	bge.w	8012130 <__ieee754_rem_pio2+0x80>
 801231c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012320:	f8ca 3004 	str.w	r3, [sl, #4]
 8012324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012328:	f8ca 8000 	str.w	r8, [sl]
 801232c:	f8ca 0008 	str.w	r0, [sl, #8]
 8012330:	f8ca 300c 	str.w	r3, [sl, #12]
 8012334:	f1cb 0b00 	rsb	fp, fp, #0
 8012338:	e6fa      	b.n	8012130 <__ieee754_rem_pio2+0x80>
 801233a:	a327      	add	r3, pc, #156	; (adr r3, 80123d8 <__ieee754_rem_pio2+0x328>)
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	ec51 0b18 	vmov	r0, r1, d8
 8012344:	f7ee f972 	bl	800062c <__aeabi_dmul>
 8012348:	4604      	mov	r4, r0
 801234a:	460d      	mov	r5, r1
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4640      	mov	r0, r8
 8012352:	4649      	mov	r1, r9
 8012354:	f7ed ffb2 	bl	80002bc <__aeabi_dsub>
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	4606      	mov	r6, r0
 801235e:	460f      	mov	r7, r1
 8012360:	4640      	mov	r0, r8
 8012362:	4649      	mov	r1, r9
 8012364:	f7ed ffaa 	bl	80002bc <__aeabi_dsub>
 8012368:	4622      	mov	r2, r4
 801236a:	462b      	mov	r3, r5
 801236c:	f7ed ffa6 	bl	80002bc <__aeabi_dsub>
 8012370:	a31b      	add	r3, pc, #108	; (adr r3, 80123e0 <__ieee754_rem_pio2+0x330>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	4604      	mov	r4, r0
 8012378:	460d      	mov	r5, r1
 801237a:	ec51 0b18 	vmov	r0, r1, d8
 801237e:	f7ee f955 	bl	800062c <__aeabi_dmul>
 8012382:	4622      	mov	r2, r4
 8012384:	462b      	mov	r3, r5
 8012386:	f7ed ff99 	bl	80002bc <__aeabi_dsub>
 801238a:	4604      	mov	r4, r0
 801238c:	460d      	mov	r5, r1
 801238e:	e75f      	b.n	8012250 <__ieee754_rem_pio2+0x1a0>
 8012390:	4b1b      	ldr	r3, [pc, #108]	; (8012400 <__ieee754_rem_pio2+0x350>)
 8012392:	4598      	cmp	r8, r3
 8012394:	dd36      	ble.n	8012404 <__ieee754_rem_pio2+0x354>
 8012396:	ee10 2a10 	vmov	r2, s0
 801239a:	462b      	mov	r3, r5
 801239c:	4620      	mov	r0, r4
 801239e:	4629      	mov	r1, r5
 80123a0:	f7ed ff8c 	bl	80002bc <__aeabi_dsub>
 80123a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123a8:	e9ca 0100 	strd	r0, r1, [sl]
 80123ac:	e694      	b.n	80120d8 <__ieee754_rem_pio2+0x28>
 80123ae:	bf00      	nop
 80123b0:	54400000 	.word	0x54400000
 80123b4:	3ff921fb 	.word	0x3ff921fb
 80123b8:	1a626331 	.word	0x1a626331
 80123bc:	3dd0b461 	.word	0x3dd0b461
 80123c0:	1a600000 	.word	0x1a600000
 80123c4:	3dd0b461 	.word	0x3dd0b461
 80123c8:	2e037073 	.word	0x2e037073
 80123cc:	3ba3198a 	.word	0x3ba3198a
 80123d0:	6dc9c883 	.word	0x6dc9c883
 80123d4:	3fe45f30 	.word	0x3fe45f30
 80123d8:	2e000000 	.word	0x2e000000
 80123dc:	3ba3198a 	.word	0x3ba3198a
 80123e0:	252049c1 	.word	0x252049c1
 80123e4:	397b839a 	.word	0x397b839a
 80123e8:	3fe921fb 	.word	0x3fe921fb
 80123ec:	4002d97b 	.word	0x4002d97b
 80123f0:	3ff921fb 	.word	0x3ff921fb
 80123f4:	413921fb 	.word	0x413921fb
 80123f8:	3fe00000 	.word	0x3fe00000
 80123fc:	08039c68 	.word	0x08039c68
 8012400:	7fefffff 	.word	0x7fefffff
 8012404:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012408:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801240c:	ee10 0a10 	vmov	r0, s0
 8012410:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012414:	ee10 6a10 	vmov	r6, s0
 8012418:	460f      	mov	r7, r1
 801241a:	f7ee fbb7 	bl	8000b8c <__aeabi_d2iz>
 801241e:	f7ee f89b 	bl	8000558 <__aeabi_i2d>
 8012422:	4602      	mov	r2, r0
 8012424:	460b      	mov	r3, r1
 8012426:	4630      	mov	r0, r6
 8012428:	4639      	mov	r1, r7
 801242a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801242e:	f7ed ff45 	bl	80002bc <__aeabi_dsub>
 8012432:	4b23      	ldr	r3, [pc, #140]	; (80124c0 <__ieee754_rem_pio2+0x410>)
 8012434:	2200      	movs	r2, #0
 8012436:	f7ee f8f9 	bl	800062c <__aeabi_dmul>
 801243a:	460f      	mov	r7, r1
 801243c:	4606      	mov	r6, r0
 801243e:	f7ee fba5 	bl	8000b8c <__aeabi_d2iz>
 8012442:	f7ee f889 	bl	8000558 <__aeabi_i2d>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	4630      	mov	r0, r6
 801244c:	4639      	mov	r1, r7
 801244e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012452:	f7ed ff33 	bl	80002bc <__aeabi_dsub>
 8012456:	4b1a      	ldr	r3, [pc, #104]	; (80124c0 <__ieee754_rem_pio2+0x410>)
 8012458:	2200      	movs	r2, #0
 801245a:	f7ee f8e7 	bl	800062c <__aeabi_dmul>
 801245e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012462:	ad04      	add	r5, sp, #16
 8012464:	f04f 0803 	mov.w	r8, #3
 8012468:	46a9      	mov	r9, r5
 801246a:	2600      	movs	r6, #0
 801246c:	2700      	movs	r7, #0
 801246e:	4632      	mov	r2, r6
 8012470:	463b      	mov	r3, r7
 8012472:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012476:	46c3      	mov	fp, r8
 8012478:	3d08      	subs	r5, #8
 801247a:	f108 38ff 	add.w	r8, r8, #4294967295
 801247e:	f7ee fb3d 	bl	8000afc <__aeabi_dcmpeq>
 8012482:	2800      	cmp	r0, #0
 8012484:	d1f3      	bne.n	801246e <__ieee754_rem_pio2+0x3be>
 8012486:	4b0f      	ldr	r3, [pc, #60]	; (80124c4 <__ieee754_rem_pio2+0x414>)
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	2302      	movs	r3, #2
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4622      	mov	r2, r4
 8012490:	465b      	mov	r3, fp
 8012492:	4651      	mov	r1, sl
 8012494:	4648      	mov	r0, r9
 8012496:	f000 f993 	bl	80127c0 <__kernel_rem_pio2>
 801249a:	9b02      	ldr	r3, [sp, #8]
 801249c:	2b00      	cmp	r3, #0
 801249e:	4683      	mov	fp, r0
 80124a0:	f6bf ae46 	bge.w	8012130 <__ieee754_rem_pio2+0x80>
 80124a4:	e9da 2100 	ldrd	r2, r1, [sl]
 80124a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124ac:	e9ca 2300 	strd	r2, r3, [sl]
 80124b0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80124b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124b8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80124bc:	e73a      	b.n	8012334 <__ieee754_rem_pio2+0x284>
 80124be:	bf00      	nop
 80124c0:	41700000 	.word	0x41700000
 80124c4:	08039ce8 	.word	0x08039ce8

080124c8 <__ieee754_sqrt>:
 80124c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124cc:	ec55 4b10 	vmov	r4, r5, d0
 80124d0:	4e55      	ldr	r6, [pc, #340]	; (8012628 <__ieee754_sqrt+0x160>)
 80124d2:	43ae      	bics	r6, r5
 80124d4:	ee10 0a10 	vmov	r0, s0
 80124d8:	ee10 3a10 	vmov	r3, s0
 80124dc:	462a      	mov	r2, r5
 80124de:	4629      	mov	r1, r5
 80124e0:	d110      	bne.n	8012504 <__ieee754_sqrt+0x3c>
 80124e2:	ee10 2a10 	vmov	r2, s0
 80124e6:	462b      	mov	r3, r5
 80124e8:	f7ee f8a0 	bl	800062c <__aeabi_dmul>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	4620      	mov	r0, r4
 80124f2:	4629      	mov	r1, r5
 80124f4:	f7ed fee4 	bl	80002c0 <__adddf3>
 80124f8:	4604      	mov	r4, r0
 80124fa:	460d      	mov	r5, r1
 80124fc:	ec45 4b10 	vmov	d0, r4, r5
 8012500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012504:	2d00      	cmp	r5, #0
 8012506:	dc10      	bgt.n	801252a <__ieee754_sqrt+0x62>
 8012508:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801250c:	4330      	orrs	r0, r6
 801250e:	d0f5      	beq.n	80124fc <__ieee754_sqrt+0x34>
 8012510:	b15d      	cbz	r5, 801252a <__ieee754_sqrt+0x62>
 8012512:	ee10 2a10 	vmov	r2, s0
 8012516:	462b      	mov	r3, r5
 8012518:	ee10 0a10 	vmov	r0, s0
 801251c:	f7ed fece 	bl	80002bc <__aeabi_dsub>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	f7ee f9ac 	bl	8000880 <__aeabi_ddiv>
 8012528:	e7e6      	b.n	80124f8 <__ieee754_sqrt+0x30>
 801252a:	1512      	asrs	r2, r2, #20
 801252c:	d074      	beq.n	8012618 <__ieee754_sqrt+0x150>
 801252e:	07d4      	lsls	r4, r2, #31
 8012530:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012534:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801253c:	bf5e      	ittt	pl
 801253e:	0fda      	lsrpl	r2, r3, #31
 8012540:	005b      	lslpl	r3, r3, #1
 8012542:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012546:	2400      	movs	r4, #0
 8012548:	0fda      	lsrs	r2, r3, #31
 801254a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801254e:	107f      	asrs	r7, r7, #1
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	2516      	movs	r5, #22
 8012554:	4620      	mov	r0, r4
 8012556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801255a:	1886      	adds	r6, r0, r2
 801255c:	428e      	cmp	r6, r1
 801255e:	bfde      	ittt	le
 8012560:	1b89      	suble	r1, r1, r6
 8012562:	18b0      	addle	r0, r6, r2
 8012564:	18a4      	addle	r4, r4, r2
 8012566:	0049      	lsls	r1, r1, #1
 8012568:	3d01      	subs	r5, #1
 801256a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801256e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012576:	d1f0      	bne.n	801255a <__ieee754_sqrt+0x92>
 8012578:	462a      	mov	r2, r5
 801257a:	f04f 0e20 	mov.w	lr, #32
 801257e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012582:	4281      	cmp	r1, r0
 8012584:	eb06 0c05 	add.w	ip, r6, r5
 8012588:	dc02      	bgt.n	8012590 <__ieee754_sqrt+0xc8>
 801258a:	d113      	bne.n	80125b4 <__ieee754_sqrt+0xec>
 801258c:	459c      	cmp	ip, r3
 801258e:	d811      	bhi.n	80125b4 <__ieee754_sqrt+0xec>
 8012590:	f1bc 0f00 	cmp.w	ip, #0
 8012594:	eb0c 0506 	add.w	r5, ip, r6
 8012598:	da43      	bge.n	8012622 <__ieee754_sqrt+0x15a>
 801259a:	2d00      	cmp	r5, #0
 801259c:	db41      	blt.n	8012622 <__ieee754_sqrt+0x15a>
 801259e:	f100 0801 	add.w	r8, r0, #1
 80125a2:	1a09      	subs	r1, r1, r0
 80125a4:	459c      	cmp	ip, r3
 80125a6:	bf88      	it	hi
 80125a8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80125ac:	eba3 030c 	sub.w	r3, r3, ip
 80125b0:	4432      	add	r2, r6
 80125b2:	4640      	mov	r0, r8
 80125b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80125b8:	f1be 0e01 	subs.w	lr, lr, #1
 80125bc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80125c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80125c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80125c8:	d1db      	bne.n	8012582 <__ieee754_sqrt+0xba>
 80125ca:	430b      	orrs	r3, r1
 80125cc:	d006      	beq.n	80125dc <__ieee754_sqrt+0x114>
 80125ce:	1c50      	adds	r0, r2, #1
 80125d0:	bf13      	iteet	ne
 80125d2:	3201      	addne	r2, #1
 80125d4:	3401      	addeq	r4, #1
 80125d6:	4672      	moveq	r2, lr
 80125d8:	f022 0201 	bicne.w	r2, r2, #1
 80125dc:	1063      	asrs	r3, r4, #1
 80125de:	0852      	lsrs	r2, r2, #1
 80125e0:	07e1      	lsls	r1, r4, #31
 80125e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80125e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80125ea:	bf48      	it	mi
 80125ec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80125f0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80125f4:	4614      	mov	r4, r2
 80125f6:	e781      	b.n	80124fc <__ieee754_sqrt+0x34>
 80125f8:	0ad9      	lsrs	r1, r3, #11
 80125fa:	3815      	subs	r0, #21
 80125fc:	055b      	lsls	r3, r3, #21
 80125fe:	2900      	cmp	r1, #0
 8012600:	d0fa      	beq.n	80125f8 <__ieee754_sqrt+0x130>
 8012602:	02cd      	lsls	r5, r1, #11
 8012604:	d50a      	bpl.n	801261c <__ieee754_sqrt+0x154>
 8012606:	f1c2 0420 	rsb	r4, r2, #32
 801260a:	fa23 f404 	lsr.w	r4, r3, r4
 801260e:	1e55      	subs	r5, r2, #1
 8012610:	4093      	lsls	r3, r2
 8012612:	4321      	orrs	r1, r4
 8012614:	1b42      	subs	r2, r0, r5
 8012616:	e78a      	b.n	801252e <__ieee754_sqrt+0x66>
 8012618:	4610      	mov	r0, r2
 801261a:	e7f0      	b.n	80125fe <__ieee754_sqrt+0x136>
 801261c:	0049      	lsls	r1, r1, #1
 801261e:	3201      	adds	r2, #1
 8012620:	e7ef      	b.n	8012602 <__ieee754_sqrt+0x13a>
 8012622:	4680      	mov	r8, r0
 8012624:	e7bd      	b.n	80125a2 <__ieee754_sqrt+0xda>
 8012626:	bf00      	nop
 8012628:	7ff00000 	.word	0x7ff00000
 801262c:	00000000 	.word	0x00000000

08012630 <__kernel_cos>:
 8012630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012634:	ec57 6b10 	vmov	r6, r7, d0
 8012638:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801263c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012640:	ed8d 1b00 	vstr	d1, [sp]
 8012644:	da07      	bge.n	8012656 <__kernel_cos+0x26>
 8012646:	ee10 0a10 	vmov	r0, s0
 801264a:	4639      	mov	r1, r7
 801264c:	f7ee fa9e 	bl	8000b8c <__aeabi_d2iz>
 8012650:	2800      	cmp	r0, #0
 8012652:	f000 8088 	beq.w	8012766 <__kernel_cos+0x136>
 8012656:	4632      	mov	r2, r6
 8012658:	463b      	mov	r3, r7
 801265a:	4630      	mov	r0, r6
 801265c:	4639      	mov	r1, r7
 801265e:	f7ed ffe5 	bl	800062c <__aeabi_dmul>
 8012662:	4b51      	ldr	r3, [pc, #324]	; (80127a8 <__kernel_cos+0x178>)
 8012664:	2200      	movs	r2, #0
 8012666:	4604      	mov	r4, r0
 8012668:	460d      	mov	r5, r1
 801266a:	f7ed ffdf 	bl	800062c <__aeabi_dmul>
 801266e:	a340      	add	r3, pc, #256	; (adr r3, 8012770 <__kernel_cos+0x140>)
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	4682      	mov	sl, r0
 8012676:	468b      	mov	fp, r1
 8012678:	4620      	mov	r0, r4
 801267a:	4629      	mov	r1, r5
 801267c:	f7ed ffd6 	bl	800062c <__aeabi_dmul>
 8012680:	a33d      	add	r3, pc, #244	; (adr r3, 8012778 <__kernel_cos+0x148>)
 8012682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012686:	f7ed fe1b 	bl	80002c0 <__adddf3>
 801268a:	4622      	mov	r2, r4
 801268c:	462b      	mov	r3, r5
 801268e:	f7ed ffcd 	bl	800062c <__aeabi_dmul>
 8012692:	a33b      	add	r3, pc, #236	; (adr r3, 8012780 <__kernel_cos+0x150>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	f7ed fe10 	bl	80002bc <__aeabi_dsub>
 801269c:	4622      	mov	r2, r4
 801269e:	462b      	mov	r3, r5
 80126a0:	f7ed ffc4 	bl	800062c <__aeabi_dmul>
 80126a4:	a338      	add	r3, pc, #224	; (adr r3, 8012788 <__kernel_cos+0x158>)
 80126a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126aa:	f7ed fe09 	bl	80002c0 <__adddf3>
 80126ae:	4622      	mov	r2, r4
 80126b0:	462b      	mov	r3, r5
 80126b2:	f7ed ffbb 	bl	800062c <__aeabi_dmul>
 80126b6:	a336      	add	r3, pc, #216	; (adr r3, 8012790 <__kernel_cos+0x160>)
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f7ed fdfe 	bl	80002bc <__aeabi_dsub>
 80126c0:	4622      	mov	r2, r4
 80126c2:	462b      	mov	r3, r5
 80126c4:	f7ed ffb2 	bl	800062c <__aeabi_dmul>
 80126c8:	a333      	add	r3, pc, #204	; (adr r3, 8012798 <__kernel_cos+0x168>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	f7ed fdf7 	bl	80002c0 <__adddf3>
 80126d2:	4622      	mov	r2, r4
 80126d4:	462b      	mov	r3, r5
 80126d6:	f7ed ffa9 	bl	800062c <__aeabi_dmul>
 80126da:	4622      	mov	r2, r4
 80126dc:	462b      	mov	r3, r5
 80126de:	f7ed ffa5 	bl	800062c <__aeabi_dmul>
 80126e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126e6:	4604      	mov	r4, r0
 80126e8:	460d      	mov	r5, r1
 80126ea:	4630      	mov	r0, r6
 80126ec:	4639      	mov	r1, r7
 80126ee:	f7ed ff9d 	bl	800062c <__aeabi_dmul>
 80126f2:	460b      	mov	r3, r1
 80126f4:	4602      	mov	r2, r0
 80126f6:	4629      	mov	r1, r5
 80126f8:	4620      	mov	r0, r4
 80126fa:	f7ed fddf 	bl	80002bc <__aeabi_dsub>
 80126fe:	4b2b      	ldr	r3, [pc, #172]	; (80127ac <__kernel_cos+0x17c>)
 8012700:	4598      	cmp	r8, r3
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	dc10      	bgt.n	801272a <__kernel_cos+0xfa>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4650      	mov	r0, sl
 801270e:	4659      	mov	r1, fp
 8012710:	f7ed fdd4 	bl	80002bc <__aeabi_dsub>
 8012714:	460b      	mov	r3, r1
 8012716:	4926      	ldr	r1, [pc, #152]	; (80127b0 <__kernel_cos+0x180>)
 8012718:	4602      	mov	r2, r0
 801271a:	2000      	movs	r0, #0
 801271c:	f7ed fdce 	bl	80002bc <__aeabi_dsub>
 8012720:	ec41 0b10 	vmov	d0, r0, r1
 8012724:	b003      	add	sp, #12
 8012726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272a:	4b22      	ldr	r3, [pc, #136]	; (80127b4 <__kernel_cos+0x184>)
 801272c:	4920      	ldr	r1, [pc, #128]	; (80127b0 <__kernel_cos+0x180>)
 801272e:	4598      	cmp	r8, r3
 8012730:	bfcc      	ite	gt
 8012732:	4d21      	ldrgt	r5, [pc, #132]	; (80127b8 <__kernel_cos+0x188>)
 8012734:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012738:	2400      	movs	r4, #0
 801273a:	4622      	mov	r2, r4
 801273c:	462b      	mov	r3, r5
 801273e:	2000      	movs	r0, #0
 8012740:	f7ed fdbc 	bl	80002bc <__aeabi_dsub>
 8012744:	4622      	mov	r2, r4
 8012746:	4680      	mov	r8, r0
 8012748:	4689      	mov	r9, r1
 801274a:	462b      	mov	r3, r5
 801274c:	4650      	mov	r0, sl
 801274e:	4659      	mov	r1, fp
 8012750:	f7ed fdb4 	bl	80002bc <__aeabi_dsub>
 8012754:	4632      	mov	r2, r6
 8012756:	463b      	mov	r3, r7
 8012758:	f7ed fdb0 	bl	80002bc <__aeabi_dsub>
 801275c:	4602      	mov	r2, r0
 801275e:	460b      	mov	r3, r1
 8012760:	4640      	mov	r0, r8
 8012762:	4649      	mov	r1, r9
 8012764:	e7da      	b.n	801271c <__kernel_cos+0xec>
 8012766:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80127a0 <__kernel_cos+0x170>
 801276a:	e7db      	b.n	8012724 <__kernel_cos+0xf4>
 801276c:	f3af 8000 	nop.w
 8012770:	be8838d4 	.word	0xbe8838d4
 8012774:	bda8fae9 	.word	0xbda8fae9
 8012778:	bdb4b1c4 	.word	0xbdb4b1c4
 801277c:	3e21ee9e 	.word	0x3e21ee9e
 8012780:	809c52ad 	.word	0x809c52ad
 8012784:	3e927e4f 	.word	0x3e927e4f
 8012788:	19cb1590 	.word	0x19cb1590
 801278c:	3efa01a0 	.word	0x3efa01a0
 8012790:	16c15177 	.word	0x16c15177
 8012794:	3f56c16c 	.word	0x3f56c16c
 8012798:	5555554c 	.word	0x5555554c
 801279c:	3fa55555 	.word	0x3fa55555
 80127a0:	00000000 	.word	0x00000000
 80127a4:	3ff00000 	.word	0x3ff00000
 80127a8:	3fe00000 	.word	0x3fe00000
 80127ac:	3fd33332 	.word	0x3fd33332
 80127b0:	3ff00000 	.word	0x3ff00000
 80127b4:	3fe90000 	.word	0x3fe90000
 80127b8:	3fd20000 	.word	0x3fd20000
 80127bc:	00000000 	.word	0x00000000

080127c0 <__kernel_rem_pio2>:
 80127c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c4:	ed2d 8b02 	vpush	{d8}
 80127c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80127cc:	f112 0f14 	cmn.w	r2, #20
 80127d0:	9308      	str	r3, [sp, #32]
 80127d2:	9101      	str	r1, [sp, #4]
 80127d4:	4bc4      	ldr	r3, [pc, #784]	; (8012ae8 <__kernel_rem_pio2+0x328>)
 80127d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80127d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80127da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127de:	9302      	str	r3, [sp, #8]
 80127e0:	9b08      	ldr	r3, [sp, #32]
 80127e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80127e6:	bfa8      	it	ge
 80127e8:	1ed4      	subge	r4, r2, #3
 80127ea:	9306      	str	r3, [sp, #24]
 80127ec:	bfb2      	itee	lt
 80127ee:	2400      	movlt	r4, #0
 80127f0:	2318      	movge	r3, #24
 80127f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80127f6:	f06f 0317 	mvn.w	r3, #23
 80127fa:	fb04 3303 	mla	r3, r4, r3, r3
 80127fe:	eb03 0a02 	add.w	sl, r3, r2
 8012802:	9b02      	ldr	r3, [sp, #8]
 8012804:	9a06      	ldr	r2, [sp, #24]
 8012806:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012ad8 <__kernel_rem_pio2+0x318>
 801280a:	eb03 0802 	add.w	r8, r3, r2
 801280e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012810:	1aa7      	subs	r7, r4, r2
 8012812:	ae22      	add	r6, sp, #136	; 0x88
 8012814:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012818:	2500      	movs	r5, #0
 801281a:	4545      	cmp	r5, r8
 801281c:	dd13      	ble.n	8012846 <__kernel_rem_pio2+0x86>
 801281e:	9b08      	ldr	r3, [sp, #32]
 8012820:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012ad8 <__kernel_rem_pio2+0x318>
 8012824:	aa22      	add	r2, sp, #136	; 0x88
 8012826:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801282a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801282e:	f04f 0800 	mov.w	r8, #0
 8012832:	9b02      	ldr	r3, [sp, #8]
 8012834:	4598      	cmp	r8, r3
 8012836:	dc2f      	bgt.n	8012898 <__kernel_rem_pio2+0xd8>
 8012838:	ed8d 8b04 	vstr	d8, [sp, #16]
 801283c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012840:	462f      	mov	r7, r5
 8012842:	2600      	movs	r6, #0
 8012844:	e01b      	b.n	801287e <__kernel_rem_pio2+0xbe>
 8012846:	42ef      	cmn	r7, r5
 8012848:	d407      	bmi.n	801285a <__kernel_rem_pio2+0x9a>
 801284a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801284e:	f7ed fe83 	bl	8000558 <__aeabi_i2d>
 8012852:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012856:	3501      	adds	r5, #1
 8012858:	e7df      	b.n	801281a <__kernel_rem_pio2+0x5a>
 801285a:	ec51 0b18 	vmov	r0, r1, d8
 801285e:	e7f8      	b.n	8012852 <__kernel_rem_pio2+0x92>
 8012860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012864:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012868:	f7ed fee0 	bl	800062c <__aeabi_dmul>
 801286c:	4602      	mov	r2, r0
 801286e:	460b      	mov	r3, r1
 8012870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012874:	f7ed fd24 	bl	80002c0 <__adddf3>
 8012878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801287c:	3601      	adds	r6, #1
 801287e:	9b06      	ldr	r3, [sp, #24]
 8012880:	429e      	cmp	r6, r3
 8012882:	f1a7 0708 	sub.w	r7, r7, #8
 8012886:	ddeb      	ble.n	8012860 <__kernel_rem_pio2+0xa0>
 8012888:	ed9d 7b04 	vldr	d7, [sp, #16]
 801288c:	f108 0801 	add.w	r8, r8, #1
 8012890:	ecab 7b02 	vstmia	fp!, {d7}
 8012894:	3508      	adds	r5, #8
 8012896:	e7cc      	b.n	8012832 <__kernel_rem_pio2+0x72>
 8012898:	9b02      	ldr	r3, [sp, #8]
 801289a:	aa0e      	add	r2, sp, #56	; 0x38
 801289c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80128a0:	930d      	str	r3, [sp, #52]	; 0x34
 80128a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80128a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80128a8:	9c02      	ldr	r4, [sp, #8]
 80128aa:	930c      	str	r3, [sp, #48]	; 0x30
 80128ac:	00e3      	lsls	r3, r4, #3
 80128ae:	930a      	str	r3, [sp, #40]	; 0x28
 80128b0:	ab9a      	add	r3, sp, #616	; 0x268
 80128b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80128ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80128be:	ab72      	add	r3, sp, #456	; 0x1c8
 80128c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80128c4:	46c3      	mov	fp, r8
 80128c6:	46a1      	mov	r9, r4
 80128c8:	f1b9 0f00 	cmp.w	r9, #0
 80128cc:	f1a5 0508 	sub.w	r5, r5, #8
 80128d0:	dc77      	bgt.n	80129c2 <__kernel_rem_pio2+0x202>
 80128d2:	ec47 6b10 	vmov	d0, r6, r7
 80128d6:	4650      	mov	r0, sl
 80128d8:	f000 fe5a 	bl	8013590 <scalbn>
 80128dc:	ec57 6b10 	vmov	r6, r7, d0
 80128e0:	2200      	movs	r2, #0
 80128e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80128e6:	ee10 0a10 	vmov	r0, s0
 80128ea:	4639      	mov	r1, r7
 80128ec:	f7ed fe9e 	bl	800062c <__aeabi_dmul>
 80128f0:	ec41 0b10 	vmov	d0, r0, r1
 80128f4:	f000 fdc4 	bl	8013480 <floor>
 80128f8:	4b7c      	ldr	r3, [pc, #496]	; (8012aec <__kernel_rem_pio2+0x32c>)
 80128fa:	ec51 0b10 	vmov	r0, r1, d0
 80128fe:	2200      	movs	r2, #0
 8012900:	f7ed fe94 	bl	800062c <__aeabi_dmul>
 8012904:	4602      	mov	r2, r0
 8012906:	460b      	mov	r3, r1
 8012908:	4630      	mov	r0, r6
 801290a:	4639      	mov	r1, r7
 801290c:	f7ed fcd6 	bl	80002bc <__aeabi_dsub>
 8012910:	460f      	mov	r7, r1
 8012912:	4606      	mov	r6, r0
 8012914:	f7ee f93a 	bl	8000b8c <__aeabi_d2iz>
 8012918:	9004      	str	r0, [sp, #16]
 801291a:	f7ed fe1d 	bl	8000558 <__aeabi_i2d>
 801291e:	4602      	mov	r2, r0
 8012920:	460b      	mov	r3, r1
 8012922:	4630      	mov	r0, r6
 8012924:	4639      	mov	r1, r7
 8012926:	f7ed fcc9 	bl	80002bc <__aeabi_dsub>
 801292a:	f1ba 0f00 	cmp.w	sl, #0
 801292e:	4606      	mov	r6, r0
 8012930:	460f      	mov	r7, r1
 8012932:	dd6d      	ble.n	8012a10 <__kernel_rem_pio2+0x250>
 8012934:	1e62      	subs	r2, r4, #1
 8012936:	ab0e      	add	r3, sp, #56	; 0x38
 8012938:	9d04      	ldr	r5, [sp, #16]
 801293a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801293e:	f1ca 0118 	rsb	r1, sl, #24
 8012942:	fa40 f301 	asr.w	r3, r0, r1
 8012946:	441d      	add	r5, r3
 8012948:	408b      	lsls	r3, r1
 801294a:	1ac0      	subs	r0, r0, r3
 801294c:	ab0e      	add	r3, sp, #56	; 0x38
 801294e:	9504      	str	r5, [sp, #16]
 8012950:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012954:	f1ca 0317 	rsb	r3, sl, #23
 8012958:	fa40 fb03 	asr.w	fp, r0, r3
 801295c:	f1bb 0f00 	cmp.w	fp, #0
 8012960:	dd65      	ble.n	8012a2e <__kernel_rem_pio2+0x26e>
 8012962:	9b04      	ldr	r3, [sp, #16]
 8012964:	2200      	movs	r2, #0
 8012966:	3301      	adds	r3, #1
 8012968:	9304      	str	r3, [sp, #16]
 801296a:	4615      	mov	r5, r2
 801296c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012970:	4294      	cmp	r4, r2
 8012972:	f300 809c 	bgt.w	8012aae <__kernel_rem_pio2+0x2ee>
 8012976:	f1ba 0f00 	cmp.w	sl, #0
 801297a:	dd07      	ble.n	801298c <__kernel_rem_pio2+0x1cc>
 801297c:	f1ba 0f01 	cmp.w	sl, #1
 8012980:	f000 80c0 	beq.w	8012b04 <__kernel_rem_pio2+0x344>
 8012984:	f1ba 0f02 	cmp.w	sl, #2
 8012988:	f000 80c6 	beq.w	8012b18 <__kernel_rem_pio2+0x358>
 801298c:	f1bb 0f02 	cmp.w	fp, #2
 8012990:	d14d      	bne.n	8012a2e <__kernel_rem_pio2+0x26e>
 8012992:	4632      	mov	r2, r6
 8012994:	463b      	mov	r3, r7
 8012996:	4956      	ldr	r1, [pc, #344]	; (8012af0 <__kernel_rem_pio2+0x330>)
 8012998:	2000      	movs	r0, #0
 801299a:	f7ed fc8f 	bl	80002bc <__aeabi_dsub>
 801299e:	4606      	mov	r6, r0
 80129a0:	460f      	mov	r7, r1
 80129a2:	2d00      	cmp	r5, #0
 80129a4:	d043      	beq.n	8012a2e <__kernel_rem_pio2+0x26e>
 80129a6:	4650      	mov	r0, sl
 80129a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012ae0 <__kernel_rem_pio2+0x320>
 80129ac:	f000 fdf0 	bl	8013590 <scalbn>
 80129b0:	4630      	mov	r0, r6
 80129b2:	4639      	mov	r1, r7
 80129b4:	ec53 2b10 	vmov	r2, r3, d0
 80129b8:	f7ed fc80 	bl	80002bc <__aeabi_dsub>
 80129bc:	4606      	mov	r6, r0
 80129be:	460f      	mov	r7, r1
 80129c0:	e035      	b.n	8012a2e <__kernel_rem_pio2+0x26e>
 80129c2:	4b4c      	ldr	r3, [pc, #304]	; (8012af4 <__kernel_rem_pio2+0x334>)
 80129c4:	2200      	movs	r2, #0
 80129c6:	4630      	mov	r0, r6
 80129c8:	4639      	mov	r1, r7
 80129ca:	f7ed fe2f 	bl	800062c <__aeabi_dmul>
 80129ce:	f7ee f8dd 	bl	8000b8c <__aeabi_d2iz>
 80129d2:	f7ed fdc1 	bl	8000558 <__aeabi_i2d>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	ec43 2b18 	vmov	d8, r2, r3
 80129de:	4b46      	ldr	r3, [pc, #280]	; (8012af8 <__kernel_rem_pio2+0x338>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	f7ed fe23 	bl	800062c <__aeabi_dmul>
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	4630      	mov	r0, r6
 80129ec:	4639      	mov	r1, r7
 80129ee:	f7ed fc65 	bl	80002bc <__aeabi_dsub>
 80129f2:	f7ee f8cb 	bl	8000b8c <__aeabi_d2iz>
 80129f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129fa:	f84b 0b04 	str.w	r0, [fp], #4
 80129fe:	ec51 0b18 	vmov	r0, r1, d8
 8012a02:	f7ed fc5d 	bl	80002c0 <__adddf3>
 8012a06:	f109 39ff 	add.w	r9, r9, #4294967295
 8012a0a:	4606      	mov	r6, r0
 8012a0c:	460f      	mov	r7, r1
 8012a0e:	e75b      	b.n	80128c8 <__kernel_rem_pio2+0x108>
 8012a10:	d106      	bne.n	8012a20 <__kernel_rem_pio2+0x260>
 8012a12:	1e63      	subs	r3, r4, #1
 8012a14:	aa0e      	add	r2, sp, #56	; 0x38
 8012a16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a1a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012a1e:	e79d      	b.n	801295c <__kernel_rem_pio2+0x19c>
 8012a20:	4b36      	ldr	r3, [pc, #216]	; (8012afc <__kernel_rem_pio2+0x33c>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	f7ee f888 	bl	8000b38 <__aeabi_dcmpge>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d13d      	bne.n	8012aa8 <__kernel_rem_pio2+0x2e8>
 8012a2c:	4683      	mov	fp, r0
 8012a2e:	2200      	movs	r2, #0
 8012a30:	2300      	movs	r3, #0
 8012a32:	4630      	mov	r0, r6
 8012a34:	4639      	mov	r1, r7
 8012a36:	f7ee f861 	bl	8000afc <__aeabi_dcmpeq>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	f000 80c0 	beq.w	8012bc0 <__kernel_rem_pio2+0x400>
 8012a40:	1e65      	subs	r5, r4, #1
 8012a42:	462b      	mov	r3, r5
 8012a44:	2200      	movs	r2, #0
 8012a46:	9902      	ldr	r1, [sp, #8]
 8012a48:	428b      	cmp	r3, r1
 8012a4a:	da6c      	bge.n	8012b26 <__kernel_rem_pio2+0x366>
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	f000 8089 	beq.w	8012b64 <__kernel_rem_pio2+0x3a4>
 8012a52:	ab0e      	add	r3, sp, #56	; 0x38
 8012a54:	f1aa 0a18 	sub.w	sl, sl, #24
 8012a58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 80ad 	beq.w	8012bbc <__kernel_rem_pio2+0x3fc>
 8012a62:	4650      	mov	r0, sl
 8012a64:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012ae0 <__kernel_rem_pio2+0x320>
 8012a68:	f000 fd92 	bl	8013590 <scalbn>
 8012a6c:	ab9a      	add	r3, sp, #616	; 0x268
 8012a6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012a72:	ec57 6b10 	vmov	r6, r7, d0
 8012a76:	00ec      	lsls	r4, r5, #3
 8012a78:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012a7c:	46aa      	mov	sl, r5
 8012a7e:	f1ba 0f00 	cmp.w	sl, #0
 8012a82:	f280 80d6 	bge.w	8012c32 <__kernel_rem_pio2+0x472>
 8012a86:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012ad8 <__kernel_rem_pio2+0x318>
 8012a8a:	462e      	mov	r6, r5
 8012a8c:	2e00      	cmp	r6, #0
 8012a8e:	f2c0 8104 	blt.w	8012c9a <__kernel_rem_pio2+0x4da>
 8012a92:	ab72      	add	r3, sp, #456	; 0x1c8
 8012a94:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012a98:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012b00 <__kernel_rem_pio2+0x340>
 8012a9c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012aa0:	f04f 0800 	mov.w	r8, #0
 8012aa4:	1baf      	subs	r7, r5, r6
 8012aa6:	e0ea      	b.n	8012c7e <__kernel_rem_pio2+0x4be>
 8012aa8:	f04f 0b02 	mov.w	fp, #2
 8012aac:	e759      	b.n	8012962 <__kernel_rem_pio2+0x1a2>
 8012aae:	f8d8 3000 	ldr.w	r3, [r8]
 8012ab2:	b955      	cbnz	r5, 8012aca <__kernel_rem_pio2+0x30a>
 8012ab4:	b123      	cbz	r3, 8012ac0 <__kernel_rem_pio2+0x300>
 8012ab6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012aba:	f8c8 3000 	str.w	r3, [r8]
 8012abe:	2301      	movs	r3, #1
 8012ac0:	3201      	adds	r2, #1
 8012ac2:	f108 0804 	add.w	r8, r8, #4
 8012ac6:	461d      	mov	r5, r3
 8012ac8:	e752      	b.n	8012970 <__kernel_rem_pio2+0x1b0>
 8012aca:	1acb      	subs	r3, r1, r3
 8012acc:	f8c8 3000 	str.w	r3, [r8]
 8012ad0:	462b      	mov	r3, r5
 8012ad2:	e7f5      	b.n	8012ac0 <__kernel_rem_pio2+0x300>
 8012ad4:	f3af 8000 	nop.w
	...
 8012ae4:	3ff00000 	.word	0x3ff00000
 8012ae8:	08039e30 	.word	0x08039e30
 8012aec:	40200000 	.word	0x40200000
 8012af0:	3ff00000 	.word	0x3ff00000
 8012af4:	3e700000 	.word	0x3e700000
 8012af8:	41700000 	.word	0x41700000
 8012afc:	3fe00000 	.word	0x3fe00000
 8012b00:	08039df0 	.word	0x08039df0
 8012b04:	1e62      	subs	r2, r4, #1
 8012b06:	ab0e      	add	r3, sp, #56	; 0x38
 8012b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012b10:	a90e      	add	r1, sp, #56	; 0x38
 8012b12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012b16:	e739      	b.n	801298c <__kernel_rem_pio2+0x1cc>
 8012b18:	1e62      	subs	r2, r4, #1
 8012b1a:	ab0e      	add	r3, sp, #56	; 0x38
 8012b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012b24:	e7f4      	b.n	8012b10 <__kernel_rem_pio2+0x350>
 8012b26:	a90e      	add	r1, sp, #56	; 0x38
 8012b28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	430a      	orrs	r2, r1
 8012b30:	e789      	b.n	8012a46 <__kernel_rem_pio2+0x286>
 8012b32:	3301      	adds	r3, #1
 8012b34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012b38:	2900      	cmp	r1, #0
 8012b3a:	d0fa      	beq.n	8012b32 <__kernel_rem_pio2+0x372>
 8012b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b3e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8012b42:	446a      	add	r2, sp
 8012b44:	3a98      	subs	r2, #152	; 0x98
 8012b46:	920a      	str	r2, [sp, #40]	; 0x28
 8012b48:	9a08      	ldr	r2, [sp, #32]
 8012b4a:	18e3      	adds	r3, r4, r3
 8012b4c:	18a5      	adds	r5, r4, r2
 8012b4e:	aa22      	add	r2, sp, #136	; 0x88
 8012b50:	f104 0801 	add.w	r8, r4, #1
 8012b54:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012b58:	9304      	str	r3, [sp, #16]
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	4543      	cmp	r3, r8
 8012b5e:	da04      	bge.n	8012b6a <__kernel_rem_pio2+0x3aa>
 8012b60:	461c      	mov	r4, r3
 8012b62:	e6a3      	b.n	80128ac <__kernel_rem_pio2+0xec>
 8012b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b66:	2301      	movs	r3, #1
 8012b68:	e7e4      	b.n	8012b34 <__kernel_rem_pio2+0x374>
 8012b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b6c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012b70:	f7ed fcf2 	bl	8000558 <__aeabi_i2d>
 8012b74:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b7a:	46ab      	mov	fp, r5
 8012b7c:	461c      	mov	r4, r3
 8012b7e:	f04f 0900 	mov.w	r9, #0
 8012b82:	2600      	movs	r6, #0
 8012b84:	2700      	movs	r7, #0
 8012b86:	9b06      	ldr	r3, [sp, #24]
 8012b88:	4599      	cmp	r9, r3
 8012b8a:	dd06      	ble.n	8012b9a <__kernel_rem_pio2+0x3da>
 8012b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b8e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012b92:	f108 0801 	add.w	r8, r8, #1
 8012b96:	930a      	str	r3, [sp, #40]	; 0x28
 8012b98:	e7df      	b.n	8012b5a <__kernel_rem_pio2+0x39a>
 8012b9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012b9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ba2:	f7ed fd43 	bl	800062c <__aeabi_dmul>
 8012ba6:	4602      	mov	r2, r0
 8012ba8:	460b      	mov	r3, r1
 8012baa:	4630      	mov	r0, r6
 8012bac:	4639      	mov	r1, r7
 8012bae:	f7ed fb87 	bl	80002c0 <__adddf3>
 8012bb2:	f109 0901 	add.w	r9, r9, #1
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	460f      	mov	r7, r1
 8012bba:	e7e4      	b.n	8012b86 <__kernel_rem_pio2+0x3c6>
 8012bbc:	3d01      	subs	r5, #1
 8012bbe:	e748      	b.n	8012a52 <__kernel_rem_pio2+0x292>
 8012bc0:	ec47 6b10 	vmov	d0, r6, r7
 8012bc4:	f1ca 0000 	rsb	r0, sl, #0
 8012bc8:	f000 fce2 	bl	8013590 <scalbn>
 8012bcc:	ec57 6b10 	vmov	r6, r7, d0
 8012bd0:	4ba0      	ldr	r3, [pc, #640]	; (8012e54 <__kernel_rem_pio2+0x694>)
 8012bd2:	ee10 0a10 	vmov	r0, s0
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	4639      	mov	r1, r7
 8012bda:	f7ed ffad 	bl	8000b38 <__aeabi_dcmpge>
 8012bde:	b1f8      	cbz	r0, 8012c20 <__kernel_rem_pio2+0x460>
 8012be0:	4b9d      	ldr	r3, [pc, #628]	; (8012e58 <__kernel_rem_pio2+0x698>)
 8012be2:	2200      	movs	r2, #0
 8012be4:	4630      	mov	r0, r6
 8012be6:	4639      	mov	r1, r7
 8012be8:	f7ed fd20 	bl	800062c <__aeabi_dmul>
 8012bec:	f7ed ffce 	bl	8000b8c <__aeabi_d2iz>
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	f7ed fcb1 	bl	8000558 <__aeabi_i2d>
 8012bf6:	4b97      	ldr	r3, [pc, #604]	; (8012e54 <__kernel_rem_pio2+0x694>)
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	f7ed fd17 	bl	800062c <__aeabi_dmul>
 8012bfe:	460b      	mov	r3, r1
 8012c00:	4602      	mov	r2, r0
 8012c02:	4639      	mov	r1, r7
 8012c04:	4630      	mov	r0, r6
 8012c06:	f7ed fb59 	bl	80002bc <__aeabi_dsub>
 8012c0a:	f7ed ffbf 	bl	8000b8c <__aeabi_d2iz>
 8012c0e:	1c65      	adds	r5, r4, #1
 8012c10:	ab0e      	add	r3, sp, #56	; 0x38
 8012c12:	f10a 0a18 	add.w	sl, sl, #24
 8012c16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c1a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012c1e:	e720      	b.n	8012a62 <__kernel_rem_pio2+0x2a2>
 8012c20:	4630      	mov	r0, r6
 8012c22:	4639      	mov	r1, r7
 8012c24:	f7ed ffb2 	bl	8000b8c <__aeabi_d2iz>
 8012c28:	ab0e      	add	r3, sp, #56	; 0x38
 8012c2a:	4625      	mov	r5, r4
 8012c2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c30:	e717      	b.n	8012a62 <__kernel_rem_pio2+0x2a2>
 8012c32:	ab0e      	add	r3, sp, #56	; 0x38
 8012c34:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012c38:	f7ed fc8e 	bl	8000558 <__aeabi_i2d>
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	463b      	mov	r3, r7
 8012c40:	f7ed fcf4 	bl	800062c <__aeabi_dmul>
 8012c44:	4b84      	ldr	r3, [pc, #528]	; (8012e58 <__kernel_rem_pio2+0x698>)
 8012c46:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	4639      	mov	r1, r7
 8012c50:	f7ed fcec 	bl	800062c <__aeabi_dmul>
 8012c54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c58:	4606      	mov	r6, r0
 8012c5a:	460f      	mov	r7, r1
 8012c5c:	e70f      	b.n	8012a7e <__kernel_rem_pio2+0x2be>
 8012c5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012c62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012c66:	f7ed fce1 	bl	800062c <__aeabi_dmul>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c72:	f7ed fb25 	bl	80002c0 <__adddf3>
 8012c76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c7a:	f108 0801 	add.w	r8, r8, #1
 8012c7e:	9b02      	ldr	r3, [sp, #8]
 8012c80:	4598      	cmp	r8, r3
 8012c82:	dc01      	bgt.n	8012c88 <__kernel_rem_pio2+0x4c8>
 8012c84:	45b8      	cmp	r8, r7
 8012c86:	ddea      	ble.n	8012c5e <__kernel_rem_pio2+0x49e>
 8012c88:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012c8c:	ab4a      	add	r3, sp, #296	; 0x128
 8012c8e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012c92:	ed87 7b00 	vstr	d7, [r7]
 8012c96:	3e01      	subs	r6, #1
 8012c98:	e6f8      	b.n	8012a8c <__kernel_rem_pio2+0x2cc>
 8012c9a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	dc0b      	bgt.n	8012cb8 <__kernel_rem_pio2+0x4f8>
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dc35      	bgt.n	8012d10 <__kernel_rem_pio2+0x550>
 8012ca4:	d059      	beq.n	8012d5a <__kernel_rem_pio2+0x59a>
 8012ca6:	9b04      	ldr	r3, [sp, #16]
 8012ca8:	f003 0007 	and.w	r0, r3, #7
 8012cac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012cb0:	ecbd 8b02 	vpop	{d8}
 8012cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012cba:	2b03      	cmp	r3, #3
 8012cbc:	d1f3      	bne.n	8012ca6 <__kernel_rem_pio2+0x4e6>
 8012cbe:	ab4a      	add	r3, sp, #296	; 0x128
 8012cc0:	4423      	add	r3, r4
 8012cc2:	9306      	str	r3, [sp, #24]
 8012cc4:	461c      	mov	r4, r3
 8012cc6:	469a      	mov	sl, r3
 8012cc8:	9502      	str	r5, [sp, #8]
 8012cca:	9b02      	ldr	r3, [sp, #8]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f1aa 0a08 	sub.w	sl, sl, #8
 8012cd2:	dc6b      	bgt.n	8012dac <__kernel_rem_pio2+0x5ec>
 8012cd4:	46aa      	mov	sl, r5
 8012cd6:	f1ba 0f01 	cmp.w	sl, #1
 8012cda:	f1a4 0408 	sub.w	r4, r4, #8
 8012cde:	f300 8085 	bgt.w	8012dec <__kernel_rem_pio2+0x62c>
 8012ce2:	9c06      	ldr	r4, [sp, #24]
 8012ce4:	2000      	movs	r0, #0
 8012ce6:	3408      	adds	r4, #8
 8012ce8:	2100      	movs	r1, #0
 8012cea:	2d01      	cmp	r5, #1
 8012cec:	f300 809d 	bgt.w	8012e2a <__kernel_rem_pio2+0x66a>
 8012cf0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012cf4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012cf8:	f1bb 0f00 	cmp.w	fp, #0
 8012cfc:	f040 809b 	bne.w	8012e36 <__kernel_rem_pio2+0x676>
 8012d00:	9b01      	ldr	r3, [sp, #4]
 8012d02:	e9c3 5600 	strd	r5, r6, [r3]
 8012d06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012d0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012d0e:	e7ca      	b.n	8012ca6 <__kernel_rem_pio2+0x4e6>
 8012d10:	3408      	adds	r4, #8
 8012d12:	ab4a      	add	r3, sp, #296	; 0x128
 8012d14:	441c      	add	r4, r3
 8012d16:	462e      	mov	r6, r5
 8012d18:	2000      	movs	r0, #0
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	2e00      	cmp	r6, #0
 8012d1e:	da36      	bge.n	8012d8e <__kernel_rem_pio2+0x5ce>
 8012d20:	f1bb 0f00 	cmp.w	fp, #0
 8012d24:	d039      	beq.n	8012d9a <__kernel_rem_pio2+0x5da>
 8012d26:	4602      	mov	r2, r0
 8012d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d2c:	9c01      	ldr	r4, [sp, #4]
 8012d2e:	e9c4 2300 	strd	r2, r3, [r4]
 8012d32:	4602      	mov	r2, r0
 8012d34:	460b      	mov	r3, r1
 8012d36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012d3a:	f7ed fabf 	bl	80002bc <__aeabi_dsub>
 8012d3e:	ae4c      	add	r6, sp, #304	; 0x130
 8012d40:	2401      	movs	r4, #1
 8012d42:	42a5      	cmp	r5, r4
 8012d44:	da2c      	bge.n	8012da0 <__kernel_rem_pio2+0x5e0>
 8012d46:	f1bb 0f00 	cmp.w	fp, #0
 8012d4a:	d002      	beq.n	8012d52 <__kernel_rem_pio2+0x592>
 8012d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d50:	4619      	mov	r1, r3
 8012d52:	9b01      	ldr	r3, [sp, #4]
 8012d54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012d58:	e7a5      	b.n	8012ca6 <__kernel_rem_pio2+0x4e6>
 8012d5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012d5e:	eb0d 0403 	add.w	r4, sp, r3
 8012d62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012d66:	2000      	movs	r0, #0
 8012d68:	2100      	movs	r1, #0
 8012d6a:	2d00      	cmp	r5, #0
 8012d6c:	da09      	bge.n	8012d82 <__kernel_rem_pio2+0x5c2>
 8012d6e:	f1bb 0f00 	cmp.w	fp, #0
 8012d72:	d002      	beq.n	8012d7a <__kernel_rem_pio2+0x5ba>
 8012d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d78:	4619      	mov	r1, r3
 8012d7a:	9b01      	ldr	r3, [sp, #4]
 8012d7c:	e9c3 0100 	strd	r0, r1, [r3]
 8012d80:	e791      	b.n	8012ca6 <__kernel_rem_pio2+0x4e6>
 8012d82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d86:	f7ed fa9b 	bl	80002c0 <__adddf3>
 8012d8a:	3d01      	subs	r5, #1
 8012d8c:	e7ed      	b.n	8012d6a <__kernel_rem_pio2+0x5aa>
 8012d8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d92:	f7ed fa95 	bl	80002c0 <__adddf3>
 8012d96:	3e01      	subs	r6, #1
 8012d98:	e7c0      	b.n	8012d1c <__kernel_rem_pio2+0x55c>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	e7c5      	b.n	8012d2c <__kernel_rem_pio2+0x56c>
 8012da0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012da4:	f7ed fa8c 	bl	80002c0 <__adddf3>
 8012da8:	3401      	adds	r4, #1
 8012daa:	e7ca      	b.n	8012d42 <__kernel_rem_pio2+0x582>
 8012dac:	e9da 8900 	ldrd	r8, r9, [sl]
 8012db0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012db4:	9b02      	ldr	r3, [sp, #8]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	9302      	str	r3, [sp, #8]
 8012dba:	4632      	mov	r2, r6
 8012dbc:	463b      	mov	r3, r7
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	4649      	mov	r1, r9
 8012dc2:	f7ed fa7d 	bl	80002c0 <__adddf3>
 8012dc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012dca:	4602      	mov	r2, r0
 8012dcc:	460b      	mov	r3, r1
 8012dce:	4640      	mov	r0, r8
 8012dd0:	4649      	mov	r1, r9
 8012dd2:	f7ed fa73 	bl	80002bc <__aeabi_dsub>
 8012dd6:	4632      	mov	r2, r6
 8012dd8:	463b      	mov	r3, r7
 8012dda:	f7ed fa71 	bl	80002c0 <__adddf3>
 8012dde:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012de2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012de6:	ed8a 7b00 	vstr	d7, [sl]
 8012dea:	e76e      	b.n	8012cca <__kernel_rem_pio2+0x50a>
 8012dec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012df0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012df4:	4640      	mov	r0, r8
 8012df6:	4632      	mov	r2, r6
 8012df8:	463b      	mov	r3, r7
 8012dfa:	4649      	mov	r1, r9
 8012dfc:	f7ed fa60 	bl	80002c0 <__adddf3>
 8012e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	4640      	mov	r0, r8
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	f7ed fa56 	bl	80002bc <__aeabi_dsub>
 8012e10:	4632      	mov	r2, r6
 8012e12:	463b      	mov	r3, r7
 8012e14:	f7ed fa54 	bl	80002c0 <__adddf3>
 8012e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e20:	ed84 7b00 	vstr	d7, [r4]
 8012e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e28:	e755      	b.n	8012cd6 <__kernel_rem_pio2+0x516>
 8012e2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e2e:	f7ed fa47 	bl	80002c0 <__adddf3>
 8012e32:	3d01      	subs	r5, #1
 8012e34:	e759      	b.n	8012cea <__kernel_rem_pio2+0x52a>
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	9a01      	ldr	r2, [sp, #4]
 8012e3a:	601d      	str	r5, [r3, #0]
 8012e3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012e40:	605c      	str	r4, [r3, #4]
 8012e42:	609f      	str	r7, [r3, #8]
 8012e44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012e48:	60d3      	str	r3, [r2, #12]
 8012e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e4e:	6110      	str	r0, [r2, #16]
 8012e50:	6153      	str	r3, [r2, #20]
 8012e52:	e728      	b.n	8012ca6 <__kernel_rem_pio2+0x4e6>
 8012e54:	41700000 	.word	0x41700000
 8012e58:	3e700000 	.word	0x3e700000
 8012e5c:	00000000 	.word	0x00000000

08012e60 <__kernel_sin>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	ed2d 8b04 	vpush	{d8-d9}
 8012e68:	eeb0 8a41 	vmov.f32	s16, s2
 8012e6c:	eef0 8a61 	vmov.f32	s17, s3
 8012e70:	ec55 4b10 	vmov	r4, r5, d0
 8012e74:	b083      	sub	sp, #12
 8012e76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012e7e:	9001      	str	r0, [sp, #4]
 8012e80:	da06      	bge.n	8012e90 <__kernel_sin+0x30>
 8012e82:	ee10 0a10 	vmov	r0, s0
 8012e86:	4629      	mov	r1, r5
 8012e88:	f7ed fe80 	bl	8000b8c <__aeabi_d2iz>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d051      	beq.n	8012f34 <__kernel_sin+0xd4>
 8012e90:	4622      	mov	r2, r4
 8012e92:	462b      	mov	r3, r5
 8012e94:	4620      	mov	r0, r4
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fbc8 	bl	800062c <__aeabi_dmul>
 8012e9c:	4682      	mov	sl, r0
 8012e9e:	468b      	mov	fp, r1
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	4629      	mov	r1, r5
 8012ea8:	f7ed fbc0 	bl	800062c <__aeabi_dmul>
 8012eac:	a341      	add	r3, pc, #260	; (adr r3, 8012fb4 <__kernel_sin+0x154>)
 8012eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb2:	4680      	mov	r8, r0
 8012eb4:	4689      	mov	r9, r1
 8012eb6:	4650      	mov	r0, sl
 8012eb8:	4659      	mov	r1, fp
 8012eba:	f7ed fbb7 	bl	800062c <__aeabi_dmul>
 8012ebe:	a33f      	add	r3, pc, #252	; (adr r3, 8012fbc <__kernel_sin+0x15c>)
 8012ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec4:	f7ed f9fa 	bl	80002bc <__aeabi_dsub>
 8012ec8:	4652      	mov	r2, sl
 8012eca:	465b      	mov	r3, fp
 8012ecc:	f7ed fbae 	bl	800062c <__aeabi_dmul>
 8012ed0:	a33c      	add	r3, pc, #240	; (adr r3, 8012fc4 <__kernel_sin+0x164>)
 8012ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed6:	f7ed f9f3 	bl	80002c0 <__adddf3>
 8012eda:	4652      	mov	r2, sl
 8012edc:	465b      	mov	r3, fp
 8012ede:	f7ed fba5 	bl	800062c <__aeabi_dmul>
 8012ee2:	a33a      	add	r3, pc, #232	; (adr r3, 8012fcc <__kernel_sin+0x16c>)
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee8:	f7ed f9e8 	bl	80002bc <__aeabi_dsub>
 8012eec:	4652      	mov	r2, sl
 8012eee:	465b      	mov	r3, fp
 8012ef0:	f7ed fb9c 	bl	800062c <__aeabi_dmul>
 8012ef4:	a337      	add	r3, pc, #220	; (adr r3, 8012fd4 <__kernel_sin+0x174>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	f7ed f9e1 	bl	80002c0 <__adddf3>
 8012efe:	9b01      	ldr	r3, [sp, #4]
 8012f00:	4606      	mov	r6, r0
 8012f02:	460f      	mov	r7, r1
 8012f04:	b9eb      	cbnz	r3, 8012f42 <__kernel_sin+0xe2>
 8012f06:	4602      	mov	r2, r0
 8012f08:	460b      	mov	r3, r1
 8012f0a:	4650      	mov	r0, sl
 8012f0c:	4659      	mov	r1, fp
 8012f0e:	f7ed fb8d 	bl	800062c <__aeabi_dmul>
 8012f12:	a325      	add	r3, pc, #148	; (adr r3, 8012fa8 <__kernel_sin+0x148>)
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	f7ed f9d0 	bl	80002bc <__aeabi_dsub>
 8012f1c:	4642      	mov	r2, r8
 8012f1e:	464b      	mov	r3, r9
 8012f20:	f7ed fb84 	bl	800062c <__aeabi_dmul>
 8012f24:	4602      	mov	r2, r0
 8012f26:	460b      	mov	r3, r1
 8012f28:	4620      	mov	r0, r4
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	f7ed f9c8 	bl	80002c0 <__adddf3>
 8012f30:	4604      	mov	r4, r0
 8012f32:	460d      	mov	r5, r1
 8012f34:	ec45 4b10 	vmov	d0, r4, r5
 8012f38:	b003      	add	sp, #12
 8012f3a:	ecbd 8b04 	vpop	{d8-d9}
 8012f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f42:	4b1b      	ldr	r3, [pc, #108]	; (8012fb0 <__kernel_sin+0x150>)
 8012f44:	ec51 0b18 	vmov	r0, r1, d8
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f7ed fb6f 	bl	800062c <__aeabi_dmul>
 8012f4e:	4632      	mov	r2, r6
 8012f50:	ec41 0b19 	vmov	d9, r0, r1
 8012f54:	463b      	mov	r3, r7
 8012f56:	4640      	mov	r0, r8
 8012f58:	4649      	mov	r1, r9
 8012f5a:	f7ed fb67 	bl	800062c <__aeabi_dmul>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	460b      	mov	r3, r1
 8012f62:	ec51 0b19 	vmov	r0, r1, d9
 8012f66:	f7ed f9a9 	bl	80002bc <__aeabi_dsub>
 8012f6a:	4652      	mov	r2, sl
 8012f6c:	465b      	mov	r3, fp
 8012f6e:	f7ed fb5d 	bl	800062c <__aeabi_dmul>
 8012f72:	ec53 2b18 	vmov	r2, r3, d8
 8012f76:	f7ed f9a1 	bl	80002bc <__aeabi_dsub>
 8012f7a:	a30b      	add	r3, pc, #44	; (adr r3, 8012fa8 <__kernel_sin+0x148>)
 8012f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f80:	4606      	mov	r6, r0
 8012f82:	460f      	mov	r7, r1
 8012f84:	4640      	mov	r0, r8
 8012f86:	4649      	mov	r1, r9
 8012f88:	f7ed fb50 	bl	800062c <__aeabi_dmul>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7ed f994 	bl	80002c0 <__adddf3>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	4629      	mov	r1, r5
 8012fa0:	f7ed f98c 	bl	80002bc <__aeabi_dsub>
 8012fa4:	e7c4      	b.n	8012f30 <__kernel_sin+0xd0>
 8012fa6:	bf00      	nop
 8012fa8:	55555549 	.word	0x55555549
 8012fac:	3fc55555 	.word	0x3fc55555
 8012fb0:	3fe00000 	.word	0x3fe00000
 8012fb4:	5acfd57c 	.word	0x5acfd57c
 8012fb8:	3de5d93a 	.word	0x3de5d93a
 8012fbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8012fc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8012fc4:	57b1fe7d 	.word	0x57b1fe7d
 8012fc8:	3ec71de3 	.word	0x3ec71de3
 8012fcc:	19c161d5 	.word	0x19c161d5
 8012fd0:	3f2a01a0 	.word	0x3f2a01a0
 8012fd4:	1110f8a6 	.word	0x1110f8a6
 8012fd8:	3f811111 	.word	0x3f811111
 8012fdc:	00000000 	.word	0x00000000

08012fe0 <__kernel_tan>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	ed2d 8b06 	vpush	{d8-d10}
 8012fe8:	ec5b ab10 	vmov	sl, fp, d0
 8012fec:	4be0      	ldr	r3, [pc, #896]	; (8013370 <__kernel_tan+0x390>)
 8012fee:	b083      	sub	sp, #12
 8012ff0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8012ff4:	429f      	cmp	r7, r3
 8012ff6:	ec59 8b11 	vmov	r8, r9, d1
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	f8cd b000 	str.w	fp, [sp]
 8013000:	dc61      	bgt.n	80130c6 <__kernel_tan+0xe6>
 8013002:	ee10 0a10 	vmov	r0, s0
 8013006:	4659      	mov	r1, fp
 8013008:	f7ed fdc0 	bl	8000b8c <__aeabi_d2iz>
 801300c:	4605      	mov	r5, r0
 801300e:	2800      	cmp	r0, #0
 8013010:	f040 8083 	bne.w	801311a <__kernel_tan+0x13a>
 8013014:	1c73      	adds	r3, r6, #1
 8013016:	4652      	mov	r2, sl
 8013018:	4313      	orrs	r3, r2
 801301a:	433b      	orrs	r3, r7
 801301c:	d112      	bne.n	8013044 <__kernel_tan+0x64>
 801301e:	ec4b ab10 	vmov	d0, sl, fp
 8013022:	f000 fa17 	bl	8013454 <fabs>
 8013026:	49d3      	ldr	r1, [pc, #844]	; (8013374 <__kernel_tan+0x394>)
 8013028:	ec53 2b10 	vmov	r2, r3, d0
 801302c:	2000      	movs	r0, #0
 801302e:	f7ed fc27 	bl	8000880 <__aeabi_ddiv>
 8013032:	4682      	mov	sl, r0
 8013034:	468b      	mov	fp, r1
 8013036:	ec4b ab10 	vmov	d0, sl, fp
 801303a:	b003      	add	sp, #12
 801303c:	ecbd 8b06 	vpop	{d8-d10}
 8013040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013044:	2e01      	cmp	r6, #1
 8013046:	d0f6      	beq.n	8013036 <__kernel_tan+0x56>
 8013048:	4642      	mov	r2, r8
 801304a:	464b      	mov	r3, r9
 801304c:	4650      	mov	r0, sl
 801304e:	4659      	mov	r1, fp
 8013050:	f7ed f936 	bl	80002c0 <__adddf3>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	460f      	mov	r7, r1
 801305a:	2000      	movs	r0, #0
 801305c:	49c6      	ldr	r1, [pc, #792]	; (8013378 <__kernel_tan+0x398>)
 801305e:	f7ed fc0f 	bl	8000880 <__aeabi_ddiv>
 8013062:	e9cd 0100 	strd	r0, r1, [sp]
 8013066:	e9dd 2300 	ldrd	r2, r3, [sp]
 801306a:	462e      	mov	r6, r5
 801306c:	4652      	mov	r2, sl
 801306e:	462c      	mov	r4, r5
 8013070:	4630      	mov	r0, r6
 8013072:	461d      	mov	r5, r3
 8013074:	4639      	mov	r1, r7
 8013076:	465b      	mov	r3, fp
 8013078:	f7ed f920 	bl	80002bc <__aeabi_dsub>
 801307c:	4602      	mov	r2, r0
 801307e:	460b      	mov	r3, r1
 8013080:	4640      	mov	r0, r8
 8013082:	4649      	mov	r1, r9
 8013084:	f7ed f91a 	bl	80002bc <__aeabi_dsub>
 8013088:	4632      	mov	r2, r6
 801308a:	462b      	mov	r3, r5
 801308c:	f7ed face 	bl	800062c <__aeabi_dmul>
 8013090:	4632      	mov	r2, r6
 8013092:	4680      	mov	r8, r0
 8013094:	4689      	mov	r9, r1
 8013096:	462b      	mov	r3, r5
 8013098:	4630      	mov	r0, r6
 801309a:	4639      	mov	r1, r7
 801309c:	f7ed fac6 	bl	800062c <__aeabi_dmul>
 80130a0:	4bb4      	ldr	r3, [pc, #720]	; (8013374 <__kernel_tan+0x394>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	f7ed f90c 	bl	80002c0 <__adddf3>
 80130a8:	4602      	mov	r2, r0
 80130aa:	460b      	mov	r3, r1
 80130ac:	4640      	mov	r0, r8
 80130ae:	4649      	mov	r1, r9
 80130b0:	f7ed f906 	bl	80002c0 <__adddf3>
 80130b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130b8:	f7ed fab8 	bl	800062c <__aeabi_dmul>
 80130bc:	4622      	mov	r2, r4
 80130be:	462b      	mov	r3, r5
 80130c0:	f7ed f8fe 	bl	80002c0 <__adddf3>
 80130c4:	e7b5      	b.n	8013032 <__kernel_tan+0x52>
 80130c6:	4bad      	ldr	r3, [pc, #692]	; (801337c <__kernel_tan+0x39c>)
 80130c8:	429f      	cmp	r7, r3
 80130ca:	dd26      	ble.n	801311a <__kernel_tan+0x13a>
 80130cc:	9b00      	ldr	r3, [sp, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	da09      	bge.n	80130e6 <__kernel_tan+0x106>
 80130d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80130d6:	469b      	mov	fp, r3
 80130d8:	ee10 aa10 	vmov	sl, s0
 80130dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80130e0:	ee11 8a10 	vmov	r8, s2
 80130e4:	4699      	mov	r9, r3
 80130e6:	4652      	mov	r2, sl
 80130e8:	465b      	mov	r3, fp
 80130ea:	a183      	add	r1, pc, #524	; (adr r1, 80132f8 <__kernel_tan+0x318>)
 80130ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130f0:	f7ed f8e4 	bl	80002bc <__aeabi_dsub>
 80130f4:	4642      	mov	r2, r8
 80130f6:	464b      	mov	r3, r9
 80130f8:	4604      	mov	r4, r0
 80130fa:	460d      	mov	r5, r1
 80130fc:	a180      	add	r1, pc, #512	; (adr r1, 8013300 <__kernel_tan+0x320>)
 80130fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013102:	f7ed f8db 	bl	80002bc <__aeabi_dsub>
 8013106:	4622      	mov	r2, r4
 8013108:	462b      	mov	r3, r5
 801310a:	f7ed f8d9 	bl	80002c0 <__adddf3>
 801310e:	f04f 0800 	mov.w	r8, #0
 8013112:	4682      	mov	sl, r0
 8013114:	468b      	mov	fp, r1
 8013116:	f04f 0900 	mov.w	r9, #0
 801311a:	4652      	mov	r2, sl
 801311c:	465b      	mov	r3, fp
 801311e:	4650      	mov	r0, sl
 8013120:	4659      	mov	r1, fp
 8013122:	f7ed fa83 	bl	800062c <__aeabi_dmul>
 8013126:	4602      	mov	r2, r0
 8013128:	460b      	mov	r3, r1
 801312a:	ec43 2b18 	vmov	d8, r2, r3
 801312e:	f7ed fa7d 	bl	800062c <__aeabi_dmul>
 8013132:	ec53 2b18 	vmov	r2, r3, d8
 8013136:	4604      	mov	r4, r0
 8013138:	460d      	mov	r5, r1
 801313a:	4650      	mov	r0, sl
 801313c:	4659      	mov	r1, fp
 801313e:	f7ed fa75 	bl	800062c <__aeabi_dmul>
 8013142:	a371      	add	r3, pc, #452	; (adr r3, 8013308 <__kernel_tan+0x328>)
 8013144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013148:	ec41 0b19 	vmov	d9, r0, r1
 801314c:	4620      	mov	r0, r4
 801314e:	4629      	mov	r1, r5
 8013150:	f7ed fa6c 	bl	800062c <__aeabi_dmul>
 8013154:	a36e      	add	r3, pc, #440	; (adr r3, 8013310 <__kernel_tan+0x330>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	f7ed f8b1 	bl	80002c0 <__adddf3>
 801315e:	4622      	mov	r2, r4
 8013160:	462b      	mov	r3, r5
 8013162:	f7ed fa63 	bl	800062c <__aeabi_dmul>
 8013166:	a36c      	add	r3, pc, #432	; (adr r3, 8013318 <__kernel_tan+0x338>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	f7ed f8a8 	bl	80002c0 <__adddf3>
 8013170:	4622      	mov	r2, r4
 8013172:	462b      	mov	r3, r5
 8013174:	f7ed fa5a 	bl	800062c <__aeabi_dmul>
 8013178:	a369      	add	r3, pc, #420	; (adr r3, 8013320 <__kernel_tan+0x340>)
 801317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317e:	f7ed f89f 	bl	80002c0 <__adddf3>
 8013182:	4622      	mov	r2, r4
 8013184:	462b      	mov	r3, r5
 8013186:	f7ed fa51 	bl	800062c <__aeabi_dmul>
 801318a:	a367      	add	r3, pc, #412	; (adr r3, 8013328 <__kernel_tan+0x348>)
 801318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013190:	f7ed f896 	bl	80002c0 <__adddf3>
 8013194:	4622      	mov	r2, r4
 8013196:	462b      	mov	r3, r5
 8013198:	f7ed fa48 	bl	800062c <__aeabi_dmul>
 801319c:	a364      	add	r3, pc, #400	; (adr r3, 8013330 <__kernel_tan+0x350>)
 801319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a2:	f7ed f88d 	bl	80002c0 <__adddf3>
 80131a6:	ec53 2b18 	vmov	r2, r3, d8
 80131aa:	f7ed fa3f 	bl	800062c <__aeabi_dmul>
 80131ae:	a362      	add	r3, pc, #392	; (adr r3, 8013338 <__kernel_tan+0x358>)
 80131b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b4:	ec41 0b1a 	vmov	d10, r0, r1
 80131b8:	4620      	mov	r0, r4
 80131ba:	4629      	mov	r1, r5
 80131bc:	f7ed fa36 	bl	800062c <__aeabi_dmul>
 80131c0:	a35f      	add	r3, pc, #380	; (adr r3, 8013340 <__kernel_tan+0x360>)
 80131c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c6:	f7ed f87b 	bl	80002c0 <__adddf3>
 80131ca:	4622      	mov	r2, r4
 80131cc:	462b      	mov	r3, r5
 80131ce:	f7ed fa2d 	bl	800062c <__aeabi_dmul>
 80131d2:	a35d      	add	r3, pc, #372	; (adr r3, 8013348 <__kernel_tan+0x368>)
 80131d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d8:	f7ed f872 	bl	80002c0 <__adddf3>
 80131dc:	4622      	mov	r2, r4
 80131de:	462b      	mov	r3, r5
 80131e0:	f7ed fa24 	bl	800062c <__aeabi_dmul>
 80131e4:	a35a      	add	r3, pc, #360	; (adr r3, 8013350 <__kernel_tan+0x370>)
 80131e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ea:	f7ed f869 	bl	80002c0 <__adddf3>
 80131ee:	4622      	mov	r2, r4
 80131f0:	462b      	mov	r3, r5
 80131f2:	f7ed fa1b 	bl	800062c <__aeabi_dmul>
 80131f6:	a358      	add	r3, pc, #352	; (adr r3, 8013358 <__kernel_tan+0x378>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	f7ed f860 	bl	80002c0 <__adddf3>
 8013200:	4622      	mov	r2, r4
 8013202:	462b      	mov	r3, r5
 8013204:	f7ed fa12 	bl	800062c <__aeabi_dmul>
 8013208:	a355      	add	r3, pc, #340	; (adr r3, 8013360 <__kernel_tan+0x380>)
 801320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320e:	f7ed f857 	bl	80002c0 <__adddf3>
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	ec51 0b1a 	vmov	r0, r1, d10
 801321a:	f7ed f851 	bl	80002c0 <__adddf3>
 801321e:	ec53 2b19 	vmov	r2, r3, d9
 8013222:	f7ed fa03 	bl	800062c <__aeabi_dmul>
 8013226:	4642      	mov	r2, r8
 8013228:	464b      	mov	r3, r9
 801322a:	f7ed f849 	bl	80002c0 <__adddf3>
 801322e:	ec53 2b18 	vmov	r2, r3, d8
 8013232:	f7ed f9fb 	bl	800062c <__aeabi_dmul>
 8013236:	4642      	mov	r2, r8
 8013238:	464b      	mov	r3, r9
 801323a:	f7ed f841 	bl	80002c0 <__adddf3>
 801323e:	a34a      	add	r3, pc, #296	; (adr r3, 8013368 <__kernel_tan+0x388>)
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	ec51 0b19 	vmov	r0, r1, d9
 801324c:	f7ed f9ee 	bl	800062c <__aeabi_dmul>
 8013250:	4622      	mov	r2, r4
 8013252:	462b      	mov	r3, r5
 8013254:	f7ed f834 	bl	80002c0 <__adddf3>
 8013258:	460b      	mov	r3, r1
 801325a:	ec41 0b18 	vmov	d8, r0, r1
 801325e:	4602      	mov	r2, r0
 8013260:	4659      	mov	r1, fp
 8013262:	4650      	mov	r0, sl
 8013264:	f7ed f82c 	bl	80002c0 <__adddf3>
 8013268:	4b44      	ldr	r3, [pc, #272]	; (801337c <__kernel_tan+0x39c>)
 801326a:	429f      	cmp	r7, r3
 801326c:	4604      	mov	r4, r0
 801326e:	460d      	mov	r5, r1
 8013270:	f340 8086 	ble.w	8013380 <__kernel_tan+0x3a0>
 8013274:	4630      	mov	r0, r6
 8013276:	f7ed f96f 	bl	8000558 <__aeabi_i2d>
 801327a:	4622      	mov	r2, r4
 801327c:	4680      	mov	r8, r0
 801327e:	4689      	mov	r9, r1
 8013280:	462b      	mov	r3, r5
 8013282:	4620      	mov	r0, r4
 8013284:	4629      	mov	r1, r5
 8013286:	f7ed f9d1 	bl	800062c <__aeabi_dmul>
 801328a:	4642      	mov	r2, r8
 801328c:	4606      	mov	r6, r0
 801328e:	460f      	mov	r7, r1
 8013290:	464b      	mov	r3, r9
 8013292:	4620      	mov	r0, r4
 8013294:	4629      	mov	r1, r5
 8013296:	f7ed f813 	bl	80002c0 <__adddf3>
 801329a:	4602      	mov	r2, r0
 801329c:	460b      	mov	r3, r1
 801329e:	4630      	mov	r0, r6
 80132a0:	4639      	mov	r1, r7
 80132a2:	f7ed faed 	bl	8000880 <__aeabi_ddiv>
 80132a6:	ec53 2b18 	vmov	r2, r3, d8
 80132aa:	f7ed f807 	bl	80002bc <__aeabi_dsub>
 80132ae:	4602      	mov	r2, r0
 80132b0:	460b      	mov	r3, r1
 80132b2:	4650      	mov	r0, sl
 80132b4:	4659      	mov	r1, fp
 80132b6:	f7ed f801 	bl	80002bc <__aeabi_dsub>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	f7ec ffff 	bl	80002c0 <__adddf3>
 80132c2:	4602      	mov	r2, r0
 80132c4:	460b      	mov	r3, r1
 80132c6:	4640      	mov	r0, r8
 80132c8:	4649      	mov	r1, r9
 80132ca:	f7ec fff7 	bl	80002bc <__aeabi_dsub>
 80132ce:	9b00      	ldr	r3, [sp, #0]
 80132d0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80132d4:	f00a 0a02 	and.w	sl, sl, #2
 80132d8:	4604      	mov	r4, r0
 80132da:	f1ca 0001 	rsb	r0, sl, #1
 80132de:	460d      	mov	r5, r1
 80132e0:	f7ed f93a 	bl	8000558 <__aeabi_i2d>
 80132e4:	4602      	mov	r2, r0
 80132e6:	460b      	mov	r3, r1
 80132e8:	4620      	mov	r0, r4
 80132ea:	4629      	mov	r1, r5
 80132ec:	f7ed f99e 	bl	800062c <__aeabi_dmul>
 80132f0:	e69f      	b.n	8013032 <__kernel_tan+0x52>
 80132f2:	bf00      	nop
 80132f4:	f3af 8000 	nop.w
 80132f8:	54442d18 	.word	0x54442d18
 80132fc:	3fe921fb 	.word	0x3fe921fb
 8013300:	33145c07 	.word	0x33145c07
 8013304:	3c81a626 	.word	0x3c81a626
 8013308:	74bf7ad4 	.word	0x74bf7ad4
 801330c:	3efb2a70 	.word	0x3efb2a70
 8013310:	32f0a7e9 	.word	0x32f0a7e9
 8013314:	3f12b80f 	.word	0x3f12b80f
 8013318:	1a8d1068 	.word	0x1a8d1068
 801331c:	3f3026f7 	.word	0x3f3026f7
 8013320:	fee08315 	.word	0xfee08315
 8013324:	3f57dbc8 	.word	0x3f57dbc8
 8013328:	e96e8493 	.word	0xe96e8493
 801332c:	3f8226e3 	.word	0x3f8226e3
 8013330:	1bb341fe 	.word	0x1bb341fe
 8013334:	3faba1ba 	.word	0x3faba1ba
 8013338:	db605373 	.word	0xdb605373
 801333c:	bef375cb 	.word	0xbef375cb
 8013340:	a03792a6 	.word	0xa03792a6
 8013344:	3f147e88 	.word	0x3f147e88
 8013348:	f2f26501 	.word	0xf2f26501
 801334c:	3f4344d8 	.word	0x3f4344d8
 8013350:	c9560328 	.word	0xc9560328
 8013354:	3f6d6d22 	.word	0x3f6d6d22
 8013358:	8406d637 	.word	0x8406d637
 801335c:	3f9664f4 	.word	0x3f9664f4
 8013360:	1110fe7a 	.word	0x1110fe7a
 8013364:	3fc11111 	.word	0x3fc11111
 8013368:	55555563 	.word	0x55555563
 801336c:	3fd55555 	.word	0x3fd55555
 8013370:	3e2fffff 	.word	0x3e2fffff
 8013374:	3ff00000 	.word	0x3ff00000
 8013378:	bff00000 	.word	0xbff00000
 801337c:	3fe59427 	.word	0x3fe59427
 8013380:	2e01      	cmp	r6, #1
 8013382:	d02f      	beq.n	80133e4 <__kernel_tan+0x404>
 8013384:	460f      	mov	r7, r1
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4689      	mov	r9, r1
 801338c:	2000      	movs	r0, #0
 801338e:	4917      	ldr	r1, [pc, #92]	; (80133ec <__kernel_tan+0x40c>)
 8013390:	f7ed fa76 	bl	8000880 <__aeabi_ddiv>
 8013394:	2600      	movs	r6, #0
 8013396:	e9cd 0100 	strd	r0, r1, [sp]
 801339a:	4652      	mov	r2, sl
 801339c:	465b      	mov	r3, fp
 801339e:	4630      	mov	r0, r6
 80133a0:	4639      	mov	r1, r7
 80133a2:	f7ec ff8b 	bl	80002bc <__aeabi_dsub>
 80133a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	ec51 0b18 	vmov	r0, r1, d8
 80133b2:	f7ec ff83 	bl	80002bc <__aeabi_dsub>
 80133b6:	4632      	mov	r2, r6
 80133b8:	462b      	mov	r3, r5
 80133ba:	f7ed f937 	bl	800062c <__aeabi_dmul>
 80133be:	46b0      	mov	r8, r6
 80133c0:	460f      	mov	r7, r1
 80133c2:	4642      	mov	r2, r8
 80133c4:	462b      	mov	r3, r5
 80133c6:	4634      	mov	r4, r6
 80133c8:	4649      	mov	r1, r9
 80133ca:	4606      	mov	r6, r0
 80133cc:	4640      	mov	r0, r8
 80133ce:	f7ed f92d 	bl	800062c <__aeabi_dmul>
 80133d2:	4b07      	ldr	r3, [pc, #28]	; (80133f0 <__kernel_tan+0x410>)
 80133d4:	2200      	movs	r2, #0
 80133d6:	f7ec ff73 	bl	80002c0 <__adddf3>
 80133da:	4602      	mov	r2, r0
 80133dc:	460b      	mov	r3, r1
 80133de:	4630      	mov	r0, r6
 80133e0:	4639      	mov	r1, r7
 80133e2:	e665      	b.n	80130b0 <__kernel_tan+0xd0>
 80133e4:	4682      	mov	sl, r0
 80133e6:	468b      	mov	fp, r1
 80133e8:	e625      	b.n	8013036 <__kernel_tan+0x56>
 80133ea:	bf00      	nop
 80133ec:	bff00000 	.word	0xbff00000
 80133f0:	3ff00000 	.word	0x3ff00000

080133f4 <with_errno>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	4616      	mov	r6, r2
 80133fc:	f7fd fcc6 	bl	8010d8c <__errno>
 8013400:	4629      	mov	r1, r5
 8013402:	6006      	str	r6, [r0, #0]
 8013404:	4620      	mov	r0, r4
 8013406:	bd70      	pop	{r4, r5, r6, pc}

08013408 <xflow>:
 8013408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801340a:	4614      	mov	r4, r2
 801340c:	461d      	mov	r5, r3
 801340e:	b108      	cbz	r0, 8013414 <xflow+0xc>
 8013410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013414:	e9cd 2300 	strd	r2, r3, [sp]
 8013418:	e9dd 2300 	ldrd	r2, r3, [sp]
 801341c:	4620      	mov	r0, r4
 801341e:	4629      	mov	r1, r5
 8013420:	f7ed f904 	bl	800062c <__aeabi_dmul>
 8013424:	2222      	movs	r2, #34	; 0x22
 8013426:	b003      	add	sp, #12
 8013428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801342c:	f7ff bfe2 	b.w	80133f4 <with_errno>

08013430 <__math_uflow>:
 8013430:	b508      	push	{r3, lr}
 8013432:	2200      	movs	r2, #0
 8013434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013438:	f7ff ffe6 	bl	8013408 <xflow>
 801343c:	ec41 0b10 	vmov	d0, r0, r1
 8013440:	bd08      	pop	{r3, pc}

08013442 <__math_oflow>:
 8013442:	b508      	push	{r3, lr}
 8013444:	2200      	movs	r2, #0
 8013446:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801344a:	f7ff ffdd 	bl	8013408 <xflow>
 801344e:	ec41 0b10 	vmov	d0, r0, r1
 8013452:	bd08      	pop	{r3, pc}

08013454 <fabs>:
 8013454:	ec51 0b10 	vmov	r0, r1, d0
 8013458:	ee10 2a10 	vmov	r2, s0
 801345c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013460:	ec43 2b10 	vmov	d0, r2, r3
 8013464:	4770      	bx	lr

08013466 <finite>:
 8013466:	b082      	sub	sp, #8
 8013468:	ed8d 0b00 	vstr	d0, [sp]
 801346c:	9801      	ldr	r0, [sp, #4]
 801346e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013472:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013476:	0fc0      	lsrs	r0, r0, #31
 8013478:	b002      	add	sp, #8
 801347a:	4770      	bx	lr
 801347c:	0000      	movs	r0, r0
	...

08013480 <floor>:
 8013480:	ec51 0b10 	vmov	r0, r1, d0
 8013484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801348c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013490:	2e13      	cmp	r6, #19
 8013492:	ee10 5a10 	vmov	r5, s0
 8013496:	ee10 8a10 	vmov	r8, s0
 801349a:	460c      	mov	r4, r1
 801349c:	dc32      	bgt.n	8013504 <floor+0x84>
 801349e:	2e00      	cmp	r6, #0
 80134a0:	da14      	bge.n	80134cc <floor+0x4c>
 80134a2:	a333      	add	r3, pc, #204	; (adr r3, 8013570 <floor+0xf0>)
 80134a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a8:	f7ec ff0a 	bl	80002c0 <__adddf3>
 80134ac:	2200      	movs	r2, #0
 80134ae:	2300      	movs	r3, #0
 80134b0:	f7ed fb4c 	bl	8000b4c <__aeabi_dcmpgt>
 80134b4:	b138      	cbz	r0, 80134c6 <floor+0x46>
 80134b6:	2c00      	cmp	r4, #0
 80134b8:	da57      	bge.n	801356a <floor+0xea>
 80134ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80134be:	431d      	orrs	r5, r3
 80134c0:	d001      	beq.n	80134c6 <floor+0x46>
 80134c2:	4c2d      	ldr	r4, [pc, #180]	; (8013578 <floor+0xf8>)
 80134c4:	2500      	movs	r5, #0
 80134c6:	4621      	mov	r1, r4
 80134c8:	4628      	mov	r0, r5
 80134ca:	e025      	b.n	8013518 <floor+0x98>
 80134cc:	4f2b      	ldr	r7, [pc, #172]	; (801357c <floor+0xfc>)
 80134ce:	4137      	asrs	r7, r6
 80134d0:	ea01 0307 	and.w	r3, r1, r7
 80134d4:	4303      	orrs	r3, r0
 80134d6:	d01f      	beq.n	8013518 <floor+0x98>
 80134d8:	a325      	add	r3, pc, #148	; (adr r3, 8013570 <floor+0xf0>)
 80134da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134de:	f7ec feef 	bl	80002c0 <__adddf3>
 80134e2:	2200      	movs	r2, #0
 80134e4:	2300      	movs	r3, #0
 80134e6:	f7ed fb31 	bl	8000b4c <__aeabi_dcmpgt>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d0eb      	beq.n	80134c6 <floor+0x46>
 80134ee:	2c00      	cmp	r4, #0
 80134f0:	bfbe      	ittt	lt
 80134f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80134f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80134fa:	19a4      	addlt	r4, r4, r6
 80134fc:	ea24 0407 	bic.w	r4, r4, r7
 8013500:	2500      	movs	r5, #0
 8013502:	e7e0      	b.n	80134c6 <floor+0x46>
 8013504:	2e33      	cmp	r6, #51	; 0x33
 8013506:	dd0b      	ble.n	8013520 <floor+0xa0>
 8013508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801350c:	d104      	bne.n	8013518 <floor+0x98>
 801350e:	ee10 2a10 	vmov	r2, s0
 8013512:	460b      	mov	r3, r1
 8013514:	f7ec fed4 	bl	80002c0 <__adddf3>
 8013518:	ec41 0b10 	vmov	d0, r0, r1
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013520:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013524:	f04f 33ff 	mov.w	r3, #4294967295
 8013528:	fa23 f707 	lsr.w	r7, r3, r7
 801352c:	4207      	tst	r7, r0
 801352e:	d0f3      	beq.n	8013518 <floor+0x98>
 8013530:	a30f      	add	r3, pc, #60	; (adr r3, 8013570 <floor+0xf0>)
 8013532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013536:	f7ec fec3 	bl	80002c0 <__adddf3>
 801353a:	2200      	movs	r2, #0
 801353c:	2300      	movs	r3, #0
 801353e:	f7ed fb05 	bl	8000b4c <__aeabi_dcmpgt>
 8013542:	2800      	cmp	r0, #0
 8013544:	d0bf      	beq.n	80134c6 <floor+0x46>
 8013546:	2c00      	cmp	r4, #0
 8013548:	da02      	bge.n	8013550 <floor+0xd0>
 801354a:	2e14      	cmp	r6, #20
 801354c:	d103      	bne.n	8013556 <floor+0xd6>
 801354e:	3401      	adds	r4, #1
 8013550:	ea25 0507 	bic.w	r5, r5, r7
 8013554:	e7b7      	b.n	80134c6 <floor+0x46>
 8013556:	2301      	movs	r3, #1
 8013558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801355c:	fa03 f606 	lsl.w	r6, r3, r6
 8013560:	4435      	add	r5, r6
 8013562:	4545      	cmp	r5, r8
 8013564:	bf38      	it	cc
 8013566:	18e4      	addcc	r4, r4, r3
 8013568:	e7f2      	b.n	8013550 <floor+0xd0>
 801356a:	2500      	movs	r5, #0
 801356c:	462c      	mov	r4, r5
 801356e:	e7aa      	b.n	80134c6 <floor+0x46>
 8013570:	8800759c 	.word	0x8800759c
 8013574:	7e37e43c 	.word	0x7e37e43c
 8013578:	bff00000 	.word	0xbff00000
 801357c:	000fffff 	.word	0x000fffff

08013580 <nan>:
 8013580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013588 <nan+0x8>
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	00000000 	.word	0x00000000
 801358c:	7ff80000 	.word	0x7ff80000

08013590 <scalbn>:
 8013590:	b570      	push	{r4, r5, r6, lr}
 8013592:	ec55 4b10 	vmov	r4, r5, d0
 8013596:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801359a:	4606      	mov	r6, r0
 801359c:	462b      	mov	r3, r5
 801359e:	b99a      	cbnz	r2, 80135c8 <scalbn+0x38>
 80135a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135a4:	4323      	orrs	r3, r4
 80135a6:	d036      	beq.n	8013616 <scalbn+0x86>
 80135a8:	4b39      	ldr	r3, [pc, #228]	; (8013690 <scalbn+0x100>)
 80135aa:	4629      	mov	r1, r5
 80135ac:	ee10 0a10 	vmov	r0, s0
 80135b0:	2200      	movs	r2, #0
 80135b2:	f7ed f83b 	bl	800062c <__aeabi_dmul>
 80135b6:	4b37      	ldr	r3, [pc, #220]	; (8013694 <scalbn+0x104>)
 80135b8:	429e      	cmp	r6, r3
 80135ba:	4604      	mov	r4, r0
 80135bc:	460d      	mov	r5, r1
 80135be:	da10      	bge.n	80135e2 <scalbn+0x52>
 80135c0:	a32b      	add	r3, pc, #172	; (adr r3, 8013670 <scalbn+0xe0>)
 80135c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c6:	e03a      	b.n	801363e <scalbn+0xae>
 80135c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80135cc:	428a      	cmp	r2, r1
 80135ce:	d10c      	bne.n	80135ea <scalbn+0x5a>
 80135d0:	ee10 2a10 	vmov	r2, s0
 80135d4:	4620      	mov	r0, r4
 80135d6:	4629      	mov	r1, r5
 80135d8:	f7ec fe72 	bl	80002c0 <__adddf3>
 80135dc:	4604      	mov	r4, r0
 80135de:	460d      	mov	r5, r1
 80135e0:	e019      	b.n	8013616 <scalbn+0x86>
 80135e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80135e6:	460b      	mov	r3, r1
 80135e8:	3a36      	subs	r2, #54	; 0x36
 80135ea:	4432      	add	r2, r6
 80135ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80135f0:	428a      	cmp	r2, r1
 80135f2:	dd08      	ble.n	8013606 <scalbn+0x76>
 80135f4:	2d00      	cmp	r5, #0
 80135f6:	a120      	add	r1, pc, #128	; (adr r1, 8013678 <scalbn+0xe8>)
 80135f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135fc:	da1c      	bge.n	8013638 <scalbn+0xa8>
 80135fe:	a120      	add	r1, pc, #128	; (adr r1, 8013680 <scalbn+0xf0>)
 8013600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013604:	e018      	b.n	8013638 <scalbn+0xa8>
 8013606:	2a00      	cmp	r2, #0
 8013608:	dd08      	ble.n	801361c <scalbn+0x8c>
 801360a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801360e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013612:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013616:	ec45 4b10 	vmov	d0, r4, r5
 801361a:	bd70      	pop	{r4, r5, r6, pc}
 801361c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013620:	da19      	bge.n	8013656 <scalbn+0xc6>
 8013622:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013626:	429e      	cmp	r6, r3
 8013628:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801362c:	dd0a      	ble.n	8013644 <scalbn+0xb4>
 801362e:	a112      	add	r1, pc, #72	; (adr r1, 8013678 <scalbn+0xe8>)
 8013630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1e2      	bne.n	80135fe <scalbn+0x6e>
 8013638:	a30f      	add	r3, pc, #60	; (adr r3, 8013678 <scalbn+0xe8>)
 801363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363e:	f7ec fff5 	bl	800062c <__aeabi_dmul>
 8013642:	e7cb      	b.n	80135dc <scalbn+0x4c>
 8013644:	a10a      	add	r1, pc, #40	; (adr r1, 8013670 <scalbn+0xe0>)
 8013646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0b8      	beq.n	80135c0 <scalbn+0x30>
 801364e:	a10e      	add	r1, pc, #56	; (adr r1, 8013688 <scalbn+0xf8>)
 8013650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013654:	e7b4      	b.n	80135c0 <scalbn+0x30>
 8013656:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801365a:	3236      	adds	r2, #54	; 0x36
 801365c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013660:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013664:	4620      	mov	r0, r4
 8013666:	4b0c      	ldr	r3, [pc, #48]	; (8013698 <scalbn+0x108>)
 8013668:	2200      	movs	r2, #0
 801366a:	e7e8      	b.n	801363e <scalbn+0xae>
 801366c:	f3af 8000 	nop.w
 8013670:	c2f8f359 	.word	0xc2f8f359
 8013674:	01a56e1f 	.word	0x01a56e1f
 8013678:	8800759c 	.word	0x8800759c
 801367c:	7e37e43c 	.word	0x7e37e43c
 8013680:	8800759c 	.word	0x8800759c
 8013684:	fe37e43c 	.word	0xfe37e43c
 8013688:	c2f8f359 	.word	0xc2f8f359
 801368c:	81a56e1f 	.word	0x81a56e1f
 8013690:	43500000 	.word	0x43500000
 8013694:	ffff3cb0 	.word	0xffff3cb0
 8013698:	3c900000 	.word	0x3c900000

0801369c <_close>:
 801369c:	4b02      	ldr	r3, [pc, #8]	; (80136a8 <_close+0xc>)
 801369e:	2258      	movs	r2, #88	; 0x58
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	f04f 30ff 	mov.w	r0, #4294967295
 80136a6:	4770      	bx	lr
 80136a8:	20003aac 	.word	0x20003aac

080136ac <_fstat>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <_fstat+0xc>)
 80136ae:	2258      	movs	r2, #88	; 0x58
 80136b0:	601a      	str	r2, [r3, #0]
 80136b2:	f04f 30ff 	mov.w	r0, #4294967295
 80136b6:	4770      	bx	lr
 80136b8:	20003aac 	.word	0x20003aac

080136bc <_getpid>:
 80136bc:	4b02      	ldr	r3, [pc, #8]	; (80136c8 <_getpid+0xc>)
 80136be:	2258      	movs	r2, #88	; 0x58
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	f04f 30ff 	mov.w	r0, #4294967295
 80136c6:	4770      	bx	lr
 80136c8:	20003aac 	.word	0x20003aac

080136cc <_isatty>:
 80136cc:	4b02      	ldr	r3, [pc, #8]	; (80136d8 <_isatty+0xc>)
 80136ce:	2258      	movs	r2, #88	; 0x58
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	2000      	movs	r0, #0
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	20003aac 	.word	0x20003aac

080136dc <_kill>:
 80136dc:	4b02      	ldr	r3, [pc, #8]	; (80136e8 <_kill+0xc>)
 80136de:	2258      	movs	r2, #88	; 0x58
 80136e0:	601a      	str	r2, [r3, #0]
 80136e2:	f04f 30ff 	mov.w	r0, #4294967295
 80136e6:	4770      	bx	lr
 80136e8:	20003aac 	.word	0x20003aac

080136ec <_lseek>:
 80136ec:	4b02      	ldr	r3, [pc, #8]	; (80136f8 <_lseek+0xc>)
 80136ee:	2258      	movs	r2, #88	; 0x58
 80136f0:	601a      	str	r2, [r3, #0]
 80136f2:	f04f 30ff 	mov.w	r0, #4294967295
 80136f6:	4770      	bx	lr
 80136f8:	20003aac 	.word	0x20003aac

080136fc <_read>:
 80136fc:	4b02      	ldr	r3, [pc, #8]	; (8013708 <_read+0xc>)
 80136fe:	2258      	movs	r2, #88	; 0x58
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	f04f 30ff 	mov.w	r0, #4294967295
 8013706:	4770      	bx	lr
 8013708:	20003aac 	.word	0x20003aac

0801370c <_sbrk>:
 801370c:	4a04      	ldr	r2, [pc, #16]	; (8013720 <_sbrk+0x14>)
 801370e:	6811      	ldr	r1, [r2, #0]
 8013710:	4603      	mov	r3, r0
 8013712:	b909      	cbnz	r1, 8013718 <_sbrk+0xc>
 8013714:	4903      	ldr	r1, [pc, #12]	; (8013724 <_sbrk+0x18>)
 8013716:	6011      	str	r1, [r2, #0]
 8013718:	6810      	ldr	r0, [r2, #0]
 801371a:	4403      	add	r3, r0
 801371c:	6013      	str	r3, [r2, #0]
 801371e:	4770      	bx	lr
 8013720:	20003ab4 	.word	0x20003ab4
 8013724:	20003ab8 	.word	0x20003ab8

08013728 <_write>:
 8013728:	4b02      	ldr	r3, [pc, #8]	; (8013734 <_write+0xc>)
 801372a:	2258      	movs	r2, #88	; 0x58
 801372c:	601a      	str	r2, [r3, #0]
 801372e:	f04f 30ff 	mov.w	r0, #4294967295
 8013732:	4770      	bx	lr
 8013734:	20003aac 	.word	0x20003aac

08013738 <_exit>:
 8013738:	e7fe      	b.n	8013738 <_exit>
	...

0801373c <_init>:
 801373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373e:	bf00      	nop
 8013740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013742:	bc08      	pop	{r3}
 8013744:	469e      	mov	lr, r3
 8013746:	4770      	bx	lr

08013748 <_fini>:
 8013748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801374a:	bf00      	nop
 801374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801374e:	bc08      	pop	{r3}
 8013750:	469e      	mov	lr, r3
 8013752:	4770      	bx	lr
