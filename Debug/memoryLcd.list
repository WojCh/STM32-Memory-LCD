
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001340c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b378  080135c0  080135c0  000235c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e938  0802e938  000402c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802e938  0802e938  0003e938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e940  0802e940  000402c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e940  0802e940  0003e940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e944  0802e944  0003e944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0802e948  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402c8  2**0
                  CONTENTS
 10 .bss          00005994  200002c8  200002c8  000402c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005c5c  20005c5c  000402c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002945f  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006835  00000000  00000000  00069757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  0006ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001eb8  00000000  00000000  00072100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e02a  00000000  00000000  00073fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030687  00000000  00000000  000a1fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0397  00000000  00000000  000d2669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c2a00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c70  00000000  00000000  001c2a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080135a4 	.word	0x080135a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	080135a4 	.word	0x080135a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <SD_logger+0x24>)
 8000fb6:	f000 fa1d 	bl	80013f4 <Create_Dir>
	Create_File("logs/LOG.TXT");
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SD_logger+0x28>)
 8000fbc:	f000 f8da 	bl	8001174 <Create_File>
	Update_File("logs/LOG.TXT", msg);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <SD_logger+0x28>)
 8000fc4:	f000 f962 	bl	800128c <Update_File>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080135c0 	.word	0x080135c0
 8000fd4:	080135c8 	.word	0x080135c8

08000fd8 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Mount_SD+0x30>)
 8000fe6:	f00d fd15 	bl	800ea14 <f_mount>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <Mount_SD+0x34>)
 8000ff0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <Mount_SD+0x34>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Mount_SD+0x26>
		return SD_ERROR;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 8000ffe:	2301      	movs	r3, #1
	}
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002e4 	.word	0x200002e4
 800100c:	20002360 	.word	0x20002360

08001010 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800101a:	494d      	ldr	r1, [pc, #308]	; (8001150 <Read_File+0x140>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f00e faa6 	bl	800f56e <f_stat>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <Read_File+0x144>)
 8001028:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <Read_File+0x144>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f00e fc98 	bl	800f968 <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <Read_File+0x148>)
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f00f fb6b 	bl	801071c <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f00e fc96 	bl	800f978 <free>
	    return fresult;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <Read_File+0x144>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	e07a      	b.n	8001148 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8001052:	2201      	movs	r2, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <Read_File+0x14c>)
 8001058:	f00d fd22 	bl	800eaa0 <f_open>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <Read_File+0x144>)
 8001062:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <Read_File+0x144>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f00e fc7b 	bl	800f968 <malloc>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Read_File+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4938      	ldr	r1, [pc, #224]	; (8001160 <Read_File+0x150>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f00f fb4b 	bl	801071c <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f00e fc76 	bl	800f978 <free>
		    return fresult;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Read_File+0x144>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e05a      	b.n	8001148 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8001092:	2004      	movs	r0, #4
 8001094:	f00e fc68 	bl	800f968 <malloc>
 8001098:	4603      	mov	r3, r0
 800109a:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <Read_File+0x14c>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <Read_File+0x154>)
 80010a2:	69f9      	ldr	r1, [r7, #28]
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <Read_File+0x14c>)
 80010a6:	f00d fec7 	bl	800ee38 <f_read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <Read_File+0x144>)
 80010b0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <Read_File+0x144>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f00e fc54 	bl	800f968 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
			free(buffer);
 80010c4:	69f8      	ldr	r0, [r7, #28]
 80010c6:	f00e fc57 	bl	800f978 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <Read_File+0x144>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <Read_File+0x158>)
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f00f fb21 	bl	801071c <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f00e fc4c 	bl	800f978 <free>
 80010e0:	e030      	b.n	8001144 <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80010e2:	2231      	movs	r2, #49	; 0x31
 80010e4:	69f9      	ldr	r1, [r7, #28]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00f fb7b 	bl	80107e2 <strncpy>
			free(buffer);
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f00e fc43 	bl	800f978 <free>

			/* Close file */
			fresult = f_close(&fil);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <Read_File+0x14c>)
 80010f4:	f00e fa11 	bl	800f51a <f_close>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Read_File+0x144>)
 80010fe:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <Read_File+0x144>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d010      	beq.n	800112a <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f00e fc2d 	bl	800f968 <malloc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Read_File+0x144>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4914      	ldr	r1, [pc, #80]	; (800116c <Read_File+0x15c>)
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f00f fafd 	bl	801071c <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f00e fc28 	bl	800f978 <free>
 8001128:	e00c      	b.n	8001144 <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f00e fc1c 	bl	800f968 <malloc>
 8001130:	4603      	mov	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <Read_File+0x160>)
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f00f faef 	bl	801071c <siprintf>
//				Send_Uart(buf);
				free(buf);
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f00e fc1a 	bl	800f978 <free>
			}
		}
	    return fresult;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <Read_File+0x144>)
 8001146:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002348 	.word	0x20002348
 8001154:	20002360 	.word	0x20002360
 8001158:	080136fc 	.word	0x080136fc
 800115c:	20001318 	.word	0x20001318
 8001160:	08013638 	.word	0x08013638
 8001164:	20002364 	.word	0x20002364
 8001168:	08013720 	.word	0x08013720
 800116c:	08013748 	.word	0x08013748
 8001170:	08013770 	.word	0x08013770

08001174 <Create_File>:

FRESULT Create_File (char *name)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800117c:	493b      	ldr	r1, [pc, #236]	; (800126c <Create_File+0xf8>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f00e f9f5 	bl	800f56e <f_stat>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <Create_File+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <Create_File+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10f      	bne.n	80011b4 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f00e fbe7 	bl	800f968 <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4934      	ldr	r1, [pc, #208]	; (8001274 <Create_File+0x100>)
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f00f faba 	bl	801071c <siprintf>
//		Send_Uart(buf);
		free(buf);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f00e fbe5 	bl	800f978 <free>
	    return fresult;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Create_File+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e057      	b.n	8001264 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011b4:	220b      	movs	r2, #11
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	482f      	ldr	r0, [pc, #188]	; (8001278 <Create_File+0x104>)
 80011ba:	f00d fc71 	bl	800eaa0 <f_open>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <Create_File+0xfc>)
 80011c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Create_File+0xfc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f00e fbca 	bl	800f968 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <Create_File+0xfc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4926      	ldr	r1, [pc, #152]	; (800127c <Create_File+0x108>)
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f00f fa9a 	bl	801071c <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f00e fbc5 	bl	800f978 <free>
		    return fresult;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Create_File+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e037      	b.n	8001264 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f00e fbb7 	bl	800f968 <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <Create_File+0x10c>)
 8001202:	69f8      	ldr	r0, [r7, #28]
 8001204:	f00f fa8a 	bl	801071c <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001208:	69f8      	ldr	r0, [r7, #28]
 800120a:	f00e fbb5 	bl	800f978 <free>
		}

		fresult = f_close(&fil);
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <Create_File+0x104>)
 8001210:	f00e f983 	bl	800f51a <f_close>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <Create_File+0xfc>)
 800121a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Create_File+0xfc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d010      	beq.n	8001246 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f00e fb9f 	bl	800f968 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Create_File+0xfc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <Create_File+0x110>)
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f00f fa6f 	bl	801071c <siprintf>
//			Send_Uart(buf);
			free(buf);
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f00e fb9a 	bl	800f978 <free>
 8001244:	e00c      	b.n	8001260 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f00e fb8e 	bl	800f968 <malloc>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <Create_File+0x114>)
 8001254:	69b8      	ldr	r0, [r7, #24]
 8001256:	f00f fa61 	bl	801071c <siprintf>
//			Send_Uart(buf);
			free(buf);
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f00e fb8c 	bl	800f978 <free>
		}
	}
    return fresult;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <Create_File+0xfc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20002348 	.word	0x20002348
 8001270:	20002360 	.word	0x20002360
 8001274:	08013790 	.word	0x08013790
 8001278:	20001318 	.word	0x20001318
 800127c:	080137c8 	.word	0x080137c8
 8001280:	080137f0 	.word	0x080137f0
 8001284:	08013830 	.word	0x08013830
 8001288:	08013770 	.word	0x08013770

0800128c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001296:	494d      	ldr	r1, [pc, #308]	; (80013cc <Update_File+0x140>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00e f968 	bl	800f56e <f_stat>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <Update_File+0x144>)
 80012a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <Update_File+0x144>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f00e fb5a 	bl	800f968 <malloc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <Update_File+0x148>)
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f00f fa2d 	bl	801071c <siprintf>
//		Send_Uart (buf);
		free(buf);
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f00e fb58 	bl	800f978 <free>
	    return fresult;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <Update_File+0x144>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e079      	b.n	80013c2 <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012ce:	2232      	movs	r2, #50	; 0x32
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4841      	ldr	r0, [pc, #260]	; (80013d8 <Update_File+0x14c>)
 80012d4:	f00d fbe4 	bl	800eaa0 <f_open>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Update_File+0x144>)
 80012de:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <Update_File+0x144>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f00e fb3d 	bl	800f968 <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <Update_File+0x144>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <Update_File+0x150>)
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00f fa0d 	bl	801071c <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f00e fb38 	bl	800f978 <free>
	        return fresult;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <Update_File+0x144>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e059      	b.n	80013c2 <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7fe ff6e 	bl	80001f0 <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <Update_File+0x154>)
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	482f      	ldr	r0, [pc, #188]	; (80013d8 <Update_File+0x14c>)
 800131c:	f00d feeb 	bl	800f0f6 <f_write>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <Update_File+0x144>)
 8001326:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <Update_File+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f00e fb19 	bl	800f968 <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Update_File+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4928      	ldr	r1, [pc, #160]	; (80013e4 <Update_File+0x158>)
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	f00f f9e9 	bl	801071c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f00e fb14 	bl	800f978 <free>
 8001350:	e00c      	b.n	800136c <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f00e fb08 	bl	800f968 <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4922      	ldr	r1, [pc, #136]	; (80013e8 <Update_File+0x15c>)
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f00f f9db 	bl	801071c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001366:	69f8      	ldr	r0, [r7, #28]
 8001368:	f00e fb06 	bl	800f978 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <Update_File+0x14c>)
 800136e:	f00e f8d4 	bl	800f51a <f_close>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Update_File+0x144>)
 8001378:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <Update_File+0x144>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f00e faf0 	bl	800f968 <malloc>
 8001388:	4603      	mov	r3, r0
 800138a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Update_File+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <Update_File+0x160>)
 8001396:	6938      	ldr	r0, [r7, #16]
 8001398:	f00f f9c0 	bl	801071c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f00e faeb 	bl	800f978 <free>
 80013a2:	e00c      	b.n	80013be <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f00e fadf 	bl	800f968 <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <Update_File+0x164>)
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f00f f9b2 	bl	801071c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f00e fadd 	bl	800f978 <free>
	     }
	}
    return fresult;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Update_File+0x144>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20002348 	.word	0x20002348
 80013d0:	20002360 	.word	0x20002360
 80013d4:	08013618 	.word	0x08013618
 80013d8:	20001318 	.word	0x20001318
 80013dc:	08013638 	.word	0x08013638
 80013e0:	20002368 	.word	0x20002368
 80013e4:	08013854 	.word	0x08013854
 80013e8:	0801387c 	.word	0x0801387c
 80013ec:	08013748 	.word	0x08013748
 80013f0:	08013770 	.word	0x08013770

080013f4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f00e f8ef 	bl	800f5e0 <f_mkdir>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <Create_Dir+0x68>)
 8001408:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <Create_Dir+0x68>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f00e faa8 	bl	800f968 <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <Create_Dir+0x6c>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f00f f97b 	bl	801071c <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f00e faa6 	bl	800f978 <free>
 800142c:	e00f      	b.n	800144e <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f00e fa9a 	bl	800f968 <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <Create_Dir+0x68>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <Create_Dir+0x70>)
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f00f f96a 	bl	801071c <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f00e fa95 	bl	800f978 <free>
    }
    return fresult;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <Create_Dir+0x68>)
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20002360 	.word	0x20002360
 8001460:	080138dc 	.word	0x080138dc
 8001464:	08013900 	.word	0x08013900

08001468 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001476:	2332      	movs	r3, #50	; 0x32
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	22d0      	movs	r2, #208	; 0xd0
 8001486:	21ef      	movs	r1, #239	; 0xef
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <read_chip_id+0x3c>)
 800148a:	f005 ff9d 	bl	80073c8 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b55      	cmp	r3, #85	; 0x55
 8001492:	d001      	beq.n	8001498 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001494:	2301      	movs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20002608 	.word	0x20002608

080014a8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d81a      	bhi.n	80014f4 <set_oss+0x4c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <set_oss+0x1c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014ed 	.word	0x080014ed
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	705a      	strb	r2, [r3, #1]
			break;
 80014da:	e00f      	b.n	80014fc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	705a      	strb	r2, [r3, #1]
			break;
 80014e2:	e00b      	b.n	80014fc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220e      	movs	r2, #14
 80014e8:	705a      	strb	r2, [r3, #1]
			break;
 80014ea:	e007      	b.n	80014fc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	221a      	movs	r2, #26
 80014f0:	705a      	strb	r2, [r3, #1]
			break;
 80014f2:	e003      	b.n	80014fc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2208      	movs	r2, #8
 80014f8:	705a      	strb	r2, [r3, #1]
			break;
 80014fa:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2302      	movs	r3, #2
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f4      	movs	r2, #244	; 0xf4
 800151e:	21ee      	movs	r1, #238	; 0xee
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <set_oss+0x88>)
 8001522:	f005 fe57 	bl	80071d4 <HAL_I2C_Mem_Write>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002608 	.word	0x20002608

08001534 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2316      	movs	r3, #22
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	22aa      	movs	r2, #170	; 0xaa
 8001574:	21ef      	movs	r1, #239	; 0xef
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <read_calib_data+0xe0>)
 8001578:	f005 ff26 	bl	80073c8 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001582:	e03c      	b.n	80015fe <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3328      	adds	r3, #40	; 0x28
 800158c:	443b      	add	r3, r7
 800158e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b219      	sxth	r1, r3
 8001596:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800159a:	3328      	adds	r3, #40	; 0x28
 800159c:	443b      	add	r3, r7
 800159e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4403      	add	r3, r0
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b212      	sxth	r2, r2
 80015b2:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440b      	add	r3, r1
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d9be      	bls.n	8001584 <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800160a:	4618      	mov	r0, r3
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20002608 	.word	0x20002608

08001618 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00e f9bc 	bl	800f9a4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 800162c:	687c      	ldr	r4, [r7, #4]
 800162e:	f7ff ff1b 	bl	8001468 <read_chip_id>
 8001632:	4603      	mov	r3, r0
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	687c      	ldr	r4, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff79 	bl	8001534 <read_calib_data>
 8001642:	4603      	mov	r3, r0
 8001644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff2a 	bl	80014a8 <set_oss>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001662:	232e      	movs	r3, #46	; 0x2e
 8001664:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f4      	movs	r2, #244	; 0xf4
 8001676:	21ee      	movs	r1, #238	; 0xee
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <get_ut+0x50>)
 800167a:	f005 fdab 	bl	80071d4 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 800167e:	2005      	movs	r0, #5
 8001680:	f005 f88c 	bl	800679c <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001684:	2332      	movs	r3, #50	; 0x32
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2302      	movs	r3, #2
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	22f6      	movs	r2, #246	; 0xf6
 8001694:	21ef      	movs	r1, #239	; 0xef
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <get_ut+0x50>)
 8001698:	f005 fe96 	bl	80073c8 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	797a      	ldrb	r2, [r7, #5]
 80016a2:	4313      	orrs	r3, r2
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002608 	.word	0x20002608

080016b0 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	895b      	ldrh	r3, [r3, #10]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	8912      	ldrh	r2, [r2, #8]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	13db      	asrs	r3, r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ec:	02da      	lsls	r2, r3, #11
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f4:	4619      	mov	r1, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	440b      	add	r3, r1
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	3308      	adds	r3, #8
 8001710:	111b      	asrs	r3, r3, #4
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001768 <get_temp+0xb8>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800176c <get_temp+0xbc>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d908      	bls.n	800174a <get_temp+0x9a>
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001770 <get_temp+0xc0>
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	db03      	blt.n	8001752 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	3dcccccd 	.word	0x3dcccccd
 800176c:	c2200000 	.word	0xc2200000
 8001770:	42aa0000 	.word	0x42aa0000

08001774 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af04      	add	r7, sp, #16
 800177a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <get_up+0x7c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	2300      	movs	r3, #0
 8001784:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800178a:	2334      	movs	r3, #52	; 0x34
 800178c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800178e:	2332      	movs	r3, #50	; 0x32
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f4      	movs	r2, #244	; 0xf4
 80017a0:	21ee      	movs	r1, #238	; 0xee
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <get_up+0x80>)
 80017a4:	f005 fd16 	bl	80071d4 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fff6 	bl	800679c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2303      	movs	r3, #3
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	22f6      	movs	r2, #246	; 0xf6
 80017c2:	21ef      	movs	r1, #239	; 0xef
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <get_up+0x80>)
 80017c6:	f005 fdff 	bl	80073c8 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017ca:	7a3b      	ldrb	r3, [r7, #8]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4413      	add	r3, r2
 80017d4:	7aba      	ldrb	r2, [r7, #10]
 80017d6:	441a      	add	r2, r3
 80017d8:	793b      	ldrb	r3, [r7, #4]
 80017da:	f1c3 0308 	rsb	r3, r3, #8
 80017de:	fa42 f303 	asr.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
	return up;
 80017e4:	68fb      	ldr	r3, [r7, #12]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08013970 	.word	0x08013970
 80017f4:	20002608 	.word	0x20002608

080017f8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017f8:	b084      	sub	sp, #16
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001812:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001816:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001818:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fb03 f303 	mul.w	r3, r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da01      	bge.n	800182c <get_pressure+0x34>
 8001828:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800182c:	131b      	asrs	r3, r3, #12
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	da01      	bge.n	800183a <get_pressure+0x42>
 8001836:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183a:	12db      	asrs	r3, r3, #11
 800183c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800183e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001842:	461a      	mov	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <get_pressure+0x5a>
 800184e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001852:	12db      	asrs	r3, r3, #11
 8001854:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800185e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001862:	009a      	lsls	r2, r3, #2
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800186c:	4093      	lsls	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	da00      	bge.n	8001876 <get_pressure+0x7e>
 8001874:	3303      	adds	r3, #3
 8001876:	109b      	asrs	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800187a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	da02      	bge.n	8001890 <get_pressure+0x98>
 800188a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800188e:	331f      	adds	r3, #31
 8001890:	135b      	asrs	r3, r3, #13
 8001892:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001894:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001898:	461a      	mov	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fb03 f303 	mul.w	r3, r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da01      	bge.n	80018a8 <get_pressure+0xb0>
 80018a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018a8:	131b      	asrs	r3, r3, #12
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <get_pressure+0xc0>
 80018b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018b6:	33ff      	adds	r3, #255	; 0xff
 80018b8:	141b      	asrs	r3, r3, #16
 80018ba:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	3302      	adds	r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da00      	bge.n	80018ca <get_pressure+0xd2>
 80018c8:	3303      	adds	r3, #3
 80018ca:	109b      	asrs	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	0bdb      	lsrs	r3, r3, #15
 80018de:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80018ec:	4611      	mov	r1, r2
 80018ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018f2:	410a      	asrs	r2, r1
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db06      	blt.n	800190e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	005a      	lsls	r2, r3, #1
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e005      	b.n	800191a <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <get_pressure+0x12a>
 8001920:	33ff      	adds	r3, #255	; 0xff
 8001922:	121b      	asrs	r3, r3, #8
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_pressure+0x136>
 800192c:	33ff      	adds	r3, #255	; 0xff
 800192e:	121b      	asrs	r3, r3, #8
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f640 32de 	movw	r2, #3038	; 0xbde
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	da02      	bge.n	800194a <get_pressure+0x152>
 8001944:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001948:	33ff      	adds	r3, #255	; 0xff
 800194a:	141b      	asrs	r3, r3, #16
 800194c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <get_pressure+0x198>)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	da02      	bge.n	8001960 <get_pressure+0x168>
 800195a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800195e:	33ff      	adds	r3, #255	; 0xff
 8001960:	141b      	asrs	r3, r3, #16
 8001962:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <get_pressure+0x17c>
 8001972:	330f      	adds	r3, #15
 8001974:	111b      	asrs	r3, r3, #4
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

	return p;
 800197e:	69fb      	ldr	r3, [r7, #28]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	b004      	add	sp, #16
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	ffffe343 	.word	0xffffe343
 8001994:	00000000 	.word	0x00000000

08001998 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <get_altitude+0xb8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019bc:	ee16 0a90 	vmov	r0, s13
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a40 <get_altitude+0xa8>
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f010 fea2 	bl	8012718 <pow>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	491d      	ldr	r1, [pc, #116]	; (8001a54 <get_altitude+0xbc>)
 80019de:	f7fe fc63 	bl	80002a8 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a317      	add	r3, pc, #92	; (adr r3, 8001a48 <get_altitude+0xb0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe12 	bl	8000618 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f904 	bl	8000c08 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a58 <get_altitude+0xc0>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d908      	bls.n	8001a28 <get_altitude+0x90>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a5c <get_altitude+0xc4>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	db03      	blt.n	8001a30 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ee07 3a90 	vmov	s15, r3
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ccd9456c 	.word	0xccd9456c
 8001a44:	3fc85b95 	.word	0x3fc85b95
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40e5a540 	.word	0x40e5a540
 8001a50:	20000000 	.word	0x20000000
 8001a54:	3ff00000 	.word	0x3ff00000
 8001a58:	c3fa0000 	.word	0xc3fa0000
 8001a5c:	460ca000 	.word	0x460ca000

08001a60 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd66 	bl	8000544 <__aeabi_i2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <get_slp+0x80>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001ae4 <get_slp+0x84>
 8001a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001ad8 <get_slp+0x78>
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f010 fe37 	bl	8012718 <pow>
 8001aaa:	ec53 2b10 	vmov	r2, r3, d0
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fedb 	bl	800086c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f8a3 	bl	8000c08 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]

	return slp;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	ee07 3a90 	vmov	s15, r3
}
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	b851eb85 	.word	0xb851eb85
 8001adc:	4015051e 	.word	0x4015051e
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	472d2a00 	.word	0x472d2a00

08001ae8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b095      	sub	sp, #84	; 0x54
 8001aec:	af0e      	add	r7, sp, #56	; 0x38
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001af2:	f7ff fdb3 	bl	800165c <get_ut>
 8001af6:	ee07 0a90 	vmov	s15, r0
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fdd3 	bl	80016b0 <get_temp>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001b18:	f7ff fe2c 	bl	8001774 <get_up>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001b22:	683e      	ldr	r6, [r7, #0]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b3e:	f7ff fe5b 	bl	80017f8 <get_pressure>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ff89 	bl	8001a60 <get_slp>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff ff1d 	bl	8001998 <get_altitude>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	617b      	str	r3, [r7, #20]
	return result;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461c      	mov	r4, r3
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b98 <button_set_long_press_time>:
// Button states and handlers
Button_State button_states[NUM_BUTTONS];
Button_Handler button_handlers[NUM_BUTTONS];

// Set long press time for a button
void button_set_long_press_time(uint8_t button_num, uint32_t long_press_time) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
    if (button_num < NUM_BUTTONS) {
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d809      	bhi.n	8001bbe <button_set_long_press_time+0x26>
        button_handlers[button_num].long_press_time = long_press_time;
 8001baa:	79fa      	ldrb	r2, [r7, #7]
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <button_set_long_press_time+0x34>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3308      	adds	r3, #8
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
    }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20002408 	.word	0x20002408

08001bd0 <button_set_handler>:
        button_states[i].debounce_counter = 0;
    }
}

// Set button event handler
void button_set_handler(uint8_t button_num, Button_Callback callback, void* context) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]
    if (button_num < NUM_BUTTONS) {
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d812      	bhi.n	8001c0a <button_set_handler+0x3a>
        button_handlers[button_num].callback = callback;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	490c      	ldr	r1, [pc, #48]	; (8001c18 <button_set_handler+0x48>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
        button_handlers[button_num].context = context;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <button_set_handler+0x48>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	3304      	adds	r3, #4
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
    }
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20002408 	.word	0x20002408

08001c1c <button_task>:
 * @brief Scans and processes button states, detects button events, and triggers corresponding callbacks.
 *
 * This function should be called periodically in the main loop. It handles debouncing, press, release, short press,
 * long press, and double press events for a defined set of buttons, and triggers their respective callback functions.
 */
void button_task(void) {
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
    uint8_t debounce_threshold = 8; // Amount of HAL ticks to wait for button to stop bouncing
 8001c22:	2308      	movs	r3, #8
 8001c24:	73bb      	strb	r3, [r7, #14]
    uint32_t double_press_timeout = 150; // Amount of HAL ticks to wait for a second press to be considered a double press
 8001c26:	2396      	movs	r3, #150	; 0x96
 8001c28:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e158      	b.n	8001ee2 <button_task+0x2c6>
        // Read the current state of the button (pressed or not pressed)
        uint8_t current_state = HAL_GPIO_ReadPin(Button_Port[i], Button_Pin[i]) == GPIO_PIN_RESET;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	4ab0      	ldr	r2, [pc, #704]	; (8001ef4 <button_task+0x2d8>)
 8001c34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	49af      	ldr	r1, [pc, #700]	; (8001ef8 <button_task+0x2dc>)
 8001c3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f005 f912 	bl	8006e6c <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	71fb      	strb	r3, [r7, #7]

        // Check if the button state has changed
        if (current_state != button_states[i].pressed) {
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	49a8      	ldr	r1, [pc, #672]	; (8001efc <button_task+0x2e0>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f000 80f4 	beq.w	8001e56 <button_task+0x23a>
            // Increment debounce counter
            button_states[i].debounce_counter++;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	49a2      	ldr	r1, [pc, #648]	; (8001efc <button_task+0x2e0>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3309      	adds	r3, #9
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2d8      	uxtb	r0, r3
 8001c84:	499d      	ldr	r1, [pc, #628]	; (8001efc <button_task+0x2e0>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3309      	adds	r3, #9
 8001c92:	4602      	mov	r2, r0
 8001c94:	701a      	strb	r2, [r3, #0]

            // Check if the debounce counter has reached the threshold
            if (button_states[i].debounce_counter >= debounce_threshold) {
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	4998      	ldr	r1, [pc, #608]	; (8001efc <button_task+0x2e0>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3309      	adds	r3, #9
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	7bba      	ldrb	r2, [r7, #14]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	f200 8116 	bhi.w	8001edc <button_task+0x2c0>

                // If the button has been released (state changed from pressed to not pressed)
                if (button_states[i].pressed) {
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	4992      	ldr	r1, [pc, #584]	; (8001efc <button_task+0x2e0>)
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8087 	beq.w	8001dd4 <button_task+0x1b8>
                    // Trigger the release event callback
                    button_handlers[i].callback(BUTTON_EVENT_RELEASE);
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	498d      	ldr	r1, [pc, #564]	; (8001f00 <button_task+0x2e4>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	4798      	blx	r3

                    // Calculate the time since the button was last pressed
                    uint32_t time_since_press = HAL_GetTick() - button_states[i].press_time;
 8001cda:	f004 fd53 	bl	8006784 <HAL_GetTick>
 8001cde:	4601      	mov	r1, r0
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	4886      	ldr	r0, [pc, #536]	; (8001efc <button_task+0x2e0>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4403      	add	r3, r0
 8001cee:	3304      	adds	r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	603b      	str	r3, [r7, #0]

                    // Check if the button was pressed once and held longer than the long press time
                    if (button_states[i].press_count == 1 && time_since_press > button_handlers[i].long_press_time) {
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	4980      	ldr	r1, [pc, #512]	; (8001efc <button_task+0x2e0>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3308      	adds	r3, #8
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d120      	bne.n	8001d4e <button_task+0x132>
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	497c      	ldr	r1, [pc, #496]	; (8001f00 <button_task+0x2e4>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d914      	bls.n	8001d4e <button_task+0x132>
                        // Trigger the long press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_LONG_PRESS);
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	4976      	ldr	r1, [pc, #472]	; (8001f00 <button_task+0x2e4>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2003      	movs	r0, #3
 8001d36:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	4970      	ldr	r1, [pc, #448]	; (8001efc <button_task+0x2e0>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3308      	adds	r3, #8
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e042      	b.n	8001dd4 <button_task+0x1b8>
                    }
                    // Check if the button was pressed once and released within the double press timeout
                    else if (button_states[i].press_count == 1 && time_since_press > double_press_timeout) {
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	496a      	ldr	r1, [pc, #424]	; (8001efc <button_task+0x2e0>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d118      	bne.n	8001d96 <button_task+0x17a>
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d914      	bls.n	8001d96 <button_task+0x17a>
                        // Trigger the short press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_SHORT_PRESS);
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	4964      	ldr	r1, [pc, #400]	; (8001f00 <button_task+0x2e4>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	495e      	ldr	r1, [pc, #376]	; (8001efc <button_task+0x2e0>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3308      	adds	r3, #8
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e01e      	b.n	8001dd4 <button_task+0x1b8>
                    }
                    // Check if the button was pressed twice or more
                    else if (button_states[i].press_count >= 2) {
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	4958      	ldr	r1, [pc, #352]	; (8001efc <button_task+0x2e0>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d913      	bls.n	8001dd4 <button_task+0x1b8>
                        // Trigger the double press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_DOUBLE_PRESS);
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	4954      	ldr	r1, [pc, #336]	; (8001f00 <button_task+0x2e4>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	494e      	ldr	r1, [pc, #312]	; (8001efc <button_task+0x2e0>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	3308      	adds	r3, #8
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
                    }
                }

                // Update button state and reset debounce counter
                button_states[i].pressed = current_state;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	4949      	ldr	r1, [pc, #292]	; (8001efc <button_task+0x2e0>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	701a      	strb	r2, [r3, #0]
                button_states[i].debounce_counter = 0;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	4944      	ldr	r1, [pc, #272]	; (8001efc <button_task+0x2e0>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3309      	adds	r3, #9
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]

                // If the button has been pressed
                if (current_state) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d06d      	beq.n	8001edc <button_task+0x2c0>
                    // Update press time, trigger the press event callback, and increment the press count
                    button_states[i].press_time = HAL_GetTick();
 8001e00:	7bfc      	ldrb	r4, [r7, #15]
 8001e02:	f004 fcbf 	bl	8006784 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	493c      	ldr	r1, [pc, #240]	; (8001efc <button_task+0x2e0>)
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4423      	add	r3, r4
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3304      	adds	r3, #4
 8001e16:	601a      	str	r2, [r3, #0]
                    button_handlers[i].callback(BUTTON_EVENT_DOWN);
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	4939      	ldr	r1, [pc, #228]	; (8001f00 <button_task+0x2e4>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4798      	blx	r3
                    button_states[i].press_count++;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	4933      	ldr	r1, [pc, #204]	; (8001efc <button_task+0x2e0>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2d8      	uxtb	r0, r3
 8001e42:	492e      	ldr	r1, [pc, #184]	; (8001efc <button_task+0x2e0>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3308      	adds	r3, #8
 8001e50:	4602      	mov	r2, r0
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e042      	b.n	8001edc <button_task+0x2c0>
                }
            }
        } else {
            // If the button was released after one press and double_press_timeout elapsed without press, trigger short_single_press
            if (!button_states[i].pressed && button_states[i].press_count == 1 && HAL_GetTick() - button_states[i].press_time > double_press_timeout) {
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	4928      	ldr	r1, [pc, #160]	; (8001efc <button_task+0x2e0>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d12e      	bne.n	8001ec8 <button_task+0x2ac>
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	4923      	ldr	r1, [pc, #140]	; (8001efc <button_task+0x2e0>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3308      	adds	r3, #8
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d123      	bne.n	8001ec8 <button_task+0x2ac>
 8001e80:	f004 fc80 	bl	8006784 <HAL_GetTick>
 8001e84:	4601      	mov	r1, r0
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	481c      	ldr	r0, [pc, #112]	; (8001efc <button_task+0x2e0>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4403      	add	r3, r0
 8001e94:	3304      	adds	r3, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1acb      	subs	r3, r1, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d213      	bcs.n	8001ec8 <button_task+0x2ac>
                // Trigger the short press event and reset the press count
                button_handlers[i].callback(BUTTON_EVENT_SHORT_PRESS);
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	4917      	ldr	r1, [pc, #92]	; (8001f00 <button_task+0x2e4>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	4798      	blx	r3
                button_states[i].press_count = 0;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	4911      	ldr	r1, [pc, #68]	; (8001efc <button_task+0x2e0>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
            }

            // Reset the debounce counter if the button state hasn't changed
            button_states[i].debounce_counter = 0;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <button_task+0x2e0>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3309      	adds	r3, #9
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	f67f aea3 	bls.w	8001c30 <button_task+0x14>
        }
    }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000020 	.word	0x20000020
 8001efc:	200023c0 	.word	0x200023c0
 8001f00:	20002408 	.word	0x20002408

08001f04 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001f10:	e0ad      	b.n	800206e <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4959      	ldr	r1, [pc, #356]	; (8002084 <initButtons+0x180>)
 8001f20:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f24:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	440b      	add	r3, r1
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4955      	ldr	r1, [pc, #340]	; (8002088 <initButtons+0x184>)
 8001f34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f38:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	7993      	ldrb	r3, [r2, #6]
 8001f46:	f36f 0300 	bfc	r3, #0, #1
 8001f4a:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	7993      	ldrb	r3, [r2, #6]
 8001f58:	f36f 0341 	bfc	r3, #1, #1
 8001f5c:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	3301      	adds	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b05      	cmp	r3, #5
 8002072:	f67f af4e 	bls.w	8001f12 <initButtons+0xe>
	}
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	20000044 	.word	0x20000044
 8002088:	2000002c 	.word	0x2000002c

0800208c <resetButtonHandlers>:

void resetButtonHandlers(void){
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8002096:	e044      	b.n	8002122 <resetButtonHandlers+0x96>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4a27      	ldr	r2, [pc, #156]	; (8002138 <resetButtonHandlers+0xac>)
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4a24      	ldr	r2, [pc, #144]	; (8002138 <resetButtonHandlers+0xac>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4a21      	ldr	r2, [pc, #132]	; (8002138 <resetButtonHandlers+0xac>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <resetButtonHandlers+0xac>)
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <resetButtonHandlers+0xac>)
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
		// new handlers
		btnsPtrs[i]->onPress = NULL;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <resetButtonHandlers+0xac>)
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
		btnsPtrs[i]->onRelease = NULL;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <resetButtonHandlers+0xac>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
		btnsPtrs[i]->onShortPress = NULL;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <resetButtonHandlers+0xac>)
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	2200      	movs	r2, #0
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34
		btnsPtrs[i]->onLongPress = NULL;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <resetButtonHandlers+0xac>)
 80020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
		btnsPtrs[i]->onContinuousPress = NULL;
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <resetButtonHandlers+0xac>)
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	2200      	movs	r2, #0
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c
		btnsPtrs[i]->onRepeatedPress = NULL;
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <resetButtonHandlers+0xac>)
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

		i++;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	3301      	adds	r3, #1
 8002120:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d9b7      	bls.n	8002098 <resetButtonHandlers+0xc>
	}
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000050 	.word	0x20000050

0800213c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	889b      	ldrh	r3, [r3, #4]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f004 fe8c 	bl	8006e6c <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <scanButton>:

void scanButton(Button* btn){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	799b      	ldrb	r3, [r3, #6]
 8002174:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	7993      	ldrb	r3, [r2, #6]
 8002188:	f361 0300 	bfi	r3, r1, #0, #1
 800218c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffd4 	bl	800213c <readButton>
 8002194:	4603      	mov	r3, r0
 8002196:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	b2d9      	uxtb	r1, r3
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	7993      	ldrb	r3, [r2, #6]
 80021a4:	f361 0341 	bfi	r3, r1, #1, #1
 80021a8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80021aa:	7bba      	ldrb	r2, [r7, #14]
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d158      	bne.n	8002264 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d14e      	bne.n	8002256 <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021be:	3301      	adds	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7a9b      	ldrb	r3, [r3, #10]
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2000      	movs	r0, #0
 80021e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7a9b      	ldrb	r3, [r3, #10]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <scanButton+0x17c>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d32d      	bcc.n	800224e <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7b5b      	ldrb	r3, [r3, #13]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d110      	bne.n	800221c <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2000      	movs	r0, #0
 8002208:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7a5b      	ldrb	r3, [r3, #9]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7a9b      	ldrb	r3, [r3, #10]
 8002220:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <scanButton+0x17c>)
 8002222:	8852      	ldrh	r2, [r2, #2]
 8002224:	fb93 f1f2 	sdiv	r1, r3, r2
 8002228:	fb01 f202 	mul.w	r2, r1, r2
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2000      	movs	r0, #0
 8002240:	4798      	blx	r3
					}
					btn->longContinuous++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7adb      	ldrb	r3, [r3, #11]
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002254:	e042      	b.n	80022dc <scanButton+0x174>
			btn->shortSingleHandled = 0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	735a      	strb	r2, [r3, #13]
}
 8002262:	e03b      	b.n	80022dc <scanButton+0x174>
		if(currStatus == 1){
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11f      	bne.n	80022aa <scanButton+0x142>
			btn->shortContinuous = 0;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7b1b      	ldrb	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12e      	bne.n	80022dc <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <scanButton+0x12e>
					pulseVib(5, 75);
 8002286:	214b      	movs	r1, #75	; 0x4b
 8002288:	2005      	movs	r0, #5
 800228a:	f003 f88d 	bl	80053a8 <pulseVib>
					btn->onSinglePressHandler(NULL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2000      	movs	r0, #0
 8002294:	4798      	blx	r3
				btn->shortSingleOn++;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	79db      	ldrb	r3, [r3, #7]
 800229a:	3301      	adds	r3, #1
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	731a      	strb	r2, [r3, #12]
}
 80022a8:	e018      	b.n	80022dc <scanButton+0x174>
			if(btn->releaseHandled == 0){
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b9b      	ldrb	r3, [r3, #14]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d114      	bne.n	80022dc <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2000      	movs	r0, #0
 80022c0:	4798      	blx	r3
				btn->pressedFor = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7a1b      	ldrb	r3, [r3, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	739a      	strb	r2, [r3, #14]
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000068 	.word	0x20000068

080022e8 <scanButtons>:


void scanButtons(Button* btns[6]){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80022f4:	e00a      	b.n	800230c <scanButtons+0x24>
		scanButton(btns[i]);
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff31 	bl	8002168 <scanButton>
		i++;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3301      	adds	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d9f1      	bls.n	80022f6 <scanButtons+0xe>
	}
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	791b      	ldrb	r3, [r3, #4]
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <pauseTimer>:
	cnt->remainingSec = seconds;
}
void startTimer(countdown_t *cnt){
	cnt->isRunning = 1;
}
void pauseTimer(countdown_t *cnt){
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	711a      	strb	r2, [r3, #4]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08e      	sub	sp, #56	; 0x38
 8002354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	4b72      	ldr	r3, [pc, #456]	; (8002534 <MX_GPIO_Init+0x1e4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a71      	ldr	r2, [pc, #452]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <MX_GPIO_Init+0x1e4>)
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b68      	ldr	r3, [pc, #416]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a63      	ldr	r2, [pc, #396]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <MX_GPIO_Init+0x1e4>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b48      	ldr	r3, [pc, #288]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a47      	ldr	r2, [pc, #284]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <MX_GPIO_Init+0x1e4>)
 8002434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <MX_GPIO_Init+0x1e4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	483b      	ldr	r0, [pc, #236]	; (8002538 <MX_GPIO_Init+0x1e8>)
 800244c:	f004 fd26 	bl	8006e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f244 0181 	movw	r1, #16513	; 0x4081
 8002456:	4839      	ldr	r0, [pc, #228]	; (800253c <MX_GPIO_Init+0x1ec>)
 8002458:	f004 fd20 	bl	8006e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4837      	ldr	r0, [pc, #220]	; (8002540 <MX_GPIO_Init+0x1f0>)
 8002462:	f004 fd1b 	bl	8006e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800246c:	4835      	ldr	r0, [pc, #212]	; (8002544 <MX_GPIO_Init+0x1f4>)
 800246e:	f004 fd15 	bl	8006e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002472:	2340      	movs	r3, #64	; 0x40
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	4619      	mov	r1, r3
 8002488:	482b      	ldr	r0, [pc, #172]	; (8002538 <MX_GPIO_Init+0x1e8>)
 800248a:	f004 fb43 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800248e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	4619      	mov	r1, r3
 80024a6:	4825      	ldr	r0, [pc, #148]	; (800253c <MX_GPIO_Init+0x1ec>)
 80024a8:	f004 fb34 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 80024ac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024b2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	4619      	mov	r1, r3
 80024c2:	4821      	ldr	r0, [pc, #132]	; (8002548 <MX_GPIO_Init+0x1f8>)
 80024c4:	f004 fb26 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80024c8:	2340      	movs	r3, #64	; 0x40
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4818      	ldr	r0, [pc, #96]	; (8002540 <MX_GPIO_Init+0x1f0>)
 80024e0:	f004 fb18 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	4619      	mov	r1, r3
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <MX_GPIO_Init+0x1f0>)
 80024f8:	f004 fb0c 	bl	8006b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80024fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <MX_GPIO_Init+0x1f4>)
 8002516:	f004 fafd 	bl	8006b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2028      	movs	r0, #40	; 0x28
 8002520:	f004 fa3b 	bl	800699a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002524:	2028      	movs	r0, #40	; 0x28
 8002526:	f004 fa54 	bl	80069d2 <HAL_NVIC_EnableIRQ>

}
 800252a:	bf00      	nop
 800252c:	3738      	adds	r7, #56	; 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40021800 	.word	0x40021800
 8002544:	40020800 	.word	0x40020800
 8002548:	40021000 	.word	0x40021000

0800254c <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	f44f 7216 	mov.w	r2, #600	; 0x258
 800255c:	4619      	mov	r1, r3
 800255e:	4803      	ldr	r0, [pc, #12]	; (800256c <getDataFromUart+0x20>)
 8002560:	f009 f86b 	bl	800b63a <HAL_UART_Receive_DMA>

}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20005b94 	.word	0x20005b94

08002570 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8002570:	b580      	push	{r7, lr}
 8002572:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002576:	af00      	add	r7, sp, #0
 8002578:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800257c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002580:	6018      	str	r0, [r3, #0]
 8002582:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002586:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800258a:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 800258c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002590:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002594:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002598:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	3304      	adds	r3, #4
 80025a6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00e f918 	bl	80107e2 <strncpy>
	gpsModule.getData = &getDataFromUart;
 80025b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <initGps+0x90>)
 80025bc:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 80025c0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80025ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025d2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f44f 7319 	mov.w	r3, #612	; 0x264
 80025e8:	461a      	mov	r2, r3
 80025ea:	f00d f9cd 	bl	800f988 <memcpy>
}
 80025ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	0800254d 	.word	0x0800254d

08002604 <tickTimAAB>:

uint8_t isModuleSet = 0;

uint8_t isScrollbarEnabled = 0;
timer_T* scrollerTimer = NULL;
void tickTimAAB(void){
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	tickTimer(scrollerTimer);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <tickTimAAB+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f004 f80a 	bl	8006626 <tickTimer>
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20002604 	.word	0x20002604

0800261c <showScrollbar>:
void showScrollbar(void){
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af04      	add	r7, sp, #16
	uint16_t x = 390;
 8002622:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002626:	81fb      	strh	r3, [r7, #14]
	uint8_t y = 20;
 8002628:	2314      	movs	r3, #20
 800262a:	737b      	strb	r3, [r7, #13]
	uint8_t h_margin = 2;
 800262c:	2302      	movs	r3, #2
 800262e:	733b      	strb	r3, [r7, #12]
	uint8_t v_margin = 2;
 8002630:	2302      	movs	r3, #2
 8002632:	72fb      	strb	r3, [r7, #11]
	uint8_t b_margin = 4;
 8002634:	2304      	movs	r3, #4
 8002636:	72bb      	strb	r3, [r7, #10]
	uint8_t width = 9;
 8002638:	2309      	movs	r3, #9
 800263a:	727b      	strb	r3, [r7, #9]
	uint8_t height = 200;
 800263c:	23c8      	movs	r3, #200	; 0xc8
 800263e:	723b      	strb	r3, [r7, #8]
	uint8_t b_height = (height-2*v_margin-(MENU_ITEM_NUM-1)*b_margin)/MENU_ITEM_NUM;
 8002640:	7a3a      	ldrb	r2, [r7, #8]
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	1ad2      	subs	r2, r2, r3
 8002648:	7abb      	ldrb	r3, [r7, #10]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <showScrollbar+0xf4>)
 8002650:	fb82 1203 	smull	r1, r2, r2, r3
 8002654:	17db      	asrs	r3, r3, #31
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	71fb      	strb	r3, [r7, #7]

	lcdRoundedRect2(x, x+width-1, y, y+height, 0, LCD_RECT_PATTERN_FILL, 0,3);
 800265a:	89f8      	ldrh	r0, [r7, #14]
 800265c:	89fa      	ldrh	r2, [r7, #14]
 800265e:	7a7b      	ldrb	r3, [r7, #9]
 8002660:	4413      	add	r3, r2
 8002662:	1e59      	subs	r1, r3, #1
 8002664:	7b7c      	ldrb	r4, [r7, #13]
 8002666:	7b7a      	ldrb	r2, [r7, #13]
 8002668:	7a3b      	ldrb	r3, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	2203      	movs	r2, #3
 800266e:	9203      	str	r2, [sp, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	9202      	str	r2, [sp, #8]
 8002674:	2201      	movs	r2, #1
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	9200      	str	r2, [sp, #0]
 800267c:	4622      	mov	r2, r4
 800267e:	f001 f998 	bl	80039b2 <lcdRoundedRect2>
	lcdRoundedRect2(x, x+width-1, y, y+height, 1, LCD_RECT_PATTERN_CLEAR, 1, 3);
 8002682:	89f8      	ldrh	r0, [r7, #14]
 8002684:	89fa      	ldrh	r2, [r7, #14]
 8002686:	7a7b      	ldrb	r3, [r7, #9]
 8002688:	4413      	add	r3, r2
 800268a:	1e59      	subs	r1, r3, #1
 800268c:	7b7c      	ldrb	r4, [r7, #13]
 800268e:	7b7a      	ldrb	r2, [r7, #13]
 8002690:	7a3b      	ldrb	r3, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	2203      	movs	r2, #3
 8002696:	9203      	str	r2, [sp, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	9202      	str	r2, [sp, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	9201      	str	r2, [sp, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	9200      	str	r2, [sp, #0]
 80026a4:	4622      	mov	r2, r4
 80026a6:	f001 f984 	bl	80039b2 <lcdRoundedRect2>
	lcdRoundedRect2(x+h_margin, x+width-1-h_margin, y+1+v_margin+(b_height+b_margin)*position, y+1+v_margin+b_height+(b_height+b_margin)*position, 1, LCD_RECT_PATTERN_FILL, 1, 1);
 80026aa:	89fa      	ldrh	r2, [r7, #14]
 80026ac:	7b3b      	ldrb	r3, [r7, #12]
 80026ae:	18d0      	adds	r0, r2, r3
 80026b0:	89fa      	ldrh	r2, [r7, #14]
 80026b2:	7a7b      	ldrb	r3, [r7, #9]
 80026b4:	4413      	add	r3, r2
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	7b3b      	ldrb	r3, [r7, #12]
 80026ba:	1ad4      	subs	r4, r2, r3
 80026bc:	7b7b      	ldrb	r3, [r7, #13]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	441a      	add	r2, r3
 80026c4:	79f9      	ldrb	r1, [r7, #7]
 80026c6:	7abb      	ldrb	r3, [r7, #10]
 80026c8:	440b      	add	r3, r1
 80026ca:	4912      	ldr	r1, [pc, #72]	; (8002714 <showScrollbar+0xf8>)
 80026cc:	7809      	ldrb	r1, [r1, #0]
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	18d5      	adds	r5, r2, r3
 80026d4:	7b7b      	ldrb	r3, [r7, #13]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	441a      	add	r2, r3
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	441a      	add	r2, r3
 80026e0:	79f9      	ldrb	r1, [r7, #7]
 80026e2:	7abb      	ldrb	r3, [r7, #10]
 80026e4:	440b      	add	r3, r1
 80026e6:	490b      	ldr	r1, [pc, #44]	; (8002714 <showScrollbar+0xf8>)
 80026e8:	7809      	ldrb	r1, [r1, #0]
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	2201      	movs	r2, #1
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	9202      	str	r2, [sp, #8]
 80026f8:	2201      	movs	r2, #1
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	462a      	mov	r2, r5
 8002702:	4621      	mov	r1, r4
 8002704:	f001 f955 	bl	80039b2 <lcdRoundedRect2>
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*0, y+1+v_margin+b_height+(b_height+b_margin)*0, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*1, y+1+v_margin+b_height+(b_height+b_margin)*1, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*2, y+1+v_margin+b_height+(b_height+b_margin)*2, 1, LCD_RECT_PATTERN_FILL, 0, 1);
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bdb0      	pop	{r4, r5, r7, pc}
 8002710:	55555556 	.word	0x55555556
 8002714:	20002600 	.word	0x20002600

08002718 <disableScrollbar>:
void disableScrollbar(void){
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
	isScrollbarEnabled = 0;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <disableScrollbar+0x14>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20002602 	.word	0x20002602

08002730 <enableScrollbar>:
void enableScrollbar(void){
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	scrollerTimer = createTimer();
 8002734:	f003 ff37 	bl	80065a6 <createTimer>
 8002738:	4603      	mov	r3, r0
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <enableScrollbar+0x30>)
 800273c:	6013      	str	r3, [r2, #0]
	setTimerAAA(scrollerTimer, 2, &disableScrollbar);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <enableScrollbar+0x30>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <enableScrollbar+0x34>)
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f003 ff3d 	bl	80065c6 <setTimerAAA>
	runTimerAAA(scrollerTimer);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <enableScrollbar+0x30>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 ff52 	bl	80065fa <runTimerAAA>
	isScrollbarEnabled = 1;
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <enableScrollbar+0x38>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20002604 	.word	0x20002604
 8002764:	08002719 	.word	0x08002719
 8002768:	20002602 	.word	0x20002602

0800276c <prevPos>:

void prevPos(void){
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	enableScrollbar();
 8002770:	f7ff ffde 	bl	8002730 <enableScrollbar>
	if(position>0){
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <prevPos+0x28>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <prevPos+0x1e>
		position--;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <prevPos+0x28>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <prevPos+0x28>)
 8002786:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002788:	e002      	b.n	8002790 <prevPos+0x24>
		position=MENU_ITEM_NUM-1;
 800278a:	4b02      	ldr	r3, [pc, #8]	; (8002794 <prevPos+0x28>)
 800278c:	2202      	movs	r2, #2
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20002600 	.word	0x20002600

08002798 <nextPos>:

void nextPos(void){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	enableScrollbar();
 800279c:	f7ff ffc8 	bl	8002730 <enableScrollbar>
	if(position<(MENU_ITEM_NUM-1)){
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <nextPos+0x28>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d806      	bhi.n	80027b6 <nextPos+0x1e>
		position++;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <nextPos+0x28>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <nextPos+0x28>)
 80027b2:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80027b4:	e002      	b.n	80027bc <nextPos+0x24>
		position=0;
 80027b6:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <nextPos+0x28>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20002600 	.word	0x20002600

080027c4 <nextScreen>:

void nextScreen(void){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	nextPos();
 80027c8:	f7ff ffe6 	bl	8002798 <nextPos>
	applySelectedScreen();
 80027cc:	f000 f816 	bl	80027fc <applySelectedScreen>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <prevScreen>:
void prevScreen(void){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	prevPos();
 80027d8:	f7ff ffc8 	bl	800276c <prevPos>
	applySelectedScreen();
 80027dc:	f000 f80e 	bl	80027fc <applySelectedScreen>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <resetPos>:
void resetPos(void){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	position=0;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <resetPos+0x14>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 80027ee:	f000 f805 	bl	80027fc <applySelectedScreen>
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20002600 	.word	0x20002600

080027fc <applySelectedScreen>:
	moduleSetupPtr = module->setup;
	moduleMainPtr = module->main;
	selectScreen();
}

void applySelectedScreen(void){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <applySelectedScreen+0x40>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <applySelectedScreen+0x44>)
 8002808:	460b      	mov	r3, r1
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	3320      	adds	r3, #32
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <applySelectedScreen+0x48>)
 8002818:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <applySelectedScreen+0x40>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <applySelectedScreen+0x44>)
 8002822:	460b      	mov	r3, r1
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <applySelectedScreen+0x4c>)
 8002832:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002834:	f000 f80a 	bl	800284c <selectScreen>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20002600 	.word	0x20002600
 8002840:	08013e98 	.word	0x08013e98
 8002844:	20000070 	.word	0x20000070
 8002848:	2000006c 	.word	0x2000006c

0800284c <selectScreen>:

void selectScreen(void){
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002850:	f7ff fc1c 	bl	800208c <resetButtonHandlers>
	isModuleSet = 0;
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <selectScreen+0x1c>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <selectScreen+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <selectScreen+0x24>)
 8002860:	6013      	str	r3, [r2, #0]
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20002601 	.word	0x20002601
 800286c:	2000006c 	.word	0x2000006c
 8002870:	20000074 	.word	0x20000074

08002874 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <showGui+0x38>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <showGui+0x18>
		moduleSetupPtr();
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <showGui+0x3c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4798      	blx	r3
		isModuleSet = 1;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <showGui+0x38>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <showGui+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <showGui+0x26>
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <showGui+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4798      	blx	r3
	if(isScrollbarEnabled) showScrollbar();
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <showGui+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <showGui+0x32>
 80028a2:	f7ff febb 	bl	800261c <showScrollbar>
//	lcdRefresh();
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20002601 	.word	0x20002601
 80028b0:	20000070 	.word	0x20000070
 80028b4:	20000074 	.word	0x20000074
 80028b8:	20002602 	.word	0x20002602

080028bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <MX_I2C1_Init+0x74>)
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <MX_I2C1_Init+0x78>)
 80028c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_I2C1_Init+0x74>)
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <MX_I2C1_Init+0x7c>)
 80028ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_I2C1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_I2C1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <MX_I2C1_Init+0x74>)
 80028da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_I2C1_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <MX_I2C1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_I2C1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_I2C1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <MX_I2C1_Init+0x74>)
 80028fa:	f004 fb27 	bl	8006f4c <HAL_I2C_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002904:	f001 fd86 	bl	8004414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002908:	2100      	movs	r1, #0
 800290a:	4809      	ldr	r0, [pc, #36]	; (8002930 <MX_I2C1_Init+0x74>)
 800290c:	f005 fadd 	bl	8007eca <HAL_I2CEx_ConfigAnalogFilter>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002916:	f001 fd7d 	bl	8004414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800291a:	2100      	movs	r1, #0
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <MX_I2C1_Init+0x74>)
 800291e:	f005 fb10 	bl	8007f42 <HAL_I2CEx_ConfigDigitalFilter>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002928:	f001 fd74 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20002608 	.word	0x20002608
 8002934:	40005400 	.word	0x40005400
 8002938:	000186a0 	.word	0x000186a0

0800293c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_I2C_MspInit+0x84>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12c      	bne.n	80029b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002980:	2312      	movs	r3, #18
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800298c:	2304      	movs	r3, #4
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	480c      	ldr	r0, [pc, #48]	; (80029c8 <HAL_I2C_MspInit+0x8c>)
 8002998:	f004 f8bc 	bl	8006b14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029aa:	6413      	str	r3, [r2, #64]	; 0x40
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_I2C_MspInit+0x88>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40005400 	.word	0x40005400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400

080029cc <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 80029d6:	2307      	movs	r3, #7
 80029d8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 80029e6:	e010      	b.n	8002a0a <reverse_uint8+0x3e>
		result = result << 1;
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 80029fc:	7bba      	ldrb	r2, [r7, #14]
 80029fe:	7b7b      	ldrb	r3, [r7, #13]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	73bb      	strb	r3, [r7, #14]
		times--;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1eb      	bne.n	80029e8 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f824 	bl	8002a74 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	e014      	b.n	8002a5c <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002a32:	2300      	movs	r3, #0
 8002a34:	80bb      	strh	r3, [r7, #4]
 8002a36:	e00b      	b.n	8002a50 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2232      	movs	r2, #50	; 0x32
 8002a3c:	fb03 f202 	mul.w	r2, r3, r2
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <lcdClearBuffer+0x50>)
 8002a46:	21ff      	movs	r1, #255	; 0xff
 8002a48:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002a4a:	88bb      	ldrh	r3, [r7, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	80bb      	strh	r3, [r7, #4]
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	2b31      	cmp	r3, #49	; 0x31
 8002a54:	d9f0      	bls.n	8002a38 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2bef      	cmp	r3, #239	; 0xef
 8002a60:	d9e7      	bls.n	8002a32 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 f806 	bl	8002a74 <updateSetting>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20002660 	.word	0x20002660

08002a74 <updateSetting>:

void updateSetting(uint8_t state){
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <updateSetting+0x1c>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	7013      	strb	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000078 	.word	0x20000078

08002a94 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	80fb      	strh	r3, [r7, #6]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	717b      	strb	r3, [r7, #5]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	795b      	ldrb	r3, [r3, #5]
 8002aac:	793a      	ldrb	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d304      	bcc.n	8002abc <lcdPutChar+0x28>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	793a      	ldrb	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d902      	bls.n	8002ac2 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	79db      	ldrb	r3, [r3, #7]
 8002ac0:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	885b      	ldrh	r3, [r3, #2]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae2:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]
 8002ae8:	e09b      	b.n	8002c22 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002aea:	797a      	ldrb	r2, [r7, #5]
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	4413      	add	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	0091      	lsls	r1, r2, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	460b      	mov	r3, r1
 8002b00:	4413      	add	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002b0e:	793b      	ldrb	r3, [r7, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	7952      	ldrb	r2, [r2, #5]
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	8852      	ldrh	r2, [r2, #2]
 8002b1a:	fb03 f202 	mul.w	r2, r3, r2
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	7cb9      	ldrb	r1, [r7, #18]
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3308      	adds	r3, #8
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	7d3b      	ldrb	r3, [r7, #20]
 8002b38:	fa42 f303 	asr.w	r3, r2, r3
 8002b3c:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002b3e:	8a3b      	ldrh	r3, [r7, #16]
 8002b40:	4a3e      	ldr	r2, [pc, #248]	; (8002c3c <lcdPutChar+0x1a8>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	b25a      	sxtb	r2, r3
 8002b46:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	8a3b      	ldrh	r3, [r7, #16]
 8002b54:	b2d1      	uxtb	r1, r2
 8002b56:	4a39      	ldr	r2, [pc, #228]	; (8002c3c <lcdPutChar+0x1a8>)
 8002b58:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	3308      	adds	r3, #8
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b25a      	sxtb	r2, r3
 8002b66:	7d3b      	ldrb	r3, [r7, #20]
 8002b68:	f1c3 0308 	rsb	r3, r3, #8
 8002b6c:	21ff      	movs	r1, #255	; 0xff
 8002b6e:	fa41 f303 	asr.w	r3, r1, r3
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	757b      	strb	r3, [r7, #21]
 8002b7e:	e029      	b.n	8002bd4 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002b80:	7d7a      	ldrb	r2, [r7, #21]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	7a1b      	ldrb	r3, [r3, #8]
 8002b8c:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002b8e:	8a3a      	ldrh	r2, [r7, #16]
 8002b90:	7d7b      	ldrb	r3, [r7, #21]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <lcdPutChar+0x1a8>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	b25a      	sxtb	r2, r3
 8002b9a:	7db9      	ldrb	r1, [r7, #22]
 8002b9c:	7d3b      	ldrb	r3, [r7, #20]
 8002b9e:	f1c3 0308 	rsb	r3, r3, #8
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	b259      	sxtb	r1, r3
 8002ba8:	7af8      	ldrb	r0, [r7, #11]
 8002baa:	7d3b      	ldrb	r3, [r7, #20]
 8002bac:	fa40 f303 	asr.w	r3, r0, r3
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b259      	sxtb	r1, r3
 8002bbe:	8a3a      	ldrh	r2, [r7, #16]
 8002bc0:	7d7b      	ldrb	r3, [r7, #21]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	b2c9      	uxtb	r1, r1
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <lcdPutChar+0x1a8>)
 8002bc8:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002bce:	7d7b      	ldrb	r3, [r7, #21]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	757b      	strb	r3, [r7, #21]
 8002bd4:	7d7a      	ldrb	r2, [r7, #21]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	3307      	adds	r3, #7
 8002bdc:	10db      	asrs	r3, r3, #3
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dbce      	blt.n	8002b80 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002be2:	8a3a      	ldrh	r2, [r7, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	3307      	adds	r3, #7
 8002bea:	10db      	asrs	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <lcdPutChar+0x1a8>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	7db9      	ldrb	r1, [r7, #22]
 8002bf6:	7d3b      	ldrb	r3, [r7, #20]
 8002bf8:	f1c3 0308 	rsb	r3, r3, #8
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	4013      	ands	r3, r2
 8002c08:	b259      	sxtb	r1, r3
 8002c0a:	8a3a      	ldrh	r2, [r7, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3307      	adds	r3, #7
 8002c12:	10db      	asrs	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	b2c9      	uxtb	r1, r1
 8002c18:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <lcdPutChar+0x1a8>)
 8002c1a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	7dfa      	ldrb	r2, [r7, #23]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f4ff af5e 	bcc.w	8002aea <lcdPutChar+0x56>
	}
}
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20002660 	.word	0x20002660

08002c40 <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	603a      	str	r2, [r7, #0]
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3305      	adds	r3, #5
 8002c60:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	08db      	lsrs	r3, r3, #3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	885b      	ldrh	r3, [r3, #2]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	7efb      	ldrb	r3, [r7, #27]
 8002c7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c80:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e094      	b.n	8002db2 <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002c88:	797a      	ldrb	r2, [r7, #5]
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	461a      	mov	r2, r3
 8002c98:	0091      	lsls	r1, r2, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	7cbb      	ldrb	r3, [r7, #18]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	7c7a      	ldrb	r2, [r7, #17]
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	fa42 f303 	asr.w	r3, r2, r3
 8002cc4:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <lcdPutIcon+0x18c>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	b25a      	sxtb	r2, r3
 8002cce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	b2d1      	uxtb	r1, r2
 8002cde:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <lcdPutIcon+0x18c>)
 8002ce0:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	7c7a      	ldrb	r2, [r7, #17]
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b25a      	sxtb	r2, r3
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	f1c3 0308 	rsb	r3, r3, #8
 8002cfa:	21ff      	movs	r1, #255	; 0xff
 8002cfc:	fa41 f303 	asr.w	r3, r1, r3
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002d08:	2301      	movs	r3, #1
 8002d0a:	777b      	strb	r3, [r7, #29]
 8002d0c:	e02d      	b.n	8002d6a <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	7c7a      	ldrb	r2, [r7, #17]
 8002d12:	fb03 f202 	mul.w	r2, r3, r2
 8002d16:	7f7b      	ldrb	r3, [r7, #29]
 8002d18:	4413      	add	r3, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002d24:	89fa      	ldrh	r2, [r7, #14]
 8002d26:	7f7b      	ldrb	r3, [r7, #29]
 8002d28:	4413      	add	r3, r2
 8002d2a:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <lcdPutIcon+0x18c>)
 8002d2c:	5cd3      	ldrb	r3, [r2, r3]
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	7fb9      	ldrb	r1, [r7, #30]
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	f1c3 0308 	rsb	r3, r3, #8
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	b259      	sxtb	r1, r3
 8002d3e:	7b78      	ldrb	r0, [r7, #13]
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	fa40 f303 	asr.w	r3, r0, r3
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	4013      	ands	r3, r2
 8002d52:	b259      	sxtb	r1, r3
 8002d54:	89fa      	ldrh	r2, [r7, #14]
 8002d56:	7f7b      	ldrb	r3, [r7, #29]
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2c9      	uxtb	r1, r1
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <lcdPutIcon+0x18c>)
 8002d5e:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002d60:	7b7b      	ldrb	r3, [r7, #13]
 8002d62:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002d64:	7f7b      	ldrb	r3, [r7, #29]
 8002d66:	3301      	adds	r3, #1
 8002d68:	777b      	strb	r3, [r7, #29]
 8002d6a:	7f3b      	ldrb	r3, [r7, #28]
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	7f7a      	ldrb	r2, [r7, #29]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d9cb      	bls.n	8002d0e <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002d76:	89fa      	ldrh	r2, [r7, #14]
 8002d78:	7f3b      	ldrb	r3, [r7, #28]
 8002d7a:	3307      	adds	r3, #7
 8002d7c:	10db      	asrs	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <lcdPutIcon+0x18c>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	b25a      	sxtb	r2, r3
 8002d86:	7fb9      	ldrb	r1, [r7, #30]
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	f1c3 0308 	rsb	r3, r3, #8
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b259      	sxtb	r1, r3
 8002d9c:	89fa      	ldrh	r2, [r7, #14]
 8002d9e:	7f3b      	ldrb	r3, [r7, #28]
 8002da0:	3307      	adds	r3, #7
 8002da2:	10db      	asrs	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	b2c9      	uxtb	r1, r1
 8002da8:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <lcdPutIcon+0x18c>)
 8002daa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	3301      	adds	r3, #1
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	7ffa      	ldrb	r2, [r7, #31]
 8002db4:	7efb      	ldrb	r3, [r7, #27]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f4ff af66 	bcc.w	8002c88 <lcdPutIcon+0x48>
	}
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20002660 	.word	0x20002660

08002dd0 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60ba      	str	r2, [r7, #8]
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	81fb      	strh	r3, [r7, #14]
 8002dde:	460b      	mov	r3, r1
 8002de0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	e015      	b.n	8002e14 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	fb12 f303 	smulbb	r3, r2, r3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	89fb      	ldrh	r3, [r7, #14]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b298      	uxth	r0, r3
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4413      	add	r3, r2
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	7b79      	ldrb	r1, [r7, #13]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f7ff fe43 	bl	8002a94 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	3301      	adds	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
 8002e14:	7dfc      	ldrb	r4, [r7, #23]
 8002e16:	68b8      	ldr	r0, [r7, #8]
 8002e18:	f7fd f9ea 	bl	80001f0 <strlen>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d3e2      	bcc.n	8002de8 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}

08002e2c <lcdVLine>:
		}

	}
}

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80bb      	strh	r3, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
 8002e46:	4613      	mov	r3, r2
 8002e48:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	08db      	lsrs	r3, r3, #3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	88ba      	ldrh	r2, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d905      	bls.n	8002e72 <lcdVLine+0x46>
		uint8_t temp = y1;
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 8002e72:	88bb      	ldrh	r3, [r7, #4]
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e04e      	b.n	8002f16 <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2232      	movs	r2, #50	; 0x32
 8002e7c:	fb03 f202 	mul.w	r2, r3, r2
 8002e80:	7b7b      	ldrb	r3, [r7, #13]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <lcdVLine+0x100>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002e8a:	78bb      	ldrb	r3, [r7, #2]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d01e      	beq.n	8002ece <lcdVLine+0xa2>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	dc27      	bgt.n	8002ee4 <lcdVLine+0xb8>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <lcdVLine+0x72>
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d00b      	beq.n	8002eb4 <lcdVLine+0x88>
 8002e9c:	e022      	b.n	8002ee4 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	fa42 f303 	asr.w	r3, r2, r3
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	73bb      	strb	r3, [r7, #14]
				break;
 8002eb2:	e024      	b.n	8002efe <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002eb4:	7b3b      	ldrb	r3, [r7, #12]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	fa42 f303 	asr.w	r3, r2, r3
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	b25a      	sxtb	r2, r3
 8002ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	73bb      	strb	r3, [r7, #14]
				break;
 8002ecc:	e017      	b.n	8002efe <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002ece:	7b3b      	ldrb	r3, [r7, #12]
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	fa42 f303 	asr.w	r3, r2, r3
 8002ed6:	b25a      	sxtb	r2, r3
 8002ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002edc:	4053      	eors	r3, r2
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	73bb      	strb	r3, [r7, #14]
				break;
 8002ee2:	e00c      	b.n	8002efe <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8002ee4:	7b3b      	ldrb	r3, [r7, #12]
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	fa42 f303 	asr.w	r3, r2, r3
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	73bb      	strb	r3, [r7, #14]
				break;
 8002efc:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2232      	movs	r2, #50	; 0x32
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	7b7b      	ldrb	r3, [r7, #13]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <lcdVLine+0x100>)
 8002f0c:	7bba      	ldrb	r2, [r7, #14]
 8002f0e:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	3301      	adds	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d9ac      	bls.n	8002e78 <lcdVLine+0x4c>
	}
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc90      	pop	{r4, r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20002660 	.word	0x20002660

08002f30 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 8002f30:	b490      	push	{r4, r7}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	80fb      	strh	r3, [r7, #6]
 8002f42:	4603      	mov	r3, r0
 8002f44:	80bb      	strh	r3, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 8002f4e:	23ff      	movs	r3, #255	; 0xff
 8002f50:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8002f52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f56:	2b14      	cmp	r3, #20
 8002f58:	f200 8208 	bhi.w	800336c <lcdHLine2+0x43c>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <lcdHLine2+0x34>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002fbf 	.word	0x08002fbf
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fcb 	.word	0x08002fcb
 8002f74:	08002fe3 	.word	0x08002fe3
 8002f78:	08002ffb 	.word	0x08002ffb
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	0800305d 	.word	0x0800305d
 8002f84:	080030a1 	.word	0x080030a1
 8002f88:	080030e5 	.word	0x080030e5
 8002f8c:	08003123 	.word	0x08003123
 8002f90:	08003149 	.word	0x08003149
 8002f94:	08003173 	.word	0x08003173
 8002f98:	080031a9 	.word	0x080031a9
 8002f9c:	080031c1 	.word	0x080031c1
 8002fa0:	080031e7 	.word	0x080031e7
 8002fa4:	0800321d 	.word	0x0800321d
 8002fa8:	08003253 	.word	0x08003253
 8002fac:	08003295 	.word	0x08003295
 8002fb0:	080032ef 	.word	0x080032ef
 8002fb4:	0800332b 	.word	0x0800332b
		case 0:	// clear
			pattern = 0x00;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
			break;
 8002fbc:	e1ea      	b.n	8003394 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002fbe:	23ff      	movs	r3, #255	; 0xff
 8002fc0:	75fb      	strb	r3, [r7, #23]
			break;
 8002fc2:	e1e7      	b.n	8003394 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002fc4:	2355      	movs	r3, #85	; 0x55
 8002fc6:	75fb      	strb	r3, [r7, #23]
			break;
 8002fc8:	e1e4      	b.n	8003394 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <lcdHLine2+0xac>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002fda:	e1db      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002fdc:	23ff      	movs	r3, #255	; 0xff
 8002fde:	75fb      	strb	r3, [r7, #23]
			break;
 8002fe0:	e1d8      	b.n	8003394 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <lcdHLine2+0xc4>
 8002fee:	23aa      	movs	r3, #170	; 0xaa
 8002ff0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002ff2:	e1cf      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002ff4:	2355      	movs	r3, #85	; 0x55
 8002ff6:	75fb      	strb	r3, [r7, #23]
			break;
 8002ff8:	e1cc      	b.n	8003394 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <lcdHLine2+0xdc>
 8003006:	2388      	movs	r3, #136	; 0x88
 8003008:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 800300a:	e1c3      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 800300c:	2322      	movs	r3, #34	; 0x22
 800300e:	75fb      	strb	r3, [r7, #23]
			break;
 8003010:	e1c0      	b.n	8003394 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <lcdHLine2+0xf4>
 800301e:	2388      	movs	r3, #136	; 0x88
 8003020:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8003022:	e1a6      	b.n	8003372 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d102      	bne.n	8003036 <lcdHLine2+0x106>
 8003030:	2344      	movs	r3, #68	; 0x44
 8003032:	75fb      	strb	r3, [r7, #23]
			break;
 8003034:	e19d      	b.n	8003372 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d102      	bne.n	8003048 <lcdHLine2+0x118>
 8003042:	2322      	movs	r3, #34	; 0x22
 8003044:	75fb      	strb	r3, [r7, #23]
			break;
 8003046:	e194      	b.n	8003372 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b03      	cmp	r3, #3
 8003052:	f040 818e 	bne.w	8003372 <lcdHLine2+0x442>
 8003056:	2311      	movs	r3, #17
 8003058:	75fb      	strb	r3, [r7, #23]
			break;
 800305a:	e18a      	b.n	8003372 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <lcdHLine2+0x144>
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d102      	bne.n	800307a <lcdHLine2+0x14a>
 8003074:	23aa      	movs	r3, #170	; 0xaa
 8003076:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003078:	e17d      	b.n	8003376 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <lcdHLine2+0x15c>
 8003086:	2322      	movs	r3, #34	; 0x22
 8003088:	75fb      	strb	r3, [r7, #23]
			break;
 800308a:	e174      	b.n	8003376 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b03      	cmp	r3, #3
 8003096:	f040 816e 	bne.w	8003376 <lcdHLine2+0x446>
 800309a:	2388      	movs	r3, #136	; 0x88
 800309c:	75fb      	strb	r3, [r7, #23]
			break;
 800309e:	e16a      	b.n	8003376 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d005      	beq.n	80030b8 <lcdHLine2+0x188>
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d102      	bne.n	80030be <lcdHLine2+0x18e>
 80030b8:	2355      	movs	r3, #85	; 0x55
 80030ba:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 80030bc:	e15d      	b.n	800337a <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <lcdHLine2+0x1a0>
 80030ca:	2388      	movs	r3, #136	; 0x88
 80030cc:	75fb      	strb	r3, [r7, #23]
			break;
 80030ce:	e154      	b.n	800337a <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 814e 	bne.w	800337a <lcdHLine2+0x44a>
 80030de:	2322      	movs	r3, #34	; 0x22
 80030e0:	75fb      	strb	r3, [r7, #23]
			break;
 80030e2:	e14a      	b.n	800337a <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <lcdHLine2+0x1cc>
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <lcdHLine2+0x1d2>
 80030fc:	23cc      	movs	r3, #204	; 0xcc
 80030fe:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8003100:	e13d      	b.n	800337e <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d006      	beq.n	800311c <lcdHLine2+0x1ec>
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b03      	cmp	r3, #3
 8003118:	f040 8131 	bne.w	800337e <lcdHLine2+0x44e>
 800311c:	2333      	movs	r3, #51	; 0x33
 800311e:	75fb      	strb	r3, [r7, #23]
			break;
 8003120:	e12d      	b.n	800337e <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <lcdHLine2+0x204>
 800312e:	2355      	movs	r3, #85	; 0x55
 8003130:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8003132:	e126      	b.n	8003382 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8120 	beq.w	8003382 <lcdHLine2+0x452>
 8003142:	23ff      	movs	r3, #255	; 0xff
 8003144:	75fb      	strb	r3, [r7, #23]
			break;
 8003146:	e11c      	b.n	8003382 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <lcdHLine2+0x22a>
 8003154:	23cc      	movs	r3, #204	; 0xcc
 8003156:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003158:	e11c      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d102      	bne.n	800316c <lcdHLine2+0x23c>
 8003166:	2344      	movs	r3, #68	; 0x44
 8003168:	75fb      	strb	r3, [r7, #23]
			break;
 800316a:	e113      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x00;
 800316c:	2300      	movs	r3, #0
 800316e:	75fb      	strb	r3, [r7, #23]
			break;
 8003170:	e110      	b.n	8003394 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <lcdHLine2+0x254>
 800317e:	23ee      	movs	r3, #238	; 0xee
 8003180:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8003182:	e107      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d005      	beq.n	800319c <lcdHLine2+0x26c>
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d102      	bne.n	80031a2 <lcdHLine2+0x272>
 800319c:	2322      	movs	r3, #34	; 0x22
 800319e:	75fb      	strb	r3, [r7, #23]
			break;
 80031a0:	e0f8      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
			break;
 80031a6:	e0f5      	b.n	8003394 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <lcdHLine2+0x28a>
 80031b4:	23ff      	movs	r3, #255	; 0xff
 80031b6:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 80031b8:	e0ec      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 80031ba:	2388      	movs	r3, #136	; 0x88
 80031bc:	75fb      	strb	r3, [r7, #23]
			break;
 80031be:	e0e9      	b.n	8003394 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <lcdHLine2+0x2a2>
 80031cc:	23aa      	movs	r3, #170	; 0xaa
 80031ce:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 80031d0:	e0d9      	b.n	8003386 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80d3 	beq.w	8003386 <lcdHLine2+0x456>
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
			break;
 80031e4:	e0cf      	b.n	8003386 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <lcdHLine2+0x2ce>
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d102      	bne.n	8003204 <lcdHLine2+0x2d4>
 80031fe:	23aa      	movs	r3, #170	; 0xaa
 8003200:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003202:	e0c7      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d102      	bne.n	8003216 <lcdHLine2+0x2e6>
 8003210:	2344      	movs	r3, #68	; 0x44
 8003212:	75fb      	strb	r3, [r7, #23]
			break;
 8003214:	e0be      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
			break;
 800321a:	e0bb      	b.n	8003394 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <lcdHLine2+0x304>
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <lcdHLine2+0x30a>
 8003234:	23ee      	movs	r3, #238	; 0xee
 8003236:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8003238:	e0ac      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <lcdHLine2+0x31c>
 8003246:	23aa      	movs	r3, #170	; 0xaa
 8003248:	75fb      	strb	r3, [r7, #23]
			break;
 800324a:	e0a3      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x00;
 800324c:	2300      	movs	r3, #0
 800324e:	75fb      	strb	r3, [r7, #23]
			break;
 8003250:	e0a0      	b.n	8003394 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <lcdHLine2+0x33a>
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d102      	bne.n	8003270 <lcdHLine2+0x340>
 800326a:	2344      	movs	r3, #68	; 0x44
 800326c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800326e:	e08c      	b.n	800338a <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <lcdHLine2+0x352>
 800327c:	23aa      	movs	r3, #170	; 0xaa
 800327e:	75fb      	strb	r3, [r7, #23]
			break;
 8003280:	e083      	b.n	800338a <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b03      	cmp	r3, #3
 800328c:	d17d      	bne.n	800338a <lcdHLine2+0x45a>
 800328e:	2311      	movs	r3, #17
 8003290:	75fb      	strb	r3, [r7, #23]
			break;
 8003292:	e07a      	b.n	800338a <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4baf      	ldr	r3, [pc, #700]	; (8003554 <lcdHLine2+0x624>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	0859      	lsrs	r1, r3, #1
 800329e:	460b      	mov	r3, r1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	440b      	add	r3, r1
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <lcdHLine2+0x382>
 80032ac:	2355      	movs	r3, #85	; 0x55
 80032ae:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 80032b0:	e06d      	b.n	800338e <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	4ba7      	ldr	r3, [pc, #668]	; (8003554 <lcdHLine2+0x624>)
 80032b6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ba:	0859      	lsrs	r1, r3, #1
 80032bc:	460b      	mov	r3, r1
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	440b      	add	r3, r1
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <lcdHLine2+0x3a0>
 80032ca:	23aa      	movs	r3, #170	; 0xaa
 80032cc:	75fb      	strb	r3, [r7, #23]
			break;
 80032ce:	e05e      	b.n	800338e <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4ba0      	ldr	r3, [pc, #640]	; (8003554 <lcdHLine2+0x624>)
 80032d4:	fba3 1302 	umull	r1, r3, r3, r2
 80032d8:	0859      	lsrs	r1, r3, #1
 80032da:	460b      	mov	r3, r1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	440b      	add	r3, r1
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d152      	bne.n	800338e <lcdHLine2+0x45e>
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
			break;
 80032ec:	e04f      	b.n	800338e <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <lcdHLine2+0x3d0>
 80032fa:	2322      	movs	r3, #34	; 0x22
 80032fc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80032fe:	e049      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <lcdHLine2+0x3e2>
 800330c:	2355      	movs	r3, #85	; 0x55
 800330e:	75fb      	strb	r3, [r7, #23]
			break;
 8003310:	e040      	b.n	8003394 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d102      	bne.n	8003324 <lcdHLine2+0x3f4>
 800331e:	2388      	movs	r3, #136	; 0x88
 8003320:	75fb      	strb	r3, [r7, #23]
			break;
 8003322:	e037      	b.n	8003394 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
			break;
 8003328:	e034      	b.n	8003394 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d005      	beq.n	8003342 <lcdHLine2+0x412>
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d102      	bne.n	8003348 <lcdHLine2+0x418>
 8003342:	2388      	movs	r3, #136	; 0x88
 8003344:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003346:	e024      	b.n	8003392 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <lcdHLine2+0x42a>
 8003354:	2377      	movs	r3, #119	; 0x77
 8003356:	75fb      	strb	r3, [r7, #23]
			break;
 8003358:	e01b      	b.n	8003392 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d115      	bne.n	8003392 <lcdHLine2+0x462>
 8003366:	23aa      	movs	r3, #170	; 0xaa
 8003368:	75fb      	strb	r3, [r7, #23]
			break;
 800336a:	e012      	b.n	8003392 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
			break;
 8003370:	e010      	b.n	8003394 <lcdHLine2+0x464>
			break;
 8003372:	bf00      	nop
 8003374:	e00e      	b.n	8003394 <lcdHLine2+0x464>
			break;
 8003376:	bf00      	nop
 8003378:	e00c      	b.n	8003394 <lcdHLine2+0x464>
			break;
 800337a:	bf00      	nop
 800337c:	e00a      	b.n	8003394 <lcdHLine2+0x464>
			break;
 800337e:	bf00      	nop
 8003380:	e008      	b.n	8003394 <lcdHLine2+0x464>
			break;
 8003382:	bf00      	nop
 8003384:	e006      	b.n	8003394 <lcdHLine2+0x464>
			break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <lcdHLine2+0x464>
			break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <lcdHLine2+0x464>
			break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <lcdHLine2+0x464>
			break;
 8003392:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	b29b      	uxth	r3, r3
 800339a:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 80033a6:	88bb      	ldrh	r3, [r7, #4]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 80033ae:	88bb      	ldrh	r3, [r7, #4]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	2232      	movs	r2, #50	; 0x32
 80033bc:	fb03 f202 	mul.w	r2, r3, r2
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a64      	ldr	r2, [pc, #400]	; (8003558 <lcdHLine2+0x628>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	2232      	movs	r2, #50	; 0x32
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	7b7b      	ldrb	r3, [r7, #13]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a60      	ldr	r2, [pc, #384]	; (8003558 <lcdHLine2+0x628>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
 80033da:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 80033dc:	23ff      	movs	r3, #255	; 0xff
 80033de:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	f1c3 0208 	rsb	r2, r3, #8
 80033e6:	88b9      	ldrh	r1, [r7, #4]
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	1acb      	subs	r3, r1, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dd11      	ble.n	8003416 <lcdHLine2+0x4e6>
 80033f2:	88ba      	ldrh	r2, [r7, #4]
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	fa42 f303 	asr.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	fa42 f303 	asr.w	r3, r2, r3
 8003408:	b25a      	sxtb	r2, r3
 800340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340e:	4013      	ands	r3, r2
 8003410:	b25b      	sxtb	r3, r3
 8003412:	753b      	strb	r3, [r7, #20]
 8003414:	e001      	b.n	800341a <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	753b      	strb	r3, [r7, #20]
		switch(mode){
 800341a:	78bb      	ldrb	r3, [r7, #2]
 800341c:	2b03      	cmp	r3, #3
 800341e:	f200 8130 	bhi.w	8003682 <lcdHLine2+0x752>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <lcdHLine2+0x4f8>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003439 	.word	0x08003439
 800342c:	080034bd 	.word	0x080034bd
 8003430:	0800355d 	.word	0x0800355d
 8003434:	080035e1 	.word	0x080035e1
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	22ff      	movs	r2, #255	; 0xff
 800343c:	fa42 f303 	asr.w	r3, r2, r3
 8003440:	b25a      	sxtb	r2, r3
 8003442:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003446:	4013      	ands	r3, r2
 8003448:	b25a      	sxtb	r2, r3
 800344a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800344e:	4313      	orrs	r3, r2
 8003450:	b25b      	sxtb	r3, r3
 8003452:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003454:	7b3b      	ldrb	r3, [r7, #12]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	22ff      	movs	r2, #255	; 0xff
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	b25a      	sxtb	r2, r3
 8003462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003466:	4013      	ands	r3, r2
 8003468:	b25a      	sxtb	r2, r3
 800346a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800346e:	4313      	orrs	r3, r2
 8003470:	b25b      	sxtb	r3, r3
 8003472:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003474:	2301      	movs	r3, #1
 8003476:	74fb      	strb	r3, [r7, #19]
 8003478:	e019      	b.n	80034ae <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	2232      	movs	r2, #50	; 0x32
 800347e:	fb03 f202 	mul.w	r2, r3, r2
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	441a      	add	r2, r3
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	4413      	add	r3, r2
 800348a:	4a33      	ldr	r2, [pc, #204]	; (8003558 <lcdHLine2+0x628>)
 800348c:	5cd1      	ldrb	r1, [r2, r3]
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	2232      	movs	r2, #50	; 0x32
 8003492:	fb03 f202 	mul.w	r2, r3, r2
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	441a      	add	r2, r3
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	4413      	add	r3, r2
 800349e:	7dfa      	ldrb	r2, [r7, #23]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	b2d1      	uxtb	r1, r2
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <lcdHLine2+0x628>)
 80034a6:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	3301      	adds	r3, #1
 80034ac:	74fb      	strb	r3, [r7, #19]
 80034ae:	7cfa      	ldrb	r2, [r7, #19]
 80034b0:	7b79      	ldrb	r1, [r7, #13]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	1acb      	subs	r3, r1, r3
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbdf      	blt.n	800347a <lcdHLine2+0x54a>
			}
			break;
 80034ba:	e0e2      	b.n	8003682 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	fa42 f303 	asr.w	r3, r2, r3
 80034c4:	b25a      	sxtb	r2, r3
 80034c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	b25a      	sxtb	r2, r3
 80034d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 80034dc:	7b3b      	ldrb	r3, [r7, #12]
 80034de:	f1c3 0307 	rsb	r3, r3, #7
 80034e2:	22ff      	movs	r2, #255	; 0xff
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	b25a      	sxtb	r2, r3
 80034ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003500:	2301      	movs	r3, #1
 8003502:	74bb      	strb	r3, [r7, #18]
 8003504:	e01e      	b.n	8003544 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	441a      	add	r2, r3
 8003512:	7cbb      	ldrb	r3, [r7, #18]
 8003514:	4413      	add	r3, r2
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <lcdHLine2+0x628>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	b25a      	sxtb	r2, r3
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003520:	43db      	mvns	r3, r3
 8003522:	b25b      	sxtb	r3, r3
 8003524:	4013      	ands	r3, r2
 8003526:	b259      	sxtb	r1, r3
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	2232      	movs	r2, #50	; 0x32
 800352c:	fb03 f202 	mul.w	r2, r3, r2
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	441a      	add	r2, r3
 8003534:	7cbb      	ldrb	r3, [r7, #18]
 8003536:	4413      	add	r3, r2
 8003538:	b2c9      	uxtb	r1, r1
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <lcdHLine2+0x628>)
 800353c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800353e:	7cbb      	ldrb	r3, [r7, #18]
 8003540:	3301      	adds	r3, #1
 8003542:	74bb      	strb	r3, [r7, #18]
 8003544:	7cba      	ldrb	r2, [r7, #18]
 8003546:	7b79      	ldrb	r1, [r7, #13]
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	429a      	cmp	r2, r3
 800354e:	dbda      	blt.n	8003506 <lcdHLine2+0x5d6>
			}
			break;
 8003550:	e097      	b.n	8003682 <lcdHLine2+0x752>
 8003552:	bf00      	nop
 8003554:	aaaaaaab 	.word	0xaaaaaaab
 8003558:	20002660 	.word	0x20002660
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 800355c:	7bbb      	ldrb	r3, [r7, #14]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	fa42 f303 	asr.w	r3, r2, r3
 8003564:	b25a      	sxtb	r2, r3
 8003566:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800356a:	4013      	ands	r3, r2
 800356c:	b25a      	sxtb	r2, r3
 800356e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003572:	4053      	eors	r3, r2
 8003574:	b25b      	sxtb	r3, r3
 8003576:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003578:	7b3b      	ldrb	r3, [r7, #12]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	b25a      	sxtb	r2, r3
 8003586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800358a:	4013      	ands	r3, r2
 800358c:	b25a      	sxtb	r2, r3
 800358e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003592:	4053      	eors	r3, r2
 8003594:	b25b      	sxtb	r3, r3
 8003596:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003598:	2301      	movs	r3, #1
 800359a:	747b      	strb	r3, [r7, #17]
 800359c:	e019      	b.n	80035d2 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	2232      	movs	r2, #50	; 0x32
 80035a2:	fb03 f202 	mul.w	r2, r3, r2
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	441a      	add	r2, r3
 80035aa:	7c7b      	ldrb	r3, [r7, #17]
 80035ac:	4413      	add	r3, r2
 80035ae:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <lcdHLine2+0x788>)
 80035b0:	5cd1      	ldrb	r1, [r2, r3]
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2232      	movs	r2, #50	; 0x32
 80035b6:	fb03 f202 	mul.w	r2, r3, r2
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	441a      	add	r2, r3
 80035be:	7c7b      	ldrb	r3, [r7, #17]
 80035c0:	4413      	add	r3, r2
 80035c2:	7dfa      	ldrb	r2, [r7, #23]
 80035c4:	404a      	eors	r2, r1
 80035c6:	b2d1      	uxtb	r1, r2
 80035c8:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <lcdHLine2+0x788>)
 80035ca:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80035cc:	7c7b      	ldrb	r3, [r7, #17]
 80035ce:	3301      	adds	r3, #1
 80035d0:	747b      	strb	r3, [r7, #17]
 80035d2:	7c7a      	ldrb	r2, [r7, #17]
 80035d4:	7b79      	ldrb	r1, [r7, #13]
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	1acb      	subs	r3, r1, r3
 80035da:	429a      	cmp	r2, r3
 80035dc:	dbdf      	blt.n	800359e <lcdHLine2+0x66e>
			}
			break;
 80035de:	e050      	b.n	8003682 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	fa42 f303 	asr.w	r3, r2, r3
 80035e8:	b25a      	sxtb	r2, r3
 80035ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b25a      	sxtb	r2, r3
 80035f2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	b259      	sxtb	r1, r3
 80035fa:	7bbb      	ldrb	r3, [r7, #14]
 80035fc:	f1c3 0308 	rsb	r3, r3, #8
 8003600:	20ff      	movs	r0, #255	; 0xff
 8003602:	fa00 f303 	lsl.w	r3, r0, r3
 8003606:	b25b      	sxtb	r3, r3
 8003608:	400b      	ands	r3, r1
 800360a:	b25b      	sxtb	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b25b      	sxtb	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8003616:	7b3b      	ldrb	r3, [r7, #12]
 8003618:	f1c3 0307 	rsb	r3, r3, #7
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	b25a      	sxtb	r2, r3
 8003624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003628:	4013      	ands	r3, r2
 800362a:	b25a      	sxtb	r2, r3
 800362c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003630:	43db      	mvns	r3, r3
 8003632:	b259      	sxtb	r1, r3
 8003634:	7b3b      	ldrb	r3, [r7, #12]
 8003636:	3301      	adds	r3, #1
 8003638:	20ff      	movs	r0, #255	; 0xff
 800363a:	fa40 f303 	asr.w	r3, r0, r3
 800363e:	b25b      	sxtb	r3, r3
 8003640:	400b      	ands	r3, r1
 8003642:	b25b      	sxtb	r3, r3
 8003644:	4313      	orrs	r3, r2
 8003646:	b25b      	sxtb	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800364e:	2301      	movs	r3, #1
 8003650:	743b      	strb	r3, [r7, #16]
 8003652:	e00f      	b.n	8003674 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2232      	movs	r2, #50	; 0x32
 8003658:	fb03 f202 	mul.w	r2, r3, r2
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	441a      	add	r2, r3
 8003660:	7c3b      	ldrb	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	7dfa      	ldrb	r2, [r7, #23]
 8003666:	43d2      	mvns	r2, r2
 8003668:	b2d1      	uxtb	r1, r2
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <lcdHLine2+0x788>)
 800366c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800366e:	7c3b      	ldrb	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	743b      	strb	r3, [r7, #16]
 8003674:	7c3a      	ldrb	r2, [r7, #16]
 8003676:	7b79      	ldrb	r1, [r7, #13]
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	429a      	cmp	r2, r3
 800367e:	dbe9      	blt.n	8003654 <lcdHLine2+0x724>
			}
			break;
 8003680:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	2232      	movs	r2, #50	; 0x32
 8003686:	fb03 f202 	mul.w	r2, r3, r2
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	4413      	add	r3, r2
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <lcdHLine2+0x788>)
 8003690:	7dba      	ldrb	r2, [r7, #22]
 8003692:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003694:	7b7a      	ldrb	r2, [r7, #13]
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	429a      	cmp	r2, r3
 800369a:	d908      	bls.n	80036ae <lcdHLine2+0x77e>
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2232      	movs	r2, #50	; 0x32
 80036a0:	fb03 f202 	mul.w	r2, r3, r2
 80036a4:	7b7b      	ldrb	r3, [r7, #13]
 80036a6:	4413      	add	r3, r2
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <lcdHLine2+0x788>)
 80036aa:	7d7a      	ldrb	r2, [r7, #21]
 80036ac:	54ca      	strb	r2, [r1, r3]
}
 80036ae:	bf00      	nop
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc90      	pop	{r4, r7}
 80036b6:	4770      	bx	lr
 80036b8:	20002660 	.word	0x20002660

080036bc <lcdHLine>:

// Draw horizontal line
// Should not be used, causes problems for lines shorter than 8px
// use lcdHLine2 instead
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 80036bc:	b490      	push	{r4, r7}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	80fb      	strh	r3, [r7, #6]
 80036ce:	4603      	mov	r3, r0
 80036d0:	80bb      	strh	r3, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	70fb      	strb	r3, [r7, #3]
 80036d6:	4613      	mov	r3, r2
 80036d8:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80036ec:	88bb      	ldrh	r3, [r7, #4]
 80036ee:	08db      	lsrs	r3, r3, #3
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80036f4:	88bb      	ldrh	r3, [r7, #4]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	2232      	movs	r2, #50	; 0x32
 8003702:	fb03 f202 	mul.w	r2, r3, r2
 8003706:	7c7b      	ldrb	r3, [r7, #17]
 8003708:	4413      	add	r3, r2
 800370a:	4a71      	ldr	r2, [pc, #452]	; (80038d0 <lcdHLine+0x214>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
 800370e:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2232      	movs	r2, #50	; 0x32
 8003714:	fb03 f202 	mul.w	r2, r3, r2
 8003718:	7c7b      	ldrb	r3, [r7, #17]
 800371a:	441a      	add	r2, r3
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	4413      	add	r3, r2
 8003720:	4a6b      	ldr	r2, [pc, #428]	; (80038d0 <lcdHLine+0x214>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8003726:	23ff      	movs	r3, #255	; 0xff
 8003728:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 800372a:	7c3b      	ldrb	r3, [r7, #16]
 800372c:	f1c3 0208 	rsb	r2, r3, #8
 8003730:	88b9      	ldrh	r1, [r7, #4]
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	1acb      	subs	r3, r1, r3
 8003736:	3301      	adds	r3, #1
 8003738:	429a      	cmp	r2, r3
 800373a:	dd09      	ble.n	8003750 <lcdHLine+0x94>
 800373c:	88ba      	ldrh	r2, [r7, #4]
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	3301      	adds	r3, #1
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	fa42 f303 	asr.w	r3, r2, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8003750:	78bb      	ldrb	r3, [r7, #2]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d067      	beq.n	8003826 <lcdHLine+0x16a>
 8003756:	2b02      	cmp	r3, #2
 8003758:	f300 809e 	bgt.w	8003898 <lcdHLine+0x1dc>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <lcdHLine+0xaa>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d02e      	beq.n	80037c2 <lcdHLine+0x106>
 8003764:	e098      	b.n	8003898 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003766:	7d7a      	ldrb	r2, [r7, #21]
 8003768:	7c3b      	ldrb	r3, [r7, #16]
 800376a:	fa42 f303 	asr.w	r3, r2, r3
 800376e:	b25a      	sxtb	r2, r3
 8003770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003774:	4313      	orrs	r3, r2
 8003776:	b25b      	sxtb	r3, r3
 8003778:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 800377a:	7bbb      	ldrb	r3, [r7, #14]
 800377c:	f1c3 0307 	rsb	r3, r3, #7
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	b25a      	sxtb	r2, r3
 8003788:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800378c:	4313      	orrs	r3, r2
 800378e:	b25b      	sxtb	r3, r3
 8003790:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003792:	2301      	movs	r3, #1
 8003794:	753b      	strb	r3, [r7, #20]
 8003796:	e00d      	b.n	80037b4 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2232      	movs	r2, #50	; 0x32
 800379c:	fb03 f202 	mul.w	r2, r3, r2
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	441a      	add	r2, r3
 80037a4:	7d3b      	ldrb	r3, [r7, #20]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a49      	ldr	r2, [pc, #292]	; (80038d0 <lcdHLine+0x214>)
 80037aa:	21ff      	movs	r1, #255	; 0xff
 80037ac:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80037ae:	7d3b      	ldrb	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	753b      	strb	r3, [r7, #20]
 80037b4:	7d3a      	ldrb	r2, [r7, #20]
 80037b6:	7bf9      	ldrb	r1, [r7, #15]
 80037b8:	7c7b      	ldrb	r3, [r7, #17]
 80037ba:	1acb      	subs	r3, r1, r3
 80037bc:	429a      	cmp	r2, r3
 80037be:	dbeb      	blt.n	8003798 <lcdHLine+0xdc>
		}
		break;
 80037c0:	e06a      	b.n	8003898 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 80037c2:	7d7a      	ldrb	r2, [r7, #21]
 80037c4:	7c3b      	ldrb	r3, [r7, #16]
 80037c6:	fa42 f303 	asr.w	r3, r2, r3
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	b25a      	sxtb	r2, r3
 80037d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037d4:	4013      	ands	r3, r2
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 80037da:	7bbb      	ldrb	r3, [r7, #14]
 80037dc:	f1c3 0307 	rsb	r3, r3, #7
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80037f6:	2301      	movs	r3, #1
 80037f8:	74fb      	strb	r3, [r7, #19]
 80037fa:	e00d      	b.n	8003818 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	2232      	movs	r2, #50	; 0x32
 8003800:	fb03 f202 	mul.w	r2, r3, r2
 8003804:	7c7b      	ldrb	r3, [r7, #17]
 8003806:	441a      	add	r2, r3
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	4413      	add	r3, r2
 800380c:	4a30      	ldr	r2, [pc, #192]	; (80038d0 <lcdHLine+0x214>)
 800380e:	2100      	movs	r1, #0
 8003810:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	3301      	adds	r3, #1
 8003816:	74fb      	strb	r3, [r7, #19]
 8003818:	7cfa      	ldrb	r2, [r7, #19]
 800381a:	7bf9      	ldrb	r1, [r7, #15]
 800381c:	7c7b      	ldrb	r3, [r7, #17]
 800381e:	1acb      	subs	r3, r1, r3
 8003820:	429a      	cmp	r2, r3
 8003822:	dbeb      	blt.n	80037fc <lcdHLine+0x140>
		}
		break;
 8003824:	e038      	b.n	8003898 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003826:	7d7a      	ldrb	r2, [r7, #21]
 8003828:	7c3b      	ldrb	r3, [r7, #16]
 800382a:	fa42 f303 	asr.w	r3, r2, r3
 800382e:	b25a      	sxtb	r2, r3
 8003830:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003834:	4053      	eors	r3, r2
 8003836:	b25b      	sxtb	r3, r3
 8003838:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	f1c3 0307 	rsb	r3, r3, #7
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	b25a      	sxtb	r2, r3
 8003848:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800384c:	4053      	eors	r3, r2
 800384e:	b25b      	sxtb	r3, r3
 8003850:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003852:	2301      	movs	r3, #1
 8003854:	74bb      	strb	r3, [r7, #18]
 8003856:	e018      	b.n	800388a <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	2232      	movs	r2, #50	; 0x32
 800385c:	fb03 f202 	mul.w	r2, r3, r2
 8003860:	7c7b      	ldrb	r3, [r7, #17]
 8003862:	441a      	add	r2, r3
 8003864:	7cbb      	ldrb	r3, [r7, #18]
 8003866:	4413      	add	r3, r2
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <lcdHLine+0x214>)
 800386a:	5cd2      	ldrb	r2, [r2, r3]
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	2132      	movs	r1, #50	; 0x32
 8003870:	fb03 f101 	mul.w	r1, r3, r1
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	4419      	add	r1, r3
 8003878:	7cbb      	ldrb	r3, [r7, #18]
 800387a:	440b      	add	r3, r1
 800387c:	43d2      	mvns	r2, r2
 800387e:	b2d1      	uxtb	r1, r2
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <lcdHLine+0x214>)
 8003882:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003884:	7cbb      	ldrb	r3, [r7, #18]
 8003886:	3301      	adds	r3, #1
 8003888:	74bb      	strb	r3, [r7, #18]
 800388a:	7cba      	ldrb	r2, [r7, #18]
 800388c:	7bf9      	ldrb	r1, [r7, #15]
 800388e:	7c7b      	ldrb	r3, [r7, #17]
 8003890:	1acb      	subs	r3, r1, r3
 8003892:	429a      	cmp	r2, r3
 8003894:	dbe0      	blt.n	8003858 <lcdHLine+0x19c>
		}
		break;
 8003896:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	2232      	movs	r2, #50	; 0x32
 800389c:	fb03 f202 	mul.w	r2, r3, r2
 80038a0:	7c7b      	ldrb	r3, [r7, #17]
 80038a2:	4413      	add	r3, r2
 80038a4:	490a      	ldr	r1, [pc, #40]	; (80038d0 <lcdHLine+0x214>)
 80038a6:	7dfa      	ldrb	r2, [r7, #23]
 80038a8:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	7c7b      	ldrb	r3, [r7, #17]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d908      	bls.n	80038c4 <lcdHLine+0x208>
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2232      	movs	r2, #50	; 0x32
 80038b6:	fb03 f202 	mul.w	r2, r3, r2
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	4413      	add	r3, r2
 80038be:	4904      	ldr	r1, [pc, #16]	; (80038d0 <lcdHLine+0x214>)
 80038c0:	7dba      	ldrb	r2, [r7, #22]
 80038c2:	54ca      	strb	r2, [r1, r3]
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc90      	pop	{r4, r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20002660 	.word	0x20002660

080038d4 <lcdRefresh>:

void lcdRefresh(void){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <lcdRefresh+0x7c>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d032      	beq.n	8003948 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80038e2:	2201      	movs	r2, #1
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	481b      	ldr	r0, [pc, #108]	; (8003954 <lcdRefresh+0x80>)
 80038e8:	f003 fad8 	bl	8006e9c <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80038ec:	2301      	movs	r3, #1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	e01c      	b.n	800392c <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f869 	bl	80029cc <reverse_uint8>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <lcdRefresh+0x84>)
 8003900:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003902:	2396      	movs	r3, #150	; 0x96
 8003904:	2202      	movs	r2, #2
 8003906:	4914      	ldr	r1, [pc, #80]	; (8003958 <lcdRefresh+0x84>)
 8003908:	4814      	ldr	r0, [pc, #80]	; (800395c <lcdRefresh+0x88>)
 800390a:	f006 fb86 	bl	800a01a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	3b01      	subs	r3, #1
 8003912:	2232      	movs	r2, #50	; 0x32
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <lcdRefresh+0x8c>)
 800391a:	1899      	adds	r1, r3, r2
 800391c:	2396      	movs	r3, #150	; 0x96
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	480e      	ldr	r0, [pc, #56]	; (800395c <lcdRefresh+0x88>)
 8003922:	f006 fb7a 	bl	800a01a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	3301      	adds	r3, #1
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2bf1      	cmp	r3, #241	; 0xf1
 8003930:	d9df      	bls.n	80038f2 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003932:	2396      	movs	r3, #150	; 0x96
 8003934:	2202      	movs	r2, #2
 8003936:	490b      	ldr	r1, [pc, #44]	; (8003964 <lcdRefresh+0x90>)
 8003938:	4808      	ldr	r0, [pc, #32]	; (800395c <lcdRefresh+0x88>)
 800393a:	f006 fb6e 	bl	800a01a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 800393e:	2200      	movs	r2, #0
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <lcdRefresh+0x80>)
 8003944:	f003 faaa 	bl	8006e9c <HAL_GPIO_WritePin>
	}
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000078 	.word	0x20000078
 8003954:	40020000 	.word	0x40020000
 8003958:	2000007c 	.word	0x2000007c
 800395c:	20005894 	.word	0x20005894
 8003960:	20002660 	.word	0x20002660
 8003964:	2000265c 	.word	0x2000265c

08003968 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4623      	mov	r3, r4
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	4603      	mov	r3, r0
 800397c:	80bb      	strh	r3, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
 8003982:	4613      	mov	r3, r2
 8003984:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e009      	b.n	80039a0 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 800398c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	88b9      	ldrh	r1, [r7, #4]
 8003994:	88f8      	ldrh	r0, [r7, #6]
 8003996:	f7ff fe91 	bl	80036bc <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	3301      	adds	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	78bb      	ldrb	r3, [r7, #2]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d9f1      	bls.n	800398c <lcdRect+0x24>
	}
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}

080039b2 <lcdRoundedRect2>:
		} else {
			lcdHLine(x1, x2, i, mode);
		}
	}
}
void lcdRoundedRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline, uint8_t r){
 80039b2:	b590      	push	{r4, r7, lr}
 80039b4:	b089      	sub	sp, #36	; 0x24
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	4604      	mov	r4, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	80fb      	strh	r3, [r7, #6]
 80039c4:	4603      	mov	r3, r0
 80039c6:	80bb      	strh	r3, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	70bb      	strb	r3, [r7, #2]
	// check if radius not exceded
	if((2*r>(x2-x1))||(2*r>(y2-y1))) r = 0;
 80039d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039d4:	005a      	lsls	r2, r3, #1
 80039d6:	88b9      	ldrh	r1, [r7, #4]
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	1acb      	subs	r3, r1, r3
 80039dc:	429a      	cmp	r2, r3
 80039de:	dc07      	bgt.n	80039f0 <lcdRoundedRect2+0x3e>
 80039e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039e4:	005a      	lsls	r2, r3, #1
 80039e6:	78b9      	ldrb	r1, [r7, #2]
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	1acb      	subs	r3, r1, r3
 80039ec:	429a      	cmp	r2, r3
 80039ee:	dd02      	ble.n	80039f6 <lcdRoundedRect2+0x44>
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	if(x1!=x2 && y1!=y2){
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	88bb      	ldrh	r3, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f000 81d5 	beq.w	8003daa <lcdRoundedRect2+0x3f8>
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	78bb      	ldrb	r3, [r7, #2]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f000 81d0 	beq.w	8003daa <lcdRoundedRect2+0x3f8>
		for(uint8_t y = y1; y <= y2; y++){
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	75fb      	strb	r3, [r7, #23]
 8003a0e:	e0a3      	b.n	8003b58 <lcdRoundedRect2+0x1a6>
			if((y-y1)<r){
 8003a10:	7dfa      	ldrb	r2, [r7, #23]
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	da43      	bge.n	8003aa6 <lcdRoundedRect2+0xf4>
				uint8_t off = (int)(sqrt(r*r-(r-y+y1)*(r-y+y1)));
 8003a1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a22:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003a26:	fb03 f202 	mul.w	r2, r3, r2
 8003a2a:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	1ac9      	subs	r1, r1, r3
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	440b      	add	r3, r1
 8003a36:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003a3a:	7df9      	ldrb	r1, [r7, #23]
 8003a3c:	1a40      	subs	r0, r0, r1
 8003a3e:	78f9      	ldrb	r1, [r7, #3]
 8003a40:	4401      	add	r1, r0
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd7b 	bl	8000544 <__aeabi_i2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	ec43 2b10 	vmov	d0, r2, r3
 8003a56:	f00e fecf 	bl	80127f8 <sqrt>
 8003a5a:	ec53 2b10 	vmov	r2, r3, d0
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7fd f889 	bl	8000b78 <__aeabi_d2iz>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73bb      	strb	r3, [r7, #14]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003a6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4413      	add	r3, r2
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	b298      	uxth	r0, r3
 8003a7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	88ba      	ldrh	r2, [r7, #4]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	b299      	uxth	r1, r3
 8003a92:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003a96:	7dfa      	ldrb	r2, [r7, #23]
 8003a98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f7ff fa46 	bl	8002f30 <lcdHLine2>
 8003aa4:	e055      	b.n	8003b52 <lcdRoundedRect2+0x1a0>
			} else if((y2-y)<r){
 8003aa6:	78ba      	ldrb	r2, [r7, #2]
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	da43      	bge.n	8003b3c <lcdRoundedRect2+0x18a>
				uint8_t off = (int)(sqrt(r*r-(r-y2+y)*(r-y2+y)));
 8003ab4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ab8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003abc:	fb03 f202 	mul.w	r2, r3, r2
 8003ac0:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003ac4:	78bb      	ldrb	r3, [r7, #2]
 8003ac6:	1ac9      	subs	r1, r1, r3
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	440b      	add	r3, r1
 8003acc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003ad0:	78b9      	ldrb	r1, [r7, #2]
 8003ad2:	1a40      	subs	r0, r0, r1
 8003ad4:	7df9      	ldrb	r1, [r7, #23]
 8003ad6:	4401      	add	r1, r0
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fd30 	bl	8000544 <__aeabi_i2d>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	ec43 2b10 	vmov	d0, r2, r3
 8003aec:	f00e fe84 	bl	80127f8 <sqrt>
 8003af0:	ec53 2b10 	vmov	r2, r3, d0
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7fd f83e 	bl	8000b78 <__aeabi_d2iz>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003b00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4413      	add	r3, r2
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	b298      	uxth	r0, r3
 8003b14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	88ba      	ldrh	r2, [r7, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	b299      	uxth	r1, r3
 8003b28:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003b2c:	7dfa      	ldrb	r2, [r7, #23]
 8003b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4623      	mov	r3, r4
 8003b36:	f7ff f9fb 	bl	8002f30 <lcdHLine2>
 8003b3a:	e00a      	b.n	8003b52 <lcdRoundedRect2+0x1a0>
			} else {
				lcdHLine2(x1, x2, y, mode, fill);
 8003b3c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003b40:	7dfa      	ldrb	r2, [r7, #23]
 8003b42:	88b9      	ldrh	r1, [r7, #4]
 8003b44:	88f8      	ldrh	r0, [r7, #6]
 8003b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	f7ff f9ef 	bl	8002f30 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	3301      	adds	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
 8003b58:	7dfa      	ldrb	r2, [r7, #23]
 8003b5a:	78bb      	ldrb	r3, [r7, #2]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	f67f af57 	bls.w	8003a10 <lcdRoundedRect2+0x5e>
			}
		}
		if(outline){
 8003b62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 811f 	beq.w	8003daa <lcdRoundedRect2+0x3f8>
			lcdHLine2(x1+r, x2-r, y1, mode,1);
 8003b6c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	4413      	add	r3, r2
 8003b76:	b298      	uxth	r0, r3
 8003b78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	88ba      	ldrh	r2, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	b299      	uxth	r1, r3
 8003b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	2401      	movs	r4, #1
 8003b8c:	9400      	str	r4, [sp, #0]
 8003b8e:	f7ff f9cf 	bl	8002f30 <lcdHLine2>
			lcdHLine2(x1+r, x2-r, y2, mode,1);
 8003b92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b298      	uxth	r0, r3
 8003b9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	88ba      	ldrh	r2, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	b299      	uxth	r1, r3
 8003baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bae:	78ba      	ldrb	r2, [r7, #2]
 8003bb0:	2401      	movs	r4, #1
 8003bb2:	9400      	str	r4, [sp, #0]
 8003bb4:	f7ff f9bc 	bl	8002f30 <lcdHLine2>
			lcdVLine(x1, y1+r, y2-r, mode);
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	78ba      	ldrb	r2, [r7, #2]
 8003bc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bd4:	88f8      	ldrh	r0, [r7, #6]
 8003bd6:	f7ff f929 	bl	8002e2c <lcdVLine>
			lcdVLine(x2, y1+r, y2-r, mode);
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	b299      	uxth	r1, r3
 8003be8:	78ba      	ldrb	r2, [r7, #2]
 8003bea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bf6:	88b8      	ldrh	r0, [r7, #4]
 8003bf8:	f7ff f918 	bl	8002e2c <lcdVLine>
//			uint16_t nextOff = 0;
			for(uint16_t i = 0; i < (r-1); i++){
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	82bb      	strh	r3, [r7, #20]
 8003c00:	e0cc      	b.n	8003d9c <lcdRoundedRect2+0x3ea>
				//corner line offsets from X of circle center
				uint16_t off = (uint16_t)(sqrt(r*r-(r-i)*(r-i)));
 8003c02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c06:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003c12:	8abb      	ldrh	r3, [r7, #20]
 8003c14:	1acb      	subs	r3, r1, r3
 8003c16:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003c1a:	8ab9      	ldrh	r1, [r7, #20]
 8003c1c:	1a41      	subs	r1, r0, r1
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fc fc8d 	bl	8000544 <__aeabi_i2d>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	ec43 2b10 	vmov	d0, r2, r3
 8003c32:	f00e fde1 	bl	80127f8 <sqrt>
 8003c36:	ec53 2b10 	vmov	r2, r3, d0
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f7fc ffc3 	bl	8000bc8 <__aeabi_d2uiz>
 8003c42:	4603      	mov	r3, r0
 8003c44:	827b      	strh	r3, [r7, #18]
				uint16_t nextOff = (uint16_t)(sqrt(r*r-(r-i-1)*(r-i-1)));
 8003c46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c4a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003c4e:	fb03 f202 	mul.w	r2, r3, r2
 8003c52:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003c56:	8abb      	ldrh	r3, [r7, #20]
 8003c58:	1acb      	subs	r3, r1, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003c60:	8ab9      	ldrh	r1, [r7, #20]
 8003c62:	1a41      	subs	r1, r0, r1
 8003c64:	3901      	subs	r1, #1
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fc69 	bl	8000544 <__aeabi_i2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	ec43 2b10 	vmov	d0, r2, r3
 8003c7a:	f00e fdbd 	bl	80127f8 <sqrt>
 8003c7e:	ec53 2b10 	vmov	r2, r3, d0
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ff9f 	bl	8000bc8 <__aeabi_d2uiz>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	823b      	strh	r3, [r7, #16]
				//reduce corner pixel-lines overlapping
				if((nextOff-off)>0) off++;
 8003c8e:	8a3a      	ldrh	r2, [r7, #16]
 8003c90:	8a7b      	ldrh	r3, [r7, #18]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dd02      	ble.n	8003c9e <lcdRoundedRect2+0x2ec>
 8003c98:	8a7b      	ldrh	r3, [r7, #18]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	827b      	strh	r3, [r7, #18]
				//left corners
				lcdHLine2(x1+r-nextOff, x1+r-off, y1+i+1, mode, 1);
 8003c9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	8a3b      	ldrh	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	b298      	uxth	r0, r3
 8003cb0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	8a7b      	ldrh	r3, [r7, #18]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b299      	uxth	r1, r3
 8003cc2:	8abb      	ldrh	r3, [r7, #20]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cd4:	2401      	movs	r4, #1
 8003cd6:	9400      	str	r4, [sp, #0]
 8003cd8:	f7ff f92a 	bl	8002f30 <lcdHLine2>
				lcdHLine2(x1+r-nextOff, x1+r-off, y2-i-1, mode, 1);
 8003cdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	8a3b      	ldrh	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	b298      	uxth	r0, r3
 8003cee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	8a7b      	ldrh	r3, [r7, #18]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	b299      	uxth	r1, r3
 8003d00:	8abb      	ldrh	r3, [r7, #20]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	78ba      	ldrb	r2, [r7, #2]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d12:	2401      	movs	r4, #1
 8003d14:	9400      	str	r4, [sp, #0]
 8003d16:	f7ff f90b 	bl	8002f30 <lcdHLine2>
				//right corners
				lcdHLine2(x2-r+off, x2-r+nextOff, y1+i+1, mode, 1);
 8003d1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	88ba      	ldrh	r2, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	8a7b      	ldrh	r3, [r7, #18]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b298      	uxth	r0, r3
 8003d2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	88ba      	ldrh	r2, [r7, #4]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	8a3b      	ldrh	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	b299      	uxth	r1, r3
 8003d3e:	8abb      	ldrh	r3, [r7, #20]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d50:	2401      	movs	r4, #1
 8003d52:	9400      	str	r4, [sp, #0]
 8003d54:	f7ff f8ec 	bl	8002f30 <lcdHLine2>
				lcdHLine2(x2-r+off, x2-r+nextOff, y2-i-1, mode, 1);
 8003d58:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	88ba      	ldrh	r2, [r7, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	4413      	add	r3, r2
 8003d68:	b298      	uxth	r0, r3
 8003d6a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	88ba      	ldrh	r2, [r7, #4]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	8a3b      	ldrh	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	b299      	uxth	r1, r3
 8003d7c:	8abb      	ldrh	r3, [r7, #20]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	78ba      	ldrb	r2, [r7, #2]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d8e:	2401      	movs	r4, #1
 8003d90:	9400      	str	r4, [sp, #0]
 8003d92:	f7ff f8cd 	bl	8002f30 <lcdHLine2>
			for(uint16_t i = 0; i < (r-1); i++){
 8003d96:	8abb      	ldrh	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	82bb      	strh	r3, [r7, #20]
 8003d9c:	8aba      	ldrh	r2, [r7, #20]
 8003d9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003da2:	3b01      	subs	r3, #1
 8003da4:	429a      	cmp	r2, r3
 8003da6:	f6ff af2c 	blt.w	8003c02 <lcdRoundedRect2+0x250>
			}
		}
	}
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd90      	pop	{r4, r7, pc}

08003db2 <lcdRect2>:


void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003db2:	b590      	push	{r4, r7, lr}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af02      	add	r7, sp, #8
 8003db8:	4604      	mov	r4, r0
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	80fb      	strh	r3, [r7, #6]
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	80bb      	strh	r3, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	88bb      	ldrh	r3, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d046      	beq.n	8003e66 <lcdRect2+0xb4>
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	78bb      	ldrb	r3, [r7, #2]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d042      	beq.n	8003e66 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	73fb      	strb	r3, [r7, #15]
 8003de4:	e00d      	b.n	8003e02 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003de6:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	88b9      	ldrh	r1, [r7, #4]
 8003dee:	88f8      	ldrh	r0, [r7, #6]
 8003df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	4623      	mov	r3, r4
 8003df8:	f7ff f89a 	bl	8002f30 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	78bb      	ldrb	r3, [r7, #2]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d9ed      	bls.n	8003de6 <lcdRect2+0x34>
		}
		if(outline){
 8003e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d029      	beq.n	8003e66 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003e12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	88b9      	ldrh	r1, [r7, #4]
 8003e1a:	88f8      	ldrh	r0, [r7, #6]
 8003e1c:	2401      	movs	r4, #1
 8003e1e:	9400      	str	r4, [sp, #0]
 8003e20:	f7ff f886 	bl	8002f30 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e28:	78ba      	ldrb	r2, [r7, #2]
 8003e2a:	88b9      	ldrh	r1, [r7, #4]
 8003e2c:	88f8      	ldrh	r0, [r7, #6]
 8003e2e:	2401      	movs	r4, #1
 8003e30:	9400      	str	r4, [sp, #0]
 8003e32:	f7ff f87d 	bl	8002f30 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b299      	uxth	r1, r3
 8003e3e:	78bb      	ldrb	r3, [r7, #2]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e48:	88f8      	ldrh	r0, [r7, #6]
 8003e4a:	f7fe ffef 	bl	8002e2c <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3301      	adds	r3, #1
 8003e54:	b299      	uxth	r1, r3
 8003e56:	78bb      	ldrb	r3, [r7, #2]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e60:	88b8      	ldrh	r0, [r7, #4]
 8003e62:	f7fe ffe3 	bl	8002e2c <lcdVLine>
		}
	}
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}

08003e6e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e7a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003e86:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e8a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003e8e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003e96:	e000      	b.n	8003e9a <ITM_SendChar+0x2c>
    {
      __NOP();
 8003e98:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003e9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f9      	beq.n	8003e98 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003eae:	687b      	ldr	r3, [r7, #4]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ffd1 	bl	8003e6e <ITM_SendChar>
	return(ch);
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <setTimeout+0x30>)
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <setTimeout+0x34>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <setTimeout+0x38>)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <setTimeout+0x3c>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	200057e4 	.word	0x200057e4
 8003f0c:	200057e2 	.word	0x200057e2
 8003f10:	200057e8 	.word	0x200057e8
 8003f14:	200057e1 	.word	0x200057e1

08003f18 <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	2303      	movs	r3, #3
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	23be      	movs	r3, #190	; 0xbe
 8003f2c:	2232      	movs	r2, #50	; 0x32
 8003f2e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003f32:	2032      	movs	r0, #50	; 0x32
 8003f34:	f7ff ff3d 	bl	8003db2 <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <showAlert+0x34>)
 8003f3a:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <showAlert+0x38>)
 8003f3c:	215a      	movs	r1, #90	; 0x5a
 8003f3e:	205a      	movs	r0, #90	; 0x5a
 8003f40:	f7fe ff46 	bl	8002dd0 <lcdPutStr>
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08013f10 	.word	0x08013f10
 8003f50:	08013a2c 	.word	0x08013a2c

08003f54 <hideAlert>:
void hideAlert(void){
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	alertFlag = 0;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <hideAlert+0x14>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	200057ec 	.word	0x200057ec

08003f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003f72:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f74:	f002 fba0 	bl	80066b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f78:	f000 f906 	bl	8004188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f7c:	f7fe f9e8 	bl	8002350 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003f80:	f001 f924 	bl	80051cc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003f84:	f000 fb36 	bl	80045f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003f88:	f000 fec0 	bl	8004d0c <MX_TIM1_Init>
  MX_TIM10_Init();
 8003f8c:	f000 ff60 	bl	8004e50 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003f90:	f7fe fc94 	bl	80028bc <MX_I2C1_Init>
  MX_TIM11_Init();
 8003f94:	f000 ff80 	bl	8004e98 <MX_TIM11_Init>
  MX_RTC_Init();
 8003f98:	f000 fa4a 	bl	8004430 <MX_RTC_Init>
  MX_TIM13_Init();
 8003f9c:	f000 ffa0 	bl	8004ee0 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003fa0:	f000 faa0 	bl	80044e4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003fa4:	f008 fd62 	bl	800ca6c <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003fa8:	f001 f93a 	bl	8005220 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8003fac:	f000 ffbc 	bl	8004f28 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003fb0:	485b      	ldr	r0, [pc, #364]	; (8004120 <main+0x1b4>)
 8003fb2:	f006 fa39 	bl	800a428 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003fb6:	485a      	ldr	r0, [pc, #360]	; (8004120 <main+0x1b4>)
 8003fb8:	f006 fa86 	bl	800a4c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4858      	ldr	r0, [pc, #352]	; (8004120 <main+0x1b4>)
 8003fc0:	f006 fb7a 	bl	800a6b8 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 (1Hz) - for stopwatch
  stwInit(&htim10);
 8003fc4:	4857      	ldr	r0, [pc, #348]	; (8004124 <main+0x1b8>)
 8003fc6:	f000 fd8f 	bl	8004ae8 <stwInit>
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4856      	ldr	r0, [pc, #344]	; (8004128 <main+0x1bc>)
 8003fce:	f006 fb73 	bl	800a6b8 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003fd2:	4856      	ldr	r0, [pc, #344]	; (800412c <main+0x1c0>)
 8003fd4:	f006 fa78 	bl	800a4c8 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003fd8:	4855      	ldr	r0, [pc, #340]	; (8004130 <main+0x1c4>)
 8003fda:	f7fd ff93 	bl	8001f04 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003fde:	4855      	ldr	r0, [pc, #340]	; (8004134 <main+0x1c8>)
 8003fe0:	f006 fa72 	bl	800a4c8 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003fe4:	4c54      	ldr	r4, [pc, #336]	; (8004138 <main+0x1cc>)
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	4954      	ldr	r1, [pc, #336]	; (800413c <main+0x1d0>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fac0 	bl	8002570 <initGps>
 8003ff0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003ff4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f44f 7319 	mov.w	r3, #612	; 0x264
 8004000:	461a      	mov	r2, r3
 8004002:	f00b fcc1 	bl	800f988 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8004006:	484e      	ldr	r0, [pc, #312]	; (8004140 <main+0x1d4>)
 8004008:	f7fd fb06 	bl	8001618 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 800400c:	f240 118f 	movw	r1, #399	; 0x18f
 8004010:	484c      	ldr	r0, [pc, #304]	; (8004144 <main+0x1d8>)
 8004012:	f002 fa43 	bl	800649c <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8004016:	f240 128f 	movw	r2, #399	; 0x18f
 800401a:	2102      	movs	r1, #2
 800401c:	484a      	ldr	r0, [pc, #296]	; (8004148 <main+0x1dc>)
 800401e:	f002 f9a1 	bl	8006364 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8004022:	2201      	movs	r2, #1
 8004024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004028:	4848      	ldr	r0, [pc, #288]	; (800414c <main+0x1e0>)
 800402a:	f002 ff37 	bl	8006e9c <HAL_GPIO_WritePin>
  	Mount_SD("/");
 800402e:	4848      	ldr	r0, [pc, #288]	; (8004150 <main+0x1e4>)
 8004030:	f7fc ffd2 	bl	8000fd8 <Mount_SD>
  	Create_File("FILE1.TXT");
 8004034:	4847      	ldr	r0, [pc, #284]	; (8004154 <main+0x1e8>)
 8004036:	f7fd f89d 	bl	8001174 <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 800403a:	4947      	ldr	r1, [pc, #284]	; (8004158 <main+0x1ec>)
 800403c:	4845      	ldr	r0, [pc, #276]	; (8004154 <main+0x1e8>)
 800403e:	f7fd f925 	bl	800128c <Update_File>
  	Create_File("FILE4.TXT");
 8004042:	4846      	ldr	r0, [pc, #280]	; (800415c <main+0x1f0>)
 8004044:	f7fd f896 	bl	8001174 <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8004048:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800404c:	4619      	mov	r1, r3
 800404e:	4844      	ldr	r0, [pc, #272]	; (8004160 <main+0x1f4>)
 8004050:	f7fc ffde 	bl	8001010 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8004054:	2200      	movs	r2, #0
 8004056:	4943      	ldr	r1, [pc, #268]	; (8004164 <main+0x1f8>)
 8004058:	4843      	ldr	r0, [pc, #268]	; (8004168 <main+0x1fc>)
 800405a:	f004 fe7f 	bl	8008d5c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800405e:	2200      	movs	r2, #0
 8004060:	4942      	ldr	r1, [pc, #264]	; (800416c <main+0x200>)
 8004062:	4841      	ldr	r0, [pc, #260]	; (8004168 <main+0x1fc>)
 8004064:	f004 fed8 	bl	8008e18 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800406e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8004072:	222e      	movs	r2, #46	; 0x2e
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f00b fc94 	bl	800f9a4 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <main+0x1f8>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <main+0x1f8>)
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	4619      	mov	r1, r3
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <main+0x1f8>)
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	460b      	mov	r3, r1
 8004094:	4936      	ldr	r1, [pc, #216]	; (8004170 <main+0x204>)
 8004096:	f00c fb41 	bl	801071c <siprintf>
	SD_logger(tmpl);
 800409a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc ff84 	bl	8000fac <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80040a4:	f7fe fcbc 	bl	8002a20 <lcdClearBuffer>
  lcdRefresh();
 80040a8:	f7ff fc14 	bl	80038d4 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <main+0x208>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00f      	beq.n	80040d4 <main+0x168>
		bmpData = getBmpData(&bmp180module);
 80040b4:	4c30      	ldr	r4, [pc, #192]	; (8004178 <main+0x20c>)
 80040b6:	463b      	mov	r3, r7
 80040b8:	4921      	ldr	r1, [pc, #132]	; (8004140 <main+0x1d4>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd fd14 	bl	8001ae8 <getBmpData>
 80040c0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80040c4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80040c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <main+0x208>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80040d4:	2200      	movs	r2, #0
 80040d6:	4923      	ldr	r1, [pc, #140]	; (8004164 <main+0x1f8>)
 80040d8:	4823      	ldr	r0, [pc, #140]	; (8004168 <main+0x1fc>)
 80040da:	f004 fe3f 	bl	8008d5c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80040de:	2200      	movs	r2, #0
 80040e0:	4922      	ldr	r1, [pc, #136]	; (800416c <main+0x200>)
 80040e2:	4821      	ldr	r0, [pc, #132]	; (8004168 <main+0x1fc>)
 80040e4:	f004 fe98 	bl	8008e18 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 80040e8:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <main+0x1f8>)
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <main+0x194>
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <main+0x1f8>)
 80040f2:	789b      	ldrb	r3, [r3, #2]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <main+0x194>
			pulseVib(40, 60);
 80040f8:	213c      	movs	r1, #60	; 0x3c
 80040fa:	2028      	movs	r0, #40	; 0x28
 80040fc:	f001 f954 	bl	80053a8 <pulseVib>
		}
	  lcdClearBuffer();
 8004100:	f7fe fc8e 	bl	8002a20 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8004104:	f7fe fbb6 	bl	8002874 <showGui>

	  if(alertFlag){
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <main+0x210>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <main+0x1ae>
		  showAlert();
 8004110:	f7ff ff02 	bl	8003f18 <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <main+0x214>)
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <main+0x218>)
 8004118:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 800411a:	f7ff fbdb 	bl	80038d4 <lcdRefresh>
	  if(updateBmpData_flag){
 800411e:	e7c5      	b.n	80040ac <main+0x140>
 8004120:	200059e8 	.word	0x200059e8
 8004124:	20005a30 	.word	0x20005a30
 8004128:	20005b08 	.word	0x20005b08
 800412c:	20005a78 	.word	0x20005a78
 8004130:	20000050 	.word	0x20000050
 8004134:	20005ac0 	.word	0x20005ac0
 8004138:	2000557c 	.word	0x2000557c
 800413c:	20005b94 	.word	0x20005b94
 8004140:	2000236c 	.word	0x2000236c
 8004144:	2000556c 	.word	0x2000556c
 8004148:	20005558 	.word	0x20005558
 800414c:	40020800 	.word	0x40020800
 8004150:	08013a34 	.word	0x08013a34
 8004154:	08013a38 	.word	0x08013a38
 8004158:	08013a44 	.word	0x08013a44
 800415c:	08013a64 	.word	0x08013a64
 8004160:	08013a70 	.word	0x08013a70
 8004164:	20005540 	.word	0x20005540
 8004168:	200057f0 	.word	0x200057f0
 800416c:	20005554 	.word	0x20005554
 8004170:	08013a7c 	.word	0x08013a7c
 8004174:	2000007f 	.word	0x2000007f
 8004178:	200023b0 	.word	0x200023b0
 800417c:	200057ec 	.word	0x200057ec
 8004180:	20002570 	.word	0x20002570
 8004184:	08003f55 	.word	0x08003f55

08004188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b094      	sub	sp, #80	; 0x50
 800418c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800418e:	f107 0320 	add.w	r3, r7, #32
 8004192:	2230      	movs	r2, #48	; 0x30
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f00b fc04 	bl	800f9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <SystemClock_Config+0xd0>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <SystemClock_Config+0xd0>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6413      	str	r3, [r2, #64]	; 0x40
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <SystemClock_Config+0xd0>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c8:	2300      	movs	r3, #0
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <SystemClock_Config+0xd4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <SystemClock_Config+0xd4>)
 80041d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <SystemClock_Config+0xd4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80041e4:	2305      	movs	r3, #5
 80041e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80041e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041ee:	2301      	movs	r3, #1
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041f2:	2302      	movs	r3, #2
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041fc:	2304      	movs	r3, #4
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004200:	23a8      	movs	r3, #168	; 0xa8
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004204:	2302      	movs	r3, #2
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004208:	2307      	movs	r3, #7
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800420c:	f107 0320 	add.w	r3, r7, #32
 8004210:	4618      	mov	r0, r3
 8004212:	f003 fed5 	bl	8007fc0 <HAL_RCC_OscConfig>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800421c:	f000 f8fa 	bl	8004414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004220:	230f      	movs	r3, #15
 8004222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004224:	2302      	movs	r3, #2
 8004226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800422c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	2105      	movs	r1, #5
 800423e:	4618      	mov	r0, r3
 8004240:	f004 f936 	bl	80084b0 <HAL_RCC_ClockConfig>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800424a:	f000 f8e3 	bl	8004414 <Error_Handler>
  }
}
 800424e:	bf00      	nop
 8004250:	3750      	adds	r7, #80	; 0x50
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000

08004260 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	// used to time stopwatch
	if(htim->Instance == TIM10){
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d107      	bne.n	8004282 <HAL_TIM_PeriodElapsedCallback+0x22>
		stwTick();
 8004272:	f000 faed 	bl	8004850 <stwTick>
		// animation frame tick
		animationFrameNum++;
 8004276:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004280:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	// button polling
	if(htim->Instance == TIM11){
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a46      	ldr	r2, [pc, #280]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_PeriodElapsedCallback+0x64>
		scanButtons(btnsPtrs);
 800428c:	4845      	ldr	r0, [pc, #276]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800428e:	f7fe f82b 	bl	80022e8 <scanButtons>
		button_task();
 8004292:	f7fd fcc3 	bl	8001c1c <button_task>
		// check timeouts
		if(timeoutState){
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d012      	beq.n	80042c4 <HAL_TIM_PeriodElapsedCallback+0x64>
			if(timeoutValue == timeoutSetpoint){
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	4b43      	ldr	r3, [pc, #268]	; (80043b0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d106      	bne.n	80042b8 <HAL_TIM_PeriodElapsedCallback+0x58>
				(*timeoutClbkPtr)();
 80042aa:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4798      	blx	r3
				timeoutState = 0;
 80042b0:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e005      	b.n	80042c4 <HAL_TIM_PeriodElapsedCallback+0x64>
			} else {
				timeoutValue++;
 80042b8:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80042c2:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d160      	bne.n	8004390 <HAL_TIM_PeriodElapsedCallback+0x130>
		// watchface module timer value incrementing
		tickTimAAB();
 80042ce:	f7fe f999 	bl	8002604 <tickTimAAB>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 80042d2:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_PeriodElapsedCallback+0x86>
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042de:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80042e2:	4836      	ldr	r0, [pc, #216]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042e4:	4798      	blx	r3

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80042e6:	2101      	movs	r1, #1
 80042e8:	4835      	ldr	r0, [pc, #212]	; (80043c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80042ea:	f002 fdf0 	bl	8006ece <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 80042ee:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004308:	ee17 1a90 	vmov	r1, s15
 800430c:	482d      	ldr	r0, [pc, #180]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800430e:	f002 f8fb 	bl	8006508 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	b29b      	uxth	r3, r3
 8004320:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004324:	7c1b      	ldrb	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_TIM_PeriodElapsedCallback+0xd6>
 800432a:	f107 030e 	add.w	r3, r7, #14
 800432e:	4619      	mov	r1, r3
 8004330:	4827      	ldr	r0, [pc, #156]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004332:	f002 f854 	bl	80063de <cbuf_ovw>

		tim13_counter++;
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004340:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d109      	bne.n	8004362 <HAL_TIM_PeriodElapsedCallback+0x102>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	481b      	ldr	r0, [pc, #108]	; (80043c0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004352:	f002 fdbc 	bl	8006ece <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerRunning(&countDown1)){
 8004362:	481f      	ldr	r0, [pc, #124]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004364:	f7fd ffda 	bl	800231c <isTimerRunning>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_TIM_PeriodElapsedCallback+0x130>
			if(countDown1.remainingSec == 0){
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004370:	885b      	ldrh	r3, [r3, #2]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_PeriodElapsedCallback+0x124>
				alertFlag = 1;
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 800437c:	4818      	ldr	r0, [pc, #96]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800437e:	f7fd ffd9 	bl	8002334 <pauseTimer>
			} else {
				countDown1.remainingSec--;
			}
		}
	}
}
 8004382:	e005      	b.n	8004390 <HAL_TIM_PeriodElapsedCallback+0x130>
				countDown1.remainingSec--;
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004386:	885b      	ldrh	r3, [r3, #2]
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800438e:	805a      	strh	r2, [r3, #2]
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40014400 	.word	0x40014400
 800439c:	20005bfa 	.word	0x20005bfa
 80043a0:	40014800 	.word	0x40014800
 80043a4:	20000050 	.word	0x20000050
 80043a8:	200057e1 	.word	0x200057e1
 80043ac:	200057e2 	.word	0x200057e2
 80043b0:	200057e4 	.word	0x200057e4
 80043b4:	200057e8 	.word	0x200057e8
 80043b8:	40001c00 	.word	0x40001c00
 80043bc:	2000557c 	.word	0x2000557c
 80043c0:	40020400 	.word	0x40020400
 80043c4:	2000556c 	.word	0x2000556c
 80043c8:	200023b0 	.word	0x200023b0
 80043cc:	cccccccd 	.word	0xcccccccd
 80043d0:	20005558 	.word	0x20005558
 80043d4:	200057e0 	.word	0x200057e0
 80043d8:	2000007e 	.word	0x2000007e
 80043dc:	2000007f 	.word	0x2000007f
 80043e0:	20000080 	.word	0x20000080
 80043e4:	200057ec 	.word	0x200057ec

080043e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a05      	ldr	r2, [pc, #20]	; (800440c <HAL_UART_RxCpltCallback+0x24>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d103      	bne.n	8004402 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	4804      	ldr	r0, [pc, #16]	; (8004410 <HAL_UART_RxCpltCallback+0x28>)
 80043fe:	f002 fd66 	bl	8006ece <HAL_GPIO_TogglePin>
	}
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40011400 	.word	0x40011400
 8004410:	40020400 	.word	0x40020400

08004414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
}
 800441a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800441c:	2201      	movs	r2, #1
 800441e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004422:	4802      	ldr	r0, [pc, #8]	; (800442c <Error_Handler+0x18>)
 8004424:	f002 fd3a 	bl	8006e9c <HAL_GPIO_WritePin>
  while (1)
 8004428:	e7fe      	b.n	8004428 <Error_Handler+0x14>
 800442a:	bf00      	nop
 800442c:	40020400 	.word	0x40020400

08004430 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_RTC_Init+0x58>)
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <MX_RTC_Init+0x5c>)
 800444c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_RTC_Init+0x58>)
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_RTC_Init+0x58>)
 8004456:	227f      	movs	r2, #127	; 0x7f
 8004458:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <MX_RTC_Init+0x58>)
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_RTC_Init+0x58>)
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <MX_RTC_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_RTC_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_RTC_Init+0x58>)
 8004474:	f004 fbfc 	bl	8008c70 <HAL_RTC_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800447e:	f7ff ffc9 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200057f0 	.word	0x200057f0
 800448c:	40002800 	.word	0x40002800

08004490 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	2230      	movs	r2, #48	; 0x30
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f00b fa7f 	bl	800f9a4 <memset>
  if(rtcHandle->Instance==RTC)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_RTC_MspInit+0x4c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80044b0:	2320      	movs	r3, #32
 80044b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80044b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fa16 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80044ca:	f7ff ffa3 	bl	8004414 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044ce:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <HAL_RTC_MspInit+0x50>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80044d4:	bf00      	nop
 80044d6:	3738      	adds	r7, #56	; 0x38
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40002800 	.word	0x40002800
 80044e0:	42470e3c 	.word	0x42470e3c

080044e4 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <MX_SDIO_SD_Init+0x38>)
 80044ea:	4a0d      	ldr	r2, [pc, #52]	; (8004520 <MX_SDIO_SD_Init+0x3c>)
 80044ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <MX_SDIO_SD_Init+0x38>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <MX_SDIO_SD_Init+0x38>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <MX_SDIO_SD_Init+0x38>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <MX_SDIO_SD_Init+0x38>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <MX_SDIO_SD_Init+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <MX_SDIO_SD_Init+0x38>)
 800450e:	2204      	movs	r2, #4
 8004510:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20005810 	.word	0x20005810
 8004520:	40012c00 	.word	0x40012c00

08004524 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <HAL_SD_MspInit+0xc0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d14a      	bne.n	80045dc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004554:	6453      	str	r3, [r2, #68]	; 0x44
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6313      	str	r3, [r2, #48]	; 0x30
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004588:	f043 0308 	orr.w	r3, r3, #8
 800458c:	6313      	str	r3, [r2, #48]	; 0x30
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <HAL_SD_MspInit+0xc4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800459a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800459e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80045ac:	230c      	movs	r3, #12
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4619      	mov	r1, r3
 80045b6:	480d      	ldr	r0, [pc, #52]	; (80045ec <HAL_SD_MspInit+0xc8>)
 80045b8:	f002 faac 	bl	8006b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045bc:	2304      	movs	r3, #4
 80045be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c0:	2302      	movs	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c8:	2303      	movs	r3, #3
 80045ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80045cc:	230c      	movs	r3, #12
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4619      	mov	r1, r3
 80045d6:	4806      	ldr	r0, [pc, #24]	; (80045f0 <HAL_SD_MspInit+0xcc>)
 80045d8:	f002 fa9c 	bl	8006b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80045dc:	bf00      	nop
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020c00 	.word	0x40020c00

080045f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <MX_SPI1_Init+0x64>)
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <MX_SPI1_Init+0x68>)
 80045fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <MX_SPI1_Init+0x64>)
 8004600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <MX_SPI1_Init+0x64>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <MX_SPI1_Init+0x64>)
 800460e:	2200      	movs	r2, #0
 8004610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MX_SPI1_Init+0x64>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <MX_SPI1_Init+0x64>)
 800461a:	2200      	movs	r2, #0
 800461c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <MX_SPI1_Init+0x64>)
 8004620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <MX_SPI1_Init+0x64>)
 8004628:	2220      	movs	r2, #32
 800462a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <MX_SPI1_Init+0x64>)
 800462e:	2200      	movs	r2, #0
 8004630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <MX_SPI1_Init+0x64>)
 8004634:	2200      	movs	r2, #0
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <MX_SPI1_Init+0x64>)
 800463a:	2200      	movs	r2, #0
 800463c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <MX_SPI1_Init+0x64>)
 8004640:	220a      	movs	r2, #10
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004644:	4804      	ldr	r0, [pc, #16]	; (8004658 <MX_SPI1_Init+0x64>)
 8004646:	f005 fc5f 	bl	8009f08 <HAL_SPI_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004650:	f7ff fee0 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20005894 	.word	0x20005894
 800465c:	40013000 	.word	0x40013000

08004660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_SPI_MspInit+0x84>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d12b      	bne.n	80046da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 800468c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_SPI_MspInit+0x88>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046ba:	23a0      	movs	r3, #160	; 0xa0
 80046bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c6:	2303      	movs	r3, #3
 80046c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046ca:	2305      	movs	r3, #5
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4619      	mov	r1, r3
 80046d4:	4805      	ldr	r0, [pc, #20]	; (80046ec <HAL_SPI_MspInit+0x8c>)
 80046d6:	f002 fa1d 	bl	8006b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80046da:	bf00      	nop
 80046dc:	3728      	adds	r7, #40	; 0x28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40013000 	.word	0x40013000
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40020000 	.word	0x40020000

080046f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_MspInit+0x4c>)
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	4a0f      	ldr	r2, [pc, #60]	; (800473c <HAL_MspInit+0x4c>)
 8004700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004704:	6453      	str	r3, [r2, #68]	; 0x44
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <HAL_MspInit+0x4c>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_MspInit+0x4c>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <HAL_MspInit+0x4c>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	; 0x40
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_MspInit+0x4c>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004744:	e7fe      	b.n	8004744 <NMI_Handler+0x4>

08004746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 800474a:	f7ff fe63 	bl	8004414 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474e:	e7fe      	b.n	800474e <HardFault_Handler+0x8>

08004750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004754:	e7fe      	b.n	8004754 <MemManage_Handler+0x4>

08004756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800475a:	e7fe      	b.n	800475a <BusFault_Handler+0x4>

0800475c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004760:	e7fe      	b.n	8004760 <UsageFault_Handler+0x4>

08004762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004790:	f001 ffe4 	bl	800675c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}

08004798 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800479c:	4803      	ldr	r0, [pc, #12]	; (80047ac <TIM1_UP_TIM10_IRQHandler+0x14>)
 800479e:	f006 f853 	bl	800a848 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80047a2:	4803      	ldr	r0, [pc, #12]	; (80047b0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80047a4:	f006 f850 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200059e8 	.word	0x200059e8
 80047b0:	20005a30 	.word	0x20005a30

080047b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047b8:	4803      	ldr	r0, [pc, #12]	; (80047c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80047ba:	f006 f845 	bl	800a848 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80047c0:	f006 f842 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200059e8 	.word	0x200059e8
 80047cc:	20005a78 	.word	0x20005a78

080047d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80047d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80047d8:	f002 fb94 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80047dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047e0:	f002 fb90 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80047e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047e8:	f002 fb8c 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80047ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047f0:	f002 fb88 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80047f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80047f8:	f002 fb84 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80047fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004800:	f002 fb80 	bl	8006f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004804:	bf00      	nop
 8004806:	bd80      	pop	{r7, pc}

08004808 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800480c:	4802      	ldr	r0, [pc, #8]	; (8004818 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800480e:	f006 f81b 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20005ac0 	.word	0x20005ac0

0800481c <getLapNum>:
stw_t stwS = {&currentStw, STW_STATE_DISABLED};

stw_counter_t stw_splits[STW_SPLIT_MAX_NUM];
uint8_t snap_number = 1;

uint8_t getLapNum(void){
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
	return snap_number;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <getLapNum+0x14>)
 8004822:	781b      	ldrb	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000090 	.word	0x20000090

08004834 <stwStart>:
//		return diff;
//	}
//}

// activate stopwatch and it's timer
void stwStart(void){
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <stwStart+0x14>)
 800483a:	2201      	movs	r2, #1
 800483c:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Start_IT(&htim10);
 800483e:	4803      	ldr	r0, [pc, #12]	; (800484c <stwStart+0x18>)
 8004840:	f005 fe42 	bl	800a4c8 <HAL_TIM_Base_Start_IT>
}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000088 	.word	0x20000088
 800484c:	20005a30 	.word	0x20005a30

08004850 <stwTick>:
void stwTick(void){
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
	if(stwS.state){
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <stwTick+0x20>)
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <stwTick+0x16>
		(stwS.cnt->sec)++;
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <stwTick+0x20>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	3201      	adds	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
	}
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000088 	.word	0x20000088

08004874 <stwStop>:
void stwStop(void){
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <stwStop+0x14>)
 800487a:	2200      	movs	r2, #0
 800487c:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 800487e:	4803      	ldr	r0, [pc, #12]	; (800488c <stwStop+0x18>)
 8004880:	f005 fe92 	bl	800a5a8 <HAL_TIM_Base_Stop_IT>

}
 8004884:	bf00      	nop
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000088 	.word	0x20000088
 800488c:	20005a30 	.word	0x20005a30

08004890 <stwClear>:
void stwClear(void){
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <stwClear+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt->sec = 0;
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <stwClear+0x2c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
	memset(stw_splits, 0, sizeof stw_splits);
 80048a4:	22f0      	movs	r2, #240	; 0xf0
 80048a6:	2100      	movs	r1, #0
 80048a8:	4805      	ldr	r0, [pc, #20]	; (80048c0 <stwClear+0x30>)
 80048aa:	f00b f87b 	bl	800f9a4 <memset>
	snap_number = 1;
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <stwClear+0x34>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20005a30 	.word	0x20005a30
 80048bc:	20000088 	.word	0x20000088
 80048c0:	200058f4 	.word	0x200058f4
 80048c4:	20000090 	.word	0x20000090

080048c8 <getStw>:

void getStw(struct stopwatch_t* stw_ptr, stw_t* stwS){
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
		stw_ptr->hours = stwS->cnt->sec/(60*60);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <getStw+0xa0>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	0adb      	lsrs	r3, r3, #11
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	701a      	strb	r2, [r3, #0]
		stw_ptr->min = stwS->cnt->sec%(60*60)/(60);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <getStw+0xa0>)
 80048ee:	fba3 1302 	umull	r1, r3, r3, r2
 80048f2:	0adb      	lsrs	r3, r3, #11
 80048f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1b      	ldr	r2, [pc, #108]	; (800496c <getStw+0xa4>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	b2da      	uxtb	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	705a      	strb	r2, [r3, #1]
		stw_ptr->sec = stwS->cnt->sec%60;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <getStw+0xa4>)
 8004914:	fba3 2301 	umull	r2, r3, r3, r1
 8004918:	095a      	lsrs	r2, r3, #5
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	1aca      	subs	r2, r1, r3
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	709a      	strb	r2, [r3, #2]
		stw_ptr->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <getStw+0xa8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	b29b      	uxth	r3, r3
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <getStw+0xac>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	b29b      	uxth	r3, r3
 800493c:	b2da      	uxtb	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	70da      	strb	r2, [r3, #3]
		// update .00 second counter in stw struct
		stwS->cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <getStw+0xa8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	b29a      	uxth	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4909      	ldr	r1, [pc, #36]	; (8004974 <getStw+0xac>)
 8004950:	fba1 1202 	umull	r1, r2, r1, r2
 8004954:	0952      	lsrs	r2, r2, #5
 8004956:	b292      	uxth	r2, r2
 8004958:	809a      	strh	r2, [r3, #4]

}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	91a2b3c5 	.word	0x91a2b3c5
 800496c:	88888889 	.word	0x88888889
 8004970:	20005a30 	.word	0x20005a30
 8004974:	51eb851f 	.word	0x51eb851f

08004978 <stwSave>:



// stopwatch snapshot
void stwSave(void){
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
	if(snap_number < STW_SPLIT_MAX_NUM){
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <stwSave+0x70>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b1d      	cmp	r3, #29
 8004982:	d82b      	bhi.n	80049dc <stwSave+0x64>
		stw_splits[snap_number].sec = stwS.cnt->sec;
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <stwSave+0x74>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <stwSave+0x70>)
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	4611      	mov	r1, r2
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <stwSave+0x78>)
 8004992:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		stwS.cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004996:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <stwSave+0x7c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	b29a      	uxth	r2, r3
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <stwSave+0x74>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4915      	ldr	r1, [pc, #84]	; (80049f8 <stwSave+0x80>)
 80049a4:	fba1 1202 	umull	r1, r2, r1, r2
 80049a8:	0952      	lsrs	r2, r2, #5
 80049aa:	b292      	uxth	r2, r2
 80049ac:	809a      	strh	r2, [r3, #4]
		stw_splits[snap_number].csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <stwSave+0x7c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <stwSave+0x70>)
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	4610      	mov	r0, r2
 80049bc:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <stwSave+0x80>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	b299      	uxth	r1, r3
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <stwSave+0x78>)
 80049c8:	00c3      	lsls	r3, r0, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	460a      	mov	r2, r1
 80049ce:	809a      	strh	r2, [r3, #4]
		snap_number++;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <stwSave+0x70>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <stwSave+0x70>)
 80049da:	701a      	strb	r2, [r3, #0]
	}
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000090 	.word	0x20000090
 80049ec:	20000088 	.word	0x20000088
 80049f0:	200058f4 	.word	0x200058f4
 80049f4:	20005a30 	.word	0x20005a30
 80049f8:	51eb851f 	.word	0x51eb851f

080049fc <counterDiff>:

void counterDiff(stw_counter_t* result, stw_counter_t* cnt1, stw_counter_t* cnt2){
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
//		if(diff > 100){
//		result->csec = diff+100;
//	} else {
//		result->csec = diff;
//	}
		result->sec = (cnt1->sec*100+cnt1->csec-cnt2->sec*100-cnt2->csec)/100;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2264      	movs	r2, #100	; 0x64
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	8892      	ldrh	r2, [r2, #4]
 8004a16:	441a      	add	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2164      	movs	r1, #100	; 0x64
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	8892      	ldrh	r2, [r2, #4]
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <counterDiff+0x6c>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095a      	lsrs	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]
		uint16_t diff = cnt1->csec-cnt2->csec;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	889a      	ldrh	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	889b      	ldrh	r3, [r3, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	82fb      	strh	r3, [r7, #22]
		if(diff > 100){
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d905      	bls.n	8004a54 <counterDiff+0x58>
			result->csec = diff+100;
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	3364      	adds	r3, #100	; 0x64
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	809a      	strh	r2, [r3, #4]
		} else {
			result->csec = diff;
		}
}
 8004a52:	e002      	b.n	8004a5a <counterDiff+0x5e>
			result->csec = diff;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8afa      	ldrh	r2, [r7, #22]
 8004a58:	809a      	strh	r2, [r3, #4]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	51eb851f 	.word	0x51eb851f

08004a6c <counterToStopwatch>:

// transform counter info into hh/mm/ss/cs struct
void counterToStopwatch(struct stopwatch_t* output, stw_counter_t* counter){
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	output->hours = counter->sec/(60*60);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <counterToStopwatch+0x74>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	0adb      	lsrs	r3, r3, #11
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	701a      	strb	r2, [r3, #0]
	output->min = counter->sec%(60*60)/(60);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <counterToStopwatch+0x74>)
 8004a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a92:	0adb      	lsrs	r3, r3, #11
 8004a94:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <counterToStopwatch+0x78>)
 8004aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	705a      	strb	r2, [r3, #1]
	output->sec = counter->sec%60;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <counterToStopwatch+0x78>)
 8004ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab6:	095a      	lsrs	r2, r3, #5
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	1aca      	subs	r2, r1, r3
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	709a      	strb	r2, [r3, #2]
	output->csec = counter->csec;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	889b      	ldrh	r3, [r3, #4]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	70da      	strb	r2, [r3, #3]
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	91a2b3c5 	.word	0x91a2b3c5
 8004ae4:	88888889 	.word	0x88888889

08004ae8 <stwInit>:


void stwInit(TIM_HandleTypeDef* htim){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	// initialize timer
	// start/stop/reset routine to fix bug:
	//BUG: first stopwatch start after reset causes timer to jump 1 second forward
	  HAL_TIM_Base_Init(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f005 fc99 	bl	800a428 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f005 fce6 	bl	800a4c8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Stop_IT(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f005 fd53 	bl	800a5a8 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(htim, 0);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <stwprintf>:

void stwprintf(char* outputString, struct stopwatch_t* stw_time){
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	if(stw_time->hours > 0){
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <stwprintf+0x30>
		sprintf(outputString, "%02dh %02d'%02d\"", stw_time->hours, stw_time->min, stw_time->sec);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	4619      	mov	r1, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	490b      	ldr	r1, [pc, #44]	; (8004b68 <stwprintf+0x54>)
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f00b fded 	bl	801071c <siprintf>
	} else {
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
	}
}
 8004b42:	e00d      	b.n	8004b60 <stwprintf+0x4c>
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	789b      	ldrb	r3, [r3, #2]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	78db      	ldrb	r3, [r3, #3]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	460b      	mov	r3, r1
 8004b58:	4904      	ldr	r1, [pc, #16]	; (8004b6c <stwprintf+0x58>)
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f00b fdde 	bl	801071c <siprintf>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08013aa0 	.word	0x08013aa0
 8004b6c:	08013ab4 	.word	0x08013ab4

08004b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
	return 1;
 8004b74:	2301      	movs	r3, #1
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_kill>:

int _kill(int pid, int sig)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b8a:	f00a feb1 	bl	800f8f0 <__errno>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2216      	movs	r2, #22
 8004b92:	601a      	str	r2, [r3, #0]
	return -1;
 8004b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_exit>:

void _exit (int status)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ffe7 	bl	8004b80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bb2:	e7fe      	b.n	8004bb2 <_exit+0x12>

08004bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e00a      	b.n	8004bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bc6:	f3af 8000 	nop.w
 8004bca:	4601      	mov	r1, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	60ba      	str	r2, [r7, #8]
 8004bd2:	b2ca      	uxtb	r2, r1
 8004bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	dbf0      	blt.n	8004bc6 <_read+0x12>
	}

return len;
 8004be4:	687b      	ldr	r3, [r7, #4]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e009      	b.n	8004c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	60ba      	str	r2, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f957 	bl	8003ebc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	3301      	adds	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	dbf1      	blt.n	8004c00 <_write+0x12>
	}
	return len;
 8004c1c:	687b      	ldr	r3, [r7, #4]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <_close>:

int _close(int file)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_isatty>:

int _isatty(int file)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
	return 1;
 8004c66:	2301      	movs	r3, #1
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <_sbrk+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk+0x16>
		heap_end = &end;
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <_sbrk+0x50>)
 8004ca2:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <_sbrk+0x54>)
 8004ca4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <_sbrk+0x50>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <_sbrk+0x50>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	466a      	mov	r2, sp
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d907      	bls.n	8004cca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cba:	f00a fe19 	bl	800f8f0 <__errno>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	220c      	movs	r2, #12
 8004cc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc8:	e006      	b.n	8004cd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <_sbrk+0x50>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <_sbrk+0x50>)
 8004cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	200059e4 	.word	0x200059e4
 8004ce4:	20005c60 	.word	0x20005c60

08004ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <SystemInit+0x20>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <SystemInit+0x20>)
 8004cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b096      	sub	sp, #88	; 0x58
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	615a      	str	r2, [r3, #20]
 8004d3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d3e:	1d3b      	adds	r3, r7, #4
 8004d40:	2220      	movs	r2, #32
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f00a fe2d 	bl	800f9a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d4c:	4a3f      	ldr	r2, [pc, #252]	; (8004e4c <MX_TIM1_Init+0x140>)
 8004d4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004d50:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d52:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d66:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d72:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d78:	4833      	ldr	r0, [pc, #204]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d7a:	f005 fb55 	bl	800a428 <HAL_TIM_Base_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004d84:	f7ff fb46 	bl	8004414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d92:	4619      	mov	r1, r3
 8004d94:	482c      	ldr	r0, [pc, #176]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004d96:	f005 ff21 	bl	800abdc <HAL_TIM_ConfigClockSource>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004da0:	f7ff fb38 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004da4:	4828      	ldr	r0, [pc, #160]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004da6:	f005 fc2e 	bl	800a606 <HAL_TIM_PWM_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004db0:	f7ff fb30 	bl	8004414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db4:	2300      	movs	r3, #0
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4821      	ldr	r0, [pc, #132]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004dc4:	f006 fb0a 	bl	800b3dc <HAL_TIMEx_MasterConfigSynchronization>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004dce:	f7ff fb21 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dd2:	2360      	movs	r3, #96	; 0x60
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004dde:	2300      	movs	r3, #0
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df2:	2200      	movs	r2, #0
 8004df4:	4619      	mov	r1, r3
 8004df6:	4814      	ldr	r0, [pc, #80]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004df8:	f005 fe2e 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004e02:	f7ff fb07 	bl	8004414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4807      	ldr	r0, [pc, #28]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004e2a:	f006 fb53 	bl	800b4d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004e34:	f7ff faee 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e38:	4803      	ldr	r0, [pc, #12]	; (8004e48 <MX_TIM1_Init+0x13c>)
 8004e3a:	f000 f963 	bl	8005104 <HAL_TIM_MspPostInit>

}
 8004e3e:	bf00      	nop
 8004e40:	3758      	adds	r7, #88	; 0x58
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200059e8 	.word	0x200059e8
 8004e4c:	40010000 	.word	0x40010000

08004e50 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e56:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <MX_TIM10_Init+0x44>)
 8004e58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e5c:	f244 129f 	movw	r2, #16799	; 0x419f
 8004e60:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e6e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e7c:	4804      	ldr	r0, [pc, #16]	; (8004e90 <MX_TIM10_Init+0x40>)
 8004e7e:	f005 fad3 	bl	800a428 <HAL_TIM_Base_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004e88:	f7ff fac4 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20005a30 	.word	0x20005a30
 8004e94:	40014400 	.word	0x40014400

08004e98 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <MX_TIM11_Init+0x44>)
 8004ea0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004ea4:	f244 129f 	movw	r2, #16799	; 0x419f
 8004ea8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004eb2:	2263      	movs	r2, #99	; 0x63
 8004eb4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <MX_TIM11_Init+0x40>)
 8004ec4:	f005 fab0 	bl	800a428 <HAL_TIM_Base_Init>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004ece:	f7ff faa1 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20005a78 	.word	0x20005a78
 8004edc:	40014800 	.word	0x40014800

08004ee0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <MX_TIM13_Init+0x44>)
 8004ee8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004eec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004ef0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004efa:	f242 720f 	movw	r2, #9999	; 0x270f
 8004efe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004f08:	2280      	movs	r2, #128	; 0x80
 8004f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f0c:	4804      	ldr	r0, [pc, #16]	; (8004f20 <MX_TIM13_Init+0x40>)
 8004f0e:	f005 fa8b 	bl	800a428 <HAL_TIM_Base_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004f18:	f7ff fa7c 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20005ac0 	.word	0x20005ac0
 8004f24:	40001c00 	.word	0x40001c00

08004f28 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
 8004f3c:	615a      	str	r2, [r3, #20]
 8004f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f42:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <MX_TIM14_Init+0x98>)
 8004f44:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f48:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004f4c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f56:	2263      	movs	r2, #99	; 0x63
 8004f58:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f60:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f66:	4815      	ldr	r0, [pc, #84]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f68:	f005 fa5e 	bl	800a428 <HAL_TIM_Base_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004f72:	f7ff fa4f 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004f76:	4811      	ldr	r0, [pc, #68]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f78:	f005 fb45 	bl	800a606 <HAL_TIM_PWM_Init>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004f82:	f7ff fa47 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f86:	2360      	movs	r3, #96	; 0x60
 8004f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4807      	ldr	r0, [pc, #28]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004f9e:	f005 fd5b 	bl	800aa58 <HAL_TIM_PWM_ConfigChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004fa8:	f7ff fa34 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004fac:	4803      	ldr	r0, [pc, #12]	; (8004fbc <MX_TIM14_Init+0x94>)
 8004fae:	f000 f8a9 	bl	8005104 <HAL_TIM_MspPostInit>

}
 8004fb2:	bf00      	nop
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20005b08 	.word	0x20005b08
 8004fc0:	40002000 	.word	0x40002000

08004fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a46      	ldr	r2, [pc, #280]	; (80050ec <HAL_TIM_Base_MspInit+0x128>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d11e      	bne.n	8005014 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4a44      	ldr	r2, [pc, #272]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe6:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2019      	movs	r0, #25
 8004ff8:	f001 fccf 	bl	800699a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ffc:	2019      	movs	r0, #25
 8004ffe:	f001 fce8 	bl	80069d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	201a      	movs	r0, #26
 8005008:	f001 fcc7 	bl	800699a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800500c:	201a      	movs	r0, #26
 800500e:	f001 fce0 	bl	80069d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8005012:	e066      	b.n	80050e2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a36      	ldr	r2, [pc, #216]	; (80050f4 <HAL_TIM_Base_MspInit+0x130>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d116      	bne.n	800504c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	4a32      	ldr	r2, [pc, #200]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502c:	6453      	str	r3, [r2, #68]	; 0x44
 800502e:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	2019      	movs	r0, #25
 8005040:	f001 fcab 	bl	800699a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005044:	2019      	movs	r0, #25
 8005046:	f001 fcc4 	bl	80069d2 <HAL_NVIC_EnableIRQ>
}
 800504a:	e04a      	b.n	80050e2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <HAL_TIM_Base_MspInit+0x134>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d116      	bne.n	8005084 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005064:	6453      	str	r3, [r2, #68]	; 0x44
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	201a      	movs	r0, #26
 8005078:	f001 fc8f 	bl	800699a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800507c:	201a      	movs	r0, #26
 800507e:	f001 fca8 	bl	80069d2 <HAL_NVIC_EnableIRQ>
}
 8005082:	e02e      	b.n	80050e2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_TIM_Base_MspInit+0x138>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d116      	bne.n	80050bc <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	6413      	str	r3, [r2, #64]	; 0x40
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	202c      	movs	r0, #44	; 0x2c
 80050b0:	f001 fc73 	bl	800699a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80050b4:	202c      	movs	r0, #44	; 0x2c
 80050b6:	f001 fc8c 	bl	80069d2 <HAL_NVIC_EnableIRQ>
}
 80050ba:	e012      	b.n	80050e2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <HAL_TIM_Base_MspInit+0x13c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_TIM_Base_MspInit+0x12c>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800
 80050fc:	40001c00 	.word	0x40001c00
 8005100:	40002000 	.word	0x40002000

08005104 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <HAL_TIM_MspPostInit+0xb4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d11f      	bne.n	8005166 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 8005130:	f043 0310 	orr.w	r3, r3, #16
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005150:	2300      	movs	r3, #0
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005154:	2301      	movs	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4619      	mov	r1, r3
 800515e:	4818      	ldr	r0, [pc, #96]	; (80051c0 <HAL_TIM_MspPostInit+0xbc>)
 8005160:	f001 fcd8 	bl	8006b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005164:	e023      	b.n	80051ae <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <HAL_TIM_MspPostInit+0xc0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d11e      	bne.n	80051ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 800517a:	f043 0320 	orr.w	r3, r3, #32
 800517e:	6313      	str	r3, [r2, #48]	; 0x30
 8005180:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_TIM_MspPostInit+0xb8>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800518c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800519e:	2309      	movs	r3, #9
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	4619      	mov	r1, r3
 80051a8:	4807      	ldr	r0, [pc, #28]	; (80051c8 <HAL_TIM_MspPostInit+0xc4>)
 80051aa:	f001 fcb3 	bl	8006b14 <HAL_GPIO_Init>
}
 80051ae:	bf00      	nop
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40002000 	.word	0x40002000
 80051c8:	40021400 	.word	0x40021400

080051cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <MX_USART3_UART_Init+0x50>)
 80051d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051f2:	220c      	movs	r2, #12
 80051f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005202:	4805      	ldr	r0, [pc, #20]	; (8005218 <MX_USART3_UART_Init+0x4c>)
 8005204:	f006 f9cc 	bl	800b5a0 <HAL_UART_Init>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800520e:	f7ff f901 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20005b50 	.word	0x20005b50
 800521c:	40004800 	.word	0x40004800

08005220 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <MX_USART6_UART_Init+0x50>)
 8005228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <MX_USART6_UART_Init+0x4c>)
 800522c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005230:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <MX_USART6_UART_Init+0x4c>)
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005246:	220c      	movs	r2, #12
 8005248:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <MX_USART6_UART_Init+0x4c>)
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005256:	4805      	ldr	r0, [pc, #20]	; (800526c <MX_USART6_UART_Init+0x4c>)
 8005258:	f006 f9a2 	bl	800b5a0 <HAL_UART_Init>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005262:	f7ff f8d7 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20005b94 	.word	0x20005b94
 8005270:	40011400 	.word	0x40011400

08005274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a32      	ldr	r2, [pc, #200]	; (800535c <HAL_UART_MspInit+0xe8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d12d      	bne.n	80052f2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_UART_MspInit+0xec>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_UART_MspInit+0xec>)
 80052a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a4:	6413      	str	r3, [r2, #64]	; 0x40
 80052a6:	4b2e      	ldr	r3, [pc, #184]	; (8005360 <HAL_UART_MspInit+0xec>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_UART_MspInit+0xec>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4a29      	ldr	r2, [pc, #164]	; (8005360 <HAL_UART_MspInit+0xec>)
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	6313      	str	r3, [r2, #48]	; 0x30
 80052c2:	4b27      	ldr	r3, [pc, #156]	; (8005360 <HAL_UART_MspInit+0xec>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80052ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052dc:	2303      	movs	r3, #3
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052e0:	2307      	movs	r3, #7
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052e4:	f107 031c 	add.w	r3, r7, #28
 80052e8:	4619      	mov	r1, r3
 80052ea:	481e      	ldr	r0, [pc, #120]	; (8005364 <HAL_UART_MspInit+0xf0>)
 80052ec:	f001 fc12 	bl	8006b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80052f0:	e030      	b.n	8005354 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <HAL_UART_MspInit+0xf4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d12b      	bne.n	8005354 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_UART_MspInit+0xec>)
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_UART_MspInit+0xec>)
 8005306:	f043 0320 	orr.w	r3, r3, #32
 800530a:	6453      	str	r3, [r2, #68]	; 0x44
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_UART_MspInit+0xec>)
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_UART_MspInit+0xec>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <HAL_UART_MspInit+0xec>)
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	6313      	str	r3, [r2, #48]	; 0x30
 8005328:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_UART_MspInit+0xec>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005334:	23c0      	movs	r3, #192	; 0xc0
 8005336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005338:	2302      	movs	r3, #2
 800533a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005340:	2303      	movs	r3, #3
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005344:	2308      	movs	r3, #8
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	4619      	mov	r1, r3
 800534e:	4807      	ldr	r0, [pc, #28]	; (800536c <HAL_UART_MspInit+0xf8>)
 8005350:	f001 fbe0 	bl	8006b14 <HAL_GPIO_Init>
}
 8005354:	bf00      	nop
 8005356:	3730      	adds	r7, #48	; 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40004800 	.word	0x40004800
 8005360:	40023800 	.word	0x40023800
 8005364:	40020c00 	.word	0x40020c00
 8005368:	40011400 	.word	0x40011400
 800536c:	40020800 	.word	0x40020800

08005370 <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <enableVib+0x18>)
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <enableVib+0x1c>)
 800537a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000098 	.word	0x20000098
 800538c:	40002000 	.word	0x40002000

08005390 <disableVib>:
void disableVib(void){
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <disableVib+0x14>)
 8005396:	2200      	movs	r2, #0
 8005398:	635a      	str	r2, [r3, #52]	; 0x34
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40002000 	.word	0x40002000

080053a8 <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	460a      	mov	r2, r1
 80053b2:	80fb      	strh	r3, [r7, #6]
 80053b4:	4613      	mov	r3, r2
 80053b6:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 80053b8:	4a06      	ldr	r2, [pc, #24]	; (80053d4 <pulseVib+0x2c>)
 80053ba:	797b      	ldrb	r3, [r7, #5]
 80053bc:	7013      	strb	r3, [r2, #0]
	enableVib();
 80053be:	f7ff ffd7 	bl	8005370 <enableVib>
	setTimeout(duration, &disableVib);
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	4904      	ldr	r1, [pc, #16]	; (80053d8 <pulseVib+0x30>)
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fd86 	bl	8003ed8 <setTimeout>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000098 	.word	0x20000098
 80053d8:	08005391 	.word	0x08005391

080053dc <prevPage>:
}
void triplePressH(void){
	sprintf(&btnStr, "Triple press");
}

void prevPage(void){
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <prevPage+0x30>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <prevPage+0x1a>
		currentPage--;
 80053e8:	4b08      	ldr	r3, [pc, #32]	; (800540c <prevPage+0x30>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <prevPage+0x30>)
 80053f2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80053f4:	e005      	b.n	8005402 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <prevPage+0x34>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b03      	ldr	r3, [pc, #12]	; (800540c <prevPage+0x30>)
 8005400:	701a      	strb	r2, [r3, #0]
}
 8005402:	bf00      	nop
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	20005bd8 	.word	0x20005bd8
 8005410:	20000099 	.word	0x20000099

08005414 <nextPage>:
void nextPage(void){
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <nextPage+0x34>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <nextPage+0x38>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3b01      	subs	r3, #1
 8005424:	429a      	cmp	r2, r3
 8005426:	da06      	bge.n	8005436 <nextPage+0x22>
		currentPage++;
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <nextPage+0x34>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <nextPage+0x34>)
 8005432:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8005434:	e002      	b.n	800543c <nextPage+0x28>
		currentPage=0;
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <nextPage+0x34>)
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20005bd8 	.word	0x20005bd8
 800544c:	20000099 	.word	0x20000099

08005450 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
//	btn_B2.onReleaseHandler = &quickReleaseH;
//	btn_B2.onPress = &quickPressH;
//	btn_B2.onRelease = &quickReleaseH;
//	btn_BB.onSinglePressHandler = &showOptions;

	btn_BA.onSinglePressHandler = &nextScreen;
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <setDefaultClbcks+0x28>)
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <setDefaultClbcks+0x2c>)
 8005458:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <setDefaultClbcks+0x30>)
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <setDefaultClbcks+0x34>)
 800545e:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <setDefaultClbcks+0x38>)
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <setDefaultClbcks+0x3c>)
 8005464:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <setDefaultClbcks+0x40>)
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <setDefaultClbcks+0x44>)
 800546a:	611a      	str	r2, [r3, #16]
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20002450 	.word	0x20002450
 800547c:	080027c5 	.word	0x080027c5
 8005480:	200024e0 	.word	0x200024e0
 8005484:	080027d5 	.word	0x080027d5
 8005488:	200025b8 	.word	0x200025b8
 800548c:	080053dd 	.word	0x080053dd
 8005490:	20002528 	.word	0x20002528
 8005494:	08005415 	.word	0x08005415

08005498 <showPage1>:

void showPage1(void){
 8005498:	b580      	push	{r7, lr}
 800549a:	b092      	sub	sp, #72	; 0x48
 800549c:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 800549e:	2300      	movs	r3, #0
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	615a      	str	r2, [r3, #20]
 80054b4:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80054b6:	2300      	movs	r3, #0
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	611a      	str	r2, [r3, #16]
 80054c8:	615a      	str	r2, [r3, #20]
 80054ca:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <showPage1+0xa0>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b19      	ldr	r3, [pc, #100]	; (8005538 <showPage1+0xa0>)
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <showPage1+0xa0>)
 80054da:	789b      	ldrb	r3, [r3, #2]
 80054dc:	4638      	mov	r0, r7
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	460b      	mov	r3, r1
 80054e2:	4916      	ldr	r1, [pc, #88]	; (800553c <showPage1+0xa4>)
 80054e4:	f00b f91a 	bl	801071c <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80054e8:	463a      	mov	r2, r7
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <showPage1+0xa8>)
 80054ec:	210b      	movs	r1, #11
 80054ee:	200e      	movs	r0, #14
 80054f0:	f7fd fc6e 	bl	8002dd0 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 80054f4:	2301      	movs	r3, #1
 80054f6:	2227      	movs	r2, #39	; 0x27
 80054f8:	2106      	movs	r1, #6
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fd fc96 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8005500:	2301      	movs	r3, #1
 8005502:	2228      	movs	r2, #40	; 0x28
 8005504:	2105      	movs	r1, #5
 8005506:	2002      	movs	r0, #2
 8005508:	f7fd fc90 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 800550c:	2301      	movs	r3, #1
 800550e:	2228      	movs	r2, #40	; 0x28
 8005510:	2105      	movs	r1, #5
 8005512:	2003      	movs	r0, #3
 8005514:	f7fd fc8a 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8005518:	2301      	movs	r3, #1
 800551a:	2227      	movs	r2, #39	; 0x27
 800551c:	2106      	movs	r1, #6
 800551e:	2004      	movs	r0, #4
 8005520:	f7fd fc84 	bl	8002e2c <lcdVLine>


		lcdPutStr(14, 60, btnStr, zekton24font);
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <showPage1+0xa8>)
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <showPage1+0xac>)
 8005528:	213c      	movs	r1, #60	; 0x3c
 800552a:	200e      	movs	r0, #14
 800552c:	f7fd fc50 	bl	8002dd0 <lcdPutStr>
}
 8005530:	bf00      	nop
 8005532:	3740      	adds	r7, #64	; 0x40
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20005540 	.word	0x20005540
 800553c:	08013be0 	.word	0x08013be0
 8005540:	0801a888 	.word	0x0801a888
 8005544:	20005bdc 	.word	0x20005bdc

08005548 <showPage2>:
void showPage2(void){
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800554e:	2300      	movs	r3, #0
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
 8005560:	615a      	str	r2, [r3, #20]
 8005562:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8005564:	463b      	mov	r3, r7
 8005566:	4913      	ldr	r1, [pc, #76]	; (80055b4 <showPage2+0x6c>)
 8005568:	4618      	mov	r0, r3
 800556a:	f00b f8d7 	bl	801071c <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800556e:	463a      	mov	r2, r7
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <showPage2+0x70>)
 8005572:	2132      	movs	r1, #50	; 0x32
 8005574:	200e      	movs	r0, #14
 8005576:	f7fd fc2b 	bl	8002dd0 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800557a:	2301      	movs	r3, #1
 800557c:	224e      	movs	r2, #78	; 0x4e
 800557e:	212d      	movs	r1, #45	; 0x2d
 8005580:	2001      	movs	r0, #1
 8005582:	f7fd fc53 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005586:	2301      	movs	r3, #1
 8005588:	224f      	movs	r2, #79	; 0x4f
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	2002      	movs	r0, #2
 800558e:	f7fd fc4d 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005592:	2301      	movs	r3, #1
 8005594:	224f      	movs	r2, #79	; 0x4f
 8005596:	212c      	movs	r1, #44	; 0x2c
 8005598:	2003      	movs	r0, #3
 800559a:	f7fd fc47 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800559e:	2301      	movs	r3, #1
 80055a0:	224e      	movs	r2, #78	; 0x4e
 80055a2:	212d      	movs	r1, #45	; 0x2d
 80055a4:	2004      	movs	r0, #4
 80055a6:	f7fd fc41 	bl	8002e2c <lcdVLine>
}
 80055aa:	bf00      	nop
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	08013bf0 	.word	0x08013bf0
 80055b8:	0801a888 	.word	0x0801a888

080055bc <showPage3>:
void showPage3(void){
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80055c2:	2300      	movs	r3, #0
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80055d8:	463b      	mov	r3, r7
 80055da:	4913      	ldr	r1, [pc, #76]	; (8005628 <showPage3+0x6c>)
 80055dc:	4618      	mov	r0, r3
 80055de:	f00b f89d 	bl	801071c <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80055e2:	463a      	mov	r2, r7
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <showPage3+0x70>)
 80055e6:	2100      	movs	r1, #0
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7fd fbf1 	bl	8002dd0 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80055ee:	2301      	movs	r3, #1
 80055f0:	2275      	movs	r2, #117	; 0x75
 80055f2:	2154      	movs	r1, #84	; 0x54
 80055f4:	2001      	movs	r0, #1
 80055f6:	f7fd fc19 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80055fa:	2301      	movs	r3, #1
 80055fc:	2276      	movs	r2, #118	; 0x76
 80055fe:	2153      	movs	r1, #83	; 0x53
 8005600:	2002      	movs	r0, #2
 8005602:	f7fd fc13 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8005606:	2301      	movs	r3, #1
 8005608:	2276      	movs	r2, #118	; 0x76
 800560a:	2153      	movs	r1, #83	; 0x53
 800560c:	2003      	movs	r0, #3
 800560e:	f7fd fc0d 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8005612:	2301      	movs	r3, #1
 8005614:	2275      	movs	r2, #117	; 0x75
 8005616:	2154      	movs	r1, #84	; 0x54
 8005618:	2004      	movs	r0, #4
 800561a:	f7fd fc07 	bl	8002e2c <lcdVLine>
}
 800561e:	bf00      	nop
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	08013bf4 	.word	0x08013bf4
 800562c:	0801a888 	.word	0x0801a888

08005630 <showPage4>:
void showPage4(void){
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005636:	2300      	movs	r3, #0
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
 8005648:	615a      	str	r2, [r3, #20]
 800564a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 800564c:	463b      	mov	r3, r7
 800564e:	4913      	ldr	r1, [pc, #76]	; (800569c <showPage4+0x6c>)
 8005650:	4618      	mov	r0, r3
 8005652:	f00b f863 	bl	801071c <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8005656:	463a      	mov	r2, r7
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <showPage4+0x70>)
 800565a:	2100      	movs	r1, #0
 800565c:	2000      	movs	r0, #0
 800565e:	f7fd fbb7 	bl	8002dd0 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005662:	2301      	movs	r3, #1
 8005664:	229c      	movs	r2, #156	; 0x9c
 8005666:	217b      	movs	r1, #123	; 0x7b
 8005668:	2001      	movs	r0, #1
 800566a:	f7fd fbdf 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800566e:	2301      	movs	r3, #1
 8005670:	229d      	movs	r2, #157	; 0x9d
 8005672:	217a      	movs	r1, #122	; 0x7a
 8005674:	2002      	movs	r0, #2
 8005676:	f7fd fbd9 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800567a:	2301      	movs	r3, #1
 800567c:	229d      	movs	r2, #157	; 0x9d
 800567e:	217a      	movs	r1, #122	; 0x7a
 8005680:	2003      	movs	r0, #3
 8005682:	f7fd fbd3 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005686:	2301      	movs	r3, #1
 8005688:	229c      	movs	r2, #156	; 0x9c
 800568a:	217b      	movs	r1, #123	; 0x7b
 800568c:	2004      	movs	r0, #4
 800568e:	f7fd fbcd 	bl	8002e2c <lcdVLine>
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08013c00 	.word	0x08013c00
 80056a0:	0801a888 	.word	0x0801a888

080056a4 <showPage5>:
void showPage5(void){
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80056aa:	2300      	movs	r3, #0
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	611a      	str	r2, [r3, #16]
 80056bc:	615a      	str	r2, [r3, #20]
 80056be:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 80056c0:	463b      	mov	r3, r7
 80056c2:	4925      	ldr	r1, [pc, #148]	; (8005758 <showPage5+0xb4>)
 80056c4:	4618      	mov	r0, r3
 80056c6:	f00b f829 	bl	801071c <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 80056ca:	463a      	mov	r2, r7
 80056cc:	4b23      	ldr	r3, [pc, #140]	; (800575c <showPage5+0xb8>)
 80056ce:	2100      	movs	r1, #0
 80056d0:	200a      	movs	r0, #10
 80056d2:	f7fd fb7d 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80056d6:	463a      	mov	r2, r7
 80056d8:	4b21      	ldr	r3, [pc, #132]	; (8005760 <showPage5+0xbc>)
 80056da:	210f      	movs	r1, #15
 80056dc:	200a      	movs	r0, #10
 80056de:	f7fd fb77 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80056e2:	463a      	mov	r2, r7
 80056e4:	4b1f      	ldr	r3, [pc, #124]	; (8005764 <showPage5+0xc0>)
 80056e6:	2132      	movs	r1, #50	; 0x32
 80056e8:	200a      	movs	r0, #10
 80056ea:	f7fd fb71 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80056ee:	463a      	mov	r2, r7
 80056f0:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <showPage5+0xc4>)
 80056f2:	213c      	movs	r1, #60	; 0x3c
 80056f4:	200a      	movs	r0, #10
 80056f6:	f7fd fb6b 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80056fa:	463a      	mov	r2, r7
 80056fc:	4b1b      	ldr	r3, [pc, #108]	; (800576c <showPage5+0xc8>)
 80056fe:	215a      	movs	r1, #90	; 0x5a
 8005700:	200a      	movs	r0, #10
 8005702:	f7fd fb65 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8005706:	463a      	mov	r2, r7
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <showPage5+0xcc>)
 800570a:	2178      	movs	r1, #120	; 0x78
 800570c:	200a      	movs	r0, #10
 800570e:	f7fd fb5f 	bl	8002dd0 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8005712:	463a      	mov	r2, r7
 8005714:	4b17      	ldr	r3, [pc, #92]	; (8005774 <showPage5+0xd0>)
 8005716:	2196      	movs	r1, #150	; 0x96
 8005718:	200a      	movs	r0, #10
 800571a:	f7fd fb59 	bl	8002dd0 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800571e:	2301      	movs	r3, #1
 8005720:	22c3      	movs	r2, #195	; 0xc3
 8005722:	21a2      	movs	r1, #162	; 0xa2
 8005724:	2001      	movs	r0, #1
 8005726:	f7fd fb81 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 800572a:	2301      	movs	r3, #1
 800572c:	22c4      	movs	r2, #196	; 0xc4
 800572e:	21a1      	movs	r1, #161	; 0xa1
 8005730:	2002      	movs	r0, #2
 8005732:	f7fd fb7b 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005736:	2301      	movs	r3, #1
 8005738:	22c4      	movs	r2, #196	; 0xc4
 800573a:	21a1      	movs	r1, #161	; 0xa1
 800573c:	2003      	movs	r0, #3
 800573e:	f7fd fb75 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8005742:	2301      	movs	r3, #1
 8005744:	22c3      	movs	r2, #195	; 0xc3
 8005746:	21a2      	movs	r1, #162	; 0xa2
 8005748:	2004      	movs	r0, #4
 800574a:	f7fd fb6f 	bl	8002e2c <lcdVLine>
}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	08013c0c 	.word	0x08013c0c
 800575c:	08018778 	.word	0x08018778
 8005760:	080192c0 	.word	0x080192c0
 8005764:	08015d90 	.word	0x08015d90
 8005768:	0801620c 	.word	0x0801620c
 800576c:	08017268 	.word	0x08017268
 8005770:	08017cf0 	.word	0x08017cf0
 8005774:	0801a888 	.word	0x0801a888

08005778 <showPage6>:
void showPage6(void){
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800577e:	2301      	movs	r3, #1
 8005780:	22ea      	movs	r2, #234	; 0xea
 8005782:	21c9      	movs	r1, #201	; 0xc9
 8005784:	2001      	movs	r0, #1
 8005786:	f7fd fb51 	bl	8002e2c <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800578a:	2301      	movs	r3, #1
 800578c:	22eb      	movs	r2, #235	; 0xeb
 800578e:	21c8      	movs	r1, #200	; 0xc8
 8005790:	2002      	movs	r0, #2
 8005792:	f7fd fb4b 	bl	8002e2c <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005796:	2301      	movs	r3, #1
 8005798:	22eb      	movs	r2, #235	; 0xeb
 800579a:	21c8      	movs	r1, #200	; 0xc8
 800579c:	2003      	movs	r0, #3
 800579e:	f7fd fb45 	bl	8002e2c <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80057a2:	2301      	movs	r3, #1
 80057a4:	22ea      	movs	r2, #234	; 0xea
 80057a6:	21c9      	movs	r1, #201	; 0xc9
 80057a8:	2004      	movs	r0, #4
 80057aa:	f7fd fb3f 	bl	8002e2c <lcdVLine>
		lcdRect(0,399,25,80,1);
 80057ae:	2301      	movs	r3, #1
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	2350      	movs	r3, #80	; 0x50
 80057b4:	2219      	movs	r2, #25
 80057b6:	f240 118f 	movw	r1, #399	; 0x18f
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fe f8d4 	bl	8003968 <lcdRect>
		lcdRect(0,399,120,180,1);
 80057c0:	2301      	movs	r3, #1
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	23b4      	movs	r3, #180	; 0xb4
 80057c6:	2278      	movs	r2, #120	; 0x78
 80057c8:	f240 118f 	movw	r1, #399	; 0x18f
 80057cc:	2000      	movs	r0, #0
 80057ce:	f7fe f8cb 	bl	8003968 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80057d2:	2301      	movs	r3, #1
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	2303      	movs	r3, #3
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2332      	movs	r3, #50	; 0x32
 80057e0:	220a      	movs	r2, #10
 80057e2:	2132      	movs	r1, #50	; 0x32
 80057e4:	200a      	movs	r0, #10
 80057e6:	f7fe fae4 	bl	8003db2 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80057ea:	2301      	movs	r3, #1
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	2301      	movs	r3, #1
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2303      	movs	r3, #3
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2332      	movs	r3, #50	; 0x32
 80057f8:	220a      	movs	r2, #10
 80057fa:	2164      	movs	r1, #100	; 0x64
 80057fc:	203c      	movs	r0, #60	; 0x3c
 80057fe:	f7fe fad8 	bl	8003db2 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8005802:	2301      	movs	r3, #1
 8005804:	9302      	str	r3, [sp, #8]
 8005806:	2302      	movs	r3, #2
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	2303      	movs	r3, #3
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2332      	movs	r3, #50	; 0x32
 8005810:	220a      	movs	r2, #10
 8005812:	2196      	movs	r1, #150	; 0x96
 8005814:	206e      	movs	r0, #110	; 0x6e
 8005816:	f7fe facc 	bl	8003db2 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 800581a:	2301      	movs	r3, #1
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	2303      	movs	r3, #3
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	2303      	movs	r3, #3
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2332      	movs	r3, #50	; 0x32
 8005828:	220a      	movs	r2, #10
 800582a:	21c8      	movs	r1, #200	; 0xc8
 800582c:	20a0      	movs	r0, #160	; 0xa0
 800582e:	f7fe fac0 	bl	8003db2 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8005832:	2301      	movs	r3, #1
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	2304      	movs	r3, #4
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	2303      	movs	r3, #3
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2332      	movs	r3, #50	; 0x32
 8005840:	220a      	movs	r2, #10
 8005842:	21fa      	movs	r1, #250	; 0xfa
 8005844:	20d2      	movs	r0, #210	; 0xd2
 8005846:	f7fe fab4 	bl	8003db2 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 800584a:	2301      	movs	r3, #1
 800584c:	9302      	str	r3, [sp, #8]
 800584e:	2305      	movs	r3, #5
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	2303      	movs	r3, #3
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	2332      	movs	r3, #50	; 0x32
 8005858:	220a      	movs	r2, #10
 800585a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800585e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005862:	f7fe faa6 	bl	8003db2 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005866:	2301      	movs	r3, #1
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	2306      	movs	r3, #6
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	2303      	movs	r3, #3
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	2332      	movs	r3, #50	; 0x32
 8005874:	220a      	movs	r2, #10
 8005876:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800587a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800587e:	f7fe fa98 	bl	8003db2 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8005882:	2301      	movs	r3, #1
 8005884:	9302      	str	r3, [sp, #8]
 8005886:	2307      	movs	r3, #7
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2303      	movs	r3, #3
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2364      	movs	r3, #100	; 0x64
 8005890:	223c      	movs	r2, #60	; 0x3c
 8005892:	2132      	movs	r1, #50	; 0x32
 8005894:	200a      	movs	r0, #10
 8005896:	f7fe fa8c 	bl	8003db2 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800589a:	2301      	movs	r3, #1
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	2308      	movs	r3, #8
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	2303      	movs	r3, #3
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2364      	movs	r3, #100	; 0x64
 80058a8:	223c      	movs	r2, #60	; 0x3c
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	203c      	movs	r0, #60	; 0x3c
 80058ae:	f7fe fa80 	bl	8003db2 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 80058b2:	2301      	movs	r3, #1
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	2309      	movs	r3, #9
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	2303      	movs	r3, #3
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2364      	movs	r3, #100	; 0x64
 80058c0:	223c      	movs	r2, #60	; 0x3c
 80058c2:	2196      	movs	r1, #150	; 0x96
 80058c4:	206e      	movs	r0, #110	; 0x6e
 80058c6:	f7fe fa74 	bl	8003db2 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 80058ca:	2301      	movs	r3, #1
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	230a      	movs	r3, #10
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	2303      	movs	r3, #3
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2364      	movs	r3, #100	; 0x64
 80058d8:	223c      	movs	r2, #60	; 0x3c
 80058da:	21c8      	movs	r1, #200	; 0xc8
 80058dc:	20a0      	movs	r0, #160	; 0xa0
 80058de:	f7fe fa68 	bl	8003db2 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80058e2:	2301      	movs	r3, #1
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	230b      	movs	r3, #11
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	2303      	movs	r3, #3
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2364      	movs	r3, #100	; 0x64
 80058f0:	223c      	movs	r2, #60	; 0x3c
 80058f2:	21fa      	movs	r1, #250	; 0xfa
 80058f4:	20d2      	movs	r0, #210	; 0xd2
 80058f6:	f7fe fa5c 	bl	8003db2 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80058fa:	2301      	movs	r3, #1
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	230c      	movs	r3, #12
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	2303      	movs	r3, #3
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2364      	movs	r3, #100	; 0x64
 8005908:	223c      	movs	r2, #60	; 0x3c
 800590a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800590e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005912:	f7fe fa4e 	bl	8003db2 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8005916:	2301      	movs	r3, #1
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	230d      	movs	r3, #13
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	2303      	movs	r3, #3
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2364      	movs	r3, #100	; 0x64
 8005924:	223c      	movs	r2, #60	; 0x3c
 8005926:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800592a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800592e:	f7fe fa40 	bl	8003db2 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8005932:	2301      	movs	r3, #1
 8005934:	9302      	str	r3, [sp, #8]
 8005936:	230e      	movs	r3, #14
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	2303      	movs	r3, #3
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2396      	movs	r3, #150	; 0x96
 8005940:	226e      	movs	r2, #110	; 0x6e
 8005942:	2132      	movs	r1, #50	; 0x32
 8005944:	200a      	movs	r0, #10
 8005946:	f7fe fa34 	bl	8003db2 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 800594a:	2301      	movs	r3, #1
 800594c:	9302      	str	r3, [sp, #8]
 800594e:	230f      	movs	r3, #15
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	2303      	movs	r3, #3
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	2396      	movs	r3, #150	; 0x96
 8005958:	226e      	movs	r2, #110	; 0x6e
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	203c      	movs	r0, #60	; 0x3c
 800595e:	f7fe fa28 	bl	8003db2 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8005962:	2301      	movs	r3, #1
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	2310      	movs	r3, #16
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2303      	movs	r3, #3
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2396      	movs	r3, #150	; 0x96
 8005970:	226e      	movs	r2, #110	; 0x6e
 8005972:	2196      	movs	r1, #150	; 0x96
 8005974:	206e      	movs	r0, #110	; 0x6e
 8005976:	f7fe fa1c 	bl	8003db2 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 800597a:	2301      	movs	r3, #1
 800597c:	9302      	str	r3, [sp, #8]
 800597e:	2311      	movs	r3, #17
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	2303      	movs	r3, #3
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2396      	movs	r3, #150	; 0x96
 8005988:	226e      	movs	r2, #110	; 0x6e
 800598a:	21c8      	movs	r1, #200	; 0xc8
 800598c:	20a0      	movs	r0, #160	; 0xa0
 800598e:	f7fe fa10 	bl	8003db2 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005992:	2301      	movs	r3, #1
 8005994:	9302      	str	r3, [sp, #8]
 8005996:	2312      	movs	r3, #18
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	2303      	movs	r3, #3
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2396      	movs	r3, #150	; 0x96
 80059a0:	226e      	movs	r2, #110	; 0x6e
 80059a2:	21fa      	movs	r1, #250	; 0xfa
 80059a4:	20d2      	movs	r0, #210	; 0xd2
 80059a6:	f7fe fa04 	bl	8003db2 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 80059aa:	2301      	movs	r3, #1
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	2313      	movs	r3, #19
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	2303      	movs	r3, #3
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2396      	movs	r3, #150	; 0x96
 80059b8:	226e      	movs	r2, #110	; 0x6e
 80059ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80059be:	f44f 7082 	mov.w	r0, #260	; 0x104
 80059c2:	f7fe f9f6 	bl	8003db2 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 80059c6:	2301      	movs	r3, #1
 80059c8:	9302      	str	r3, [sp, #8]
 80059ca:	2314      	movs	r3, #20
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	2303      	movs	r3, #3
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	2396      	movs	r3, #150	; 0x96
 80059d4:	226e      	movs	r2, #110	; 0x6e
 80059d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059da:	f44f 709b 	mov.w	r0, #310	; 0x136
 80059de:	f7fe f9e8 	bl	8003db2 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 80059e2:	2304      	movs	r3, #4
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2301      	movs	r3, #1
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	23c8      	movs	r3, #200	; 0xc8
 80059ec:	22a0      	movs	r2, #160	; 0xa0
 80059ee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059f2:	200a      	movs	r0, #10
 80059f4:	f7fe f9dd 	bl	8003db2 <lcdRect2>
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <showPage>:

void showPage(uint8_t pageNum){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	d821      	bhi.n	8005a54 <showPage+0x54>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <showPage+0x18>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a37 	.word	0x08005a37
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a43 	.word	0x08005a43
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005a4f 	.word	0x08005a4f
	case 0:
		showPage1();
 8005a30:	f7ff fd32 	bl	8005498 <showPage1>
		break;
 8005a34:	e00e      	b.n	8005a54 <showPage+0x54>
	case 1:
		showPage2();
 8005a36:	f7ff fd87 	bl	8005548 <showPage2>
		break;
 8005a3a:	e00b      	b.n	8005a54 <showPage+0x54>
	case 2:
		showPage3();
 8005a3c:	f7ff fdbe 	bl	80055bc <showPage3>
		break;
 8005a40:	e008      	b.n	8005a54 <showPage+0x54>
	case 3:
		showPage4();
 8005a42:	f7ff fdf5 	bl	8005630 <showPage4>
		break;
 8005a46:	e005      	b.n	8005a54 <showPage+0x54>
	case 4:
		showPage5();
 8005a48:	f7ff fe2c 	bl	80056a4 <showPage5>
		break;
 8005a4c:	e002      	b.n	8005a54 <showPage+0x54>
	case 5:
		showPage6();
 8005a4e:	f7ff fe93 	bl	8005778 <showPage6>
		break;
 8005a52:	bf00      	nop
	}
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <screentestSetup>:

void screentestSetup(void){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005a60:	f7ff fcf6 	bl	8005450 <setDefaultClbcks>
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <screentestMain>:

void screentestMain(void){
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005a6e:	2300      	movs	r3, #0
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	611a      	str	r2, [r3, #16]
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <screentestMain+0x30>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ffb9 	bl	8005a00 <showPage>

}
 8005a8e:	bf00      	nop
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20005bd8 	.word	0x20005bd8

08005a9c <switchStwView>:
#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

uint8_t stwSubView = 0;
void switchStwView(void){
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
//	if(stwSubView<3){
//		stwSubView++;
//	} else {
//		stwSubView = 0;
//	}
		stwSubView++;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <switchStwView+0x1c>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <switchStwView+0x1c>)
 8005aaa:	701a      	strb	r2, [r3, #0]
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20005bfb 	.word	0x20005bfb

08005abc <startStopwatch>:

void startStopwatch(){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
	stwStart();
 8005ac0:	f7fe feb8 	bl	8004834 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005ac4:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <startStopwatch+0x18>)
 8005ac6:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <startStopwatch+0x1c>)
 8005ac8:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005aca:	4b04      	ldr	r3, [pc, #16]	; (8005adc <startStopwatch+0x20>)
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <startStopwatch+0x24>)
 8005ace:	611a      	str	r2, [r3, #16]
}
 8005ad0:	bf00      	nop
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20002498 	.word	0x20002498
 8005ad8:	08005ae5 	.word	0x08005ae5
 8005adc:	20002570 	.word	0x20002570
 8005ae0:	08005b19 	.word	0x08005b19

08005ae4 <stopStopwatch>:
void stopStopwatch(){
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	stwStop();
 8005ae8:	f7fe fec4 	bl	8004874 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <stopStopwatch+0x18>)
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <stopStopwatch+0x1c>)
 8005af0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <stopStopwatch+0x20>)
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <stopStopwatch+0x24>)
 8005af6:	611a      	str	r2, [r3, #16]
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20002498 	.word	0x20002498
 8005b00:	08005abd 	.word	0x08005abd
 8005b04:	20002570 	.word	0x20002570
 8005b08:	08005b0d 	.word	0x08005b0d

08005b0c <resetStopwatch>:
void resetStopwatch(){
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	stwClear();
 8005b10:	f7fe febe 	bl	8004890 <stwClear>
//	stwT.clear();
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <saveStopwatch>:
void saveStopwatch(){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	stwSave();
 8005b1c:	f7fe ff2c 	bl	8004978 <stwSave>
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <setDefaultClbcks+0x48>)
 8005b2a:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <setDefaultClbcks+0x4c>)
 8005b2c:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005b2e:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <setDefaultClbcks+0x50>)
 8005b30:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <setDefaultClbcks+0x54>)
 8005b32:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <setDefaultClbcks+0x58>)
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <setDefaultClbcks+0x5c>)
 8005b38:	611a      	str	r2, [r3, #16]

	btn_B1.onSinglePressHandler = &switchStwView;
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <setDefaultClbcks+0x60>)
 8005b3c:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <setDefaultClbcks+0x64>)
 8005b3e:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <setDefaultClbcks+0x68>)
 8005b42:	791b      	ldrb	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <setDefaultClbcks+0x6c>)
 8005b4a:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <setDefaultClbcks+0x70>)
 8005b4c:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <setDefaultClbcks+0x74>)
 8005b50:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <setDefaultClbcks+0x78>)
 8005b52:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005b54:	e005      	b.n	8005b62 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <setDefaultClbcks+0x6c>)
 8005b58:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <setDefaultClbcks+0x7c>)
 8005b5a:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <setDefaultClbcks+0x74>)
 8005b5e:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <setDefaultClbcks+0x80>)
 8005b60:	611a      	str	r2, [r3, #16]
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	200025b8 	.word	0x200025b8
 8005b70:	080027e5 	.word	0x080027e5
 8005b74:	20002450 	.word	0x20002450
 8005b78:	080027c5 	.word	0x080027c5
 8005b7c:	200024e0 	.word	0x200024e0
 8005b80:	080027d5 	.word	0x080027d5
 8005b84:	20002528 	.word	0x20002528
 8005b88:	08005a9d 	.word	0x08005a9d
 8005b8c:	20000088 	.word	0x20000088
 8005b90:	20002498 	.word	0x20002498
 8005b94:	08005ae5 	.word	0x08005ae5
 8005b98:	20002570 	.word	0x20002570
 8005b9c:	08005b19 	.word	0x08005b19
 8005ba0:	08005abd 	.word	0x08005abd
 8005ba4:	08005b0d 	.word	0x08005b0d

08005ba8 <stwSetup>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};
struct stopwatch_t stw_lap_val = {0, 0, 0, 0};

void stwSetup(void){
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005bac:	f7ff ffba 	bl	8005b24 <setDefaultClbcks>
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <stwMain>:
// position of the top of the stopwatch total value
uint8_t stw_time_y_pos = 40;

// functions to execute when menu item entered
void stwMain(void){
 8005bb4:	b590      	push	{r4, r7, lr}
 8005bb6:	b091      	sub	sp, #68	; 0x44
 8005bb8:	af04      	add	r7, sp, #16
//	lcdPutIcon(2, 200, accept_icon);
//	lcdPutIcon(370, 106, play_pause_icon);
//	lcdPutIcon(2, 106, cancel_icon);

	// statusbar
	lcdPutIcon(320, 5, full_battery_icon);
 8005bba:	4aa4      	ldr	r2, [pc, #656]	; (8005e4c <stwMain+0x298>)
 8005bbc:	2105      	movs	r1, #5
 8005bbe:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005bc2:	f7fd f83d 	bl	8002c40 <lcdPutIcon>
	char timeString[6] = {0};
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	2300      	movs	r3, #0
 8005bcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sprintf(&timeString, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005bce:	4ba0      	ldr	r3, [pc, #640]	; (8005e50 <stwMain+0x29c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4b9e      	ldr	r3, [pc, #632]	; (8005e50 <stwMain+0x29c>)
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005bdc:	499d      	ldr	r1, [pc, #628]	; (8005e54 <stwMain+0x2a0>)
 8005bde:	f00a fd9d 	bl	801071c <siprintf>
	lcdPutStr(400 - 5 - (*font_12_zekton.font_Width) * strlen(timeString), 5, timeString, font_12_zekton);
 8005be2:	2309      	movs	r3, #9
 8005be4:	b29c      	uxth	r4, r3
 8005be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fa fb00 	bl	80001f0 <strlen>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	fb14 f303 	smulbb	r3, r4, r3
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8005bfe:	3301      	adds	r3, #1
 8005c00:	b298      	uxth	r0, r3
 8005c02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c06:	4b94      	ldr	r3, [pc, #592]	; (8005e58 <stwMain+0x2a4>)
 8005c08:	2105      	movs	r1, #5
 8005c0a:	f7fd f8e1 	bl	8002dd0 <lcdPutStr>
	char tempStr2[30] = {0};
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	615a      	str	r2, [r3, #20]
 8005c24:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "Stopwatch");
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	498c      	ldr	r1, [pc, #560]	; (8005e5c <stwMain+0x2a8>)
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00a fd75 	bl	801071c <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 8005c32:	f107 0208 	add.w	r2, r7, #8
 8005c36:	4b88      	ldr	r3, [pc, #544]	; (8005e58 <stwMain+0x2a4>)
 8005c38:	2105      	movs	r1, #5
 8005c3a:	2005      	movs	r0, #5
 8005c3c:	f7fd f8c8 	bl	8002dd0 <lcdPutStr>

	// update stopwatch value
	getStw(&stw_val, &stwS);
 8005c40:	4987      	ldr	r1, [pc, #540]	; (8005e60 <stwMain+0x2ac>)
 8005c42:	4888      	ldr	r0, [pc, #544]	; (8005e64 <stwMain+0x2b0>)
 8005c44:	f7fe fe40 	bl	80048c8 <getStw>

	// main STW view
	//show hours if exist
	if(stw_val.hours != 0){
 8005c48:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <stwMain+0x2b0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d025      	beq.n	8005c9c <stwMain+0xe8>
//	if(1){
		sprintf(&tempStr2, "%02dh %02d'%02d\"", stw_val.hours, stw_val.min, stw_val.sec);
 8005c50:	4b84      	ldr	r3, [pc, #528]	; (8005e64 <stwMain+0x2b0>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b83      	ldr	r3, [pc, #524]	; (8005e64 <stwMain+0x2b0>)
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4b81      	ldr	r3, [pc, #516]	; (8005e64 <stwMain+0x2b0>)
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	f107 0008 	add.w	r0, r7, #8
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	460b      	mov	r3, r1
 8005c68:	497f      	ldr	r1, [pc, #508]	; (8005e68 <stwMain+0x2b4>)
 8005c6a:	f00a fd57 	bl	801071c <siprintf>
		lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005c6e:	2322      	movs	r3, #34	; 0x22
 8005c70:	b29c      	uxth	r4, r3
 8005c72:	f107 0308 	add.w	r3, r7, #8
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa faba 	bl	80001f0 <strlen>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	fb14 f303 	smulbb	r3, r4, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005c8a:	b298      	uxth	r0, r3
 8005c8c:	4b77      	ldr	r3, [pc, #476]	; (8005e6c <stwMain+0x2b8>)
 8005c8e:	7819      	ldrb	r1, [r3, #0]
 8005c90:	f107 0208 	add.w	r2, r7, #8
 8005c94:	4b76      	ldr	r3, [pc, #472]	; (8005e70 <stwMain+0x2bc>)
 8005c96:	f7fd f89b 	bl	8002dd0 <lcdPutStr>
 8005c9a:	e025      	b.n	8005ce8 <stwMain+0x134>
//	} else if(stw_val.min != 0){
	} else {
		sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8005c9c:	4b71      	ldr	r3, [pc, #452]	; (8005e64 <stwMain+0x2b0>)
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b70      	ldr	r3, [pc, #448]	; (8005e64 <stwMain+0x2b0>)
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4b6e      	ldr	r3, [pc, #440]	; (8005e64 <stwMain+0x2b0>)
 8005caa:	78db      	ldrb	r3, [r3, #3]
 8005cac:	f107 0008 	add.w	r0, r7, #8
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	496f      	ldr	r1, [pc, #444]	; (8005e74 <stwMain+0x2c0>)
 8005cb6:	f00a fd31 	bl	801071c <siprintf>
		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005cba:	2322      	movs	r3, #34	; 0x22
 8005cbc:	b29c      	uxth	r4, r3
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fa fa94 	bl	80001f0 <strlen>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	fb14 f303 	smulbb	r3, r4, r3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b298      	uxth	r0, r3
 8005cda:	4b64      	ldr	r3, [pc, #400]	; (8005e6c <stwMain+0x2b8>)
 8005cdc:	7819      	ldrb	r1, [r3, #0]
 8005cde:	f107 0208 	add.w	r2, r7, #8
 8005ce2:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <stwMain+0x2bc>)
 8005ce4:	f7fd f874 	bl	8002dd0 <lcdPutStr>
//		sprintf(&tempStr2, "%02d.%02d\"", stw_val.sec, stw_val.csec);
//		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
//	}

	stw_counter_t lapTimeCnt;
	switch(stwSubView){
 8005ce8:	4b63      	ldr	r3, [pc, #396]	; (8005e78 <stwMain+0x2c4>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <stwMain+0x144>
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f000 80a7 	beq.w	8005e44 <stwMain+0x290>
 8005cf6:	e117      	b.n	8005f28 <stwMain+0x374>
//		case 0:
//			sprintf(&tempStr2, "Stopwatch ready", getLapNum());
//			lcdPutStr(55, 100, tempStr2, zekton24font);
//			break;
		case 0:
			if(getLapNum()>0){
 8005cf8:	f7fe fd90 	bl	800481c <getLapNum>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dd3e      	ble.n	8005d80 <stwMain+0x1cc>
				sprintf(&tempStr2, "LAP %d", getLapNum());
 8005d02:	f7fe fd8b 	bl	800481c <getLapNum>
 8005d06:	4602      	mov	r2, r0
 8005d08:	f107 0308 	add.w	r3, r7, #8
 8005d0c:	495b      	ldr	r1, [pc, #364]	; (8005e7c <stwMain+0x2c8>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f00a fd04 	bl	801071c <siprintf>
				lcdPutStr(250, 112, tempStr2, font_12_zekton);
 8005d14:	f107 0208 	add.w	r2, r7, #8
 8005d18:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <stwMain+0x2a4>)
 8005d1a:	2170      	movs	r1, #112	; 0x70
 8005d1c:	20fa      	movs	r0, #250	; 0xfa
 8005d1e:	f7fd f857 	bl	8002dd0 <lcdPutStr>
				counterDiff(&lapTimeCnt, stwS.cnt, &stw_splits[getLapNum()-1]);
 8005d22:	4b4f      	ldr	r3, [pc, #316]	; (8005e60 <stwMain+0x2ac>)
 8005d24:	681c      	ldr	r4, [r3, #0]
 8005d26:	f7fe fd79 	bl	800481c <getLapNum>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4a53      	ldr	r2, [pc, #332]	; (8005e80 <stwMain+0x2cc>)
 8005d32:	441a      	add	r2, r3
 8005d34:	463b      	mov	r3, r7
 8005d36:	4621      	mov	r1, r4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fe5f 	bl	80049fc <counterDiff>
				counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005d3e:	463b      	mov	r3, r7
 8005d40:	4619      	mov	r1, r3
 8005d42:	4850      	ldr	r0, [pc, #320]	; (8005e84 <stwMain+0x2d0>)
 8005d44:	f7fe fe92 	bl	8004a6c <counterToStopwatch>
				stwprintf(&tempStr2, &stw_lap_val);
 8005d48:	f107 0308 	add.w	r3, r7, #8
 8005d4c:	494d      	ldr	r1, [pc, #308]	; (8005e84 <stwMain+0x2d0>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fee0 	bl	8004b14 <stwprintf>
				lcdPutStr(60, 100, tempStr2, zekton24font);
 8005d54:	f107 0208 	add.w	r2, r7, #8
 8005d58:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <stwMain+0x2d4>)
 8005d5a:	2164      	movs	r1, #100	; 0x64
 8005d5c:	203c      	movs	r0, #60	; 0x3c
 8005d5e:	f7fd f837 	bl	8002dd0 <lcdPutStr>
				lcdRoundedRect2(240, 305, 110, 124, 2, LCD_RECT_PATTERN_FILL, 0, 2);
 8005d62:	2302      	movs	r3, #2
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	2302      	movs	r3, #2
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	237c      	movs	r3, #124	; 0x7c
 8005d74:	226e      	movs	r2, #110	; 0x6e
 8005d76:	f240 1131 	movw	r1, #305	; 0x131
 8005d7a:	20f0      	movs	r0, #240	; 0xf0
 8005d7c:	f7fd fe19 	bl	80039b2 <lcdRoundedRect2>
			}
			for(uint8_t i = 1; i<=4; i++){
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d86:	e058      	b.n	8005e3a <stwMain+0x286>
				if(getLapNum()>i){
 8005d88:	f7fe fd48 	bl	800481c <getLapNum>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d92:	429a      	cmp	r2, r3
 8005d94:	dd4c      	ble.n	8005e30 <stwMain+0x27c>
					sprintf(&tempStr2, "LAP %d", getLapNum()-i);
 8005d96:	f7fe fd41 	bl	800481c <getLapNum>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	f107 0308 	add.w	r3, r7, #8
 8005da6:	4935      	ldr	r1, [pc, #212]	; (8005e7c <stwMain+0x2c8>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f00a fcb7 	bl	801071c <siprintf>
					lcdPutStr(250, 112+i*28, tempStr2, font_12_zekton);
 8005dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005db2:	461a      	mov	r2, r3
 8005db4:	00d2      	lsls	r2, r2, #3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	3370      	adds	r3, #112	; 0x70
 8005dbe:	b2d9      	uxtb	r1, r3
 8005dc0:	f107 0208 	add.w	r2, r7, #8
 8005dc4:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <stwMain+0x2a4>)
 8005dc6:	20fa      	movs	r0, #250	; 0xfa
 8005dc8:	f7fd f802 	bl	8002dd0 <lcdPutStr>
					counterDiff(&lapTimeCnt, &stw_splits[getLapNum()-i], &stw_splits[getLapNum()-1-i]);
 8005dcc:	f7fe fd26 	bl	800481c <getLapNum>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4a29      	ldr	r2, [pc, #164]	; (8005e80 <stwMain+0x2cc>)
 8005ddc:	189c      	adds	r4, r3, r2
 8005dde:	f7fe fd1d 	bl	800481c <getLapNum>
 8005de2:	4603      	mov	r3, r0
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4a24      	ldr	r2, [pc, #144]	; (8005e80 <stwMain+0x2cc>)
 8005df0:	441a      	add	r2, r3
 8005df2:	463b      	mov	r3, r7
 8005df4:	4621      	mov	r1, r4
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fe00 	bl	80049fc <counterDiff>
					counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4820      	ldr	r0, [pc, #128]	; (8005e84 <stwMain+0x2d0>)
 8005e02:	f7fe fe33 	bl	8004a6c <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	491e      	ldr	r1, [pc, #120]	; (8005e84 <stwMain+0x2d0>)
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fe81 	bl	8004b14 <stwprintf>
					lcdPutStr(60, 100+28*i, tempStr2, zekton24font);
 8005e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e16:	461a      	mov	r2, r3
 8005e18:	00d2      	lsls	r2, r2, #3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	3364      	adds	r3, #100	; 0x64
 8005e22:	b2d9      	uxtb	r1, r3
 8005e24:	f107 0208 	add.w	r2, r7, #8
 8005e28:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <stwMain+0x2d4>)
 8005e2a:	203c      	movs	r0, #60	; 0x3c
 8005e2c:	f7fc ffd0 	bl	8002dd0 <lcdPutStr>
			for(uint8_t i = 1; i<=4; i++){
 8005e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e34:	3301      	adds	r3, #1
 8005e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d9a2      	bls.n	8005d88 <stwMain+0x1d4>
				}
			}
			break;
 8005e42:	e075      	b.n	8005f30 <stwMain+0x37c>
		case 1:
			// split/lap table
			for(uint8_t i = 1; i<=5; i++){
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005e4a:	e068      	b.n	8005f1e <stwMain+0x36a>
 8005e4c:	0801c6f0 	.word	0x0801c6f0
 8005e50:	20005540 	.word	0x20005540
 8005e54:	08013cd4 	.word	0x08013cd4
 8005e58:	0801c728 	.word	0x0801c728
 8005e5c:	08013ce0 	.word	0x08013ce0
 8005e60:	20000088 	.word	0x20000088
 8005e64:	20005bfc 	.word	0x20005bfc
 8005e68:	08013cec 	.word	0x08013cec
 8005e6c:	2000009a 	.word	0x2000009a
 8005e70:	0801f018 	.word	0x0801f018
 8005e74:	08013d00 	.word	0x08013d00
 8005e78:	20005bfb 	.word	0x20005bfb
 8005e7c:	08013d10 	.word	0x08013d10
 8005e80:	200058f4 	.word	0x200058f4
 8005e84:	20005c00 	.word	0x20005c00
 8005e88:	0801d1b0 	.word	0x0801d1b0
				if(getLapNum()>i){
 8005e8c:	f7fe fcc6 	bl	800481c <getLapNum>
 8005e90:	4602      	mov	r2, r0
 8005e92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005e96:	429a      	cmp	r2, r3
 8005e98:	dd3c      	ble.n	8005f14 <stwMain+0x360>
					counterToStopwatch(&stw_lap_val, &stw_splits[getLapNum()-i]);
 8005e9a:	f7fe fcbf 	bl	800481c <getLapNum>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4a23      	ldr	r2, [pc, #140]	; (8005f38 <stwMain+0x384>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	4823      	ldr	r0, [pc, #140]	; (8005f3c <stwMain+0x388>)
 8005eb0:	f7fe fddc 	bl	8004a6c <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	4920      	ldr	r1, [pc, #128]	; (8005f3c <stwMain+0x388>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fe2a 	bl	8004b14 <stwprintf>
					lcdPutStr(60, 100+28*(i-1), tempStr2, zekton24font);
 8005ec0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	00d2      	lsls	r2, r2, #3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	3348      	adds	r3, #72	; 0x48
 8005ed0:	b2d9      	uxtb	r1, r3
 8005ed2:	f107 0208 	add.w	r2, r7, #8
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <stwMain+0x38c>)
 8005ed8:	203c      	movs	r0, #60	; 0x3c
 8005eda:	f7fc ff79 	bl	8002dd0 <lcdPutStr>

					sprintf(&tempStr2, "SPLIT %d", getLapNum()-i);
 8005ede:	f7fe fc9d 	bl	800481c <getLapNum>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4915      	ldr	r1, [pc, #84]	; (8005f44 <stwMain+0x390>)
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f00a fc13 	bl	801071c <siprintf>
					lcdPutStr(250, 112+(i-1)*28, tempStr2, font_12_zekton);
 8005ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005efa:	461a      	mov	r2, r3
 8005efc:	00d2      	lsls	r2, r2, #3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	3354      	adds	r3, #84	; 0x54
 8005f06:	b2d9      	uxtb	r1, r3
 8005f08:	f107 0208 	add.w	r2, r7, #8
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <stwMain+0x394>)
 8005f0e:	20fa      	movs	r0, #250	; 0xfa
 8005f10:	f7fc ff5e 	bl	8002dd0 <lcdPutStr>
			for(uint8_t i = 1; i<=5; i++){
 8005f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d9b2      	bls.n	8005e8c <stwMain+0x2d8>

				}
			}
			break;
 8005f26:	e003      	b.n	8005f30 <stwMain+0x37c>
		default:
			stwSubView = 0;
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <stwMain+0x398>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]





}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	3734      	adds	r7, #52	; 0x34
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}
 8005f38:	200058f4 	.word	0x200058f4
 8005f3c:	20005c00 	.word	0x20005c00
 8005f40:	0801d1b0 	.word	0x0801d1b0
 8005f44:	08013d18 	.word	0x08013d18
 8005f48:	0801c728 	.word	0x0801c728
 8005f4c:	20005bfb 	.word	0x20005bfb

08005f50 <add_counter>:
uint8_t shortPressCount = 0;
uint8_t longPressCount = 0;
uint8_t doublePressCount = 0;
uint8_t releaseCount = 0;

void add_counter(Button_Event event){
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
	switch (event) {
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d830      	bhi.n	8005fc2 <add_counter+0x72>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <add_counter+0x18>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f7d 	.word	0x08005f7d
 8005f6c:	08005f8b 	.word	0x08005f8b
 8005f70:	08005fb5 	.word	0x08005fb5
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005f99 	.word	0x08005f99
	        case BUTTON_EVENT_DOWN:
	        	singlePressCount++;
 8005f7c:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <add_counter+0x80>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <add_counter+0x80>)
 8005f86:	701a      	strb	r2, [r3, #0]
	            break;
 8005f88:	e01c      	b.n	8005fc4 <add_counter+0x74>
	        case BUTTON_EVENT_SHORT_PRESS:
	        	shortPressCount++;
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <add_counter+0x84>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <add_counter+0x84>)
 8005f94:	701a      	strb	r2, [r3, #0]
	            break;
 8005f96:	e015      	b.n	8005fc4 <add_counter+0x74>
	        case BUTTON_EVENT_DOUBLE_PRESS:
	        	doublePressCount++;
 8005f98:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <add_counter+0x88>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <add_counter+0x88>)
 8005fa2:	701a      	strb	r2, [r3, #0]
	            break;
 8005fa4:	e00e      	b.n	8005fc4 <add_counter+0x74>
	        case BUTTON_EVENT_LONG_PRESS:
	        	longPressCount++;
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <add_counter+0x8c>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <add_counter+0x8c>)
 8005fb0:	701a      	strb	r2, [r3, #0]
	            break;
 8005fb2:	e007      	b.n	8005fc4 <add_counter+0x74>
	        case BUTTON_EVENT_RELEASE:
	        	releaseCount++;
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <add_counter+0x90>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <add_counter+0x90>)
 8005fbe:	701a      	strb	r2, [r3, #0]
	            break;
 8005fc0:	e000      	b.n	8005fc4 <add_counter+0x74>
	        default:
	            break;
 8005fc2:	bf00      	nop
	    }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20005c04 	.word	0x20005c04
 8005fd4:	20005c05 	.word	0x20005c05
 8005fd8:	20005c07 	.word	0x20005c07
 8005fdc:	20005c06 	.word	0x20005c06
 8005fe0:	20005c08 	.word	0x20005c08

08005fe4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8005fe8:	4b08      	ldr	r3, [pc, #32]	; (800600c <setDefaultClbcks+0x28>)
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <setDefaultClbcks+0x2c>)
 8005fec:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <setDefaultClbcks+0x30>)
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <setDefaultClbcks+0x34>)
 8005ff2:	611a      	str	r2, [r3, #16]

	//new button handlers
	button_set_long_press_time(1, 500);
 8005ff4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fb fdcd 	bl	8001b98 <button_set_long_press_time>
	button_set_handler(1, add_counter, NULL);
 8005ffe:	2200      	movs	r2, #0
 8006000:	4906      	ldr	r1, [pc, #24]	; (800601c <setDefaultClbcks+0x38>)
 8006002:	2001      	movs	r0, #1
 8006004:	f7fb fde4 	bl	8001bd0 <button_set_handler>
}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20002450 	.word	0x20002450
 8006010:	080027c5 	.word	0x080027c5
 8006014:	200024e0 	.word	0x200024e0
 8006018:	080027d5 	.word	0x080027d5
 800601c:	08005f51 	.word	0x08005f51

08006020 <faceSetup>:
}
static void setDateAction(void){
	guiApplyView(&dateInputModule);
}

void faceSetup(void){
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006024:	f7ff ffde 	bl	8005fe4 <setDefaultClbcks>
}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}

0800602c <faceMain>:


void faceMain(void){
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b0b9      	sub	sp, #228	; 0xe4
 8006030:	af00      	add	r7, sp, #0

	char tempStr2[30] = {0};
 8006032:	2300      	movs	r3, #0
 8006034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006038:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	611a      	str	r2, [r3, #16]
 8006048:	615a      	str	r2, [r3, #20]
 800604a:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "short: %d, long: %d", shortPressCount, longPressCount);
 800604c:	4bad      	ldr	r3, [pc, #692]	; (8006304 <faceMain+0x2d8>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	4bad      	ldr	r3, [pc, #692]	; (8006308 <faceMain+0x2dc>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800605a:	49ac      	ldr	r1, [pc, #688]	; (800630c <faceMain+0x2e0>)
 800605c:	f00a fb5e 	bl	801071c <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 8006060:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006064:	4baa      	ldr	r3, [pc, #680]	; (8006310 <faceMain+0x2e4>)
 8006066:	2105      	movs	r1, #5
 8006068:	2005      	movs	r0, #5
 800606a:	f7fc feb1 	bl	8002dd0 <lcdPutStr>
	sprintf(&tempStr2, "double: %d, release: %d", doublePressCount, releaseCount);
 800606e:	4ba9      	ldr	r3, [pc, #676]	; (8006314 <faceMain+0x2e8>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	4ba8      	ldr	r3, [pc, #672]	; (8006318 <faceMain+0x2ec>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800607c:	49a7      	ldr	r1, [pc, #668]	; (800631c <faceMain+0x2f0>)
 800607e:	f00a fb4d 	bl	801071c <siprintf>
	lcdPutStr(5, 20, tempStr2, font_12_zekton);
 8006082:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006086:	4ba2      	ldr	r3, [pc, #648]	; (8006310 <faceMain+0x2e4>)
 8006088:	2114      	movs	r1, #20
 800608a:	2005      	movs	r0, #5
 800608c:	f7fc fea0 	bl	8002dd0 <lcdPutStr>
	sprintf(&tempStr2, "single: %d", singlePressCount);
 8006090:	4ba3      	ldr	r3, [pc, #652]	; (8006320 <faceMain+0x2f4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800609a:	49a2      	ldr	r1, [pc, #648]	; (8006324 <faceMain+0x2f8>)
 800609c:	4618      	mov	r0, r3
 800609e:	f00a fb3d 	bl	801071c <siprintf>
	lcdPutStr(5, 35, tempStr2, font_12_zekton);
 80060a2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80060a6:	4b9a      	ldr	r3, [pc, #616]	; (8006310 <faceMain+0x2e4>)
 80060a8:	2123      	movs	r1, #35	; 0x23
 80060aa:	2005      	movs	r0, #5
 80060ac:	f7fc fe90 	bl	8002dd0 <lcdPutStr>
	sprintf(&tempStr2, "total: %d", shortPressCount+longPressCount+2*doublePressCount);
 80060b0:	4b94      	ldr	r3, [pc, #592]	; (8006304 <faceMain+0x2d8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b94      	ldr	r3, [pc, #592]	; (8006308 <faceMain+0x2dc>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	441a      	add	r2, r3
 80060bc:	4b95      	ldr	r3, [pc, #596]	; (8006314 <faceMain+0x2e8>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	441a      	add	r2, r3
 80060c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060c8:	4997      	ldr	r1, [pc, #604]	; (8006328 <faceMain+0x2fc>)
 80060ca:	4618      	mov	r0, r3
 80060cc:	f00a fb26 	bl	801071c <siprintf>
	lcdPutStr(5, 50, tempStr2, font_12_zekton);
 80060d0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80060d4:	4b8e      	ldr	r3, [pc, #568]	; (8006310 <faceMain+0x2e4>)
 80060d6:	2132      	movs	r1, #50	; 0x32
 80060d8:	2005      	movs	r0, #5
 80060da:	f7fc fe79 	bl	8002dd0 <lcdPutStr>

	char temperature[30] = {0};
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]
 80060f4:	615a      	str	r2, [r3, #20]
 80060f6:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 80060f8:	4b8c      	ldr	r3, [pc, #560]	; (800632c <faceMain+0x300>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fa fa33 	bl	8000568 <__aeabi_f2d>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800610a:	4989      	ldr	r1, [pc, #548]	; (8006330 <faceMain+0x304>)
 800610c:	f00a fb06 	bl	801071c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006110:	2314      	movs	r3, #20
 8006112:	b29c      	uxth	r4, r3
 8006114:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa f869 	bl	80001f0 <strlen>
 800611e:	4603      	mov	r3, r0
 8006120:	f1c3 030d 	rsb	r3, r3, #13
 8006124:	b29b      	uxth	r3, r3
 8006126:	fb14 f303 	smulbb	r3, r4, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	3323      	adds	r3, #35	; 0x23
 800612e:	b298      	uxth	r0, r3
 8006130:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006134:	4b7f      	ldr	r3, [pc, #508]	; (8006334 <faceMain+0x308>)
 8006136:	210e      	movs	r1, #14
 8006138:	f7fc fe4a 	bl	8002dd0 <lcdPutStr>
	char baroStr[30] = {0};
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006142:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	611a      	str	r2, [r3, #16]
 8006152:	615a      	str	r2, [r3, #20]
 8006154:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8006156:	4b75      	ldr	r3, [pc, #468]	; (800632c <faceMain+0x300>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006338 <faceMain+0x30c>
 8006166:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800616a:	ee16 0a90 	vmov	r0, s13
 800616e:	f7fa f9fb 	bl	8000568 <__aeabi_f2d>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800617a:	4970      	ldr	r1, [pc, #448]	; (800633c <faceMain+0x310>)
 800617c:	f00a face 	bl	801071c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8006180:	2314      	movs	r3, #20
 8006182:	b29c      	uxth	r4, r3
 8006184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006188:	4618      	mov	r0, r3
 800618a:	f7fa f831 	bl	80001f0 <strlen>
 800618e:	4603      	mov	r3, r0
 8006190:	f1c3 030d 	rsb	r3, r3, #13
 8006194:	b29b      	uxth	r3, r3
 8006196:	fb14 f303 	smulbb	r3, r4, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	3323      	adds	r3, #35	; 0x23
 800619e:	b298      	uxth	r0, r3
 80061a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80061a4:	4b63      	ldr	r3, [pc, #396]	; (8006334 <faceMain+0x308>)
 80061a6:	212a      	movs	r1, #42	; 0x2a
 80061a8:	f7fc fe12 	bl	8002dd0 <lcdPutStr>

	char fracStr[30] = {0};
 80061ac:	2300      	movs	r3, #0
 80061ae:	663b      	str	r3, [r7, #96]	; 0x60
 80061b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]
 80061c0:	615a      	str	r2, [r3, #20]
 80061c2:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80061c4:	2300      	movs	r3, #0
 80061c6:	643b      	str	r3, [r7, #64]	; 0x40
 80061c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
 80061d8:	615a      	str	r2, [r3, #20]
 80061da:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80061dc:	2300      	movs	r3, #0
 80061de:	623b      	str	r3, [r7, #32]
 80061e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	611a      	str	r2, [r3, #16]
 80061f0:	615a      	str	r2, [r3, #20]
 80061f2:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 80061f4:	4b52      	ldr	r3, [pc, #328]	; (8006340 <faceMain+0x314>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061fe:	4951      	ldr	r1, [pc, #324]	; (8006344 <faceMain+0x318>)
 8006200:	4618      	mov	r0, r3
 8006202:	f00a fa8b 	bl	801071c <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8006206:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <faceMain+0x314>)
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	461a      	mov	r2, r3
 800620c:	f107 0320 	add.w	r3, r7, #32
 8006210:	494c      	ldr	r1, [pc, #304]	; (8006344 <faceMain+0x318>)
 8006212:	4618      	mov	r0, r3
 8006214:	f00a fa82 	bl	801071c <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8006218:	4b49      	ldr	r3, [pc, #292]	; (8006340 <faceMain+0x314>)
 800621a:	789b      	ldrb	r3, [r3, #2]
 800621c:	461a      	mov	r2, r3
 800621e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006222:	4948      	ldr	r1, [pc, #288]	; (8006344 <faceMain+0x318>)
 8006224:	4618      	mov	r0, r3
 8006226:	f00a fa79 	bl	801071c <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800622a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800622e:	4b46      	ldr	r3, [pc, #280]	; (8006348 <faceMain+0x31c>)
 8006230:	214c      	movs	r1, #76	; 0x4c
 8006232:	2014      	movs	r0, #20
 8006234:	f7fc fdcc 	bl	8002dd0 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8006238:	f107 0220 	add.w	r2, r7, #32
 800623c:	4b42      	ldr	r3, [pc, #264]	; (8006348 <faceMain+0x31c>)
 800623e:	214c      	movs	r1, #76	; 0x4c
 8006240:	20aa      	movs	r0, #170	; 0xaa
 8006242:	f7fc fdc5 	bl	8002dd0 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8006246:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800624a:	4b40      	ldr	r3, [pc, #256]	; (800634c <faceMain+0x320>)
 800624c:	214c      	movs	r1, #76	; 0x4c
 800624e:	f240 103b 	movw	r0, #315	; 0x13b
 8006252:	f7fc fdbd 	bl	8002dd0 <lcdPutStr>

	char buffString[30] = {0};
 8006256:	2300      	movs	r3, #0
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	609a      	str	r2, [r3, #8]
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	611a      	str	r2, [r3, #16]
 8006268:	615a      	str	r2, [r3, #20]
 800626a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800626c:	463b      	mov	r3, r7
 800626e:	4938      	ldr	r1, [pc, #224]	; (8006350 <faceMain+0x324>)
 8006270:	4618      	mov	r0, r3
 8006272:	f00a fa53 	bl	801071c <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <faceMain+0x328>)
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	461a      	mov	r2, r3
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <faceMain+0x32c>)
 800627e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006282:	4b34      	ldr	r3, [pc, #208]	; (8006354 <faceMain+0x328>)
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800628a:	4638      	mov	r0, r7
 800628c:	4933      	ldr	r1, [pc, #204]	; (800635c <faceMain+0x330>)
 800628e:	f00a fa45 	bl	801071c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8006292:	2314      	movs	r3, #20
 8006294:	b29c      	uxth	r4, r3
 8006296:	463b      	mov	r3, r7
 8006298:	4618      	mov	r0, r3
 800629a:	f7f9 ffa9 	bl	80001f0 <strlen>
 800629e:	4603      	mov	r3, r0
 80062a0:	f1c3 030d 	rsb	r3, r3, #13
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	fb14 f303 	smulbb	r3, r4, r3
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3323      	adds	r3, #35	; 0x23
 80062ae:	b298      	uxth	r0, r3
 80062b0:	463a      	mov	r2, r7
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <faceMain+0x308>)
 80062b4:	21ae      	movs	r1, #174	; 0xae
 80062b6:	f7fc fd8b 	bl	8002dd0 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <faceMain+0x328>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	4b27      	ldr	r3, [pc, #156]	; (8006360 <faceMain+0x334>)
 80062c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <faceMain+0x328>)
 80062c8:	789b      	ldrb	r3, [r3, #2]
 80062ca:	4638      	mov	r0, r7
 80062cc:	4923      	ldr	r1, [pc, #140]	; (800635c <faceMain+0x330>)
 80062ce:	f00a fa25 	bl	801071c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80062d2:	2314      	movs	r3, #20
 80062d4:	b29c      	uxth	r4, r3
 80062d6:	463b      	mov	r3, r7
 80062d8:	4618      	mov	r0, r3
 80062da:	f7f9 ff89 	bl	80001f0 <strlen>
 80062de:	4603      	mov	r3, r0
 80062e0:	f1c3 030d 	rsb	r3, r3, #13
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	fb14 f303 	smulbb	r3, r4, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3323      	adds	r3, #35	; 0x23
 80062ee:	b298      	uxth	r0, r3
 80062f0:	463a      	mov	r2, r7
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <faceMain+0x308>)
 80062f4:	21ca      	movs	r1, #202	; 0xca
 80062f6:	f7fc fd6b 	bl	8002dd0 <lcdPutStr>
}
 80062fa:	bf00      	nop
 80062fc:	37e4      	adds	r7, #228	; 0xe4
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd90      	pop	{r4, r7, pc}
 8006302:	bf00      	nop
 8006304:	20005c05 	.word	0x20005c05
 8006308:	20005c06 	.word	0x20005c06
 800630c:	08013ddc 	.word	0x08013ddc
 8006310:	08024660 	.word	0x08024660
 8006314:	20005c07 	.word	0x20005c07
 8006318:	20005c08 	.word	0x20005c08
 800631c:	08013df0 	.word	0x08013df0
 8006320:	20005c04 	.word	0x20005c04
 8006324:	08013e08 	.word	0x08013e08
 8006328:	08013e14 	.word	0x08013e14
 800632c:	200023b0 	.word	0x200023b0
 8006330:	08013e20 	.word	0x08013e20
 8006334:	080250e8 	.word	0x080250e8
 8006338:	42c80000 	.word	0x42c80000
 800633c:	08013e28 	.word	0x08013e28
 8006340:	20005540 	.word	0x20005540
 8006344:	08013e34 	.word	0x08013e34
 8006348:	0802c598 	.word	0x0802c598
 800634c:	08026f50 	.word	0x08026f50
 8006350:	08013e3c 	.word	0x08013e3c
 8006354:	20005554 	.word	0x20005554
 8006358:	200000bc 	.word	0x200000bc
 800635c:	08013e4c 	.word	0x08013e4c
 8006360:	2000009c 	.word	0x2000009c

08006364 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	895b      	ldrh	r3, [r3, #10]
 8006382:	461a      	mov	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	4618      	mov	r0, r3
 800638c:	f009 faec 	bl	800f968 <malloc>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	741a      	strb	r2, [r3, #16]
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	891a      	ldrh	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	895b      	ldrh	r3, [r3, #10]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff ffe5 	bl	80063b8 <cbuf_isFull>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d02b      	beq.n	800644c <cbuf_ovw+0x6e>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	88db      	ldrh	r3, [r3, #6]
 80063fc:	4619      	mov	r1, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	18d0      	adds	r0, r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	461a      	mov	r2, r3
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	f009 faba 	bl	800f988 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	88db      	ldrh	r3, [r3, #6]
 8006418:	3301      	adds	r3, #1
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	8952      	ldrh	r2, [r2, #10]
 800641e:	fb93 f1f2 	sdiv	r1, r3, r2
 8006422:	fb01 f202 	mul.w	r2, r1, r2
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	889b      	ldrh	r3, [r3, #4]
 8006432:	3301      	adds	r3, #1
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	8952      	ldrh	r2, [r2, #10]
 8006438:	fb93 f1f2 	sdiv	r1, r3, r2
 800643c:	fb01 f202 	mul.w	r2, r1, r2
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	809a      	strh	r2, [r3, #4]
		return 0;
 8006448:	2300      	movs	r3, #0
 800644a:	e023      	b.n	8006494 <cbuf_ovw+0xb6>
	} else{
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	4619      	mov	r1, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	fb01 f303 	mul.w	r3, r1, r3
 800645e:	18d0      	adds	r0, r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	461a      	mov	r2, r3
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	f009 fa8e 	bl	800f988 <memcpy>
		b->elemNum++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	891b      	ldrh	r3, [r3, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	88db      	ldrh	r3, [r3, #6]
 800647c:	3301      	adds	r3, #1
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	8952      	ldrh	r2, [r2, #10]
 8006482:	fb93 f1f2 	sdiv	r1, r3, r2
 8006486:	fb01 f202 	mul.w	r2, r1, r2
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	80da      	strh	r2, [r3, #6]
		return 1;
 8006492:	2301      	movs	r3, #1
	}
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	895b      	ldrh	r3, [r3, #10]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f009 fa57 	bl	800f968 <malloc>
 80064ba:	4603      	mov	r3, r0
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	731a      	strb	r2, [r3, #12]
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	891a      	ldrh	r2, [r3, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	895b      	ldrh	r3, [r3, #10]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ffe5 	bl	80064e2 <ring_buffer_full>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d023      	beq.n	8006566 <add_ovw_ring_buffer+0x5e>
		b->values[b->tail] = value;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	88db      	ldrh	r3, [r3, #6]
 8006532:	3301      	adds	r3, #1
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	8952      	ldrh	r2, [r2, #10]
 8006538:	fb93 f1f2 	sdiv	r1, r3, r2
 800653c:	fb01 f202 	mul.w	r2, r1, r2
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	889b      	ldrh	r3, [r3, #4]
 800654c:	3301      	adds	r3, #1
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	8952      	ldrh	r2, [r2, #10]
 8006552:	fb93 f1f2 	sdiv	r1, r3, r2
 8006556:	fb01 f202 	mul.w	r2, r1, r2
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	809a      	strh	r2, [r3, #4]
		return 0;
 8006562:	2300      	movs	r3, #0
 8006564:	e01b      	b.n	800659e <add_ovw_ring_buffer+0x96>
	} else{
		b->values[b->tail] = value;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	88db      	ldrh	r3, [r3, #6]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	891b      	ldrh	r3, [r3, #8]
 800657a:	3301      	adds	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	3301      	adds	r3, #1
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	8952      	ldrh	r2, [r2, #10]
 800658c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006590:	fb01 f202 	mul.w	r2, r1, r2
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	80da      	strh	r2, [r3, #6]
		return 1;
 800659c:	2301      	movs	r3, #1
	}
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <createTimer>:
 *      Author: wojch
 */

#include "timerUtils.h"

timer_T* createTimer(void){
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
	timer_T* timerPtr = malloc(sizeof(timer_T));
 80065ac:	200c      	movs	r0, #12
 80065ae:	f009 f9db 	bl	800f968 <malloc>
 80065b2:	4603      	mov	r3, r0
 80065b4:	607b      	str	r3, [r7, #4]
	timerPtr->timerStatus = TIMER_STATUS_UNSET;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	721a      	strb	r2, [r3, #8]
	return timerPtr;
 80065bc:	687b      	ldr	r3, [r7, #4]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <setTimerAAA>:
void deleteTimer(timer_T* timer){
	free(timer);
}
uint8_t setTimerAAA(timer_T* timer, uint16_t targetTime, void* callback){
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	460b      	mov	r3, r1
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	817b      	strh	r3, [r7, #10]
	timer->currentValue = 0;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	801a      	strh	r2, [r3, #0]
	timer->targetValue = targetTime;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	897a      	ldrh	r2, [r7, #10]
 80065de:	805a      	strh	r2, [r3, #2]
	timer->callback = callback;
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
	timer->timerStatus = TIMER_STATUS_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	721a      	strb	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <runTimerAAA>:

uint8_t runTimerAAA(timer_T* timer){
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
	if((timer->timerStatus == TIMER_STATUS_READY) || (timer->timerStatus == TIMER_STATUS_PAUSED)){
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7a1b      	ldrb	r3, [r3, #8]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d003      	beq.n	8006612 <runTimerAAA+0x18>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7a1b      	ldrb	r3, [r3, #8]
 800660e:	2b03      	cmp	r3, #3
 8006610:	d102      	bne.n	8006618 <runTimerAAA+0x1e>
		timer->timerStatus = TIMER_STATUS_RUNNING;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	721a      	strb	r2, [r3, #8]
	}
}
 8006618:	bf00      	nop
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <tickTimer>:
uint8_t resetTimerAAA(timer_T* timer){
	timer->currentValue = 0;
	timer->timerStatus = TIMER_STATUS_READY;
}

void tickTimer(timer_T* timer){
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING) timer->currentValue++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7a1b      	ldrb	r3, [r3, #8]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d105      	bne.n	8006642 <tickTimer+0x1c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	801a      	strh	r2, [r3, #0]
	if(timer->currentValue == timer->targetValue){
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	885b      	ldrh	r3, [r3, #2]
 800664a:	429a      	cmp	r2, r3
 800664c:	d106      	bne.n	800665c <tickTimer+0x36>
		timer->timerStatus = TIMER_STATUS_ELAPSED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	721a      	strb	r2, [r3, #8]
		// callback will be executed in the TMR interrupt!
		timer->callback(NULL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2000      	movs	r0, #0
 800665a:	4798      	blx	r3
	}
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800669c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006668:	480d      	ldr	r0, [pc, #52]	; (80066a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800666a:	490e      	ldr	r1, [pc, #56]	; (80066a4 <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 800666c:	4a0e      	ldr	r2, [pc, #56]	; (80066a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800666e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006670:	e002      	b.n	8006678 <LoopCopyDataInit>

08006672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006676:	3304      	adds	r3, #4

08006678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800667a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800667c:	d3f9      	bcc.n	8006672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800667e:	4a0b      	ldr	r2, [pc, #44]	; (80066ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006680:	4c0b      	ldr	r4, [pc, #44]	; (80066b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006684:	e001      	b.n	800668a <LoopFillZerobss>

08006686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006688:	3204      	adds	r2, #4

0800668a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800668a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800668c:	d3fb      	bcc.n	8006686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800668e:	f7fe fb2b 	bl	8004ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006692:	f009 f945 	bl	800f920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006696:	f7fd fc69 	bl	8003f6c <main>
  bx  lr    
 800669a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800669c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80066a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066a4:	200002c8 	.word	0x200002c8
                                         ldr r2, =_sidata
 80066a8:	0802e948 	.word	0x0802e948
  ldr r2, =_sbss
 80066ac:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80066b0:	20005c5c 	.word	0x20005c5c

080066b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066b4:	e7fe      	b.n	80066b4 <ADC_IRQHandler>
	...

080066b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <HAL_Init+0x40>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0d      	ldr	r2, [pc, #52]	; (80066f8 <HAL_Init+0x40>)
 80066c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_Init+0x40>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_Init+0x40>)
 80066ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_Init+0x40>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <HAL_Init+0x40>)
 80066da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066e0:	2003      	movs	r0, #3
 80066e2:	f000 f94f 	bl	8006984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066e6:	2000      	movs	r0, #0
 80066e8:	f000 f808 	bl	80066fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066ec:	f7fe f800 	bl	80046f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40023c00 	.word	0x40023c00

080066fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_InitTick+0x54>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_InitTick+0x58>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006712:	fbb3 f3f1 	udiv	r3, r3, r1
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f967 	bl	80069ee <HAL_SYSTICK_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e00e      	b.n	8006748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b0f      	cmp	r3, #15
 800672e:	d80a      	bhi.n	8006746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006730:	2200      	movs	r2, #0
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	f000 f92f 	bl	800699a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800673c:	4a06      	ldr	r2, [pc, #24]	; (8006758 <HAL_InitTick+0x5c>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000094 	.word	0x20000094
 8006754:	200000f4 	.word	0x200000f4
 8006758:	200000f0 	.word	0x200000f0

0800675c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_IncTick+0x20>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_IncTick+0x24>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4413      	add	r3, r2
 800676c:	4a04      	ldr	r2, [pc, #16]	; (8006780 <HAL_IncTick+0x24>)
 800676e:	6013      	str	r3, [r2, #0]
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	200000f4 	.word	0x200000f4
 8006780:	20005c0c 	.word	0x20005c0c

08006784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  return uwTick;
 8006788:	4b03      	ldr	r3, [pc, #12]	; (8006798 <HAL_GetTick+0x14>)
 800678a:	681b      	ldr	r3, [r3, #0]
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20005c0c 	.word	0x20005c0c

0800679c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067a4:	f7ff ffee 	bl	8006784 <HAL_GetTick>
 80067a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d005      	beq.n	80067c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <HAL_Delay+0x44>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067c2:	bf00      	nop
 80067c4:	f7ff ffde 	bl	8006784 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d8f7      	bhi.n	80067c4 <HAL_Delay+0x28>
  {
  }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200000f4 	.word	0x200000f4

080067e4 <__NVIC_SetPriorityGrouping>:
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067f4:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <__NVIC_SetPriorityGrouping+0x44>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006800:	4013      	ands	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800680c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006816:	4a04      	ldr	r2, [pc, #16]	; (8006828 <__NVIC_SetPriorityGrouping+0x44>)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	60d3      	str	r3, [r2, #12]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <__NVIC_GetPriorityGrouping>:
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <__NVIC_GetPriorityGrouping+0x18>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	f003 0307 	and.w	r3, r3, #7
}
 800683a:	4618      	mov	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <__NVIC_EnableIRQ>:
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006856:	2b00      	cmp	r3, #0
 8006858:	db0b      	blt.n	8006872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	f003 021f 	and.w	r2, r3, #31
 8006860:	4907      	ldr	r1, [pc, #28]	; (8006880 <__NVIC_EnableIRQ+0x38>)
 8006862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	2001      	movs	r0, #1
 800686a:	fa00 f202 	lsl.w	r2, r0, r2
 800686e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	e000e100 	.word	0xe000e100

08006884 <__NVIC_SetPriority>:
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006894:	2b00      	cmp	r3, #0
 8006896:	db0a      	blt.n	80068ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	490c      	ldr	r1, [pc, #48]	; (80068d0 <__NVIC_SetPriority+0x4c>)
 800689e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a2:	0112      	lsls	r2, r2, #4
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	440b      	add	r3, r1
 80068a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068ac:	e00a      	b.n	80068c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	4908      	ldr	r1, [pc, #32]	; (80068d4 <__NVIC_SetPriority+0x50>)
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	3b04      	subs	r3, #4
 80068bc:	0112      	lsls	r2, r2, #4
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	440b      	add	r3, r1
 80068c2:	761a      	strb	r2, [r3, #24]
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	e000e100 	.word	0xe000e100
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <NVIC_EncodePriority>:
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f1c3 0307 	rsb	r3, r3, #7
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	bf28      	it	cs
 80068f6:	2304      	movcs	r3, #4
 80068f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2b06      	cmp	r3, #6
 8006900:	d902      	bls.n	8006908 <NVIC_EncodePriority+0x30>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3b03      	subs	r3, #3
 8006906:	e000      	b.n	800690a <NVIC_EncodePriority+0x32>
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	43da      	mvns	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	401a      	ands	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006920:	f04f 31ff 	mov.w	r1, #4294967295
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	fa01 f303 	lsl.w	r3, r1, r3
 800692a:	43d9      	mvns	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006930:	4313      	orrs	r3, r2
}
 8006932:	4618      	mov	r0, r3
 8006934:	3724      	adds	r7, #36	; 0x24
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <SysTick_Config>:
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3b01      	subs	r3, #1
 800694c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006950:	d301      	bcc.n	8006956 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006952:	2301      	movs	r3, #1
 8006954:	e00f      	b.n	8006976 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <SysTick_Config+0x40>)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3b01      	subs	r3, #1
 800695c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800695e:	210f      	movs	r1, #15
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	f7ff ff8e 	bl	8006884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <SysTick_Config+0x40>)
 800696a:	2200      	movs	r2, #0
 800696c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <SysTick_Config+0x40>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	e000e010 	.word	0xe000e010

08006984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff29 	bl	80067e4 <__NVIC_SetPriorityGrouping>
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	4603      	mov	r3, r0
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069ac:	f7ff ff3e 	bl	800682c <__NVIC_GetPriorityGrouping>
 80069b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	f7ff ff8e 	bl	80068d8 <NVIC_EncodePriority>
 80069bc:	4602      	mov	r2, r0
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ff5d 	bl	8006884 <__NVIC_SetPriority>
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	4603      	mov	r3, r0
 80069da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff ff31 	bl	8006848 <__NVIC_EnableIRQ>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ffa2 	bl	8006940 <SysTick_Config>
 80069fc:	4603      	mov	r3, r0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_DMA_Start_IT+0x26>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e040      	b.n	8006aae <HAL_DMA_Start_IT+0xa8>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d12f      	bne.n	8006aa0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f82e 	bl	8006ab6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5e:	223f      	movs	r2, #63	; 0x3f
 8006a60:	409a      	lsls	r2, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0216 	orr.w	r2, r2, #22
 8006a74:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0208 	orr.w	r2, r2, #8
 8006a8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e005      	b.n	8006aac <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d108      	bne.n	8006af6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006af4:	e007      	b.n	8006b06 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	60da      	str	r2, [r3, #12]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	; 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e177      	b.n	8006e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b30:	2201      	movs	r2, #1
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	f040 8166 	bne.w	8006e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d005      	beq.n	8006b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d130      	bne.n	8006bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	2203      	movs	r2, #3
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	091b      	lsrs	r3, r3, #4
 8006bb2:	f003 0201 	and.w	r2, r3, #1
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d017      	beq.n	8006c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	2203      	movs	r2, #3
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4013      	ands	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d123      	bne.n	8006c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	08da      	lsrs	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3208      	adds	r2, #8
 8006c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	220f      	movs	r2, #15
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	08da      	lsrs	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3208      	adds	r2, #8
 8006c52:	69b9      	ldr	r1, [r7, #24]
 8006c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	2203      	movs	r2, #3
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f003 0203 	and.w	r2, r3, #3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80c0 	beq.w	8006e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	4b66      	ldr	r3, [pc, #408]	; (8006e38 <HAL_GPIO_Init+0x324>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	4a65      	ldr	r2, [pc, #404]	; (8006e38 <HAL_GPIO_Init+0x324>)
 8006ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8006caa:	4b63      	ldr	r3, [pc, #396]	; (8006e38 <HAL_GPIO_Init+0x324>)
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cb6:	4a61      	ldr	r2, [pc, #388]	; (8006e3c <HAL_GPIO_Init+0x328>)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	089b      	lsrs	r3, r3, #2
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	220f      	movs	r2, #15
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a58      	ldr	r2, [pc, #352]	; (8006e40 <HAL_GPIO_Init+0x32c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d037      	beq.n	8006d52 <HAL_GPIO_Init+0x23e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a57      	ldr	r2, [pc, #348]	; (8006e44 <HAL_GPIO_Init+0x330>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <HAL_GPIO_Init+0x23a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a56      	ldr	r2, [pc, #344]	; (8006e48 <HAL_GPIO_Init+0x334>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d02b      	beq.n	8006d4a <HAL_GPIO_Init+0x236>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a55      	ldr	r2, [pc, #340]	; (8006e4c <HAL_GPIO_Init+0x338>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d025      	beq.n	8006d46 <HAL_GPIO_Init+0x232>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a54      	ldr	r2, [pc, #336]	; (8006e50 <HAL_GPIO_Init+0x33c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01f      	beq.n	8006d42 <HAL_GPIO_Init+0x22e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a53      	ldr	r2, [pc, #332]	; (8006e54 <HAL_GPIO_Init+0x340>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d019      	beq.n	8006d3e <HAL_GPIO_Init+0x22a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a52      	ldr	r2, [pc, #328]	; (8006e58 <HAL_GPIO_Init+0x344>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_GPIO_Init+0x226>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a51      	ldr	r2, [pc, #324]	; (8006e5c <HAL_GPIO_Init+0x348>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00d      	beq.n	8006d36 <HAL_GPIO_Init+0x222>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a50      	ldr	r2, [pc, #320]	; (8006e60 <HAL_GPIO_Init+0x34c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <HAL_GPIO_Init+0x21e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a4f      	ldr	r2, [pc, #316]	; (8006e64 <HAL_GPIO_Init+0x350>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <HAL_GPIO_Init+0x21a>
 8006d2a:	2309      	movs	r3, #9
 8006d2c:	e012      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d2e:	230a      	movs	r3, #10
 8006d30:	e010      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d32:	2308      	movs	r3, #8
 8006d34:	e00e      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d36:	2307      	movs	r3, #7
 8006d38:	e00c      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	e00a      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d3e:	2305      	movs	r3, #5
 8006d40:	e008      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d42:	2304      	movs	r3, #4
 8006d44:	e006      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d46:	2303      	movs	r3, #3
 8006d48:	e004      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e002      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_GPIO_Init+0x240>
 8006d52:	2300      	movs	r3, #0
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	f002 0203 	and.w	r2, r2, #3
 8006d5a:	0092      	lsls	r2, r2, #2
 8006d5c:	4093      	lsls	r3, r2
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d64:	4935      	ldr	r1, [pc, #212]	; (8006e3c <HAL_GPIO_Init+0x328>)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d72:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d96:	4a34      	ldr	r2, [pc, #208]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d9c:	4b32      	ldr	r3, [pc, #200]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006dea:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e14:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <HAL_GPIO_Init+0x354>)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	f67f ae84 	bls.w	8006b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	40013800 	.word	0x40013800
 8006e40:	40020000 	.word	0x40020000
 8006e44:	40020400 	.word	0x40020400
 8006e48:	40020800 	.word	0x40020800
 8006e4c:	40020c00 	.word	0x40020c00
 8006e50:	40021000 	.word	0x40021000
 8006e54:	40021400 	.word	0x40021400
 8006e58:	40021800 	.word	0x40021800
 8006e5c:	40021c00 	.word	0x40021c00
 8006e60:	40022000 	.word	0x40022000
 8006e64:	40022400 	.word	0x40022400
 8006e68:	40013c00 	.word	0x40013c00

08006e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
 8006e88:	e001      	b.n	8006e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	807b      	strh	r3, [r7, #2]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006eac:	787b      	ldrb	r3, [r7, #1]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006eb8:	e003      	b.n	8006ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006eba:	887b      	ldrh	r3, [r7, #2]
 8006ebc:	041a      	lsls	r2, r3, #16
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	619a      	str	r2, [r3, #24]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ee0:	887a      	ldrh	r2, [r7, #2]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	041a      	lsls	r2, r3, #16
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	43d9      	mvns	r1, r3
 8006eec:	887b      	ldrh	r3, [r7, #2]
 8006eee:	400b      	ands	r3, r1
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	619a      	str	r2, [r3, #24]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f1a:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f806 	bl	8006f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40013c00 	.word	0x40013c00

08006f34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e12b      	b.n	80071b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fce2 	bl	800293c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	; 0x24
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f001 fc76 	bl	80088a0 <HAL_RCC_GetPCLK1Freq>
 8006fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4a81      	ldr	r2, [pc, #516]	; (80071c0 <HAL_I2C_Init+0x274>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d807      	bhi.n	8006fd0 <HAL_I2C_Init+0x84>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a80      	ldr	r2, [pc, #512]	; (80071c4 <HAL_I2C_Init+0x278>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	bf94      	ite	ls
 8006fc8:	2301      	movls	r3, #1
 8006fca:	2300      	movhi	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e006      	b.n	8006fde <HAL_I2C_Init+0x92>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a7d      	ldr	r2, [pc, #500]	; (80071c8 <HAL_I2C_Init+0x27c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bf94      	ite	ls
 8006fd8:	2301      	movls	r3, #1
 8006fda:	2300      	movhi	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e0e7      	b.n	80071b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a78      	ldr	r2, [pc, #480]	; (80071cc <HAL_I2C_Init+0x280>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	0c9b      	lsrs	r3, r3, #18
 8006ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a6a      	ldr	r2, [pc, #424]	; (80071c0 <HAL_I2C_Init+0x274>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d802      	bhi.n	8007020 <HAL_I2C_Init+0xd4>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	3301      	adds	r3, #1
 800701e:	e009      	b.n	8007034 <HAL_I2C_Init+0xe8>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	4a69      	ldr	r2, [pc, #420]	; (80071d0 <HAL_I2C_Init+0x284>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	099b      	lsrs	r3, r3, #6
 8007032:	3301      	adds	r3, #1
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	430b      	orrs	r3, r1
 800703a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	495c      	ldr	r1, [pc, #368]	; (80071c0 <HAL_I2C_Init+0x274>)
 8007050:	428b      	cmp	r3, r1
 8007052:	d819      	bhi.n	8007088 <HAL_I2C_Init+0x13c>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	1e59      	subs	r1, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007062:	1c59      	adds	r1, r3, #1
 8007064:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007068:	400b      	ands	r3, r1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_I2C_Init+0x138>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1e59      	subs	r1, r3, #1
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fbb1 f3f3 	udiv	r3, r1, r3
 800707c:	3301      	adds	r3, #1
 800707e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007082:	e051      	b.n	8007128 <HAL_I2C_Init+0x1dc>
 8007084:	2304      	movs	r3, #4
 8007086:	e04f      	b.n	8007128 <HAL_I2C_Init+0x1dc>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d111      	bne.n	80070b4 <HAL_I2C_Init+0x168>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1e58      	subs	r0, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6859      	ldr	r1, [r3, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	440b      	add	r3, r1
 800709e:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a2:	3301      	adds	r3, #1
 80070a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e012      	b.n	80070da <HAL_I2C_Init+0x18e>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1e58      	subs	r0, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	0099      	lsls	r1, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ca:	3301      	adds	r3, #1
 80070cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_I2C_Init+0x196>
 80070de:	2301      	movs	r3, #1
 80070e0:	e022      	b.n	8007128 <HAL_I2C_Init+0x1dc>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10e      	bne.n	8007108 <HAL_I2C_Init+0x1bc>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1e58      	subs	r0, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	440b      	add	r3, r1
 80070f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070fc:	3301      	adds	r3, #1
 80070fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	e00f      	b.n	8007128 <HAL_I2C_Init+0x1dc>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	1e58      	subs	r0, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	0099      	lsls	r1, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	fbb0 f3f3 	udiv	r3, r0, r3
 800711e:	3301      	adds	r3, #1
 8007120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	6809      	ldr	r1, [r1, #0]
 800712c:	4313      	orrs	r3, r2
 800712e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69da      	ldr	r2, [r3, #28]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6911      	ldr	r1, [r2, #16]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68d2      	ldr	r2, [r2, #12]
 8007162:	4311      	orrs	r1, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	430b      	orrs	r3, r1
 800716a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	000186a0 	.word	0x000186a0
 80071c4:	001e847f 	.word	0x001e847f
 80071c8:	003d08ff 	.word	0x003d08ff
 80071cc:	431bde83 	.word	0x431bde83
 80071d0:	10624dd3 	.word	0x10624dd3

080071d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	817b      	strh	r3, [r7, #10]
 80071e6:	460b      	mov	r3, r1
 80071e8:	813b      	strh	r3, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ee:	f7ff fac9 	bl	8006784 <HAL_GetTick>
 80071f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	f040 80d9 	bne.w	80073b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2319      	movs	r3, #25
 8007208:	2201      	movs	r2, #1
 800720a:	496d      	ldr	r1, [pc, #436]	; (80073c0 <HAL_I2C_Mem_Write+0x1ec>)
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fc7f 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007218:	2302      	movs	r3, #2
 800721a:	e0cc      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_I2C_Mem_Write+0x56>
 8007226:	2302      	movs	r3, #2
 8007228:	e0c5      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d007      	beq.n	8007250 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2221      	movs	r2, #33	; 0x21
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a4d      	ldr	r2, [pc, #308]	; (80073c4 <HAL_I2C_Mem_Write+0x1f0>)
 8007290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007292:	88f8      	ldrh	r0, [r7, #6]
 8007294:	893a      	ldrh	r2, [r7, #8]
 8007296:	8979      	ldrh	r1, [r7, #10]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fab6 	bl	8007814 <I2C_RequestMemoryWrite>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d052      	beq.n	8007354 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e081      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fd00 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00d      	beq.n	80072de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d107      	bne.n	80072da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e06b      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b04      	cmp	r3, #4
 800731a:	d11b      	bne.n	8007354 <HAL_I2C_Mem_Write+0x180>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007320:	2b00      	cmp	r3, #0
 8007322:	d017      	beq.n	8007354 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1aa      	bne.n	80072b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fcec 	bl	8007d3e <I2C_WaitOnBTFFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00d      	beq.n	8007388 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	2b04      	cmp	r3, #4
 8007372:	d107      	bne.n	8007384 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007382:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e016      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	00100002 	.word	0x00100002
 80073c4:	ffff0000 	.word	0xffff0000

080073c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	; 0x30
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073e2:	f7ff f9cf 	bl	8006784 <HAL_GetTick>
 80073e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	f040 8208 	bne.w	8007806 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	2319      	movs	r3, #25
 80073fc:	2201      	movs	r2, #1
 80073fe:	497b      	ldr	r1, [pc, #492]	; (80075ec <HAL_I2C_Mem_Read+0x224>)
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fb85 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
 800740e:	e1fb      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_I2C_Mem_Read+0x56>
 800741a:	2302      	movs	r3, #2
 800741c:	e1f4      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	d007      	beq.n	8007444 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007452:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2222      	movs	r2, #34	; 0x22
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a5b      	ldr	r2, [pc, #364]	; (80075f0 <HAL_I2C_Mem_Read+0x228>)
 8007484:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007486:	88f8      	ldrh	r0, [r7, #6]
 8007488:	893a      	ldrh	r2, [r7, #8]
 800748a:	8979      	ldrh	r1, [r7, #10]
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4603      	mov	r3, r0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fa52 	bl	8007940 <I2C_RequestMemoryRead>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e1b0      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d113      	bne.n	80074d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ae:	2300      	movs	r3, #0
 80074b0:	623b      	str	r3, [r7, #32]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e184      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d11b      	bne.n	8007516 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e164      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751a:	2b02      	cmp	r3, #2
 800751c:	d11b      	bne.n	8007556 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800753c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800753e:	2300      	movs	r3, #0
 8007540:	61bb      	str	r3, [r7, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	e144      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800756c:	e138      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007572:	2b03      	cmp	r3, #3
 8007574:	f200 80f1 	bhi.w	800775a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757c:	2b01      	cmp	r3, #1
 800757e:	d123      	bne.n	80075c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fc1b 	bl	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e139      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075c6:	e10b      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d14e      	bne.n	800766e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2200      	movs	r2, #0
 80075d8:	4906      	ldr	r1, [pc, #24]	; (80075f4 <HAL_I2C_Mem_Read+0x22c>)
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fa98 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e10e      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
 80075ea:	bf00      	nop
 80075ec:	00100002 	.word	0x00100002
 80075f0:	ffff0000 	.word	0xffff0000
 80075f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800766c:	e0b8      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	2200      	movs	r2, #0
 8007676:	4966      	ldr	r1, [pc, #408]	; (8007810 <HAL_I2C_Mem_Read+0x448>)
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fa49 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e0bf      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	2200      	movs	r2, #0
 80076d2:	494f      	ldr	r1, [pc, #316]	; (8007810 <HAL_I2C_Mem_Read+0x448>)
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fa1b 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e091      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007758:	e042      	b.n	80077e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800775a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fb2e 	bl	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e04c      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	b2d2      	uxtb	r2, r2
 800777a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d118      	bne.n	80077e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f47f aec2 	bne.w	800756e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e000      	b.n	8007808 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	; 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	00010004 	.word	0x00010004

08007814 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4603      	mov	r3, r0
 8007824:	817b      	strh	r3, [r7, #10]
 8007826:	460b      	mov	r3, r1
 8007828:	813b      	strh	r3, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	2200      	movs	r2, #0
 8007846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f960 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007864:	d103      	bne.n	800786e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e05f      	b.n	8007932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007872:	897b      	ldrh	r3, [r7, #10]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	492d      	ldr	r1, [pc, #180]	; (800793c <I2C_RequestMemoryWrite+0x128>)
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f998 	bl	8007bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e04c      	b.n	8007932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	6a39      	ldr	r1, [r7, #32]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fa02 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00d      	beq.n	80078da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d107      	bne.n	80078d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e02b      	b.n	8007932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d105      	bne.n	80078ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e0:	893b      	ldrh	r3, [r7, #8]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	611a      	str	r2, [r3, #16]
 80078ea:	e021      	b.n	8007930 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078ec:	893b      	ldrh	r3, [r7, #8]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	6a39      	ldr	r1, [r7, #32]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f9dc 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	2b04      	cmp	r3, #4
 8007910:	d107      	bne.n	8007922 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e005      	b.n	8007932 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007926:	893b      	ldrh	r3, [r7, #8]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	00010002 	.word	0x00010002

08007940 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4603      	mov	r3, r0
 8007950:	817b      	strh	r3, [r7, #10]
 8007952:	460b      	mov	r3, r1
 8007954:	813b      	strh	r3, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007968:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007978:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	2200      	movs	r2, #0
 8007982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f8c2 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00d      	beq.n	80079ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a0:	d103      	bne.n	80079aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0aa      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	4952      	ldr	r1, [pc, #328]	; (8007b0c <I2C_RequestMemoryRead+0x1cc>)
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f8fa 	bl	8007bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e097      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ec:	6a39      	ldr	r1, [r7, #32]
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f964 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d107      	bne.n	8007a12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e076      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d105      	bne.n	8007a28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	611a      	str	r2, [r3, #16]
 8007a26:	e021      	b.n	8007a6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a38:	6a39      	ldr	r1, [r7, #32]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f93e 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d107      	bne.n	8007a5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e050      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a62:	893b      	ldrh	r3, [r7, #8]
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6e:	6a39      	ldr	r1, [r7, #32]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f923 	bl	8007cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d107      	bne.n	8007a94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e035      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f82b 	bl	8007b10 <I2C_WaitOnFlagUntilTimeout>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ace:	d103      	bne.n	8007ad8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e013      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	6a3a      	ldr	r2, [r7, #32]
 8007af0:	4906      	ldr	r1, [pc, #24]	; (8007b0c <I2C_RequestMemoryRead+0x1cc>)
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f863 	bl	8007bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	00010002 	.word	0x00010002

08007b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b20:	e025      	b.n	8007b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d021      	beq.n	8007b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2a:	f7fe fe2b 	bl	8006784 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d116      	bne.n	8007b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f043 0220 	orr.w	r2, r3, #32
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e023      	b.n	8007bb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10d      	bne.n	8007b94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	43da      	mvns	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf0c      	ite	eq
 8007b8a:	2301      	moveq	r3, #1
 8007b8c:	2300      	movne	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	e00c      	b.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	43da      	mvns	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2301      	moveq	r3, #1
 8007ba8:	2300      	movne	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d0b6      	beq.n	8007b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bcc:	e051      	b.n	8007c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bdc:	d123      	bne.n	8007c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f043 0204 	orr.w	r2, r3, #4
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e046      	b.n	8007cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d021      	beq.n	8007c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fe fda9 	bl	8006784 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d116      	bne.n	8007c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e020      	b.n	8007cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10c      	bne.n	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	43da      	mvns	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bf14      	ite	ne
 8007c8e:	2301      	movne	r3, #1
 8007c90:	2300      	moveq	r3, #0
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	e00b      	b.n	8007cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	43da      	mvns	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d18d      	bne.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cc8:	e02d      	b.n	8007d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f8ce 	bl	8007e6c <I2C_IsAcknowledgeFailed>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e02d      	b.n	8007d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d021      	beq.n	8007d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce2:	f7fe fd4f 	bl	8006784 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d302      	bcc.n	8007cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d116      	bne.n	8007d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e007      	b.n	8007d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	d1ca      	bne.n	8007cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d4a:	e02d      	b.n	8007da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f88d 	bl	8007e6c <I2C_IsAcknowledgeFailed>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e02d      	b.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d021      	beq.n	8007da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d64:	f7fe fd0e 	bl	8006784 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d302      	bcc.n	8007d7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d116      	bne.n	8007da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e007      	b.n	8007db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d1ca      	bne.n	8007d4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dcc:	e042      	b.n	8007e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d119      	bne.n	8007e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0210 	mvn.w	r2, #16
 8007de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e029      	b.n	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e10:	f7fe fcb8 	bl	8006784 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d302      	bcc.n	8007e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d116      	bne.n	8007e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f043 0220 	orr.w	r2, r3, #32
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e007      	b.n	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d1b5      	bne.n	8007dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e82:	d11b      	bne.n	8007ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f043 0204 	orr.w	r2, r3, #4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d129      	bne.n	8007f34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2224      	movs	r2, #36	; 0x24
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0201 	bic.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0210 	bic.w	r2, r2, #16
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d12a      	bne.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2224      	movs	r2, #36	; 0x24
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	f023 030f 	bic.w	r3, r3, #15
 8007f82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	89fa      	ldrh	r2, [r7, #14]
 8007f94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0201 	orr.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e267      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d075      	beq.n	80080ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fde:	4b88      	ldr	r3, [pc, #544]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f003 030c 	and.w	r3, r3, #12
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d00c      	beq.n	8008004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fea:	4b85      	ldr	r3, [pc, #532]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d112      	bne.n	800801c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ff6:	4b82      	ldr	r3, [pc, #520]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008002:	d10b      	bne.n	800801c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008004:	4b7e      	ldr	r3, [pc, #504]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d05b      	beq.n	80080c8 <HAL_RCC_OscConfig+0x108>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d157      	bne.n	80080c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e242      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008024:	d106      	bne.n	8008034 <HAL_RCC_OscConfig+0x74>
 8008026:	4b76      	ldr	r3, [pc, #472]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a75      	ldr	r2, [pc, #468]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800802c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e01d      	b.n	8008070 <HAL_RCC_OscConfig+0xb0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800803c:	d10c      	bne.n	8008058 <HAL_RCC_OscConfig+0x98>
 800803e:	4b70      	ldr	r3, [pc, #448]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a6f      	ldr	r2, [pc, #444]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	4b6d      	ldr	r3, [pc, #436]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a6c      	ldr	r2, [pc, #432]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e00b      	b.n	8008070 <HAL_RCC_OscConfig+0xb0>
 8008058:	4b69      	ldr	r3, [pc, #420]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a68      	ldr	r2, [pc, #416]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800805e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	4b66      	ldr	r3, [pc, #408]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a65      	ldr	r2, [pc, #404]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800806a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800806e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d013      	beq.n	80080a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008078:	f7fe fb84 	bl	8006784 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008080:	f7fe fb80 	bl	8006784 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e207      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008092:	4b5b      	ldr	r3, [pc, #364]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0f0      	beq.n	8008080 <HAL_RCC_OscConfig+0xc0>
 800809e:	e014      	b.n	80080ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a0:	f7fe fb70 	bl	8006784 <HAL_GetTick>
 80080a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080a8:	f7fe fb6c 	bl	8006784 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	; 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e1f3      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ba:	4b51      	ldr	r3, [pc, #324]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f0      	bne.n	80080a8 <HAL_RCC_OscConfig+0xe8>
 80080c6:	e000      	b.n	80080ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d063      	beq.n	800819e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080d6:	4b4a      	ldr	r3, [pc, #296]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080e2:	4b47      	ldr	r3, [pc, #284]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d11c      	bne.n	8008128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080ee:	4b44      	ldr	r3, [pc, #272]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d116      	bne.n	8008128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080fa:	4b41      	ldr	r3, [pc, #260]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <HAL_RCC_OscConfig+0x152>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d001      	beq.n	8008112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e1c7      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008112:	4b3b      	ldr	r3, [pc, #236]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4937      	ldr	r1, [pc, #220]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008122:	4313      	orrs	r3, r2
 8008124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008126:	e03a      	b.n	800819e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d020      	beq.n	8008172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008130:	4b34      	ldr	r3, [pc, #208]	; (8008204 <HAL_RCC_OscConfig+0x244>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008136:	f7fe fb25 	bl	8006784 <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800813c:	e008      	b.n	8008150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800813e:	f7fe fb21 	bl	8006784 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e1a8      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008150:	4b2b      	ldr	r3, [pc, #172]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f0      	beq.n	800813e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815c:	4b28      	ldr	r3, [pc, #160]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	4925      	ldr	r1, [pc, #148]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 800816c:	4313      	orrs	r3, r2
 800816e:	600b      	str	r3, [r1, #0]
 8008170:	e015      	b.n	800819e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <HAL_RCC_OscConfig+0x244>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fe fb04 	bl	8006784 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008180:	f7fe fb00 	bl	8006784 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e187      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008192:	4b1b      	ldr	r3, [pc, #108]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f0      	bne.n	8008180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d036      	beq.n	8008218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d016      	beq.n	80081e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <HAL_RCC_OscConfig+0x248>)
 80081b4:	2201      	movs	r2, #1
 80081b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b8:	f7fe fae4 	bl	8006784 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081c0:	f7fe fae0 	bl	8006784 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e167      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <HAL_RCC_OscConfig+0x240>)
 80081d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0x200>
 80081de:	e01b      	b.n	8008218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081e0:	4b09      	ldr	r3, [pc, #36]	; (8008208 <HAL_RCC_OscConfig+0x248>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081e6:	f7fe facd 	bl	8006784 <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081ec:	e00e      	b.n	800820c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081ee:	f7fe fac9 	bl	8006784 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d907      	bls.n	800820c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e150      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
 8008200:	40023800 	.word	0x40023800
 8008204:	42470000 	.word	0x42470000
 8008208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800820c:	4b88      	ldr	r3, [pc, #544]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800820e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1ea      	bne.n	80081ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8097 	beq.w	8008354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800822a:	4b81      	ldr	r3, [pc, #516]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10f      	bne.n	8008256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008236:	2300      	movs	r3, #0
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	4b7d      	ldr	r3, [pc, #500]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	4a7c      	ldr	r2, [pc, #496]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008244:	6413      	str	r3, [r2, #64]	; 0x40
 8008246:	4b7a      	ldr	r3, [pc, #488]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824e:	60bb      	str	r3, [r7, #8]
 8008250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008252:	2301      	movs	r3, #1
 8008254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008256:	4b77      	ldr	r3, [pc, #476]	; (8008434 <HAL_RCC_OscConfig+0x474>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	2b00      	cmp	r3, #0
 8008260:	d118      	bne.n	8008294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008262:	4b74      	ldr	r3, [pc, #464]	; (8008434 <HAL_RCC_OscConfig+0x474>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a73      	ldr	r2, [pc, #460]	; (8008434 <HAL_RCC_OscConfig+0x474>)
 8008268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800826c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800826e:	f7fe fa89 	bl	8006784 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008274:	e008      	b.n	8008288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008276:	f7fe fa85 	bl	8006784 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e10c      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008288:	4b6a      	ldr	r3, [pc, #424]	; (8008434 <HAL_RCC_OscConfig+0x474>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0f0      	beq.n	8008276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d106      	bne.n	80082aa <HAL_RCC_OscConfig+0x2ea>
 800829c:	4b64      	ldr	r3, [pc, #400]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	4a63      	ldr	r2, [pc, #396]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	; 0x70
 80082a8:	e01c      	b.n	80082e4 <HAL_RCC_OscConfig+0x324>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d10c      	bne.n	80082cc <HAL_RCC_OscConfig+0x30c>
 80082b2:	4b5f      	ldr	r3, [pc, #380]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	4a5e      	ldr	r2, [pc, #376]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082b8:	f043 0304 	orr.w	r3, r3, #4
 80082bc:	6713      	str	r3, [r2, #112]	; 0x70
 80082be:	4b5c      	ldr	r3, [pc, #368]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c2:	4a5b      	ldr	r2, [pc, #364]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	6713      	str	r3, [r2, #112]	; 0x70
 80082ca:	e00b      	b.n	80082e4 <HAL_RCC_OscConfig+0x324>
 80082cc:	4b58      	ldr	r3, [pc, #352]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d0:	4a57      	ldr	r2, [pc, #348]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	6713      	str	r3, [r2, #112]	; 0x70
 80082d8:	4b55      	ldr	r3, [pc, #340]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082dc:	4a54      	ldr	r2, [pc, #336]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80082de:	f023 0304 	bic.w	r3, r3, #4
 80082e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d015      	beq.n	8008318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ec:	f7fe fa4a 	bl	8006784 <HAL_GetTick>
 80082f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082f2:	e00a      	b.n	800830a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f4:	f7fe fa46 	bl	8006784 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e0cb      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830a:	4b49      	ldr	r3, [pc, #292]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0ee      	beq.n	80082f4 <HAL_RCC_OscConfig+0x334>
 8008316:	e014      	b.n	8008342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008318:	f7fe fa34 	bl	8006784 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800831e:	e00a      	b.n	8008336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008320:	f7fe fa30 	bl	8006784 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f241 3288 	movw	r2, #5000	; 0x1388
 800832e:	4293      	cmp	r3, r2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e0b5      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008336:	4b3e      	ldr	r3, [pc, #248]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1ee      	bne.n	8008320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d105      	bne.n	8008354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008348:	4b39      	ldr	r3, [pc, #228]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	4a38      	ldr	r2, [pc, #224]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 800834e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80a1 	beq.w	80084a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800835e:	4b34      	ldr	r3, [pc, #208]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 030c 	and.w	r3, r3, #12
 8008366:	2b08      	cmp	r3, #8
 8008368:	d05c      	beq.n	8008424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d141      	bne.n	80083f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008372:	4b31      	ldr	r3, [pc, #196]	; (8008438 <HAL_RCC_OscConfig+0x478>)
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008378:	f7fe fa04 	bl	8006784 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008380:	f7fe fa00 	bl	8006784 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e087      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008392:	4b27      	ldr	r3, [pc, #156]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f0      	bne.n	8008380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	019b      	lsls	r3, r3, #6
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	3b01      	subs	r3, #1
 80083b8:	041b      	lsls	r3, r3, #16
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	061b      	lsls	r3, r3, #24
 80083c2:	491b      	ldr	r1, [pc, #108]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083c8:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <HAL_RCC_OscConfig+0x478>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ce:	f7fe f9d9 	bl	8006784 <HAL_GetTick>
 80083d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083d4:	e008      	b.n	80083e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d6:	f7fe f9d5 	bl	8006784 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e05c      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083e8:	4b11      	ldr	r3, [pc, #68]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f0      	beq.n	80083d6 <HAL_RCC_OscConfig+0x416>
 80083f4:	e054      	b.n	80084a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <HAL_RCC_OscConfig+0x478>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fc:	f7fe f9c2 	bl	8006784 <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008404:	f7fe f9be 	bl	8006784 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e045      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008416:	4b06      	ldr	r3, [pc, #24]	; (8008430 <HAL_RCC_OscConfig+0x470>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f0      	bne.n	8008404 <HAL_RCC_OscConfig+0x444>
 8008422:	e03d      	b.n	80084a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d107      	bne.n	800843c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e038      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
 8008430:	40023800 	.word	0x40023800
 8008434:	40007000 	.word	0x40007000
 8008438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <HAL_RCC_OscConfig+0x4ec>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d028      	beq.n	800849c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008454:	429a      	cmp	r2, r3
 8008456:	d121      	bne.n	800849c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008462:	429a      	cmp	r2, r3
 8008464:	d11a      	bne.n	800849c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800846c:	4013      	ands	r3, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008474:	4293      	cmp	r3, r2
 8008476:	d111      	bne.n	800849c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	3b01      	subs	r3, #1
 8008486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008488:	429a      	cmp	r2, r3
 800848a:	d107      	bne.n	800849c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800

080084b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0cc      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084c4:	4b68      	ldr	r3, [pc, #416]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d90c      	bls.n	80084ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d2:	4b65      	ldr	r3, [pc, #404]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084da:	4b63      	ldr	r3, [pc, #396]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0b8      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d020      	beq.n	800853a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008504:	4b59      	ldr	r3, [pc, #356]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	4a58      	ldr	r2, [pc, #352]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 800850a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800850e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800851c:	4b53      	ldr	r3, [pc, #332]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4a52      	ldr	r2, [pc, #328]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008528:	4b50      	ldr	r3, [pc, #320]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	494d      	ldr	r1, [pc, #308]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d044      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d107      	bne.n	800855e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800854e:	4b47      	ldr	r3, [pc, #284]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d119      	bne.n	800858e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e07f      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d003      	beq.n	800856e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800856a:	2b03      	cmp	r3, #3
 800856c:	d107      	bne.n	800857e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800856e:	4b3f      	ldr	r3, [pc, #252]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e06f      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800857e:	4b3b      	ldr	r3, [pc, #236]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e067      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800858e:	4b37      	ldr	r3, [pc, #220]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f023 0203 	bic.w	r2, r3, #3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	4934      	ldr	r1, [pc, #208]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	4313      	orrs	r3, r2
 800859e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085a0:	f7fe f8f0 	bl	8006784 <HAL_GetTick>
 80085a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085a6:	e00a      	b.n	80085be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a8:	f7fe f8ec 	bl	8006784 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e04f      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085be:	4b2b      	ldr	r3, [pc, #172]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 020c 	and.w	r2, r3, #12
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d1eb      	bne.n	80085a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085d0:	4b25      	ldr	r3, [pc, #148]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d20c      	bcs.n	80085f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085de:	4b22      	ldr	r3, [pc, #136]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e6:	4b20      	ldr	r3, [pc, #128]	; (8008668 <HAL_RCC_ClockConfig+0x1b8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e032      	b.n	800865e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d008      	beq.n	8008616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4916      	ldr	r1, [pc, #88]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	490e      	ldr	r1, [pc, #56]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 8008632:	4313      	orrs	r3, r2
 8008634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008636:	f000 f821 	bl	800867c <HAL_RCC_GetSysClockFreq>
 800863a:	4602      	mov	r2, r0
 800863c:	4b0b      	ldr	r3, [pc, #44]	; (800866c <HAL_RCC_ClockConfig+0x1bc>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	490a      	ldr	r1, [pc, #40]	; (8008670 <HAL_RCC_ClockConfig+0x1c0>)
 8008648:	5ccb      	ldrb	r3, [r1, r3]
 800864a:	fa22 f303 	lsr.w	r3, r2, r3
 800864e:	4a09      	ldr	r2, [pc, #36]	; (8008674 <HAL_RCC_ClockConfig+0x1c4>)
 8008650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <HAL_RCC_ClockConfig+0x1c8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe f850 	bl	80066fc <HAL_InitTick>

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40023c00 	.word	0x40023c00
 800866c:	40023800 	.word	0x40023800
 8008670:	08015d78 	.word	0x08015d78
 8008674:	20000094 	.word	0x20000094
 8008678:	200000f0 	.word	0x200000f0

0800867c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800867c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008680:	b094      	sub	sp, #80	; 0x50
 8008682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	647b      	str	r3, [r7, #68]	; 0x44
 8008688:	2300      	movs	r3, #0
 800868a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800868c:	2300      	movs	r3, #0
 800868e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008694:	4b79      	ldr	r3, [pc, #484]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 030c 	and.w	r3, r3, #12
 800869c:	2b08      	cmp	r3, #8
 800869e:	d00d      	beq.n	80086bc <HAL_RCC_GetSysClockFreq+0x40>
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	f200 80e1 	bhi.w	8008868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_RCC_GetSysClockFreq+0x34>
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d003      	beq.n	80086b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80086ae:	e0db      	b.n	8008868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086b0:	4b73      	ldr	r3, [pc, #460]	; (8008880 <HAL_RCC_GetSysClockFreq+0x204>)
 80086b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80086b4:	e0db      	b.n	800886e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086b6:	4b73      	ldr	r3, [pc, #460]	; (8008884 <HAL_RCC_GetSysClockFreq+0x208>)
 80086b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086ba:	e0d8      	b.n	800886e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086bc:	4b6f      	ldr	r3, [pc, #444]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086c6:	4b6d      	ldr	r3, [pc, #436]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d063      	beq.n	800879a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086d2:	4b6a      	ldr	r3, [pc, #424]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	099b      	lsrs	r3, r3, #6
 80086d8:	2200      	movs	r2, #0
 80086da:	63bb      	str	r3, [r7, #56]	; 0x38
 80086dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e4:	633b      	str	r3, [r7, #48]	; 0x30
 80086e6:	2300      	movs	r3, #0
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80086ee:	4622      	mov	r2, r4
 80086f0:	462b      	mov	r3, r5
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f04f 0100 	mov.w	r1, #0
 80086fa:	0159      	lsls	r1, r3, #5
 80086fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008700:	0150      	lsls	r0, r2, #5
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4621      	mov	r1, r4
 8008708:	1a51      	subs	r1, r2, r1
 800870a:	6139      	str	r1, [r7, #16]
 800870c:	4629      	mov	r1, r5
 800870e:	eb63 0301 	sbc.w	r3, r3, r1
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008720:	4659      	mov	r1, fp
 8008722:	018b      	lsls	r3, r1, #6
 8008724:	4651      	mov	r1, sl
 8008726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800872a:	4651      	mov	r1, sl
 800872c:	018a      	lsls	r2, r1, #6
 800872e:	4651      	mov	r1, sl
 8008730:	ebb2 0801 	subs.w	r8, r2, r1
 8008734:	4659      	mov	r1, fp
 8008736:	eb63 0901 	sbc.w	r9, r3, r1
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800874a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800874e:	4690      	mov	r8, r2
 8008750:	4699      	mov	r9, r3
 8008752:	4623      	mov	r3, r4
 8008754:	eb18 0303 	adds.w	r3, r8, r3
 8008758:	60bb      	str	r3, [r7, #8]
 800875a:	462b      	mov	r3, r5
 800875c:	eb49 0303 	adc.w	r3, r9, r3
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	f04f 0200 	mov.w	r2, #0
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800876e:	4629      	mov	r1, r5
 8008770:	024b      	lsls	r3, r1, #9
 8008772:	4621      	mov	r1, r4
 8008774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008778:	4621      	mov	r1, r4
 800877a:	024a      	lsls	r2, r1, #9
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008782:	2200      	movs	r2, #0
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
 8008786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800878c:	f7f8 fa8c 	bl	8000ca8 <__aeabi_uldivmod>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4613      	mov	r3, r2
 8008796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008798:	e058      	b.n	800884c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800879a:	4b38      	ldr	r3, [pc, #224]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	099b      	lsrs	r3, r3, #6
 80087a0:	2200      	movs	r2, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	4611      	mov	r1, r2
 80087a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80087aa:	623b      	str	r3, [r7, #32]
 80087ac:	2300      	movs	r3, #0
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
 80087b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	f04f 0000 	mov.w	r0, #0
 80087bc:	f04f 0100 	mov.w	r1, #0
 80087c0:	0159      	lsls	r1, r3, #5
 80087c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087c6:	0150      	lsls	r0, r2, #5
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4641      	mov	r1, r8
 80087ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80087d2:	4649      	mov	r1, r9
 80087d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087ec:	ebb2 040a 	subs.w	r4, r2, sl
 80087f0:	eb63 050b 	sbc.w	r5, r3, fp
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	00eb      	lsls	r3, r5, #3
 80087fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008802:	00e2      	lsls	r2, r4, #3
 8008804:	4614      	mov	r4, r2
 8008806:	461d      	mov	r5, r3
 8008808:	4643      	mov	r3, r8
 800880a:	18e3      	adds	r3, r4, r3
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	464b      	mov	r3, r9
 8008810:	eb45 0303 	adc.w	r3, r5, r3
 8008814:	607b      	str	r3, [r7, #4]
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008822:	4629      	mov	r1, r5
 8008824:	028b      	lsls	r3, r1, #10
 8008826:	4621      	mov	r1, r4
 8008828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800882c:	4621      	mov	r1, r4
 800882e:	028a      	lsls	r2, r1, #10
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008836:	2200      	movs	r2, #0
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	61fa      	str	r2, [r7, #28]
 800883c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008840:	f7f8 fa32 	bl	8000ca8 <__aeabi_uldivmod>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4613      	mov	r3, r2
 800884a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_RCC_GetSysClockFreq+0x200>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	0c1b      	lsrs	r3, r3, #16
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	3301      	adds	r3, #1
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800885c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800885e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008860:	fbb2 f3f3 	udiv	r3, r2, r3
 8008864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008866:	e002      	b.n	800886e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <HAL_RCC_GetSysClockFreq+0x204>)
 800886a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800886c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800886e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008870:	4618      	mov	r0, r3
 8008872:	3750      	adds	r7, #80	; 0x50
 8008874:	46bd      	mov	sp, r7
 8008876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800887a:	bf00      	nop
 800887c:	40023800 	.word	0x40023800
 8008880:	00f42400 	.word	0x00f42400
 8008884:	007a1200 	.word	0x007a1200

08008888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800888c:	4b03      	ldr	r3, [pc, #12]	; (800889c <HAL_RCC_GetHCLKFreq+0x14>)
 800888e:	681b      	ldr	r3, [r3, #0]
}
 8008890:	4618      	mov	r0, r3
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	20000094 	.word	0x20000094

080088a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088a4:	f7ff fff0 	bl	8008888 <HAL_RCC_GetHCLKFreq>
 80088a8:	4602      	mov	r2, r0
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	0a9b      	lsrs	r3, r3, #10
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	4903      	ldr	r1, [pc, #12]	; (80088c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088b6:	5ccb      	ldrb	r3, [r1, r3]
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088bc:	4618      	mov	r0, r3
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40023800 	.word	0x40023800
 80088c4:	08015d88 	.word	0x08015d88

080088c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088cc:	f7ff ffdc 	bl	8008888 <HAL_RCC_GetHCLKFreq>
 80088d0:	4602      	mov	r2, r0
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	0b5b      	lsrs	r3, r3, #13
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	4903      	ldr	r1, [pc, #12]	; (80088ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80088de:	5ccb      	ldrb	r3, [r1, r3]
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40023800 	.word	0x40023800
 80088ec:	08015d88 	.word	0x08015d88

080088f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10b      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008920:	2b00      	cmp	r3, #0
 8008922:	d075      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008924:	4b91      	ldr	r3, [pc, #580]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800892a:	f7fd ff2b 	bl	8006784 <HAL_GetTick>
 800892e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008930:	e008      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008932:	f7fd ff27 	bl	8006784 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d901      	bls.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e189      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008944:	4b8a      	ldr	r3, [pc, #552]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f0      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	019a      	lsls	r2, r3, #6
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	071b      	lsls	r3, r3, #28
 8008968:	4981      	ldr	r1, [pc, #516]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800896a:	4313      	orrs	r3, r2
 800896c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01f      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800897c:	4b7c      	ldr	r3, [pc, #496]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800897e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008982:	0f1b      	lsrs	r3, r3, #28
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	019a      	lsls	r2, r3, #6
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	061b      	lsls	r3, r3, #24
 8008996:	431a      	orrs	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	071b      	lsls	r3, r3, #28
 800899c:	4974      	ldr	r1, [pc, #464]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80089a4:	4b72      	ldr	r3, [pc, #456]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089aa:	f023 021f 	bic.w	r2, r3, #31
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	496e      	ldr	r1, [pc, #440]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00d      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	019a      	lsls	r2, r3, #6
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	071b      	lsls	r3, r3, #28
 80089dc:	4964      	ldr	r1, [pc, #400]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089e4:	4b61      	ldr	r3, [pc, #388]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089ea:	f7fd fecb 	bl	8006784 <HAL_GetTick>
 80089ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089f0:	e008      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80089f2:	f7fd fec7 	bl	8006784 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e129      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a04:	4b5a      	ldr	r3, [pc, #360]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d105      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d079      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a28:	4b52      	ldr	r3, [pc, #328]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a2e:	f7fd fea9 	bl	8006784 <HAL_GetTick>
 8008a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a34:	e008      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008a36:	f7fd fea5 	bl	8006784 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d901      	bls.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e107      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a48:	4b49      	ldr	r3, [pc, #292]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a54:	d0ef      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d020      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a62:	4b43      	ldr	r3, [pc, #268]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a68:	0f1b      	lsrs	r3, r3, #28
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	019a      	lsls	r2, r3, #6
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	061b      	lsls	r3, r3, #24
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	071b      	lsls	r3, r3, #28
 8008a82:	493b      	ldr	r1, [pc, #236]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a8a:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	4934      	ldr	r1, [pc, #208]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01e      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	0e1b      	lsrs	r3, r3, #24
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	019a      	lsls	r2, r3, #6
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	061b      	lsls	r3, r3, #24
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	071b      	lsls	r3, r3, #28
 8008ad0:	4927      	ldr	r1, [pc, #156]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ade:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	4922      	ldr	r1, [pc, #136]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008aee:	4b21      	ldr	r3, [pc, #132]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008af4:	f7fd fe46 	bl	8006784 <HAL_GetTick>
 8008af8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008afa:	e008      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008afc:	f7fd fe42 	bl	8006784 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e0a4      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b0e:	4b18      	ldr	r3, [pc, #96]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b1a:	d1ef      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0320 	and.w	r3, r3, #32
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 808b 	beq.w	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b38:	6413      	str	r3, [r2, #64]	; 0x40
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a0b      	ldr	r2, [pc, #44]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b52:	f7fd fe17 	bl	8006784 <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b58:	e010      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b5a:	f7fd fe13 	bl	8006784 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d909      	bls.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e075      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008b6c:	42470068 	.word	0x42470068
 8008b70:	40023800 	.word	0x40023800
 8008b74:	42470070 	.word	0x42470070
 8008b78:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b7c:	4b38      	ldr	r3, [pc, #224]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0e8      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b88:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02f      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d028      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bb0:	4b2d      	ldr	r3, [pc, #180]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008bbc:	4a29      	ldr	r2, [pc, #164]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008bc2:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d114      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008bce:	f7fd fdd9 	bl	8006784 <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bd4:	e00a      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bd6:	f7fd fdd5 	bl	8006784 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d901      	bls.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e035      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bec:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0ee      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c04:	d10d      	bne.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008c06:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1a:	4912      	ldr	r1, [pc, #72]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	608b      	str	r3, [r1, #8]
 8008c20:	e005      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c2c:	6093      	str	r3, [r2, #8]
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c3a:	490a      	ldr	r1, [pc, #40]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008c54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	40007000 	.word	0x40007000
 8008c64:	40023800 	.word	0x40023800
 8008c68:	42470e40 	.word	0x42470e40
 8008c6c:	424711e0 	.word	0x424711e0

08008c70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e066      	b.n	8008d54 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7f5b      	ldrb	r3, [r3, #29]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7fb fbfa 	bl	8004490 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	22ca      	movs	r2, #202	; 0xca
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2253      	movs	r2, #83	; 0x53
 8008cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f927 	bl	8008f06 <RTC_EnterInitMode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d12c      	bne.n	8008d1c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6812      	ldr	r2, [r2, #0]
 8008ccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6899      	ldr	r1, [r3, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	68d2      	ldr	r2, [r2, #12]
 8008cfc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6919      	ldr	r1, [r3, #16]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	041a      	lsls	r2, r3, #16
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f92e 	bl	8008f74 <RTC_ExitInitMode>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d113      	bne.n	8008d4a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d30:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699a      	ldr	r2, [r3, #24]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	22ff      	movs	r2, #255	; 0xff
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008d8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	0c1b      	lsrs	r3, r3, #16
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	0d9b      	lsrs	r3, r3, #22
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11a      	bne.n	8008e0e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f8ee 	bl	8008fbe <RTC_Bcd2ToByte>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	785b      	ldrb	r3, [r3, #1]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f8e5 	bl	8008fbe <RTC_Bcd2ToByte>
 8008df4:	4603      	mov	r3, r0
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	789b      	ldrb	r3, [r3, #2]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f8dc 	bl	8008fbe <RTC_Bcd2ToByte>
 8008e06:	4603      	mov	r3, r0
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	0c1b      	lsrs	r3, r3, #16
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	0a1b      	lsrs	r3, r3, #8
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 031f 	and.w	r3, r3, #31
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	0b5b      	lsrs	r3, r3, #13
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d11a      	bne.n	8008eac <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	78db      	ldrb	r3, [r3, #3]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 f89f 	bl	8008fbe <RTC_Bcd2ToByte>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	785b      	ldrb	r3, [r3, #1]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 f896 	bl	8008fbe <RTC_Bcd2ToByte>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	789b      	ldrb	r3, [r3, #2]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f88d 	bl	8008fbe <RTC_Bcd2ToByte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ed0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ed2:	f7fd fc57 	bl	8006784 <HAL_GetTick>
 8008ed6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ed8:	e009      	b.n	8008eee <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eda:	f7fd fc53 	bl	8006784 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ee8:	d901      	bls.n	8008eee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e007      	b.n	8008efe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0ee      	beq.n	8008eda <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d122      	bne.n	8008f6a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f34:	f7fd fc26 	bl	8006784 <HAL_GetTick>
 8008f38:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f3a:	e00c      	b.n	8008f56 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f3c:	f7fd fc22 	bl	8006784 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f4a:	d904      	bls.n	8008f56 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <RTC_EnterInitMode+0x64>
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d1e8      	bne.n	8008f3c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10a      	bne.n	8008fb4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ff89 	bl	8008eb6 <HAL_RTC_WaitForSynchro>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2204      	movs	r2, #4
 8008fae:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	091b      	lsrs	r3, r3, #4
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	b2db      	uxtb	r3, r3
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e022      	b.n	800904e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7fb fa82 	bl	8004524 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2203      	movs	r2, #3
 8009024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f815 	bl	8009058 <HAL_SD_InitCard>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e00a      	b.n	800904e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009058:	b5b0      	push	{r4, r5, r7, lr}
 800905a:	b08e      	sub	sp, #56	; 0x38
 800905c:	af04      	add	r7, sp, #16
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009060:	2300      	movs	r3, #0
 8009062:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009068:	2300      	movs	r3, #0
 800906a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009070:	2300      	movs	r3, #0
 8009072:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009074:	2376      	movs	r3, #118	; 0x76
 8009076:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681d      	ldr	r5, [r3, #0]
 800907c:	466c      	mov	r4, sp
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009090:	4628      	mov	r0, r5
 8009092:	f002 ffb9 	bl	800c008 <SDIO_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800909c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e04f      	b.n	8009148 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80090a8:	4b29      	ldr	r3, [pc, #164]	; (8009150 <HAL_SD_InitCard+0xf8>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 fff1 	bl	800c09a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80090b8:	4b25      	ldr	r3, [pc, #148]	; (8009150 <HAL_SD_InitCard+0xf8>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80090be:	2002      	movs	r0, #2
 80090c0:	f7fd fb6c 	bl	800679c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fe69 	bl	8009d9c <SD_PowerON>
 80090ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e02e      	b.n	8009148 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fd88 	bl	8009c00 <SD_InitCard>
 80090f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e01b      	b.n	8009148 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009118:	4618      	mov	r0, r3
 800911a:	f003 f850 	bl	800c1be <SDMMC_CmdBlockLength>
 800911e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00f      	beq.n	8009146 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <HAL_SD_InitCard+0xfc>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3728      	adds	r7, #40	; 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bdb0      	pop	{r4, r5, r7, pc}
 8009150:	422580a0 	.word	0x422580a0
 8009154:	004005ff 	.word	0x004005ff

08009158 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b092      	sub	sp, #72	; 0x48
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009166:	f7fd fb0d 	bl	8006784 <HAL_GetTick>
 800916a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d107      	bne.n	800918a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e1bd      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	f040 81b0 	bne.w	80094f8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800919e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	441a      	add	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d907      	bls.n	80091bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e1a4      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2203      	movs	r2, #3
 80091c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2200      	movs	r2, #0
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d002      	beq.n	80091da <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	025b      	lsls	r3, r3, #9
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	025b      	lsls	r3, r3, #9
 80091e4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80091e6:	2390      	movs	r3, #144	; 0x90
 80091e8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80091ea:	2302      	movs	r3, #2
 80091ec:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f107 0214 	add.w	r2, r7, #20
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f002 ffb0 	bl	800c166 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d90a      	bls.n	8009222 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2202      	movs	r2, #2
 8009210:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009218:	4618      	mov	r0, r3
 800921a:	f003 f814 	bl	800c246 <SDMMC_CmdReadMultiBlock>
 800921e:	6478      	str	r0, [r7, #68]	; 0x44
 8009220:	e009      	b.n	8009236 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800922e:	4618      	mov	r0, r3
 8009230:	f002 ffe7 	bl	800c202 <SDMMC_CmdReadSingleBlock>
 8009234:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009238:	2b00      	cmp	r3, #0
 800923a:	d012      	beq.n	8009262 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a7a      	ldr	r2, [pc, #488]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924a:	431a      	orrs	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e151      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009266:	e061      	b.n	800932c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d03c      	beq.n	80092f0 <HAL_SD_ReadBlocks+0x198>
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d039      	beq.n	80092f0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800927c:	2300      	movs	r3, #0
 800927e:	643b      	str	r3, [r7, #64]	; 0x40
 8009280:	e033      	b.n	80092ea <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f002 fee9 	bl	800c05e <SDIO_ReadFIFO>
 800928c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	b2da      	uxtb	r2, r3
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	3301      	adds	r3, #1
 800929a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	3b01      	subs	r3, #1
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	3301      	adds	r3, #1
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b4:	3b01      	subs	r3, #1
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	3301      	adds	r3, #1
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ca:	3b01      	subs	r3, #1
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	0e1b      	lsrs	r3, r3, #24
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	3301      	adds	r3, #1
 80092dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e0:	3b01      	subs	r3, #1
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80092e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e6:	3301      	adds	r3, #1
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
 80092ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ec:	2b07      	cmp	r3, #7
 80092ee:	d9c8      	bls.n	8009282 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80092f0:	f7fd fa48 	bl	8006784 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d902      	bls.n	8009306 <HAL_SD_ReadBlocks+0x1ae>
 8009300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009302:	2b00      	cmp	r3, #0
 8009304:	d112      	bne.n	800932c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a48      	ldr	r2, [pc, #288]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e0ec      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009332:	f240 332a 	movw	r3, #810	; 0x32a
 8009336:	4013      	ands	r3, r2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d095      	beq.n	8009268 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009346:	2b00      	cmp	r3, #0
 8009348:	d022      	beq.n	8009390 <HAL_SD_ReadBlocks+0x238>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d91f      	bls.n	8009390 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	2b03      	cmp	r3, #3
 8009356:	d01b      	beq.n	8009390 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f002 ffd9 	bl	800c314 <SDMMC_CmdStopTransfer>
 8009362:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009366:	2b00      	cmp	r3, #0
 8009368:	d012      	beq.n	8009390 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a2f      	ldr	r2, [pc, #188]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009378:	431a      	orrs	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e0ba      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d012      	beq.n	80093c4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a22      	ldr	r2, [pc, #136]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	f043 0208 	orr.w	r2, r3, #8
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0a0      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d012      	beq.n	80093f8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a15      	ldr	r2, [pc, #84]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	f043 0202 	orr.w	r2, r3, #2
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e086      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d063      	beq.n	80094ce <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a08      	ldr	r2, [pc, #32]	; (800942c <HAL_SD_ReadBlocks+0x2d4>)
 800940c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	f043 0220 	orr.w	r2, r3, #32
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e06c      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
 800942c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f002 fe12 	bl	800c05e <SDIO_ReadFIFO>
 800943a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	b2da      	uxtb	r2, r3
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009446:	3301      	adds	r3, #1
 8009448:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	3b01      	subs	r3, #1
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b2da      	uxtb	r2, r3
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	3301      	adds	r3, #1
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009462:	3b01      	subs	r3, #1
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	3301      	adds	r3, #1
 8009474:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009478:	3b01      	subs	r3, #1
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	0e1b      	lsrs	r3, r3, #24
 8009480:	b2da      	uxtb	r2, r3
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	3301      	adds	r3, #1
 800948a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	3b01      	subs	r3, #1
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009492:	f7fd f977 	bl	8006784 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800949e:	429a      	cmp	r2, r3
 80094a0:	d902      	bls.n	80094a8 <HAL_SD_ReadBlocks+0x350>
 80094a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d112      	bne.n	80094ce <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a18      	ldr	r2, [pc, #96]	; (8009510 <HAL_SD_ReadBlocks+0x3b8>)
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e01b      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <HAL_SD_ReadBlocks+0x38a>
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1a6      	bne.n	8009430 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	e006      	b.n	8009506 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3748      	adds	r7, #72	; 0x48
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	004005ff 	.word	0x004005ff

08009514 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b092      	sub	sp, #72	; 0x48
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009522:	f7fd f92f 	bl	8006784 <HAL_GetTick>
 8009526:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d107      	bne.n	8009546 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e166      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b01      	cmp	r3, #1
 8009550:	f040 8159 	bne.w	8009806 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800955a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	441a      	add	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009564:	429a      	cmp	r2, r3
 8009566:	d907      	bls.n	8009578 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e14d      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2203      	movs	r2, #3
 800957c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2200      	movs	r2, #0
 8009586:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958c:	2b01      	cmp	r3, #1
 800958e:	d002      	beq.n	8009596 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	025b      	lsls	r3, r3, #9
 8009594:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009596:	f04f 33ff 	mov.w	r3, #4294967295
 800959a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	025b      	lsls	r3, r3, #9
 80095a0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80095a2:	2390      	movs	r3, #144	; 0x90
 80095a4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80095a6:	2300      	movs	r3, #0
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80095ae:	2301      	movs	r3, #1
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f107 0218 	add.w	r2, r7, #24
 80095ba:	4611      	mov	r1, r2
 80095bc:	4618      	mov	r0, r3
 80095be:	f002 fdd2 	bl	800c166 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d90a      	bls.n	80095de <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095d4:	4618      	mov	r0, r3
 80095d6:	f002 fe7a 	bl	800c2ce <SDMMC_CmdWriteMultiBlock>
 80095da:	6478      	str	r0, [r7, #68]	; 0x44
 80095dc:	e009      	b.n	80095f2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2210      	movs	r2, #16
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095ea:	4618      	mov	r0, r3
 80095ec:	f002 fe4d 	bl	800c28a <SDMMC_CmdWriteSingleBlock>
 80095f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80095f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d012      	beq.n	800961e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a87      	ldr	r2, [pc, #540]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009606:	431a      	orrs	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e0fa      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009622:	e065      	b.n	80096f0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d040      	beq.n	80096b4 <HAL_SD_WriteBlocks+0x1a0>
 8009632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d03d      	beq.n	80096b4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009638:	2300      	movs	r3, #0
 800963a:	643b      	str	r3, [r7, #64]	; 0x40
 800963c:	e037      	b.n	80096ae <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	3301      	adds	r3, #1
 8009648:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800964a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964c:	3b01      	subs	r3, #1
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	021a      	lsls	r2, r3, #8
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4313      	orrs	r3, r2
 800965a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	3301      	adds	r3, #1
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	3b01      	subs	r3, #1
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	041a      	lsls	r2, r3, #16
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	3301      	adds	r3, #1
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967c:	3b01      	subs	r3, #1
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	061a      	lsls	r2, r3, #24
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	4313      	orrs	r3, r2
 800968a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	3301      	adds	r3, #1
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009694:	3b01      	subs	r3, #1
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f107 0214 	add.w	r2, r7, #20
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f002 fce8 	bl	800c078 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80096a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096aa:	3301      	adds	r3, #1
 80096ac:	643b      	str	r3, [r7, #64]	; 0x40
 80096ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b0:	2b07      	cmp	r3, #7
 80096b2:	d9c4      	bls.n	800963e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80096b4:	f7fd f866 	bl	8006784 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d902      	bls.n	80096ca <HAL_SD_WriteBlocks+0x1b6>
 80096c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d112      	bne.n	80096f0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a53      	ldr	r2, [pc, #332]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d8:	431a      	orrs	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e091      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f6:	f240 331a 	movw	r3, #794	; 0x31a
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d091      	beq.n	8009624 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	d022      	beq.n	8009754 <HAL_SD_WriteBlocks+0x240>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d91f      	bls.n	8009754 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009718:	2b03      	cmp	r3, #3
 800971a:	d01b      	beq.n	8009754 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4618      	mov	r0, r3
 8009722:	f002 fdf7 	bl	800c314 <SDMMC_CmdStopTransfer>
 8009726:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800972a:	2b00      	cmp	r3, #0
 800972c:	d012      	beq.n	8009754 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a3a      	ldr	r2, [pc, #232]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 8009734:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800973a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800973c:	431a      	orrs	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e05f      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d012      	beq.n	8009788 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a2d      	ldr	r2, [pc, #180]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	f043 0208 	orr.w	r2, r3, #8
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e045      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d012      	beq.n	80097bc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a20      	ldr	r2, [pc, #128]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	f043 0202 	orr.w	r2, r3, #2
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e02b      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c2:	f003 0310 	and.w	r3, r3, #16
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d012      	beq.n	80097f0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a13      	ldr	r2, [pc, #76]	; (800981c <HAL_SD_WriteBlocks+0x308>)
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	f043 0210 	orr.w	r2, r3, #16
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e011      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	e006      	b.n	8009814 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
  }
}
 8009814:	4618      	mov	r0, r3
 8009816:	3748      	adds	r7, #72	; 0x48
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	004005ff 	.word	0x004005ff

08009820 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800982e:	0f9b      	lsrs	r3, r3, #30
 8009830:	b2da      	uxtb	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800983a:	0e9b      	lsrs	r3, r3, #26
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	b2da      	uxtb	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800984c:	0e1b      	lsrs	r3, r3, #24
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	b2da      	uxtb	r2, r3
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985e:	0c1b      	lsrs	r3, r3, #16
 8009860:	b2da      	uxtb	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	b2da      	uxtb	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009876:	b2da      	uxtb	r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009880:	0d1b      	lsrs	r3, r3, #20
 8009882:	b29a      	uxth	r2, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	b2da      	uxtb	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800989e:	0bdb      	lsrs	r3, r3, #15
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b0:	0b9b      	lsrs	r3, r3, #14
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098c2:	0b5b      	lsrs	r3, r3, #13
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	0b1b      	lsrs	r3, r3, #12
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2200      	movs	r2, #0
 80098e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d163      	bne.n	80099b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098f4:	009a      	lsls	r2, r3, #2
 80098f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80098fa:	4013      	ands	r3, r2
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009900:	0f92      	lsrs	r2, r2, #30
 8009902:	431a      	orrs	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990c:	0edb      	lsrs	r3, r3, #27
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	b2da      	uxtb	r2, r3
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991e:	0e1b      	lsrs	r3, r3, #24
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009930:	0d5b      	lsrs	r3, r3, #21
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	b2da      	uxtb	r2, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009942:	0c9b      	lsrs	r3, r3, #18
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009954:	0bdb      	lsrs	r3, r3, #15
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	b2da      	uxtb	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	7e1b      	ldrb	r3, [r3, #24]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	3302      	adds	r3, #2
 8009978:	2201      	movs	r2, #1
 800997a:	fa02 f303 	lsl.w	r3, r2, r3
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009982:	fb03 f202 	mul.w	r2, r3, r2
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	7a1b      	ldrb	r3, [r3, #8]
 800998e:	b2db      	uxtb	r3, r3
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	2201      	movs	r2, #1
 8009996:	409a      	lsls	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80099a4:	0a52      	lsrs	r2, r2, #9
 80099a6:	fb03 f202 	mul.w	r2, r3, r2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b4:	661a      	str	r2, [r3, #96]	; 0x60
 80099b6:	e031      	b.n	8009a1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d11d      	bne.n	80099fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	431a      	orrs	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	029a      	lsls	r2, r3, #10
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	661a      	str	r2, [r3, #96]	; 0x60
 80099fa:	e00f      	b.n	8009a1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a58      	ldr	r2, [pc, #352]	; (8009b64 <HAL_SD_GetCardCSD+0x344>)
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e09d      	b.n	8009b58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a20:	0b9b      	lsrs	r3, r3, #14
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a32:	09db      	lsrs	r3, r3, #7
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	0fdb      	lsrs	r3, r3, #31
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	0f5b      	lsrs	r3, r3, #29
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a72:	0e9b      	lsrs	r3, r3, #26
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a84:	0d9b      	lsrs	r3, r3, #22
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	0d5b      	lsrs	r3, r3, #21
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac6:	0bdb      	lsrs	r3, r3, #15
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ada:	0b9b      	lsrs	r3, r3, #14
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aee:	0b5b      	lsrs	r3, r3, #13
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b02:	0b1b      	lsrs	r3, r3, #12
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b16:	0a9b      	lsrs	r3, r3, #10
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	004005ff 	.word	0x004005ff

08009b68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009bcc:	f107 030c 	add.w	r3, r7, #12
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f970 	bl	8009eb8 <SD_SendStatus>
 8009bd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0a5b      	lsrs	r3, r3, #9
 8009bf0:	f003 030f 	and.w	r3, r3, #15
 8009bf4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009bf6:	693b      	ldr	r3, [r7, #16]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c00:	b5b0      	push	{r4, r5, r7, lr}
 8009c02:	b094      	sub	sp, #80	; 0x50
 8009c04:	af04      	add	r7, sp, #16
 8009c06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f002 fa50 	bl	800c0b6 <SDIO_GetPowerState>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c20:	e0b8      	b.n	8009d94 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d02f      	beq.n	8009c8a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f002 fc37 	bl	800c4a2 <SDMMC_CmdSendCID>
 8009c34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <SD_InitCard+0x40>
    {
      return errorstate;
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3e:	e0a9      	b.n	8009d94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 fa7a 	bl	800c140 <SDIO_GetResponse>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2104      	movs	r1, #4
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f002 fa71 	bl	800c140 <SDIO_GetResponse>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2108      	movs	r1, #8
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f002 fa68 	bl	800c140 <SDIO_GetResponse>
 8009c70:	4602      	mov	r2, r0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	210c      	movs	r1, #12
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f002 fa5f 	bl	800c140 <SDIO_GetResponse>
 8009c82:	4602      	mov	r2, r0
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d00d      	beq.n	8009cae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f107 020e 	add.w	r2, r7, #14
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f002 fc3d 	bl	800c51c <SDMMC_CmdSetRelAdd>
 8009ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <SD_InitCard+0xae>
    {
      return errorstate;
 8009caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cac:	e072      	b.n	8009d94 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d036      	beq.n	8009d24 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009cb6:	89fb      	ldrh	r3, [r7, #14]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f002 fc07 	bl	800c4de <SDMMC_CmdSendCSD>
 8009cd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	e05b      	b.n	8009d94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 fa2c 	bl	800c140 <SDIO_GetResponse>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 fa23 	bl	800c140 <SDIO_GetResponse>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2108      	movs	r1, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f002 fa1a 	bl	800c140 <SDIO_GetResponse>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	210c      	movs	r1, #12
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 fa11 	bl	800c140 <SDIO_GetResponse>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2104      	movs	r1, #4
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 fa08 	bl	800c140 <SDIO_GetResponse>
 8009d30:	4603      	mov	r3, r0
 8009d32:	0d1a      	lsrs	r2, r3, #20
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fd6e 	bl	8009820 <HAL_SD_GetCardCSD>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d4e:	e021      	b.n	8009d94 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	461c      	mov	r4, r3
 8009d5e:	4615      	mov	r5, r2
 8009d60:	4622      	mov	r2, r4
 8009d62:	462b      	mov	r3, r5
 8009d64:	4608      	mov	r0, r1
 8009d66:	f002 faf7 	bl	800c358 <SDMMC_CmdSelDesel>
 8009d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <SD_InitCard+0x176>
  {
    return errorstate;
 8009d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d74:	e00e      	b.n	8009d94 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681d      	ldr	r5, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	466c      	mov	r4, sp
 8009d7e:	f103 0210 	add.w	r2, r3, #16
 8009d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d88:	3304      	adds	r3, #4
 8009d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f002 f93b 	bl	800c008 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3740      	adds	r7, #64	; 0x40
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bdb0      	pop	{r4, r5, r7, pc}

08009d9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	2300      	movs	r3, #0
 8009dae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 faf2 	bl	800c39e <SDMMC_CmdGoIdleState>
 8009dba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	e072      	b.n	8009eac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 fb05 	bl	800c3da <SDMMC_CmdOperCond>
 8009dd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00d      	beq.n	8009df4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f002 fadb 	bl	800c39e <SDMMC_CmdGoIdleState>
 8009de8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <SD_PowerON+0x5e>
    {
      return errorstate;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	e05b      	b.n	8009eac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d137      	bne.n	8009e72 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f002 fb05 	bl	800c418 <SDMMC_CmdAppCommand>
 8009e0e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d02d      	beq.n	8009e72 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e1a:	e047      	b.n	8009eac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f002 faf8 	bl	800c418 <SDMMC_CmdAppCommand>
 8009e28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <SD_PowerON+0x98>
    {
      return errorstate;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	e03b      	b.n	8009eac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	491e      	ldr	r1, [pc, #120]	; (8009eb4 <SD_PowerON+0x118>)
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f002 fb0e 	bl	800c45c <SDMMC_CmdAppOperCommand>
 8009e40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e4c:	e02e      	b.n	8009eac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2100      	movs	r1, #0
 8009e54:	4618      	mov	r0, r3
 8009e56:	f002 f973 	bl	800c140 <SDIO_GetResponse>
 8009e5a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	0fdb      	lsrs	r3, r3, #31
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <SD_PowerON+0xcc>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e000      	b.n	8009e6a <SD_PowerON+0xce>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	613b      	str	r3, [r7, #16]

    count++;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d802      	bhi.n	8009e82 <SD_PowerON+0xe6>
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0cc      	beq.n	8009e1c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d902      	bls.n	8009e92 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e90:	e00c      	b.n	8009eac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8009ea2:	e002      	b.n	8009eaa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	c1100000 	.word	0xc1100000

08009eb8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ecc:	e018      	b.n	8009f00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f002 fb3f 	bl	800c55e <SDMMC_CmdSendStatus>
 8009ee0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e009      	b.n	8009f00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 f924 	bl	800c140 <SDIO_GetResponse>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e07b      	b.n	800a012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d108      	bne.n	8009f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f2a:	d009      	beq.n	8009f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	61da      	str	r2, [r3, #28]
 8009f32:	e005      	b.n	8009f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fa fb80 	bl	8004660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f92:	431a      	orrs	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fc4:	ea42 0103 	orr.w	r1, r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	0c1b      	lsrs	r3, r3, #16
 8009fde:	f003 0104 	and.w	r1, r3, #4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	f003 0210 	and.w	r2, r3, #16
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b088      	sub	sp, #32
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	603b      	str	r3, [r7, #0]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_SPI_Transmit+0x22>
 800a038:	2302      	movs	r3, #2
 800a03a:	e126      	b.n	800a28a <HAL_SPI_Transmit+0x270>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a044:	f7fc fb9e 	bl	8006784 <HAL_GetTick>
 800a048:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b01      	cmp	r3, #1
 800a058:	d002      	beq.n	800a060 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a05a:	2302      	movs	r3, #2
 800a05c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a05e:	e10b      	b.n	800a278 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <HAL_SPI_Transmit+0x52>
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a070:	e102      	b.n	800a278 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2203      	movs	r2, #3
 800a076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	88fa      	ldrh	r2, [r7, #6]
 800a08a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b8:	d10f      	bne.n	800a0da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	d007      	beq.n	800a0f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a100:	d14b      	bne.n	800a19a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <HAL_SPI_Transmit+0xf6>
 800a10a:	8afb      	ldrh	r3, [r7, #22]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d13e      	bne.n	800a18e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	881a      	ldrh	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	1c9a      	adds	r2, r3, #2
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a134:	e02b      	b.n	800a18e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b02      	cmp	r3, #2
 800a142:	d112      	bne.n	800a16a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a148:	881a      	ldrh	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	1c9a      	adds	r2, r3, #2
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	86da      	strh	r2, [r3, #54]	; 0x36
 800a168:	e011      	b.n	800a18e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a16a:	f7fc fb0b 	bl	8006784 <HAL_GetTick>
 800a16e:	4602      	mov	r2, r0
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d803      	bhi.n	800a182 <HAL_SPI_Transmit+0x168>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a180:	d102      	bne.n	800a188 <HAL_SPI_Transmit+0x16e>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a18c:	e074      	b.n	800a278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ce      	bne.n	800a136 <HAL_SPI_Transmit+0x11c>
 800a198:	e04c      	b.n	800a234 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <HAL_SPI_Transmit+0x18e>
 800a1a2:	8afb      	ldrh	r3, [r7, #22]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d140      	bne.n	800a22a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	7812      	ldrb	r2, [r2, #0]
 800a1b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a1ce:	e02c      	b.n	800a22a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d113      	bne.n	800a206 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	330c      	adds	r3, #12
 800a1e8:	7812      	ldrb	r2, [r2, #0]
 800a1ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	86da      	strh	r2, [r3, #54]	; 0x36
 800a204:	e011      	b.n	800a22a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a206:	f7fc fabd 	bl	8006784 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d803      	bhi.n	800a21e <HAL_SPI_Transmit+0x204>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21c:	d102      	bne.n	800a224 <HAL_SPI_Transmit+0x20a>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a228:	e026      	b.n	800a278 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a22e:	b29b      	uxth	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1cd      	bne.n	800a1d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f8b3 	bl	800a3a4 <SPI_EndRxTxTransaction>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2220      	movs	r2, #32
 800a248:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a252:	2300      	movs	r3, #0
 800a254:	613b      	str	r3, [r7, #16]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	77fb      	strb	r3, [r7, #31]
 800a274:	e000      	b.n	800a278 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a276:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a288:	7ffb      	ldrb	r3, [r7, #31]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2a4:	f7fc fa6e 	bl	8006784 <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	1a9b      	subs	r3, r3, r2
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a2b4:	f7fc fa66 	bl	8006784 <HAL_GetTick>
 800a2b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a2ba:	4b39      	ldr	r3, [pc, #228]	; (800a3a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	015b      	lsls	r3, r3, #5
 800a2c0:	0d1b      	lsrs	r3, r3, #20
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	fb02 f303 	mul.w	r3, r2, r3
 800a2c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ca:	e054      	b.n	800a376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d050      	beq.n	800a376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2d4:	f7fc fa56 	bl	8006784 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d902      	bls.n	800a2ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d13d      	bne.n	800a366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a2f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a302:	d111      	bne.n	800a328 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30c:	d004      	beq.n	800a318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a316:	d107      	bne.n	800a328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a330:	d10f      	bne.n	800a352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e017      	b.n	800a396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3b01      	subs	r3, #1
 800a374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4013      	ands	r3, r2
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	429a      	cmp	r2, r3
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	429a      	cmp	r2, r3
 800a392:	d19b      	bne.n	800a2cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000094 	.word	0x20000094

0800a3a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b088      	sub	sp, #32
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a3b0:	4b1b      	ldr	r3, [pc, #108]	; (800a420 <SPI_EndRxTxTransaction+0x7c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a1b      	ldr	r2, [pc, #108]	; (800a424 <SPI_EndRxTxTransaction+0x80>)
 800a3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ba:	0d5b      	lsrs	r3, r3, #21
 800a3bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3c0:	fb02 f303 	mul.w	r3, r2, r3
 800a3c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ce:	d112      	bne.n	800a3f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2180      	movs	r1, #128	; 0x80
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff ff5a 	bl	800a294 <SPI_WaitFlagStateUntilTimeout>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d016      	beq.n	800a414 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ea:	f043 0220 	orr.w	r2, r3, #32
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e00f      	b.n	800a416 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00a      	beq.n	800a412 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40c:	2b80      	cmp	r3, #128	; 0x80
 800a40e:	d0f2      	beq.n	800a3f6 <SPI_EndRxTxTransaction+0x52>
 800a410:	e000      	b.n	800a414 <SPI_EndRxTxTransaction+0x70>
        break;
 800a412:	bf00      	nop
  }

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000094 	.word	0x20000094
 800a424:	165e9f81 	.word	0x165e9f81

0800a428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e041      	b.n	800a4be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fa fdb8 	bl	8004fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f000 fca8 	bl	800adbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d001      	beq.n	800a4e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e04e      	b.n	800a57e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f042 0201 	orr.w	r2, r2, #1
 800a4f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a23      	ldr	r2, [pc, #140]	; (800a58c <HAL_TIM_Base_Start_IT+0xc4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d022      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a50a:	d01d      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <HAL_TIM_Base_Start_IT+0xc8>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d018      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a1e      	ldr	r2, [pc, #120]	; (800a594 <HAL_TIM_Base_Start_IT+0xcc>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d013      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a1c      	ldr	r2, [pc, #112]	; (800a598 <HAL_TIM_Base_Start_IT+0xd0>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d00e      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a1b      	ldr	r2, [pc, #108]	; (800a59c <HAL_TIM_Base_Start_IT+0xd4>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d009      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a19      	ldr	r2, [pc, #100]	; (800a5a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x80>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a18      	ldr	r2, [pc, #96]	; (800a5a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d111      	bne.n	800a56c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b06      	cmp	r3, #6
 800a558:	d010      	beq.n	800a57c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0201 	orr.w	r2, r2, #1
 800a568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56a:	e007      	b.n	800a57c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f042 0201 	orr.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40010000 	.word	0x40010000
 800a590:	40000400 	.word	0x40000400
 800a594:	40000800 	.word	0x40000800
 800a598:	40000c00 	.word	0x40000c00
 800a59c:	40010400 	.word	0x40010400
 800a5a0:	40014000 	.word	0x40014000
 800a5a4:	40001800 	.word	0x40001800

0800a5a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0201 	bic.w	r2, r2, #1
 800a5be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6a1a      	ldr	r2, [r3, #32]
 800a5c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10f      	bne.n	800a5f0 <HAL_TIM_Base_Stop_IT+0x48>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6a1a      	ldr	r2, [r3, #32]
 800a5d6:	f240 4344 	movw	r3, #1092	; 0x444
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d107      	bne.n	800a5f0 <HAL_TIM_Base_Stop_IT+0x48>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e041      	b.n	800a69c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f839 	bl	800a6a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3304      	adds	r3, #4
 800a642:	4619      	mov	r1, r3
 800a644:	4610      	mov	r0, r2
 800a646:	f000 fbb9 	bl	800adbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <HAL_TIM_PWM_Start+0x24>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	bf14      	ite	ne
 800a6d4:	2301      	movne	r3, #1
 800a6d6:	2300      	moveq	r3, #0
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	e022      	b.n	800a722 <HAL_TIM_PWM_Start+0x6a>
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d109      	bne.n	800a6f6 <HAL_TIM_PWM_Start+0x3e>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	bf14      	ite	ne
 800a6ee:	2301      	movne	r3, #1
 800a6f0:	2300      	moveq	r3, #0
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	e015      	b.n	800a722 <HAL_TIM_PWM_Start+0x6a>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d109      	bne.n	800a710 <HAL_TIM_PWM_Start+0x58>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b01      	cmp	r3, #1
 800a706:	bf14      	ite	ne
 800a708:	2301      	movne	r3, #1
 800a70a:	2300      	moveq	r3, #0
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	e008      	b.n	800a722 <HAL_TIM_PWM_Start+0x6a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b01      	cmp	r3, #1
 800a71a:	bf14      	ite	ne
 800a71c:	2301      	movne	r3, #1
 800a71e:	2300      	moveq	r3, #0
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e07c      	b.n	800a824 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d104      	bne.n	800a73a <HAL_TIM_PWM_Start+0x82>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a738:	e013      	b.n	800a762 <HAL_TIM_PWM_Start+0xaa>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d104      	bne.n	800a74a <HAL_TIM_PWM_Start+0x92>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a748:	e00b      	b.n	800a762 <HAL_TIM_PWM_Start+0xaa>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d104      	bne.n	800a75a <HAL_TIM_PWM_Start+0xa2>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a758:	e003      	b.n	800a762 <HAL_TIM_PWM_Start+0xaa>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2202      	movs	r2, #2
 800a75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2201      	movs	r2, #1
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 fe10 	bl	800b390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a2d      	ldr	r2, [pc, #180]	; (800a82c <HAL_TIM_PWM_Start+0x174>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d004      	beq.n	800a784 <HAL_TIM_PWM_Start+0xcc>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a2c      	ldr	r2, [pc, #176]	; (800a830 <HAL_TIM_PWM_Start+0x178>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d101      	bne.n	800a788 <HAL_TIM_PWM_Start+0xd0>
 800a784:	2301      	movs	r3, #1
 800a786:	e000      	b.n	800a78a <HAL_TIM_PWM_Start+0xd2>
 800a788:	2300      	movs	r3, #0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a79c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a22      	ldr	r2, [pc, #136]	; (800a82c <HAL_TIM_PWM_Start+0x174>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d022      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d01d      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a1f      	ldr	r2, [pc, #124]	; (800a834 <HAL_TIM_PWM_Start+0x17c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d018      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1d      	ldr	r2, [pc, #116]	; (800a838 <HAL_TIM_PWM_Start+0x180>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d013      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a1c      	ldr	r2, [pc, #112]	; (800a83c <HAL_TIM_PWM_Start+0x184>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d00e      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a16      	ldr	r2, [pc, #88]	; (800a830 <HAL_TIM_PWM_Start+0x178>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d009      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a18      	ldr	r2, [pc, #96]	; (800a840 <HAL_TIM_PWM_Start+0x188>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <HAL_TIM_PWM_Start+0x136>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a16      	ldr	r2, [pc, #88]	; (800a844 <HAL_TIM_PWM_Start+0x18c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d111      	bne.n	800a812 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f003 0307 	and.w	r3, r3, #7
 800a7f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2b06      	cmp	r3, #6
 800a7fe:	d010      	beq.n	800a822 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a810:	e007      	b.n	800a822 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f042 0201 	orr.w	r2, r2, #1
 800a820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	40010000 	.word	0x40010000
 800a830:	40010400 	.word	0x40010400
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40014000 	.word	0x40014000
 800a844:	40001800 	.word	0x40001800

0800a848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d122      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d11b      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0202 	mvn.w	r2, #2
 800a874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa77 	bl	800ad7e <HAL_TIM_IC_CaptureCallback>
 800a890:	e005      	b.n	800a89e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa69 	bl	800ad6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa7a 	bl	800ad92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d122      	bne.n	800a8f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d11b      	bne.n	800a8f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0204 	mvn.w	r2, #4
 800a8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa4d 	bl	800ad7e <HAL_TIM_IC_CaptureCallback>
 800a8e4:	e005      	b.n	800a8f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fa3f 	bl	800ad6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa50 	bl	800ad92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b08      	cmp	r3, #8
 800a904:	d122      	bne.n	800a94c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b08      	cmp	r3, #8
 800a912:	d11b      	bne.n	800a94c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f06f 0208 	mvn.w	r2, #8
 800a91c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2204      	movs	r2, #4
 800a922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 0303 	and.w	r3, r3, #3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa23 	bl	800ad7e <HAL_TIM_IC_CaptureCallback>
 800a938:	e005      	b.n	800a946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa15 	bl	800ad6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa26 	bl	800ad92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	f003 0310 	and.w	r3, r3, #16
 800a956:	2b10      	cmp	r3, #16
 800a958:	d122      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f003 0310 	and.w	r3, r3, #16
 800a964:	2b10      	cmp	r3, #16
 800a966:	d11b      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0210 	mvn.w	r2, #16
 800a970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2208      	movs	r2, #8
 800a976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9f9 	bl	800ad7e <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f9eb 	bl	800ad6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f9fc 	bl	800ad92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d10e      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d107      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f06f 0201 	mvn.w	r2, #1
 800a9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7f9 fc4a 	bl	8004260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d6:	2b80      	cmp	r3, #128	; 0x80
 800a9d8:	d10e      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e4:	2b80      	cmp	r3, #128	; 0x80
 800a9e6:	d107      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fdca 	bl	800b58c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa02:	2b40      	cmp	r3, #64	; 0x40
 800aa04:	d10e      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa10:	2b40      	cmp	r3, #64	; 0x40
 800aa12:	d107      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f9c1 	bl	800ada6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d10e      	bne.n	800aa50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b20      	cmp	r3, #32
 800aa3e:	d107      	bne.n	800aa50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f06f 0220 	mvn.w	r2, #32
 800aa48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fd94 	bl	800b578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa72:	2302      	movs	r3, #2
 800aa74:	e0ae      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b0c      	cmp	r3, #12
 800aa82:	f200 809f 	bhi.w	800abc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aa86:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aac1 	.word	0x0800aac1
 800aa90:	0800abc5 	.word	0x0800abc5
 800aa94:	0800abc5 	.word	0x0800abc5
 800aa98:	0800abc5 	.word	0x0800abc5
 800aa9c:	0800ab01 	.word	0x0800ab01
 800aaa0:	0800abc5 	.word	0x0800abc5
 800aaa4:	0800abc5 	.word	0x0800abc5
 800aaa8:	0800abc5 	.word	0x0800abc5
 800aaac:	0800ab43 	.word	0x0800ab43
 800aab0:	0800abc5 	.word	0x0800abc5
 800aab4:	0800abc5 	.word	0x0800abc5
 800aab8:	0800abc5 	.word	0x0800abc5
 800aabc:	0800ab83 	.word	0x0800ab83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 fa18 	bl	800aefc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0208 	orr.w	r2, r2, #8
 800aada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0204 	bic.w	r2, r2, #4
 800aaea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6999      	ldr	r1, [r3, #24]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	619a      	str	r2, [r3, #24]
      break;
 800aafe:	e064      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fa68 	bl	800afdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6999      	ldr	r1, [r3, #24]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	021a      	lsls	r2, r3, #8
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	619a      	str	r2, [r3, #24]
      break;
 800ab40:	e043      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 fabd 	bl	800b0c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f042 0208 	orr.w	r2, r2, #8
 800ab5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	69da      	ldr	r2, [r3, #28]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0204 	bic.w	r2, r2, #4
 800ab6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69d9      	ldr	r1, [r3, #28]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	61da      	str	r2, [r3, #28]
      break;
 800ab80:	e023      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fb11 	bl	800b1b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69d9      	ldr	r1, [r3, #28]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	021a      	lsls	r2, r3, #8
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	61da      	str	r2, [r3, #28]
      break;
 800abc2:	e002      	b.n	800abca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]
      break;
 800abc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_TIM_ConfigClockSource+0x1c>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e0b4      	b.n	800ad62 <HAL_TIM_ConfigClockSource+0x186>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac30:	d03e      	beq.n	800acb0 <HAL_TIM_ConfigClockSource+0xd4>
 800ac32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac36:	f200 8087 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac3e:	f000 8086 	beq.w	800ad4e <HAL_TIM_ConfigClockSource+0x172>
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac46:	d87f      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac48:	2b70      	cmp	r3, #112	; 0x70
 800ac4a:	d01a      	beq.n	800ac82 <HAL_TIM_ConfigClockSource+0xa6>
 800ac4c:	2b70      	cmp	r3, #112	; 0x70
 800ac4e:	d87b      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac50:	2b60      	cmp	r3, #96	; 0x60
 800ac52:	d050      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x11a>
 800ac54:	2b60      	cmp	r3, #96	; 0x60
 800ac56:	d877      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac58:	2b50      	cmp	r3, #80	; 0x50
 800ac5a:	d03c      	beq.n	800acd6 <HAL_TIM_ConfigClockSource+0xfa>
 800ac5c:	2b50      	cmp	r3, #80	; 0x50
 800ac5e:	d873      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac60:	2b40      	cmp	r3, #64	; 0x40
 800ac62:	d058      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x13a>
 800ac64:	2b40      	cmp	r3, #64	; 0x40
 800ac66:	d86f      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac68:	2b30      	cmp	r3, #48	; 0x30
 800ac6a:	d064      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x15a>
 800ac6c:	2b30      	cmp	r3, #48	; 0x30
 800ac6e:	d86b      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d060      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x15a>
 800ac74:	2b20      	cmp	r3, #32
 800ac76:	d867      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05c      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x15a>
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d05a      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x15a>
 800ac80:	e062      	b.n	800ad48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6899      	ldr	r1, [r3, #8]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f000 fb5d 	bl	800b350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	609a      	str	r2, [r3, #8]
      break;
 800acae:	e04f      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	6899      	ldr	r1, [r3, #8]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f000 fb46 	bl	800b350 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acd2:	609a      	str	r2, [r3, #8]
      break;
 800acd4:	e03c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	6859      	ldr	r1, [r3, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f000 faba 	bl	800b25c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2150      	movs	r1, #80	; 0x50
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fb13 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800acf4:	e02c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f000 fad9 	bl	800b2ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2160      	movs	r1, #96	; 0x60
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fb03 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800ad14:	e01c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6859      	ldr	r1, [r3, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f000 fa9a 	bl	800b25c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2140      	movs	r1, #64	; 0x40
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 faf3 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800ad34:	e00c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4610      	mov	r0, r2
 800ad42:	f000 faea 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800ad46:	e003      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4c:	e000      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adae:	bf00      	nop
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
	...

0800adbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a40      	ldr	r2, [pc, #256]	; (800aed0 <TIM_Base_SetConfig+0x114>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d013      	beq.n	800adfc <TIM_Base_SetConfig+0x40>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adda:	d00f      	beq.n	800adfc <TIM_Base_SetConfig+0x40>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a3d      	ldr	r2, [pc, #244]	; (800aed4 <TIM_Base_SetConfig+0x118>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00b      	beq.n	800adfc <TIM_Base_SetConfig+0x40>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a3c      	ldr	r2, [pc, #240]	; (800aed8 <TIM_Base_SetConfig+0x11c>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d007      	beq.n	800adfc <TIM_Base_SetConfig+0x40>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a3b      	ldr	r2, [pc, #236]	; (800aedc <TIM_Base_SetConfig+0x120>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d003      	beq.n	800adfc <TIM_Base_SetConfig+0x40>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a3a      	ldr	r2, [pc, #232]	; (800aee0 <TIM_Base_SetConfig+0x124>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d108      	bne.n	800ae0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a2f      	ldr	r2, [pc, #188]	; (800aed0 <TIM_Base_SetConfig+0x114>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d02b      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae1c:	d027      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a2c      	ldr	r2, [pc, #176]	; (800aed4 <TIM_Base_SetConfig+0x118>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d023      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a2b      	ldr	r2, [pc, #172]	; (800aed8 <TIM_Base_SetConfig+0x11c>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01f      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a2a      	ldr	r2, [pc, #168]	; (800aedc <TIM_Base_SetConfig+0x120>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d01b      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a29      	ldr	r2, [pc, #164]	; (800aee0 <TIM_Base_SetConfig+0x124>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d017      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a28      	ldr	r2, [pc, #160]	; (800aee4 <TIM_Base_SetConfig+0x128>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d013      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a27      	ldr	r2, [pc, #156]	; (800aee8 <TIM_Base_SetConfig+0x12c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00f      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a26      	ldr	r2, [pc, #152]	; (800aeec <TIM_Base_SetConfig+0x130>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00b      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a25      	ldr	r2, [pc, #148]	; (800aef0 <TIM_Base_SetConfig+0x134>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d007      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a24      	ldr	r2, [pc, #144]	; (800aef4 <TIM_Base_SetConfig+0x138>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d003      	beq.n	800ae6e <TIM_Base_SetConfig+0xb2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a23      	ldr	r2, [pc, #140]	; (800aef8 <TIM_Base_SetConfig+0x13c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d108      	bne.n	800ae80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a0a      	ldr	r2, [pc, #40]	; (800aed0 <TIM_Base_SetConfig+0x114>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d003      	beq.n	800aeb4 <TIM_Base_SetConfig+0xf8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <TIM_Base_SetConfig+0x124>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d103      	bne.n	800aebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	691a      	ldr	r2, [r3, #16]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	615a      	str	r2, [r3, #20]
}
 800aec2:	bf00      	nop
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	40010000 	.word	0x40010000
 800aed4:	40000400 	.word	0x40000400
 800aed8:	40000800 	.word	0x40000800
 800aedc:	40000c00 	.word	0x40000c00
 800aee0:	40010400 	.word	0x40010400
 800aee4:	40014000 	.word	0x40014000
 800aee8:	40014400 	.word	0x40014400
 800aeec:	40014800 	.word	0x40014800
 800aef0:	40001800 	.word	0x40001800
 800aef4:	40001c00 	.word	0x40001c00
 800aef8:	40002000 	.word	0x40002000

0800aefc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	f023 0201 	bic.w	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f023 0302 	bic.w	r3, r3, #2
 800af44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a20      	ldr	r2, [pc, #128]	; (800afd4 <TIM_OC1_SetConfig+0xd8>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_OC1_SetConfig+0x64>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a1f      	ldr	r2, [pc, #124]	; (800afd8 <TIM_OC1_SetConfig+0xdc>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10c      	bne.n	800af7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f023 0308 	bic.w	r3, r3, #8
 800af66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	4313      	orrs	r3, r2
 800af70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f023 0304 	bic.w	r3, r3, #4
 800af78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a15      	ldr	r2, [pc, #84]	; (800afd4 <TIM_OC1_SetConfig+0xd8>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d003      	beq.n	800af8a <TIM_OC1_SetConfig+0x8e>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a14      	ldr	r2, [pc, #80]	; (800afd8 <TIM_OC1_SetConfig+0xdc>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d111      	bne.n	800afae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4313      	orrs	r3, r2
 800afac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	621a      	str	r2, [r3, #32]
}
 800afc8:	bf00      	nop
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	40010000 	.word	0x40010000
 800afd8:	40010400 	.word	0x40010400

0800afdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	f023 0210 	bic.w	r2, r3, #16
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f023 0320 	bic.w	r3, r3, #32
 800b026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	4313      	orrs	r3, r2
 800b032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a22      	ldr	r2, [pc, #136]	; (800b0c0 <TIM_OC2_SetConfig+0xe4>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC2_SetConfig+0x68>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a21      	ldr	r2, [pc, #132]	; (800b0c4 <TIM_OC2_SetConfig+0xe8>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d10d      	bne.n	800b060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b04a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b05e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a17      	ldr	r2, [pc, #92]	; (800b0c0 <TIM_OC2_SetConfig+0xe4>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d003      	beq.n	800b070 <TIM_OC2_SetConfig+0x94>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a16      	ldr	r2, [pc, #88]	; (800b0c4 <TIM_OC2_SetConfig+0xe8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d113      	bne.n	800b098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b07e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	4313      	orrs	r3, r2
 800b096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	621a      	str	r2, [r3, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	371c      	adds	r7, #28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	40010000 	.word	0x40010000
 800b0c4:	40010400 	.word	0x40010400

0800b0c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 0303 	bic.w	r3, r3, #3
 800b0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a21      	ldr	r2, [pc, #132]	; (800b1a8 <TIM_OC3_SetConfig+0xe0>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d003      	beq.n	800b12e <TIM_OC3_SetConfig+0x66>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a20      	ldr	r2, [pc, #128]	; (800b1ac <TIM_OC3_SetConfig+0xe4>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d10d      	bne.n	800b14a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	4313      	orrs	r3, r2
 800b140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a16      	ldr	r2, [pc, #88]	; (800b1a8 <TIM_OC3_SetConfig+0xe0>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d003      	beq.n	800b15a <TIM_OC3_SetConfig+0x92>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a15      	ldr	r2, [pc, #84]	; (800b1ac <TIM_OC3_SetConfig+0xe4>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d113      	bne.n	800b182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	011b      	lsls	r3, r3, #4
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4313      	orrs	r3, r2
 800b180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	621a      	str	r2, [r3, #32]
}
 800b19c:	bf00      	nop
 800b19e:	371c      	adds	r7, #28
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	40010000 	.word	0x40010000
 800b1ac:	40010400 	.word	0x40010400

0800b1b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	031b      	lsls	r3, r3, #12
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	4313      	orrs	r3, r2
 800b206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a12      	ldr	r2, [pc, #72]	; (800b254 <TIM_OC4_SetConfig+0xa4>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d003      	beq.n	800b218 <TIM_OC4_SetConfig+0x68>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a11      	ldr	r2, [pc, #68]	; (800b258 <TIM_OC4_SetConfig+0xa8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d109      	bne.n	800b22c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b21e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	019b      	lsls	r3, r3, #6
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	4313      	orrs	r3, r2
 800b22a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	621a      	str	r2, [r3, #32]
}
 800b246:	bf00      	nop
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	40010000 	.word	0x40010000
 800b258:	40010400 	.word	0x40010400

0800b25c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f023 0201 	bic.w	r2, r3, #1
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	011b      	lsls	r3, r3, #4
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	4313      	orrs	r3, r2
 800b290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f023 030a 	bic.w	r3, r3, #10
 800b298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	621a      	str	r2, [r3, #32]
}
 800b2ae:	bf00      	nop
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b087      	sub	sp, #28
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	f023 0210 	bic.w	r2, r3, #16
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	031b      	lsls	r3, r3, #12
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	621a      	str	r2, [r3, #32]
}
 800b30e:	bf00      	nop
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4313      	orrs	r3, r2
 800b338:	f043 0307 	orr.w	r3, r3, #7
 800b33c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	609a      	str	r2, [r3, #8]
}
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b36a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	021a      	lsls	r2, r3, #8
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	431a      	orrs	r2, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	4313      	orrs	r3, r2
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	609a      	str	r2, [r3, #8]
}
 800b384:	bf00      	nop
 800b386:	371c      	adds	r7, #28
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f003 031f 	and.w	r3, r3, #31
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a1a      	ldr	r2, [r3, #32]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	43db      	mvns	r3, r3
 800b3b2:	401a      	ands	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a1a      	ldr	r2, [r3, #32]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f003 031f 	and.w	r3, r3, #31
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c8:	431a      	orrs	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	621a      	str	r2, [r3, #32]
}
 800b3ce:	bf00      	nop
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
	...

0800b3dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e05a      	b.n	800b4aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a21      	ldr	r2, [pc, #132]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d022      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b440:	d01d      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a1d      	ldr	r2, [pc, #116]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d018      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d013      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a1a      	ldr	r2, [pc, #104]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d00e      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d009      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a17      	ldr	r2, [pc, #92]	; (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d004      	beq.n	800b47e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d10c      	bne.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	40010000 	.word	0x40010000
 800b4bc:	40000400 	.word	0x40000400
 800b4c0:	40000800 	.word	0x40000800
 800b4c4:	40000c00 	.word	0x40000c00
 800b4c8:	40010400 	.word	0x40010400
 800b4cc:	40014000 	.word	0x40014000
 800b4d0:	40001800 	.word	0x40001800

0800b4d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e03d      	b.n	800b56c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e03f      	b.n	800b632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7f9 fe54 	bl	8005274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2224      	movs	r2, #36	; 0x24
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fa9b 	bl	800bb20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	695a      	ldr	r2, [r3, #20]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2220      	movs	r2, #32
 800b624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	4613      	mov	r3, r2
 800b646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b20      	cmp	r3, #32
 800b652:	d11d      	bne.n	800b690 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <HAL_UART_Receive_DMA+0x26>
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e016      	b.n	800b692 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_UART_Receive_DMA+0x38>
 800b66e:	2302      	movs	r3, #2
 800b670:	e00f      	b.n	800b692 <HAL_UART_Receive_DMA+0x58>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	461a      	mov	r2, r3
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 f920 	bl	800b8cc <UART_Start_Receive_DMA>
 800b68c:	4603      	mov	r3, r0
 800b68e:	e000      	b.n	800b692 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b690:	2302      	movs	r3, #2
  }
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b09c      	sub	sp, #112	; 0x70
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d172      	bne.n	800b7dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b712:	66bb      	str	r3, [r7, #104]	; 0x68
 800b714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	330c      	adds	r3, #12
 800b71a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b71c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b71e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b724:	e841 2300 	strex	r3, r2, [r1]
 800b728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e5      	bne.n	800b6fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3314      	adds	r3, #20
 800b736:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	e853 3f00 	ldrex	r3, [r3]
 800b73e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	f023 0301 	bic.w	r3, r3, #1
 800b746:	667b      	str	r3, [r7, #100]	; 0x64
 800b748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3314      	adds	r3, #20
 800b74e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b750:	647a      	str	r2, [r7, #68]	; 0x44
 800b752:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b758:	e841 2300 	strex	r3, r2, [r1]
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1e5      	bne.n	800b730 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3314      	adds	r3, #20
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	e853 3f00 	ldrex	r3, [r3]
 800b772:	623b      	str	r3, [r7, #32]
   return(result);
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b77a:	663b      	str	r3, [r7, #96]	; 0x60
 800b77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3314      	adds	r3, #20
 800b782:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b784:	633a      	str	r2, [r7, #48]	; 0x30
 800b786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e5      	bne.n	800b764 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b79a:	2220      	movs	r2, #32
 800b79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d119      	bne.n	800b7dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	330c      	adds	r3, #12
 800b7ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	e853 3f00 	ldrex	r3, [r3]
 800b7b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f023 0310 	bic.w	r3, r3, #16
 800b7be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	330c      	adds	r3, #12
 800b7c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7c8:	61fa      	str	r2, [r7, #28]
 800b7ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	69b9      	ldr	r1, [r7, #24]
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e5      	bne.n	800b7a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d106      	bne.n	800b7f2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7ec:	f7ff ff69 	bl	800b6c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7f0:	e002      	b.n	800b7f8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b7f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7f4:	f7f8 fdf8 	bl	80043e8 <HAL_UART_RxCpltCallback>
}
 800b7f8:	bf00      	nop
 800b7fa:	3770      	adds	r7, #112	; 0x70
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b812:	2b01      	cmp	r3, #1
 800b814:	d108      	bne.n	800b828 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b81a:	085b      	lsrs	r3, r3, #1
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	4619      	mov	r1, r3
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff ff4e 	bl	800b6c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b826:	e002      	b.n	800b82e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff ff36 	bl	800b69a <HAL_UART_RxHalfCpltCallback>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b83e:	2300      	movs	r3, #0
 800b840:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	2b80      	cmp	r3, #128	; 0x80
 800b854:	bf0c      	ite	eq
 800b856:	2301      	moveq	r3, #1
 800b858:	2300      	movne	r3, #0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b21      	cmp	r3, #33	; 0x21
 800b868:	d108      	bne.n	800b87c <UART_DMAError+0x46>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d005      	beq.n	800b87c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2200      	movs	r2, #0
 800b874:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b876:	68b8      	ldr	r0, [r7, #8]
 800b878:	f000 f8c6 	bl	800ba08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	bf0c      	ite	eq
 800b88a:	2301      	moveq	r3, #1
 800b88c:	2300      	movne	r3, #0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b22      	cmp	r3, #34	; 0x22
 800b89c:	d108      	bne.n	800b8b0 <UART_DMAError+0x7a>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8aa:	68b8      	ldr	r0, [r7, #8]
 800b8ac:	f000 f8d4 	bl	800ba58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	f043 0210 	orr.w	r2, r3, #16
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8bc:	68b8      	ldr	r0, [r7, #8]
 800b8be:	f7ff fef6 	bl	800b6ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b098      	sub	sp, #96	; 0x60
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	88fa      	ldrh	r2, [r7, #6]
 800b8e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2222      	movs	r2, #34	; 0x22
 800b8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f8:	4a40      	ldr	r2, [pc, #256]	; (800b9fc <UART_Start_Receive_DMA+0x130>)
 800b8fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b900:	4a3f      	ldr	r2, [pc, #252]	; (800ba00 <UART_Start_Receive_DMA+0x134>)
 800b902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	4a3e      	ldr	r2, [pc, #248]	; (800ba04 <UART_Start_Receive_DMA+0x138>)
 800b90a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b910:	2200      	movs	r2, #0
 800b912:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3304      	adds	r3, #4
 800b924:	4619      	mov	r1, r3
 800b926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	88fb      	ldrh	r3, [r7, #6]
 800b92c:	f7fb f86b 	bl	8006a06 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b930:	2300      	movs	r3, #0
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	613b      	str	r3, [r7, #16]
 800b944:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d019      	beq.n	800b98a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	330c      	adds	r3, #12
 800b95c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b96c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	330c      	adds	r3, #12
 800b974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b976:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b978:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b97c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e5      	bne.n	800b956 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3314      	adds	r3, #20
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	e853 3f00 	ldrex	r3, [r3]
 800b998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	f043 0301 	orr.w	r3, r3, #1
 800b9a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3314      	adds	r3, #20
 800b9a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9aa:	63ba      	str	r2, [r7, #56]	; 0x38
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e5      	bne.n	800b98a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3314      	adds	r3, #20
 800b9c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d4:	653b      	str	r3, [r7, #80]	; 0x50
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3314      	adds	r3, #20
 800b9dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9de:	627a      	str	r2, [r7, #36]	; 0x24
 800b9e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e2:	6a39      	ldr	r1, [r7, #32]
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e5      	bne.n	800b9be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3760      	adds	r7, #96	; 0x60
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	0800b6db 	.word	0x0800b6db
 800ba00:	0800b801 	.word	0x0800b801
 800ba04:	0800b837 	.word	0x0800b837

0800ba08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b089      	sub	sp, #36	; 0x24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	330c      	adds	r3, #12
 800ba16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba26:	61fb      	str	r3, [r7, #28]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	61ba      	str	r2, [r7, #24]
 800ba32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	6979      	ldr	r1, [r7, #20]
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e5      	bne.n	800ba10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ba4c:	bf00      	nop
 800ba4e:	3724      	adds	r7, #36	; 0x24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b095      	sub	sp, #84	; 0x54
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	330c      	adds	r3, #12
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	330c      	adds	r3, #12
 800ba7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba80:	643a      	str	r2, [r7, #64]	; 0x40
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e5      	bne.n	800ba60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3314      	adds	r3, #20
 800ba9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3314      	adds	r3, #20
 800bab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e5      	bne.n	800ba94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d119      	bne.n	800bb04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f023 0310 	bic.w	r3, r3, #16
 800bae6:	647b      	str	r3, [r7, #68]	; 0x44
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baf0:	61ba      	str	r2, [r7, #24]
 800baf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	6979      	ldr	r1, [r7, #20]
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	e841 2300 	strex	r3, r2, [r1]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e5      	bne.n	800bad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb12:	bf00      	nop
 800bb14:	3754      	adds	r7, #84	; 0x54
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb24:	b0c0      	sub	sp, #256	; 0x100
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	68d9      	ldr	r1, [r3, #12]
 800bb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	ea40 0301 	orr.w	r3, r0, r1
 800bb48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	431a      	orrs	r2, r3
 800bb58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb78:	f021 010c 	bic.w	r1, r1, #12
 800bb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb86:	430b      	orrs	r3, r1
 800bb88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9a:	6999      	ldr	r1, [r3, #24]
 800bb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	ea40 0301 	orr.w	r3, r0, r1
 800bba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4b8f      	ldr	r3, [pc, #572]	; (800bdec <UART_SetConfig+0x2cc>)
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d005      	beq.n	800bbc0 <UART_SetConfig+0xa0>
 800bbb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4b8d      	ldr	r3, [pc, #564]	; (800bdf0 <UART_SetConfig+0x2d0>)
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d104      	bne.n	800bbca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbc0:	f7fc fe82 	bl	80088c8 <HAL_RCC_GetPCLK2Freq>
 800bbc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bbc8:	e003      	b.n	800bbd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbca:	f7fc fe69 	bl	80088a0 <HAL_RCC_GetPCLK1Freq>
 800bbce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbdc:	f040 810c 	bne.w	800bdf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bbee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	1891      	adds	r1, r2, r2
 800bbf8:	65b9      	str	r1, [r7, #88]	; 0x58
 800bbfa:	415b      	adcs	r3, r3
 800bbfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bc02:	4621      	mov	r1, r4
 800bc04:	eb12 0801 	adds.w	r8, r2, r1
 800bc08:	4629      	mov	r1, r5
 800bc0a:	eb43 0901 	adc.w	r9, r3, r1
 800bc0e:	f04f 0200 	mov.w	r2, #0
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc22:	4690      	mov	r8, r2
 800bc24:	4699      	mov	r9, r3
 800bc26:	4623      	mov	r3, r4
 800bc28:	eb18 0303 	adds.w	r3, r8, r3
 800bc2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc30:	462b      	mov	r3, r5
 800bc32:	eb49 0303 	adc.w	r3, r9, r3
 800bc36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc4e:	460b      	mov	r3, r1
 800bc50:	18db      	adds	r3, r3, r3
 800bc52:	653b      	str	r3, [r7, #80]	; 0x50
 800bc54:	4613      	mov	r3, r2
 800bc56:	eb42 0303 	adc.w	r3, r2, r3
 800bc5a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc64:	f7f5 f820 	bl	8000ca8 <__aeabi_uldivmod>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4b61      	ldr	r3, [pc, #388]	; (800bdf4 <UART_SetConfig+0x2d4>)
 800bc6e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc72:	095b      	lsrs	r3, r3, #5
 800bc74:	011c      	lsls	r4, r3, #4
 800bc76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc88:	4642      	mov	r2, r8
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	1891      	adds	r1, r2, r2
 800bc8e:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc90:	415b      	adcs	r3, r3
 800bc92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc98:	4641      	mov	r1, r8
 800bc9a:	eb12 0a01 	adds.w	sl, r2, r1
 800bc9e:	4649      	mov	r1, r9
 800bca0:	eb43 0b01 	adc.w	fp, r3, r1
 800bca4:	f04f 0200 	mov.w	r2, #0
 800bca8:	f04f 0300 	mov.w	r3, #0
 800bcac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bcb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bcb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bcb8:	4692      	mov	sl, r2
 800bcba:	469b      	mov	fp, r3
 800bcbc:	4643      	mov	r3, r8
 800bcbe:	eb1a 0303 	adds.w	r3, sl, r3
 800bcc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	eb4b 0303 	adc.w	r3, fp, r3
 800bccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bce4:	460b      	mov	r3, r1
 800bce6:	18db      	adds	r3, r3, r3
 800bce8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcea:	4613      	mov	r3, r2
 800bcec:	eb42 0303 	adc.w	r3, r2, r3
 800bcf0:	647b      	str	r3, [r7, #68]	; 0x44
 800bcf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bcf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bcfa:	f7f4 ffd5 	bl	8000ca8 <__aeabi_uldivmod>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4611      	mov	r1, r2
 800bd04:	4b3b      	ldr	r3, [pc, #236]	; (800bdf4 <UART_SetConfig+0x2d4>)
 800bd06:	fba3 2301 	umull	r2, r3, r3, r1
 800bd0a:	095b      	lsrs	r3, r3, #5
 800bd0c:	2264      	movs	r2, #100	; 0x64
 800bd0e:	fb02 f303 	mul.w	r3, r2, r3
 800bd12:	1acb      	subs	r3, r1, r3
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd1a:	4b36      	ldr	r3, [pc, #216]	; (800bdf4 <UART_SetConfig+0x2d4>)
 800bd1c:	fba3 2302 	umull	r2, r3, r3, r2
 800bd20:	095b      	lsrs	r3, r3, #5
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd28:	441c      	add	r4, r3
 800bd2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd3c:	4642      	mov	r2, r8
 800bd3e:	464b      	mov	r3, r9
 800bd40:	1891      	adds	r1, r2, r2
 800bd42:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd44:	415b      	adcs	r3, r3
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd4c:	4641      	mov	r1, r8
 800bd4e:	1851      	adds	r1, r2, r1
 800bd50:	6339      	str	r1, [r7, #48]	; 0x30
 800bd52:	4649      	mov	r1, r9
 800bd54:	414b      	adcs	r3, r1
 800bd56:	637b      	str	r3, [r7, #52]	; 0x34
 800bd58:	f04f 0200 	mov.w	r2, #0
 800bd5c:	f04f 0300 	mov.w	r3, #0
 800bd60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd64:	4659      	mov	r1, fp
 800bd66:	00cb      	lsls	r3, r1, #3
 800bd68:	4651      	mov	r1, sl
 800bd6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd6e:	4651      	mov	r1, sl
 800bd70:	00ca      	lsls	r2, r1, #3
 800bd72:	4610      	mov	r0, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	4642      	mov	r2, r8
 800bd7a:	189b      	adds	r3, r3, r2
 800bd7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd80:	464b      	mov	r3, r9
 800bd82:	460a      	mov	r2, r1
 800bd84:	eb42 0303 	adc.w	r3, r2, r3
 800bd88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bda0:	460b      	mov	r3, r1
 800bda2:	18db      	adds	r3, r3, r3
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda6:	4613      	mov	r3, r2
 800bda8:	eb42 0303 	adc.w	r3, r2, r3
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bdb6:	f7f4 ff77 	bl	8000ca8 <__aeabi_uldivmod>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <UART_SetConfig+0x2d4>)
 800bdc0:	fba3 1302 	umull	r1, r3, r3, r2
 800bdc4:	095b      	lsrs	r3, r3, #5
 800bdc6:	2164      	movs	r1, #100	; 0x64
 800bdc8:	fb01 f303 	mul.w	r3, r1, r3
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	3332      	adds	r3, #50	; 0x32
 800bdd2:	4a08      	ldr	r2, [pc, #32]	; (800bdf4 <UART_SetConfig+0x2d4>)
 800bdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd8:	095b      	lsrs	r3, r3, #5
 800bdda:	f003 0207 	and.w	r2, r3, #7
 800bdde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4422      	add	r2, r4
 800bde6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bde8:	e105      	b.n	800bff6 <UART_SetConfig+0x4d6>
 800bdea:	bf00      	nop
 800bdec:	40011000 	.word	0x40011000
 800bdf0:	40011400 	.word	0x40011400
 800bdf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bdf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800be0a:	4642      	mov	r2, r8
 800be0c:	464b      	mov	r3, r9
 800be0e:	1891      	adds	r1, r2, r2
 800be10:	6239      	str	r1, [r7, #32]
 800be12:	415b      	adcs	r3, r3
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
 800be16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be1a:	4641      	mov	r1, r8
 800be1c:	1854      	adds	r4, r2, r1
 800be1e:	4649      	mov	r1, r9
 800be20:	eb43 0501 	adc.w	r5, r3, r1
 800be24:	f04f 0200 	mov.w	r2, #0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	00eb      	lsls	r3, r5, #3
 800be2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be32:	00e2      	lsls	r2, r4, #3
 800be34:	4614      	mov	r4, r2
 800be36:	461d      	mov	r5, r3
 800be38:	4643      	mov	r3, r8
 800be3a:	18e3      	adds	r3, r4, r3
 800be3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be40:	464b      	mov	r3, r9
 800be42:	eb45 0303 	adc.w	r3, r5, r3
 800be46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	f04f 0300 	mov.w	r3, #0
 800be62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be66:	4629      	mov	r1, r5
 800be68:	008b      	lsls	r3, r1, #2
 800be6a:	4621      	mov	r1, r4
 800be6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be70:	4621      	mov	r1, r4
 800be72:	008a      	lsls	r2, r1, #2
 800be74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be78:	f7f4 ff16 	bl	8000ca8 <__aeabi_uldivmod>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4b60      	ldr	r3, [pc, #384]	; (800c004 <UART_SetConfig+0x4e4>)
 800be82:	fba3 2302 	umull	r2, r3, r3, r2
 800be86:	095b      	lsrs	r3, r3, #5
 800be88:	011c      	lsls	r4, r3, #4
 800be8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be9c:	4642      	mov	r2, r8
 800be9e:	464b      	mov	r3, r9
 800bea0:	1891      	adds	r1, r2, r2
 800bea2:	61b9      	str	r1, [r7, #24]
 800bea4:	415b      	adcs	r3, r3
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800beac:	4641      	mov	r1, r8
 800beae:	1851      	adds	r1, r2, r1
 800beb0:	6139      	str	r1, [r7, #16]
 800beb2:	4649      	mov	r1, r9
 800beb4:	414b      	adcs	r3, r1
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bec4:	4659      	mov	r1, fp
 800bec6:	00cb      	lsls	r3, r1, #3
 800bec8:	4651      	mov	r1, sl
 800beca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bece:	4651      	mov	r1, sl
 800bed0:	00ca      	lsls	r2, r1, #3
 800bed2:	4610      	mov	r0, r2
 800bed4:	4619      	mov	r1, r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	4642      	mov	r2, r8
 800beda:	189b      	adds	r3, r3, r2
 800bedc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bee0:	464b      	mov	r3, r9
 800bee2:	460a      	mov	r2, r1
 800bee4:	eb42 0303 	adc.w	r3, r2, r3
 800bee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800beec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bef8:	f04f 0200 	mov.w	r2, #0
 800befc:	f04f 0300 	mov.w	r3, #0
 800bf00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf04:	4649      	mov	r1, r9
 800bf06:	008b      	lsls	r3, r1, #2
 800bf08:	4641      	mov	r1, r8
 800bf0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf0e:	4641      	mov	r1, r8
 800bf10:	008a      	lsls	r2, r1, #2
 800bf12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bf16:	f7f4 fec7 	bl	8000ca8 <__aeabi_uldivmod>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4b39      	ldr	r3, [pc, #228]	; (800c004 <UART_SetConfig+0x4e4>)
 800bf20:	fba3 1302 	umull	r1, r3, r3, r2
 800bf24:	095b      	lsrs	r3, r3, #5
 800bf26:	2164      	movs	r1, #100	; 0x64
 800bf28:	fb01 f303 	mul.w	r3, r1, r3
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	3332      	adds	r3, #50	; 0x32
 800bf32:	4a34      	ldr	r2, [pc, #208]	; (800c004 <UART_SetConfig+0x4e4>)
 800bf34:	fba2 2303 	umull	r2, r3, r2, r3
 800bf38:	095b      	lsrs	r3, r3, #5
 800bf3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf3e:	441c      	add	r4, r3
 800bf40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf44:	2200      	movs	r2, #0
 800bf46:	673b      	str	r3, [r7, #112]	; 0x70
 800bf48:	677a      	str	r2, [r7, #116]	; 0x74
 800bf4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf4e:	4642      	mov	r2, r8
 800bf50:	464b      	mov	r3, r9
 800bf52:	1891      	adds	r1, r2, r2
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	415b      	adcs	r3, r3
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf5e:	4641      	mov	r1, r8
 800bf60:	1851      	adds	r1, r2, r1
 800bf62:	6039      	str	r1, [r7, #0]
 800bf64:	4649      	mov	r1, r9
 800bf66:	414b      	adcs	r3, r1
 800bf68:	607b      	str	r3, [r7, #4]
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	f04f 0300 	mov.w	r3, #0
 800bf72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf76:	4659      	mov	r1, fp
 800bf78:	00cb      	lsls	r3, r1, #3
 800bf7a:	4651      	mov	r1, sl
 800bf7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf80:	4651      	mov	r1, sl
 800bf82:	00ca      	lsls	r2, r1, #3
 800bf84:	4610      	mov	r0, r2
 800bf86:	4619      	mov	r1, r3
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4642      	mov	r2, r8
 800bf8c:	189b      	adds	r3, r3, r2
 800bf8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf90:	464b      	mov	r3, r9
 800bf92:	460a      	mov	r2, r1
 800bf94:	eb42 0303 	adc.w	r3, r2, r3
 800bf98:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	663b      	str	r3, [r7, #96]	; 0x60
 800bfa4:	667a      	str	r2, [r7, #100]	; 0x64
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	f04f 0300 	mov.w	r3, #0
 800bfae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	008b      	lsls	r3, r1, #2
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	008a      	lsls	r2, r1, #2
 800bfc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bfc4:	f7f4 fe70 	bl	8000ca8 <__aeabi_uldivmod>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <UART_SetConfig+0x4e4>)
 800bfce:	fba3 1302 	umull	r1, r3, r3, r2
 800bfd2:	095b      	lsrs	r3, r3, #5
 800bfd4:	2164      	movs	r1, #100	; 0x64
 800bfd6:	fb01 f303 	mul.w	r3, r1, r3
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	011b      	lsls	r3, r3, #4
 800bfde:	3332      	adds	r3, #50	; 0x32
 800bfe0:	4a08      	ldr	r2, [pc, #32]	; (800c004 <UART_SetConfig+0x4e4>)
 800bfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	f003 020f 	and.w	r2, r3, #15
 800bfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4422      	add	r2, r4
 800bff4:	609a      	str	r2, [r3, #8]
}
 800bff6:	bf00      	nop
 800bff8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bffc:	46bd      	mov	sp, r7
 800bffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c002:	bf00      	nop
 800c004:	51eb851f 	.word	0x51eb851f

0800c008 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c008:	b084      	sub	sp, #16
 800c00a:	b480      	push	{r7}
 800c00c:	b085      	sub	sp, #20
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	f107 001c 	add.w	r0, r7, #28
 800c016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c01e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c020:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c022:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c026:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c02a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c02e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c032:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	431a      	orrs	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	b004      	add	sp, #16
 800c05c:	4770      	bx	lr

0800c05e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c09a:	b480      	push	{r7}
 800c09c:	b083      	sub	sp, #12
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2203      	movs	r2, #3
 800c0a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b083      	sub	sp, #12
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0303 	and.w	r3, r3, #3
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b085      	sub	sp, #20
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0f0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c0f6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c0fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	4313      	orrs	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c10c:	f023 030f 	bic.w	r3, r3, #15
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c126:	b480      	push	{r7}
 800c128:	b083      	sub	sp, #12
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	b2db      	uxtb	r3, r3
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3314      	adds	r3, #20
 800c14e:	461a      	mov	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	4413      	add	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
}  
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c166:	b480      	push	{r7}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c18c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c192:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c198:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0

}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b088      	sub	sp, #32
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1cc:	2310      	movs	r3, #16
 800c1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1d0:	2340      	movs	r3, #64	; 0x40
 800c1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff ff74 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ee:	2110      	movs	r1, #16
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f9d7 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1f8:	69fb      	ldr	r3, [r7, #28]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3720      	adds	r7, #32
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b088      	sub	sp, #32
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c210:	2311      	movs	r3, #17
 800c212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c222:	f107 0308 	add.w	r3, r7, #8
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff ff52 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c232:	2111      	movs	r1, #17
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f9b5 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c23a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c23c:	69fb      	ldr	r3, [r7, #28]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3720      	adds	r7, #32
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b088      	sub	sp, #32
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c254:	2312      	movs	r3, #18
 800c256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c258:	2340      	movs	r3, #64	; 0x40
 800c25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c266:	f107 0308 	add.w	r3, r7, #8
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff ff30 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c272:	f241 3288 	movw	r2, #5000	; 0x1388
 800c276:	2112      	movs	r1, #18
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f993 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c280:	69fb      	ldr	r3, [r7, #28]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c298:	2318      	movs	r3, #24
 800c29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2aa:	f107 0308 	add.w	r3, r7, #8
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ff0e 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ba:	2118      	movs	r1, #24
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f971 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b088      	sub	sp, #32
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c2dc:	2319      	movs	r3, #25
 800c2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2e0:	2340      	movs	r3, #64	; 0x40
 800c2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2ee:	f107 0308 	add.w	r3, r7, #8
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff feec 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2fe:	2119      	movs	r1, #25
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f94f 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c308:	69fb      	ldr	r3, [r7, #28]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c320:	230c      	movs	r3, #12
 800c322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c324:	2340      	movs	r3, #64	; 0x40
 800c326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c328:	2300      	movs	r3, #0
 800c32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c330:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c332:	f107 0308 	add.w	r3, r7, #8
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff feca 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c33e:	4a05      	ldr	r2, [pc, #20]	; (800c354 <SDMMC_CmdStopTransfer+0x40>)
 800c340:	210c      	movs	r1, #12
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f92e 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34a:	69fb      	ldr	r3, [r7, #28]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	05f5e100 	.word	0x05f5e100

0800c358 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08a      	sub	sp, #40	; 0x28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c368:	2307      	movs	r3, #7
 800c36a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c36c:	2340      	movs	r3, #64	; 0x40
 800c36e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c370:	2300      	movs	r3, #0
 800c372:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c378:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c37a:	f107 0310 	add.w	r3, r7, #16
 800c37e:	4619      	mov	r1, r3
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff fea6 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c386:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38a:	2107      	movs	r1, #7
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 f909 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c392:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c396:	4618      	mov	r0, r3
 800c398:	3728      	adds	r7, #40	; 0x28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b088      	sub	sp, #32
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3bc:	f107 0308 	add.w	r3, r7, #8
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff fe85 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fb23 	bl	800ca14 <SDMMC_GetCmdError>
 800c3ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b088      	sub	sp, #32
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c3e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c3e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3e8:	2308      	movs	r3, #8
 800c3ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff fe66 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fab6 	bl	800c978 <SDMMC_GetCmdResp7>
 800c40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c40e:	69fb      	ldr	r3, [r7, #28]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c426:	2337      	movs	r3, #55	; 0x37
 800c428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c42a:	2340      	movs	r3, #64	; 0x40
 800c42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c42e:	2300      	movs	r3, #0
 800c430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c438:	f107 0308 	add.w	r3, r7, #8
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fe47 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c444:	f241 3288 	movw	r2, #5000	; 0x1388
 800c448:	2137      	movs	r1, #55	; 0x37
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f8aa 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c452:	69fb      	ldr	r3, [r7, #28]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3720      	adds	r7, #32
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c472:	2329      	movs	r3, #41	; 0x29
 800c474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff fe21 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f9bd 	bl	800c810 <SDMMC_GetCmdResp3>
 800c496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c498:	69fb      	ldr	r3, [r7, #28]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3720      	adds	r7, #32
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b088      	sub	sp, #32
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c4b2:	23c0      	movs	r3, #192	; 0xc0
 800c4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4c0:	f107 0308 	add.w	r3, r7, #8
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7ff fe03 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f957 	bl	800c780 <SDMMC_GetCmdResp2>
 800c4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4d4:	69fb      	ldr	r3, [r7, #28]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b088      	sub	sp, #32
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c4f0:	23c0      	movs	r3, #192	; 0xc0
 800c4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4fe:	f107 0308 	add.w	r3, r7, #8
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fde4 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f938 	bl	800c780 <SDMMC_GetCmdResp2>
 800c510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c512:	69fb      	ldr	r3, [r7, #28]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3720      	adds	r7, #32
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c52a:	2303      	movs	r3, #3
 800c52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c53a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fdc5 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	2103      	movs	r1, #3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f99d 	bl	800c88c <SDMMC_GetCmdResp6>
 800c552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c554:	69fb      	ldr	r3, [r7, #28]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3720      	adds	r7, #32
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b088      	sub	sp, #32
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c56c:	230d      	movs	r3, #13
 800c56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c570:	2340      	movs	r3, #64	; 0x40
 800c572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c57c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff fda4 	bl	800c0d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58e:	210d      	movs	r1, #13
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f807 	bl	800c5a4 <SDMMC_GetCmdResp1>
 800c596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c598:	69fb      	ldr	r3, [r7, #28]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c5b2:	4b70      	ldr	r3, [pc, #448]	; (800c774 <SDMMC_GetCmdResp1+0x1d0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a70      	ldr	r2, [pc, #448]	; (800c778 <SDMMC_GetCmdResp1+0x1d4>)
 800c5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5bc:	0a5a      	lsrs	r2, r3, #9
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	fb02 f303 	mul.w	r3, r2, r3
 800c5c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	1e5a      	subs	r2, r3, #1
 800c5ca:	61fa      	str	r2, [r7, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d102      	bne.n	800c5d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5d4:	e0c9      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0ef      	beq.n	800c5c6 <SDMMC_GetCmdResp1+0x22>
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1ea      	bne.n	800c5c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d004      	beq.n	800c606 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2204      	movs	r2, #4
 800c600:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c602:	2304      	movs	r3, #4
 800c604:	e0b1      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	f003 0301 	and.w	r3, r3, #1
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c618:	2301      	movs	r3, #1
 800c61a:	e0a6      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	22c5      	movs	r2, #197	; 0xc5
 800c620:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f7ff fd7f 	bl	800c126 <SDIO_GetCommandResponse>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	7afb      	ldrb	r3, [r7, #11]
 800c62e:	4293      	cmp	r3, r2
 800c630:	d001      	beq.n	800c636 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c632:	2301      	movs	r3, #1
 800c634:	e099      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c636:	2100      	movs	r1, #0
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fd81 	bl	800c140 <SDIO_GetResponse>
 800c63e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	4b4e      	ldr	r3, [pc, #312]	; (800c77c <SDMMC_GetCmdResp1+0x1d8>)
 800c644:	4013      	ands	r3, r2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e08d      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2b00      	cmp	r3, #0
 800c652:	da02      	bge.n	800c65a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c658:	e087      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c664:	2340      	movs	r3, #64	; 0x40
 800c666:	e080      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c672:	2380      	movs	r3, #128	; 0x80
 800c674:	e079      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c680:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c684:	e071      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c690:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c694:	e069      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a4:	e061      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6b4:	e059      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c4:	e051      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6d4:	e049      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c6e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c6e4:	e041      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c6f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6f4:	e039      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c704:	e031      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c714:	e029      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c724:	e021      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c734:	e019      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c744:	e011      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c754:	e009      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f003 0308 	and.w	r3, r3, #8
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c760:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c764:	e001      	b.n	800c76a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3720      	adds	r7, #32
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000094 	.word	0x20000094
 800c778:	10624dd3 	.word	0x10624dd3
 800c77c:	fdffe008 	.word	0xfdffe008

0800c780 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c788:	4b1f      	ldr	r3, [pc, #124]	; (800c808 <SDMMC_GetCmdResp2+0x88>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a1f      	ldr	r2, [pc, #124]	; (800c80c <SDMMC_GetCmdResp2+0x8c>)
 800c78e:	fba2 2303 	umull	r2, r3, r2, r3
 800c792:	0a5b      	lsrs	r3, r3, #9
 800c794:	f241 3288 	movw	r2, #5000	; 0x1388
 800c798:	fb02 f303 	mul.w	r3, r2, r3
 800c79c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	1e5a      	subs	r2, r3, #1
 800c7a2:	60fa      	str	r2, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7ac:	e026      	b.n	800c7fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d0ef      	beq.n	800c79e <SDMMC_GetCmdResp2+0x1e>
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ea      	bne.n	800c79e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d004      	beq.n	800c7de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7da:	2304      	movs	r3, #4
 800c7dc:	e00e      	b.n	800c7fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d004      	beq.n	800c7f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e003      	b.n	800c7fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	22c5      	movs	r2, #197	; 0xc5
 800c7f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	20000094 	.word	0x20000094
 800c80c:	10624dd3 	.word	0x10624dd3

0800c810 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c818:	4b1a      	ldr	r3, [pc, #104]	; (800c884 <SDMMC_GetCmdResp3+0x74>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1a      	ldr	r2, [pc, #104]	; (800c888 <SDMMC_GetCmdResp3+0x78>)
 800c81e:	fba2 2303 	umull	r2, r3, r2, r3
 800c822:	0a5b      	lsrs	r3, r3, #9
 800c824:	f241 3288 	movw	r2, #5000	; 0x1388
 800c828:	fb02 f303 	mul.w	r3, r2, r3
 800c82c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1e5a      	subs	r2, r3, #1
 800c832:	60fa      	str	r2, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c83c:	e01b      	b.n	800c876 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c842:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0ef      	beq.n	800c82e <SDMMC_GetCmdResp3+0x1e>
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1ea      	bne.n	800c82e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c85c:	f003 0304 	and.w	r3, r3, #4
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2204      	movs	r2, #4
 800c868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c86a:	2304      	movs	r3, #4
 800c86c:	e003      	b.n	800c876 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	22c5      	movs	r2, #197	; 0xc5
 800c872:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20000094 	.word	0x20000094
 800c888:	10624dd3 	.word	0x10624dd3

0800c88c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	460b      	mov	r3, r1
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c89a:	4b35      	ldr	r3, [pc, #212]	; (800c970 <SDMMC_GetCmdResp6+0xe4>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a35      	ldr	r2, [pc, #212]	; (800c974 <SDMMC_GetCmdResp6+0xe8>)
 800c8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a4:	0a5b      	lsrs	r3, r3, #9
 800c8a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8aa:	fb02 f303 	mul.w	r3, r2, r3
 800c8ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	1e5a      	subs	r2, r3, #1
 800c8b4:	61fa      	str	r2, [r7, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d102      	bne.n	800c8c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8be:	e052      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d0ef      	beq.n	800c8b0 <SDMMC_GetCmdResp6+0x24>
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1ea      	bne.n	800c8b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8de:	f003 0304 	and.w	r3, r3, #4
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d004      	beq.n	800c8f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	e03a      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2201      	movs	r2, #1
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c902:	2301      	movs	r3, #1
 800c904:	e02f      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff fc0d 	bl	800c126 <SDIO_GetCommandResponse>
 800c90c:	4603      	mov	r3, r0
 800c90e:	461a      	mov	r2, r3
 800c910:	7afb      	ldrb	r3, [r7, #11]
 800c912:	4293      	cmp	r3, r2
 800c914:	d001      	beq.n	800c91a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c916:	2301      	movs	r3, #1
 800c918:	e025      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	22c5      	movs	r2, #197	; 0xc5
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c920:	2100      	movs	r1, #0
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7ff fc0c 	bl	800c140 <SDIO_GetResponse>
 800c928:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	0c1b      	lsrs	r3, r3, #16
 800c938:	b29a      	uxth	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c93e:	2300      	movs	r3, #0
 800c940:	e011      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c94c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c950:	e009      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c95c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c960:	e001      	b.n	800c966 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c966:	4618      	mov	r0, r3
 800c968:	3720      	adds	r7, #32
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000094 	.word	0x20000094
 800c974:	10624dd3 	.word	0x10624dd3

0800c978 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c980:	4b22      	ldr	r3, [pc, #136]	; (800ca0c <SDMMC_GetCmdResp7+0x94>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a22      	ldr	r2, [pc, #136]	; (800ca10 <SDMMC_GetCmdResp7+0x98>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	0a5b      	lsrs	r3, r3, #9
 800c98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	60fa      	str	r2, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9a4:	e02c      	b.n	800ca00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0ef      	beq.n	800c996 <SDMMC_GetCmdResp7+0x1e>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1ea      	bne.n	800c996 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	f003 0304 	and.w	r3, r3, #4
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	e014      	b.n	800ca00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d004      	beq.n	800c9ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e009      	b.n	800ca00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2240      	movs	r2, #64	; 0x40
 800c9fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c9fe:	2300      	movs	r3, #0
  
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	20000094 	.word	0x20000094
 800ca10:	10624dd3 	.word	0x10624dd3

0800ca14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca1c:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <SDMMC_GetCmdError+0x50>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a11      	ldr	r2, [pc, #68]	; (800ca68 <SDMMC_GetCmdError+0x54>)
 800ca22:	fba2 2303 	umull	r2, r3, r2, r3
 800ca26:	0a5b      	lsrs	r3, r3, #9
 800ca28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca2c:	fb02 f303 	mul.w	r3, r2, r3
 800ca30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	1e5a      	subs	r2, r3, #1
 800ca36:	60fa      	str	r2, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca40:	e009      	b.n	800ca56 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d0f1      	beq.n	800ca32 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	22c5      	movs	r2, #197	; 0xc5
 800ca52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	20000094 	.word	0x20000094
 800ca68:	10624dd3 	.word	0x10624dd3

0800ca6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca70:	4904      	ldr	r1, [pc, #16]	; (800ca84 <MX_FATFS_Init+0x18>)
 800ca72:	4805      	ldr	r0, [pc, #20]	; (800ca88 <MX_FATFS_Init+0x1c>)
 800ca74:	f002 ff0e 	bl	800f894 <FATFS_LinkDriver>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	4b03      	ldr	r3, [pc, #12]	; (800ca8c <MX_FATFS_Init+0x20>)
 800ca7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca80:	bf00      	nop
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20005c14 	.word	0x20005c14
 800ca88:	0802e490 	.word	0x0802e490
 800ca8c:	20005c10 	.word	0x20005c10

0800ca90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ca90:	b480      	push	{r7}
 800ca92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ca94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800caaa:	f000 f86b 	bl	800cb84 <BSP_SD_IsDetected>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d001      	beq.n	800cab8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e005      	b.n	800cac4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cab8:	4804      	ldr	r0, [pc, #16]	; (800cacc <BSP_SD_Init+0x2c>)
 800caba:	f7fc fa9c 	bl	8008ff6 <HAL_SD_Init>
 800cabe:	4603      	mov	r3, r0
 800cac0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cac2:	79fb      	ldrb	r3, [r7, #7]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20005810 	.word	0x20005810

0800cad0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	68f9      	ldr	r1, [r7, #12]
 800caec:	4806      	ldr	r0, [pc, #24]	; (800cb08 <BSP_SD_ReadBlocks+0x38>)
 800caee:	f7fc fb33 	bl	8009158 <HAL_SD_ReadBlocks>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20005810 	.word	0x20005810

0800cb0c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af02      	add	r7, sp, #8
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	68f9      	ldr	r1, [r7, #12]
 800cb28:	4806      	ldr	r0, [pc, #24]	; (800cb44 <BSP_SD_WriteBlocks+0x38>)
 800cb2a:	f7fc fcf3 	bl	8009514 <HAL_SD_WriteBlocks>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20005810 	.word	0x20005810

0800cb48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb4c:	4805      	ldr	r0, [pc, #20]	; (800cb64 <BSP_SD_GetCardState+0x1c>)
 800cb4e:	f7fd f837 	bl	8009bc0 <HAL_SD_GetCardState>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	bf14      	ite	ne
 800cb58:	2301      	movne	r3, #1
 800cb5a:	2300      	moveq	r3, #0
 800cb5c:	b2db      	uxtb	r3, r3
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20005810 	.word	0x20005810

0800cb68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4803      	ldr	r0, [pc, #12]	; (800cb80 <BSP_SD_GetCardInfo+0x18>)
 800cb74:	f7fc fff8 	bl	8009b68 <HAL_SD_GetCardInfo>
}
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	20005810 	.word	0x20005810

0800cb84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	b2db      	uxtb	r3, r3
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
	...

0800cba0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <SD_CheckStatus+0x38>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cbb0:	f7ff ffca 	bl	800cb48 <BSP_SD_GetCardState>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d107      	bne.n	800cbca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbba:	4b07      	ldr	r3, [pc, #28]	; (800cbd8 <SD_CheckStatus+0x38>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	f023 0301 	bic.w	r3, r3, #1
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	4b04      	ldr	r3, [pc, #16]	; (800cbd8 <SD_CheckStatus+0x38>)
 800cbc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbca:	4b03      	ldr	r3, [pc, #12]	; (800cbd8 <SD_CheckStatus+0x38>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	200000f5 	.word	0x200000f5

0800cbdc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <SD_initialize+0x38>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cbec:	f7ff ff58 	bl	800caa0 <BSP_SD_Init>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d107      	bne.n	800cc06 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff ffd1 	bl	800cba0 <SD_CheckStatus>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	461a      	mov	r2, r3
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <SD_initialize+0x38>)
 800cc04:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc06:	4b03      	ldr	r3, [pc, #12]	; (800cc14 <SD_initialize+0x38>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	b2db      	uxtb	r3, r3
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	200000f5 	.word	0x200000f5

0800cc18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc22:	79fb      	ldrb	r3, [r7, #7]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff ffbb 	bl	800cba0 <SD_CheckStatus>
 800cc2a:	4603      	mov	r3, r0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	607a      	str	r2, [r7, #4]
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	6879      	ldr	r1, [r7, #4]
 800cc50:	68b8      	ldr	r0, [r7, #8]
 800cc52:	f7ff ff3d 	bl	800cad0 <BSP_SD_ReadBlocks>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d107      	bne.n	800cc6c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc5c:	bf00      	nop
 800cc5e:	f7ff ff73 	bl	800cb48 <BSP_SD_GetCardState>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1fa      	bne.n	800cc5e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b086      	sub	sp, #24
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
 800cc82:	4603      	mov	r3, r0
 800cc84:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	68b8      	ldr	r0, [r7, #8]
 800cc94:	f7ff ff3a 	bl	800cb0c <BSP_SD_WriteBlocks>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d107      	bne.n	800ccae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cc9e:	bf00      	nop
 800cca0:	f7ff ff52 	bl	800cb48 <BSP_SD_GetCardState>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1fa      	bne.n	800cca0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08c      	sub	sp, #48	; 0x30
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	603a      	str	r2, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccce:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <SD_ioctl+0xac>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <SD_ioctl+0x28>
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e03c      	b.n	800cd5a <SD_ioctl+0xa2>

  switch (cmd)
 800cce0:	79bb      	ldrb	r3, [r7, #6]
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d834      	bhi.n	800cd50 <SD_ioctl+0x98>
 800cce6:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <SD_ioctl+0x34>)
 800cce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccec:	0800ccfd 	.word	0x0800ccfd
 800ccf0:	0800cd05 	.word	0x0800cd05
 800ccf4:	0800cd1d 	.word	0x0800cd1d
 800ccf8:	0800cd37 	.word	0x0800cd37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd02:	e028      	b.n	800cd56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd04:	f107 030c 	add.w	r3, r7, #12
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff ff2d 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd1a:	e01c      	b.n	800cd56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd1c:	f107 030c 	add.w	r3, r7, #12
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff ff21 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd34:	e00f      	b.n	800cd56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd36:	f107 030c 	add.w	r3, r7, #12
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff ff14 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	0a5a      	lsrs	r2, r3, #9
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd4e:	e002      	b.n	800cd56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd50:	2304      	movs	r3, #4
 800cd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3730      	adds	r7, #48	; 0x30
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	200000f5 	.word	0x200000f5

0800cd68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	4a08      	ldr	r2, [pc, #32]	; (800cd98 <disk_status+0x30>)
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	79fa      	ldrb	r2, [r7, #7]
 800cd80:	4905      	ldr	r1, [pc, #20]	; (800cd98 <disk_status+0x30>)
 800cd82:	440a      	add	r2, r1
 800cd84:	7a12      	ldrb	r2, [r2, #8]
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	20005c40 	.word	0x20005c40

0800cd9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	4a0d      	ldr	r2, [pc, #52]	; (800cde4 <disk_initialize+0x48>)
 800cdae:	5cd3      	ldrb	r3, [r2, r3]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d111      	bne.n	800cdd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	4a0b      	ldr	r2, [pc, #44]	; (800cde4 <disk_initialize+0x48>)
 800cdb8:	2101      	movs	r1, #1
 800cdba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	4a09      	ldr	r2, [pc, #36]	; (800cde4 <disk_initialize+0x48>)
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	79fa      	ldrb	r2, [r7, #7]
 800cdca:	4906      	ldr	r1, [pc, #24]	; (800cde4 <disk_initialize+0x48>)
 800cdcc:	440a      	add	r2, r1
 800cdce:	7a12      	ldrb	r2, [r2, #8]
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	4798      	blx	r3
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20005c40 	.word	0x20005c40

0800cde8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cde8:	b590      	push	{r4, r7, lr}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
 800cdfa:	4a0a      	ldr	r2, [pc, #40]	; (800ce24 <disk_read+0x3c>)
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	689c      	ldr	r4, [r3, #8]
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	4a07      	ldr	r2, [pc, #28]	; (800ce24 <disk_read+0x3c>)
 800ce08:	4413      	add	r3, r2
 800ce0a:	7a18      	ldrb	r0, [r3, #8]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	68b9      	ldr	r1, [r7, #8]
 800ce12:	47a0      	blx	r4
 800ce14:	4603      	mov	r3, r0
 800ce16:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	371c      	adds	r7, #28
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd90      	pop	{r4, r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20005c40 	.word	0x20005c40

0800ce28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b087      	sub	sp, #28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60b9      	str	r1, [r7, #8]
 800ce30:	607a      	str	r2, [r7, #4]
 800ce32:	603b      	str	r3, [r7, #0]
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	4a0a      	ldr	r2, [pc, #40]	; (800ce64 <disk_write+0x3c>)
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	68dc      	ldr	r4, [r3, #12]
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	4a07      	ldr	r2, [pc, #28]	; (800ce64 <disk_write+0x3c>)
 800ce48:	4413      	add	r3, r2
 800ce4a:	7a18      	ldrb	r0, [r3, #8]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	68b9      	ldr	r1, [r7, #8]
 800ce52:	47a0      	blx	r4
 800ce54:	4603      	mov	r3, r0
 800ce56:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	371c      	adds	r7, #28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd90      	pop	{r4, r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20005c40 	.word	0x20005c40

0800ce68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	603a      	str	r2, [r7, #0]
 800ce72:	71fb      	strb	r3, [r7, #7]
 800ce74:	460b      	mov	r3, r1
 800ce76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ce78:	79fb      	ldrb	r3, [r7, #7]
 800ce7a:	4a09      	ldr	r2, [pc, #36]	; (800cea0 <disk_ioctl+0x38>)
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	79fa      	ldrb	r2, [r7, #7]
 800ce86:	4906      	ldr	r1, [pc, #24]	; (800cea0 <disk_ioctl+0x38>)
 800ce88:	440a      	add	r2, r1
 800ce8a:	7a10      	ldrb	r0, [r2, #8]
 800ce8c:	79b9      	ldrb	r1, [r7, #6]
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4798      	blx	r3
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
  return res;
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20005c40 	.word	0x20005c40

0800cea4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ceb4:	89fb      	ldrh	r3, [r7, #14]
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	b21a      	sxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	b21b      	sxth	r3, r3
 800cec0:	4313      	orrs	r3, r2
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cec6:	89fb      	ldrh	r3, [r7, #14]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	3303      	adds	r3, #3
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	021b      	lsls	r3, r3, #8
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	3202      	adds	r2, #2
 800ceec:	7812      	ldrb	r2, [r2, #0]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	021b      	lsls	r3, r3, #8
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	3201      	adds	r2, #1
 800cefa:	7812      	ldrb	r2, [r2, #0]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	021b      	lsls	r3, r3, #8
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	7812      	ldrb	r2, [r2, #0]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	607a      	str	r2, [r7, #4]
 800cf2c:	887a      	ldrh	r2, [r7, #2]
 800cf2e:	b2d2      	uxtb	r2, r2
 800cf30:	701a      	strb	r2, [r3, #0]
 800cf32:	887b      	ldrh	r3, [r7, #2]
 800cf34:	0a1b      	lsrs	r3, r3, #8
 800cf36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	607a      	str	r2, [r7, #4]
 800cf3e:	887a      	ldrh	r2, [r7, #2]
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	701a      	strb	r2, [r3, #0]
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	701a      	strb	r2, [r3, #0]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	0a1b      	lsrs	r3, r3, #8
 800cf6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	1c5a      	adds	r2, r3, #1
 800cf70:	607a      	str	r2, [r7, #4]
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	b2d2      	uxtb	r2, r2
 800cf76:	701a      	strb	r2, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	b2d2      	uxtb	r2, r2
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	0a1b      	lsrs	r3, r3, #8
 800cf8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cfa8:	b480      	push	{r7}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00d      	beq.n	800cfde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	1c53      	adds	r3, r2, #1
 800cfc6:	613b      	str	r3, [r7, #16]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	1c59      	adds	r1, r3, #1
 800cfcc:	6179      	str	r1, [r7, #20]
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	607b      	str	r3, [r7, #4]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1f1      	bne.n	800cfc2 <mem_cpy+0x1a>
	}
}
 800cfde:	bf00      	nop
 800cfe0:	371c      	adds	r7, #28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cfea:	b480      	push	{r7}
 800cfec:	b087      	sub	sp, #28
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	617a      	str	r2, [r7, #20]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3b01      	subs	r3, #1
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f3      	bne.n	800cffa <mem_set+0x10>
}
 800d012:	bf00      	nop
 800d014:	bf00      	nop
 800d016:	371c      	adds	r7, #28
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d020:	b480      	push	{r7}
 800d022:	b089      	sub	sp, #36	; 0x24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	61fb      	str	r3, [r7, #28]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	61fa      	str	r2, [r7, #28]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	4619      	mov	r1, r3
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	61ba      	str	r2, [r7, #24]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	1acb      	subs	r3, r1, r3
 800d04c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3b01      	subs	r3, #1
 800d052:	607b      	str	r3, [r7, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d002      	beq.n	800d060 <mem_cmp+0x40>
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0eb      	beq.n	800d038 <mem_cmp+0x18>

	return r;
 800d060:	697b      	ldr	r3, [r7, #20]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3724      	adds	r7, #36	; 0x24
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d078:	e002      	b.n	800d080 <chk_chr+0x12>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3301      	adds	r3, #1
 800d07e:	607b      	str	r3, [r7, #4]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <chk_chr+0x26>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	461a      	mov	r2, r3
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	4293      	cmp	r3, r2
 800d092:	d1f2      	bne.n	800d07a <chk_chr+0xc>
	return *str;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	781b      	ldrb	r3, [r3, #0]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60bb      	str	r3, [r7, #8]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	60fb      	str	r3, [r7, #12]
 800d0b6:	e029      	b.n	800d10c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d0b8:	4a27      	ldr	r2, [pc, #156]	; (800d158 <chk_lock+0xb4>)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	011b      	lsls	r3, r3, #4
 800d0be:	4413      	add	r3, r2
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d01d      	beq.n	800d102 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d0c6:	4a24      	ldr	r2, [pc, #144]	; (800d158 <chk_lock+0xb4>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	4413      	add	r3, r2
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d116      	bne.n	800d106 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d0d8:	4a1f      	ldr	r2, [pc, #124]	; (800d158 <chk_lock+0xb4>)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	4413      	add	r3, r2
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d10c      	bne.n	800d106 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d0ec:	4a1a      	ldr	r2, [pc, #104]	; (800d158 <chk_lock+0xb4>)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	4413      	add	r3, r2
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d102      	bne.n	800d106 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d100:	e007      	b.n	800d112 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d102:	2301      	movs	r3, #1
 800d104:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3301      	adds	r3, #1
 800d10a:	60fb      	str	r3, [r7, #12]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d9d2      	bls.n	800d0b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d109      	bne.n	800d12c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d102      	bne.n	800d124 <chk_lock+0x80>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b02      	cmp	r3, #2
 800d122:	d101      	bne.n	800d128 <chk_lock+0x84>
 800d124:	2300      	movs	r3, #0
 800d126:	e010      	b.n	800d14a <chk_lock+0xa6>
 800d128:	2312      	movs	r3, #18
 800d12a:	e00e      	b.n	800d14a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d108      	bne.n	800d144 <chk_lock+0xa0>
 800d132:	4a09      	ldr	r2, [pc, #36]	; (800d158 <chk_lock+0xb4>)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	011b      	lsls	r3, r3, #4
 800d138:	4413      	add	r3, r2
 800d13a:	330c      	adds	r3, #12
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d142:	d101      	bne.n	800d148 <chk_lock+0xa4>
 800d144:	2310      	movs	r3, #16
 800d146:	e000      	b.n	800d14a <chk_lock+0xa6>
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20005c20 	.word	0x20005c20

0800d15c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d162:	2300      	movs	r3, #0
 800d164:	607b      	str	r3, [r7, #4]
 800d166:	e002      	b.n	800d16e <enq_lock+0x12>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3301      	adds	r3, #1
 800d16c:	607b      	str	r3, [r7, #4]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d806      	bhi.n	800d182 <enq_lock+0x26>
 800d174:	4a09      	ldr	r2, [pc, #36]	; (800d19c <enq_lock+0x40>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	011b      	lsls	r3, r3, #4
 800d17a:	4413      	add	r3, r2
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1f2      	bne.n	800d168 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b02      	cmp	r3, #2
 800d186:	bf14      	ite	ne
 800d188:	2301      	movne	r3, #1
 800d18a:	2300      	moveq	r3, #0
 800d18c:	b2db      	uxtb	r3, r3
}
 800d18e:	4618      	mov	r0, r3
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20005c20 	.word	0x20005c20

0800d1a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e01f      	b.n	800d1f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d1b0:	4a41      	ldr	r2, [pc, #260]	; (800d2b8 <inc_lock+0x118>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	4413      	add	r3, r2
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d113      	bne.n	800d1ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d1c2:	4a3d      	ldr	r2, [pc, #244]	; (800d2b8 <inc_lock+0x118>)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	4413      	add	r3, r2
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d109      	bne.n	800d1ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d1d6:	4a38      	ldr	r2, [pc, #224]	; (800d2b8 <inc_lock+0x118>)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	011b      	lsls	r3, r3, #4
 800d1dc:	4413      	add	r3, r2
 800d1de:	3308      	adds	r3, #8
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d006      	beq.n	800d1f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d9dc      	bls.n	800d1b0 <inc_lock+0x10>
 800d1f6:	e000      	b.n	800d1fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d1f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d132      	bne.n	800d266 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d200:	2300      	movs	r3, #0
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	e002      	b.n	800d20c <inc_lock+0x6c>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3301      	adds	r3, #1
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d806      	bhi.n	800d220 <inc_lock+0x80>
 800d212:	4a29      	ldr	r2, [pc, #164]	; (800d2b8 <inc_lock+0x118>)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	011b      	lsls	r3, r3, #4
 800d218:	4413      	add	r3, r2
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1f2      	bne.n	800d206 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d101      	bne.n	800d22a <inc_lock+0x8a>
 800d226:	2300      	movs	r3, #0
 800d228:	e040      	b.n	800d2ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4922      	ldr	r1, [pc, #136]	; (800d2b8 <inc_lock+0x118>)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	011b      	lsls	r3, r3, #4
 800d234:	440b      	add	r3, r1
 800d236:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689a      	ldr	r2, [r3, #8]
 800d23c:	491e      	ldr	r1, [pc, #120]	; (800d2b8 <inc_lock+0x118>)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	440b      	add	r3, r1
 800d244:	3304      	adds	r3, #4
 800d246:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	695a      	ldr	r2, [r3, #20]
 800d24c:	491a      	ldr	r1, [pc, #104]	; (800d2b8 <inc_lock+0x118>)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	440b      	add	r3, r1
 800d254:	3308      	adds	r3, #8
 800d256:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d258:	4a17      	ldr	r2, [pc, #92]	; (800d2b8 <inc_lock+0x118>)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	011b      	lsls	r3, r3, #4
 800d25e:	4413      	add	r3, r2
 800d260:	330c      	adds	r3, #12
 800d262:	2200      	movs	r2, #0
 800d264:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d009      	beq.n	800d280 <inc_lock+0xe0>
 800d26c:	4a12      	ldr	r2, [pc, #72]	; (800d2b8 <inc_lock+0x118>)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	011b      	lsls	r3, r3, #4
 800d272:	4413      	add	r3, r2
 800d274:	330c      	adds	r3, #12
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <inc_lock+0xe0>
 800d27c:	2300      	movs	r3, #0
 800d27e:	e015      	b.n	800d2ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d108      	bne.n	800d298 <inc_lock+0xf8>
 800d286:	4a0c      	ldr	r2, [pc, #48]	; (800d2b8 <inc_lock+0x118>)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	4413      	add	r3, r2
 800d28e:	330c      	adds	r3, #12
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	3301      	adds	r3, #1
 800d294:	b29a      	uxth	r2, r3
 800d296:	e001      	b.n	800d29c <inc_lock+0xfc>
 800d298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d29c:	4906      	ldr	r1, [pc, #24]	; (800d2b8 <inc_lock+0x118>)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	440b      	add	r3, r1
 800d2a4:	330c      	adds	r3, #12
 800d2a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3301      	adds	r3, #1
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	20005c20 	.word	0x20005c20

0800d2bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	607b      	str	r3, [r7, #4]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d825      	bhi.n	800d31c <dec_lock+0x60>
		n = Files[i].ctr;
 800d2d0:	4a17      	ldr	r2, [pc, #92]	; (800d330 <dec_lock+0x74>)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	4413      	add	r3, r2
 800d2d8:	330c      	adds	r3, #12
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d2de:	89fb      	ldrh	r3, [r7, #14]
 800d2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2e4:	d101      	bne.n	800d2ea <dec_lock+0x2e>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d2ea:	89fb      	ldrh	r3, [r7, #14]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <dec_lock+0x3a>
 800d2f0:	89fb      	ldrh	r3, [r7, #14]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d2f6:	4a0e      	ldr	r2, [pc, #56]	; (800d330 <dec_lock+0x74>)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	4413      	add	r3, r2
 800d2fe:	330c      	adds	r3, #12
 800d300:	89fa      	ldrh	r2, [r7, #14]
 800d302:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d304:	89fb      	ldrh	r3, [r7, #14]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d105      	bne.n	800d316 <dec_lock+0x5a>
 800d30a:	4a09      	ldr	r2, [pc, #36]	; (800d330 <dec_lock+0x74>)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	011b      	lsls	r3, r3, #4
 800d310:	4413      	add	r3, r2
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	737b      	strb	r3, [r7, #13]
 800d31a:	e001      	b.n	800d320 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d31c:	2302      	movs	r3, #2
 800d31e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d320:	7b7b      	ldrb	r3, [r7, #13]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	20005c20 	.word	0x20005c20

0800d334 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d33c:	2300      	movs	r3, #0
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	e010      	b.n	800d364 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d342:	4a0d      	ldr	r2, [pc, #52]	; (800d378 <clear_lock+0x44>)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	4413      	add	r3, r2
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d105      	bne.n	800d35e <clear_lock+0x2a>
 800d352:	4a09      	ldr	r2, [pc, #36]	; (800d378 <clear_lock+0x44>)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	4413      	add	r3, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3301      	adds	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b01      	cmp	r3, #1
 800d368:	d9eb      	bls.n	800d342 <clear_lock+0xe>
	}
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	20005c20 	.word	0x20005c20

0800d37c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	78db      	ldrb	r3, [r3, #3]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d034      	beq.n	800d3fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d394:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7858      	ldrb	r0, [r3, #1]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	f7ff fd40 	bl	800ce28 <disk_write>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	73fb      	strb	r3, [r7, #15]
 800d3b2:	e022      	b.n	800d3fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	1ad2      	subs	r2, r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d217      	bcs.n	800d3fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	789b      	ldrb	r3, [r3, #2]
 800d3ce:	613b      	str	r3, [r7, #16]
 800d3d0:	e010      	b.n	800d3f4 <sync_window+0x78>
					wsect += fs->fsize;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	4413      	add	r3, r2
 800d3da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	7858      	ldrb	r0, [r3, #1]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	f7ff fd1d 	bl	800ce28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	613b      	str	r3, [r7, #16]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d8eb      	bhi.n	800d3d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3718      	adds	r7, #24
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d01b      	beq.n	800d454 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff ffad 	bl	800d37c <sync_window>
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d426:	7bfb      	ldrb	r3, [r7, #15]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d113      	bne.n	800d454 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	7858      	ldrb	r0, [r3, #1]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d436:	2301      	movs	r3, #1
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	f7ff fcd5 	bl	800cde8 <disk_read>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d444:	f04f 33ff 	mov.w	r3, #4294967295
 800d448:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
	...

0800d460 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7ff ff87 	bl	800d37c <sync_window>
 800d46e:	4603      	mov	r3, r0
 800d470:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d159      	bne.n	800d52c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d149      	bne.n	800d514 <sync_fs+0xb4>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	791b      	ldrb	r3, [r3, #4]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d145      	bne.n	800d514 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	899b      	ldrh	r3, [r3, #12]
 800d492:	461a      	mov	r2, r3
 800d494:	2100      	movs	r1, #0
 800d496:	f7ff fda8 	bl	800cfea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3334      	adds	r3, #52	; 0x34
 800d49e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fd37 	bl	800cf1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3334      	adds	r3, #52	; 0x34
 800d4b0:	4921      	ldr	r1, [pc, #132]	; (800d538 <sync_fs+0xd8>)
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fd4c 	bl	800cf50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3334      	adds	r3, #52	; 0x34
 800d4bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d4c0:	491e      	ldr	r1, [pc, #120]	; (800d53c <sync_fs+0xdc>)
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff fd44 	bl	800cf50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3334      	adds	r3, #52	; 0x34
 800d4cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	f7ff fd3a 	bl	800cf50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3334      	adds	r3, #52	; 0x34
 800d4e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7ff fd30 	bl	800cf50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	7858      	ldrb	r0, [r3, #1]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d508:	2301      	movs	r3, #1
 800d50a:	f7ff fc8d 	bl	800ce28 <disk_write>
			fs->fsi_flag = 0;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	785b      	ldrb	r3, [r3, #1]
 800d518:	2200      	movs	r2, #0
 800d51a:	2100      	movs	r1, #0
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fca3 	bl	800ce68 <disk_ioctl>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <sync_fs+0xcc>
 800d528:	2301      	movs	r3, #1
 800d52a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	41615252 	.word	0x41615252
 800d53c:	61417272 	.word	0x61417272

0800d540 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	3b02      	subs	r3, #2
 800d54e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	3b02      	subs	r3, #2
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d301      	bcc.n	800d560 <clust2sect+0x20>
 800d55c:	2300      	movs	r3, #0
 800d55e:	e008      	b.n	800d572 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	895b      	ldrh	r3, [r3, #10]
 800d564:	461a      	mov	r2, r3
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	fb03 f202 	mul.w	r2, r3, r2
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	4413      	add	r3, r2
}
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b086      	sub	sp, #24
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d904      	bls.n	800d59e <get_fat+0x20>
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d302      	bcc.n	800d5a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d59e:	2301      	movs	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
 800d5a2:	e0bb      	b.n	800d71c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	f000 8083 	beq.w	800d6ba <get_fat+0x13c>
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	f300 80a7 	bgt.w	800d708 <get_fat+0x18a>
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d002      	beq.n	800d5c4 <get_fat+0x46>
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d056      	beq.n	800d670 <get_fat+0xf2>
 800d5c2:	e0a1      	b.n	800d708 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	085b      	lsrs	r3, r3, #1
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	899b      	ldrh	r3, [r3, #12]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5e2:	4413      	add	r3, r2
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6938      	ldr	r0, [r7, #16]
 800d5e8:	f7ff ff0c 	bl	800d404 <move_window>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f040 808d 	bne.w	800d70e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	1c5a      	adds	r2, r3, #1
 800d5f8:	60fa      	str	r2, [r7, #12]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	8992      	ldrh	r2, [r2, #12]
 800d5fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800d602:	fb01 f202 	mul.w	r2, r1, r2
 800d606:	1a9b      	subs	r3, r3, r2
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	4413      	add	r3, r2
 800d60c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d610:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	899b      	ldrh	r3, [r3, #12]
 800d61a:	4619      	mov	r1, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d622:	4413      	add	r3, r2
 800d624:	4619      	mov	r1, r3
 800d626:	6938      	ldr	r0, [r7, #16]
 800d628:	f7ff feec 	bl	800d404 <move_window>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d16f      	bne.n	800d712 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	899b      	ldrh	r3, [r3, #12]
 800d636:	461a      	mov	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d63e:	fb01 f202 	mul.w	r2, r1, r2
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	4413      	add	r3, r2
 800d648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	461a      	mov	r2, r3
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	4313      	orrs	r3, r2
 800d654:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	f003 0301 	and.w	r3, r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <get_fat+0xe8>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	091b      	lsrs	r3, r3, #4
 800d664:	e002      	b.n	800d66c <get_fat+0xee>
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d66c:	617b      	str	r3, [r7, #20]
			break;
 800d66e:	e055      	b.n	800d71c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	899b      	ldrh	r3, [r3, #12]
 800d678:	085b      	lsrs	r3, r3, #1
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4619      	mov	r1, r3
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	fbb3 f3f1 	udiv	r3, r3, r1
 800d684:	4413      	add	r3, r2
 800d686:	4619      	mov	r1, r3
 800d688:	6938      	ldr	r0, [r7, #16]
 800d68a:	f7ff febb 	bl	800d404 <move_window>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d140      	bne.n	800d716 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	005b      	lsls	r3, r3, #1
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	8992      	ldrh	r2, [r2, #12]
 800d6a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6a6:	fb00 f202 	mul.w	r2, r0, r2
 800d6aa:	1a9b      	subs	r3, r3, r2
 800d6ac:	440b      	add	r3, r1
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff fbf8 	bl	800cea4 <ld_word>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	617b      	str	r3, [r7, #20]
			break;
 800d6b8:	e030      	b.n	800d71c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	899b      	ldrh	r3, [r3, #12]
 800d6c2:	089b      	lsrs	r3, r3, #2
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6938      	ldr	r0, [r7, #16]
 800d6d4:	f7ff fe96 	bl	800d404 <move_window>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d11d      	bne.n	800d71a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	8992      	ldrh	r2, [r2, #12]
 800d6ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6f0:	fb00 f202 	mul.w	r2, r0, r2
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	440b      	add	r3, r1
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fbeb 	bl	800ced4 <ld_dword>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d704:	617b      	str	r3, [r7, #20]
			break;
 800d706:	e009      	b.n	800d71c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d708:	2301      	movs	r3, #1
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	e006      	b.n	800d71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d70e:	bf00      	nop
 800d710:	e004      	b.n	800d71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d712:	bf00      	nop
 800d714:	e002      	b.n	800d71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d71a:	bf00      	nop
		}
	}

	return val;
 800d71c:	697b      	ldr	r3, [r7, #20]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d726:	b590      	push	{r4, r7, lr}
 800d728:	b089      	sub	sp, #36	; 0x24
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	60b9      	str	r1, [r7, #8]
 800d730:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d732:	2302      	movs	r3, #2
 800d734:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	f240 8102 	bls.w	800d942 <put_fat+0x21c>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	429a      	cmp	r2, r3
 800d746:	f080 80fc 	bcs.w	800d942 <put_fat+0x21c>
		switch (fs->fs_type) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b03      	cmp	r3, #3
 800d750:	f000 80b6 	beq.w	800d8c0 <put_fat+0x19a>
 800d754:	2b03      	cmp	r3, #3
 800d756:	f300 80fd 	bgt.w	800d954 <put_fat+0x22e>
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d003      	beq.n	800d766 <put_fat+0x40>
 800d75e:	2b02      	cmp	r3, #2
 800d760:	f000 8083 	beq.w	800d86a <put_fat+0x144>
 800d764:	e0f6      	b.n	800d954 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	61bb      	str	r3, [r7, #24]
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	085b      	lsrs	r3, r3, #1
 800d76e:	69ba      	ldr	r2, [r7, #24]
 800d770:	4413      	add	r3, r2
 800d772:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	899b      	ldrh	r3, [r3, #12]
 800d77c:	4619      	mov	r1, r3
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	fbb3 f3f1 	udiv	r3, r3, r1
 800d784:	4413      	add	r3, r2
 800d786:	4619      	mov	r1, r3
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fe3b 	bl	800d404 <move_window>
 800d78e:	4603      	mov	r3, r0
 800d790:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d792:	7ffb      	ldrb	r3, [r7, #31]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f040 80d6 	bne.w	800d946 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	61ba      	str	r2, [r7, #24]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	8992      	ldrh	r2, [r2, #12]
 800d7aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7ae:	fb00 f202 	mul.w	r2, r0, r2
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	440b      	add	r3, r1
 800d7b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00d      	beq.n	800d7de <put_fat+0xb8>
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	b25b      	sxtb	r3, r3
 800d7c8:	f003 030f 	and.w	r3, r3, #15
 800d7cc:	b25a      	sxtb	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	b25b      	sxtb	r3, r3
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	b25b      	sxtb	r3, r3
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	e001      	b.n	800d7e2 <put_fat+0xbc>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	899b      	ldrh	r3, [r3, #12]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff fdff 	bl	800d404 <move_window>
 800d806:	4603      	mov	r3, r0
 800d808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d80a:	7ffb      	ldrb	r3, [r7, #31]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f040 809c 	bne.w	800d94a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	899b      	ldrh	r3, [r3, #12]
 800d81c:	461a      	mov	r2, r3
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	fbb3 f0f2 	udiv	r0, r3, r2
 800d824:	fb00 f202 	mul.w	r2, r0, r2
 800d828:	1a9b      	subs	r3, r3, r2
 800d82a:	440b      	add	r3, r1
 800d82c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <put_fat+0x11a>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	091b      	lsrs	r3, r3, #4
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	e00e      	b.n	800d85e <put_fat+0x138>
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	b25b      	sxtb	r3, r3
 800d846:	f023 030f 	bic.w	r3, r3, #15
 800d84a:	b25a      	sxtb	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	0a1b      	lsrs	r3, r3, #8
 800d850:	b25b      	sxtb	r3, r3
 800d852:	f003 030f 	and.w	r3, r3, #15
 800d856:	b25b      	sxtb	r3, r3
 800d858:	4313      	orrs	r3, r2
 800d85a:	b25b      	sxtb	r3, r3
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	70da      	strb	r2, [r3, #3]
			break;
 800d868:	e074      	b.n	800d954 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	899b      	ldrh	r3, [r3, #12]
 800d872:	085b      	lsrs	r3, r3, #1
 800d874:	b29b      	uxth	r3, r3
 800d876:	4619      	mov	r1, r3
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d87e:	4413      	add	r3, r2
 800d880:	4619      	mov	r1, r3
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f7ff fdbe 	bl	800d404 <move_window>
 800d888:	4603      	mov	r3, r0
 800d88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d88c:	7ffb      	ldrb	r3, [r7, #31]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d15d      	bne.n	800d94e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	8992      	ldrh	r2, [r2, #12]
 800d8a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8a4:	fb00 f202 	mul.w	r2, r0, r2
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	440b      	add	r3, r1
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	b292      	uxth	r2, r2
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff fb31 	bl	800cf1a <st_word>
			fs->wflag = 1;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	70da      	strb	r2, [r3, #3]
			break;
 800d8be:	e049      	b.n	800d954 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	899b      	ldrh	r3, [r3, #12]
 800d8c8:	089b      	lsrs	r3, r3, #2
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f7ff fd93 	bl	800d404 <move_window>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8e2:	7ffb      	ldrb	r3, [r7, #31]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d134      	bne.n	800d952 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	8992      	ldrh	r2, [r2, #12]
 800d8fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d900:	fb00 f202 	mul.w	r2, r0, r2
 800d904:	1a9b      	subs	r3, r3, r2
 800d906:	440b      	add	r3, r1
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff fae3 	bl	800ced4 <ld_dword>
 800d90e:	4603      	mov	r3, r0
 800d910:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d914:	4323      	orrs	r3, r4
 800d916:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	8992      	ldrh	r2, [r2, #12]
 800d926:	fbb3 f0f2 	udiv	r0, r3, r2
 800d92a:	fb00 f202 	mul.w	r2, r0, r2
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	440b      	add	r3, r1
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff fb0b 	bl	800cf50 <st_dword>
			fs->wflag = 1;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	70da      	strb	r2, [r3, #3]
			break;
 800d940:	e008      	b.n	800d954 <put_fat+0x22e>
		}
	}
 800d942:	bf00      	nop
 800d944:	e006      	b.n	800d954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d946:	bf00      	nop
 800d948:	e004      	b.n	800d954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d94a:	bf00      	nop
 800d94c:	e002      	b.n	800d954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d94e:	bf00      	nop
 800d950:	e000      	b.n	800d954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d952:	bf00      	nop
	return res;
 800d954:	7ffb      	ldrb	r3, [r7, #31]
}
 800d956:	4618      	mov	r0, r3
 800d958:	3724      	adds	r7, #36	; 0x24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd90      	pop	{r4, r7, pc}

0800d95e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b088      	sub	sp, #32
 800d962:	af00      	add	r7, sp, #0
 800d964:	60f8      	str	r0, [r7, #12]
 800d966:	60b9      	str	r1, [r7, #8]
 800d968:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d904      	bls.n	800d984 <remove_chain+0x26>
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	429a      	cmp	r2, r3
 800d982:	d301      	bcc.n	800d988 <remove_chain+0x2a>
 800d984:	2302      	movs	r3, #2
 800d986:	e04b      	b.n	800da20 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00c      	beq.n	800d9a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	69b8      	ldr	r0, [r7, #24]
 800d996:	f7ff fec6 	bl	800d726 <put_fat>
 800d99a:	4603      	mov	r3, r0
 800d99c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d99e:	7ffb      	ldrb	r3, [r7, #31]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <remove_chain+0x4a>
 800d9a4:	7ffb      	ldrb	r3, [r7, #31]
 800d9a6:	e03b      	b.n	800da20 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7ff fde7 	bl	800d57e <get_fat>
 800d9b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d031      	beq.n	800da1c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d101      	bne.n	800d9c2 <remove_chain+0x64>
 800d9be:	2302      	movs	r3, #2
 800d9c0:	e02e      	b.n	800da20 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c8:	d101      	bne.n	800d9ce <remove_chain+0x70>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e028      	b.n	800da20 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	68b9      	ldr	r1, [r7, #8]
 800d9d2:	69b8      	ldr	r0, [r7, #24]
 800d9d4:	f7ff fea7 	bl	800d726 <put_fat>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d9dc:	7ffb      	ldrb	r3, [r7, #31]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <remove_chain+0x88>
 800d9e2:	7ffb      	ldrb	r3, [r7, #31]
 800d9e4:	e01c      	b.n	800da20 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	695a      	ldr	r2, [r3, #20]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	3b02      	subs	r3, #2
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d20b      	bcs.n	800da0c <remove_chain+0xae>
			fs->free_clst++;
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	1c5a      	adds	r2, r3, #1
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	791b      	ldrb	r3, [r3, #4]
 800da02:	f043 0301 	orr.w	r3, r3, #1
 800da06:	b2da      	uxtb	r2, r3
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d3c6      	bcc.n	800d9a8 <remove_chain+0x4a>
 800da1a:	e000      	b.n	800da1e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800da1c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3720      	adds	r7, #32
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10d      	bne.n	800da5a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d004      	beq.n	800da54 <create_chain+0x2c>
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	69ba      	ldr	r2, [r7, #24]
 800da50:	429a      	cmp	r2, r3
 800da52:	d31b      	bcc.n	800da8c <create_chain+0x64>
 800da54:	2301      	movs	r3, #1
 800da56:	61bb      	str	r3, [r7, #24]
 800da58:	e018      	b.n	800da8c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff fd8e 	bl	800d57e <get_fat>
 800da62:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d801      	bhi.n	800da6e <create_chain+0x46>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e070      	b.n	800db50 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da74:	d101      	bne.n	800da7a <create_chain+0x52>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	e06a      	b.n	800db50 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	429a      	cmp	r2, r3
 800da82:	d201      	bcs.n	800da88 <create_chain+0x60>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	e063      	b.n	800db50 <create_chain+0x128>
		scl = clst;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	3301      	adds	r3, #1
 800da94:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d307      	bcc.n	800dab0 <create_chain+0x88>
				ncl = 2;
 800daa0:	2302      	movs	r3, #2
 800daa2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800daa4:	69fa      	ldr	r2, [r7, #28]
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d901      	bls.n	800dab0 <create_chain+0x88>
 800daac:	2300      	movs	r3, #0
 800daae:	e04f      	b.n	800db50 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dab0:	69f9      	ldr	r1, [r7, #28]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff fd63 	bl	800d57e <get_fat>
 800dab8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00e      	beq.n	800dade <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d003      	beq.n	800dace <create_chain+0xa6>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dacc:	d101      	bne.n	800dad2 <create_chain+0xaa>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	e03e      	b.n	800db50 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dad2:	69fa      	ldr	r2, [r7, #28]
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d1da      	bne.n	800da90 <create_chain+0x68>
 800dada:	2300      	movs	r3, #0
 800dadc:	e038      	b.n	800db50 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dade:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dae0:	f04f 32ff 	mov.w	r2, #4294967295
 800dae4:	69f9      	ldr	r1, [r7, #28]
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f7ff fe1d 	bl	800d726 <put_fat>
 800daec:	4603      	mov	r3, r0
 800daee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <create_chain+0xe2>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d006      	beq.n	800db0a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dafc:	69fa      	ldr	r2, [r7, #28]
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6938      	ldr	r0, [r7, #16]
 800db02:	f7ff fe10 	bl	800d726 <put_fat>
 800db06:	4603      	mov	r3, r0
 800db08:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d116      	bne.n	800db3e <create_chain+0x116>
		fs->last_clst = ncl;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	695a      	ldr	r2, [r3, #20]
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	3b02      	subs	r3, #2
 800db20:	429a      	cmp	r2, r3
 800db22:	d804      	bhi.n	800db2e <create_chain+0x106>
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	1e5a      	subs	r2, r3, #1
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	791b      	ldrb	r3, [r3, #4]
 800db32:	f043 0301 	orr.w	r3, r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	711a      	strb	r2, [r3, #4]
 800db3c:	e007      	b.n	800db4e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d102      	bne.n	800db4a <create_chain+0x122>
 800db44:	f04f 33ff 	mov.w	r3, #4294967295
 800db48:	e000      	b.n	800db4c <create_chain+0x124>
 800db4a:	2301      	movs	r3, #1
 800db4c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db4e:	69fb      	ldr	r3, [r7, #28]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3720      	adds	r7, #32
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800db58:	b480      	push	{r7}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	3304      	adds	r3, #4
 800db6e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	899b      	ldrh	r3, [r3, #12]
 800db74:	461a      	mov	r2, r3
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	fbb3 f3f2 	udiv	r3, r3, r2
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	8952      	ldrh	r2, [r2, #10]
 800db80:	fbb3 f3f2 	udiv	r3, r3, r2
 800db84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	1d1a      	adds	r2, r3, #4
 800db8a:	613a      	str	r2, [r7, #16]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <clmt_clust+0x42>
 800db96:	2300      	movs	r3, #0
 800db98:	e010      	b.n	800dbbc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d307      	bcc.n	800dbb2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	3304      	adds	r3, #4
 800dbae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbb0:	e7e9      	b.n	800db86 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dbb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	4413      	add	r3, r2
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	371c      	adds	r7, #28
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbde:	d204      	bcs.n	800dbea <dir_sdi+0x22>
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	f003 031f 	and.w	r3, r3, #31
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <dir_sdi+0x26>
		return FR_INT_ERR;
 800dbea:	2302      	movs	r3, #2
 800dbec:	e071      	b.n	800dcd2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <dir_sdi+0x46>
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d902      	bls.n	800dc0e <dir_sdi+0x46>
		clst = fs->dirbase;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10c      	bne.n	800dc2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	095b      	lsrs	r3, r3, #5
 800dc18:	693a      	ldr	r2, [r7, #16]
 800dc1a:	8912      	ldrh	r2, [r2, #8]
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d301      	bcc.n	800dc24 <dir_sdi+0x5c>
 800dc20:	2302      	movs	r3, #2
 800dc22:	e056      	b.n	800dcd2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	61da      	str	r2, [r3, #28]
 800dc2c:	e02d      	b.n	800dc8a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	895b      	ldrh	r3, [r3, #10]
 800dc32:	461a      	mov	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	899b      	ldrh	r3, [r3, #12]
 800dc38:	fb02 f303 	mul.w	r3, r2, r3
 800dc3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc3e:	e019      	b.n	800dc74 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6979      	ldr	r1, [r7, #20]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fc9a 	bl	800d57e <get_fat>
 800dc4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc52:	d101      	bne.n	800dc58 <dir_sdi+0x90>
 800dc54:	2301      	movs	r3, #1
 800dc56:	e03c      	b.n	800dcd2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d904      	bls.n	800dc68 <dir_sdi+0xa0>
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d301      	bcc.n	800dc6c <dir_sdi+0xa4>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e032      	b.n	800dcd2 <dir_sdi+0x10a>
			ofs -= csz;
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc74:	683a      	ldr	r2, [r7, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d2e1      	bcs.n	800dc40 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dc7c:	6979      	ldr	r1, [r7, #20]
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f7ff fc5e 	bl	800d540 <clust2sect>
 800dc84:	4602      	mov	r2, r0
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	69db      	ldr	r3, [r3, #28]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <dir_sdi+0xd4>
 800dc98:	2302      	movs	r3, #2
 800dc9a:	e01a      	b.n	800dcd2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	69da      	ldr	r2, [r3, #28]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	899b      	ldrh	r3, [r3, #12]
 800dca4:	4619      	mov	r1, r3
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcac:	441a      	add	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	899b      	ldrh	r3, [r3, #12]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcc4:	fb00 f202 	mul.w	r2, r0, r2
 800dcc8:	1a9b      	subs	r3, r3, r2
 800dcca:	18ca      	adds	r2, r1, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b086      	sub	sp, #24
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	695b      	ldr	r3, [r3, #20]
 800dcee:	3320      	adds	r3, #32
 800dcf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	69db      	ldr	r3, [r3, #28]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <dir_next+0x28>
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd00:	d301      	bcc.n	800dd06 <dir_next+0x2c>
 800dd02:	2304      	movs	r3, #4
 800dd04:	e0bb      	b.n	800de7e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	899b      	ldrh	r3, [r3, #12]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd12:	fb01 f202 	mul.w	r2, r1, r2
 800dd16:	1a9b      	subs	r3, r3, r2
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f040 809d 	bne.w	800de58 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	1c5a      	adds	r2, r3, #1
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10b      	bne.n	800dd48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	095b      	lsrs	r3, r3, #5
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	8912      	ldrh	r2, [r2, #8]
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	f0c0 808d 	bcc.w	800de58 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	61da      	str	r2, [r3, #28]
 800dd44:	2304      	movs	r3, #4
 800dd46:	e09a      	b.n	800de7e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	899b      	ldrh	r3, [r3, #12]
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	8952      	ldrh	r2, [r2, #10]
 800dd58:	3a01      	subs	r2, #1
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d17b      	bne.n	800de58 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	4619      	mov	r1, r3
 800dd68:	4610      	mov	r0, r2
 800dd6a:	f7ff fc08 	bl	800d57e <get_fat>
 800dd6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d801      	bhi.n	800dd7a <dir_next+0xa0>
 800dd76:	2302      	movs	r3, #2
 800dd78:	e081      	b.n	800de7e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd80:	d101      	bne.n	800dd86 <dir_next+0xac>
 800dd82:	2301      	movs	r3, #1
 800dd84:	e07b      	b.n	800de7e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	699b      	ldr	r3, [r3, #24]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d359      	bcc.n	800de44 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d104      	bne.n	800dda0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	61da      	str	r2, [r3, #28]
 800dd9c:	2304      	movs	r3, #4
 800dd9e:	e06e      	b.n	800de7e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	4619      	mov	r1, r3
 800dda8:	4610      	mov	r0, r2
 800ddaa:	f7ff fe3d 	bl	800da28 <create_chain>
 800ddae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d101      	bne.n	800ddba <dir_next+0xe0>
 800ddb6:	2307      	movs	r3, #7
 800ddb8:	e061      	b.n	800de7e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <dir_next+0xea>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e05c      	b.n	800de7e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddca:	d101      	bne.n	800ddd0 <dir_next+0xf6>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e056      	b.n	800de7e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f7ff fad3 	bl	800d37c <sync_window>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <dir_next+0x106>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e04e      	b.n	800de7e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	899b      	ldrh	r3, [r3, #12]
 800ddea:	461a      	mov	r2, r3
 800ddec:	2100      	movs	r1, #0
 800ddee:	f7ff f8fc 	bl	800cfea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	613b      	str	r3, [r7, #16]
 800ddf6:	6979      	ldr	r1, [r7, #20]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fba1 	bl	800d540 <clust2sect>
 800ddfe:	4602      	mov	r2, r0
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	631a      	str	r2, [r3, #48]	; 0x30
 800de04:	e012      	b.n	800de2c <dir_next+0x152>
						fs->wflag = 1;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f7ff fab5 	bl	800d37c <sync_window>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <dir_next+0x142>
 800de18:	2301      	movs	r3, #1
 800de1a:	e030      	b.n	800de7e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3301      	adds	r3, #1
 800de20:	613b      	str	r3, [r7, #16]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de26:	1c5a      	adds	r2, r3, #1
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	631a      	str	r2, [r3, #48]	; 0x30
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	895b      	ldrh	r3, [r3, #10]
 800de30:	461a      	mov	r2, r3
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	4293      	cmp	r3, r2
 800de36:	d3e6      	bcc.n	800de06 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	1ad2      	subs	r2, r2, r3
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800de4a:	6979      	ldr	r1, [r7, #20]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff fb77 	bl	800d540 <clust2sect>
 800de52:	4602      	mov	r2, r0
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	899b      	ldrh	r3, [r3, #12]
 800de68:	461a      	mov	r2, r3
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800de70:	fb00 f202 	mul.w	r2, r0, r2
 800de74:	1a9b      	subs	r3, r3, r2
 800de76:	18ca      	adds	r2, r1, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b086      	sub	sp, #24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800de96:	2100      	movs	r1, #0
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff fe95 	bl	800dbc8 <dir_sdi>
 800de9e:	4603      	mov	r3, r0
 800dea0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d12b      	bne.n	800df00 <dir_alloc+0x7a>
		n = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	4619      	mov	r1, r3
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff faa6 	bl	800d404 <move_window>
 800deb8:	4603      	mov	r3, r0
 800deba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800debc:	7dfb      	ldrb	r3, [r7, #23]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d11d      	bne.n	800defe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	2be5      	cmp	r3, #229	; 0xe5
 800deca:	d004      	beq.n	800ded6 <dir_alloc+0x50>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a1b      	ldr	r3, [r3, #32]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d107      	bne.n	800dee6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	3301      	adds	r3, #1
 800deda:	613b      	str	r3, [r7, #16]
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d102      	bne.n	800deea <dir_alloc+0x64>
 800dee4:	e00c      	b.n	800df00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dee6:	2300      	movs	r3, #0
 800dee8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800deea:	2101      	movs	r1, #1
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fef4 	bl	800dcda <dir_next>
 800def2:	4603      	mov	r3, r0
 800def4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800def6:	7dfb      	ldrb	r3, [r7, #23]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d0d7      	beq.n	800deac <dir_alloc+0x26>
 800defc:	e000      	b.n	800df00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800defe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	2b04      	cmp	r3, #4
 800df04:	d101      	bne.n	800df0a <dir_alloc+0x84>
 800df06:	2307      	movs	r3, #7
 800df08:	75fb      	strb	r3, [r7, #23]
	return res;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	331a      	adds	r3, #26
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe ffbe 	bl	800cea4 <ld_word>
 800df28:	4603      	mov	r3, r0
 800df2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b03      	cmp	r3, #3
 800df32:	d109      	bne.n	800df48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	3314      	adds	r3, #20
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe ffb3 	bl	800cea4 <ld_word>
 800df3e:	4603      	mov	r3, r0
 800df40:	041b      	lsls	r3, r3, #16
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	4313      	orrs	r3, r2
 800df46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800df48:	68fb      	ldr	r3, [r7, #12]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b084      	sub	sp, #16
 800df56:	af00      	add	r7, sp, #0
 800df58:	60f8      	str	r0, [r7, #12]
 800df5a:	60b9      	str	r1, [r7, #8]
 800df5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	331a      	adds	r3, #26
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	b292      	uxth	r2, r2
 800df66:	4611      	mov	r1, r2
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fe ffd6 	bl	800cf1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2b03      	cmp	r3, #3
 800df74:	d109      	bne.n	800df8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	f103 0214 	add.w	r2, r3, #20
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	0c1b      	lsrs	r3, r3, #16
 800df80:	b29b      	uxth	r3, r3
 800df82:	4619      	mov	r1, r3
 800df84:	4610      	mov	r0, r2
 800df86:	f7fe ffc8 	bl	800cf1a <st_word>
	}
}
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b086      	sub	sp, #24
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff fe10 	bl	800dbc8 <dir_sdi>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <dir_find+0x24>
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	e03e      	b.n	800e034 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6938      	ldr	r0, [r7, #16]
 800dfbe:	f7ff fa21 	bl	800d404 <move_window>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d12f      	bne.n	800e02c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d102      	bne.n	800dfe0 <dir_find+0x4e>
 800dfda:	2304      	movs	r3, #4
 800dfdc:	75fb      	strb	r3, [r7, #23]
 800dfde:	e028      	b.n	800e032 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a1b      	ldr	r3, [r3, #32]
 800dfe4:	330b      	adds	r3, #11
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a1b      	ldr	r3, [r3, #32]
 800dff6:	330b      	adds	r3, #11
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	f003 0308 	and.w	r3, r3, #8
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10a      	bne.n	800e018 <dir_find+0x86>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a18      	ldr	r0, [r3, #32]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	3324      	adds	r3, #36	; 0x24
 800e00a:	220b      	movs	r2, #11
 800e00c:	4619      	mov	r1, r3
 800e00e:	f7ff f807 	bl	800d020 <mem_cmp>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e018:	2100      	movs	r1, #0
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff fe5d 	bl	800dcda <dir_next>
 800e020:	4603      	mov	r3, r0
 800e022:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e024:	7dfb      	ldrb	r3, [r7, #23]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d0c5      	beq.n	800dfb6 <dir_find+0x24>
 800e02a:	e002      	b.n	800e032 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e02c:	bf00      	nop
 800e02e:	e000      	b.n	800e032 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e030:	bf00      	nop

	return res;
 800e032:	7dfb      	ldrb	r3, [r7, #23]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e04a:	2101      	movs	r1, #1
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff ff1a 	bl	800de86 <dir_alloc>
 800e052:	4603      	mov	r3, r0
 800e054:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d11c      	bne.n	800e096 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	69db      	ldr	r3, [r3, #28]
 800e060:	4619      	mov	r1, r3
 800e062:	68b8      	ldr	r0, [r7, #8]
 800e064:	f7ff f9ce 	bl	800d404 <move_window>
 800e068:	4603      	mov	r3, r0
 800e06a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d111      	bne.n	800e096 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	2220      	movs	r2, #32
 800e078:	2100      	movs	r1, #0
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe ffb5 	bl	800cfea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a18      	ldr	r0, [r3, #32]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3324      	adds	r3, #36	; 0x24
 800e088:	220b      	movs	r2, #11
 800e08a:	4619      	mov	r1, r3
 800e08c:	f7fe ff8c 	bl	800cfa8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2201      	movs	r2, #1
 800e094:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	69db      	ldr	r3, [r3, #28]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d04e      	beq.n	800e156 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	613b      	str	r3, [r7, #16]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e0c0:	e021      	b.n	800e106 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1a      	ldr	r2, [r3, #32]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	1c59      	adds	r1, r3, #1
 800e0ca:	6179      	str	r1, [r7, #20]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	2b20      	cmp	r3, #32
 800e0d6:	d100      	bne.n	800e0da <get_fileinfo+0x3a>
 800e0d8:	e015      	b.n	800e106 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	2b05      	cmp	r3, #5
 800e0de:	d101      	bne.n	800e0e4 <get_fileinfo+0x44>
 800e0e0:	23e5      	movs	r3, #229	; 0xe5
 800e0e2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	2b09      	cmp	r3, #9
 800e0e8:	d106      	bne.n	800e0f8 <get_fileinfo+0x58>
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	613a      	str	r2, [r7, #16]
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	222e      	movs	r2, #46	; 0x2e
 800e0f6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	613a      	str	r2, [r7, #16]
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	4413      	add	r3, r2
 800e102:	7bfa      	ldrb	r2, [r7, #15]
 800e104:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b0a      	cmp	r3, #10
 800e10a:	d9da      	bls.n	800e0c2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	4413      	add	r3, r2
 800e112:	3309      	adds	r3, #9
 800e114:	2200      	movs	r2, #0
 800e116:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	7ada      	ldrb	r2, [r3, #11]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	331c      	adds	r3, #28
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fed3 	bl	800ced4 <ld_dword>
 800e12e:	4602      	mov	r2, r0
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a1b      	ldr	r3, [r3, #32]
 800e138:	3316      	adds	r3, #22
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe feca 	bl	800ced4 <ld_dword>
 800e140:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	b29a      	uxth	r2, r3
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	80da      	strh	r2, [r3, #6]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	0c1b      	lsrs	r3, r3, #16
 800e14e:	b29a      	uxth	r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	809a      	strh	r2, [r3, #4]
 800e154:	e000      	b.n	800e158 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e156:	bf00      	nop
}
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3324      	adds	r3, #36	; 0x24
 800e174:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e176:	220b      	movs	r2, #11
 800e178:	2120      	movs	r1, #32
 800e17a:	68b8      	ldr	r0, [r7, #8]
 800e17c:	f7fe ff35 	bl	800cfea <mem_set>
	si = i = 0; ni = 8;
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	61fb      	str	r3, [r7, #28]
 800e188:	2308      	movs	r3, #8
 800e18a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	61fa      	str	r2, [r7, #28]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	4413      	add	r3, r2
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e19a:	7efb      	ldrb	r3, [r7, #27]
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	d94e      	bls.n	800e23e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e1a0:	7efb      	ldrb	r3, [r7, #27]
 800e1a2:	2b2f      	cmp	r3, #47	; 0x2f
 800e1a4:	d006      	beq.n	800e1b4 <create_name+0x54>
 800e1a6:	7efb      	ldrb	r3, [r7, #27]
 800e1a8:	2b5c      	cmp	r3, #92	; 0x5c
 800e1aa:	d110      	bne.n	800e1ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1ac:	e002      	b.n	800e1b4 <create_name+0x54>
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	61fb      	str	r3, [r7, #28]
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	2b2f      	cmp	r3, #47	; 0x2f
 800e1be:	d0f6      	beq.n	800e1ae <create_name+0x4e>
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ca:	d0f0      	beq.n	800e1ae <create_name+0x4e>
			break;
 800e1cc:	e038      	b.n	800e240 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e1ce:	7efb      	ldrb	r3, [r7, #27]
 800e1d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1d2:	d003      	beq.n	800e1dc <create_name+0x7c>
 800e1d4:	693a      	ldr	r2, [r7, #16]
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d30c      	bcc.n	800e1f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2b0b      	cmp	r3, #11
 800e1e0:	d002      	beq.n	800e1e8 <create_name+0x88>
 800e1e2:	7efb      	ldrb	r3, [r7, #27]
 800e1e4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1e6:	d001      	beq.n	800e1ec <create_name+0x8c>
 800e1e8:	2306      	movs	r3, #6
 800e1ea:	e044      	b.n	800e276 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e1ec:	2308      	movs	r3, #8
 800e1ee:	613b      	str	r3, [r7, #16]
 800e1f0:	230b      	movs	r3, #11
 800e1f2:	617b      	str	r3, [r7, #20]
			continue;
 800e1f4:	e022      	b.n	800e23c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e1f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da04      	bge.n	800e208 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e1fe:	7efb      	ldrb	r3, [r7, #27]
 800e200:	3b80      	subs	r3, #128	; 0x80
 800e202:	4a1f      	ldr	r2, [pc, #124]	; (800e280 <create_name+0x120>)
 800e204:	5cd3      	ldrb	r3, [r2, r3]
 800e206:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e208:	7efb      	ldrb	r3, [r7, #27]
 800e20a:	4619      	mov	r1, r3
 800e20c:	481d      	ldr	r0, [pc, #116]	; (800e284 <create_name+0x124>)
 800e20e:	f7fe ff2e 	bl	800d06e <chk_chr>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <create_name+0xbc>
 800e218:	2306      	movs	r3, #6
 800e21a:	e02c      	b.n	800e276 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e21c:	7efb      	ldrb	r3, [r7, #27]
 800e21e:	2b60      	cmp	r3, #96	; 0x60
 800e220:	d905      	bls.n	800e22e <create_name+0xce>
 800e222:	7efb      	ldrb	r3, [r7, #27]
 800e224:	2b7a      	cmp	r3, #122	; 0x7a
 800e226:	d802      	bhi.n	800e22e <create_name+0xce>
 800e228:	7efb      	ldrb	r3, [r7, #27]
 800e22a:	3b20      	subs	r3, #32
 800e22c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	613a      	str	r2, [r7, #16]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	4413      	add	r3, r2
 800e238:	7efa      	ldrb	r2, [r7, #27]
 800e23a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e23c:	e7a6      	b.n	800e18c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e23e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	441a      	add	r2, r3
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <create_name+0xf4>
 800e250:	2306      	movs	r3, #6
 800e252:	e010      	b.n	800e276 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2be5      	cmp	r3, #229	; 0xe5
 800e25a:	d102      	bne.n	800e262 <create_name+0x102>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2205      	movs	r2, #5
 800e260:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e262:	7efb      	ldrb	r3, [r7, #27]
 800e264:	2b20      	cmp	r3, #32
 800e266:	d801      	bhi.n	800e26c <create_name+0x10c>
 800e268:	2204      	movs	r2, #4
 800e26a:	e000      	b.n	800e26e <create_name+0x10e>
 800e26c:	2200      	movs	r2, #0
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	330b      	adds	r3, #11
 800e272:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e274:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e276:	4618      	mov	r0, r3
 800e278:	3720      	adds	r7, #32
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	0802e4a4 	.word	0x0802e4a4
 800e284:	08013e54 	.word	0x08013e54

0800e288 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e29c:	e002      	b.n	800e2a4 <follow_path+0x1c>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	603b      	str	r3, [r7, #0]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e2aa:	d0f8      	beq.n	800e29e <follow_path+0x16>
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b5c      	cmp	r3, #92	; 0x5c
 800e2b2:	d0f4      	beq.n	800e29e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b1f      	cmp	r3, #31
 800e2c0:	d80a      	bhi.n	800e2d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2280      	movs	r2, #128	; 0x80
 800e2c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff fc7b 	bl	800dbc8 <dir_sdi>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	75fb      	strb	r3, [r7, #23]
 800e2d6:	e048      	b.n	800e36a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2d8:	463b      	mov	r3, r7
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7ff ff3f 	bl	800e160 <create_name>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d139      	bne.n	800e360 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff fe50 	bl	800df92 <dir_find>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e2fe:	7dfb      	ldrb	r3, [r7, #23]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e304:	7dfb      	ldrb	r3, [r7, #23]
 800e306:	2b04      	cmp	r3, #4
 800e308:	d12c      	bne.n	800e364 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e30a:	7afb      	ldrb	r3, [r7, #11]
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	2b00      	cmp	r3, #0
 800e312:	d127      	bne.n	800e364 <follow_path+0xdc>
 800e314:	2305      	movs	r3, #5
 800e316:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e318:	e024      	b.n	800e364 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e31a:	7afb      	ldrb	r3, [r7, #11]
 800e31c:	f003 0304 	and.w	r3, r3, #4
 800e320:	2b00      	cmp	r3, #0
 800e322:	d121      	bne.n	800e368 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	799b      	ldrb	r3, [r3, #6]
 800e328:	f003 0310 	and.w	r3, r3, #16
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d102      	bne.n	800e336 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e330:	2305      	movs	r3, #5
 800e332:	75fb      	strb	r3, [r7, #23]
 800e334:	e019      	b.n	800e36a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	8992      	ldrh	r2, [r2, #12]
 800e344:	fbb3 f0f2 	udiv	r0, r3, r2
 800e348:	fb00 f202 	mul.w	r2, r0, r2
 800e34c:	1a9b      	subs	r3, r3, r2
 800e34e:	440b      	add	r3, r1
 800e350:	4619      	mov	r1, r3
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7ff fdde 	bl	800df14 <ld_clust>
 800e358:	4602      	mov	r2, r0
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e35e:	e7bb      	b.n	800e2d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e360:	bf00      	nop
 800e362:	e002      	b.n	800e36a <follow_path+0xe2>
				break;
 800e364:	bf00      	nop
 800e366:	e000      	b.n	800e36a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e368:	bf00      	nop
			}
		}
	}

	return res;
 800e36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e374:	b480      	push	{r7}
 800e376:	b087      	sub	sp, #28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e37c:	f04f 33ff 	mov.w	r3, #4294967295
 800e380:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d031      	beq.n	800e3ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	617b      	str	r3, [r7, #20]
 800e390:	e002      	b.n	800e398 <get_ldnumber+0x24>
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	3301      	adds	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b20      	cmp	r3, #32
 800e39e:	d903      	bls.n	800e3a8 <get_ldnumber+0x34>
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b3a      	cmp	r3, #58	; 0x3a
 800e3a6:	d1f4      	bne.n	800e392 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2b3a      	cmp	r3, #58	; 0x3a
 800e3ae:	d11c      	bne.n	800e3ea <get_ldnumber+0x76>
			tp = *path;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	60fa      	str	r2, [r7, #12]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	3b30      	subs	r3, #48	; 0x30
 800e3c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b09      	cmp	r3, #9
 800e3c6:	d80e      	bhi.n	800e3e6 <get_ldnumber+0x72>
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d10a      	bne.n	800e3e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d107      	bne.n	800e3e6 <get_ldnumber+0x72>
					vol = (int)i;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	617b      	str	r3, [r7, #20]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	e002      	b.n	800e3f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e3ee:	693b      	ldr	r3, [r7, #16]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	70da      	strb	r2, [r3, #3]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f04f 32ff 	mov.w	r2, #4294967295
 800e412:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7fe fff4 	bl	800d404 <move_window>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <check_fs+0x2a>
 800e422:	2304      	movs	r3, #4
 800e424:	e038      	b.n	800e498 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3334      	adds	r3, #52	; 0x34
 800e42a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fd38 	bl	800cea4 <ld_word>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d001      	beq.n	800e444 <check_fs+0x48>
 800e440:	2303      	movs	r3, #3
 800e442:	e029      	b.n	800e498 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e44a:	2be9      	cmp	r3, #233	; 0xe9
 800e44c:	d009      	beq.n	800e462 <check_fs+0x66>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e454:	2beb      	cmp	r3, #235	; 0xeb
 800e456:	d11e      	bne.n	800e496 <check_fs+0x9a>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e45e:	2b90      	cmp	r3, #144	; 0x90
 800e460:	d119      	bne.n	800e496 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3334      	adds	r3, #52	; 0x34
 800e466:	3336      	adds	r3, #54	; 0x36
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fd33 	bl	800ced4 <ld_dword>
 800e46e:	4603      	mov	r3, r0
 800e470:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e474:	4a0a      	ldr	r2, [pc, #40]	; (800e4a0 <check_fs+0xa4>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d101      	bne.n	800e47e <check_fs+0x82>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e00c      	b.n	800e498 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3334      	adds	r3, #52	; 0x34
 800e482:	3352      	adds	r3, #82	; 0x52
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fd25 	bl	800ced4 <ld_dword>
 800e48a:	4603      	mov	r3, r0
 800e48c:	4a05      	ldr	r2, [pc, #20]	; (800e4a4 <check_fs+0xa8>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d101      	bne.n	800e496 <check_fs+0x9a>
 800e492:	2300      	movs	r3, #0
 800e494:	e000      	b.n	800e498 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e496:	2302      	movs	r3, #2
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	00544146 	.word	0x00544146
 800e4a4:	33544146 	.word	0x33544146

0800e4a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b096      	sub	sp, #88	; 0x58
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff ff59 	bl	800e374 <get_ldnumber>
 800e4c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	da01      	bge.n	800e4ce <find_volume+0x26>
 800e4ca:	230b      	movs	r3, #11
 800e4cc:	e262      	b.n	800e994 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4ce:	4a9f      	ldr	r2, [pc, #636]	; (800e74c <find_volume+0x2a4>)
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <find_volume+0x3a>
 800e4de:	230c      	movs	r3, #12
 800e4e0:	e258      	b.n	800e994 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	f023 0301 	bic.w	r3, r3, #1
 800e4ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d01a      	beq.n	800e52e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fc33 	bl	800cd68 <disk_status>
 800e502:	4603      	mov	r3, r0
 800e504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10c      	bne.n	800e52e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <find_volume+0x82>
 800e51a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e51e:	f003 0304 	and.w	r3, r3, #4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e526:	230a      	movs	r3, #10
 800e528:	e234      	b.n	800e994 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800e52a:	2300      	movs	r3, #0
 800e52c:	e232      	b.n	800e994 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	2200      	movs	r2, #0
 800e532:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e536:	b2da      	uxtb	r2, r3
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fc2b 	bl	800cd9c <disk_initialize>
 800e546:	4603      	mov	r3, r0
 800e548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e54c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e558:	2303      	movs	r3, #3
 800e55a:	e21b      	b.n	800e994 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <find_volume+0xca>
 800e562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e566:	f003 0304 	and.w	r3, r3, #4
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e56e:	230a      	movs	r3, #10
 800e570:	e210      	b.n	800e994 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	7858      	ldrb	r0, [r3, #1]
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	330c      	adds	r3, #12
 800e57a:	461a      	mov	r2, r3
 800e57c:	2102      	movs	r1, #2
 800e57e:	f7fe fc73 	bl	800ce68 <disk_ioctl>
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <find_volume+0xe4>
 800e588:	2301      	movs	r3, #1
 800e58a:	e203      	b.n	800e994 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	899b      	ldrh	r3, [r3, #12]
 800e590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e594:	d80d      	bhi.n	800e5b2 <find_volume+0x10a>
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	899b      	ldrh	r3, [r3, #12]
 800e59a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e59e:	d308      	bcc.n	800e5b2 <find_volume+0x10a>
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	899b      	ldrh	r3, [r3, #12]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	899b      	ldrh	r3, [r3, #12]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <find_volume+0x10e>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e1ee      	b.n	800e994 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5be:	f7ff ff1d 	bl	800e3fc <check_fs>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d149      	bne.n	800e664 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5d4:	e01e      	b.n	800e614 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5de:	011b      	lsls	r3, r3, #4
 800e5e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5e4:	4413      	add	r3, r2
 800e5e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d006      	beq.n	800e600 <find_volume+0x158>
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe fc6c 	bl	800ced4 <ld_dword>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	e000      	b.n	800e602 <find_volume+0x15a>
 800e600:	2200      	movs	r2, #0
 800e602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	3358      	adds	r3, #88	; 0x58
 800e608:	443b      	add	r3, r7
 800e60a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e610:	3301      	adds	r3, #1
 800e612:	643b      	str	r3, [r7, #64]	; 0x40
 800e614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e616:	2b03      	cmp	r3, #3
 800e618:	d9dd      	bls.n	800e5d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e61a:	2300      	movs	r3, #0
 800e61c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <find_volume+0x182>
 800e624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e626:	3b01      	subs	r3, #1
 800e628:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	3358      	adds	r3, #88	; 0x58
 800e630:	443b      	add	r3, r7
 800e632:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e636:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d005      	beq.n	800e64a <find_volume+0x1a2>
 800e63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e642:	f7ff fedb 	bl	800e3fc <check_fs>
 800e646:	4603      	mov	r3, r0
 800e648:	e000      	b.n	800e64c <find_volume+0x1a4>
 800e64a:	2303      	movs	r3, #3
 800e64c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e654:	2b01      	cmp	r3, #1
 800e656:	d905      	bls.n	800e664 <find_volume+0x1bc>
 800e658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e65a:	3301      	adds	r3, #1
 800e65c:	643b      	str	r3, [r7, #64]	; 0x40
 800e65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e660:	2b03      	cmp	r3, #3
 800e662:	d9e2      	bls.n	800e62a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d101      	bne.n	800e670 <find_volume+0x1c8>
 800e66c:	2301      	movs	r3, #1
 800e66e:	e191      	b.n	800e994 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e674:	2b01      	cmp	r3, #1
 800e676:	d901      	bls.n	800e67c <find_volume+0x1d4>
 800e678:	230d      	movs	r3, #13
 800e67a:	e18b      	b.n	800e994 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67e:	3334      	adds	r3, #52	; 0x34
 800e680:	330b      	adds	r3, #11
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe fc0e 	bl	800cea4 <ld_word>
 800e688:	4603      	mov	r3, r0
 800e68a:	461a      	mov	r2, r3
 800e68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68e:	899b      	ldrh	r3, [r3, #12]
 800e690:	429a      	cmp	r2, r3
 800e692:	d001      	beq.n	800e698 <find_volume+0x1f0>
 800e694:	230d      	movs	r3, #13
 800e696:	e17d      	b.n	800e994 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	3334      	adds	r3, #52	; 0x34
 800e69c:	3316      	adds	r3, #22
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fc00 	bl	800cea4 <ld_word>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d106      	bne.n	800e6bc <find_volume+0x214>
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b0:	3334      	adds	r3, #52	; 0x34
 800e6b2:	3324      	adds	r3, #36	; 0x24
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fe fc0d 	bl	800ced4 <ld_dword>
 800e6ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	789b      	ldrb	r3, [r3, #2]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d005      	beq.n	800e6e0 <find_volume+0x238>
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	789b      	ldrb	r3, [r3, #2]
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d001      	beq.n	800e6e0 <find_volume+0x238>
 800e6dc:	230d      	movs	r3, #13
 800e6de:	e159      	b.n	800e994 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	789b      	ldrb	r3, [r3, #2]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6e8:	fb02 f303 	mul.w	r3, r2, r3
 800e6ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d008      	beq.n	800e714 <find_volume+0x26c>
 800e702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e704:	895b      	ldrh	r3, [r3, #10]
 800e706:	461a      	mov	r2, r3
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	895b      	ldrh	r3, [r3, #10]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	4013      	ands	r3, r2
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <find_volume+0x270>
 800e714:	230d      	movs	r3, #13
 800e716:	e13d      	b.n	800e994 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	3334      	adds	r3, #52	; 0x34
 800e71c:	3311      	adds	r3, #17
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fe fbc0 	bl	800cea4 <ld_word>
 800e724:	4603      	mov	r3, r0
 800e726:	461a      	mov	r2, r3
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	891b      	ldrh	r3, [r3, #8]
 800e730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e732:	8992      	ldrh	r2, [r2, #12]
 800e734:	0952      	lsrs	r2, r2, #5
 800e736:	b292      	uxth	r2, r2
 800e738:	fbb3 f1f2 	udiv	r1, r3, r2
 800e73c:	fb01 f202 	mul.w	r2, r1, r2
 800e740:	1a9b      	subs	r3, r3, r2
 800e742:	b29b      	uxth	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <find_volume+0x2a8>
 800e748:	230d      	movs	r3, #13
 800e74a:	e123      	b.n	800e994 <find_volume+0x4ec>
 800e74c:	20005c18 	.word	0x20005c18

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	3334      	adds	r3, #52	; 0x34
 800e754:	3313      	adds	r3, #19
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe fba4 	bl	800cea4 <ld_word>
 800e75c:	4603      	mov	r3, r0
 800e75e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <find_volume+0x2cc>
 800e766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e768:	3334      	adds	r3, #52	; 0x34
 800e76a:	3320      	adds	r3, #32
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fe fbb1 	bl	800ced4 <ld_dword>
 800e772:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e776:	3334      	adds	r3, #52	; 0x34
 800e778:	330e      	adds	r3, #14
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe fb92 	bl	800cea4 <ld_word>
 800e780:	4603      	mov	r3, r0
 800e782:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e784:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <find_volume+0x2e6>
 800e78a:	230d      	movs	r3, #13
 800e78c:	e102      	b.n	800e994 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e78e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e792:	4413      	add	r3, r2
 800e794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e796:	8911      	ldrh	r1, [r2, #8]
 800e798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79a:	8992      	ldrh	r2, [r2, #12]
 800e79c:	0952      	lsrs	r2, r2, #5
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	fbb1 f2f2 	udiv	r2, r1, r2
 800e7a4:	b292      	uxth	r2, r2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e7aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d201      	bcs.n	800e7b6 <find_volume+0x30e>
 800e7b2:	230d      	movs	r3, #13
 800e7b4:	e0ee      	b.n	800e994 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7be:	8952      	ldrh	r2, [r2, #10]
 800e7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <find_volume+0x328>
 800e7cc:	230d      	movs	r3, #13
 800e7ce:	e0e1      	b.n	800e994 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d802      	bhi.n	800e7e6 <find_volume+0x33e>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d802      	bhi.n	800e7f6 <find_volume+0x34e>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	1c9a      	adds	r2, r3, #2
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e802:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e804:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e808:	441a      	add	r2, r3
 800e80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	441a      	add	r2, r3
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d11e      	bne.n	800e85e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	3334      	adds	r3, #52	; 0x34
 800e824:	332a      	adds	r3, #42	; 0x2a
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fb3c 	bl	800cea4 <ld_word>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <find_volume+0x38e>
 800e832:	230d      	movs	r3, #13
 800e834:	e0ae      	b.n	800e994 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	891b      	ldrh	r3, [r3, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <find_volume+0x39a>
 800e83e:	230d      	movs	r3, #13
 800e840:	e0a8      	b.n	800e994 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	3334      	adds	r3, #52	; 0x34
 800e846:	332c      	adds	r3, #44	; 0x2c
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fe fb43 	bl	800ced4 <ld_dword>
 800e84e:	4602      	mov	r2, r0
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e856:	699b      	ldr	r3, [r3, #24]
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	647b      	str	r3, [r7, #68]	; 0x44
 800e85c:	e01f      	b.n	800e89e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	891b      	ldrh	r3, [r3, #8]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <find_volume+0x3c2>
 800e866:	230d      	movs	r3, #13
 800e868:	e094      	b.n	800e994 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e870:	441a      	add	r2, r3
 800e872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e874:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	d103      	bne.n	800e886 <find_volume+0x3de>
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	e00a      	b.n	800e89c <find_volume+0x3f4>
 800e886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e888:	699a      	ldr	r2, [r3, #24]
 800e88a:	4613      	mov	r3, r2
 800e88c:	005b      	lsls	r3, r3, #1
 800e88e:	4413      	add	r3, r2
 800e890:	085a      	lsrs	r2, r3, #1
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	f003 0301 	and.w	r3, r3, #1
 800e89a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e89c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a0:	69da      	ldr	r2, [r3, #28]
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	899b      	ldrh	r3, [r3, #12]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8b0:	8989      	ldrh	r1, [r1, #12]
 800e8b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d201      	bcs.n	800e8be <find_volume+0x416>
 800e8ba:	230d      	movs	r3, #13
 800e8bc:	e06a      	b.n	800e994 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c4:	615a      	str	r2, [r3, #20]
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	695a      	ldr	r2, [r3, #20]
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	2280      	movs	r2, #128	; 0x80
 800e8d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d149      	bne.n	800e970 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	3334      	adds	r3, #52	; 0x34
 800e8e0:	3330      	adds	r3, #48	; 0x30
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fe fade 	bl	800cea4 <ld_word>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d140      	bne.n	800e970 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8f6:	f7fe fd85 	bl	800d404 <move_window>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d137      	bne.n	800e970 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	2200      	movs	r2, #0
 800e904:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	3334      	adds	r3, #52	; 0x34
 800e90a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fe fac8 	bl	800cea4 <ld_word>
 800e914:	4603      	mov	r3, r0
 800e916:	461a      	mov	r2, r3
 800e918:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d127      	bne.n	800e970 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	3334      	adds	r3, #52	; 0x34
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe fad5 	bl	800ced4 <ld_dword>
 800e92a:	4603      	mov	r3, r0
 800e92c:	4a1b      	ldr	r2, [pc, #108]	; (800e99c <find_volume+0x4f4>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d11e      	bne.n	800e970 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	3334      	adds	r3, #52	; 0x34
 800e936:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe faca 	bl	800ced4 <ld_dword>
 800e940:	4603      	mov	r3, r0
 800e942:	4a17      	ldr	r2, [pc, #92]	; (800e9a0 <find_volume+0x4f8>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d113      	bne.n	800e970 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94a:	3334      	adds	r3, #52	; 0x34
 800e94c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e950:	4618      	mov	r0, r3
 800e952:	f7fe fabf 	bl	800ced4 <ld_dword>
 800e956:	4602      	mov	r2, r0
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	3334      	adds	r3, #52	; 0x34
 800e960:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe fab5 	bl	800ced4 <ld_dword>
 800e96a:	4602      	mov	r2, r0
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e976:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <find_volume+0x4fc>)
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	3301      	adds	r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <find_volume+0x4fc>)
 800e982:	801a      	strh	r2, [r3, #0]
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <find_volume+0x4fc>)
 800e986:	881a      	ldrh	r2, [r3, #0]
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e98e:	f7fe fcd1 	bl	800d334 <clear_lock>
#endif
	return FR_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3758      	adds	r7, #88	; 0x58
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	41615252 	.word	0x41615252
 800e9a0:	61417272 	.word	0x61417272
 800e9a4:	20005c1c 	.word	0x20005c1c

0800e9a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e9b2:	2309      	movs	r3, #9
 800e9b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01c      	beq.n	800e9f6 <validate+0x4e>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d018      	beq.n	800e9f6 <validate+0x4e>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d013      	beq.n	800e9f6 <validate+0x4e>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	889a      	ldrh	r2, [r3, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	88db      	ldrh	r3, [r3, #6]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d10c      	bne.n	800e9f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	785b      	ldrb	r3, [r3, #1]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fe f9c0 	bl	800cd68 <disk_status>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d101      	bne.n	800e9f6 <validate+0x4e>
			res = FR_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d102      	bne.n	800ea02 <validate+0x5a>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	e000      	b.n	800ea04 <validate+0x5c>
 800ea02:	2300      	movs	r3, #0
 800ea04:	683a      	ldr	r2, [r7, #0]
 800ea06:	6013      	str	r3, [r2, #0]
	return res;
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
	...

0800ea14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea26:	f107 0310 	add.w	r3, r7, #16
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff fca2 	bl	800e374 <get_ldnumber>
 800ea30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	da01      	bge.n	800ea3c <f_mount+0x28>
 800ea38:	230b      	movs	r3, #11
 800ea3a:	e02b      	b.n	800ea94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea3c:	4a17      	ldr	r2, [pc, #92]	; (800ea9c <f_mount+0x88>)
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea4c:	69b8      	ldr	r0, [r7, #24]
 800ea4e:	f7fe fc71 	bl	800d334 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	490d      	ldr	r1, [pc, #52]	; (800ea9c <f_mount+0x88>)
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <f_mount+0x66>
 800ea74:	79fb      	ldrb	r3, [r7, #7]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d001      	beq.n	800ea7e <f_mount+0x6a>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e00a      	b.n	800ea94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea7e:	f107 010c 	add.w	r1, r7, #12
 800ea82:	f107 0308 	add.w	r3, r7, #8
 800ea86:	2200      	movs	r2, #0
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fd0d 	bl	800e4a8 <find_volume>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3720      	adds	r7, #32
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	20005c18 	.word	0x20005c18

0800eaa0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b098      	sub	sp, #96	; 0x60
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <f_open+0x18>
 800eab4:	2309      	movs	r3, #9
 800eab6:	e1bb      	b.n	800ee30 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eab8:	79fb      	ldrb	r3, [r7, #7]
 800eaba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eabe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eac0:	79fa      	ldrb	r2, [r7, #7]
 800eac2:	f107 0110 	add.w	r1, r7, #16
 800eac6:	f107 0308 	add.w	r3, r7, #8
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7ff fcec 	bl	800e4a8 <find_volume>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ead6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f040 819f 	bne.w	800ee1e <f_open+0x37e>
		dj.obj.fs = fs;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eae4:	68ba      	ldr	r2, [r7, #8]
 800eae6:	f107 0314 	add.w	r3, r7, #20
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fbcb 	bl	800e288 <follow_path>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eaf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d11a      	bne.n	800eb36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eb00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb04:	b25b      	sxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	da03      	bge.n	800eb12 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eb0a:	2306      	movs	r3, #6
 800eb0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb10:	e011      	b.n	800eb36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	f023 0301 	bic.w	r3, r3, #1
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	bf14      	ite	ne
 800eb1c:	2301      	movne	r3, #1
 800eb1e:	2300      	moveq	r3, #0
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	461a      	mov	r2, r3
 800eb24:	f107 0314 	add.w	r3, r7, #20
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fe faba 	bl	800d0a4 <chk_lock>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	f003 031c 	and.w	r3, r3, #28
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d07f      	beq.n	800ec40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d017      	beq.n	800eb78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb4c:	2b04      	cmp	r3, #4
 800eb4e:	d10e      	bne.n	800eb6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb50:	f7fe fb04 	bl	800d15c <enq_lock>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <f_open+0xc8>
 800eb5a:	f107 0314 	add.w	r3, r7, #20
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7ff fa6c 	bl	800e03c <dir_register>
 800eb64:	4603      	mov	r3, r0
 800eb66:	e000      	b.n	800eb6a <f_open+0xca>
 800eb68:	2312      	movs	r3, #18
 800eb6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb6e:	79fb      	ldrb	r3, [r7, #7]
 800eb70:	f043 0308 	orr.w	r3, r3, #8
 800eb74:	71fb      	strb	r3, [r7, #7]
 800eb76:	e010      	b.n	800eb9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb78:	7ebb      	ldrb	r3, [r7, #26]
 800eb7a:	f003 0311 	and.w	r3, r3, #17
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d003      	beq.n	800eb8a <f_open+0xea>
					res = FR_DENIED;
 800eb82:	2307      	movs	r3, #7
 800eb84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb88:	e007      	b.n	800eb9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	f003 0304 	and.w	r3, r3, #4
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <f_open+0xfa>
 800eb94:	2308      	movs	r3, #8
 800eb96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d168      	bne.n	800ec74 <f_open+0x1d4>
 800eba2:	79fb      	ldrb	r3, [r7, #7]
 800eba4:	f003 0308 	and.w	r3, r3, #8
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d063      	beq.n	800ec74 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ebac:	f7fd ff70 	bl	800ca90 <get_fattime>
 800ebb0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	330e      	adds	r3, #14
 800ebb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe f9c9 	bl	800cf50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc0:	3316      	adds	r3, #22
 800ebc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe f9c3 	bl	800cf50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ebca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebcc:	330b      	adds	r3, #11
 800ebce:	2220      	movs	r2, #32
 800ebd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff f99b 	bl	800df14 <ld_clust>
 800ebde:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff f9b3 	bl	800df52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebee:	331c      	adds	r3, #28
 800ebf0:	2100      	movs	r1, #0
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fe f9ac 	bl	800cf50 <st_dword>
					fs->wflag = 1;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d037      	beq.n	800ec74 <f_open+0x1d4>
						dw = fs->winsect;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec08:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ec0a:	f107 0314 	add.w	r3, r7, #20
 800ec0e:	2200      	movs	r2, #0
 800ec10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe fea3 	bl	800d95e <remove_chain>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ec1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d126      	bne.n	800ec74 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fbea 	bl	800d404 <move_window>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec3a:	3a01      	subs	r2, #1
 800ec3c:	611a      	str	r2, [r3, #16]
 800ec3e:	e019      	b.n	800ec74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d115      	bne.n	800ec74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec48:	7ebb      	ldrb	r3, [r7, #26]
 800ec4a:	f003 0310 	and.w	r3, r3, #16
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec52:	2304      	movs	r3, #4
 800ec54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec58:	e00c      	b.n	800ec74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d007      	beq.n	800ec74 <f_open+0x1d4>
 800ec64:	7ebb      	ldrb	r3, [r7, #26]
 800ec66:	f003 0301 	and.w	r3, r3, #1
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <f_open+0x1d4>
						res = FR_DENIED;
 800ec6e:	2307      	movs	r3, #7
 800ec70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d128      	bne.n	800ecce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	f003 0308 	and.w	r3, r3, #8
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d003      	beq.n	800ec8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec86:	79fb      	ldrb	r3, [r7, #7]
 800ec88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec9c:	79fb      	ldrb	r3, [r7, #7]
 800ec9e:	f023 0301 	bic.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bf14      	ite	ne
 800eca6:	2301      	movne	r3, #1
 800eca8:	2300      	moveq	r3, #0
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	461a      	mov	r2, r3
 800ecae:	f107 0314 	add.w	r3, r7, #20
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fa73 	bl	800d1a0 <inc_lock>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d102      	bne.n	800ecce <f_open+0x22e>
 800ecc8:	2302      	movs	r3, #2
 800ecca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f040 80a3 	bne.w	800ee1e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff f918 	bl	800df14 <ld_clust>
 800ece4:	4602      	mov	r2, r0
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ecea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecec:	331c      	adds	r3, #28
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fe f8f0 	bl	800ced4 <ld_dword>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	88da      	ldrh	r2, [r3, #6]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	79fa      	ldrb	r2, [r7, #7]
 800ed12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	3330      	adds	r3, #48	; 0x30
 800ed2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed2e:	2100      	movs	r1, #0
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe f95a 	bl	800cfea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	f003 0320 	and.w	r3, r3, #32
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d06e      	beq.n	800ee1e <f_open+0x37e>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d06a      	beq.n	800ee1e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68da      	ldr	r2, [r3, #12]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	895b      	ldrh	r3, [r3, #10]
 800ed54:	461a      	mov	r2, r3
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	899b      	ldrh	r3, [r3, #12]
 800ed5a:	fb02 f303 	mul.w	r3, r2, r3
 800ed5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ed6c:	e016      	b.n	800ed9c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe fc03 	bl	800d57e <get_fat>
 800ed78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ed7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d802      	bhi.n	800ed86 <f_open+0x2e6>
 800ed80:	2302      	movs	r3, #2
 800ed82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8c:	d102      	bne.n	800ed94 <f_open+0x2f4>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	657b      	str	r3, [r7, #84]	; 0x54
 800ed9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <f_open+0x30c>
 800eda4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d8e0      	bhi.n	800ed6e <f_open+0x2ce>
				}
				fp->clust = clst;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800edb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800edb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d131      	bne.n	800ee1e <f_open+0x37e>
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	899b      	ldrh	r3, [r3, #12]
 800edbe:	461a      	mov	r2, r3
 800edc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800edc6:	fb01 f202 	mul.w	r2, r1, r2
 800edca:	1a9b      	subs	r3, r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d026      	beq.n	800ee1e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fe fbb3 	bl	800d540 <clust2sect>
 800edda:	6478      	str	r0, [r7, #68]	; 0x44
 800eddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <f_open+0x34a>
						res = FR_INT_ERR;
 800ede2:	2302      	movs	r3, #2
 800ede4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ede8:	e019      	b.n	800ee1e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	899b      	ldrh	r3, [r3, #12]
 800edee:	461a      	mov	r2, r3
 800edf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800edf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf8:	441a      	add	r2, r3
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	7858      	ldrb	r0, [r3, #1]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6a1a      	ldr	r2, [r3, #32]
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	f7fd ffeb 	bl	800cde8 <disk_read>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d002      	beq.n	800ee1e <f_open+0x37e>
 800ee18:	2301      	movs	r3, #1
 800ee1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ee1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <f_open+0x38c>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3760      	adds	r7, #96	; 0x60
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08e      	sub	sp, #56	; 0x38
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f107 0214 	add.w	r2, r7, #20
 800ee56:	4611      	mov	r1, r2
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7ff fda5 	bl	800e9a8 <validate>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d107      	bne.n	800ee7c <f_read+0x44>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	7d5b      	ldrb	r3, [r3, #21]
 800ee70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <f_read+0x4a>
 800ee7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee80:	e135      	b.n	800f0ee <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	7d1b      	ldrb	r3, [r3, #20]
 800ee86:	f003 0301 	and.w	r3, r3, #1
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <f_read+0x5a>
 800ee8e:	2307      	movs	r3, #7
 800ee90:	e12d      	b.n	800f0ee <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	68da      	ldr	r2, [r3, #12]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	f240 811e 	bls.w	800f0e4 <f_read+0x2ac>
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eeac:	e11a      	b.n	800f0e4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	697a      	ldr	r2, [r7, #20]
 800eeb4:	8992      	ldrh	r2, [r2, #12]
 800eeb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eeba:	fb01 f202 	mul.w	r2, r1, r2
 800eebe:	1a9b      	subs	r3, r3, r2
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f040 80d5 	bne.w	800f070 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	8992      	ldrh	r2, [r2, #12]
 800eece:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	8952      	ldrh	r2, [r2, #10]
 800eed6:	3a01      	subs	r2, #1
 800eed8:	4013      	ands	r3, r2
 800eeda:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d12f      	bne.n	800ef42 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	699b      	ldr	r3, [r3, #24]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d103      	bne.n	800eef2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	633b      	str	r3, [r7, #48]	; 0x30
 800eef0:	e013      	b.n	800ef1a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d007      	beq.n	800ef0a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	699b      	ldr	r3, [r3, #24]
 800eefe:	4619      	mov	r1, r3
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7fe fe29 	bl	800db58 <clmt_clust>
 800ef06:	6338      	str	r0, [r7, #48]	; 0x30
 800ef08:	e007      	b.n	800ef1a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe fb33 	bl	800d57e <get_fat>
 800ef18:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d804      	bhi.n	800ef2a <f_read+0xf2>
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2202      	movs	r2, #2
 800ef24:	755a      	strb	r2, [r3, #21]
 800ef26:	2302      	movs	r3, #2
 800ef28:	e0e1      	b.n	800f0ee <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef30:	d104      	bne.n	800ef3c <f_read+0x104>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	755a      	strb	r2, [r3, #21]
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e0d8      	b.n	800f0ee <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef42:	697a      	ldr	r2, [r7, #20]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	69db      	ldr	r3, [r3, #28]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f7fe faf8 	bl	800d540 <clust2sect>
 800ef50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d104      	bne.n	800ef62 <f_read+0x12a>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	755a      	strb	r2, [r3, #21]
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e0c5      	b.n	800f0ee <f_read+0x2b6>
			sect += csect;
 800ef62:	69ba      	ldr	r2, [r7, #24]
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	4413      	add	r3, r2
 800ef68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	899b      	ldrh	r3, [r3, #12]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef76:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d041      	beq.n	800f002 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef7e:	69fa      	ldr	r2, [r7, #28]
 800ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef82:	4413      	add	r3, r2
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	8952      	ldrh	r2, [r2, #10]
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d905      	bls.n	800ef98 <f_read+0x160>
					cc = fs->csize - csect;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	895b      	ldrh	r3, [r3, #10]
 800ef90:	461a      	mov	r2, r3
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	7858      	ldrb	r0, [r3, #1]
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	69ba      	ldr	r2, [r7, #24]
 800efa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa2:	f7fd ff21 	bl	800cde8 <disk_read>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d004      	beq.n	800efb6 <f_read+0x17e>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2201      	movs	r2, #1
 800efb0:	755a      	strb	r2, [r3, #21]
 800efb2:	2301      	movs	r3, #1
 800efb4:	e09b      	b.n	800f0ee <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7d1b      	ldrb	r3, [r3, #20]
 800efba:	b25b      	sxtb	r3, r3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	da18      	bge.n	800eff2 <f_read+0x1ba>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6a1a      	ldr	r2, [r3, #32]
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efca:	429a      	cmp	r2, r3
 800efcc:	d911      	bls.n	800eff2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1a      	ldr	r2, [r3, #32]
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	697a      	ldr	r2, [r7, #20]
 800efd8:	8992      	ldrh	r2, [r2, #12]
 800efda:	fb02 f303 	mul.w	r3, r2, r3
 800efde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe0:	18d0      	adds	r0, r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	899b      	ldrh	r3, [r3, #12]
 800efec:	461a      	mov	r2, r3
 800efee:	f7fd ffdb 	bl	800cfa8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	899b      	ldrh	r3, [r3, #12]
 800eff6:	461a      	mov	r2, r3
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	fb02 f303 	mul.w	r3, r2, r3
 800effe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f000:	e05c      	b.n	800f0bc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6a1b      	ldr	r3, [r3, #32]
 800f006:	69ba      	ldr	r2, [r7, #24]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d02e      	beq.n	800f06a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	7d1b      	ldrb	r3, [r3, #20]
 800f010:	b25b      	sxtb	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	da18      	bge.n	800f048 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	7858      	ldrb	r0, [r3, #1]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6a1a      	ldr	r2, [r3, #32]
 800f024:	2301      	movs	r3, #1
 800f026:	f7fd feff 	bl	800ce28 <disk_write>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d004      	beq.n	800f03a <f_read+0x202>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2201      	movs	r2, #1
 800f034:	755a      	strb	r2, [r3, #21]
 800f036:	2301      	movs	r3, #1
 800f038:	e059      	b.n	800f0ee <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	7d1b      	ldrb	r3, [r3, #20]
 800f03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f042:	b2da      	uxtb	r2, r3
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	7858      	ldrb	r0, [r3, #1]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f052:	2301      	movs	r3, #1
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	f7fd fec7 	bl	800cde8 <disk_read>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d004      	beq.n	800f06a <f_read+0x232>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2201      	movs	r2, #1
 800f064:	755a      	strb	r2, [r3, #21]
 800f066:	2301      	movs	r3, #1
 800f068:	e041      	b.n	800f0ee <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	69ba      	ldr	r2, [r7, #24]
 800f06e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	899b      	ldrh	r3, [r3, #12]
 800f074:	4618      	mov	r0, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	699b      	ldr	r3, [r3, #24]
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	8992      	ldrh	r2, [r2, #12]
 800f07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f082:	fb01 f202 	mul.w	r2, r1, r2
 800f086:	1a9b      	subs	r3, r3, r2
 800f088:	1ac3      	subs	r3, r0, r3
 800f08a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	429a      	cmp	r2, r3
 800f092:	d901      	bls.n	800f098 <f_read+0x260>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	699b      	ldr	r3, [r3, #24]
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	8992      	ldrh	r2, [r2, #12]
 800f0a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0aa:	fb00 f202 	mul.w	r2, r0, r2
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	440b      	add	r3, r1
 800f0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b8:	f7fd ff76 	bl	800cfa8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	4413      	add	r3, r2
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	699a      	ldr	r2, [r3, #24]
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	441a      	add	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	619a      	str	r2, [r3, #24]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	441a      	add	r2, r3
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	601a      	str	r2, [r3, #0]
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f47f aee1 	bne.w	800eeae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f0ec:	2300      	movs	r3, #0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3738      	adds	r7, #56	; 0x38
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b08c      	sub	sp, #48	; 0x30
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	60f8      	str	r0, [r7, #12]
 800f0fe:	60b9      	str	r1, [r7, #8]
 800f100:	607a      	str	r2, [r7, #4]
 800f102:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2200      	movs	r2, #0
 800f10c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f107 0210 	add.w	r2, r7, #16
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fc46 	bl	800e9a8 <validate>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f126:	2b00      	cmp	r3, #0
 800f128:	d107      	bne.n	800f13a <f_write+0x44>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7d5b      	ldrb	r3, [r3, #21]
 800f12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <f_write+0x4a>
 800f13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f13e:	e16a      	b.n	800f416 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	7d1b      	ldrb	r3, [r3, #20]
 800f144:	f003 0302 	and.w	r3, r3, #2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <f_write+0x5a>
 800f14c:	2307      	movs	r3, #7
 800f14e:	e162      	b.n	800f416 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	699a      	ldr	r2, [r3, #24]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	441a      	add	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	f080 814c 	bcs.w	800f3fa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	699b      	ldr	r3, [r3, #24]
 800f166:	43db      	mvns	r3, r3
 800f168:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f16a:	e146      	b.n	800f3fa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	8992      	ldrh	r2, [r2, #12]
 800f174:	fbb3 f1f2 	udiv	r1, r3, r2
 800f178:	fb01 f202 	mul.w	r2, r1, r2
 800f17c:	1a9b      	subs	r3, r3, r2
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f040 80f1 	bne.w	800f366 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	693a      	ldr	r2, [r7, #16]
 800f18a:	8992      	ldrh	r2, [r2, #12]
 800f18c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f190:	693a      	ldr	r2, [r7, #16]
 800f192:	8952      	ldrh	r2, [r2, #10]
 800f194:	3a01      	subs	r2, #1
 800f196:	4013      	ands	r3, r2
 800f198:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d143      	bne.n	800f228 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	699b      	ldr	r3, [r3, #24]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10c      	bne.n	800f1c2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d11a      	bne.n	800f1ea <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fe fc35 	bl	800da28 <create_chain>
 800f1be:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1c0:	e013      	b.n	800f1ea <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d007      	beq.n	800f1da <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	699b      	ldr	r3, [r3, #24]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f7fe fcc1 	bl	800db58 <clmt_clust>
 800f1d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1d8:	e007      	b.n	800f1ea <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	f7fe fc20 	bl	800da28 <create_chain>
 800f1e8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f000 8109 	beq.w	800f404 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d104      	bne.n	800f202 <f_write+0x10c>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	755a      	strb	r2, [r3, #21]
 800f1fe:	2302      	movs	r3, #2
 800f200:	e109      	b.n	800f416 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f208:	d104      	bne.n	800f214 <f_write+0x11e>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2201      	movs	r2, #1
 800f20e:	755a      	strb	r2, [r3, #21]
 800f210:	2301      	movs	r3, #1
 800f212:	e100      	b.n	800f416 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f218:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d102      	bne.n	800f228 <f_write+0x132>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f226:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	7d1b      	ldrb	r3, [r3, #20]
 800f22c:	b25b      	sxtb	r3, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	da18      	bge.n	800f264 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	7858      	ldrb	r0, [r3, #1]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6a1a      	ldr	r2, [r3, #32]
 800f240:	2301      	movs	r3, #1
 800f242:	f7fd fdf1 	bl	800ce28 <disk_write>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <f_write+0x160>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2201      	movs	r2, #1
 800f250:	755a      	strb	r2, [r3, #21]
 800f252:	2301      	movs	r3, #1
 800f254:	e0df      	b.n	800f416 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	7d1b      	ldrb	r3, [r3, #20]
 800f25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	69db      	ldr	r3, [r3, #28]
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f7fe f967 	bl	800d540 <clust2sect>
 800f272:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d104      	bne.n	800f284 <f_write+0x18e>
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2202      	movs	r2, #2
 800f27e:	755a      	strb	r2, [r3, #21]
 800f280:	2302      	movs	r3, #2
 800f282:	e0c8      	b.n	800f416 <f_write+0x320>
			sect += csect;
 800f284:	697a      	ldr	r2, [r7, #20]
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	4413      	add	r3, r2
 800f28a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	899b      	ldrh	r3, [r3, #12]
 800f290:	461a      	mov	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	fbb3 f3f2 	udiv	r3, r3, r2
 800f298:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f29a:	6a3b      	ldr	r3, [r7, #32]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d043      	beq.n	800f328 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	8952      	ldrh	r2, [r2, #10]
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d905      	bls.n	800f2ba <f_write+0x1c4>
					cc = fs->csize - csect;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	895b      	ldrh	r3, [r3, #10]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	7858      	ldrb	r0, [r3, #1]
 800f2be:	6a3b      	ldr	r3, [r7, #32]
 800f2c0:	697a      	ldr	r2, [r7, #20]
 800f2c2:	69f9      	ldr	r1, [r7, #28]
 800f2c4:	f7fd fdb0 	bl	800ce28 <disk_write>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d004      	beq.n	800f2d8 <f_write+0x1e2>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	755a      	strb	r2, [r3, #21]
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e09e      	b.n	800f416 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6a1a      	ldr	r2, [r3, #32]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	6a3a      	ldr	r2, [r7, #32]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d918      	bls.n	800f318 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6a1a      	ldr	r2, [r3, #32]
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	1ad3      	subs	r3, r2, r3
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	8992      	ldrh	r2, [r2, #12]
 800f2f8:	fb02 f303 	mul.w	r3, r2, r3
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	18d1      	adds	r1, r2, r3
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	899b      	ldrh	r3, [r3, #12]
 800f304:	461a      	mov	r2, r3
 800f306:	f7fd fe4f 	bl	800cfa8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	7d1b      	ldrb	r3, [r3, #20]
 800f30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f312:	b2da      	uxtb	r2, r3
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	899b      	ldrh	r3, [r3, #12]
 800f31c:	461a      	mov	r2, r3
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	fb02 f303 	mul.w	r3, r2, r3
 800f324:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f326:	e04b      	b.n	800f3c0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6a1b      	ldr	r3, [r3, #32]
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d016      	beq.n	800f360 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	699a      	ldr	r2, [r3, #24]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d210      	bcs.n	800f360 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	7858      	ldrb	r0, [r3, #1]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f348:	2301      	movs	r3, #1
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	f7fd fd4c 	bl	800cde8 <disk_read>
 800f350:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2201      	movs	r2, #1
 800f35a:	755a      	strb	r2, [r3, #21]
 800f35c:	2301      	movs	r3, #1
 800f35e:	e05a      	b.n	800f416 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	697a      	ldr	r2, [r7, #20]
 800f364:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	899b      	ldrh	r3, [r3, #12]
 800f36a:	4618      	mov	r0, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	699b      	ldr	r3, [r3, #24]
 800f370:	693a      	ldr	r2, [r7, #16]
 800f372:	8992      	ldrh	r2, [r2, #12]
 800f374:	fbb3 f1f2 	udiv	r1, r3, r2
 800f378:	fb01 f202 	mul.w	r2, r1, r2
 800f37c:	1a9b      	subs	r3, r3, r2
 800f37e:	1ac3      	subs	r3, r0, r3
 800f380:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	429a      	cmp	r2, r3
 800f388:	d901      	bls.n	800f38e <f_write+0x298>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	8992      	ldrh	r2, [r2, #12]
 800f39c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3a0:	fb00 f202 	mul.w	r2, r0, r2
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3aa:	69f9      	ldr	r1, [r7, #28]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fd fdfb 	bl	800cfa8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	7d1b      	ldrb	r3, [r3, #20]
 800f3b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f3c0:	69fa      	ldr	r2, [r7, #28]
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	4413      	add	r3, r2
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	699a      	ldr	r2, [r3, #24]
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	441a      	add	r2, r3
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	619a      	str	r2, [r3, #24]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	68da      	ldr	r2, [r3, #12]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	699b      	ldr	r3, [r3, #24]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	bf38      	it	cc
 800f3e0:	461a      	movcc	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	60da      	str	r2, [r3, #12]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	441a      	add	r2, r3
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f aeb5 	bne.w	800f16c <f_write+0x76>
 800f402:	e000      	b.n	800f406 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f404:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	7d1b      	ldrb	r3, [r3, #20]
 800f40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f40e:	b2da      	uxtb	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3730      	adds	r7, #48	; 0x30
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b086      	sub	sp, #24
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f107 0208 	add.w	r2, r7, #8
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff faba 	bl	800e9a8 <validate>
 800f434:	4603      	mov	r3, r0
 800f436:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f438:	7dfb      	ldrb	r3, [r7, #23]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d168      	bne.n	800f510 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	7d1b      	ldrb	r3, [r3, #20]
 800f442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f446:	2b00      	cmp	r3, #0
 800f448:	d062      	beq.n	800f510 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	7d1b      	ldrb	r3, [r3, #20]
 800f44e:	b25b      	sxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	da15      	bge.n	800f480 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	7858      	ldrb	r0, [r3, #1]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a1a      	ldr	r2, [r3, #32]
 800f462:	2301      	movs	r3, #1
 800f464:	f7fd fce0 	bl	800ce28 <disk_write>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <f_sync+0x54>
 800f46e:	2301      	movs	r3, #1
 800f470:	e04f      	b.n	800f512 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	7d1b      	ldrb	r3, [r3, #20]
 800f476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f480:	f7fd fb06 	bl	800ca90 <get_fattime>
 800f484:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48c:	4619      	mov	r1, r3
 800f48e:	4610      	mov	r0, r2
 800f490:	f7fd ffb8 	bl	800d404 <move_window>
 800f494:	4603      	mov	r3, r0
 800f496:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f498:	7dfb      	ldrb	r3, [r7, #23]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d138      	bne.n	800f510 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	330b      	adds	r3, #11
 800f4a8:	781a      	ldrb	r2, [r3, #0]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	330b      	adds	r3, #11
 800f4ae:	f042 0220 	orr.w	r2, r2, #32
 800f4b2:	b2d2      	uxtb	r2, r2
 800f4b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	68f9      	ldr	r1, [r7, #12]
 800f4c2:	f7fe fd46 	bl	800df52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f103 021c 	add.w	r2, r3, #28
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	f7fd fd3c 	bl	800cf50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	3316      	adds	r3, #22
 800f4dc:	6939      	ldr	r1, [r7, #16]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fd fd36 	bl	800cf50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3312      	adds	r3, #18
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fd fd15 	bl	800cf1a <st_word>
					fs->wflag = 1;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fd ffb1 	bl	800d460 <sync_fs>
 800f4fe:	4603      	mov	r3, r0
 800f500:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	7d1b      	ldrb	r3, [r3, #20]
 800f506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f510:	7dfb      	ldrb	r3, [r7, #23]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b084      	sub	sp, #16
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f7ff ff7b 	bl	800f41e <f_sync>
 800f528:	4603      	mov	r3, r0
 800f52a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f52c:	7bfb      	ldrb	r3, [r7, #15]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d118      	bne.n	800f564 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f107 0208 	add.w	r2, r7, #8
 800f538:	4611      	mov	r1, r2
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff fa34 	bl	800e9a8 <validate>
 800f540:	4603      	mov	r3, r0
 800f542:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10c      	bne.n	800f564 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fd feb4 	bl	800d2bc <dec_lock>
 800f554:	4603      	mov	r3, r0
 800f556:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f564:	7bfb      	ldrb	r3, [r7, #15]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b090      	sub	sp, #64	; 0x40
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f578:	f107 010c 	add.w	r1, r7, #12
 800f57c:	1d3b      	adds	r3, r7, #4
 800f57e:	2200      	movs	r2, #0
 800f580:	4618      	mov	r0, r3
 800f582:	f7fe ff91 	bl	800e4a8 <find_volume>
 800f586:	4603      	mov	r3, r0
 800f588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f58c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f590:	2b00      	cmp	r3, #0
 800f592:	d11f      	bne.n	800f5d4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	f107 030c 	add.w	r3, r7, #12
 800f59a:	4611      	mov	r1, r2
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe fe73 	bl	800e288 <follow_path>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f5a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d111      	bne.n	800f5d4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f5b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f5b4:	b25b      	sxtb	r3, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	da03      	bge.n	800f5c2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f5ba:	2306      	movs	r3, #6
 800f5bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f5c0:	e008      	b.n	800f5d4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d005      	beq.n	800f5d4 <f_stat+0x66>
 800f5c8:	f107 030c 	add.w	r3, r7, #12
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe fd66 	bl	800e0a0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f5d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3740      	adds	r7, #64	; 0x40
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b096      	sub	sp, #88	; 0x58
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	1d3b      	adds	r3, r7, #4
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fe ff59 	bl	800e4a8 <find_volume>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800f600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f604:	2b00      	cmp	r3, #0
 800f606:	f040 80f2 	bne.w	800f7ee <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	f107 030c 	add.w	r3, r7, #12
 800f610:	4611      	mov	r1, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fe38 	bl	800e288 <follow_path>
 800f618:	4603      	mov	r3, r0
 800f61a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f61e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f622:	2b00      	cmp	r3, #0
 800f624:	d102      	bne.n	800f62c <f_mkdir+0x4c>
 800f626:	2308      	movs	r3, #8
 800f628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f62c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f630:	2b04      	cmp	r3, #4
 800f632:	f040 80dc 	bne.w	800f7ee <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f636:	f107 030c 	add.w	r3, r7, #12
 800f63a:	2100      	movs	r1, #0
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe f9f3 	bl	800da28 <create_chain>
 800f642:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	461a      	mov	r2, r3
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	899b      	ldrh	r3, [r3, #12]
 800f64e:	fb02 f303 	mul.w	r3, r2, r3
 800f652:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800f654:	2300      	movs	r3, #0
 800f656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d102      	bne.n	800f666 <f_mkdir+0x86>
 800f660:	2307      	movs	r3, #7
 800f662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800f666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d102      	bne.n	800f672 <f_mkdir+0x92>
 800f66c:	2302      	movs	r3, #2
 800f66e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d102      	bne.n	800f680 <f_mkdir+0xa0>
 800f67a:	2301      	movs	r3, #1
 800f67c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f684:	2b00      	cmp	r3, #0
 800f686:	d106      	bne.n	800f696 <f_mkdir+0xb6>
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fd fe76 	bl	800d37c <sync_window>
 800f690:	4603      	mov	r3, r0
 800f692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800f696:	f7fd f9fb 	bl	800ca90 <get_fattime>
 800f69a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f69c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d16c      	bne.n	800f77e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fd ff49 	bl	800d540 <clust2sect>
 800f6ae:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	3334      	adds	r3, #52	; 0x34
 800f6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	899b      	ldrh	r3, [r3, #12]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6c0:	f7fd fc93 	bl	800cfea <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f6c4:	220b      	movs	r2, #11
 800f6c6:	2120      	movs	r1, #32
 800f6c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6ca:	f7fd fc8e 	bl	800cfea <mem_set>
					dir[DIR_Name] = '.';
 800f6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d0:	222e      	movs	r2, #46	; 0x2e
 800f6d2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d6:	330b      	adds	r3, #11
 800f6d8:	2210      	movs	r2, #16
 800f6da:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6de:	3316      	adds	r3, #22
 800f6e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fd fc34 	bl	800cf50 <st_dword>
					st_clust(fs, dir, dcl);
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fe fc2f 	bl	800df52 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f6:	3320      	adds	r3, #32
 800f6f8:	2220      	movs	r2, #32
 800f6fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fd fc53 	bl	800cfa8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f704:	3321      	adds	r3, #33	; 0x21
 800f706:	222e      	movs	r2, #46	; 0x2e
 800f708:	701a      	strb	r2, [r3, #0]
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b03      	cmp	r3, #3
 800f714:	d106      	bne.n	800f724 <f_mkdir+0x144>
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d101      	bne.n	800f724 <f_mkdir+0x144>
 800f720:	2300      	movs	r3, #0
 800f722:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800f724:	68b8      	ldr	r0, [r7, #8]
 800f726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f728:	3320      	adds	r3, #32
 800f72a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f72c:	4619      	mov	r1, r3
 800f72e:	f7fe fc10 	bl	800df52 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	895b      	ldrh	r3, [r3, #10]
 800f736:	653b      	str	r3, [r7, #80]	; 0x50
 800f738:	e01c      	b.n	800f774 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800f73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2201      	movs	r2, #1
 800f748:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fd fe15 	bl	800d37c <sync_window>
 800f752:	4603      	mov	r3, r0
 800f754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800f758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10d      	bne.n	800f77c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	899b      	ldrh	r3, [r3, #12]
 800f764:	461a      	mov	r2, r3
 800f766:	2100      	movs	r1, #0
 800f768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f76a:	f7fd fc3e 	bl	800cfea <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f770:	3b01      	subs	r3, #1
 800f772:	653b      	str	r3, [r7, #80]	; 0x50
 800f774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1df      	bne.n	800f73a <f_mkdir+0x15a>
 800f77a:	e000      	b.n	800f77e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800f77c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f77e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f782:	2b00      	cmp	r3, #0
 800f784:	d107      	bne.n	800f796 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f786:	f107 030c 	add.w	r3, r7, #12
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fc56 	bl	800e03c <dir_register>
 800f790:	4603      	mov	r3, r0
 800f792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800f796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d120      	bne.n	800f7e0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7a4:	3316      	adds	r3, #22
 800f7a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fd fbd1 	bl	800cf50 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fe fbcc 	bl	800df52 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7bc:	330b      	adds	r3, #11
 800f7be:	2210      	movs	r2, #16
 800f7c0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f7c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10e      	bne.n	800f7ee <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fd fe44 	bl	800d460 <sync_fs>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f7de:	e006      	b.n	800f7ee <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f7e0:	f107 030c 	add.w	r3, r7, #12
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fe f8b8 	bl	800d95e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f7ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3758      	adds	r7, #88	; 0x58
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b087      	sub	sp, #28
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	4613      	mov	r3, r2
 800f808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f80a:	2301      	movs	r3, #1
 800f80c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f812:	4b1f      	ldr	r3, [pc, #124]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f814:	7a5b      	ldrb	r3, [r3, #9]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d131      	bne.n	800f880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f81c:	4b1c      	ldr	r3, [pc, #112]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f81e:	7a5b      	ldrb	r3, [r3, #9]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	461a      	mov	r2, r3
 800f824:	4b1a      	ldr	r3, [pc, #104]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f826:	2100      	movs	r1, #0
 800f828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f82a:	4b19      	ldr	r3, [pc, #100]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f82c:	7a5b      	ldrb	r3, [r3, #9]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	4a17      	ldr	r2, [pc, #92]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f83a:	4b15      	ldr	r3, [pc, #84]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f83c:	7a5b      	ldrb	r3, [r3, #9]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	461a      	mov	r2, r3
 800f842:	4b13      	ldr	r3, [pc, #76]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f844:	4413      	add	r3, r2
 800f846:	79fa      	ldrb	r2, [r7, #7]
 800f848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f84a:	4b11      	ldr	r3, [pc, #68]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f84c:	7a5b      	ldrb	r3, [r3, #9]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	b2d1      	uxtb	r1, r2
 800f854:	4a0e      	ldr	r2, [pc, #56]	; (800f890 <FATFS_LinkDriverEx+0x94>)
 800f856:	7251      	strb	r1, [r2, #9]
 800f858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f85a:	7dbb      	ldrb	r3, [r7, #22]
 800f85c:	3330      	adds	r3, #48	; 0x30
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	3301      	adds	r3, #1
 800f868:	223a      	movs	r2, #58	; 0x3a
 800f86a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	3302      	adds	r3, #2
 800f870:	222f      	movs	r2, #47	; 0x2f
 800f872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3303      	adds	r3, #3
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
}
 800f882:	4618      	mov	r0, r3
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	20005c40 	.word	0x20005c40

0800f894 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff ffaa 	bl	800f7fc <FATFS_LinkDriverEx>
 800f8a8:	4603      	mov	r3, r0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
	...

0800f8b4 <__assert_func>:
 800f8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8b6:	4614      	mov	r4, r2
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <__assert_func+0x2c>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4605      	mov	r5, r0
 800f8c0:	68d8      	ldr	r0, [r3, #12]
 800f8c2:	b14c      	cbz	r4, 800f8d8 <__assert_func+0x24>
 800f8c4:	4b07      	ldr	r3, [pc, #28]	; (800f8e4 <__assert_func+0x30>)
 800f8c6:	9100      	str	r1, [sp, #0]
 800f8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8cc:	4906      	ldr	r1, [pc, #24]	; (800f8e8 <__assert_func+0x34>)
 800f8ce:	462b      	mov	r3, r5
 800f8d0:	f000 f814 	bl	800f8fc <fiprintf>
 800f8d4:	f001 f86a 	bl	80109ac <abort>
 800f8d8:	4b04      	ldr	r3, [pc, #16]	; (800f8ec <__assert_func+0x38>)
 800f8da:	461c      	mov	r4, r3
 800f8dc:	e7f3      	b.n	800f8c6 <__assert_func+0x12>
 800f8de:	bf00      	nop
 800f8e0:	200000f8 	.word	0x200000f8
 800f8e4:	0802e524 	.word	0x0802e524
 800f8e8:	0802e531 	.word	0x0802e531
 800f8ec:	0802e55f 	.word	0x0802e55f

0800f8f0 <__errno>:
 800f8f0:	4b01      	ldr	r3, [pc, #4]	; (800f8f8 <__errno+0x8>)
 800f8f2:	6818      	ldr	r0, [r3, #0]
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	200000f8 	.word	0x200000f8

0800f8fc <fiprintf>:
 800f8fc:	b40e      	push	{r1, r2, r3}
 800f8fe:	b503      	push	{r0, r1, lr}
 800f900:	4601      	mov	r1, r0
 800f902:	ab03      	add	r3, sp, #12
 800f904:	4805      	ldr	r0, [pc, #20]	; (800f91c <fiprintf+0x20>)
 800f906:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90a:	6800      	ldr	r0, [r0, #0]
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f000 f95b 	bl	800fbc8 <_vfiprintf_r>
 800f912:	b002      	add	sp, #8
 800f914:	f85d eb04 	ldr.w	lr, [sp], #4
 800f918:	b003      	add	sp, #12
 800f91a:	4770      	bx	lr
 800f91c:	200000f8 	.word	0x200000f8

0800f920 <__libc_init_array>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	4d0d      	ldr	r5, [pc, #52]	; (800f958 <__libc_init_array+0x38>)
 800f924:	4c0d      	ldr	r4, [pc, #52]	; (800f95c <__libc_init_array+0x3c>)
 800f926:	1b64      	subs	r4, r4, r5
 800f928:	10a4      	asrs	r4, r4, #2
 800f92a:	2600      	movs	r6, #0
 800f92c:	42a6      	cmp	r6, r4
 800f92e:	d109      	bne.n	800f944 <__libc_init_array+0x24>
 800f930:	4d0b      	ldr	r5, [pc, #44]	; (800f960 <__libc_init_array+0x40>)
 800f932:	4c0c      	ldr	r4, [pc, #48]	; (800f964 <__libc_init_array+0x44>)
 800f934:	f003 fe36 	bl	80135a4 <_init>
 800f938:	1b64      	subs	r4, r4, r5
 800f93a:	10a4      	asrs	r4, r4, #2
 800f93c:	2600      	movs	r6, #0
 800f93e:	42a6      	cmp	r6, r4
 800f940:	d105      	bne.n	800f94e <__libc_init_array+0x2e>
 800f942:	bd70      	pop	{r4, r5, r6, pc}
 800f944:	f855 3b04 	ldr.w	r3, [r5], #4
 800f948:	4798      	blx	r3
 800f94a:	3601      	adds	r6, #1
 800f94c:	e7ee      	b.n	800f92c <__libc_init_array+0xc>
 800f94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f952:	4798      	blx	r3
 800f954:	3601      	adds	r6, #1
 800f956:	e7f2      	b.n	800f93e <__libc_init_array+0x1e>
 800f958:	0802e940 	.word	0x0802e940
 800f95c:	0802e940 	.word	0x0802e940
 800f960:	0802e940 	.word	0x0802e940
 800f964:	0802e944 	.word	0x0802e944

0800f968 <malloc>:
 800f968:	4b02      	ldr	r3, [pc, #8]	; (800f974 <malloc+0xc>)
 800f96a:	4601      	mov	r1, r0
 800f96c:	6818      	ldr	r0, [r3, #0]
 800f96e:	f000 b88d 	b.w	800fa8c <_malloc_r>
 800f972:	bf00      	nop
 800f974:	200000f8 	.word	0x200000f8

0800f978 <free>:
 800f978:	4b02      	ldr	r3, [pc, #8]	; (800f984 <free+0xc>)
 800f97a:	4601      	mov	r1, r0
 800f97c:	6818      	ldr	r0, [r3, #0]
 800f97e:	f000 b819 	b.w	800f9b4 <_free_r>
 800f982:	bf00      	nop
 800f984:	200000f8 	.word	0x200000f8

0800f988 <memcpy>:
 800f988:	440a      	add	r2, r1
 800f98a:	4291      	cmp	r1, r2
 800f98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f990:	d100      	bne.n	800f994 <memcpy+0xc>
 800f992:	4770      	bx	lr
 800f994:	b510      	push	{r4, lr}
 800f996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f99e:	4291      	cmp	r1, r2
 800f9a0:	d1f9      	bne.n	800f996 <memcpy+0xe>
 800f9a2:	bd10      	pop	{r4, pc}

0800f9a4 <memset>:
 800f9a4:	4402      	add	r2, r0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d100      	bne.n	800f9ae <memset+0xa>
 800f9ac:	4770      	bx	lr
 800f9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f9b2:	e7f9      	b.n	800f9a8 <memset+0x4>

0800f9b4 <_free_r>:
 800f9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9b6:	2900      	cmp	r1, #0
 800f9b8:	d044      	beq.n	800fa44 <_free_r+0x90>
 800f9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9be:	9001      	str	r0, [sp, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800f9c6:	bfb8      	it	lt
 800f9c8:	18e4      	addlt	r4, r4, r3
 800f9ca:	f002 f8e7 	bl	8011b9c <__malloc_lock>
 800f9ce:	4a1e      	ldr	r2, [pc, #120]	; (800fa48 <_free_r+0x94>)
 800f9d0:	9801      	ldr	r0, [sp, #4]
 800f9d2:	6813      	ldr	r3, [r2, #0]
 800f9d4:	b933      	cbnz	r3, 800f9e4 <_free_r+0x30>
 800f9d6:	6063      	str	r3, [r4, #4]
 800f9d8:	6014      	str	r4, [r2, #0]
 800f9da:	b003      	add	sp, #12
 800f9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9e0:	f002 b8e2 	b.w	8011ba8 <__malloc_unlock>
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	d908      	bls.n	800f9fa <_free_r+0x46>
 800f9e8:	6825      	ldr	r5, [r4, #0]
 800f9ea:	1961      	adds	r1, r4, r5
 800f9ec:	428b      	cmp	r3, r1
 800f9ee:	bf01      	itttt	eq
 800f9f0:	6819      	ldreq	r1, [r3, #0]
 800f9f2:	685b      	ldreq	r3, [r3, #4]
 800f9f4:	1949      	addeq	r1, r1, r5
 800f9f6:	6021      	streq	r1, [r4, #0]
 800f9f8:	e7ed      	b.n	800f9d6 <_free_r+0x22>
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	b10b      	cbz	r3, 800fa04 <_free_r+0x50>
 800fa00:	42a3      	cmp	r3, r4
 800fa02:	d9fa      	bls.n	800f9fa <_free_r+0x46>
 800fa04:	6811      	ldr	r1, [r2, #0]
 800fa06:	1855      	adds	r5, r2, r1
 800fa08:	42a5      	cmp	r5, r4
 800fa0a:	d10b      	bne.n	800fa24 <_free_r+0x70>
 800fa0c:	6824      	ldr	r4, [r4, #0]
 800fa0e:	4421      	add	r1, r4
 800fa10:	1854      	adds	r4, r2, r1
 800fa12:	42a3      	cmp	r3, r4
 800fa14:	6011      	str	r1, [r2, #0]
 800fa16:	d1e0      	bne.n	800f9da <_free_r+0x26>
 800fa18:	681c      	ldr	r4, [r3, #0]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	6053      	str	r3, [r2, #4]
 800fa1e:	4421      	add	r1, r4
 800fa20:	6011      	str	r1, [r2, #0]
 800fa22:	e7da      	b.n	800f9da <_free_r+0x26>
 800fa24:	d902      	bls.n	800fa2c <_free_r+0x78>
 800fa26:	230c      	movs	r3, #12
 800fa28:	6003      	str	r3, [r0, #0]
 800fa2a:	e7d6      	b.n	800f9da <_free_r+0x26>
 800fa2c:	6825      	ldr	r5, [r4, #0]
 800fa2e:	1961      	adds	r1, r4, r5
 800fa30:	428b      	cmp	r3, r1
 800fa32:	bf04      	itt	eq
 800fa34:	6819      	ldreq	r1, [r3, #0]
 800fa36:	685b      	ldreq	r3, [r3, #4]
 800fa38:	6063      	str	r3, [r4, #4]
 800fa3a:	bf04      	itt	eq
 800fa3c:	1949      	addeq	r1, r1, r5
 800fa3e:	6021      	streq	r1, [r4, #0]
 800fa40:	6054      	str	r4, [r2, #4]
 800fa42:	e7ca      	b.n	800f9da <_free_r+0x26>
 800fa44:	b003      	add	sp, #12
 800fa46:	bd30      	pop	{r4, r5, pc}
 800fa48:	20005c4c 	.word	0x20005c4c

0800fa4c <sbrk_aligned>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	4e0e      	ldr	r6, [pc, #56]	; (800fa88 <sbrk_aligned+0x3c>)
 800fa50:	460c      	mov	r4, r1
 800fa52:	6831      	ldr	r1, [r6, #0]
 800fa54:	4605      	mov	r5, r0
 800fa56:	b911      	cbnz	r1, 800fa5e <sbrk_aligned+0x12>
 800fa58:	f000 fe50 	bl	80106fc <_sbrk_r>
 800fa5c:	6030      	str	r0, [r6, #0]
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4628      	mov	r0, r5
 800fa62:	f000 fe4b 	bl	80106fc <_sbrk_r>
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	d00a      	beq.n	800fa80 <sbrk_aligned+0x34>
 800fa6a:	1cc4      	adds	r4, r0, #3
 800fa6c:	f024 0403 	bic.w	r4, r4, #3
 800fa70:	42a0      	cmp	r0, r4
 800fa72:	d007      	beq.n	800fa84 <sbrk_aligned+0x38>
 800fa74:	1a21      	subs	r1, r4, r0
 800fa76:	4628      	mov	r0, r5
 800fa78:	f000 fe40 	bl	80106fc <_sbrk_r>
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d101      	bne.n	800fa84 <sbrk_aligned+0x38>
 800fa80:	f04f 34ff 	mov.w	r4, #4294967295
 800fa84:	4620      	mov	r0, r4
 800fa86:	bd70      	pop	{r4, r5, r6, pc}
 800fa88:	20005c50 	.word	0x20005c50

0800fa8c <_malloc_r>:
 800fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	1ccd      	adds	r5, r1, #3
 800fa92:	f025 0503 	bic.w	r5, r5, #3
 800fa96:	3508      	adds	r5, #8
 800fa98:	2d0c      	cmp	r5, #12
 800fa9a:	bf38      	it	cc
 800fa9c:	250c      	movcc	r5, #12
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	4607      	mov	r7, r0
 800faa2:	db01      	blt.n	800faa8 <_malloc_r+0x1c>
 800faa4:	42a9      	cmp	r1, r5
 800faa6:	d905      	bls.n	800fab4 <_malloc_r+0x28>
 800faa8:	230c      	movs	r3, #12
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	2600      	movs	r6, #0
 800faae:	4630      	mov	r0, r6
 800fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab4:	4e2e      	ldr	r6, [pc, #184]	; (800fb70 <_malloc_r+0xe4>)
 800fab6:	f002 f871 	bl	8011b9c <__malloc_lock>
 800faba:	6833      	ldr	r3, [r6, #0]
 800fabc:	461c      	mov	r4, r3
 800fabe:	bb34      	cbnz	r4, 800fb0e <_malloc_r+0x82>
 800fac0:	4629      	mov	r1, r5
 800fac2:	4638      	mov	r0, r7
 800fac4:	f7ff ffc2 	bl	800fa4c <sbrk_aligned>
 800fac8:	1c43      	adds	r3, r0, #1
 800faca:	4604      	mov	r4, r0
 800facc:	d14d      	bne.n	800fb6a <_malloc_r+0xde>
 800face:	6834      	ldr	r4, [r6, #0]
 800fad0:	4626      	mov	r6, r4
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	d140      	bne.n	800fb58 <_malloc_r+0xcc>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	4631      	mov	r1, r6
 800fada:	4638      	mov	r0, r7
 800fadc:	eb04 0803 	add.w	r8, r4, r3
 800fae0:	f000 fe0c 	bl	80106fc <_sbrk_r>
 800fae4:	4580      	cmp	r8, r0
 800fae6:	d13a      	bne.n	800fb5e <_malloc_r+0xd2>
 800fae8:	6821      	ldr	r1, [r4, #0]
 800faea:	3503      	adds	r5, #3
 800faec:	1a6d      	subs	r5, r5, r1
 800faee:	f025 0503 	bic.w	r5, r5, #3
 800faf2:	3508      	adds	r5, #8
 800faf4:	2d0c      	cmp	r5, #12
 800faf6:	bf38      	it	cc
 800faf8:	250c      	movcc	r5, #12
 800fafa:	4629      	mov	r1, r5
 800fafc:	4638      	mov	r0, r7
 800fafe:	f7ff ffa5 	bl	800fa4c <sbrk_aligned>
 800fb02:	3001      	adds	r0, #1
 800fb04:	d02b      	beq.n	800fb5e <_malloc_r+0xd2>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	442b      	add	r3, r5
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	e00e      	b.n	800fb2c <_malloc_r+0xa0>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	1b52      	subs	r2, r2, r5
 800fb12:	d41e      	bmi.n	800fb52 <_malloc_r+0xc6>
 800fb14:	2a0b      	cmp	r2, #11
 800fb16:	d916      	bls.n	800fb46 <_malloc_r+0xba>
 800fb18:	1961      	adds	r1, r4, r5
 800fb1a:	42a3      	cmp	r3, r4
 800fb1c:	6025      	str	r5, [r4, #0]
 800fb1e:	bf18      	it	ne
 800fb20:	6059      	strne	r1, [r3, #4]
 800fb22:	6863      	ldr	r3, [r4, #4]
 800fb24:	bf08      	it	eq
 800fb26:	6031      	streq	r1, [r6, #0]
 800fb28:	5162      	str	r2, [r4, r5]
 800fb2a:	604b      	str	r3, [r1, #4]
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	f104 060b 	add.w	r6, r4, #11
 800fb32:	f002 f839 	bl	8011ba8 <__malloc_unlock>
 800fb36:	f026 0607 	bic.w	r6, r6, #7
 800fb3a:	1d23      	adds	r3, r4, #4
 800fb3c:	1af2      	subs	r2, r6, r3
 800fb3e:	d0b6      	beq.n	800faae <_malloc_r+0x22>
 800fb40:	1b9b      	subs	r3, r3, r6
 800fb42:	50a3      	str	r3, [r4, r2]
 800fb44:	e7b3      	b.n	800faae <_malloc_r+0x22>
 800fb46:	6862      	ldr	r2, [r4, #4]
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	bf0c      	ite	eq
 800fb4c:	6032      	streq	r2, [r6, #0]
 800fb4e:	605a      	strne	r2, [r3, #4]
 800fb50:	e7ec      	b.n	800fb2c <_malloc_r+0xa0>
 800fb52:	4623      	mov	r3, r4
 800fb54:	6864      	ldr	r4, [r4, #4]
 800fb56:	e7b2      	b.n	800fabe <_malloc_r+0x32>
 800fb58:	4634      	mov	r4, r6
 800fb5a:	6876      	ldr	r6, [r6, #4]
 800fb5c:	e7b9      	b.n	800fad2 <_malloc_r+0x46>
 800fb5e:	230c      	movs	r3, #12
 800fb60:	603b      	str	r3, [r7, #0]
 800fb62:	4638      	mov	r0, r7
 800fb64:	f002 f820 	bl	8011ba8 <__malloc_unlock>
 800fb68:	e7a1      	b.n	800faae <_malloc_r+0x22>
 800fb6a:	6025      	str	r5, [r4, #0]
 800fb6c:	e7de      	b.n	800fb2c <_malloc_r+0xa0>
 800fb6e:	bf00      	nop
 800fb70:	20005c4c 	.word	0x20005c4c

0800fb74 <__sfputc_r>:
 800fb74:	6893      	ldr	r3, [r2, #8]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	b410      	push	{r4}
 800fb7c:	6093      	str	r3, [r2, #8]
 800fb7e:	da08      	bge.n	800fb92 <__sfputc_r+0x1e>
 800fb80:	6994      	ldr	r4, [r2, #24]
 800fb82:	42a3      	cmp	r3, r4
 800fb84:	db01      	blt.n	800fb8a <__sfputc_r+0x16>
 800fb86:	290a      	cmp	r1, #10
 800fb88:	d103      	bne.n	800fb92 <__sfputc_r+0x1e>
 800fb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb8e:	f000 be3b 	b.w	8010808 <__swbuf_r>
 800fb92:	6813      	ldr	r3, [r2, #0]
 800fb94:	1c58      	adds	r0, r3, #1
 800fb96:	6010      	str	r0, [r2, #0]
 800fb98:	7019      	strb	r1, [r3, #0]
 800fb9a:	4608      	mov	r0, r1
 800fb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <__sfputs_r>:
 800fba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba4:	4606      	mov	r6, r0
 800fba6:	460f      	mov	r7, r1
 800fba8:	4614      	mov	r4, r2
 800fbaa:	18d5      	adds	r5, r2, r3
 800fbac:	42ac      	cmp	r4, r5
 800fbae:	d101      	bne.n	800fbb4 <__sfputs_r+0x12>
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e007      	b.n	800fbc4 <__sfputs_r+0x22>
 800fbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ffda 	bl	800fb74 <__sfputc_r>
 800fbc0:	1c43      	adds	r3, r0, #1
 800fbc2:	d1f3      	bne.n	800fbac <__sfputs_r+0xa>
 800fbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbc8 <_vfiprintf_r>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	460d      	mov	r5, r1
 800fbce:	b09d      	sub	sp, #116	; 0x74
 800fbd0:	4614      	mov	r4, r2
 800fbd2:	4698      	mov	r8, r3
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	b118      	cbz	r0, 800fbe0 <_vfiprintf_r+0x18>
 800fbd8:	6983      	ldr	r3, [r0, #24]
 800fbda:	b90b      	cbnz	r3, 800fbe0 <_vfiprintf_r+0x18>
 800fbdc:	f001 fe94 	bl	8011908 <__sinit>
 800fbe0:	4b89      	ldr	r3, [pc, #548]	; (800fe08 <_vfiprintf_r+0x240>)
 800fbe2:	429d      	cmp	r5, r3
 800fbe4:	d11b      	bne.n	800fc1e <_vfiprintf_r+0x56>
 800fbe6:	6875      	ldr	r5, [r6, #4]
 800fbe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbea:	07d9      	lsls	r1, r3, #31
 800fbec:	d405      	bmi.n	800fbfa <_vfiprintf_r+0x32>
 800fbee:	89ab      	ldrh	r3, [r5, #12]
 800fbf0:	059a      	lsls	r2, r3, #22
 800fbf2:	d402      	bmi.n	800fbfa <_vfiprintf_r+0x32>
 800fbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf6:	f001 ff2a 	bl	8011a4e <__retarget_lock_acquire_recursive>
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	071b      	lsls	r3, r3, #28
 800fbfe:	d501      	bpl.n	800fc04 <_vfiprintf_r+0x3c>
 800fc00:	692b      	ldr	r3, [r5, #16]
 800fc02:	b9eb      	cbnz	r3, 800fc40 <_vfiprintf_r+0x78>
 800fc04:	4629      	mov	r1, r5
 800fc06:	4630      	mov	r0, r6
 800fc08:	f000 fe62 	bl	80108d0 <__swsetup_r>
 800fc0c:	b1c0      	cbz	r0, 800fc40 <_vfiprintf_r+0x78>
 800fc0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc10:	07dc      	lsls	r4, r3, #31
 800fc12:	d50e      	bpl.n	800fc32 <_vfiprintf_r+0x6a>
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	b01d      	add	sp, #116	; 0x74
 800fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1e:	4b7b      	ldr	r3, [pc, #492]	; (800fe0c <_vfiprintf_r+0x244>)
 800fc20:	429d      	cmp	r5, r3
 800fc22:	d101      	bne.n	800fc28 <_vfiprintf_r+0x60>
 800fc24:	68b5      	ldr	r5, [r6, #8]
 800fc26:	e7df      	b.n	800fbe8 <_vfiprintf_r+0x20>
 800fc28:	4b79      	ldr	r3, [pc, #484]	; (800fe10 <_vfiprintf_r+0x248>)
 800fc2a:	429d      	cmp	r5, r3
 800fc2c:	bf08      	it	eq
 800fc2e:	68f5      	ldreq	r5, [r6, #12]
 800fc30:	e7da      	b.n	800fbe8 <_vfiprintf_r+0x20>
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	0598      	lsls	r0, r3, #22
 800fc36:	d4ed      	bmi.n	800fc14 <_vfiprintf_r+0x4c>
 800fc38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc3a:	f001 ff09 	bl	8011a50 <__retarget_lock_release_recursive>
 800fc3e:	e7e9      	b.n	800fc14 <_vfiprintf_r+0x4c>
 800fc40:	2300      	movs	r3, #0
 800fc42:	9309      	str	r3, [sp, #36]	; 0x24
 800fc44:	2320      	movs	r3, #32
 800fc46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc4e:	2330      	movs	r3, #48	; 0x30
 800fc50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe14 <_vfiprintf_r+0x24c>
 800fc54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc58:	f04f 0901 	mov.w	r9, #1
 800fc5c:	4623      	mov	r3, r4
 800fc5e:	469a      	mov	sl, r3
 800fc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc64:	b10a      	cbz	r2, 800fc6a <_vfiprintf_r+0xa2>
 800fc66:	2a25      	cmp	r2, #37	; 0x25
 800fc68:	d1f9      	bne.n	800fc5e <_vfiprintf_r+0x96>
 800fc6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc6e:	d00b      	beq.n	800fc88 <_vfiprintf_r+0xc0>
 800fc70:	465b      	mov	r3, fp
 800fc72:	4622      	mov	r2, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff ff93 	bl	800fba2 <__sfputs_r>
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	f000 80aa 	beq.w	800fdd6 <_vfiprintf_r+0x20e>
 800fc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc84:	445a      	add	r2, fp
 800fc86:	9209      	str	r2, [sp, #36]	; 0x24
 800fc88:	f89a 3000 	ldrb.w	r3, [sl]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 80a2 	beq.w	800fdd6 <_vfiprintf_r+0x20e>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f04f 32ff 	mov.w	r2, #4294967295
 800fc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc9c:	f10a 0a01 	add.w	sl, sl, #1
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fca8:	931a      	str	r3, [sp, #104]	; 0x68
 800fcaa:	4654      	mov	r4, sl
 800fcac:	2205      	movs	r2, #5
 800fcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb2:	4858      	ldr	r0, [pc, #352]	; (800fe14 <_vfiprintf_r+0x24c>)
 800fcb4:	f7f0 faa4 	bl	8000200 <memchr>
 800fcb8:	9a04      	ldr	r2, [sp, #16]
 800fcba:	b9d8      	cbnz	r0, 800fcf4 <_vfiprintf_r+0x12c>
 800fcbc:	06d1      	lsls	r1, r2, #27
 800fcbe:	bf44      	itt	mi
 800fcc0:	2320      	movmi	r3, #32
 800fcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcc6:	0713      	lsls	r3, r2, #28
 800fcc8:	bf44      	itt	mi
 800fcca:	232b      	movmi	r3, #43	; 0x2b
 800fccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd4:	2b2a      	cmp	r3, #42	; 0x2a
 800fcd6:	d015      	beq.n	800fd04 <_vfiprintf_r+0x13c>
 800fcd8:	9a07      	ldr	r2, [sp, #28]
 800fcda:	4654      	mov	r4, sl
 800fcdc:	2000      	movs	r0, #0
 800fcde:	f04f 0c0a 	mov.w	ip, #10
 800fce2:	4621      	mov	r1, r4
 800fce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce8:	3b30      	subs	r3, #48	; 0x30
 800fcea:	2b09      	cmp	r3, #9
 800fcec:	d94e      	bls.n	800fd8c <_vfiprintf_r+0x1c4>
 800fcee:	b1b0      	cbz	r0, 800fd1e <_vfiprintf_r+0x156>
 800fcf0:	9207      	str	r2, [sp, #28]
 800fcf2:	e014      	b.n	800fd1e <_vfiprintf_r+0x156>
 800fcf4:	eba0 0308 	sub.w	r3, r0, r8
 800fcf8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	46a2      	mov	sl, r4
 800fd02:	e7d2      	b.n	800fcaa <_vfiprintf_r+0xe2>
 800fd04:	9b03      	ldr	r3, [sp, #12]
 800fd06:	1d19      	adds	r1, r3, #4
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	9103      	str	r1, [sp, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bfbb      	ittet	lt
 800fd10:	425b      	neglt	r3, r3
 800fd12:	f042 0202 	orrlt.w	r2, r2, #2
 800fd16:	9307      	strge	r3, [sp, #28]
 800fd18:	9307      	strlt	r3, [sp, #28]
 800fd1a:	bfb8      	it	lt
 800fd1c:	9204      	strlt	r2, [sp, #16]
 800fd1e:	7823      	ldrb	r3, [r4, #0]
 800fd20:	2b2e      	cmp	r3, #46	; 0x2e
 800fd22:	d10c      	bne.n	800fd3e <_vfiprintf_r+0x176>
 800fd24:	7863      	ldrb	r3, [r4, #1]
 800fd26:	2b2a      	cmp	r3, #42	; 0x2a
 800fd28:	d135      	bne.n	800fd96 <_vfiprintf_r+0x1ce>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	1d1a      	adds	r2, r3, #4
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	9203      	str	r2, [sp, #12]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bfb8      	it	lt
 800fd36:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd3a:	3402      	adds	r4, #2
 800fd3c:	9305      	str	r3, [sp, #20]
 800fd3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe24 <_vfiprintf_r+0x25c>
 800fd42:	7821      	ldrb	r1, [r4, #0]
 800fd44:	2203      	movs	r2, #3
 800fd46:	4650      	mov	r0, sl
 800fd48:	f7f0 fa5a 	bl	8000200 <memchr>
 800fd4c:	b140      	cbz	r0, 800fd60 <_vfiprintf_r+0x198>
 800fd4e:	2340      	movs	r3, #64	; 0x40
 800fd50:	eba0 000a 	sub.w	r0, r0, sl
 800fd54:	fa03 f000 	lsl.w	r0, r3, r0
 800fd58:	9b04      	ldr	r3, [sp, #16]
 800fd5a:	4303      	orrs	r3, r0
 800fd5c:	3401      	adds	r4, #1
 800fd5e:	9304      	str	r3, [sp, #16]
 800fd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd64:	482c      	ldr	r0, [pc, #176]	; (800fe18 <_vfiprintf_r+0x250>)
 800fd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd6a:	2206      	movs	r2, #6
 800fd6c:	f7f0 fa48 	bl	8000200 <memchr>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d03f      	beq.n	800fdf4 <_vfiprintf_r+0x22c>
 800fd74:	4b29      	ldr	r3, [pc, #164]	; (800fe1c <_vfiprintf_r+0x254>)
 800fd76:	bb1b      	cbnz	r3, 800fdc0 <_vfiprintf_r+0x1f8>
 800fd78:	9b03      	ldr	r3, [sp, #12]
 800fd7a:	3307      	adds	r3, #7
 800fd7c:	f023 0307 	bic.w	r3, r3, #7
 800fd80:	3308      	adds	r3, #8
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd86:	443b      	add	r3, r7
 800fd88:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8a:	e767      	b.n	800fc5c <_vfiprintf_r+0x94>
 800fd8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd90:	460c      	mov	r4, r1
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7a5      	b.n	800fce2 <_vfiprintf_r+0x11a>
 800fd96:	2300      	movs	r3, #0
 800fd98:	3401      	adds	r4, #1
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	f04f 0c0a 	mov.w	ip, #10
 800fda2:	4620      	mov	r0, r4
 800fda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fda8:	3a30      	subs	r2, #48	; 0x30
 800fdaa:	2a09      	cmp	r2, #9
 800fdac:	d903      	bls.n	800fdb6 <_vfiprintf_r+0x1ee>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d0c5      	beq.n	800fd3e <_vfiprintf_r+0x176>
 800fdb2:	9105      	str	r1, [sp, #20]
 800fdb4:	e7c3      	b.n	800fd3e <_vfiprintf_r+0x176>
 800fdb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdba:	4604      	mov	r4, r0
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e7f0      	b.n	800fda2 <_vfiprintf_r+0x1da>
 800fdc0:	ab03      	add	r3, sp, #12
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	4b16      	ldr	r3, [pc, #88]	; (800fe20 <_vfiprintf_r+0x258>)
 800fdc8:	a904      	add	r1, sp, #16
 800fdca:	4630      	mov	r0, r6
 800fdcc:	f000 f8cc 	bl	800ff68 <_printf_float>
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	1c78      	adds	r0, r7, #1
 800fdd4:	d1d6      	bne.n	800fd84 <_vfiprintf_r+0x1bc>
 800fdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdd8:	07d9      	lsls	r1, r3, #31
 800fdda:	d405      	bmi.n	800fde8 <_vfiprintf_r+0x220>
 800fddc:	89ab      	ldrh	r3, [r5, #12]
 800fdde:	059a      	lsls	r2, r3, #22
 800fde0:	d402      	bmi.n	800fde8 <_vfiprintf_r+0x220>
 800fde2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde4:	f001 fe34 	bl	8011a50 <__retarget_lock_release_recursive>
 800fde8:	89ab      	ldrh	r3, [r5, #12]
 800fdea:	065b      	lsls	r3, r3, #25
 800fdec:	f53f af12 	bmi.w	800fc14 <_vfiprintf_r+0x4c>
 800fdf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdf2:	e711      	b.n	800fc18 <_vfiprintf_r+0x50>
 800fdf4:	ab03      	add	r3, sp, #12
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	462a      	mov	r2, r5
 800fdfa:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <_vfiprintf_r+0x258>)
 800fdfc:	a904      	add	r1, sp, #16
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f000 fb56 	bl	80104b0 <_printf_i>
 800fe04:	e7e4      	b.n	800fdd0 <_vfiprintf_r+0x208>
 800fe06:	bf00      	nop
 800fe08:	0802e75c 	.word	0x0802e75c
 800fe0c:	0802e77c 	.word	0x0802e77c
 800fe10:	0802e73c 	.word	0x0802e73c
 800fe14:	0802e564 	.word	0x0802e564
 800fe18:	0802e56e 	.word	0x0802e56e
 800fe1c:	0800ff69 	.word	0x0800ff69
 800fe20:	0800fba3 	.word	0x0800fba3
 800fe24:	0802e56a 	.word	0x0802e56a

0800fe28 <__cvt>:
 800fe28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2c:	ec55 4b10 	vmov	r4, r5, d0
 800fe30:	2d00      	cmp	r5, #0
 800fe32:	460e      	mov	r6, r1
 800fe34:	4619      	mov	r1, r3
 800fe36:	462b      	mov	r3, r5
 800fe38:	bfbb      	ittet	lt
 800fe3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fe3e:	461d      	movlt	r5, r3
 800fe40:	2300      	movge	r3, #0
 800fe42:	232d      	movlt	r3, #45	; 0x2d
 800fe44:	700b      	strb	r3, [r1, #0]
 800fe46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fe4c:	4691      	mov	r9, r2
 800fe4e:	f023 0820 	bic.w	r8, r3, #32
 800fe52:	bfbc      	itt	lt
 800fe54:	4622      	movlt	r2, r4
 800fe56:	4614      	movlt	r4, r2
 800fe58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe5c:	d005      	beq.n	800fe6a <__cvt+0x42>
 800fe5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fe62:	d100      	bne.n	800fe66 <__cvt+0x3e>
 800fe64:	3601      	adds	r6, #1
 800fe66:	2102      	movs	r1, #2
 800fe68:	e000      	b.n	800fe6c <__cvt+0x44>
 800fe6a:	2103      	movs	r1, #3
 800fe6c:	ab03      	add	r3, sp, #12
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	ab02      	add	r3, sp, #8
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	ec45 4b10 	vmov	d0, r4, r5
 800fe78:	4653      	mov	r3, sl
 800fe7a:	4632      	mov	r2, r6
 800fe7c:	f000 fe3c 	bl	8010af8 <_dtoa_r>
 800fe80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fe84:	4607      	mov	r7, r0
 800fe86:	d102      	bne.n	800fe8e <__cvt+0x66>
 800fe88:	f019 0f01 	tst.w	r9, #1
 800fe8c:	d022      	beq.n	800fed4 <__cvt+0xac>
 800fe8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe92:	eb07 0906 	add.w	r9, r7, r6
 800fe96:	d110      	bne.n	800feba <__cvt+0x92>
 800fe98:	783b      	ldrb	r3, [r7, #0]
 800fe9a:	2b30      	cmp	r3, #48	; 0x30
 800fe9c:	d10a      	bne.n	800feb4 <__cvt+0x8c>
 800fe9e:	2200      	movs	r2, #0
 800fea0:	2300      	movs	r3, #0
 800fea2:	4620      	mov	r0, r4
 800fea4:	4629      	mov	r1, r5
 800fea6:	f7f0 fe1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800feaa:	b918      	cbnz	r0, 800feb4 <__cvt+0x8c>
 800feac:	f1c6 0601 	rsb	r6, r6, #1
 800feb0:	f8ca 6000 	str.w	r6, [sl]
 800feb4:	f8da 3000 	ldr.w	r3, [sl]
 800feb8:	4499      	add	r9, r3
 800feba:	2200      	movs	r2, #0
 800febc:	2300      	movs	r3, #0
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 800fec6:	b108      	cbz	r0, 800fecc <__cvt+0xa4>
 800fec8:	f8cd 900c 	str.w	r9, [sp, #12]
 800fecc:	2230      	movs	r2, #48	; 0x30
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	454b      	cmp	r3, r9
 800fed2:	d307      	bcc.n	800fee4 <__cvt+0xbc>
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fed8:	1bdb      	subs	r3, r3, r7
 800feda:	4638      	mov	r0, r7
 800fedc:	6013      	str	r3, [r2, #0]
 800fede:	b004      	add	sp, #16
 800fee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee4:	1c59      	adds	r1, r3, #1
 800fee6:	9103      	str	r1, [sp, #12]
 800fee8:	701a      	strb	r2, [r3, #0]
 800feea:	e7f0      	b.n	800fece <__cvt+0xa6>

0800feec <__exponent>:
 800feec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800feee:	4603      	mov	r3, r0
 800fef0:	2900      	cmp	r1, #0
 800fef2:	bfb8      	it	lt
 800fef4:	4249      	neglt	r1, r1
 800fef6:	f803 2b02 	strb.w	r2, [r3], #2
 800fefa:	bfb4      	ite	lt
 800fefc:	222d      	movlt	r2, #45	; 0x2d
 800fefe:	222b      	movge	r2, #43	; 0x2b
 800ff00:	2909      	cmp	r1, #9
 800ff02:	7042      	strb	r2, [r0, #1]
 800ff04:	dd2a      	ble.n	800ff5c <__exponent+0x70>
 800ff06:	f10d 0407 	add.w	r4, sp, #7
 800ff0a:	46a4      	mov	ip, r4
 800ff0c:	270a      	movs	r7, #10
 800ff0e:	46a6      	mov	lr, r4
 800ff10:	460a      	mov	r2, r1
 800ff12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff16:	fb07 1516 	mls	r5, r7, r6, r1
 800ff1a:	3530      	adds	r5, #48	; 0x30
 800ff1c:	2a63      	cmp	r2, #99	; 0x63
 800ff1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ff26:	4631      	mov	r1, r6
 800ff28:	dcf1      	bgt.n	800ff0e <__exponent+0x22>
 800ff2a:	3130      	adds	r1, #48	; 0x30
 800ff2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ff30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ff34:	1c44      	adds	r4, r0, #1
 800ff36:	4629      	mov	r1, r5
 800ff38:	4561      	cmp	r1, ip
 800ff3a:	d30a      	bcc.n	800ff52 <__exponent+0x66>
 800ff3c:	f10d 0209 	add.w	r2, sp, #9
 800ff40:	eba2 020e 	sub.w	r2, r2, lr
 800ff44:	4565      	cmp	r5, ip
 800ff46:	bf88      	it	hi
 800ff48:	2200      	movhi	r2, #0
 800ff4a:	4413      	add	r3, r2
 800ff4c:	1a18      	subs	r0, r3, r0
 800ff4e:	b003      	add	sp, #12
 800ff50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff5a:	e7ed      	b.n	800ff38 <__exponent+0x4c>
 800ff5c:	2330      	movs	r3, #48	; 0x30
 800ff5e:	3130      	adds	r1, #48	; 0x30
 800ff60:	7083      	strb	r3, [r0, #2]
 800ff62:	70c1      	strb	r1, [r0, #3]
 800ff64:	1d03      	adds	r3, r0, #4
 800ff66:	e7f1      	b.n	800ff4c <__exponent+0x60>

0800ff68 <_printf_float>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	ed2d 8b02 	vpush	{d8}
 800ff70:	b08d      	sub	sp, #52	; 0x34
 800ff72:	460c      	mov	r4, r1
 800ff74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ff78:	4616      	mov	r6, r2
 800ff7a:	461f      	mov	r7, r3
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	f001 fd61 	bl	8011a44 <_localeconv_r>
 800ff82:	f8d0 a000 	ldr.w	sl, [r0]
 800ff86:	4650      	mov	r0, sl
 800ff88:	f7f0 f932 	bl	80001f0 <strlen>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	9305      	str	r3, [sp, #20]
 800ff94:	f8d8 3000 	ldr.w	r3, [r8]
 800ff98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ff9c:	3307      	adds	r3, #7
 800ff9e:	f023 0307 	bic.w	r3, r3, #7
 800ffa2:	f103 0208 	add.w	r2, r3, #8
 800ffa6:	f8c8 2000 	str.w	r2, [r8]
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ffb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ffb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffba:	9307      	str	r3, [sp, #28]
 800ffbc:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffc0:	ee08 0a10 	vmov	s16, r0
 800ffc4:	4b9f      	ldr	r3, [pc, #636]	; (8010244 <_printf_float+0x2dc>)
 800ffc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffca:	f04f 32ff 	mov.w	r2, #4294967295
 800ffce:	f7f0 fdbd 	bl	8000b4c <__aeabi_dcmpun>
 800ffd2:	bb88      	cbnz	r0, 8010038 <_printf_float+0xd0>
 800ffd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffd8:	4b9a      	ldr	r3, [pc, #616]	; (8010244 <_printf_float+0x2dc>)
 800ffda:	f04f 32ff 	mov.w	r2, #4294967295
 800ffde:	f7f0 fd97 	bl	8000b10 <__aeabi_dcmple>
 800ffe2:	bb48      	cbnz	r0, 8010038 <_printf_float+0xd0>
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	4640      	mov	r0, r8
 800ffea:	4649      	mov	r1, r9
 800ffec:	f7f0 fd86 	bl	8000afc <__aeabi_dcmplt>
 800fff0:	b110      	cbz	r0, 800fff8 <_printf_float+0x90>
 800fff2:	232d      	movs	r3, #45	; 0x2d
 800fff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fff8:	4b93      	ldr	r3, [pc, #588]	; (8010248 <_printf_float+0x2e0>)
 800fffa:	4894      	ldr	r0, [pc, #592]	; (801024c <_printf_float+0x2e4>)
 800fffc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010000:	bf94      	ite	ls
 8010002:	4698      	movls	r8, r3
 8010004:	4680      	movhi	r8, r0
 8010006:	2303      	movs	r3, #3
 8010008:	6123      	str	r3, [r4, #16]
 801000a:	9b05      	ldr	r3, [sp, #20]
 801000c:	f023 0204 	bic.w	r2, r3, #4
 8010010:	6022      	str	r2, [r4, #0]
 8010012:	f04f 0900 	mov.w	r9, #0
 8010016:	9700      	str	r7, [sp, #0]
 8010018:	4633      	mov	r3, r6
 801001a:	aa0b      	add	r2, sp, #44	; 0x2c
 801001c:	4621      	mov	r1, r4
 801001e:	4628      	mov	r0, r5
 8010020:	f000 f9d8 	bl	80103d4 <_printf_common>
 8010024:	3001      	adds	r0, #1
 8010026:	f040 8090 	bne.w	801014a <_printf_float+0x1e2>
 801002a:	f04f 30ff 	mov.w	r0, #4294967295
 801002e:	b00d      	add	sp, #52	; 0x34
 8010030:	ecbd 8b02 	vpop	{d8}
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010038:	4642      	mov	r2, r8
 801003a:	464b      	mov	r3, r9
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	f7f0 fd84 	bl	8000b4c <__aeabi_dcmpun>
 8010044:	b140      	cbz	r0, 8010058 <_printf_float+0xf0>
 8010046:	464b      	mov	r3, r9
 8010048:	2b00      	cmp	r3, #0
 801004a:	bfbc      	itt	lt
 801004c:	232d      	movlt	r3, #45	; 0x2d
 801004e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010052:	487f      	ldr	r0, [pc, #508]	; (8010250 <_printf_float+0x2e8>)
 8010054:	4b7f      	ldr	r3, [pc, #508]	; (8010254 <_printf_float+0x2ec>)
 8010056:	e7d1      	b.n	800fffc <_printf_float+0x94>
 8010058:	6863      	ldr	r3, [r4, #4]
 801005a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801005e:	9206      	str	r2, [sp, #24]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	d13f      	bne.n	80100e4 <_printf_float+0x17c>
 8010064:	2306      	movs	r3, #6
 8010066:	6063      	str	r3, [r4, #4]
 8010068:	9b05      	ldr	r3, [sp, #20]
 801006a:	6861      	ldr	r1, [r4, #4]
 801006c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010070:	2300      	movs	r3, #0
 8010072:	9303      	str	r3, [sp, #12]
 8010074:	ab0a      	add	r3, sp, #40	; 0x28
 8010076:	e9cd b301 	strd	fp, r3, [sp, #4]
 801007a:	ab09      	add	r3, sp, #36	; 0x24
 801007c:	ec49 8b10 	vmov	d0, r8, r9
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	6022      	str	r2, [r4, #0]
 8010084:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010088:	4628      	mov	r0, r5
 801008a:	f7ff fecd 	bl	800fe28 <__cvt>
 801008e:	9b06      	ldr	r3, [sp, #24]
 8010090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010092:	2b47      	cmp	r3, #71	; 0x47
 8010094:	4680      	mov	r8, r0
 8010096:	d108      	bne.n	80100aa <_printf_float+0x142>
 8010098:	1cc8      	adds	r0, r1, #3
 801009a:	db02      	blt.n	80100a2 <_printf_float+0x13a>
 801009c:	6863      	ldr	r3, [r4, #4]
 801009e:	4299      	cmp	r1, r3
 80100a0:	dd41      	ble.n	8010126 <_printf_float+0x1be>
 80100a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80100a6:	fa5f fb8b 	uxtb.w	fp, fp
 80100aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100ae:	d820      	bhi.n	80100f2 <_printf_float+0x18a>
 80100b0:	3901      	subs	r1, #1
 80100b2:	465a      	mov	r2, fp
 80100b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80100b8:	9109      	str	r1, [sp, #36]	; 0x24
 80100ba:	f7ff ff17 	bl	800feec <__exponent>
 80100be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100c0:	1813      	adds	r3, r2, r0
 80100c2:	2a01      	cmp	r2, #1
 80100c4:	4681      	mov	r9, r0
 80100c6:	6123      	str	r3, [r4, #16]
 80100c8:	dc02      	bgt.n	80100d0 <_printf_float+0x168>
 80100ca:	6822      	ldr	r2, [r4, #0]
 80100cc:	07d2      	lsls	r2, r2, #31
 80100ce:	d501      	bpl.n	80100d4 <_printf_float+0x16c>
 80100d0:	3301      	adds	r3, #1
 80100d2:	6123      	str	r3, [r4, #16]
 80100d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d09c      	beq.n	8010016 <_printf_float+0xae>
 80100dc:	232d      	movs	r3, #45	; 0x2d
 80100de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100e2:	e798      	b.n	8010016 <_printf_float+0xae>
 80100e4:	9a06      	ldr	r2, [sp, #24]
 80100e6:	2a47      	cmp	r2, #71	; 0x47
 80100e8:	d1be      	bne.n	8010068 <_printf_float+0x100>
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1bc      	bne.n	8010068 <_printf_float+0x100>
 80100ee:	2301      	movs	r3, #1
 80100f0:	e7b9      	b.n	8010066 <_printf_float+0xfe>
 80100f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80100f6:	d118      	bne.n	801012a <_printf_float+0x1c2>
 80100f8:	2900      	cmp	r1, #0
 80100fa:	6863      	ldr	r3, [r4, #4]
 80100fc:	dd0b      	ble.n	8010116 <_printf_float+0x1ae>
 80100fe:	6121      	str	r1, [r4, #16]
 8010100:	b913      	cbnz	r3, 8010108 <_printf_float+0x1a0>
 8010102:	6822      	ldr	r2, [r4, #0]
 8010104:	07d0      	lsls	r0, r2, #31
 8010106:	d502      	bpl.n	801010e <_printf_float+0x1a6>
 8010108:	3301      	adds	r3, #1
 801010a:	440b      	add	r3, r1
 801010c:	6123      	str	r3, [r4, #16]
 801010e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010110:	f04f 0900 	mov.w	r9, #0
 8010114:	e7de      	b.n	80100d4 <_printf_float+0x16c>
 8010116:	b913      	cbnz	r3, 801011e <_printf_float+0x1b6>
 8010118:	6822      	ldr	r2, [r4, #0]
 801011a:	07d2      	lsls	r2, r2, #31
 801011c:	d501      	bpl.n	8010122 <_printf_float+0x1ba>
 801011e:	3302      	adds	r3, #2
 8010120:	e7f4      	b.n	801010c <_printf_float+0x1a4>
 8010122:	2301      	movs	r3, #1
 8010124:	e7f2      	b.n	801010c <_printf_float+0x1a4>
 8010126:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801012a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801012c:	4299      	cmp	r1, r3
 801012e:	db05      	blt.n	801013c <_printf_float+0x1d4>
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	6121      	str	r1, [r4, #16]
 8010134:	07d8      	lsls	r0, r3, #31
 8010136:	d5ea      	bpl.n	801010e <_printf_float+0x1a6>
 8010138:	1c4b      	adds	r3, r1, #1
 801013a:	e7e7      	b.n	801010c <_printf_float+0x1a4>
 801013c:	2900      	cmp	r1, #0
 801013e:	bfd4      	ite	le
 8010140:	f1c1 0202 	rsble	r2, r1, #2
 8010144:	2201      	movgt	r2, #1
 8010146:	4413      	add	r3, r2
 8010148:	e7e0      	b.n	801010c <_printf_float+0x1a4>
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	055a      	lsls	r2, r3, #21
 801014e:	d407      	bmi.n	8010160 <_printf_float+0x1f8>
 8010150:	6923      	ldr	r3, [r4, #16]
 8010152:	4642      	mov	r2, r8
 8010154:	4631      	mov	r1, r6
 8010156:	4628      	mov	r0, r5
 8010158:	47b8      	blx	r7
 801015a:	3001      	adds	r0, #1
 801015c:	d12c      	bne.n	80101b8 <_printf_float+0x250>
 801015e:	e764      	b.n	801002a <_printf_float+0xc2>
 8010160:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010164:	f240 80e0 	bls.w	8010328 <_printf_float+0x3c0>
 8010168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801016c:	2200      	movs	r2, #0
 801016e:	2300      	movs	r3, #0
 8010170:	f7f0 fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 8010174:	2800      	cmp	r0, #0
 8010176:	d034      	beq.n	80101e2 <_printf_float+0x27a>
 8010178:	4a37      	ldr	r2, [pc, #220]	; (8010258 <_printf_float+0x2f0>)
 801017a:	2301      	movs	r3, #1
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	47b8      	blx	r7
 8010182:	3001      	adds	r0, #1
 8010184:	f43f af51 	beq.w	801002a <_printf_float+0xc2>
 8010188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801018c:	429a      	cmp	r2, r3
 801018e:	db02      	blt.n	8010196 <_printf_float+0x22e>
 8010190:	6823      	ldr	r3, [r4, #0]
 8010192:	07d8      	lsls	r0, r3, #31
 8010194:	d510      	bpl.n	80101b8 <_printf_float+0x250>
 8010196:	ee18 3a10 	vmov	r3, s16
 801019a:	4652      	mov	r2, sl
 801019c:	4631      	mov	r1, r6
 801019e:	4628      	mov	r0, r5
 80101a0:	47b8      	blx	r7
 80101a2:	3001      	adds	r0, #1
 80101a4:	f43f af41 	beq.w	801002a <_printf_float+0xc2>
 80101a8:	f04f 0800 	mov.w	r8, #0
 80101ac:	f104 091a 	add.w	r9, r4, #26
 80101b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b2:	3b01      	subs	r3, #1
 80101b4:	4543      	cmp	r3, r8
 80101b6:	dc09      	bgt.n	80101cc <_printf_float+0x264>
 80101b8:	6823      	ldr	r3, [r4, #0]
 80101ba:	079b      	lsls	r3, r3, #30
 80101bc:	f100 8105 	bmi.w	80103ca <_printf_float+0x462>
 80101c0:	68e0      	ldr	r0, [r4, #12]
 80101c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101c4:	4298      	cmp	r0, r3
 80101c6:	bfb8      	it	lt
 80101c8:	4618      	movlt	r0, r3
 80101ca:	e730      	b.n	801002e <_printf_float+0xc6>
 80101cc:	2301      	movs	r3, #1
 80101ce:	464a      	mov	r2, r9
 80101d0:	4631      	mov	r1, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	47b8      	blx	r7
 80101d6:	3001      	adds	r0, #1
 80101d8:	f43f af27 	beq.w	801002a <_printf_float+0xc2>
 80101dc:	f108 0801 	add.w	r8, r8, #1
 80101e0:	e7e6      	b.n	80101b0 <_printf_float+0x248>
 80101e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	dc39      	bgt.n	801025c <_printf_float+0x2f4>
 80101e8:	4a1b      	ldr	r2, [pc, #108]	; (8010258 <_printf_float+0x2f0>)
 80101ea:	2301      	movs	r3, #1
 80101ec:	4631      	mov	r1, r6
 80101ee:	4628      	mov	r0, r5
 80101f0:	47b8      	blx	r7
 80101f2:	3001      	adds	r0, #1
 80101f4:	f43f af19 	beq.w	801002a <_printf_float+0xc2>
 80101f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101fc:	4313      	orrs	r3, r2
 80101fe:	d102      	bne.n	8010206 <_printf_float+0x29e>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	07d9      	lsls	r1, r3, #31
 8010204:	d5d8      	bpl.n	80101b8 <_printf_float+0x250>
 8010206:	ee18 3a10 	vmov	r3, s16
 801020a:	4652      	mov	r2, sl
 801020c:	4631      	mov	r1, r6
 801020e:	4628      	mov	r0, r5
 8010210:	47b8      	blx	r7
 8010212:	3001      	adds	r0, #1
 8010214:	f43f af09 	beq.w	801002a <_printf_float+0xc2>
 8010218:	f04f 0900 	mov.w	r9, #0
 801021c:	f104 0a1a 	add.w	sl, r4, #26
 8010220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010222:	425b      	negs	r3, r3
 8010224:	454b      	cmp	r3, r9
 8010226:	dc01      	bgt.n	801022c <_printf_float+0x2c4>
 8010228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801022a:	e792      	b.n	8010152 <_printf_float+0x1ea>
 801022c:	2301      	movs	r3, #1
 801022e:	4652      	mov	r2, sl
 8010230:	4631      	mov	r1, r6
 8010232:	4628      	mov	r0, r5
 8010234:	47b8      	blx	r7
 8010236:	3001      	adds	r0, #1
 8010238:	f43f aef7 	beq.w	801002a <_printf_float+0xc2>
 801023c:	f109 0901 	add.w	r9, r9, #1
 8010240:	e7ee      	b.n	8010220 <_printf_float+0x2b8>
 8010242:	bf00      	nop
 8010244:	7fefffff 	.word	0x7fefffff
 8010248:	0802e575 	.word	0x0802e575
 801024c:	0802e579 	.word	0x0802e579
 8010250:	0802e581 	.word	0x0802e581
 8010254:	0802e57d 	.word	0x0802e57d
 8010258:	0802e585 	.word	0x0802e585
 801025c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801025e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010260:	429a      	cmp	r2, r3
 8010262:	bfa8      	it	ge
 8010264:	461a      	movge	r2, r3
 8010266:	2a00      	cmp	r2, #0
 8010268:	4691      	mov	r9, r2
 801026a:	dc37      	bgt.n	80102dc <_printf_float+0x374>
 801026c:	f04f 0b00 	mov.w	fp, #0
 8010270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010274:	f104 021a 	add.w	r2, r4, #26
 8010278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801027a:	9305      	str	r3, [sp, #20]
 801027c:	eba3 0309 	sub.w	r3, r3, r9
 8010280:	455b      	cmp	r3, fp
 8010282:	dc33      	bgt.n	80102ec <_printf_float+0x384>
 8010284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010288:	429a      	cmp	r2, r3
 801028a:	db3b      	blt.n	8010304 <_printf_float+0x39c>
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	07da      	lsls	r2, r3, #31
 8010290:	d438      	bmi.n	8010304 <_printf_float+0x39c>
 8010292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010294:	9a05      	ldr	r2, [sp, #20]
 8010296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010298:	1a9a      	subs	r2, r3, r2
 801029a:	eba3 0901 	sub.w	r9, r3, r1
 801029e:	4591      	cmp	r9, r2
 80102a0:	bfa8      	it	ge
 80102a2:	4691      	movge	r9, r2
 80102a4:	f1b9 0f00 	cmp.w	r9, #0
 80102a8:	dc35      	bgt.n	8010316 <_printf_float+0x3ae>
 80102aa:	f04f 0800 	mov.w	r8, #0
 80102ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102b2:	f104 0a1a 	add.w	sl, r4, #26
 80102b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	eba3 0309 	sub.w	r3, r3, r9
 80102c0:	4543      	cmp	r3, r8
 80102c2:	f77f af79 	ble.w	80101b8 <_printf_float+0x250>
 80102c6:	2301      	movs	r3, #1
 80102c8:	4652      	mov	r2, sl
 80102ca:	4631      	mov	r1, r6
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b8      	blx	r7
 80102d0:	3001      	adds	r0, #1
 80102d2:	f43f aeaa 	beq.w	801002a <_printf_float+0xc2>
 80102d6:	f108 0801 	add.w	r8, r8, #1
 80102da:	e7ec      	b.n	80102b6 <_printf_float+0x34e>
 80102dc:	4613      	mov	r3, r2
 80102de:	4631      	mov	r1, r6
 80102e0:	4642      	mov	r2, r8
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	d1c0      	bne.n	801026c <_printf_float+0x304>
 80102ea:	e69e      	b.n	801002a <_printf_float+0xc2>
 80102ec:	2301      	movs	r3, #1
 80102ee:	4631      	mov	r1, r6
 80102f0:	4628      	mov	r0, r5
 80102f2:	9205      	str	r2, [sp, #20]
 80102f4:	47b8      	blx	r7
 80102f6:	3001      	adds	r0, #1
 80102f8:	f43f ae97 	beq.w	801002a <_printf_float+0xc2>
 80102fc:	9a05      	ldr	r2, [sp, #20]
 80102fe:	f10b 0b01 	add.w	fp, fp, #1
 8010302:	e7b9      	b.n	8010278 <_printf_float+0x310>
 8010304:	ee18 3a10 	vmov	r3, s16
 8010308:	4652      	mov	r2, sl
 801030a:	4631      	mov	r1, r6
 801030c:	4628      	mov	r0, r5
 801030e:	47b8      	blx	r7
 8010310:	3001      	adds	r0, #1
 8010312:	d1be      	bne.n	8010292 <_printf_float+0x32a>
 8010314:	e689      	b.n	801002a <_printf_float+0xc2>
 8010316:	9a05      	ldr	r2, [sp, #20]
 8010318:	464b      	mov	r3, r9
 801031a:	4442      	add	r2, r8
 801031c:	4631      	mov	r1, r6
 801031e:	4628      	mov	r0, r5
 8010320:	47b8      	blx	r7
 8010322:	3001      	adds	r0, #1
 8010324:	d1c1      	bne.n	80102aa <_printf_float+0x342>
 8010326:	e680      	b.n	801002a <_printf_float+0xc2>
 8010328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801032a:	2a01      	cmp	r2, #1
 801032c:	dc01      	bgt.n	8010332 <_printf_float+0x3ca>
 801032e:	07db      	lsls	r3, r3, #31
 8010330:	d538      	bpl.n	80103a4 <_printf_float+0x43c>
 8010332:	2301      	movs	r3, #1
 8010334:	4642      	mov	r2, r8
 8010336:	4631      	mov	r1, r6
 8010338:	4628      	mov	r0, r5
 801033a:	47b8      	blx	r7
 801033c:	3001      	adds	r0, #1
 801033e:	f43f ae74 	beq.w	801002a <_printf_float+0xc2>
 8010342:	ee18 3a10 	vmov	r3, s16
 8010346:	4652      	mov	r2, sl
 8010348:	4631      	mov	r1, r6
 801034a:	4628      	mov	r0, r5
 801034c:	47b8      	blx	r7
 801034e:	3001      	adds	r0, #1
 8010350:	f43f ae6b 	beq.w	801002a <_printf_float+0xc2>
 8010354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010358:	2200      	movs	r2, #0
 801035a:	2300      	movs	r3, #0
 801035c:	f7f0 fbc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010360:	b9d8      	cbnz	r0, 801039a <_printf_float+0x432>
 8010362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010364:	f108 0201 	add.w	r2, r8, #1
 8010368:	3b01      	subs	r3, #1
 801036a:	4631      	mov	r1, r6
 801036c:	4628      	mov	r0, r5
 801036e:	47b8      	blx	r7
 8010370:	3001      	adds	r0, #1
 8010372:	d10e      	bne.n	8010392 <_printf_float+0x42a>
 8010374:	e659      	b.n	801002a <_printf_float+0xc2>
 8010376:	2301      	movs	r3, #1
 8010378:	4652      	mov	r2, sl
 801037a:	4631      	mov	r1, r6
 801037c:	4628      	mov	r0, r5
 801037e:	47b8      	blx	r7
 8010380:	3001      	adds	r0, #1
 8010382:	f43f ae52 	beq.w	801002a <_printf_float+0xc2>
 8010386:	f108 0801 	add.w	r8, r8, #1
 801038a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801038c:	3b01      	subs	r3, #1
 801038e:	4543      	cmp	r3, r8
 8010390:	dcf1      	bgt.n	8010376 <_printf_float+0x40e>
 8010392:	464b      	mov	r3, r9
 8010394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010398:	e6dc      	b.n	8010154 <_printf_float+0x1ec>
 801039a:	f04f 0800 	mov.w	r8, #0
 801039e:	f104 0a1a 	add.w	sl, r4, #26
 80103a2:	e7f2      	b.n	801038a <_printf_float+0x422>
 80103a4:	2301      	movs	r3, #1
 80103a6:	4642      	mov	r2, r8
 80103a8:	e7df      	b.n	801036a <_printf_float+0x402>
 80103aa:	2301      	movs	r3, #1
 80103ac:	464a      	mov	r2, r9
 80103ae:	4631      	mov	r1, r6
 80103b0:	4628      	mov	r0, r5
 80103b2:	47b8      	blx	r7
 80103b4:	3001      	adds	r0, #1
 80103b6:	f43f ae38 	beq.w	801002a <_printf_float+0xc2>
 80103ba:	f108 0801 	add.w	r8, r8, #1
 80103be:	68e3      	ldr	r3, [r4, #12]
 80103c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103c2:	1a5b      	subs	r3, r3, r1
 80103c4:	4543      	cmp	r3, r8
 80103c6:	dcf0      	bgt.n	80103aa <_printf_float+0x442>
 80103c8:	e6fa      	b.n	80101c0 <_printf_float+0x258>
 80103ca:	f04f 0800 	mov.w	r8, #0
 80103ce:	f104 0919 	add.w	r9, r4, #25
 80103d2:	e7f4      	b.n	80103be <_printf_float+0x456>

080103d4 <_printf_common>:
 80103d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d8:	4616      	mov	r6, r2
 80103da:	4699      	mov	r9, r3
 80103dc:	688a      	ldr	r2, [r1, #8]
 80103de:	690b      	ldr	r3, [r1, #16]
 80103e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103e4:	4293      	cmp	r3, r2
 80103e6:	bfb8      	it	lt
 80103e8:	4613      	movlt	r3, r2
 80103ea:	6033      	str	r3, [r6, #0]
 80103ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103f0:	4607      	mov	r7, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	b10a      	cbz	r2, 80103fa <_printf_common+0x26>
 80103f6:	3301      	adds	r3, #1
 80103f8:	6033      	str	r3, [r6, #0]
 80103fa:	6823      	ldr	r3, [r4, #0]
 80103fc:	0699      	lsls	r1, r3, #26
 80103fe:	bf42      	ittt	mi
 8010400:	6833      	ldrmi	r3, [r6, #0]
 8010402:	3302      	addmi	r3, #2
 8010404:	6033      	strmi	r3, [r6, #0]
 8010406:	6825      	ldr	r5, [r4, #0]
 8010408:	f015 0506 	ands.w	r5, r5, #6
 801040c:	d106      	bne.n	801041c <_printf_common+0x48>
 801040e:	f104 0a19 	add.w	sl, r4, #25
 8010412:	68e3      	ldr	r3, [r4, #12]
 8010414:	6832      	ldr	r2, [r6, #0]
 8010416:	1a9b      	subs	r3, r3, r2
 8010418:	42ab      	cmp	r3, r5
 801041a:	dc26      	bgt.n	801046a <_printf_common+0x96>
 801041c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010420:	1e13      	subs	r3, r2, #0
 8010422:	6822      	ldr	r2, [r4, #0]
 8010424:	bf18      	it	ne
 8010426:	2301      	movne	r3, #1
 8010428:	0692      	lsls	r2, r2, #26
 801042a:	d42b      	bmi.n	8010484 <_printf_common+0xb0>
 801042c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010430:	4649      	mov	r1, r9
 8010432:	4638      	mov	r0, r7
 8010434:	47c0      	blx	r8
 8010436:	3001      	adds	r0, #1
 8010438:	d01e      	beq.n	8010478 <_printf_common+0xa4>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	68e5      	ldr	r5, [r4, #12]
 801043e:	6832      	ldr	r2, [r6, #0]
 8010440:	f003 0306 	and.w	r3, r3, #6
 8010444:	2b04      	cmp	r3, #4
 8010446:	bf08      	it	eq
 8010448:	1aad      	subeq	r5, r5, r2
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	6922      	ldr	r2, [r4, #16]
 801044e:	bf0c      	ite	eq
 8010450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010454:	2500      	movne	r5, #0
 8010456:	4293      	cmp	r3, r2
 8010458:	bfc4      	itt	gt
 801045a:	1a9b      	subgt	r3, r3, r2
 801045c:	18ed      	addgt	r5, r5, r3
 801045e:	2600      	movs	r6, #0
 8010460:	341a      	adds	r4, #26
 8010462:	42b5      	cmp	r5, r6
 8010464:	d11a      	bne.n	801049c <_printf_common+0xc8>
 8010466:	2000      	movs	r0, #0
 8010468:	e008      	b.n	801047c <_printf_common+0xa8>
 801046a:	2301      	movs	r3, #1
 801046c:	4652      	mov	r2, sl
 801046e:	4649      	mov	r1, r9
 8010470:	4638      	mov	r0, r7
 8010472:	47c0      	blx	r8
 8010474:	3001      	adds	r0, #1
 8010476:	d103      	bne.n	8010480 <_printf_common+0xac>
 8010478:	f04f 30ff 	mov.w	r0, #4294967295
 801047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010480:	3501      	adds	r5, #1
 8010482:	e7c6      	b.n	8010412 <_printf_common+0x3e>
 8010484:	18e1      	adds	r1, r4, r3
 8010486:	1c5a      	adds	r2, r3, #1
 8010488:	2030      	movs	r0, #48	; 0x30
 801048a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801048e:	4422      	add	r2, r4
 8010490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010498:	3302      	adds	r3, #2
 801049a:	e7c7      	b.n	801042c <_printf_common+0x58>
 801049c:	2301      	movs	r3, #1
 801049e:	4622      	mov	r2, r4
 80104a0:	4649      	mov	r1, r9
 80104a2:	4638      	mov	r0, r7
 80104a4:	47c0      	blx	r8
 80104a6:	3001      	adds	r0, #1
 80104a8:	d0e6      	beq.n	8010478 <_printf_common+0xa4>
 80104aa:	3601      	adds	r6, #1
 80104ac:	e7d9      	b.n	8010462 <_printf_common+0x8e>
	...

080104b0 <_printf_i>:
 80104b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104b4:	7e0f      	ldrb	r7, [r1, #24]
 80104b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104b8:	2f78      	cmp	r7, #120	; 0x78
 80104ba:	4691      	mov	r9, r2
 80104bc:	4680      	mov	r8, r0
 80104be:	460c      	mov	r4, r1
 80104c0:	469a      	mov	sl, r3
 80104c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104c6:	d807      	bhi.n	80104d8 <_printf_i+0x28>
 80104c8:	2f62      	cmp	r7, #98	; 0x62
 80104ca:	d80a      	bhi.n	80104e2 <_printf_i+0x32>
 80104cc:	2f00      	cmp	r7, #0
 80104ce:	f000 80d8 	beq.w	8010682 <_printf_i+0x1d2>
 80104d2:	2f58      	cmp	r7, #88	; 0x58
 80104d4:	f000 80a3 	beq.w	801061e <_printf_i+0x16e>
 80104d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104e0:	e03a      	b.n	8010558 <_printf_i+0xa8>
 80104e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104e6:	2b15      	cmp	r3, #21
 80104e8:	d8f6      	bhi.n	80104d8 <_printf_i+0x28>
 80104ea:	a101      	add	r1, pc, #4	; (adr r1, 80104f0 <_printf_i+0x40>)
 80104ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104f0:	08010549 	.word	0x08010549
 80104f4:	0801055d 	.word	0x0801055d
 80104f8:	080104d9 	.word	0x080104d9
 80104fc:	080104d9 	.word	0x080104d9
 8010500:	080104d9 	.word	0x080104d9
 8010504:	080104d9 	.word	0x080104d9
 8010508:	0801055d 	.word	0x0801055d
 801050c:	080104d9 	.word	0x080104d9
 8010510:	080104d9 	.word	0x080104d9
 8010514:	080104d9 	.word	0x080104d9
 8010518:	080104d9 	.word	0x080104d9
 801051c:	08010669 	.word	0x08010669
 8010520:	0801058d 	.word	0x0801058d
 8010524:	0801064b 	.word	0x0801064b
 8010528:	080104d9 	.word	0x080104d9
 801052c:	080104d9 	.word	0x080104d9
 8010530:	0801068b 	.word	0x0801068b
 8010534:	080104d9 	.word	0x080104d9
 8010538:	0801058d 	.word	0x0801058d
 801053c:	080104d9 	.word	0x080104d9
 8010540:	080104d9 	.word	0x080104d9
 8010544:	08010653 	.word	0x08010653
 8010548:	682b      	ldr	r3, [r5, #0]
 801054a:	1d1a      	adds	r2, r3, #4
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	602a      	str	r2, [r5, #0]
 8010550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010558:	2301      	movs	r3, #1
 801055a:	e0a3      	b.n	80106a4 <_printf_i+0x1f4>
 801055c:	6820      	ldr	r0, [r4, #0]
 801055e:	6829      	ldr	r1, [r5, #0]
 8010560:	0606      	lsls	r6, r0, #24
 8010562:	f101 0304 	add.w	r3, r1, #4
 8010566:	d50a      	bpl.n	801057e <_printf_i+0xce>
 8010568:	680e      	ldr	r6, [r1, #0]
 801056a:	602b      	str	r3, [r5, #0]
 801056c:	2e00      	cmp	r6, #0
 801056e:	da03      	bge.n	8010578 <_printf_i+0xc8>
 8010570:	232d      	movs	r3, #45	; 0x2d
 8010572:	4276      	negs	r6, r6
 8010574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010578:	485e      	ldr	r0, [pc, #376]	; (80106f4 <_printf_i+0x244>)
 801057a:	230a      	movs	r3, #10
 801057c:	e019      	b.n	80105b2 <_printf_i+0x102>
 801057e:	680e      	ldr	r6, [r1, #0]
 8010580:	602b      	str	r3, [r5, #0]
 8010582:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010586:	bf18      	it	ne
 8010588:	b236      	sxthne	r6, r6
 801058a:	e7ef      	b.n	801056c <_printf_i+0xbc>
 801058c:	682b      	ldr	r3, [r5, #0]
 801058e:	6820      	ldr	r0, [r4, #0]
 8010590:	1d19      	adds	r1, r3, #4
 8010592:	6029      	str	r1, [r5, #0]
 8010594:	0601      	lsls	r1, r0, #24
 8010596:	d501      	bpl.n	801059c <_printf_i+0xec>
 8010598:	681e      	ldr	r6, [r3, #0]
 801059a:	e002      	b.n	80105a2 <_printf_i+0xf2>
 801059c:	0646      	lsls	r6, r0, #25
 801059e:	d5fb      	bpl.n	8010598 <_printf_i+0xe8>
 80105a0:	881e      	ldrh	r6, [r3, #0]
 80105a2:	4854      	ldr	r0, [pc, #336]	; (80106f4 <_printf_i+0x244>)
 80105a4:	2f6f      	cmp	r7, #111	; 0x6f
 80105a6:	bf0c      	ite	eq
 80105a8:	2308      	moveq	r3, #8
 80105aa:	230a      	movne	r3, #10
 80105ac:	2100      	movs	r1, #0
 80105ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105b2:	6865      	ldr	r5, [r4, #4]
 80105b4:	60a5      	str	r5, [r4, #8]
 80105b6:	2d00      	cmp	r5, #0
 80105b8:	bfa2      	ittt	ge
 80105ba:	6821      	ldrge	r1, [r4, #0]
 80105bc:	f021 0104 	bicge.w	r1, r1, #4
 80105c0:	6021      	strge	r1, [r4, #0]
 80105c2:	b90e      	cbnz	r6, 80105c8 <_printf_i+0x118>
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	d04d      	beq.n	8010664 <_printf_i+0x1b4>
 80105c8:	4615      	mov	r5, r2
 80105ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80105ce:	fb03 6711 	mls	r7, r3, r1, r6
 80105d2:	5dc7      	ldrb	r7, [r0, r7]
 80105d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80105d8:	4637      	mov	r7, r6
 80105da:	42bb      	cmp	r3, r7
 80105dc:	460e      	mov	r6, r1
 80105de:	d9f4      	bls.n	80105ca <_printf_i+0x11a>
 80105e0:	2b08      	cmp	r3, #8
 80105e2:	d10b      	bne.n	80105fc <_printf_i+0x14c>
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	07de      	lsls	r6, r3, #31
 80105e8:	d508      	bpl.n	80105fc <_printf_i+0x14c>
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	6861      	ldr	r1, [r4, #4]
 80105ee:	4299      	cmp	r1, r3
 80105f0:	bfde      	ittt	le
 80105f2:	2330      	movle	r3, #48	; 0x30
 80105f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80105f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80105fc:	1b52      	subs	r2, r2, r5
 80105fe:	6122      	str	r2, [r4, #16]
 8010600:	f8cd a000 	str.w	sl, [sp]
 8010604:	464b      	mov	r3, r9
 8010606:	aa03      	add	r2, sp, #12
 8010608:	4621      	mov	r1, r4
 801060a:	4640      	mov	r0, r8
 801060c:	f7ff fee2 	bl	80103d4 <_printf_common>
 8010610:	3001      	adds	r0, #1
 8010612:	d14c      	bne.n	80106ae <_printf_i+0x1fe>
 8010614:	f04f 30ff 	mov.w	r0, #4294967295
 8010618:	b004      	add	sp, #16
 801061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801061e:	4835      	ldr	r0, [pc, #212]	; (80106f4 <_printf_i+0x244>)
 8010620:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010624:	6829      	ldr	r1, [r5, #0]
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	f851 6b04 	ldr.w	r6, [r1], #4
 801062c:	6029      	str	r1, [r5, #0]
 801062e:	061d      	lsls	r5, r3, #24
 8010630:	d514      	bpl.n	801065c <_printf_i+0x1ac>
 8010632:	07df      	lsls	r7, r3, #31
 8010634:	bf44      	itt	mi
 8010636:	f043 0320 	orrmi.w	r3, r3, #32
 801063a:	6023      	strmi	r3, [r4, #0]
 801063c:	b91e      	cbnz	r6, 8010646 <_printf_i+0x196>
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	f023 0320 	bic.w	r3, r3, #32
 8010644:	6023      	str	r3, [r4, #0]
 8010646:	2310      	movs	r3, #16
 8010648:	e7b0      	b.n	80105ac <_printf_i+0xfc>
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	f043 0320 	orr.w	r3, r3, #32
 8010650:	6023      	str	r3, [r4, #0]
 8010652:	2378      	movs	r3, #120	; 0x78
 8010654:	4828      	ldr	r0, [pc, #160]	; (80106f8 <_printf_i+0x248>)
 8010656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801065a:	e7e3      	b.n	8010624 <_printf_i+0x174>
 801065c:	0659      	lsls	r1, r3, #25
 801065e:	bf48      	it	mi
 8010660:	b2b6      	uxthmi	r6, r6
 8010662:	e7e6      	b.n	8010632 <_printf_i+0x182>
 8010664:	4615      	mov	r5, r2
 8010666:	e7bb      	b.n	80105e0 <_printf_i+0x130>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	6826      	ldr	r6, [r4, #0]
 801066c:	6961      	ldr	r1, [r4, #20]
 801066e:	1d18      	adds	r0, r3, #4
 8010670:	6028      	str	r0, [r5, #0]
 8010672:	0635      	lsls	r5, r6, #24
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	d501      	bpl.n	801067c <_printf_i+0x1cc>
 8010678:	6019      	str	r1, [r3, #0]
 801067a:	e002      	b.n	8010682 <_printf_i+0x1d2>
 801067c:	0670      	lsls	r0, r6, #25
 801067e:	d5fb      	bpl.n	8010678 <_printf_i+0x1c8>
 8010680:	8019      	strh	r1, [r3, #0]
 8010682:	2300      	movs	r3, #0
 8010684:	6123      	str	r3, [r4, #16]
 8010686:	4615      	mov	r5, r2
 8010688:	e7ba      	b.n	8010600 <_printf_i+0x150>
 801068a:	682b      	ldr	r3, [r5, #0]
 801068c:	1d1a      	adds	r2, r3, #4
 801068e:	602a      	str	r2, [r5, #0]
 8010690:	681d      	ldr	r5, [r3, #0]
 8010692:	6862      	ldr	r2, [r4, #4]
 8010694:	2100      	movs	r1, #0
 8010696:	4628      	mov	r0, r5
 8010698:	f7ef fdb2 	bl	8000200 <memchr>
 801069c:	b108      	cbz	r0, 80106a2 <_printf_i+0x1f2>
 801069e:	1b40      	subs	r0, r0, r5
 80106a0:	6060      	str	r0, [r4, #4]
 80106a2:	6863      	ldr	r3, [r4, #4]
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	2300      	movs	r3, #0
 80106a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ac:	e7a8      	b.n	8010600 <_printf_i+0x150>
 80106ae:	6923      	ldr	r3, [r4, #16]
 80106b0:	462a      	mov	r2, r5
 80106b2:	4649      	mov	r1, r9
 80106b4:	4640      	mov	r0, r8
 80106b6:	47d0      	blx	sl
 80106b8:	3001      	adds	r0, #1
 80106ba:	d0ab      	beq.n	8010614 <_printf_i+0x164>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	079b      	lsls	r3, r3, #30
 80106c0:	d413      	bmi.n	80106ea <_printf_i+0x23a>
 80106c2:	68e0      	ldr	r0, [r4, #12]
 80106c4:	9b03      	ldr	r3, [sp, #12]
 80106c6:	4298      	cmp	r0, r3
 80106c8:	bfb8      	it	lt
 80106ca:	4618      	movlt	r0, r3
 80106cc:	e7a4      	b.n	8010618 <_printf_i+0x168>
 80106ce:	2301      	movs	r3, #1
 80106d0:	4632      	mov	r2, r6
 80106d2:	4649      	mov	r1, r9
 80106d4:	4640      	mov	r0, r8
 80106d6:	47d0      	blx	sl
 80106d8:	3001      	adds	r0, #1
 80106da:	d09b      	beq.n	8010614 <_printf_i+0x164>
 80106dc:	3501      	adds	r5, #1
 80106de:	68e3      	ldr	r3, [r4, #12]
 80106e0:	9903      	ldr	r1, [sp, #12]
 80106e2:	1a5b      	subs	r3, r3, r1
 80106e4:	42ab      	cmp	r3, r5
 80106e6:	dcf2      	bgt.n	80106ce <_printf_i+0x21e>
 80106e8:	e7eb      	b.n	80106c2 <_printf_i+0x212>
 80106ea:	2500      	movs	r5, #0
 80106ec:	f104 0619 	add.w	r6, r4, #25
 80106f0:	e7f5      	b.n	80106de <_printf_i+0x22e>
 80106f2:	bf00      	nop
 80106f4:	0802e587 	.word	0x0802e587
 80106f8:	0802e598 	.word	0x0802e598

080106fc <_sbrk_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d06      	ldr	r5, [pc, #24]	; (8010718 <_sbrk_r+0x1c>)
 8010700:	2300      	movs	r3, #0
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	602b      	str	r3, [r5, #0]
 8010708:	f7f4 fac2 	bl	8004c90 <_sbrk>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d102      	bne.n	8010716 <_sbrk_r+0x1a>
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	b103      	cbz	r3, 8010716 <_sbrk_r+0x1a>
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	bd38      	pop	{r3, r4, r5, pc}
 8010718:	20005c58 	.word	0x20005c58

0801071c <siprintf>:
 801071c:	b40e      	push	{r1, r2, r3}
 801071e:	b500      	push	{lr}
 8010720:	b09c      	sub	sp, #112	; 0x70
 8010722:	ab1d      	add	r3, sp, #116	; 0x74
 8010724:	9002      	str	r0, [sp, #8]
 8010726:	9006      	str	r0, [sp, #24]
 8010728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801072c:	4809      	ldr	r0, [pc, #36]	; (8010754 <siprintf+0x38>)
 801072e:	9107      	str	r1, [sp, #28]
 8010730:	9104      	str	r1, [sp, #16]
 8010732:	4909      	ldr	r1, [pc, #36]	; (8010758 <siprintf+0x3c>)
 8010734:	f853 2b04 	ldr.w	r2, [r3], #4
 8010738:	9105      	str	r1, [sp, #20]
 801073a:	6800      	ldr	r0, [r0, #0]
 801073c:	9301      	str	r3, [sp, #4]
 801073e:	a902      	add	r1, sp, #8
 8010740:	f001 fe5c 	bl	80123fc <_svfiprintf_r>
 8010744:	9b02      	ldr	r3, [sp, #8]
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
 801074a:	b01c      	add	sp, #112	; 0x70
 801074c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010750:	b003      	add	sp, #12
 8010752:	4770      	bx	lr
 8010754:	200000f8 	.word	0x200000f8
 8010758:	ffff0208 	.word	0xffff0208

0801075c <__sread>:
 801075c:	b510      	push	{r4, lr}
 801075e:	460c      	mov	r4, r1
 8010760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010764:	f001 ff4a 	bl	80125fc <_read_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	bfab      	itete	ge
 801076c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801076e:	89a3      	ldrhlt	r3, [r4, #12]
 8010770:	181b      	addge	r3, r3, r0
 8010772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010776:	bfac      	ite	ge
 8010778:	6563      	strge	r3, [r4, #84]	; 0x54
 801077a:	81a3      	strhlt	r3, [r4, #12]
 801077c:	bd10      	pop	{r4, pc}

0801077e <__swrite>:
 801077e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010782:	461f      	mov	r7, r3
 8010784:	898b      	ldrh	r3, [r1, #12]
 8010786:	05db      	lsls	r3, r3, #23
 8010788:	4605      	mov	r5, r0
 801078a:	460c      	mov	r4, r1
 801078c:	4616      	mov	r6, r2
 801078e:	d505      	bpl.n	801079c <__swrite+0x1e>
 8010790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010794:	2302      	movs	r3, #2
 8010796:	2200      	movs	r2, #0
 8010798:	f001 f95c 	bl	8011a54 <_lseek_r>
 801079c:	89a3      	ldrh	r3, [r4, #12]
 801079e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107a6:	81a3      	strh	r3, [r4, #12]
 80107a8:	4632      	mov	r2, r6
 80107aa:	463b      	mov	r3, r7
 80107ac:	4628      	mov	r0, r5
 80107ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107b2:	f000 b87b 	b.w	80108ac <_write_r>

080107b6 <__sseek>:
 80107b6:	b510      	push	{r4, lr}
 80107b8:	460c      	mov	r4, r1
 80107ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107be:	f001 f949 	bl	8011a54 <_lseek_r>
 80107c2:	1c43      	adds	r3, r0, #1
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	bf15      	itete	ne
 80107c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80107ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107d2:	81a3      	strheq	r3, [r4, #12]
 80107d4:	bf18      	it	ne
 80107d6:	81a3      	strhne	r3, [r4, #12]
 80107d8:	bd10      	pop	{r4, pc}

080107da <__sclose>:
 80107da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107de:	f000 b8ed 	b.w	80109bc <_close_r>

080107e2 <strncpy>:
 80107e2:	b510      	push	{r4, lr}
 80107e4:	3901      	subs	r1, #1
 80107e6:	4603      	mov	r3, r0
 80107e8:	b132      	cbz	r2, 80107f8 <strncpy+0x16>
 80107ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80107ee:	f803 4b01 	strb.w	r4, [r3], #1
 80107f2:	3a01      	subs	r2, #1
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	d1f7      	bne.n	80107e8 <strncpy+0x6>
 80107f8:	441a      	add	r2, r3
 80107fa:	2100      	movs	r1, #0
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d100      	bne.n	8010802 <strncpy+0x20>
 8010800:	bd10      	pop	{r4, pc}
 8010802:	f803 1b01 	strb.w	r1, [r3], #1
 8010806:	e7f9      	b.n	80107fc <strncpy+0x1a>

08010808 <__swbuf_r>:
 8010808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080a:	460e      	mov	r6, r1
 801080c:	4614      	mov	r4, r2
 801080e:	4605      	mov	r5, r0
 8010810:	b118      	cbz	r0, 801081a <__swbuf_r+0x12>
 8010812:	6983      	ldr	r3, [r0, #24]
 8010814:	b90b      	cbnz	r3, 801081a <__swbuf_r+0x12>
 8010816:	f001 f877 	bl	8011908 <__sinit>
 801081a:	4b21      	ldr	r3, [pc, #132]	; (80108a0 <__swbuf_r+0x98>)
 801081c:	429c      	cmp	r4, r3
 801081e:	d12b      	bne.n	8010878 <__swbuf_r+0x70>
 8010820:	686c      	ldr	r4, [r5, #4]
 8010822:	69a3      	ldr	r3, [r4, #24]
 8010824:	60a3      	str	r3, [r4, #8]
 8010826:	89a3      	ldrh	r3, [r4, #12]
 8010828:	071a      	lsls	r2, r3, #28
 801082a:	d52f      	bpl.n	801088c <__swbuf_r+0x84>
 801082c:	6923      	ldr	r3, [r4, #16]
 801082e:	b36b      	cbz	r3, 801088c <__swbuf_r+0x84>
 8010830:	6923      	ldr	r3, [r4, #16]
 8010832:	6820      	ldr	r0, [r4, #0]
 8010834:	1ac0      	subs	r0, r0, r3
 8010836:	6963      	ldr	r3, [r4, #20]
 8010838:	b2f6      	uxtb	r6, r6
 801083a:	4283      	cmp	r3, r0
 801083c:	4637      	mov	r7, r6
 801083e:	dc04      	bgt.n	801084a <__swbuf_r+0x42>
 8010840:	4621      	mov	r1, r4
 8010842:	4628      	mov	r0, r5
 8010844:	f000 ffcc 	bl	80117e0 <_fflush_r>
 8010848:	bb30      	cbnz	r0, 8010898 <__swbuf_r+0x90>
 801084a:	68a3      	ldr	r3, [r4, #8]
 801084c:	3b01      	subs	r3, #1
 801084e:	60a3      	str	r3, [r4, #8]
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	6022      	str	r2, [r4, #0]
 8010856:	701e      	strb	r6, [r3, #0]
 8010858:	6963      	ldr	r3, [r4, #20]
 801085a:	3001      	adds	r0, #1
 801085c:	4283      	cmp	r3, r0
 801085e:	d004      	beq.n	801086a <__swbuf_r+0x62>
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	07db      	lsls	r3, r3, #31
 8010864:	d506      	bpl.n	8010874 <__swbuf_r+0x6c>
 8010866:	2e0a      	cmp	r6, #10
 8010868:	d104      	bne.n	8010874 <__swbuf_r+0x6c>
 801086a:	4621      	mov	r1, r4
 801086c:	4628      	mov	r0, r5
 801086e:	f000 ffb7 	bl	80117e0 <_fflush_r>
 8010872:	b988      	cbnz	r0, 8010898 <__swbuf_r+0x90>
 8010874:	4638      	mov	r0, r7
 8010876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010878:	4b0a      	ldr	r3, [pc, #40]	; (80108a4 <__swbuf_r+0x9c>)
 801087a:	429c      	cmp	r4, r3
 801087c:	d101      	bne.n	8010882 <__swbuf_r+0x7a>
 801087e:	68ac      	ldr	r4, [r5, #8]
 8010880:	e7cf      	b.n	8010822 <__swbuf_r+0x1a>
 8010882:	4b09      	ldr	r3, [pc, #36]	; (80108a8 <__swbuf_r+0xa0>)
 8010884:	429c      	cmp	r4, r3
 8010886:	bf08      	it	eq
 8010888:	68ec      	ldreq	r4, [r5, #12]
 801088a:	e7ca      	b.n	8010822 <__swbuf_r+0x1a>
 801088c:	4621      	mov	r1, r4
 801088e:	4628      	mov	r0, r5
 8010890:	f000 f81e 	bl	80108d0 <__swsetup_r>
 8010894:	2800      	cmp	r0, #0
 8010896:	d0cb      	beq.n	8010830 <__swbuf_r+0x28>
 8010898:	f04f 37ff 	mov.w	r7, #4294967295
 801089c:	e7ea      	b.n	8010874 <__swbuf_r+0x6c>
 801089e:	bf00      	nop
 80108a0:	0802e75c 	.word	0x0802e75c
 80108a4:	0802e77c 	.word	0x0802e77c
 80108a8:	0802e73c 	.word	0x0802e73c

080108ac <_write_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d07      	ldr	r5, [pc, #28]	; (80108cc <_write_r+0x20>)
 80108b0:	4604      	mov	r4, r0
 80108b2:	4608      	mov	r0, r1
 80108b4:	4611      	mov	r1, r2
 80108b6:	2200      	movs	r2, #0
 80108b8:	602a      	str	r2, [r5, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	f7f4 f997 	bl	8004bee <_write>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_write_r+0x1e>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_write_r+0x1e>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	20005c58 	.word	0x20005c58

080108d0 <__swsetup_r>:
 80108d0:	4b32      	ldr	r3, [pc, #200]	; (801099c <__swsetup_r+0xcc>)
 80108d2:	b570      	push	{r4, r5, r6, lr}
 80108d4:	681d      	ldr	r5, [r3, #0]
 80108d6:	4606      	mov	r6, r0
 80108d8:	460c      	mov	r4, r1
 80108da:	b125      	cbz	r5, 80108e6 <__swsetup_r+0x16>
 80108dc:	69ab      	ldr	r3, [r5, #24]
 80108de:	b913      	cbnz	r3, 80108e6 <__swsetup_r+0x16>
 80108e0:	4628      	mov	r0, r5
 80108e2:	f001 f811 	bl	8011908 <__sinit>
 80108e6:	4b2e      	ldr	r3, [pc, #184]	; (80109a0 <__swsetup_r+0xd0>)
 80108e8:	429c      	cmp	r4, r3
 80108ea:	d10f      	bne.n	801090c <__swsetup_r+0x3c>
 80108ec:	686c      	ldr	r4, [r5, #4]
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108f4:	0719      	lsls	r1, r3, #28
 80108f6:	d42c      	bmi.n	8010952 <__swsetup_r+0x82>
 80108f8:	06dd      	lsls	r5, r3, #27
 80108fa:	d411      	bmi.n	8010920 <__swsetup_r+0x50>
 80108fc:	2309      	movs	r3, #9
 80108fe:	6033      	str	r3, [r6, #0]
 8010900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010904:	81a3      	strh	r3, [r4, #12]
 8010906:	f04f 30ff 	mov.w	r0, #4294967295
 801090a:	e03e      	b.n	801098a <__swsetup_r+0xba>
 801090c:	4b25      	ldr	r3, [pc, #148]	; (80109a4 <__swsetup_r+0xd4>)
 801090e:	429c      	cmp	r4, r3
 8010910:	d101      	bne.n	8010916 <__swsetup_r+0x46>
 8010912:	68ac      	ldr	r4, [r5, #8]
 8010914:	e7eb      	b.n	80108ee <__swsetup_r+0x1e>
 8010916:	4b24      	ldr	r3, [pc, #144]	; (80109a8 <__swsetup_r+0xd8>)
 8010918:	429c      	cmp	r4, r3
 801091a:	bf08      	it	eq
 801091c:	68ec      	ldreq	r4, [r5, #12]
 801091e:	e7e6      	b.n	80108ee <__swsetup_r+0x1e>
 8010920:	0758      	lsls	r0, r3, #29
 8010922:	d512      	bpl.n	801094a <__swsetup_r+0x7a>
 8010924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010926:	b141      	cbz	r1, 801093a <__swsetup_r+0x6a>
 8010928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801092c:	4299      	cmp	r1, r3
 801092e:	d002      	beq.n	8010936 <__swsetup_r+0x66>
 8010930:	4630      	mov	r0, r6
 8010932:	f7ff f83f 	bl	800f9b4 <_free_r>
 8010936:	2300      	movs	r3, #0
 8010938:	6363      	str	r3, [r4, #52]	; 0x34
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010940:	81a3      	strh	r3, [r4, #12]
 8010942:	2300      	movs	r3, #0
 8010944:	6063      	str	r3, [r4, #4]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	6023      	str	r3, [r4, #0]
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	f043 0308 	orr.w	r3, r3, #8
 8010950:	81a3      	strh	r3, [r4, #12]
 8010952:	6923      	ldr	r3, [r4, #16]
 8010954:	b94b      	cbnz	r3, 801096a <__swsetup_r+0x9a>
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801095c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010960:	d003      	beq.n	801096a <__swsetup_r+0x9a>
 8010962:	4621      	mov	r1, r4
 8010964:	4630      	mov	r0, r6
 8010966:	f001 f8ad 	bl	8011ac4 <__smakebuf_r>
 801096a:	89a0      	ldrh	r0, [r4, #12]
 801096c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010970:	f010 0301 	ands.w	r3, r0, #1
 8010974:	d00a      	beq.n	801098c <__swsetup_r+0xbc>
 8010976:	2300      	movs	r3, #0
 8010978:	60a3      	str	r3, [r4, #8]
 801097a:	6963      	ldr	r3, [r4, #20]
 801097c:	425b      	negs	r3, r3
 801097e:	61a3      	str	r3, [r4, #24]
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	b943      	cbnz	r3, 8010996 <__swsetup_r+0xc6>
 8010984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010988:	d1ba      	bne.n	8010900 <__swsetup_r+0x30>
 801098a:	bd70      	pop	{r4, r5, r6, pc}
 801098c:	0781      	lsls	r1, r0, #30
 801098e:	bf58      	it	pl
 8010990:	6963      	ldrpl	r3, [r4, #20]
 8010992:	60a3      	str	r3, [r4, #8]
 8010994:	e7f4      	b.n	8010980 <__swsetup_r+0xb0>
 8010996:	2000      	movs	r0, #0
 8010998:	e7f7      	b.n	801098a <__swsetup_r+0xba>
 801099a:	bf00      	nop
 801099c:	200000f8 	.word	0x200000f8
 80109a0:	0802e75c 	.word	0x0802e75c
 80109a4:	0802e77c 	.word	0x0802e77c
 80109a8:	0802e73c 	.word	0x0802e73c

080109ac <abort>:
 80109ac:	b508      	push	{r3, lr}
 80109ae:	2006      	movs	r0, #6
 80109b0:	f001 fe5e 	bl	8012670 <raise>
 80109b4:	2001      	movs	r0, #1
 80109b6:	f7f4 f8f3 	bl	8004ba0 <_exit>
	...

080109bc <_close_r>:
 80109bc:	b538      	push	{r3, r4, r5, lr}
 80109be:	4d06      	ldr	r5, [pc, #24]	; (80109d8 <_close_r+0x1c>)
 80109c0:	2300      	movs	r3, #0
 80109c2:	4604      	mov	r4, r0
 80109c4:	4608      	mov	r0, r1
 80109c6:	602b      	str	r3, [r5, #0]
 80109c8:	f7f4 f92d 	bl	8004c26 <_close>
 80109cc:	1c43      	adds	r3, r0, #1
 80109ce:	d102      	bne.n	80109d6 <_close_r+0x1a>
 80109d0:	682b      	ldr	r3, [r5, #0]
 80109d2:	b103      	cbz	r3, 80109d6 <_close_r+0x1a>
 80109d4:	6023      	str	r3, [r4, #0]
 80109d6:	bd38      	pop	{r3, r4, r5, pc}
 80109d8:	20005c58 	.word	0x20005c58

080109dc <quorem>:
 80109dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e0:	6903      	ldr	r3, [r0, #16]
 80109e2:	690c      	ldr	r4, [r1, #16]
 80109e4:	42a3      	cmp	r3, r4
 80109e6:	4607      	mov	r7, r0
 80109e8:	f2c0 8081 	blt.w	8010aee <quorem+0x112>
 80109ec:	3c01      	subs	r4, #1
 80109ee:	f101 0814 	add.w	r8, r1, #20
 80109f2:	f100 0514 	add.w	r5, r0, #20
 80109f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a04:	3301      	adds	r3, #1
 8010a06:	429a      	cmp	r2, r3
 8010a08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a14:	d331      	bcc.n	8010a7a <quorem+0x9e>
 8010a16:	f04f 0e00 	mov.w	lr, #0
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	46ac      	mov	ip, r5
 8010a1e:	46f2      	mov	sl, lr
 8010a20:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a24:	b293      	uxth	r3, r2
 8010a26:	fb06 e303 	mla	r3, r6, r3, lr
 8010a2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	ebaa 0303 	sub.w	r3, sl, r3
 8010a34:	f8dc a000 	ldr.w	sl, [ip]
 8010a38:	0c12      	lsrs	r2, r2, #16
 8010a3a:	fa13 f38a 	uxtah	r3, r3, sl
 8010a3e:	fb06 e202 	mla	r2, r6, r2, lr
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a4a:	b292      	uxth	r2, r2
 8010a4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a54:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a58:	4581      	cmp	r9, r0
 8010a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a5e:	f84c 3b04 	str.w	r3, [ip], #4
 8010a62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a66:	d2db      	bcs.n	8010a20 <quorem+0x44>
 8010a68:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a6c:	b92b      	cbnz	r3, 8010a7a <quorem+0x9e>
 8010a6e:	9b01      	ldr	r3, [sp, #4]
 8010a70:	3b04      	subs	r3, #4
 8010a72:	429d      	cmp	r5, r3
 8010a74:	461a      	mov	r2, r3
 8010a76:	d32e      	bcc.n	8010ad6 <quorem+0xfa>
 8010a78:	613c      	str	r4, [r7, #16]
 8010a7a:	4638      	mov	r0, r7
 8010a7c:	f001 fb1c 	bl	80120b8 <__mcmp>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	db24      	blt.n	8010ace <quorem+0xf2>
 8010a84:	3601      	adds	r6, #1
 8010a86:	4628      	mov	r0, r5
 8010a88:	f04f 0c00 	mov.w	ip, #0
 8010a8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a90:	f8d0 e000 	ldr.w	lr, [r0]
 8010a94:	b293      	uxth	r3, r2
 8010a96:	ebac 0303 	sub.w	r3, ip, r3
 8010a9a:	0c12      	lsrs	r2, r2, #16
 8010a9c:	fa13 f38e 	uxtah	r3, r3, lr
 8010aa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010aae:	45c1      	cmp	r9, r8
 8010ab0:	f840 3b04 	str.w	r3, [r0], #4
 8010ab4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010ab8:	d2e8      	bcs.n	8010a8c <quorem+0xb0>
 8010aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ac2:	b922      	cbnz	r2, 8010ace <quorem+0xf2>
 8010ac4:	3b04      	subs	r3, #4
 8010ac6:	429d      	cmp	r5, r3
 8010ac8:	461a      	mov	r2, r3
 8010aca:	d30a      	bcc.n	8010ae2 <quorem+0x106>
 8010acc:	613c      	str	r4, [r7, #16]
 8010ace:	4630      	mov	r0, r6
 8010ad0:	b003      	add	sp, #12
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	3b04      	subs	r3, #4
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d1cc      	bne.n	8010a78 <quorem+0x9c>
 8010ade:	3c01      	subs	r4, #1
 8010ae0:	e7c7      	b.n	8010a72 <quorem+0x96>
 8010ae2:	6812      	ldr	r2, [r2, #0]
 8010ae4:	3b04      	subs	r3, #4
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	d1f0      	bne.n	8010acc <quorem+0xf0>
 8010aea:	3c01      	subs	r4, #1
 8010aec:	e7eb      	b.n	8010ac6 <quorem+0xea>
 8010aee:	2000      	movs	r0, #0
 8010af0:	e7ee      	b.n	8010ad0 <quorem+0xf4>
 8010af2:	0000      	movs	r0, r0
 8010af4:	0000      	movs	r0, r0
	...

08010af8 <_dtoa_r>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	ed2d 8b04 	vpush	{d8-d9}
 8010b00:	ec57 6b10 	vmov	r6, r7, d0
 8010b04:	b093      	sub	sp, #76	; 0x4c
 8010b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b0c:	9106      	str	r1, [sp, #24]
 8010b0e:	ee10 aa10 	vmov	sl, s0
 8010b12:	4604      	mov	r4, r0
 8010b14:	9209      	str	r2, [sp, #36]	; 0x24
 8010b16:	930c      	str	r3, [sp, #48]	; 0x30
 8010b18:	46bb      	mov	fp, r7
 8010b1a:	b975      	cbnz	r5, 8010b3a <_dtoa_r+0x42>
 8010b1c:	2010      	movs	r0, #16
 8010b1e:	f7fe ff23 	bl	800f968 <malloc>
 8010b22:	4602      	mov	r2, r0
 8010b24:	6260      	str	r0, [r4, #36]	; 0x24
 8010b26:	b920      	cbnz	r0, 8010b32 <_dtoa_r+0x3a>
 8010b28:	4ba7      	ldr	r3, [pc, #668]	; (8010dc8 <_dtoa_r+0x2d0>)
 8010b2a:	21ea      	movs	r1, #234	; 0xea
 8010b2c:	48a7      	ldr	r0, [pc, #668]	; (8010dcc <_dtoa_r+0x2d4>)
 8010b2e:	f7fe fec1 	bl	800f8b4 <__assert_func>
 8010b32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b36:	6005      	str	r5, [r0, #0]
 8010b38:	60c5      	str	r5, [r0, #12]
 8010b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b3c:	6819      	ldr	r1, [r3, #0]
 8010b3e:	b151      	cbz	r1, 8010b56 <_dtoa_r+0x5e>
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	604a      	str	r2, [r1, #4]
 8010b44:	2301      	movs	r3, #1
 8010b46:	4093      	lsls	r3, r2
 8010b48:	608b      	str	r3, [r1, #8]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f001 f872 	bl	8011c34 <_Bfree>
 8010b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b52:	2200      	movs	r2, #0
 8010b54:	601a      	str	r2, [r3, #0]
 8010b56:	1e3b      	subs	r3, r7, #0
 8010b58:	bfaa      	itet	ge
 8010b5a:	2300      	movge	r3, #0
 8010b5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010b60:	f8c8 3000 	strge.w	r3, [r8]
 8010b64:	4b9a      	ldr	r3, [pc, #616]	; (8010dd0 <_dtoa_r+0x2d8>)
 8010b66:	bfbc      	itt	lt
 8010b68:	2201      	movlt	r2, #1
 8010b6a:	f8c8 2000 	strlt.w	r2, [r8]
 8010b6e:	ea33 030b 	bics.w	r3, r3, fp
 8010b72:	d11b      	bne.n	8010bac <_dtoa_r+0xb4>
 8010b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b76:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b7a:	6013      	str	r3, [r2, #0]
 8010b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b80:	4333      	orrs	r3, r6
 8010b82:	f000 8592 	beq.w	80116aa <_dtoa_r+0xbb2>
 8010b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b88:	b963      	cbnz	r3, 8010ba4 <_dtoa_r+0xac>
 8010b8a:	4b92      	ldr	r3, [pc, #584]	; (8010dd4 <_dtoa_r+0x2dc>)
 8010b8c:	e022      	b.n	8010bd4 <_dtoa_r+0xdc>
 8010b8e:	4b92      	ldr	r3, [pc, #584]	; (8010dd8 <_dtoa_r+0x2e0>)
 8010b90:	9301      	str	r3, [sp, #4]
 8010b92:	3308      	adds	r3, #8
 8010b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b96:	6013      	str	r3, [r2, #0]
 8010b98:	9801      	ldr	r0, [sp, #4]
 8010b9a:	b013      	add	sp, #76	; 0x4c
 8010b9c:	ecbd 8b04 	vpop	{d8-d9}
 8010ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba4:	4b8b      	ldr	r3, [pc, #556]	; (8010dd4 <_dtoa_r+0x2dc>)
 8010ba6:	9301      	str	r3, [sp, #4]
 8010ba8:	3303      	adds	r3, #3
 8010baa:	e7f3      	b.n	8010b94 <_dtoa_r+0x9c>
 8010bac:	2200      	movs	r2, #0
 8010bae:	2300      	movs	r3, #0
 8010bb0:	4650      	mov	r0, sl
 8010bb2:	4659      	mov	r1, fp
 8010bb4:	f7ef ff98 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bb8:	ec4b ab19 	vmov	d9, sl, fp
 8010bbc:	4680      	mov	r8, r0
 8010bbe:	b158      	cbz	r0, 8010bd8 <_dtoa_r+0xe0>
 8010bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	6013      	str	r3, [r2, #0]
 8010bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 856b 	beq.w	80116a4 <_dtoa_r+0xbac>
 8010bce:	4883      	ldr	r0, [pc, #524]	; (8010ddc <_dtoa_r+0x2e4>)
 8010bd0:	6018      	str	r0, [r3, #0]
 8010bd2:	1e43      	subs	r3, r0, #1
 8010bd4:	9301      	str	r3, [sp, #4]
 8010bd6:	e7df      	b.n	8010b98 <_dtoa_r+0xa0>
 8010bd8:	ec4b ab10 	vmov	d0, sl, fp
 8010bdc:	aa10      	add	r2, sp, #64	; 0x40
 8010bde:	a911      	add	r1, sp, #68	; 0x44
 8010be0:	4620      	mov	r0, r4
 8010be2:	f001 fb0f 	bl	8012204 <__d2b>
 8010be6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010bea:	ee08 0a10 	vmov	s16, r0
 8010bee:	2d00      	cmp	r5, #0
 8010bf0:	f000 8084 	beq.w	8010cfc <_dtoa_r+0x204>
 8010bf4:	ee19 3a90 	vmov	r3, s19
 8010bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c00:	4656      	mov	r6, sl
 8010c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010c0e:	4b74      	ldr	r3, [pc, #464]	; (8010de0 <_dtoa_r+0x2e8>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	4630      	mov	r0, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f7ef fb47 	bl	80002a8 <__aeabi_dsub>
 8010c1a:	a365      	add	r3, pc, #404	; (adr r3, 8010db0 <_dtoa_r+0x2b8>)
 8010c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c20:	f7ef fcfa 	bl	8000618 <__aeabi_dmul>
 8010c24:	a364      	add	r3, pc, #400	; (adr r3, 8010db8 <_dtoa_r+0x2c0>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fb3f 	bl	80002ac <__adddf3>
 8010c2e:	4606      	mov	r6, r0
 8010c30:	4628      	mov	r0, r5
 8010c32:	460f      	mov	r7, r1
 8010c34:	f7ef fc86 	bl	8000544 <__aeabi_i2d>
 8010c38:	a361      	add	r3, pc, #388	; (adr r3, 8010dc0 <_dtoa_r+0x2c8>)
 8010c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3e:	f7ef fceb 	bl	8000618 <__aeabi_dmul>
 8010c42:	4602      	mov	r2, r0
 8010c44:	460b      	mov	r3, r1
 8010c46:	4630      	mov	r0, r6
 8010c48:	4639      	mov	r1, r7
 8010c4a:	f7ef fb2f 	bl	80002ac <__adddf3>
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460f      	mov	r7, r1
 8010c52:	f7ef ff91 	bl	8000b78 <__aeabi_d2iz>
 8010c56:	2200      	movs	r2, #0
 8010c58:	9000      	str	r0, [sp, #0]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	4639      	mov	r1, r7
 8010c60:	f7ef ff4c 	bl	8000afc <__aeabi_dcmplt>
 8010c64:	b150      	cbz	r0, 8010c7c <_dtoa_r+0x184>
 8010c66:	9800      	ldr	r0, [sp, #0]
 8010c68:	f7ef fc6c 	bl	8000544 <__aeabi_i2d>
 8010c6c:	4632      	mov	r2, r6
 8010c6e:	463b      	mov	r3, r7
 8010c70:	f7ef ff3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c74:	b910      	cbnz	r0, 8010c7c <_dtoa_r+0x184>
 8010c76:	9b00      	ldr	r3, [sp, #0]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	2b16      	cmp	r3, #22
 8010c80:	d85a      	bhi.n	8010d38 <_dtoa_r+0x240>
 8010c82:	9a00      	ldr	r2, [sp, #0]
 8010c84:	4b57      	ldr	r3, [pc, #348]	; (8010de4 <_dtoa_r+0x2ec>)
 8010c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8e:	ec51 0b19 	vmov	r0, r1, d9
 8010c92:	f7ef ff33 	bl	8000afc <__aeabi_dcmplt>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d050      	beq.n	8010d3c <_dtoa_r+0x244>
 8010c9a:	9b00      	ldr	r3, [sp, #0]
 8010c9c:	3b01      	subs	r3, #1
 8010c9e:	9300      	str	r3, [sp, #0]
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ca6:	1b5d      	subs	r5, r3, r5
 8010ca8:	1e6b      	subs	r3, r5, #1
 8010caa:	9305      	str	r3, [sp, #20]
 8010cac:	bf45      	ittet	mi
 8010cae:	f1c5 0301 	rsbmi	r3, r5, #1
 8010cb2:	9304      	strmi	r3, [sp, #16]
 8010cb4:	2300      	movpl	r3, #0
 8010cb6:	2300      	movmi	r3, #0
 8010cb8:	bf4c      	ite	mi
 8010cba:	9305      	strmi	r3, [sp, #20]
 8010cbc:	9304      	strpl	r3, [sp, #16]
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	db3d      	blt.n	8010d40 <_dtoa_r+0x248>
 8010cc4:	9b05      	ldr	r3, [sp, #20]
 8010cc6:	9a00      	ldr	r2, [sp, #0]
 8010cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8010cca:	4413      	add	r3, r2
 8010ccc:	9305      	str	r3, [sp, #20]
 8010cce:	2300      	movs	r3, #0
 8010cd0:	9307      	str	r3, [sp, #28]
 8010cd2:	9b06      	ldr	r3, [sp, #24]
 8010cd4:	2b09      	cmp	r3, #9
 8010cd6:	f200 8089 	bhi.w	8010dec <_dtoa_r+0x2f4>
 8010cda:	2b05      	cmp	r3, #5
 8010cdc:	bfc4      	itt	gt
 8010cde:	3b04      	subgt	r3, #4
 8010ce0:	9306      	strgt	r3, [sp, #24]
 8010ce2:	9b06      	ldr	r3, [sp, #24]
 8010ce4:	f1a3 0302 	sub.w	r3, r3, #2
 8010ce8:	bfcc      	ite	gt
 8010cea:	2500      	movgt	r5, #0
 8010cec:	2501      	movle	r5, #1
 8010cee:	2b03      	cmp	r3, #3
 8010cf0:	f200 8087 	bhi.w	8010e02 <_dtoa_r+0x30a>
 8010cf4:	e8df f003 	tbb	[pc, r3]
 8010cf8:	59383a2d 	.word	0x59383a2d
 8010cfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d00:	441d      	add	r5, r3
 8010d02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d06:	2b20      	cmp	r3, #32
 8010d08:	bfc1      	itttt	gt
 8010d0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d12:	fa0b f303 	lslgt.w	r3, fp, r3
 8010d16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d1a:	bfda      	itte	le
 8010d1c:	f1c3 0320 	rsble	r3, r3, #32
 8010d20:	fa06 f003 	lslle.w	r0, r6, r3
 8010d24:	4318      	orrgt	r0, r3
 8010d26:	f7ef fbfd 	bl	8000524 <__aeabi_ui2d>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4606      	mov	r6, r0
 8010d2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d32:	3d01      	subs	r5, #1
 8010d34:	930e      	str	r3, [sp, #56]	; 0x38
 8010d36:	e76a      	b.n	8010c0e <_dtoa_r+0x116>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e7b2      	b.n	8010ca2 <_dtoa_r+0x1aa>
 8010d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d3e:	e7b1      	b.n	8010ca4 <_dtoa_r+0x1ac>
 8010d40:	9b04      	ldr	r3, [sp, #16]
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	1a9b      	subs	r3, r3, r2
 8010d46:	9304      	str	r3, [sp, #16]
 8010d48:	4253      	negs	r3, r2
 8010d4a:	9307      	str	r3, [sp, #28]
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d50:	e7bf      	b.n	8010cd2 <_dtoa_r+0x1da>
 8010d52:	2300      	movs	r3, #0
 8010d54:	9308      	str	r3, [sp, #32]
 8010d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	dc55      	bgt.n	8010e08 <_dtoa_r+0x310>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d62:	461a      	mov	r2, r3
 8010d64:	9209      	str	r2, [sp, #36]	; 0x24
 8010d66:	e00c      	b.n	8010d82 <_dtoa_r+0x28a>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e7f3      	b.n	8010d54 <_dtoa_r+0x25c>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d70:	9308      	str	r3, [sp, #32]
 8010d72:	9b00      	ldr	r3, [sp, #0]
 8010d74:	4413      	add	r3, r2
 8010d76:	9302      	str	r3, [sp, #8]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	9303      	str	r3, [sp, #12]
 8010d7e:	bfb8      	it	lt
 8010d80:	2301      	movlt	r3, #1
 8010d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d84:	2200      	movs	r2, #0
 8010d86:	6042      	str	r2, [r0, #4]
 8010d88:	2204      	movs	r2, #4
 8010d8a:	f102 0614 	add.w	r6, r2, #20
 8010d8e:	429e      	cmp	r6, r3
 8010d90:	6841      	ldr	r1, [r0, #4]
 8010d92:	d93d      	bls.n	8010e10 <_dtoa_r+0x318>
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 ff0d 	bl	8011bb4 <_Balloc>
 8010d9a:	9001      	str	r0, [sp, #4]
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d13b      	bne.n	8010e18 <_dtoa_r+0x320>
 8010da0:	4b11      	ldr	r3, [pc, #68]	; (8010de8 <_dtoa_r+0x2f0>)
 8010da2:	4602      	mov	r2, r0
 8010da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010da8:	e6c0      	b.n	8010b2c <_dtoa_r+0x34>
 8010daa:	2301      	movs	r3, #1
 8010dac:	e7df      	b.n	8010d6e <_dtoa_r+0x276>
 8010dae:	bf00      	nop
 8010db0:	636f4361 	.word	0x636f4361
 8010db4:	3fd287a7 	.word	0x3fd287a7
 8010db8:	8b60c8b3 	.word	0x8b60c8b3
 8010dbc:	3fc68a28 	.word	0x3fc68a28
 8010dc0:	509f79fb 	.word	0x509f79fb
 8010dc4:	3fd34413 	.word	0x3fd34413
 8010dc8:	0802e6b7 	.word	0x0802e6b7
 8010dcc:	0802e6ce 	.word	0x0802e6ce
 8010dd0:	7ff00000 	.word	0x7ff00000
 8010dd4:	0802e6b3 	.word	0x0802e6b3
 8010dd8:	0802e6aa 	.word	0x0802e6aa
 8010ddc:	0802e586 	.word	0x0802e586
 8010de0:	3ff80000 	.word	0x3ff80000
 8010de4:	0802e830 	.word	0x0802e830
 8010de8:	0802e729 	.word	0x0802e729
 8010dec:	2501      	movs	r5, #1
 8010dee:	2300      	movs	r3, #0
 8010df0:	9306      	str	r3, [sp, #24]
 8010df2:	9508      	str	r5, [sp, #32]
 8010df4:	f04f 33ff 	mov.w	r3, #4294967295
 8010df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	2312      	movs	r3, #18
 8010e00:	e7b0      	b.n	8010d64 <_dtoa_r+0x26c>
 8010e02:	2301      	movs	r3, #1
 8010e04:	9308      	str	r3, [sp, #32]
 8010e06:	e7f5      	b.n	8010df4 <_dtoa_r+0x2fc>
 8010e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e0e:	e7b8      	b.n	8010d82 <_dtoa_r+0x28a>
 8010e10:	3101      	adds	r1, #1
 8010e12:	6041      	str	r1, [r0, #4]
 8010e14:	0052      	lsls	r2, r2, #1
 8010e16:	e7b8      	b.n	8010d8a <_dtoa_r+0x292>
 8010e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e1a:	9a01      	ldr	r2, [sp, #4]
 8010e1c:	601a      	str	r2, [r3, #0]
 8010e1e:	9b03      	ldr	r3, [sp, #12]
 8010e20:	2b0e      	cmp	r3, #14
 8010e22:	f200 809d 	bhi.w	8010f60 <_dtoa_r+0x468>
 8010e26:	2d00      	cmp	r5, #0
 8010e28:	f000 809a 	beq.w	8010f60 <_dtoa_r+0x468>
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	dd32      	ble.n	8010e98 <_dtoa_r+0x3a0>
 8010e32:	4ab7      	ldr	r2, [pc, #732]	; (8011110 <_dtoa_r+0x618>)
 8010e34:	f003 030f 	and.w	r3, r3, #15
 8010e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e40:	9b00      	ldr	r3, [sp, #0]
 8010e42:	05d8      	lsls	r0, r3, #23
 8010e44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e48:	d516      	bpl.n	8010e78 <_dtoa_r+0x380>
 8010e4a:	4bb2      	ldr	r3, [pc, #712]	; (8011114 <_dtoa_r+0x61c>)
 8010e4c:	ec51 0b19 	vmov	r0, r1, d9
 8010e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e54:	f7ef fd0a 	bl	800086c <__aeabi_ddiv>
 8010e58:	f007 070f 	and.w	r7, r7, #15
 8010e5c:	4682      	mov	sl, r0
 8010e5e:	468b      	mov	fp, r1
 8010e60:	2503      	movs	r5, #3
 8010e62:	4eac      	ldr	r6, [pc, #688]	; (8011114 <_dtoa_r+0x61c>)
 8010e64:	b957      	cbnz	r7, 8010e7c <_dtoa_r+0x384>
 8010e66:	4642      	mov	r2, r8
 8010e68:	464b      	mov	r3, r9
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	4659      	mov	r1, fp
 8010e6e:	f7ef fcfd 	bl	800086c <__aeabi_ddiv>
 8010e72:	4682      	mov	sl, r0
 8010e74:	468b      	mov	fp, r1
 8010e76:	e028      	b.n	8010eca <_dtoa_r+0x3d2>
 8010e78:	2502      	movs	r5, #2
 8010e7a:	e7f2      	b.n	8010e62 <_dtoa_r+0x36a>
 8010e7c:	07f9      	lsls	r1, r7, #31
 8010e7e:	d508      	bpl.n	8010e92 <_dtoa_r+0x39a>
 8010e80:	4640      	mov	r0, r8
 8010e82:	4649      	mov	r1, r9
 8010e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e88:	f7ef fbc6 	bl	8000618 <__aeabi_dmul>
 8010e8c:	3501      	adds	r5, #1
 8010e8e:	4680      	mov	r8, r0
 8010e90:	4689      	mov	r9, r1
 8010e92:	107f      	asrs	r7, r7, #1
 8010e94:	3608      	adds	r6, #8
 8010e96:	e7e5      	b.n	8010e64 <_dtoa_r+0x36c>
 8010e98:	f000 809b 	beq.w	8010fd2 <_dtoa_r+0x4da>
 8010e9c:	9b00      	ldr	r3, [sp, #0]
 8010e9e:	4f9d      	ldr	r7, [pc, #628]	; (8011114 <_dtoa_r+0x61c>)
 8010ea0:	425e      	negs	r6, r3
 8010ea2:	4b9b      	ldr	r3, [pc, #620]	; (8011110 <_dtoa_r+0x618>)
 8010ea4:	f006 020f 	and.w	r2, r6, #15
 8010ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb0:	ec51 0b19 	vmov	r0, r1, d9
 8010eb4:	f7ef fbb0 	bl	8000618 <__aeabi_dmul>
 8010eb8:	1136      	asrs	r6, r6, #4
 8010eba:	4682      	mov	sl, r0
 8010ebc:	468b      	mov	fp, r1
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	2502      	movs	r5, #2
 8010ec2:	2e00      	cmp	r6, #0
 8010ec4:	d17a      	bne.n	8010fbc <_dtoa_r+0x4c4>
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1d3      	bne.n	8010e72 <_dtoa_r+0x37a>
 8010eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 8082 	beq.w	8010fd6 <_dtoa_r+0x4de>
 8010ed2:	4b91      	ldr	r3, [pc, #580]	; (8011118 <_dtoa_r+0x620>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	4650      	mov	r0, sl
 8010ed8:	4659      	mov	r1, fp
 8010eda:	f7ef fe0f 	bl	8000afc <__aeabi_dcmplt>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d079      	beq.n	8010fd6 <_dtoa_r+0x4de>
 8010ee2:	9b03      	ldr	r3, [sp, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d076      	beq.n	8010fd6 <_dtoa_r+0x4de>
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	dd36      	ble.n	8010f5c <_dtoa_r+0x464>
 8010eee:	9b00      	ldr	r3, [sp, #0]
 8010ef0:	4650      	mov	r0, sl
 8010ef2:	4659      	mov	r1, fp
 8010ef4:	1e5f      	subs	r7, r3, #1
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	4b88      	ldr	r3, [pc, #544]	; (801111c <_dtoa_r+0x624>)
 8010efa:	f7ef fb8d 	bl	8000618 <__aeabi_dmul>
 8010efe:	9e02      	ldr	r6, [sp, #8]
 8010f00:	4682      	mov	sl, r0
 8010f02:	468b      	mov	fp, r1
 8010f04:	3501      	adds	r5, #1
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7ef fb1c 	bl	8000544 <__aeabi_i2d>
 8010f0c:	4652      	mov	r2, sl
 8010f0e:	465b      	mov	r3, fp
 8010f10:	f7ef fb82 	bl	8000618 <__aeabi_dmul>
 8010f14:	4b82      	ldr	r3, [pc, #520]	; (8011120 <_dtoa_r+0x628>)
 8010f16:	2200      	movs	r2, #0
 8010f18:	f7ef f9c8 	bl	80002ac <__adddf3>
 8010f1c:	46d0      	mov	r8, sl
 8010f1e:	46d9      	mov	r9, fp
 8010f20:	4682      	mov	sl, r0
 8010f22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010f26:	2e00      	cmp	r6, #0
 8010f28:	d158      	bne.n	8010fdc <_dtoa_r+0x4e4>
 8010f2a:	4b7e      	ldr	r3, [pc, #504]	; (8011124 <_dtoa_r+0x62c>)
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4640      	mov	r0, r8
 8010f30:	4649      	mov	r1, r9
 8010f32:	f7ef f9b9 	bl	80002a8 <__aeabi_dsub>
 8010f36:	4652      	mov	r2, sl
 8010f38:	465b      	mov	r3, fp
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	f7ef fdfb 	bl	8000b38 <__aeabi_dcmpgt>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	f040 8295 	bne.w	8011472 <_dtoa_r+0x97a>
 8010f48:	4652      	mov	r2, sl
 8010f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4649      	mov	r1, r9
 8010f52:	f7ef fdd3 	bl	8000afc <__aeabi_dcmplt>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f040 8289 	bne.w	801146e <_dtoa_r+0x976>
 8010f5c:	ec5b ab19 	vmov	sl, fp, d9
 8010f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f2c0 8148 	blt.w	80111f8 <_dtoa_r+0x700>
 8010f68:	9a00      	ldr	r2, [sp, #0]
 8010f6a:	2a0e      	cmp	r2, #14
 8010f6c:	f300 8144 	bgt.w	80111f8 <_dtoa_r+0x700>
 8010f70:	4b67      	ldr	r3, [pc, #412]	; (8011110 <_dtoa_r+0x618>)
 8010f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f280 80d5 	bge.w	801112c <_dtoa_r+0x634>
 8010f82:	9b03      	ldr	r3, [sp, #12]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f300 80d1 	bgt.w	801112c <_dtoa_r+0x634>
 8010f8a:	f040 826f 	bne.w	801146c <_dtoa_r+0x974>
 8010f8e:	4b65      	ldr	r3, [pc, #404]	; (8011124 <_dtoa_r+0x62c>)
 8010f90:	2200      	movs	r2, #0
 8010f92:	4640      	mov	r0, r8
 8010f94:	4649      	mov	r1, r9
 8010f96:	f7ef fb3f 	bl	8000618 <__aeabi_dmul>
 8010f9a:	4652      	mov	r2, sl
 8010f9c:	465b      	mov	r3, fp
 8010f9e:	f7ef fdc1 	bl	8000b24 <__aeabi_dcmpge>
 8010fa2:	9e03      	ldr	r6, [sp, #12]
 8010fa4:	4637      	mov	r7, r6
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f040 8245 	bne.w	8011436 <_dtoa_r+0x93e>
 8010fac:	9d01      	ldr	r5, [sp, #4]
 8010fae:	2331      	movs	r3, #49	; 0x31
 8010fb0:	f805 3b01 	strb.w	r3, [r5], #1
 8010fb4:	9b00      	ldr	r3, [sp, #0]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	e240      	b.n	801143e <_dtoa_r+0x946>
 8010fbc:	07f2      	lsls	r2, r6, #31
 8010fbe:	d505      	bpl.n	8010fcc <_dtoa_r+0x4d4>
 8010fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fc4:	f7ef fb28 	bl	8000618 <__aeabi_dmul>
 8010fc8:	3501      	adds	r5, #1
 8010fca:	2301      	movs	r3, #1
 8010fcc:	1076      	asrs	r6, r6, #1
 8010fce:	3708      	adds	r7, #8
 8010fd0:	e777      	b.n	8010ec2 <_dtoa_r+0x3ca>
 8010fd2:	2502      	movs	r5, #2
 8010fd4:	e779      	b.n	8010eca <_dtoa_r+0x3d2>
 8010fd6:	9f00      	ldr	r7, [sp, #0]
 8010fd8:	9e03      	ldr	r6, [sp, #12]
 8010fda:	e794      	b.n	8010f06 <_dtoa_r+0x40e>
 8010fdc:	9901      	ldr	r1, [sp, #4]
 8010fde:	4b4c      	ldr	r3, [pc, #304]	; (8011110 <_dtoa_r+0x618>)
 8010fe0:	4431      	add	r1, r6
 8010fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8010fe4:	9908      	ldr	r1, [sp, #32]
 8010fe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fee:	2900      	cmp	r1, #0
 8010ff0:	d043      	beq.n	801107a <_dtoa_r+0x582>
 8010ff2:	494d      	ldr	r1, [pc, #308]	; (8011128 <_dtoa_r+0x630>)
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	f7ef fc39 	bl	800086c <__aeabi_ddiv>
 8010ffa:	4652      	mov	r2, sl
 8010ffc:	465b      	mov	r3, fp
 8010ffe:	f7ef f953 	bl	80002a8 <__aeabi_dsub>
 8011002:	9d01      	ldr	r5, [sp, #4]
 8011004:	4682      	mov	sl, r0
 8011006:	468b      	mov	fp, r1
 8011008:	4649      	mov	r1, r9
 801100a:	4640      	mov	r0, r8
 801100c:	f7ef fdb4 	bl	8000b78 <__aeabi_d2iz>
 8011010:	4606      	mov	r6, r0
 8011012:	f7ef fa97 	bl	8000544 <__aeabi_i2d>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	4640      	mov	r0, r8
 801101c:	4649      	mov	r1, r9
 801101e:	f7ef f943 	bl	80002a8 <__aeabi_dsub>
 8011022:	3630      	adds	r6, #48	; 0x30
 8011024:	f805 6b01 	strb.w	r6, [r5], #1
 8011028:	4652      	mov	r2, sl
 801102a:	465b      	mov	r3, fp
 801102c:	4680      	mov	r8, r0
 801102e:	4689      	mov	r9, r1
 8011030:	f7ef fd64 	bl	8000afc <__aeabi_dcmplt>
 8011034:	2800      	cmp	r0, #0
 8011036:	d163      	bne.n	8011100 <_dtoa_r+0x608>
 8011038:	4642      	mov	r2, r8
 801103a:	464b      	mov	r3, r9
 801103c:	4936      	ldr	r1, [pc, #216]	; (8011118 <_dtoa_r+0x620>)
 801103e:	2000      	movs	r0, #0
 8011040:	f7ef f932 	bl	80002a8 <__aeabi_dsub>
 8011044:	4652      	mov	r2, sl
 8011046:	465b      	mov	r3, fp
 8011048:	f7ef fd58 	bl	8000afc <__aeabi_dcmplt>
 801104c:	2800      	cmp	r0, #0
 801104e:	f040 80b5 	bne.w	80111bc <_dtoa_r+0x6c4>
 8011052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011054:	429d      	cmp	r5, r3
 8011056:	d081      	beq.n	8010f5c <_dtoa_r+0x464>
 8011058:	4b30      	ldr	r3, [pc, #192]	; (801111c <_dtoa_r+0x624>)
 801105a:	2200      	movs	r2, #0
 801105c:	4650      	mov	r0, sl
 801105e:	4659      	mov	r1, fp
 8011060:	f7ef fada 	bl	8000618 <__aeabi_dmul>
 8011064:	4b2d      	ldr	r3, [pc, #180]	; (801111c <_dtoa_r+0x624>)
 8011066:	4682      	mov	sl, r0
 8011068:	468b      	mov	fp, r1
 801106a:	4640      	mov	r0, r8
 801106c:	4649      	mov	r1, r9
 801106e:	2200      	movs	r2, #0
 8011070:	f7ef fad2 	bl	8000618 <__aeabi_dmul>
 8011074:	4680      	mov	r8, r0
 8011076:	4689      	mov	r9, r1
 8011078:	e7c6      	b.n	8011008 <_dtoa_r+0x510>
 801107a:	4650      	mov	r0, sl
 801107c:	4659      	mov	r1, fp
 801107e:	f7ef facb 	bl	8000618 <__aeabi_dmul>
 8011082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011084:	9d01      	ldr	r5, [sp, #4]
 8011086:	930f      	str	r3, [sp, #60]	; 0x3c
 8011088:	4682      	mov	sl, r0
 801108a:	468b      	mov	fp, r1
 801108c:	4649      	mov	r1, r9
 801108e:	4640      	mov	r0, r8
 8011090:	f7ef fd72 	bl	8000b78 <__aeabi_d2iz>
 8011094:	4606      	mov	r6, r0
 8011096:	f7ef fa55 	bl	8000544 <__aeabi_i2d>
 801109a:	3630      	adds	r6, #48	; 0x30
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	4640      	mov	r0, r8
 80110a2:	4649      	mov	r1, r9
 80110a4:	f7ef f900 	bl	80002a8 <__aeabi_dsub>
 80110a8:	f805 6b01 	strb.w	r6, [r5], #1
 80110ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110ae:	429d      	cmp	r5, r3
 80110b0:	4680      	mov	r8, r0
 80110b2:	4689      	mov	r9, r1
 80110b4:	f04f 0200 	mov.w	r2, #0
 80110b8:	d124      	bne.n	8011104 <_dtoa_r+0x60c>
 80110ba:	4b1b      	ldr	r3, [pc, #108]	; (8011128 <_dtoa_r+0x630>)
 80110bc:	4650      	mov	r0, sl
 80110be:	4659      	mov	r1, fp
 80110c0:	f7ef f8f4 	bl	80002ac <__adddf3>
 80110c4:	4602      	mov	r2, r0
 80110c6:	460b      	mov	r3, r1
 80110c8:	4640      	mov	r0, r8
 80110ca:	4649      	mov	r1, r9
 80110cc:	f7ef fd34 	bl	8000b38 <__aeabi_dcmpgt>
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d173      	bne.n	80111bc <_dtoa_r+0x6c4>
 80110d4:	4652      	mov	r2, sl
 80110d6:	465b      	mov	r3, fp
 80110d8:	4913      	ldr	r1, [pc, #76]	; (8011128 <_dtoa_r+0x630>)
 80110da:	2000      	movs	r0, #0
 80110dc:	f7ef f8e4 	bl	80002a8 <__aeabi_dsub>
 80110e0:	4602      	mov	r2, r0
 80110e2:	460b      	mov	r3, r1
 80110e4:	4640      	mov	r0, r8
 80110e6:	4649      	mov	r1, r9
 80110e8:	f7ef fd08 	bl	8000afc <__aeabi_dcmplt>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	f43f af35 	beq.w	8010f5c <_dtoa_r+0x464>
 80110f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80110f4:	1e6b      	subs	r3, r5, #1
 80110f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80110fc:	2b30      	cmp	r3, #48	; 0x30
 80110fe:	d0f8      	beq.n	80110f2 <_dtoa_r+0x5fa>
 8011100:	9700      	str	r7, [sp, #0]
 8011102:	e049      	b.n	8011198 <_dtoa_r+0x6a0>
 8011104:	4b05      	ldr	r3, [pc, #20]	; (801111c <_dtoa_r+0x624>)
 8011106:	f7ef fa87 	bl	8000618 <__aeabi_dmul>
 801110a:	4680      	mov	r8, r0
 801110c:	4689      	mov	r9, r1
 801110e:	e7bd      	b.n	801108c <_dtoa_r+0x594>
 8011110:	0802e830 	.word	0x0802e830
 8011114:	0802e808 	.word	0x0802e808
 8011118:	3ff00000 	.word	0x3ff00000
 801111c:	40240000 	.word	0x40240000
 8011120:	401c0000 	.word	0x401c0000
 8011124:	40140000 	.word	0x40140000
 8011128:	3fe00000 	.word	0x3fe00000
 801112c:	9d01      	ldr	r5, [sp, #4]
 801112e:	4656      	mov	r6, sl
 8011130:	465f      	mov	r7, fp
 8011132:	4642      	mov	r2, r8
 8011134:	464b      	mov	r3, r9
 8011136:	4630      	mov	r0, r6
 8011138:	4639      	mov	r1, r7
 801113a:	f7ef fb97 	bl	800086c <__aeabi_ddiv>
 801113e:	f7ef fd1b 	bl	8000b78 <__aeabi_d2iz>
 8011142:	4682      	mov	sl, r0
 8011144:	f7ef f9fe 	bl	8000544 <__aeabi_i2d>
 8011148:	4642      	mov	r2, r8
 801114a:	464b      	mov	r3, r9
 801114c:	f7ef fa64 	bl	8000618 <__aeabi_dmul>
 8011150:	4602      	mov	r2, r0
 8011152:	460b      	mov	r3, r1
 8011154:	4630      	mov	r0, r6
 8011156:	4639      	mov	r1, r7
 8011158:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801115c:	f7ef f8a4 	bl	80002a8 <__aeabi_dsub>
 8011160:	f805 6b01 	strb.w	r6, [r5], #1
 8011164:	9e01      	ldr	r6, [sp, #4]
 8011166:	9f03      	ldr	r7, [sp, #12]
 8011168:	1bae      	subs	r6, r5, r6
 801116a:	42b7      	cmp	r7, r6
 801116c:	4602      	mov	r2, r0
 801116e:	460b      	mov	r3, r1
 8011170:	d135      	bne.n	80111de <_dtoa_r+0x6e6>
 8011172:	f7ef f89b 	bl	80002ac <__adddf3>
 8011176:	4642      	mov	r2, r8
 8011178:	464b      	mov	r3, r9
 801117a:	4606      	mov	r6, r0
 801117c:	460f      	mov	r7, r1
 801117e:	f7ef fcdb 	bl	8000b38 <__aeabi_dcmpgt>
 8011182:	b9d0      	cbnz	r0, 80111ba <_dtoa_r+0x6c2>
 8011184:	4642      	mov	r2, r8
 8011186:	464b      	mov	r3, r9
 8011188:	4630      	mov	r0, r6
 801118a:	4639      	mov	r1, r7
 801118c:	f7ef fcac 	bl	8000ae8 <__aeabi_dcmpeq>
 8011190:	b110      	cbz	r0, 8011198 <_dtoa_r+0x6a0>
 8011192:	f01a 0f01 	tst.w	sl, #1
 8011196:	d110      	bne.n	80111ba <_dtoa_r+0x6c2>
 8011198:	4620      	mov	r0, r4
 801119a:	ee18 1a10 	vmov	r1, s16
 801119e:	f000 fd49 	bl	8011c34 <_Bfree>
 80111a2:	2300      	movs	r3, #0
 80111a4:	9800      	ldr	r0, [sp, #0]
 80111a6:	702b      	strb	r3, [r5, #0]
 80111a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111aa:	3001      	adds	r0, #1
 80111ac:	6018      	str	r0, [r3, #0]
 80111ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f43f acf1 	beq.w	8010b98 <_dtoa_r+0xa0>
 80111b6:	601d      	str	r5, [r3, #0]
 80111b8:	e4ee      	b.n	8010b98 <_dtoa_r+0xa0>
 80111ba:	9f00      	ldr	r7, [sp, #0]
 80111bc:	462b      	mov	r3, r5
 80111be:	461d      	mov	r5, r3
 80111c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111c4:	2a39      	cmp	r2, #57	; 0x39
 80111c6:	d106      	bne.n	80111d6 <_dtoa_r+0x6de>
 80111c8:	9a01      	ldr	r2, [sp, #4]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d1f7      	bne.n	80111be <_dtoa_r+0x6c6>
 80111ce:	9901      	ldr	r1, [sp, #4]
 80111d0:	2230      	movs	r2, #48	; 0x30
 80111d2:	3701      	adds	r7, #1
 80111d4:	700a      	strb	r2, [r1, #0]
 80111d6:	781a      	ldrb	r2, [r3, #0]
 80111d8:	3201      	adds	r2, #1
 80111da:	701a      	strb	r2, [r3, #0]
 80111dc:	e790      	b.n	8011100 <_dtoa_r+0x608>
 80111de:	4ba6      	ldr	r3, [pc, #664]	; (8011478 <_dtoa_r+0x980>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	f7ef fa19 	bl	8000618 <__aeabi_dmul>
 80111e6:	2200      	movs	r2, #0
 80111e8:	2300      	movs	r3, #0
 80111ea:	4606      	mov	r6, r0
 80111ec:	460f      	mov	r7, r1
 80111ee:	f7ef fc7b 	bl	8000ae8 <__aeabi_dcmpeq>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d09d      	beq.n	8011132 <_dtoa_r+0x63a>
 80111f6:	e7cf      	b.n	8011198 <_dtoa_r+0x6a0>
 80111f8:	9a08      	ldr	r2, [sp, #32]
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	f000 80d7 	beq.w	80113ae <_dtoa_r+0x8b6>
 8011200:	9a06      	ldr	r2, [sp, #24]
 8011202:	2a01      	cmp	r2, #1
 8011204:	f300 80ba 	bgt.w	801137c <_dtoa_r+0x884>
 8011208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801120a:	2a00      	cmp	r2, #0
 801120c:	f000 80b2 	beq.w	8011374 <_dtoa_r+0x87c>
 8011210:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011214:	9e07      	ldr	r6, [sp, #28]
 8011216:	9d04      	ldr	r5, [sp, #16]
 8011218:	9a04      	ldr	r2, [sp, #16]
 801121a:	441a      	add	r2, r3
 801121c:	9204      	str	r2, [sp, #16]
 801121e:	9a05      	ldr	r2, [sp, #20]
 8011220:	2101      	movs	r1, #1
 8011222:	441a      	add	r2, r3
 8011224:	4620      	mov	r0, r4
 8011226:	9205      	str	r2, [sp, #20]
 8011228:	f000 fdbc 	bl	8011da4 <__i2b>
 801122c:	4607      	mov	r7, r0
 801122e:	2d00      	cmp	r5, #0
 8011230:	dd0c      	ble.n	801124c <_dtoa_r+0x754>
 8011232:	9b05      	ldr	r3, [sp, #20]
 8011234:	2b00      	cmp	r3, #0
 8011236:	dd09      	ble.n	801124c <_dtoa_r+0x754>
 8011238:	42ab      	cmp	r3, r5
 801123a:	9a04      	ldr	r2, [sp, #16]
 801123c:	bfa8      	it	ge
 801123e:	462b      	movge	r3, r5
 8011240:	1ad2      	subs	r2, r2, r3
 8011242:	9204      	str	r2, [sp, #16]
 8011244:	9a05      	ldr	r2, [sp, #20]
 8011246:	1aed      	subs	r5, r5, r3
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	9305      	str	r3, [sp, #20]
 801124c:	9b07      	ldr	r3, [sp, #28]
 801124e:	b31b      	cbz	r3, 8011298 <_dtoa_r+0x7a0>
 8011250:	9b08      	ldr	r3, [sp, #32]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 80af 	beq.w	80113b6 <_dtoa_r+0x8be>
 8011258:	2e00      	cmp	r6, #0
 801125a:	dd13      	ble.n	8011284 <_dtoa_r+0x78c>
 801125c:	4639      	mov	r1, r7
 801125e:	4632      	mov	r2, r6
 8011260:	4620      	mov	r0, r4
 8011262:	f000 fe5f 	bl	8011f24 <__pow5mult>
 8011266:	ee18 2a10 	vmov	r2, s16
 801126a:	4601      	mov	r1, r0
 801126c:	4607      	mov	r7, r0
 801126e:	4620      	mov	r0, r4
 8011270:	f000 fdae 	bl	8011dd0 <__multiply>
 8011274:	ee18 1a10 	vmov	r1, s16
 8011278:	4680      	mov	r8, r0
 801127a:	4620      	mov	r0, r4
 801127c:	f000 fcda 	bl	8011c34 <_Bfree>
 8011280:	ee08 8a10 	vmov	s16, r8
 8011284:	9b07      	ldr	r3, [sp, #28]
 8011286:	1b9a      	subs	r2, r3, r6
 8011288:	d006      	beq.n	8011298 <_dtoa_r+0x7a0>
 801128a:	ee18 1a10 	vmov	r1, s16
 801128e:	4620      	mov	r0, r4
 8011290:	f000 fe48 	bl	8011f24 <__pow5mult>
 8011294:	ee08 0a10 	vmov	s16, r0
 8011298:	2101      	movs	r1, #1
 801129a:	4620      	mov	r0, r4
 801129c:	f000 fd82 	bl	8011da4 <__i2b>
 80112a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	4606      	mov	r6, r0
 80112a6:	f340 8088 	ble.w	80113ba <_dtoa_r+0x8c2>
 80112aa:	461a      	mov	r2, r3
 80112ac:	4601      	mov	r1, r0
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 fe38 	bl	8011f24 <__pow5mult>
 80112b4:	9b06      	ldr	r3, [sp, #24]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	4606      	mov	r6, r0
 80112ba:	f340 8081 	ble.w	80113c0 <_dtoa_r+0x8c8>
 80112be:	f04f 0800 	mov.w	r8, #0
 80112c2:	6933      	ldr	r3, [r6, #16]
 80112c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112c8:	6918      	ldr	r0, [r3, #16]
 80112ca:	f000 fd1b 	bl	8011d04 <__hi0bits>
 80112ce:	f1c0 0020 	rsb	r0, r0, #32
 80112d2:	9b05      	ldr	r3, [sp, #20]
 80112d4:	4418      	add	r0, r3
 80112d6:	f010 001f 	ands.w	r0, r0, #31
 80112da:	f000 8092 	beq.w	8011402 <_dtoa_r+0x90a>
 80112de:	f1c0 0320 	rsb	r3, r0, #32
 80112e2:	2b04      	cmp	r3, #4
 80112e4:	f340 808a 	ble.w	80113fc <_dtoa_r+0x904>
 80112e8:	f1c0 001c 	rsb	r0, r0, #28
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	4403      	add	r3, r0
 80112f0:	9304      	str	r3, [sp, #16]
 80112f2:	9b05      	ldr	r3, [sp, #20]
 80112f4:	4403      	add	r3, r0
 80112f6:	4405      	add	r5, r0
 80112f8:	9305      	str	r3, [sp, #20]
 80112fa:	9b04      	ldr	r3, [sp, #16]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	dd07      	ble.n	8011310 <_dtoa_r+0x818>
 8011300:	ee18 1a10 	vmov	r1, s16
 8011304:	461a      	mov	r2, r3
 8011306:	4620      	mov	r0, r4
 8011308:	f000 fe66 	bl	8011fd8 <__lshift>
 801130c:	ee08 0a10 	vmov	s16, r0
 8011310:	9b05      	ldr	r3, [sp, #20]
 8011312:	2b00      	cmp	r3, #0
 8011314:	dd05      	ble.n	8011322 <_dtoa_r+0x82a>
 8011316:	4631      	mov	r1, r6
 8011318:	461a      	mov	r2, r3
 801131a:	4620      	mov	r0, r4
 801131c:	f000 fe5c 	bl	8011fd8 <__lshift>
 8011320:	4606      	mov	r6, r0
 8011322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011324:	2b00      	cmp	r3, #0
 8011326:	d06e      	beq.n	8011406 <_dtoa_r+0x90e>
 8011328:	ee18 0a10 	vmov	r0, s16
 801132c:	4631      	mov	r1, r6
 801132e:	f000 fec3 	bl	80120b8 <__mcmp>
 8011332:	2800      	cmp	r0, #0
 8011334:	da67      	bge.n	8011406 <_dtoa_r+0x90e>
 8011336:	9b00      	ldr	r3, [sp, #0]
 8011338:	3b01      	subs	r3, #1
 801133a:	ee18 1a10 	vmov	r1, s16
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	220a      	movs	r2, #10
 8011342:	2300      	movs	r3, #0
 8011344:	4620      	mov	r0, r4
 8011346:	f000 fc97 	bl	8011c78 <__multadd>
 801134a:	9b08      	ldr	r3, [sp, #32]
 801134c:	ee08 0a10 	vmov	s16, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	f000 81b1 	beq.w	80116b8 <_dtoa_r+0xbc0>
 8011356:	2300      	movs	r3, #0
 8011358:	4639      	mov	r1, r7
 801135a:	220a      	movs	r2, #10
 801135c:	4620      	mov	r0, r4
 801135e:	f000 fc8b 	bl	8011c78 <__multadd>
 8011362:	9b02      	ldr	r3, [sp, #8]
 8011364:	2b00      	cmp	r3, #0
 8011366:	4607      	mov	r7, r0
 8011368:	f300 808e 	bgt.w	8011488 <_dtoa_r+0x990>
 801136c:	9b06      	ldr	r3, [sp, #24]
 801136e:	2b02      	cmp	r3, #2
 8011370:	dc51      	bgt.n	8011416 <_dtoa_r+0x91e>
 8011372:	e089      	b.n	8011488 <_dtoa_r+0x990>
 8011374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801137a:	e74b      	b.n	8011214 <_dtoa_r+0x71c>
 801137c:	9b03      	ldr	r3, [sp, #12]
 801137e:	1e5e      	subs	r6, r3, #1
 8011380:	9b07      	ldr	r3, [sp, #28]
 8011382:	42b3      	cmp	r3, r6
 8011384:	bfbf      	itttt	lt
 8011386:	9b07      	ldrlt	r3, [sp, #28]
 8011388:	9607      	strlt	r6, [sp, #28]
 801138a:	1af2      	sublt	r2, r6, r3
 801138c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801138e:	bfb6      	itet	lt
 8011390:	189b      	addlt	r3, r3, r2
 8011392:	1b9e      	subge	r6, r3, r6
 8011394:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	bfb8      	it	lt
 801139a:	2600      	movlt	r6, #0
 801139c:	2b00      	cmp	r3, #0
 801139e:	bfb7      	itett	lt
 80113a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80113a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80113a8:	1a9d      	sublt	r5, r3, r2
 80113aa:	2300      	movlt	r3, #0
 80113ac:	e734      	b.n	8011218 <_dtoa_r+0x720>
 80113ae:	9e07      	ldr	r6, [sp, #28]
 80113b0:	9d04      	ldr	r5, [sp, #16]
 80113b2:	9f08      	ldr	r7, [sp, #32]
 80113b4:	e73b      	b.n	801122e <_dtoa_r+0x736>
 80113b6:	9a07      	ldr	r2, [sp, #28]
 80113b8:	e767      	b.n	801128a <_dtoa_r+0x792>
 80113ba:	9b06      	ldr	r3, [sp, #24]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	dc18      	bgt.n	80113f2 <_dtoa_r+0x8fa>
 80113c0:	f1ba 0f00 	cmp.w	sl, #0
 80113c4:	d115      	bne.n	80113f2 <_dtoa_r+0x8fa>
 80113c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113ca:	b993      	cbnz	r3, 80113f2 <_dtoa_r+0x8fa>
 80113cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113d0:	0d1b      	lsrs	r3, r3, #20
 80113d2:	051b      	lsls	r3, r3, #20
 80113d4:	b183      	cbz	r3, 80113f8 <_dtoa_r+0x900>
 80113d6:	9b04      	ldr	r3, [sp, #16]
 80113d8:	3301      	adds	r3, #1
 80113da:	9304      	str	r3, [sp, #16]
 80113dc:	9b05      	ldr	r3, [sp, #20]
 80113de:	3301      	adds	r3, #1
 80113e0:	9305      	str	r3, [sp, #20]
 80113e2:	f04f 0801 	mov.w	r8, #1
 80113e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f47f af6a 	bne.w	80112c2 <_dtoa_r+0x7ca>
 80113ee:	2001      	movs	r0, #1
 80113f0:	e76f      	b.n	80112d2 <_dtoa_r+0x7da>
 80113f2:	f04f 0800 	mov.w	r8, #0
 80113f6:	e7f6      	b.n	80113e6 <_dtoa_r+0x8ee>
 80113f8:	4698      	mov	r8, r3
 80113fa:	e7f4      	b.n	80113e6 <_dtoa_r+0x8ee>
 80113fc:	f43f af7d 	beq.w	80112fa <_dtoa_r+0x802>
 8011400:	4618      	mov	r0, r3
 8011402:	301c      	adds	r0, #28
 8011404:	e772      	b.n	80112ec <_dtoa_r+0x7f4>
 8011406:	9b03      	ldr	r3, [sp, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	dc37      	bgt.n	801147c <_dtoa_r+0x984>
 801140c:	9b06      	ldr	r3, [sp, #24]
 801140e:	2b02      	cmp	r3, #2
 8011410:	dd34      	ble.n	801147c <_dtoa_r+0x984>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	9302      	str	r3, [sp, #8]
 8011416:	9b02      	ldr	r3, [sp, #8]
 8011418:	b96b      	cbnz	r3, 8011436 <_dtoa_r+0x93e>
 801141a:	4631      	mov	r1, r6
 801141c:	2205      	movs	r2, #5
 801141e:	4620      	mov	r0, r4
 8011420:	f000 fc2a 	bl	8011c78 <__multadd>
 8011424:	4601      	mov	r1, r0
 8011426:	4606      	mov	r6, r0
 8011428:	ee18 0a10 	vmov	r0, s16
 801142c:	f000 fe44 	bl	80120b8 <__mcmp>
 8011430:	2800      	cmp	r0, #0
 8011432:	f73f adbb 	bgt.w	8010fac <_dtoa_r+0x4b4>
 8011436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011438:	9d01      	ldr	r5, [sp, #4]
 801143a:	43db      	mvns	r3, r3
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	f04f 0800 	mov.w	r8, #0
 8011442:	4631      	mov	r1, r6
 8011444:	4620      	mov	r0, r4
 8011446:	f000 fbf5 	bl	8011c34 <_Bfree>
 801144a:	2f00      	cmp	r7, #0
 801144c:	f43f aea4 	beq.w	8011198 <_dtoa_r+0x6a0>
 8011450:	f1b8 0f00 	cmp.w	r8, #0
 8011454:	d005      	beq.n	8011462 <_dtoa_r+0x96a>
 8011456:	45b8      	cmp	r8, r7
 8011458:	d003      	beq.n	8011462 <_dtoa_r+0x96a>
 801145a:	4641      	mov	r1, r8
 801145c:	4620      	mov	r0, r4
 801145e:	f000 fbe9 	bl	8011c34 <_Bfree>
 8011462:	4639      	mov	r1, r7
 8011464:	4620      	mov	r0, r4
 8011466:	f000 fbe5 	bl	8011c34 <_Bfree>
 801146a:	e695      	b.n	8011198 <_dtoa_r+0x6a0>
 801146c:	2600      	movs	r6, #0
 801146e:	4637      	mov	r7, r6
 8011470:	e7e1      	b.n	8011436 <_dtoa_r+0x93e>
 8011472:	9700      	str	r7, [sp, #0]
 8011474:	4637      	mov	r7, r6
 8011476:	e599      	b.n	8010fac <_dtoa_r+0x4b4>
 8011478:	40240000 	.word	0x40240000
 801147c:	9b08      	ldr	r3, [sp, #32]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80ca 	beq.w	8011618 <_dtoa_r+0xb20>
 8011484:	9b03      	ldr	r3, [sp, #12]
 8011486:	9302      	str	r3, [sp, #8]
 8011488:	2d00      	cmp	r5, #0
 801148a:	dd05      	ble.n	8011498 <_dtoa_r+0x9a0>
 801148c:	4639      	mov	r1, r7
 801148e:	462a      	mov	r2, r5
 8011490:	4620      	mov	r0, r4
 8011492:	f000 fda1 	bl	8011fd8 <__lshift>
 8011496:	4607      	mov	r7, r0
 8011498:	f1b8 0f00 	cmp.w	r8, #0
 801149c:	d05b      	beq.n	8011556 <_dtoa_r+0xa5e>
 801149e:	6879      	ldr	r1, [r7, #4]
 80114a0:	4620      	mov	r0, r4
 80114a2:	f000 fb87 	bl	8011bb4 <_Balloc>
 80114a6:	4605      	mov	r5, r0
 80114a8:	b928      	cbnz	r0, 80114b6 <_dtoa_r+0x9be>
 80114aa:	4b87      	ldr	r3, [pc, #540]	; (80116c8 <_dtoa_r+0xbd0>)
 80114ac:	4602      	mov	r2, r0
 80114ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114b2:	f7ff bb3b 	b.w	8010b2c <_dtoa_r+0x34>
 80114b6:	693a      	ldr	r2, [r7, #16]
 80114b8:	3202      	adds	r2, #2
 80114ba:	0092      	lsls	r2, r2, #2
 80114bc:	f107 010c 	add.w	r1, r7, #12
 80114c0:	300c      	adds	r0, #12
 80114c2:	f7fe fa61 	bl	800f988 <memcpy>
 80114c6:	2201      	movs	r2, #1
 80114c8:	4629      	mov	r1, r5
 80114ca:	4620      	mov	r0, r4
 80114cc:	f000 fd84 	bl	8011fd8 <__lshift>
 80114d0:	9b01      	ldr	r3, [sp, #4]
 80114d2:	f103 0901 	add.w	r9, r3, #1
 80114d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80114da:	4413      	add	r3, r2
 80114dc:	9305      	str	r3, [sp, #20]
 80114de:	f00a 0301 	and.w	r3, sl, #1
 80114e2:	46b8      	mov	r8, r7
 80114e4:	9304      	str	r3, [sp, #16]
 80114e6:	4607      	mov	r7, r0
 80114e8:	4631      	mov	r1, r6
 80114ea:	ee18 0a10 	vmov	r0, s16
 80114ee:	f7ff fa75 	bl	80109dc <quorem>
 80114f2:	4641      	mov	r1, r8
 80114f4:	9002      	str	r0, [sp, #8]
 80114f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114fa:	ee18 0a10 	vmov	r0, s16
 80114fe:	f000 fddb 	bl	80120b8 <__mcmp>
 8011502:	463a      	mov	r2, r7
 8011504:	9003      	str	r0, [sp, #12]
 8011506:	4631      	mov	r1, r6
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fdf1 	bl	80120f0 <__mdiff>
 801150e:	68c2      	ldr	r2, [r0, #12]
 8011510:	f109 3bff 	add.w	fp, r9, #4294967295
 8011514:	4605      	mov	r5, r0
 8011516:	bb02      	cbnz	r2, 801155a <_dtoa_r+0xa62>
 8011518:	4601      	mov	r1, r0
 801151a:	ee18 0a10 	vmov	r0, s16
 801151e:	f000 fdcb 	bl	80120b8 <__mcmp>
 8011522:	4602      	mov	r2, r0
 8011524:	4629      	mov	r1, r5
 8011526:	4620      	mov	r0, r4
 8011528:	9207      	str	r2, [sp, #28]
 801152a:	f000 fb83 	bl	8011c34 <_Bfree>
 801152e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011532:	ea43 0102 	orr.w	r1, r3, r2
 8011536:	9b04      	ldr	r3, [sp, #16]
 8011538:	430b      	orrs	r3, r1
 801153a:	464d      	mov	r5, r9
 801153c:	d10f      	bne.n	801155e <_dtoa_r+0xa66>
 801153e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011542:	d02a      	beq.n	801159a <_dtoa_r+0xaa2>
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	dd02      	ble.n	8011550 <_dtoa_r+0xa58>
 801154a:	9b02      	ldr	r3, [sp, #8]
 801154c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011550:	f88b a000 	strb.w	sl, [fp]
 8011554:	e775      	b.n	8011442 <_dtoa_r+0x94a>
 8011556:	4638      	mov	r0, r7
 8011558:	e7ba      	b.n	80114d0 <_dtoa_r+0x9d8>
 801155a:	2201      	movs	r2, #1
 801155c:	e7e2      	b.n	8011524 <_dtoa_r+0xa2c>
 801155e:	9b03      	ldr	r3, [sp, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	db04      	blt.n	801156e <_dtoa_r+0xa76>
 8011564:	9906      	ldr	r1, [sp, #24]
 8011566:	430b      	orrs	r3, r1
 8011568:	9904      	ldr	r1, [sp, #16]
 801156a:	430b      	orrs	r3, r1
 801156c:	d122      	bne.n	80115b4 <_dtoa_r+0xabc>
 801156e:	2a00      	cmp	r2, #0
 8011570:	ddee      	ble.n	8011550 <_dtoa_r+0xa58>
 8011572:	ee18 1a10 	vmov	r1, s16
 8011576:	2201      	movs	r2, #1
 8011578:	4620      	mov	r0, r4
 801157a:	f000 fd2d 	bl	8011fd8 <__lshift>
 801157e:	4631      	mov	r1, r6
 8011580:	ee08 0a10 	vmov	s16, r0
 8011584:	f000 fd98 	bl	80120b8 <__mcmp>
 8011588:	2800      	cmp	r0, #0
 801158a:	dc03      	bgt.n	8011594 <_dtoa_r+0xa9c>
 801158c:	d1e0      	bne.n	8011550 <_dtoa_r+0xa58>
 801158e:	f01a 0f01 	tst.w	sl, #1
 8011592:	d0dd      	beq.n	8011550 <_dtoa_r+0xa58>
 8011594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011598:	d1d7      	bne.n	801154a <_dtoa_r+0xa52>
 801159a:	2339      	movs	r3, #57	; 0x39
 801159c:	f88b 3000 	strb.w	r3, [fp]
 80115a0:	462b      	mov	r3, r5
 80115a2:	461d      	mov	r5, r3
 80115a4:	3b01      	subs	r3, #1
 80115a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115aa:	2a39      	cmp	r2, #57	; 0x39
 80115ac:	d071      	beq.n	8011692 <_dtoa_r+0xb9a>
 80115ae:	3201      	adds	r2, #1
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	e746      	b.n	8011442 <_dtoa_r+0x94a>
 80115b4:	2a00      	cmp	r2, #0
 80115b6:	dd07      	ble.n	80115c8 <_dtoa_r+0xad0>
 80115b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115bc:	d0ed      	beq.n	801159a <_dtoa_r+0xaa2>
 80115be:	f10a 0301 	add.w	r3, sl, #1
 80115c2:	f88b 3000 	strb.w	r3, [fp]
 80115c6:	e73c      	b.n	8011442 <_dtoa_r+0x94a>
 80115c8:	9b05      	ldr	r3, [sp, #20]
 80115ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80115ce:	4599      	cmp	r9, r3
 80115d0:	d047      	beq.n	8011662 <_dtoa_r+0xb6a>
 80115d2:	ee18 1a10 	vmov	r1, s16
 80115d6:	2300      	movs	r3, #0
 80115d8:	220a      	movs	r2, #10
 80115da:	4620      	mov	r0, r4
 80115dc:	f000 fb4c 	bl	8011c78 <__multadd>
 80115e0:	45b8      	cmp	r8, r7
 80115e2:	ee08 0a10 	vmov	s16, r0
 80115e6:	f04f 0300 	mov.w	r3, #0
 80115ea:	f04f 020a 	mov.w	r2, #10
 80115ee:	4641      	mov	r1, r8
 80115f0:	4620      	mov	r0, r4
 80115f2:	d106      	bne.n	8011602 <_dtoa_r+0xb0a>
 80115f4:	f000 fb40 	bl	8011c78 <__multadd>
 80115f8:	4680      	mov	r8, r0
 80115fa:	4607      	mov	r7, r0
 80115fc:	f109 0901 	add.w	r9, r9, #1
 8011600:	e772      	b.n	80114e8 <_dtoa_r+0x9f0>
 8011602:	f000 fb39 	bl	8011c78 <__multadd>
 8011606:	4639      	mov	r1, r7
 8011608:	4680      	mov	r8, r0
 801160a:	2300      	movs	r3, #0
 801160c:	220a      	movs	r2, #10
 801160e:	4620      	mov	r0, r4
 8011610:	f000 fb32 	bl	8011c78 <__multadd>
 8011614:	4607      	mov	r7, r0
 8011616:	e7f1      	b.n	80115fc <_dtoa_r+0xb04>
 8011618:	9b03      	ldr	r3, [sp, #12]
 801161a:	9302      	str	r3, [sp, #8]
 801161c:	9d01      	ldr	r5, [sp, #4]
 801161e:	ee18 0a10 	vmov	r0, s16
 8011622:	4631      	mov	r1, r6
 8011624:	f7ff f9da 	bl	80109dc <quorem>
 8011628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	f805 ab01 	strb.w	sl, [r5], #1
 8011632:	1aea      	subs	r2, r5, r3
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	4293      	cmp	r3, r2
 8011638:	dd09      	ble.n	801164e <_dtoa_r+0xb56>
 801163a:	ee18 1a10 	vmov	r1, s16
 801163e:	2300      	movs	r3, #0
 8011640:	220a      	movs	r2, #10
 8011642:	4620      	mov	r0, r4
 8011644:	f000 fb18 	bl	8011c78 <__multadd>
 8011648:	ee08 0a10 	vmov	s16, r0
 801164c:	e7e7      	b.n	801161e <_dtoa_r+0xb26>
 801164e:	9b02      	ldr	r3, [sp, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	bfc8      	it	gt
 8011654:	461d      	movgt	r5, r3
 8011656:	9b01      	ldr	r3, [sp, #4]
 8011658:	bfd8      	it	le
 801165a:	2501      	movle	r5, #1
 801165c:	441d      	add	r5, r3
 801165e:	f04f 0800 	mov.w	r8, #0
 8011662:	ee18 1a10 	vmov	r1, s16
 8011666:	2201      	movs	r2, #1
 8011668:	4620      	mov	r0, r4
 801166a:	f000 fcb5 	bl	8011fd8 <__lshift>
 801166e:	4631      	mov	r1, r6
 8011670:	ee08 0a10 	vmov	s16, r0
 8011674:	f000 fd20 	bl	80120b8 <__mcmp>
 8011678:	2800      	cmp	r0, #0
 801167a:	dc91      	bgt.n	80115a0 <_dtoa_r+0xaa8>
 801167c:	d102      	bne.n	8011684 <_dtoa_r+0xb8c>
 801167e:	f01a 0f01 	tst.w	sl, #1
 8011682:	d18d      	bne.n	80115a0 <_dtoa_r+0xaa8>
 8011684:	462b      	mov	r3, r5
 8011686:	461d      	mov	r5, r3
 8011688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801168c:	2a30      	cmp	r2, #48	; 0x30
 801168e:	d0fa      	beq.n	8011686 <_dtoa_r+0xb8e>
 8011690:	e6d7      	b.n	8011442 <_dtoa_r+0x94a>
 8011692:	9a01      	ldr	r2, [sp, #4]
 8011694:	429a      	cmp	r2, r3
 8011696:	d184      	bne.n	80115a2 <_dtoa_r+0xaaa>
 8011698:	9b00      	ldr	r3, [sp, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	2331      	movs	r3, #49	; 0x31
 80116a0:	7013      	strb	r3, [r2, #0]
 80116a2:	e6ce      	b.n	8011442 <_dtoa_r+0x94a>
 80116a4:	4b09      	ldr	r3, [pc, #36]	; (80116cc <_dtoa_r+0xbd4>)
 80116a6:	f7ff ba95 	b.w	8010bd4 <_dtoa_r+0xdc>
 80116aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f47f aa6e 	bne.w	8010b8e <_dtoa_r+0x96>
 80116b2:	4b07      	ldr	r3, [pc, #28]	; (80116d0 <_dtoa_r+0xbd8>)
 80116b4:	f7ff ba8e 	b.w	8010bd4 <_dtoa_r+0xdc>
 80116b8:	9b02      	ldr	r3, [sp, #8]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	dcae      	bgt.n	801161c <_dtoa_r+0xb24>
 80116be:	9b06      	ldr	r3, [sp, #24]
 80116c0:	2b02      	cmp	r3, #2
 80116c2:	f73f aea8 	bgt.w	8011416 <_dtoa_r+0x91e>
 80116c6:	e7a9      	b.n	801161c <_dtoa_r+0xb24>
 80116c8:	0802e729 	.word	0x0802e729
 80116cc:	0802e585 	.word	0x0802e585
 80116d0:	0802e6aa 	.word	0x0802e6aa

080116d4 <__sflush_r>:
 80116d4:	898a      	ldrh	r2, [r1, #12]
 80116d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116da:	4605      	mov	r5, r0
 80116dc:	0710      	lsls	r0, r2, #28
 80116de:	460c      	mov	r4, r1
 80116e0:	d458      	bmi.n	8011794 <__sflush_r+0xc0>
 80116e2:	684b      	ldr	r3, [r1, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	dc05      	bgt.n	80116f4 <__sflush_r+0x20>
 80116e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	dc02      	bgt.n	80116f4 <__sflush_r+0x20>
 80116ee:	2000      	movs	r0, #0
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116f6:	2e00      	cmp	r6, #0
 80116f8:	d0f9      	beq.n	80116ee <__sflush_r+0x1a>
 80116fa:	2300      	movs	r3, #0
 80116fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011700:	682f      	ldr	r7, [r5, #0]
 8011702:	602b      	str	r3, [r5, #0]
 8011704:	d032      	beq.n	801176c <__sflush_r+0x98>
 8011706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011708:	89a3      	ldrh	r3, [r4, #12]
 801170a:	075a      	lsls	r2, r3, #29
 801170c:	d505      	bpl.n	801171a <__sflush_r+0x46>
 801170e:	6863      	ldr	r3, [r4, #4]
 8011710:	1ac0      	subs	r0, r0, r3
 8011712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011714:	b10b      	cbz	r3, 801171a <__sflush_r+0x46>
 8011716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011718:	1ac0      	subs	r0, r0, r3
 801171a:	2300      	movs	r3, #0
 801171c:	4602      	mov	r2, r0
 801171e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011720:	6a21      	ldr	r1, [r4, #32]
 8011722:	4628      	mov	r0, r5
 8011724:	47b0      	blx	r6
 8011726:	1c43      	adds	r3, r0, #1
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	d106      	bne.n	801173a <__sflush_r+0x66>
 801172c:	6829      	ldr	r1, [r5, #0]
 801172e:	291d      	cmp	r1, #29
 8011730:	d82c      	bhi.n	801178c <__sflush_r+0xb8>
 8011732:	4a2a      	ldr	r2, [pc, #168]	; (80117dc <__sflush_r+0x108>)
 8011734:	40ca      	lsrs	r2, r1
 8011736:	07d6      	lsls	r6, r2, #31
 8011738:	d528      	bpl.n	801178c <__sflush_r+0xb8>
 801173a:	2200      	movs	r2, #0
 801173c:	6062      	str	r2, [r4, #4]
 801173e:	04d9      	lsls	r1, r3, #19
 8011740:	6922      	ldr	r2, [r4, #16]
 8011742:	6022      	str	r2, [r4, #0]
 8011744:	d504      	bpl.n	8011750 <__sflush_r+0x7c>
 8011746:	1c42      	adds	r2, r0, #1
 8011748:	d101      	bne.n	801174e <__sflush_r+0x7a>
 801174a:	682b      	ldr	r3, [r5, #0]
 801174c:	b903      	cbnz	r3, 8011750 <__sflush_r+0x7c>
 801174e:	6560      	str	r0, [r4, #84]	; 0x54
 8011750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011752:	602f      	str	r7, [r5, #0]
 8011754:	2900      	cmp	r1, #0
 8011756:	d0ca      	beq.n	80116ee <__sflush_r+0x1a>
 8011758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801175c:	4299      	cmp	r1, r3
 801175e:	d002      	beq.n	8011766 <__sflush_r+0x92>
 8011760:	4628      	mov	r0, r5
 8011762:	f7fe f927 	bl	800f9b4 <_free_r>
 8011766:	2000      	movs	r0, #0
 8011768:	6360      	str	r0, [r4, #52]	; 0x34
 801176a:	e7c1      	b.n	80116f0 <__sflush_r+0x1c>
 801176c:	6a21      	ldr	r1, [r4, #32]
 801176e:	2301      	movs	r3, #1
 8011770:	4628      	mov	r0, r5
 8011772:	47b0      	blx	r6
 8011774:	1c41      	adds	r1, r0, #1
 8011776:	d1c7      	bne.n	8011708 <__sflush_r+0x34>
 8011778:	682b      	ldr	r3, [r5, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0c4      	beq.n	8011708 <__sflush_r+0x34>
 801177e:	2b1d      	cmp	r3, #29
 8011780:	d001      	beq.n	8011786 <__sflush_r+0xb2>
 8011782:	2b16      	cmp	r3, #22
 8011784:	d101      	bne.n	801178a <__sflush_r+0xb6>
 8011786:	602f      	str	r7, [r5, #0]
 8011788:	e7b1      	b.n	80116ee <__sflush_r+0x1a>
 801178a:	89a3      	ldrh	r3, [r4, #12]
 801178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	e7ad      	b.n	80116f0 <__sflush_r+0x1c>
 8011794:	690f      	ldr	r7, [r1, #16]
 8011796:	2f00      	cmp	r7, #0
 8011798:	d0a9      	beq.n	80116ee <__sflush_r+0x1a>
 801179a:	0793      	lsls	r3, r2, #30
 801179c:	680e      	ldr	r6, [r1, #0]
 801179e:	bf08      	it	eq
 80117a0:	694b      	ldreq	r3, [r1, #20]
 80117a2:	600f      	str	r7, [r1, #0]
 80117a4:	bf18      	it	ne
 80117a6:	2300      	movne	r3, #0
 80117a8:	eba6 0807 	sub.w	r8, r6, r7
 80117ac:	608b      	str	r3, [r1, #8]
 80117ae:	f1b8 0f00 	cmp.w	r8, #0
 80117b2:	dd9c      	ble.n	80116ee <__sflush_r+0x1a>
 80117b4:	6a21      	ldr	r1, [r4, #32]
 80117b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117b8:	4643      	mov	r3, r8
 80117ba:	463a      	mov	r2, r7
 80117bc:	4628      	mov	r0, r5
 80117be:	47b0      	blx	r6
 80117c0:	2800      	cmp	r0, #0
 80117c2:	dc06      	bgt.n	80117d2 <__sflush_r+0xfe>
 80117c4:	89a3      	ldrh	r3, [r4, #12]
 80117c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ca:	81a3      	strh	r3, [r4, #12]
 80117cc:	f04f 30ff 	mov.w	r0, #4294967295
 80117d0:	e78e      	b.n	80116f0 <__sflush_r+0x1c>
 80117d2:	4407      	add	r7, r0
 80117d4:	eba8 0800 	sub.w	r8, r8, r0
 80117d8:	e7e9      	b.n	80117ae <__sflush_r+0xda>
 80117da:	bf00      	nop
 80117dc:	20400001 	.word	0x20400001

080117e0 <_fflush_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	690b      	ldr	r3, [r1, #16]
 80117e4:	4605      	mov	r5, r0
 80117e6:	460c      	mov	r4, r1
 80117e8:	b913      	cbnz	r3, 80117f0 <_fflush_r+0x10>
 80117ea:	2500      	movs	r5, #0
 80117ec:	4628      	mov	r0, r5
 80117ee:	bd38      	pop	{r3, r4, r5, pc}
 80117f0:	b118      	cbz	r0, 80117fa <_fflush_r+0x1a>
 80117f2:	6983      	ldr	r3, [r0, #24]
 80117f4:	b90b      	cbnz	r3, 80117fa <_fflush_r+0x1a>
 80117f6:	f000 f887 	bl	8011908 <__sinit>
 80117fa:	4b14      	ldr	r3, [pc, #80]	; (801184c <_fflush_r+0x6c>)
 80117fc:	429c      	cmp	r4, r3
 80117fe:	d11b      	bne.n	8011838 <_fflush_r+0x58>
 8011800:	686c      	ldr	r4, [r5, #4]
 8011802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d0ef      	beq.n	80117ea <_fflush_r+0xa>
 801180a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801180c:	07d0      	lsls	r0, r2, #31
 801180e:	d404      	bmi.n	801181a <_fflush_r+0x3a>
 8011810:	0599      	lsls	r1, r3, #22
 8011812:	d402      	bmi.n	801181a <_fflush_r+0x3a>
 8011814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011816:	f000 f91a 	bl	8011a4e <__retarget_lock_acquire_recursive>
 801181a:	4628      	mov	r0, r5
 801181c:	4621      	mov	r1, r4
 801181e:	f7ff ff59 	bl	80116d4 <__sflush_r>
 8011822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011824:	07da      	lsls	r2, r3, #31
 8011826:	4605      	mov	r5, r0
 8011828:	d4e0      	bmi.n	80117ec <_fflush_r+0xc>
 801182a:	89a3      	ldrh	r3, [r4, #12]
 801182c:	059b      	lsls	r3, r3, #22
 801182e:	d4dd      	bmi.n	80117ec <_fflush_r+0xc>
 8011830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011832:	f000 f90d 	bl	8011a50 <__retarget_lock_release_recursive>
 8011836:	e7d9      	b.n	80117ec <_fflush_r+0xc>
 8011838:	4b05      	ldr	r3, [pc, #20]	; (8011850 <_fflush_r+0x70>)
 801183a:	429c      	cmp	r4, r3
 801183c:	d101      	bne.n	8011842 <_fflush_r+0x62>
 801183e:	68ac      	ldr	r4, [r5, #8]
 8011840:	e7df      	b.n	8011802 <_fflush_r+0x22>
 8011842:	4b04      	ldr	r3, [pc, #16]	; (8011854 <_fflush_r+0x74>)
 8011844:	429c      	cmp	r4, r3
 8011846:	bf08      	it	eq
 8011848:	68ec      	ldreq	r4, [r5, #12]
 801184a:	e7da      	b.n	8011802 <_fflush_r+0x22>
 801184c:	0802e75c 	.word	0x0802e75c
 8011850:	0802e77c 	.word	0x0802e77c
 8011854:	0802e73c 	.word	0x0802e73c

08011858 <std>:
 8011858:	2300      	movs	r3, #0
 801185a:	b510      	push	{r4, lr}
 801185c:	4604      	mov	r4, r0
 801185e:	e9c0 3300 	strd	r3, r3, [r0]
 8011862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011866:	6083      	str	r3, [r0, #8]
 8011868:	8181      	strh	r1, [r0, #12]
 801186a:	6643      	str	r3, [r0, #100]	; 0x64
 801186c:	81c2      	strh	r2, [r0, #14]
 801186e:	6183      	str	r3, [r0, #24]
 8011870:	4619      	mov	r1, r3
 8011872:	2208      	movs	r2, #8
 8011874:	305c      	adds	r0, #92	; 0x5c
 8011876:	f7fe f895 	bl	800f9a4 <memset>
 801187a:	4b05      	ldr	r3, [pc, #20]	; (8011890 <std+0x38>)
 801187c:	6263      	str	r3, [r4, #36]	; 0x24
 801187e:	4b05      	ldr	r3, [pc, #20]	; (8011894 <std+0x3c>)
 8011880:	62a3      	str	r3, [r4, #40]	; 0x28
 8011882:	4b05      	ldr	r3, [pc, #20]	; (8011898 <std+0x40>)
 8011884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011886:	4b05      	ldr	r3, [pc, #20]	; (801189c <std+0x44>)
 8011888:	6224      	str	r4, [r4, #32]
 801188a:	6323      	str	r3, [r4, #48]	; 0x30
 801188c:	bd10      	pop	{r4, pc}
 801188e:	bf00      	nop
 8011890:	0801075d 	.word	0x0801075d
 8011894:	0801077f 	.word	0x0801077f
 8011898:	080107b7 	.word	0x080107b7
 801189c:	080107db 	.word	0x080107db

080118a0 <_cleanup_r>:
 80118a0:	4901      	ldr	r1, [pc, #4]	; (80118a8 <_cleanup_r+0x8>)
 80118a2:	f000 b8af 	b.w	8011a04 <_fwalk_reent>
 80118a6:	bf00      	nop
 80118a8:	080117e1 	.word	0x080117e1

080118ac <__sfmoreglue>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	2268      	movs	r2, #104	; 0x68
 80118b0:	1e4d      	subs	r5, r1, #1
 80118b2:	4355      	muls	r5, r2
 80118b4:	460e      	mov	r6, r1
 80118b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118ba:	f7fe f8e7 	bl	800fa8c <_malloc_r>
 80118be:	4604      	mov	r4, r0
 80118c0:	b140      	cbz	r0, 80118d4 <__sfmoreglue+0x28>
 80118c2:	2100      	movs	r1, #0
 80118c4:	e9c0 1600 	strd	r1, r6, [r0]
 80118c8:	300c      	adds	r0, #12
 80118ca:	60a0      	str	r0, [r4, #8]
 80118cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118d0:	f7fe f868 	bl	800f9a4 <memset>
 80118d4:	4620      	mov	r0, r4
 80118d6:	bd70      	pop	{r4, r5, r6, pc}

080118d8 <__sfp_lock_acquire>:
 80118d8:	4801      	ldr	r0, [pc, #4]	; (80118e0 <__sfp_lock_acquire+0x8>)
 80118da:	f000 b8b8 	b.w	8011a4e <__retarget_lock_acquire_recursive>
 80118de:	bf00      	nop
 80118e0:	20005c55 	.word	0x20005c55

080118e4 <__sfp_lock_release>:
 80118e4:	4801      	ldr	r0, [pc, #4]	; (80118ec <__sfp_lock_release+0x8>)
 80118e6:	f000 b8b3 	b.w	8011a50 <__retarget_lock_release_recursive>
 80118ea:	bf00      	nop
 80118ec:	20005c55 	.word	0x20005c55

080118f0 <__sinit_lock_acquire>:
 80118f0:	4801      	ldr	r0, [pc, #4]	; (80118f8 <__sinit_lock_acquire+0x8>)
 80118f2:	f000 b8ac 	b.w	8011a4e <__retarget_lock_acquire_recursive>
 80118f6:	bf00      	nop
 80118f8:	20005c56 	.word	0x20005c56

080118fc <__sinit_lock_release>:
 80118fc:	4801      	ldr	r0, [pc, #4]	; (8011904 <__sinit_lock_release+0x8>)
 80118fe:	f000 b8a7 	b.w	8011a50 <__retarget_lock_release_recursive>
 8011902:	bf00      	nop
 8011904:	20005c56 	.word	0x20005c56

08011908 <__sinit>:
 8011908:	b510      	push	{r4, lr}
 801190a:	4604      	mov	r4, r0
 801190c:	f7ff fff0 	bl	80118f0 <__sinit_lock_acquire>
 8011910:	69a3      	ldr	r3, [r4, #24]
 8011912:	b11b      	cbz	r3, 801191c <__sinit+0x14>
 8011914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011918:	f7ff bff0 	b.w	80118fc <__sinit_lock_release>
 801191c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011920:	6523      	str	r3, [r4, #80]	; 0x50
 8011922:	4b13      	ldr	r3, [pc, #76]	; (8011970 <__sinit+0x68>)
 8011924:	4a13      	ldr	r2, [pc, #76]	; (8011974 <__sinit+0x6c>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	62a2      	str	r2, [r4, #40]	; 0x28
 801192a:	42a3      	cmp	r3, r4
 801192c:	bf04      	itt	eq
 801192e:	2301      	moveq	r3, #1
 8011930:	61a3      	streq	r3, [r4, #24]
 8011932:	4620      	mov	r0, r4
 8011934:	f000 f820 	bl	8011978 <__sfp>
 8011938:	6060      	str	r0, [r4, #4]
 801193a:	4620      	mov	r0, r4
 801193c:	f000 f81c 	bl	8011978 <__sfp>
 8011940:	60a0      	str	r0, [r4, #8]
 8011942:	4620      	mov	r0, r4
 8011944:	f000 f818 	bl	8011978 <__sfp>
 8011948:	2200      	movs	r2, #0
 801194a:	60e0      	str	r0, [r4, #12]
 801194c:	2104      	movs	r1, #4
 801194e:	6860      	ldr	r0, [r4, #4]
 8011950:	f7ff ff82 	bl	8011858 <std>
 8011954:	68a0      	ldr	r0, [r4, #8]
 8011956:	2201      	movs	r2, #1
 8011958:	2109      	movs	r1, #9
 801195a:	f7ff ff7d 	bl	8011858 <std>
 801195e:	68e0      	ldr	r0, [r4, #12]
 8011960:	2202      	movs	r2, #2
 8011962:	2112      	movs	r1, #18
 8011964:	f7ff ff78 	bl	8011858 <std>
 8011968:	2301      	movs	r3, #1
 801196a:	61a3      	str	r3, [r4, #24]
 801196c:	e7d2      	b.n	8011914 <__sinit+0xc>
 801196e:	bf00      	nop
 8011970:	0802e560 	.word	0x0802e560
 8011974:	080118a1 	.word	0x080118a1

08011978 <__sfp>:
 8011978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197a:	4607      	mov	r7, r0
 801197c:	f7ff ffac 	bl	80118d8 <__sfp_lock_acquire>
 8011980:	4b1e      	ldr	r3, [pc, #120]	; (80119fc <__sfp+0x84>)
 8011982:	681e      	ldr	r6, [r3, #0]
 8011984:	69b3      	ldr	r3, [r6, #24]
 8011986:	b913      	cbnz	r3, 801198e <__sfp+0x16>
 8011988:	4630      	mov	r0, r6
 801198a:	f7ff ffbd 	bl	8011908 <__sinit>
 801198e:	3648      	adds	r6, #72	; 0x48
 8011990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011994:	3b01      	subs	r3, #1
 8011996:	d503      	bpl.n	80119a0 <__sfp+0x28>
 8011998:	6833      	ldr	r3, [r6, #0]
 801199a:	b30b      	cbz	r3, 80119e0 <__sfp+0x68>
 801199c:	6836      	ldr	r6, [r6, #0]
 801199e:	e7f7      	b.n	8011990 <__sfp+0x18>
 80119a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80119a4:	b9d5      	cbnz	r5, 80119dc <__sfp+0x64>
 80119a6:	4b16      	ldr	r3, [pc, #88]	; (8011a00 <__sfp+0x88>)
 80119a8:	60e3      	str	r3, [r4, #12]
 80119aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119ae:	6665      	str	r5, [r4, #100]	; 0x64
 80119b0:	f000 f84c 	bl	8011a4c <__retarget_lock_init_recursive>
 80119b4:	f7ff ff96 	bl	80118e4 <__sfp_lock_release>
 80119b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80119bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80119c0:	6025      	str	r5, [r4, #0]
 80119c2:	61a5      	str	r5, [r4, #24]
 80119c4:	2208      	movs	r2, #8
 80119c6:	4629      	mov	r1, r5
 80119c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119cc:	f7fd ffea 	bl	800f9a4 <memset>
 80119d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119d8:	4620      	mov	r0, r4
 80119da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119dc:	3468      	adds	r4, #104	; 0x68
 80119de:	e7d9      	b.n	8011994 <__sfp+0x1c>
 80119e0:	2104      	movs	r1, #4
 80119e2:	4638      	mov	r0, r7
 80119e4:	f7ff ff62 	bl	80118ac <__sfmoreglue>
 80119e8:	4604      	mov	r4, r0
 80119ea:	6030      	str	r0, [r6, #0]
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d1d5      	bne.n	801199c <__sfp+0x24>
 80119f0:	f7ff ff78 	bl	80118e4 <__sfp_lock_release>
 80119f4:	230c      	movs	r3, #12
 80119f6:	603b      	str	r3, [r7, #0]
 80119f8:	e7ee      	b.n	80119d8 <__sfp+0x60>
 80119fa:	bf00      	nop
 80119fc:	0802e560 	.word	0x0802e560
 8011a00:	ffff0001 	.word	0xffff0001

08011a04 <_fwalk_reent>:
 8011a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a08:	4606      	mov	r6, r0
 8011a0a:	4688      	mov	r8, r1
 8011a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a10:	2700      	movs	r7, #0
 8011a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a16:	f1b9 0901 	subs.w	r9, r9, #1
 8011a1a:	d505      	bpl.n	8011a28 <_fwalk_reent+0x24>
 8011a1c:	6824      	ldr	r4, [r4, #0]
 8011a1e:	2c00      	cmp	r4, #0
 8011a20:	d1f7      	bne.n	8011a12 <_fwalk_reent+0xe>
 8011a22:	4638      	mov	r0, r7
 8011a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a28:	89ab      	ldrh	r3, [r5, #12]
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d907      	bls.n	8011a3e <_fwalk_reent+0x3a>
 8011a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a32:	3301      	adds	r3, #1
 8011a34:	d003      	beq.n	8011a3e <_fwalk_reent+0x3a>
 8011a36:	4629      	mov	r1, r5
 8011a38:	4630      	mov	r0, r6
 8011a3a:	47c0      	blx	r8
 8011a3c:	4307      	orrs	r7, r0
 8011a3e:	3568      	adds	r5, #104	; 0x68
 8011a40:	e7e9      	b.n	8011a16 <_fwalk_reent+0x12>
	...

08011a44 <_localeconv_r>:
 8011a44:	4800      	ldr	r0, [pc, #0]	; (8011a48 <_localeconv_r+0x4>)
 8011a46:	4770      	bx	lr
 8011a48:	2000024c 	.word	0x2000024c

08011a4c <__retarget_lock_init_recursive>:
 8011a4c:	4770      	bx	lr

08011a4e <__retarget_lock_acquire_recursive>:
 8011a4e:	4770      	bx	lr

08011a50 <__retarget_lock_release_recursive>:
 8011a50:	4770      	bx	lr
	...

08011a54 <_lseek_r>:
 8011a54:	b538      	push	{r3, r4, r5, lr}
 8011a56:	4d07      	ldr	r5, [pc, #28]	; (8011a74 <_lseek_r+0x20>)
 8011a58:	4604      	mov	r4, r0
 8011a5a:	4608      	mov	r0, r1
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	2200      	movs	r2, #0
 8011a60:	602a      	str	r2, [r5, #0]
 8011a62:	461a      	mov	r2, r3
 8011a64:	f7f3 f906 	bl	8004c74 <_lseek>
 8011a68:	1c43      	adds	r3, r0, #1
 8011a6a:	d102      	bne.n	8011a72 <_lseek_r+0x1e>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	b103      	cbz	r3, 8011a72 <_lseek_r+0x1e>
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	bd38      	pop	{r3, r4, r5, pc}
 8011a74:	20005c58 	.word	0x20005c58

08011a78 <__swhatbuf_r>:
 8011a78:	b570      	push	{r4, r5, r6, lr}
 8011a7a:	460e      	mov	r6, r1
 8011a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a80:	2900      	cmp	r1, #0
 8011a82:	b096      	sub	sp, #88	; 0x58
 8011a84:	4614      	mov	r4, r2
 8011a86:	461d      	mov	r5, r3
 8011a88:	da08      	bge.n	8011a9c <__swhatbuf_r+0x24>
 8011a8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	602a      	str	r2, [r5, #0]
 8011a92:	061a      	lsls	r2, r3, #24
 8011a94:	d410      	bmi.n	8011ab8 <__swhatbuf_r+0x40>
 8011a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a9a:	e00e      	b.n	8011aba <__swhatbuf_r+0x42>
 8011a9c:	466a      	mov	r2, sp
 8011a9e:	f000 fe11 	bl	80126c4 <_fstat_r>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	dbf1      	blt.n	8011a8a <__swhatbuf_r+0x12>
 8011aa6:	9a01      	ldr	r2, [sp, #4]
 8011aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ab0:	425a      	negs	r2, r3
 8011ab2:	415a      	adcs	r2, r3
 8011ab4:	602a      	str	r2, [r5, #0]
 8011ab6:	e7ee      	b.n	8011a96 <__swhatbuf_r+0x1e>
 8011ab8:	2340      	movs	r3, #64	; 0x40
 8011aba:	2000      	movs	r0, #0
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	b016      	add	sp, #88	; 0x58
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ac4 <__smakebuf_r>:
 8011ac4:	898b      	ldrh	r3, [r1, #12]
 8011ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ac8:	079d      	lsls	r5, r3, #30
 8011aca:	4606      	mov	r6, r0
 8011acc:	460c      	mov	r4, r1
 8011ace:	d507      	bpl.n	8011ae0 <__smakebuf_r+0x1c>
 8011ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	6123      	str	r3, [r4, #16]
 8011ad8:	2301      	movs	r3, #1
 8011ada:	6163      	str	r3, [r4, #20]
 8011adc:	b002      	add	sp, #8
 8011ade:	bd70      	pop	{r4, r5, r6, pc}
 8011ae0:	ab01      	add	r3, sp, #4
 8011ae2:	466a      	mov	r2, sp
 8011ae4:	f7ff ffc8 	bl	8011a78 <__swhatbuf_r>
 8011ae8:	9900      	ldr	r1, [sp, #0]
 8011aea:	4605      	mov	r5, r0
 8011aec:	4630      	mov	r0, r6
 8011aee:	f7fd ffcd 	bl	800fa8c <_malloc_r>
 8011af2:	b948      	cbnz	r0, 8011b08 <__smakebuf_r+0x44>
 8011af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af8:	059a      	lsls	r2, r3, #22
 8011afa:	d4ef      	bmi.n	8011adc <__smakebuf_r+0x18>
 8011afc:	f023 0303 	bic.w	r3, r3, #3
 8011b00:	f043 0302 	orr.w	r3, r3, #2
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	e7e3      	b.n	8011ad0 <__smakebuf_r+0xc>
 8011b08:	4b0d      	ldr	r3, [pc, #52]	; (8011b40 <__smakebuf_r+0x7c>)
 8011b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b0c:	89a3      	ldrh	r3, [r4, #12]
 8011b0e:	6020      	str	r0, [r4, #0]
 8011b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b14:	81a3      	strh	r3, [r4, #12]
 8011b16:	9b00      	ldr	r3, [sp, #0]
 8011b18:	6163      	str	r3, [r4, #20]
 8011b1a:	9b01      	ldr	r3, [sp, #4]
 8011b1c:	6120      	str	r0, [r4, #16]
 8011b1e:	b15b      	cbz	r3, 8011b38 <__smakebuf_r+0x74>
 8011b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b24:	4630      	mov	r0, r6
 8011b26:	f000 fddf 	bl	80126e8 <_isatty_r>
 8011b2a:	b128      	cbz	r0, 8011b38 <__smakebuf_r+0x74>
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	f023 0303 	bic.w	r3, r3, #3
 8011b32:	f043 0301 	orr.w	r3, r3, #1
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	89a0      	ldrh	r0, [r4, #12]
 8011b3a:	4305      	orrs	r5, r0
 8011b3c:	81a5      	strh	r5, [r4, #12]
 8011b3e:	e7cd      	b.n	8011adc <__smakebuf_r+0x18>
 8011b40:	080118a1 	.word	0x080118a1

08011b44 <__ascii_mbtowc>:
 8011b44:	b082      	sub	sp, #8
 8011b46:	b901      	cbnz	r1, 8011b4a <__ascii_mbtowc+0x6>
 8011b48:	a901      	add	r1, sp, #4
 8011b4a:	b142      	cbz	r2, 8011b5e <__ascii_mbtowc+0x1a>
 8011b4c:	b14b      	cbz	r3, 8011b62 <__ascii_mbtowc+0x1e>
 8011b4e:	7813      	ldrb	r3, [r2, #0]
 8011b50:	600b      	str	r3, [r1, #0]
 8011b52:	7812      	ldrb	r2, [r2, #0]
 8011b54:	1e10      	subs	r0, r2, #0
 8011b56:	bf18      	it	ne
 8011b58:	2001      	movne	r0, #1
 8011b5a:	b002      	add	sp, #8
 8011b5c:	4770      	bx	lr
 8011b5e:	4610      	mov	r0, r2
 8011b60:	e7fb      	b.n	8011b5a <__ascii_mbtowc+0x16>
 8011b62:	f06f 0001 	mvn.w	r0, #1
 8011b66:	e7f8      	b.n	8011b5a <__ascii_mbtowc+0x16>

08011b68 <memmove>:
 8011b68:	4288      	cmp	r0, r1
 8011b6a:	b510      	push	{r4, lr}
 8011b6c:	eb01 0402 	add.w	r4, r1, r2
 8011b70:	d902      	bls.n	8011b78 <memmove+0x10>
 8011b72:	4284      	cmp	r4, r0
 8011b74:	4623      	mov	r3, r4
 8011b76:	d807      	bhi.n	8011b88 <memmove+0x20>
 8011b78:	1e43      	subs	r3, r0, #1
 8011b7a:	42a1      	cmp	r1, r4
 8011b7c:	d008      	beq.n	8011b90 <memmove+0x28>
 8011b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b86:	e7f8      	b.n	8011b7a <memmove+0x12>
 8011b88:	4402      	add	r2, r0
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	428a      	cmp	r2, r1
 8011b8e:	d100      	bne.n	8011b92 <memmove+0x2a>
 8011b90:	bd10      	pop	{r4, pc}
 8011b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b9a:	e7f7      	b.n	8011b8c <memmove+0x24>

08011b9c <__malloc_lock>:
 8011b9c:	4801      	ldr	r0, [pc, #4]	; (8011ba4 <__malloc_lock+0x8>)
 8011b9e:	f7ff bf56 	b.w	8011a4e <__retarget_lock_acquire_recursive>
 8011ba2:	bf00      	nop
 8011ba4:	20005c54 	.word	0x20005c54

08011ba8 <__malloc_unlock>:
 8011ba8:	4801      	ldr	r0, [pc, #4]	; (8011bb0 <__malloc_unlock+0x8>)
 8011baa:	f7ff bf51 	b.w	8011a50 <__retarget_lock_release_recursive>
 8011bae:	bf00      	nop
 8011bb0:	20005c54 	.word	0x20005c54

08011bb4 <_Balloc>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011bb8:	4604      	mov	r4, r0
 8011bba:	460d      	mov	r5, r1
 8011bbc:	b976      	cbnz	r6, 8011bdc <_Balloc+0x28>
 8011bbe:	2010      	movs	r0, #16
 8011bc0:	f7fd fed2 	bl	800f968 <malloc>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	6260      	str	r0, [r4, #36]	; 0x24
 8011bc8:	b920      	cbnz	r0, 8011bd4 <_Balloc+0x20>
 8011bca:	4b18      	ldr	r3, [pc, #96]	; (8011c2c <_Balloc+0x78>)
 8011bcc:	4818      	ldr	r0, [pc, #96]	; (8011c30 <_Balloc+0x7c>)
 8011bce:	2166      	movs	r1, #102	; 0x66
 8011bd0:	f7fd fe70 	bl	800f8b4 <__assert_func>
 8011bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011bd8:	6006      	str	r6, [r0, #0]
 8011bda:	60c6      	str	r6, [r0, #12]
 8011bdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011bde:	68f3      	ldr	r3, [r6, #12]
 8011be0:	b183      	cbz	r3, 8011c04 <_Balloc+0x50>
 8011be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011bea:	b9b8      	cbnz	r0, 8011c1c <_Balloc+0x68>
 8011bec:	2101      	movs	r1, #1
 8011bee:	fa01 f605 	lsl.w	r6, r1, r5
 8011bf2:	1d72      	adds	r2, r6, #5
 8011bf4:	0092      	lsls	r2, r2, #2
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f000 fb60 	bl	80122bc <_calloc_r>
 8011bfc:	b160      	cbz	r0, 8011c18 <_Balloc+0x64>
 8011bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c02:	e00e      	b.n	8011c22 <_Balloc+0x6e>
 8011c04:	2221      	movs	r2, #33	; 0x21
 8011c06:	2104      	movs	r1, #4
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 fb57 	bl	80122bc <_calloc_r>
 8011c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c10:	60f0      	str	r0, [r6, #12]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1e4      	bne.n	8011be2 <_Balloc+0x2e>
 8011c18:	2000      	movs	r0, #0
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
 8011c1c:	6802      	ldr	r2, [r0, #0]
 8011c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c22:	2300      	movs	r3, #0
 8011c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c28:	e7f7      	b.n	8011c1a <_Balloc+0x66>
 8011c2a:	bf00      	nop
 8011c2c:	0802e6b7 	.word	0x0802e6b7
 8011c30:	0802e7a6 	.word	0x0802e7a6

08011c34 <_Bfree>:
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c38:	4605      	mov	r5, r0
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	b976      	cbnz	r6, 8011c5c <_Bfree+0x28>
 8011c3e:	2010      	movs	r0, #16
 8011c40:	f7fd fe92 	bl	800f968 <malloc>
 8011c44:	4602      	mov	r2, r0
 8011c46:	6268      	str	r0, [r5, #36]	; 0x24
 8011c48:	b920      	cbnz	r0, 8011c54 <_Bfree+0x20>
 8011c4a:	4b09      	ldr	r3, [pc, #36]	; (8011c70 <_Bfree+0x3c>)
 8011c4c:	4809      	ldr	r0, [pc, #36]	; (8011c74 <_Bfree+0x40>)
 8011c4e:	218a      	movs	r1, #138	; 0x8a
 8011c50:	f7fd fe30 	bl	800f8b4 <__assert_func>
 8011c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c58:	6006      	str	r6, [r0, #0]
 8011c5a:	60c6      	str	r6, [r0, #12]
 8011c5c:	b13c      	cbz	r4, 8011c6e <_Bfree+0x3a>
 8011c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011c60:	6862      	ldr	r2, [r4, #4]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c68:	6021      	str	r1, [r4, #0]
 8011c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c6e:	bd70      	pop	{r4, r5, r6, pc}
 8011c70:	0802e6b7 	.word	0x0802e6b7
 8011c74:	0802e7a6 	.word	0x0802e7a6

08011c78 <__multadd>:
 8011c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7c:	690d      	ldr	r5, [r1, #16]
 8011c7e:	4607      	mov	r7, r0
 8011c80:	460c      	mov	r4, r1
 8011c82:	461e      	mov	r6, r3
 8011c84:	f101 0c14 	add.w	ip, r1, #20
 8011c88:	2000      	movs	r0, #0
 8011c8a:	f8dc 3000 	ldr.w	r3, [ip]
 8011c8e:	b299      	uxth	r1, r3
 8011c90:	fb02 6101 	mla	r1, r2, r1, r6
 8011c94:	0c1e      	lsrs	r6, r3, #16
 8011c96:	0c0b      	lsrs	r3, r1, #16
 8011c98:	fb02 3306 	mla	r3, r2, r6, r3
 8011c9c:	b289      	uxth	r1, r1
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ca4:	4285      	cmp	r5, r0
 8011ca6:	f84c 1b04 	str.w	r1, [ip], #4
 8011caa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011cae:	dcec      	bgt.n	8011c8a <__multadd+0x12>
 8011cb0:	b30e      	cbz	r6, 8011cf6 <__multadd+0x7e>
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	42ab      	cmp	r3, r5
 8011cb6:	dc19      	bgt.n	8011cec <__multadd+0x74>
 8011cb8:	6861      	ldr	r1, [r4, #4]
 8011cba:	4638      	mov	r0, r7
 8011cbc:	3101      	adds	r1, #1
 8011cbe:	f7ff ff79 	bl	8011bb4 <_Balloc>
 8011cc2:	4680      	mov	r8, r0
 8011cc4:	b928      	cbnz	r0, 8011cd2 <__multadd+0x5a>
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <__multadd+0x84>)
 8011cca:	480d      	ldr	r0, [pc, #52]	; (8011d00 <__multadd+0x88>)
 8011ccc:	21b5      	movs	r1, #181	; 0xb5
 8011cce:	f7fd fdf1 	bl	800f8b4 <__assert_func>
 8011cd2:	6922      	ldr	r2, [r4, #16]
 8011cd4:	3202      	adds	r2, #2
 8011cd6:	f104 010c 	add.w	r1, r4, #12
 8011cda:	0092      	lsls	r2, r2, #2
 8011cdc:	300c      	adds	r0, #12
 8011cde:	f7fd fe53 	bl	800f988 <memcpy>
 8011ce2:	4621      	mov	r1, r4
 8011ce4:	4638      	mov	r0, r7
 8011ce6:	f7ff ffa5 	bl	8011c34 <_Bfree>
 8011cea:	4644      	mov	r4, r8
 8011cec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011cf0:	3501      	adds	r5, #1
 8011cf2:	615e      	str	r6, [r3, #20]
 8011cf4:	6125      	str	r5, [r4, #16]
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cfc:	0802e729 	.word	0x0802e729
 8011d00:	0802e7a6 	.word	0x0802e7a6

08011d04 <__hi0bits>:
 8011d04:	0c03      	lsrs	r3, r0, #16
 8011d06:	041b      	lsls	r3, r3, #16
 8011d08:	b9d3      	cbnz	r3, 8011d40 <__hi0bits+0x3c>
 8011d0a:	0400      	lsls	r0, r0, #16
 8011d0c:	2310      	movs	r3, #16
 8011d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011d12:	bf04      	itt	eq
 8011d14:	0200      	lsleq	r0, r0, #8
 8011d16:	3308      	addeq	r3, #8
 8011d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011d1c:	bf04      	itt	eq
 8011d1e:	0100      	lsleq	r0, r0, #4
 8011d20:	3304      	addeq	r3, #4
 8011d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011d26:	bf04      	itt	eq
 8011d28:	0080      	lsleq	r0, r0, #2
 8011d2a:	3302      	addeq	r3, #2
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	db05      	blt.n	8011d3c <__hi0bits+0x38>
 8011d30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011d34:	f103 0301 	add.w	r3, r3, #1
 8011d38:	bf08      	it	eq
 8011d3a:	2320      	moveq	r3, #32
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	4770      	bx	lr
 8011d40:	2300      	movs	r3, #0
 8011d42:	e7e4      	b.n	8011d0e <__hi0bits+0xa>

08011d44 <__lo0bits>:
 8011d44:	6803      	ldr	r3, [r0, #0]
 8011d46:	f013 0207 	ands.w	r2, r3, #7
 8011d4a:	4601      	mov	r1, r0
 8011d4c:	d00b      	beq.n	8011d66 <__lo0bits+0x22>
 8011d4e:	07da      	lsls	r2, r3, #31
 8011d50:	d423      	bmi.n	8011d9a <__lo0bits+0x56>
 8011d52:	0798      	lsls	r0, r3, #30
 8011d54:	bf49      	itett	mi
 8011d56:	085b      	lsrmi	r3, r3, #1
 8011d58:	089b      	lsrpl	r3, r3, #2
 8011d5a:	2001      	movmi	r0, #1
 8011d5c:	600b      	strmi	r3, [r1, #0]
 8011d5e:	bf5c      	itt	pl
 8011d60:	600b      	strpl	r3, [r1, #0]
 8011d62:	2002      	movpl	r0, #2
 8011d64:	4770      	bx	lr
 8011d66:	b298      	uxth	r0, r3
 8011d68:	b9a8      	cbnz	r0, 8011d96 <__lo0bits+0x52>
 8011d6a:	0c1b      	lsrs	r3, r3, #16
 8011d6c:	2010      	movs	r0, #16
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	b90a      	cbnz	r2, 8011d76 <__lo0bits+0x32>
 8011d72:	3008      	adds	r0, #8
 8011d74:	0a1b      	lsrs	r3, r3, #8
 8011d76:	071a      	lsls	r2, r3, #28
 8011d78:	bf04      	itt	eq
 8011d7a:	091b      	lsreq	r3, r3, #4
 8011d7c:	3004      	addeq	r0, #4
 8011d7e:	079a      	lsls	r2, r3, #30
 8011d80:	bf04      	itt	eq
 8011d82:	089b      	lsreq	r3, r3, #2
 8011d84:	3002      	addeq	r0, #2
 8011d86:	07da      	lsls	r2, r3, #31
 8011d88:	d403      	bmi.n	8011d92 <__lo0bits+0x4e>
 8011d8a:	085b      	lsrs	r3, r3, #1
 8011d8c:	f100 0001 	add.w	r0, r0, #1
 8011d90:	d005      	beq.n	8011d9e <__lo0bits+0x5a>
 8011d92:	600b      	str	r3, [r1, #0]
 8011d94:	4770      	bx	lr
 8011d96:	4610      	mov	r0, r2
 8011d98:	e7e9      	b.n	8011d6e <__lo0bits+0x2a>
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	4770      	bx	lr
 8011d9e:	2020      	movs	r0, #32
 8011da0:	4770      	bx	lr
	...

08011da4 <__i2b>:
 8011da4:	b510      	push	{r4, lr}
 8011da6:	460c      	mov	r4, r1
 8011da8:	2101      	movs	r1, #1
 8011daa:	f7ff ff03 	bl	8011bb4 <_Balloc>
 8011dae:	4602      	mov	r2, r0
 8011db0:	b928      	cbnz	r0, 8011dbe <__i2b+0x1a>
 8011db2:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <__i2b+0x24>)
 8011db4:	4805      	ldr	r0, [pc, #20]	; (8011dcc <__i2b+0x28>)
 8011db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011dba:	f7fd fd7b 	bl	800f8b4 <__assert_func>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	6144      	str	r4, [r0, #20]
 8011dc2:	6103      	str	r3, [r0, #16]
 8011dc4:	bd10      	pop	{r4, pc}
 8011dc6:	bf00      	nop
 8011dc8:	0802e729 	.word	0x0802e729
 8011dcc:	0802e7a6 	.word	0x0802e7a6

08011dd0 <__multiply>:
 8011dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	4691      	mov	r9, r2
 8011dd6:	690a      	ldr	r2, [r1, #16]
 8011dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	bfb8      	it	lt
 8011de0:	460b      	movlt	r3, r1
 8011de2:	460c      	mov	r4, r1
 8011de4:	bfbc      	itt	lt
 8011de6:	464c      	movlt	r4, r9
 8011de8:	4699      	movlt	r9, r3
 8011dea:	6927      	ldr	r7, [r4, #16]
 8011dec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011df0:	68a3      	ldr	r3, [r4, #8]
 8011df2:	6861      	ldr	r1, [r4, #4]
 8011df4:	eb07 060a 	add.w	r6, r7, sl
 8011df8:	42b3      	cmp	r3, r6
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	bfb8      	it	lt
 8011dfe:	3101      	addlt	r1, #1
 8011e00:	f7ff fed8 	bl	8011bb4 <_Balloc>
 8011e04:	b930      	cbnz	r0, 8011e14 <__multiply+0x44>
 8011e06:	4602      	mov	r2, r0
 8011e08:	4b44      	ldr	r3, [pc, #272]	; (8011f1c <__multiply+0x14c>)
 8011e0a:	4845      	ldr	r0, [pc, #276]	; (8011f20 <__multiply+0x150>)
 8011e0c:	f240 115d 	movw	r1, #349	; 0x15d
 8011e10:	f7fd fd50 	bl	800f8b4 <__assert_func>
 8011e14:	f100 0514 	add.w	r5, r0, #20
 8011e18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011e1c:	462b      	mov	r3, r5
 8011e1e:	2200      	movs	r2, #0
 8011e20:	4543      	cmp	r3, r8
 8011e22:	d321      	bcc.n	8011e68 <__multiply+0x98>
 8011e24:	f104 0314 	add.w	r3, r4, #20
 8011e28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011e2c:	f109 0314 	add.w	r3, r9, #20
 8011e30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011e34:	9202      	str	r2, [sp, #8]
 8011e36:	1b3a      	subs	r2, r7, r4
 8011e38:	3a15      	subs	r2, #21
 8011e3a:	f022 0203 	bic.w	r2, r2, #3
 8011e3e:	3204      	adds	r2, #4
 8011e40:	f104 0115 	add.w	r1, r4, #21
 8011e44:	428f      	cmp	r7, r1
 8011e46:	bf38      	it	cc
 8011e48:	2204      	movcc	r2, #4
 8011e4a:	9201      	str	r2, [sp, #4]
 8011e4c:	9a02      	ldr	r2, [sp, #8]
 8011e4e:	9303      	str	r3, [sp, #12]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d80c      	bhi.n	8011e6e <__multiply+0x9e>
 8011e54:	2e00      	cmp	r6, #0
 8011e56:	dd03      	ble.n	8011e60 <__multiply+0x90>
 8011e58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d05a      	beq.n	8011f16 <__multiply+0x146>
 8011e60:	6106      	str	r6, [r0, #16]
 8011e62:	b005      	add	sp, #20
 8011e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e68:	f843 2b04 	str.w	r2, [r3], #4
 8011e6c:	e7d8      	b.n	8011e20 <__multiply+0x50>
 8011e6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011e72:	f1ba 0f00 	cmp.w	sl, #0
 8011e76:	d024      	beq.n	8011ec2 <__multiply+0xf2>
 8011e78:	f104 0e14 	add.w	lr, r4, #20
 8011e7c:	46a9      	mov	r9, r5
 8011e7e:	f04f 0c00 	mov.w	ip, #0
 8011e82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011e86:	f8d9 1000 	ldr.w	r1, [r9]
 8011e8a:	fa1f fb82 	uxth.w	fp, r2
 8011e8e:	b289      	uxth	r1, r1
 8011e90:	fb0a 110b 	mla	r1, sl, fp, r1
 8011e94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011e98:	f8d9 2000 	ldr.w	r2, [r9]
 8011e9c:	4461      	add	r1, ip
 8011e9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ea2:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011eaa:	b289      	uxth	r1, r1
 8011eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011eb0:	4577      	cmp	r7, lr
 8011eb2:	f849 1b04 	str.w	r1, [r9], #4
 8011eb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011eba:	d8e2      	bhi.n	8011e82 <__multiply+0xb2>
 8011ebc:	9a01      	ldr	r2, [sp, #4]
 8011ebe:	f845 c002 	str.w	ip, [r5, r2]
 8011ec2:	9a03      	ldr	r2, [sp, #12]
 8011ec4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ec8:	3304      	adds	r3, #4
 8011eca:	f1b9 0f00 	cmp.w	r9, #0
 8011ece:	d020      	beq.n	8011f12 <__multiply+0x142>
 8011ed0:	6829      	ldr	r1, [r5, #0]
 8011ed2:	f104 0c14 	add.w	ip, r4, #20
 8011ed6:	46ae      	mov	lr, r5
 8011ed8:	f04f 0a00 	mov.w	sl, #0
 8011edc:	f8bc b000 	ldrh.w	fp, [ip]
 8011ee0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ee4:	fb09 220b 	mla	r2, r9, fp, r2
 8011ee8:	4492      	add	sl, r2
 8011eea:	b289      	uxth	r1, r1
 8011eec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011ef0:	f84e 1b04 	str.w	r1, [lr], #4
 8011ef4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011ef8:	f8be 1000 	ldrh.w	r1, [lr]
 8011efc:	0c12      	lsrs	r2, r2, #16
 8011efe:	fb09 1102 	mla	r1, r9, r2, r1
 8011f02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011f06:	4567      	cmp	r7, ip
 8011f08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011f0c:	d8e6      	bhi.n	8011edc <__multiply+0x10c>
 8011f0e:	9a01      	ldr	r2, [sp, #4]
 8011f10:	50a9      	str	r1, [r5, r2]
 8011f12:	3504      	adds	r5, #4
 8011f14:	e79a      	b.n	8011e4c <__multiply+0x7c>
 8011f16:	3e01      	subs	r6, #1
 8011f18:	e79c      	b.n	8011e54 <__multiply+0x84>
 8011f1a:	bf00      	nop
 8011f1c:	0802e729 	.word	0x0802e729
 8011f20:	0802e7a6 	.word	0x0802e7a6

08011f24 <__pow5mult>:
 8011f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f28:	4615      	mov	r5, r2
 8011f2a:	f012 0203 	ands.w	r2, r2, #3
 8011f2e:	4606      	mov	r6, r0
 8011f30:	460f      	mov	r7, r1
 8011f32:	d007      	beq.n	8011f44 <__pow5mult+0x20>
 8011f34:	4c25      	ldr	r4, [pc, #148]	; (8011fcc <__pow5mult+0xa8>)
 8011f36:	3a01      	subs	r2, #1
 8011f38:	2300      	movs	r3, #0
 8011f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f3e:	f7ff fe9b 	bl	8011c78 <__multadd>
 8011f42:	4607      	mov	r7, r0
 8011f44:	10ad      	asrs	r5, r5, #2
 8011f46:	d03d      	beq.n	8011fc4 <__pow5mult+0xa0>
 8011f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011f4a:	b97c      	cbnz	r4, 8011f6c <__pow5mult+0x48>
 8011f4c:	2010      	movs	r0, #16
 8011f4e:	f7fd fd0b 	bl	800f968 <malloc>
 8011f52:	4602      	mov	r2, r0
 8011f54:	6270      	str	r0, [r6, #36]	; 0x24
 8011f56:	b928      	cbnz	r0, 8011f64 <__pow5mult+0x40>
 8011f58:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <__pow5mult+0xac>)
 8011f5a:	481e      	ldr	r0, [pc, #120]	; (8011fd4 <__pow5mult+0xb0>)
 8011f5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011f60:	f7fd fca8 	bl	800f8b4 <__assert_func>
 8011f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f68:	6004      	str	r4, [r0, #0]
 8011f6a:	60c4      	str	r4, [r0, #12]
 8011f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f74:	b94c      	cbnz	r4, 8011f8a <__pow5mult+0x66>
 8011f76:	f240 2171 	movw	r1, #625	; 0x271
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f7ff ff12 	bl	8011da4 <__i2b>
 8011f80:	2300      	movs	r3, #0
 8011f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f86:	4604      	mov	r4, r0
 8011f88:	6003      	str	r3, [r0, #0]
 8011f8a:	f04f 0900 	mov.w	r9, #0
 8011f8e:	07eb      	lsls	r3, r5, #31
 8011f90:	d50a      	bpl.n	8011fa8 <__pow5mult+0x84>
 8011f92:	4639      	mov	r1, r7
 8011f94:	4622      	mov	r2, r4
 8011f96:	4630      	mov	r0, r6
 8011f98:	f7ff ff1a 	bl	8011dd0 <__multiply>
 8011f9c:	4639      	mov	r1, r7
 8011f9e:	4680      	mov	r8, r0
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f7ff fe47 	bl	8011c34 <_Bfree>
 8011fa6:	4647      	mov	r7, r8
 8011fa8:	106d      	asrs	r5, r5, #1
 8011faa:	d00b      	beq.n	8011fc4 <__pow5mult+0xa0>
 8011fac:	6820      	ldr	r0, [r4, #0]
 8011fae:	b938      	cbnz	r0, 8011fc0 <__pow5mult+0x9c>
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	4621      	mov	r1, r4
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f7ff ff0b 	bl	8011dd0 <__multiply>
 8011fba:	6020      	str	r0, [r4, #0]
 8011fbc:	f8c0 9000 	str.w	r9, [r0]
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	e7e4      	b.n	8011f8e <__pow5mult+0x6a>
 8011fc4:	4638      	mov	r0, r7
 8011fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fca:	bf00      	nop
 8011fcc:	0802e8f8 	.word	0x0802e8f8
 8011fd0:	0802e6b7 	.word	0x0802e6b7
 8011fd4:	0802e7a6 	.word	0x0802e7a6

08011fd8 <__lshift>:
 8011fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fdc:	460c      	mov	r4, r1
 8011fde:	6849      	ldr	r1, [r1, #4]
 8011fe0:	6923      	ldr	r3, [r4, #16]
 8011fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011fe6:	68a3      	ldr	r3, [r4, #8]
 8011fe8:	4607      	mov	r7, r0
 8011fea:	4691      	mov	r9, r2
 8011fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ff0:	f108 0601 	add.w	r6, r8, #1
 8011ff4:	42b3      	cmp	r3, r6
 8011ff6:	db0b      	blt.n	8012010 <__lshift+0x38>
 8011ff8:	4638      	mov	r0, r7
 8011ffa:	f7ff fddb 	bl	8011bb4 <_Balloc>
 8011ffe:	4605      	mov	r5, r0
 8012000:	b948      	cbnz	r0, 8012016 <__lshift+0x3e>
 8012002:	4602      	mov	r2, r0
 8012004:	4b2a      	ldr	r3, [pc, #168]	; (80120b0 <__lshift+0xd8>)
 8012006:	482b      	ldr	r0, [pc, #172]	; (80120b4 <__lshift+0xdc>)
 8012008:	f240 11d9 	movw	r1, #473	; 0x1d9
 801200c:	f7fd fc52 	bl	800f8b4 <__assert_func>
 8012010:	3101      	adds	r1, #1
 8012012:	005b      	lsls	r3, r3, #1
 8012014:	e7ee      	b.n	8011ff4 <__lshift+0x1c>
 8012016:	2300      	movs	r3, #0
 8012018:	f100 0114 	add.w	r1, r0, #20
 801201c:	f100 0210 	add.w	r2, r0, #16
 8012020:	4618      	mov	r0, r3
 8012022:	4553      	cmp	r3, sl
 8012024:	db37      	blt.n	8012096 <__lshift+0xbe>
 8012026:	6920      	ldr	r0, [r4, #16]
 8012028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801202c:	f104 0314 	add.w	r3, r4, #20
 8012030:	f019 091f 	ands.w	r9, r9, #31
 8012034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801203c:	d02f      	beq.n	801209e <__lshift+0xc6>
 801203e:	f1c9 0e20 	rsb	lr, r9, #32
 8012042:	468a      	mov	sl, r1
 8012044:	f04f 0c00 	mov.w	ip, #0
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	fa02 f209 	lsl.w	r2, r2, r9
 801204e:	ea42 020c 	orr.w	r2, r2, ip
 8012052:	f84a 2b04 	str.w	r2, [sl], #4
 8012056:	f853 2b04 	ldr.w	r2, [r3], #4
 801205a:	4298      	cmp	r0, r3
 801205c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012060:	d8f2      	bhi.n	8012048 <__lshift+0x70>
 8012062:	1b03      	subs	r3, r0, r4
 8012064:	3b15      	subs	r3, #21
 8012066:	f023 0303 	bic.w	r3, r3, #3
 801206a:	3304      	adds	r3, #4
 801206c:	f104 0215 	add.w	r2, r4, #21
 8012070:	4290      	cmp	r0, r2
 8012072:	bf38      	it	cc
 8012074:	2304      	movcc	r3, #4
 8012076:	f841 c003 	str.w	ip, [r1, r3]
 801207a:	f1bc 0f00 	cmp.w	ip, #0
 801207e:	d001      	beq.n	8012084 <__lshift+0xac>
 8012080:	f108 0602 	add.w	r6, r8, #2
 8012084:	3e01      	subs	r6, #1
 8012086:	4638      	mov	r0, r7
 8012088:	612e      	str	r6, [r5, #16]
 801208a:	4621      	mov	r1, r4
 801208c:	f7ff fdd2 	bl	8011c34 <_Bfree>
 8012090:	4628      	mov	r0, r5
 8012092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012096:	f842 0f04 	str.w	r0, [r2, #4]!
 801209a:	3301      	adds	r3, #1
 801209c:	e7c1      	b.n	8012022 <__lshift+0x4a>
 801209e:	3904      	subs	r1, #4
 80120a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80120a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80120a8:	4298      	cmp	r0, r3
 80120aa:	d8f9      	bhi.n	80120a0 <__lshift+0xc8>
 80120ac:	e7ea      	b.n	8012084 <__lshift+0xac>
 80120ae:	bf00      	nop
 80120b0:	0802e729 	.word	0x0802e729
 80120b4:	0802e7a6 	.word	0x0802e7a6

080120b8 <__mcmp>:
 80120b8:	b530      	push	{r4, r5, lr}
 80120ba:	6902      	ldr	r2, [r0, #16]
 80120bc:	690c      	ldr	r4, [r1, #16]
 80120be:	1b12      	subs	r2, r2, r4
 80120c0:	d10e      	bne.n	80120e0 <__mcmp+0x28>
 80120c2:	f100 0314 	add.w	r3, r0, #20
 80120c6:	3114      	adds	r1, #20
 80120c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80120cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80120d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80120d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80120d8:	42a5      	cmp	r5, r4
 80120da:	d003      	beq.n	80120e4 <__mcmp+0x2c>
 80120dc:	d305      	bcc.n	80120ea <__mcmp+0x32>
 80120de:	2201      	movs	r2, #1
 80120e0:	4610      	mov	r0, r2
 80120e2:	bd30      	pop	{r4, r5, pc}
 80120e4:	4283      	cmp	r3, r0
 80120e6:	d3f3      	bcc.n	80120d0 <__mcmp+0x18>
 80120e8:	e7fa      	b.n	80120e0 <__mcmp+0x28>
 80120ea:	f04f 32ff 	mov.w	r2, #4294967295
 80120ee:	e7f7      	b.n	80120e0 <__mcmp+0x28>

080120f0 <__mdiff>:
 80120f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f4:	460c      	mov	r4, r1
 80120f6:	4606      	mov	r6, r0
 80120f8:	4611      	mov	r1, r2
 80120fa:	4620      	mov	r0, r4
 80120fc:	4690      	mov	r8, r2
 80120fe:	f7ff ffdb 	bl	80120b8 <__mcmp>
 8012102:	1e05      	subs	r5, r0, #0
 8012104:	d110      	bne.n	8012128 <__mdiff+0x38>
 8012106:	4629      	mov	r1, r5
 8012108:	4630      	mov	r0, r6
 801210a:	f7ff fd53 	bl	8011bb4 <_Balloc>
 801210e:	b930      	cbnz	r0, 801211e <__mdiff+0x2e>
 8012110:	4b3a      	ldr	r3, [pc, #232]	; (80121fc <__mdiff+0x10c>)
 8012112:	4602      	mov	r2, r0
 8012114:	f240 2132 	movw	r1, #562	; 0x232
 8012118:	4839      	ldr	r0, [pc, #228]	; (8012200 <__mdiff+0x110>)
 801211a:	f7fd fbcb 	bl	800f8b4 <__assert_func>
 801211e:	2301      	movs	r3, #1
 8012120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012128:	bfa4      	itt	ge
 801212a:	4643      	movge	r3, r8
 801212c:	46a0      	movge	r8, r4
 801212e:	4630      	mov	r0, r6
 8012130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012134:	bfa6      	itte	ge
 8012136:	461c      	movge	r4, r3
 8012138:	2500      	movge	r5, #0
 801213a:	2501      	movlt	r5, #1
 801213c:	f7ff fd3a 	bl	8011bb4 <_Balloc>
 8012140:	b920      	cbnz	r0, 801214c <__mdiff+0x5c>
 8012142:	4b2e      	ldr	r3, [pc, #184]	; (80121fc <__mdiff+0x10c>)
 8012144:	4602      	mov	r2, r0
 8012146:	f44f 7110 	mov.w	r1, #576	; 0x240
 801214a:	e7e5      	b.n	8012118 <__mdiff+0x28>
 801214c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012150:	6926      	ldr	r6, [r4, #16]
 8012152:	60c5      	str	r5, [r0, #12]
 8012154:	f104 0914 	add.w	r9, r4, #20
 8012158:	f108 0514 	add.w	r5, r8, #20
 801215c:	f100 0e14 	add.w	lr, r0, #20
 8012160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012168:	f108 0210 	add.w	r2, r8, #16
 801216c:	46f2      	mov	sl, lr
 801216e:	2100      	movs	r1, #0
 8012170:	f859 3b04 	ldr.w	r3, [r9], #4
 8012174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012178:	fa1f f883 	uxth.w	r8, r3
 801217c:	fa11 f18b 	uxtah	r1, r1, fp
 8012180:	0c1b      	lsrs	r3, r3, #16
 8012182:	eba1 0808 	sub.w	r8, r1, r8
 8012186:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801218a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801218e:	fa1f f888 	uxth.w	r8, r8
 8012192:	1419      	asrs	r1, r3, #16
 8012194:	454e      	cmp	r6, r9
 8012196:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801219a:	f84a 3b04 	str.w	r3, [sl], #4
 801219e:	d8e7      	bhi.n	8012170 <__mdiff+0x80>
 80121a0:	1b33      	subs	r3, r6, r4
 80121a2:	3b15      	subs	r3, #21
 80121a4:	f023 0303 	bic.w	r3, r3, #3
 80121a8:	3304      	adds	r3, #4
 80121aa:	3415      	adds	r4, #21
 80121ac:	42a6      	cmp	r6, r4
 80121ae:	bf38      	it	cc
 80121b0:	2304      	movcc	r3, #4
 80121b2:	441d      	add	r5, r3
 80121b4:	4473      	add	r3, lr
 80121b6:	469e      	mov	lr, r3
 80121b8:	462e      	mov	r6, r5
 80121ba:	4566      	cmp	r6, ip
 80121bc:	d30e      	bcc.n	80121dc <__mdiff+0xec>
 80121be:	f10c 0203 	add.w	r2, ip, #3
 80121c2:	1b52      	subs	r2, r2, r5
 80121c4:	f022 0203 	bic.w	r2, r2, #3
 80121c8:	3d03      	subs	r5, #3
 80121ca:	45ac      	cmp	ip, r5
 80121cc:	bf38      	it	cc
 80121ce:	2200      	movcc	r2, #0
 80121d0:	441a      	add	r2, r3
 80121d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80121d6:	b17b      	cbz	r3, 80121f8 <__mdiff+0x108>
 80121d8:	6107      	str	r7, [r0, #16]
 80121da:	e7a3      	b.n	8012124 <__mdiff+0x34>
 80121dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80121e0:	fa11 f288 	uxtah	r2, r1, r8
 80121e4:	1414      	asrs	r4, r2, #16
 80121e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80121ea:	b292      	uxth	r2, r2
 80121ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80121f0:	f84e 2b04 	str.w	r2, [lr], #4
 80121f4:	1421      	asrs	r1, r4, #16
 80121f6:	e7e0      	b.n	80121ba <__mdiff+0xca>
 80121f8:	3f01      	subs	r7, #1
 80121fa:	e7ea      	b.n	80121d2 <__mdiff+0xe2>
 80121fc:	0802e729 	.word	0x0802e729
 8012200:	0802e7a6 	.word	0x0802e7a6

08012204 <__d2b>:
 8012204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012208:	4689      	mov	r9, r1
 801220a:	2101      	movs	r1, #1
 801220c:	ec57 6b10 	vmov	r6, r7, d0
 8012210:	4690      	mov	r8, r2
 8012212:	f7ff fccf 	bl	8011bb4 <_Balloc>
 8012216:	4604      	mov	r4, r0
 8012218:	b930      	cbnz	r0, 8012228 <__d2b+0x24>
 801221a:	4602      	mov	r2, r0
 801221c:	4b25      	ldr	r3, [pc, #148]	; (80122b4 <__d2b+0xb0>)
 801221e:	4826      	ldr	r0, [pc, #152]	; (80122b8 <__d2b+0xb4>)
 8012220:	f240 310a 	movw	r1, #778	; 0x30a
 8012224:	f7fd fb46 	bl	800f8b4 <__assert_func>
 8012228:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801222c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012230:	bb35      	cbnz	r5, 8012280 <__d2b+0x7c>
 8012232:	2e00      	cmp	r6, #0
 8012234:	9301      	str	r3, [sp, #4]
 8012236:	d028      	beq.n	801228a <__d2b+0x86>
 8012238:	4668      	mov	r0, sp
 801223a:	9600      	str	r6, [sp, #0]
 801223c:	f7ff fd82 	bl	8011d44 <__lo0bits>
 8012240:	9900      	ldr	r1, [sp, #0]
 8012242:	b300      	cbz	r0, 8012286 <__d2b+0x82>
 8012244:	9a01      	ldr	r2, [sp, #4]
 8012246:	f1c0 0320 	rsb	r3, r0, #32
 801224a:	fa02 f303 	lsl.w	r3, r2, r3
 801224e:	430b      	orrs	r3, r1
 8012250:	40c2      	lsrs	r2, r0
 8012252:	6163      	str	r3, [r4, #20]
 8012254:	9201      	str	r2, [sp, #4]
 8012256:	9b01      	ldr	r3, [sp, #4]
 8012258:	61a3      	str	r3, [r4, #24]
 801225a:	2b00      	cmp	r3, #0
 801225c:	bf14      	ite	ne
 801225e:	2202      	movne	r2, #2
 8012260:	2201      	moveq	r2, #1
 8012262:	6122      	str	r2, [r4, #16]
 8012264:	b1d5      	cbz	r5, 801229c <__d2b+0x98>
 8012266:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801226a:	4405      	add	r5, r0
 801226c:	f8c9 5000 	str.w	r5, [r9]
 8012270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012274:	f8c8 0000 	str.w	r0, [r8]
 8012278:	4620      	mov	r0, r4
 801227a:	b003      	add	sp, #12
 801227c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012284:	e7d5      	b.n	8012232 <__d2b+0x2e>
 8012286:	6161      	str	r1, [r4, #20]
 8012288:	e7e5      	b.n	8012256 <__d2b+0x52>
 801228a:	a801      	add	r0, sp, #4
 801228c:	f7ff fd5a 	bl	8011d44 <__lo0bits>
 8012290:	9b01      	ldr	r3, [sp, #4]
 8012292:	6163      	str	r3, [r4, #20]
 8012294:	2201      	movs	r2, #1
 8012296:	6122      	str	r2, [r4, #16]
 8012298:	3020      	adds	r0, #32
 801229a:	e7e3      	b.n	8012264 <__d2b+0x60>
 801229c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80122a4:	f8c9 0000 	str.w	r0, [r9]
 80122a8:	6918      	ldr	r0, [r3, #16]
 80122aa:	f7ff fd2b 	bl	8011d04 <__hi0bits>
 80122ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122b2:	e7df      	b.n	8012274 <__d2b+0x70>
 80122b4:	0802e729 	.word	0x0802e729
 80122b8:	0802e7a6 	.word	0x0802e7a6

080122bc <_calloc_r>:
 80122bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122be:	fba1 2402 	umull	r2, r4, r1, r2
 80122c2:	b94c      	cbnz	r4, 80122d8 <_calloc_r+0x1c>
 80122c4:	4611      	mov	r1, r2
 80122c6:	9201      	str	r2, [sp, #4]
 80122c8:	f7fd fbe0 	bl	800fa8c <_malloc_r>
 80122cc:	9a01      	ldr	r2, [sp, #4]
 80122ce:	4605      	mov	r5, r0
 80122d0:	b930      	cbnz	r0, 80122e0 <_calloc_r+0x24>
 80122d2:	4628      	mov	r0, r5
 80122d4:	b003      	add	sp, #12
 80122d6:	bd30      	pop	{r4, r5, pc}
 80122d8:	220c      	movs	r2, #12
 80122da:	6002      	str	r2, [r0, #0]
 80122dc:	2500      	movs	r5, #0
 80122de:	e7f8      	b.n	80122d2 <_calloc_r+0x16>
 80122e0:	4621      	mov	r1, r4
 80122e2:	f7fd fb5f 	bl	800f9a4 <memset>
 80122e6:	e7f4      	b.n	80122d2 <_calloc_r+0x16>

080122e8 <_realloc_r>:
 80122e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	4680      	mov	r8, r0
 80122ee:	4614      	mov	r4, r2
 80122f0:	460e      	mov	r6, r1
 80122f2:	b921      	cbnz	r1, 80122fe <_realloc_r+0x16>
 80122f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	4611      	mov	r1, r2
 80122fa:	f7fd bbc7 	b.w	800fa8c <_malloc_r>
 80122fe:	b92a      	cbnz	r2, 801230c <_realloc_r+0x24>
 8012300:	f7fd fb58 	bl	800f9b4 <_free_r>
 8012304:	4625      	mov	r5, r4
 8012306:	4628      	mov	r0, r5
 8012308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801230c:	f000 f9fc 	bl	8012708 <_malloc_usable_size_r>
 8012310:	4284      	cmp	r4, r0
 8012312:	4607      	mov	r7, r0
 8012314:	d802      	bhi.n	801231c <_realloc_r+0x34>
 8012316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801231a:	d812      	bhi.n	8012342 <_realloc_r+0x5a>
 801231c:	4621      	mov	r1, r4
 801231e:	4640      	mov	r0, r8
 8012320:	f7fd fbb4 	bl	800fa8c <_malloc_r>
 8012324:	4605      	mov	r5, r0
 8012326:	2800      	cmp	r0, #0
 8012328:	d0ed      	beq.n	8012306 <_realloc_r+0x1e>
 801232a:	42bc      	cmp	r4, r7
 801232c:	4622      	mov	r2, r4
 801232e:	4631      	mov	r1, r6
 8012330:	bf28      	it	cs
 8012332:	463a      	movcs	r2, r7
 8012334:	f7fd fb28 	bl	800f988 <memcpy>
 8012338:	4631      	mov	r1, r6
 801233a:	4640      	mov	r0, r8
 801233c:	f7fd fb3a 	bl	800f9b4 <_free_r>
 8012340:	e7e1      	b.n	8012306 <_realloc_r+0x1e>
 8012342:	4635      	mov	r5, r6
 8012344:	e7df      	b.n	8012306 <_realloc_r+0x1e>

08012346 <__ssputs_r>:
 8012346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801234a:	688e      	ldr	r6, [r1, #8]
 801234c:	429e      	cmp	r6, r3
 801234e:	4682      	mov	sl, r0
 8012350:	460c      	mov	r4, r1
 8012352:	4690      	mov	r8, r2
 8012354:	461f      	mov	r7, r3
 8012356:	d838      	bhi.n	80123ca <__ssputs_r+0x84>
 8012358:	898a      	ldrh	r2, [r1, #12]
 801235a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801235e:	d032      	beq.n	80123c6 <__ssputs_r+0x80>
 8012360:	6825      	ldr	r5, [r4, #0]
 8012362:	6909      	ldr	r1, [r1, #16]
 8012364:	eba5 0901 	sub.w	r9, r5, r1
 8012368:	6965      	ldr	r5, [r4, #20]
 801236a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801236e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012372:	3301      	adds	r3, #1
 8012374:	444b      	add	r3, r9
 8012376:	106d      	asrs	r5, r5, #1
 8012378:	429d      	cmp	r5, r3
 801237a:	bf38      	it	cc
 801237c:	461d      	movcc	r5, r3
 801237e:	0553      	lsls	r3, r2, #21
 8012380:	d531      	bpl.n	80123e6 <__ssputs_r+0xa0>
 8012382:	4629      	mov	r1, r5
 8012384:	f7fd fb82 	bl	800fa8c <_malloc_r>
 8012388:	4606      	mov	r6, r0
 801238a:	b950      	cbnz	r0, 80123a2 <__ssputs_r+0x5c>
 801238c:	230c      	movs	r3, #12
 801238e:	f8ca 3000 	str.w	r3, [sl]
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012398:	81a3      	strh	r3, [r4, #12]
 801239a:	f04f 30ff 	mov.w	r0, #4294967295
 801239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a2:	6921      	ldr	r1, [r4, #16]
 80123a4:	464a      	mov	r2, r9
 80123a6:	f7fd faef 	bl	800f988 <memcpy>
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123b4:	81a3      	strh	r3, [r4, #12]
 80123b6:	6126      	str	r6, [r4, #16]
 80123b8:	6165      	str	r5, [r4, #20]
 80123ba:	444e      	add	r6, r9
 80123bc:	eba5 0509 	sub.w	r5, r5, r9
 80123c0:	6026      	str	r6, [r4, #0]
 80123c2:	60a5      	str	r5, [r4, #8]
 80123c4:	463e      	mov	r6, r7
 80123c6:	42be      	cmp	r6, r7
 80123c8:	d900      	bls.n	80123cc <__ssputs_r+0x86>
 80123ca:	463e      	mov	r6, r7
 80123cc:	6820      	ldr	r0, [r4, #0]
 80123ce:	4632      	mov	r2, r6
 80123d0:	4641      	mov	r1, r8
 80123d2:	f7ff fbc9 	bl	8011b68 <memmove>
 80123d6:	68a3      	ldr	r3, [r4, #8]
 80123d8:	1b9b      	subs	r3, r3, r6
 80123da:	60a3      	str	r3, [r4, #8]
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	4433      	add	r3, r6
 80123e0:	6023      	str	r3, [r4, #0]
 80123e2:	2000      	movs	r0, #0
 80123e4:	e7db      	b.n	801239e <__ssputs_r+0x58>
 80123e6:	462a      	mov	r2, r5
 80123e8:	f7ff ff7e 	bl	80122e8 <_realloc_r>
 80123ec:	4606      	mov	r6, r0
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d1e1      	bne.n	80123b6 <__ssputs_r+0x70>
 80123f2:	6921      	ldr	r1, [r4, #16]
 80123f4:	4650      	mov	r0, sl
 80123f6:	f7fd fadd 	bl	800f9b4 <_free_r>
 80123fa:	e7c7      	b.n	801238c <__ssputs_r+0x46>

080123fc <_svfiprintf_r>:
 80123fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012400:	4698      	mov	r8, r3
 8012402:	898b      	ldrh	r3, [r1, #12]
 8012404:	061b      	lsls	r3, r3, #24
 8012406:	b09d      	sub	sp, #116	; 0x74
 8012408:	4607      	mov	r7, r0
 801240a:	460d      	mov	r5, r1
 801240c:	4614      	mov	r4, r2
 801240e:	d50e      	bpl.n	801242e <_svfiprintf_r+0x32>
 8012410:	690b      	ldr	r3, [r1, #16]
 8012412:	b963      	cbnz	r3, 801242e <_svfiprintf_r+0x32>
 8012414:	2140      	movs	r1, #64	; 0x40
 8012416:	f7fd fb39 	bl	800fa8c <_malloc_r>
 801241a:	6028      	str	r0, [r5, #0]
 801241c:	6128      	str	r0, [r5, #16]
 801241e:	b920      	cbnz	r0, 801242a <_svfiprintf_r+0x2e>
 8012420:	230c      	movs	r3, #12
 8012422:	603b      	str	r3, [r7, #0]
 8012424:	f04f 30ff 	mov.w	r0, #4294967295
 8012428:	e0d1      	b.n	80125ce <_svfiprintf_r+0x1d2>
 801242a:	2340      	movs	r3, #64	; 0x40
 801242c:	616b      	str	r3, [r5, #20]
 801242e:	2300      	movs	r3, #0
 8012430:	9309      	str	r3, [sp, #36]	; 0x24
 8012432:	2320      	movs	r3, #32
 8012434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012438:	f8cd 800c 	str.w	r8, [sp, #12]
 801243c:	2330      	movs	r3, #48	; 0x30
 801243e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80125e8 <_svfiprintf_r+0x1ec>
 8012442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012446:	f04f 0901 	mov.w	r9, #1
 801244a:	4623      	mov	r3, r4
 801244c:	469a      	mov	sl, r3
 801244e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012452:	b10a      	cbz	r2, 8012458 <_svfiprintf_r+0x5c>
 8012454:	2a25      	cmp	r2, #37	; 0x25
 8012456:	d1f9      	bne.n	801244c <_svfiprintf_r+0x50>
 8012458:	ebba 0b04 	subs.w	fp, sl, r4
 801245c:	d00b      	beq.n	8012476 <_svfiprintf_r+0x7a>
 801245e:	465b      	mov	r3, fp
 8012460:	4622      	mov	r2, r4
 8012462:	4629      	mov	r1, r5
 8012464:	4638      	mov	r0, r7
 8012466:	f7ff ff6e 	bl	8012346 <__ssputs_r>
 801246a:	3001      	adds	r0, #1
 801246c:	f000 80aa 	beq.w	80125c4 <_svfiprintf_r+0x1c8>
 8012470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012472:	445a      	add	r2, fp
 8012474:	9209      	str	r2, [sp, #36]	; 0x24
 8012476:	f89a 3000 	ldrb.w	r3, [sl]
 801247a:	2b00      	cmp	r3, #0
 801247c:	f000 80a2 	beq.w	80125c4 <_svfiprintf_r+0x1c8>
 8012480:	2300      	movs	r3, #0
 8012482:	f04f 32ff 	mov.w	r2, #4294967295
 8012486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801248a:	f10a 0a01 	add.w	sl, sl, #1
 801248e:	9304      	str	r3, [sp, #16]
 8012490:	9307      	str	r3, [sp, #28]
 8012492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012496:	931a      	str	r3, [sp, #104]	; 0x68
 8012498:	4654      	mov	r4, sl
 801249a:	2205      	movs	r2, #5
 801249c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a0:	4851      	ldr	r0, [pc, #324]	; (80125e8 <_svfiprintf_r+0x1ec>)
 80124a2:	f7ed fead 	bl	8000200 <memchr>
 80124a6:	9a04      	ldr	r2, [sp, #16]
 80124a8:	b9d8      	cbnz	r0, 80124e2 <_svfiprintf_r+0xe6>
 80124aa:	06d0      	lsls	r0, r2, #27
 80124ac:	bf44      	itt	mi
 80124ae:	2320      	movmi	r3, #32
 80124b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124b4:	0711      	lsls	r1, r2, #28
 80124b6:	bf44      	itt	mi
 80124b8:	232b      	movmi	r3, #43	; 0x2b
 80124ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124be:	f89a 3000 	ldrb.w	r3, [sl]
 80124c2:	2b2a      	cmp	r3, #42	; 0x2a
 80124c4:	d015      	beq.n	80124f2 <_svfiprintf_r+0xf6>
 80124c6:	9a07      	ldr	r2, [sp, #28]
 80124c8:	4654      	mov	r4, sl
 80124ca:	2000      	movs	r0, #0
 80124cc:	f04f 0c0a 	mov.w	ip, #10
 80124d0:	4621      	mov	r1, r4
 80124d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124d6:	3b30      	subs	r3, #48	; 0x30
 80124d8:	2b09      	cmp	r3, #9
 80124da:	d94e      	bls.n	801257a <_svfiprintf_r+0x17e>
 80124dc:	b1b0      	cbz	r0, 801250c <_svfiprintf_r+0x110>
 80124de:	9207      	str	r2, [sp, #28]
 80124e0:	e014      	b.n	801250c <_svfiprintf_r+0x110>
 80124e2:	eba0 0308 	sub.w	r3, r0, r8
 80124e6:	fa09 f303 	lsl.w	r3, r9, r3
 80124ea:	4313      	orrs	r3, r2
 80124ec:	9304      	str	r3, [sp, #16]
 80124ee:	46a2      	mov	sl, r4
 80124f0:	e7d2      	b.n	8012498 <_svfiprintf_r+0x9c>
 80124f2:	9b03      	ldr	r3, [sp, #12]
 80124f4:	1d19      	adds	r1, r3, #4
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	9103      	str	r1, [sp, #12]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	bfbb      	ittet	lt
 80124fe:	425b      	neglt	r3, r3
 8012500:	f042 0202 	orrlt.w	r2, r2, #2
 8012504:	9307      	strge	r3, [sp, #28]
 8012506:	9307      	strlt	r3, [sp, #28]
 8012508:	bfb8      	it	lt
 801250a:	9204      	strlt	r2, [sp, #16]
 801250c:	7823      	ldrb	r3, [r4, #0]
 801250e:	2b2e      	cmp	r3, #46	; 0x2e
 8012510:	d10c      	bne.n	801252c <_svfiprintf_r+0x130>
 8012512:	7863      	ldrb	r3, [r4, #1]
 8012514:	2b2a      	cmp	r3, #42	; 0x2a
 8012516:	d135      	bne.n	8012584 <_svfiprintf_r+0x188>
 8012518:	9b03      	ldr	r3, [sp, #12]
 801251a:	1d1a      	adds	r2, r3, #4
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	9203      	str	r2, [sp, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	bfb8      	it	lt
 8012524:	f04f 33ff 	movlt.w	r3, #4294967295
 8012528:	3402      	adds	r4, #2
 801252a:	9305      	str	r3, [sp, #20]
 801252c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80125f8 <_svfiprintf_r+0x1fc>
 8012530:	7821      	ldrb	r1, [r4, #0]
 8012532:	2203      	movs	r2, #3
 8012534:	4650      	mov	r0, sl
 8012536:	f7ed fe63 	bl	8000200 <memchr>
 801253a:	b140      	cbz	r0, 801254e <_svfiprintf_r+0x152>
 801253c:	2340      	movs	r3, #64	; 0x40
 801253e:	eba0 000a 	sub.w	r0, r0, sl
 8012542:	fa03 f000 	lsl.w	r0, r3, r0
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	4303      	orrs	r3, r0
 801254a:	3401      	adds	r4, #1
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012552:	4826      	ldr	r0, [pc, #152]	; (80125ec <_svfiprintf_r+0x1f0>)
 8012554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012558:	2206      	movs	r2, #6
 801255a:	f7ed fe51 	bl	8000200 <memchr>
 801255e:	2800      	cmp	r0, #0
 8012560:	d038      	beq.n	80125d4 <_svfiprintf_r+0x1d8>
 8012562:	4b23      	ldr	r3, [pc, #140]	; (80125f0 <_svfiprintf_r+0x1f4>)
 8012564:	bb1b      	cbnz	r3, 80125ae <_svfiprintf_r+0x1b2>
 8012566:	9b03      	ldr	r3, [sp, #12]
 8012568:	3307      	adds	r3, #7
 801256a:	f023 0307 	bic.w	r3, r3, #7
 801256e:	3308      	adds	r3, #8
 8012570:	9303      	str	r3, [sp, #12]
 8012572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012574:	4433      	add	r3, r6
 8012576:	9309      	str	r3, [sp, #36]	; 0x24
 8012578:	e767      	b.n	801244a <_svfiprintf_r+0x4e>
 801257a:	fb0c 3202 	mla	r2, ip, r2, r3
 801257e:	460c      	mov	r4, r1
 8012580:	2001      	movs	r0, #1
 8012582:	e7a5      	b.n	80124d0 <_svfiprintf_r+0xd4>
 8012584:	2300      	movs	r3, #0
 8012586:	3401      	adds	r4, #1
 8012588:	9305      	str	r3, [sp, #20]
 801258a:	4619      	mov	r1, r3
 801258c:	f04f 0c0a 	mov.w	ip, #10
 8012590:	4620      	mov	r0, r4
 8012592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012596:	3a30      	subs	r2, #48	; 0x30
 8012598:	2a09      	cmp	r2, #9
 801259a:	d903      	bls.n	80125a4 <_svfiprintf_r+0x1a8>
 801259c:	2b00      	cmp	r3, #0
 801259e:	d0c5      	beq.n	801252c <_svfiprintf_r+0x130>
 80125a0:	9105      	str	r1, [sp, #20]
 80125a2:	e7c3      	b.n	801252c <_svfiprintf_r+0x130>
 80125a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80125a8:	4604      	mov	r4, r0
 80125aa:	2301      	movs	r3, #1
 80125ac:	e7f0      	b.n	8012590 <_svfiprintf_r+0x194>
 80125ae:	ab03      	add	r3, sp, #12
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	462a      	mov	r2, r5
 80125b4:	4b0f      	ldr	r3, [pc, #60]	; (80125f4 <_svfiprintf_r+0x1f8>)
 80125b6:	a904      	add	r1, sp, #16
 80125b8:	4638      	mov	r0, r7
 80125ba:	f7fd fcd5 	bl	800ff68 <_printf_float>
 80125be:	1c42      	adds	r2, r0, #1
 80125c0:	4606      	mov	r6, r0
 80125c2:	d1d6      	bne.n	8012572 <_svfiprintf_r+0x176>
 80125c4:	89ab      	ldrh	r3, [r5, #12]
 80125c6:	065b      	lsls	r3, r3, #25
 80125c8:	f53f af2c 	bmi.w	8012424 <_svfiprintf_r+0x28>
 80125cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ce:	b01d      	add	sp, #116	; 0x74
 80125d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d4:	ab03      	add	r3, sp, #12
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	462a      	mov	r2, r5
 80125da:	4b06      	ldr	r3, [pc, #24]	; (80125f4 <_svfiprintf_r+0x1f8>)
 80125dc:	a904      	add	r1, sp, #16
 80125de:	4638      	mov	r0, r7
 80125e0:	f7fd ff66 	bl	80104b0 <_printf_i>
 80125e4:	e7eb      	b.n	80125be <_svfiprintf_r+0x1c2>
 80125e6:	bf00      	nop
 80125e8:	0802e564 	.word	0x0802e564
 80125ec:	0802e56e 	.word	0x0802e56e
 80125f0:	0800ff69 	.word	0x0800ff69
 80125f4:	08012347 	.word	0x08012347
 80125f8:	0802e56a 	.word	0x0802e56a

080125fc <_read_r>:
 80125fc:	b538      	push	{r3, r4, r5, lr}
 80125fe:	4d07      	ldr	r5, [pc, #28]	; (801261c <_read_r+0x20>)
 8012600:	4604      	mov	r4, r0
 8012602:	4608      	mov	r0, r1
 8012604:	4611      	mov	r1, r2
 8012606:	2200      	movs	r2, #0
 8012608:	602a      	str	r2, [r5, #0]
 801260a:	461a      	mov	r2, r3
 801260c:	f7f2 fad2 	bl	8004bb4 <_read>
 8012610:	1c43      	adds	r3, r0, #1
 8012612:	d102      	bne.n	801261a <_read_r+0x1e>
 8012614:	682b      	ldr	r3, [r5, #0]
 8012616:	b103      	cbz	r3, 801261a <_read_r+0x1e>
 8012618:	6023      	str	r3, [r4, #0]
 801261a:	bd38      	pop	{r3, r4, r5, pc}
 801261c:	20005c58 	.word	0x20005c58

08012620 <_raise_r>:
 8012620:	291f      	cmp	r1, #31
 8012622:	b538      	push	{r3, r4, r5, lr}
 8012624:	4604      	mov	r4, r0
 8012626:	460d      	mov	r5, r1
 8012628:	d904      	bls.n	8012634 <_raise_r+0x14>
 801262a:	2316      	movs	r3, #22
 801262c:	6003      	str	r3, [r0, #0]
 801262e:	f04f 30ff 	mov.w	r0, #4294967295
 8012632:	bd38      	pop	{r3, r4, r5, pc}
 8012634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012636:	b112      	cbz	r2, 801263e <_raise_r+0x1e>
 8012638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801263c:	b94b      	cbnz	r3, 8012652 <_raise_r+0x32>
 801263e:	4620      	mov	r0, r4
 8012640:	f000 f830 	bl	80126a4 <_getpid_r>
 8012644:	462a      	mov	r2, r5
 8012646:	4601      	mov	r1, r0
 8012648:	4620      	mov	r0, r4
 801264a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801264e:	f000 b817 	b.w	8012680 <_kill_r>
 8012652:	2b01      	cmp	r3, #1
 8012654:	d00a      	beq.n	801266c <_raise_r+0x4c>
 8012656:	1c59      	adds	r1, r3, #1
 8012658:	d103      	bne.n	8012662 <_raise_r+0x42>
 801265a:	2316      	movs	r3, #22
 801265c:	6003      	str	r3, [r0, #0]
 801265e:	2001      	movs	r0, #1
 8012660:	e7e7      	b.n	8012632 <_raise_r+0x12>
 8012662:	2400      	movs	r4, #0
 8012664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012668:	4628      	mov	r0, r5
 801266a:	4798      	blx	r3
 801266c:	2000      	movs	r0, #0
 801266e:	e7e0      	b.n	8012632 <_raise_r+0x12>

08012670 <raise>:
 8012670:	4b02      	ldr	r3, [pc, #8]	; (801267c <raise+0xc>)
 8012672:	4601      	mov	r1, r0
 8012674:	6818      	ldr	r0, [r3, #0]
 8012676:	f7ff bfd3 	b.w	8012620 <_raise_r>
 801267a:	bf00      	nop
 801267c:	200000f8 	.word	0x200000f8

08012680 <_kill_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4d07      	ldr	r5, [pc, #28]	; (80126a0 <_kill_r+0x20>)
 8012684:	2300      	movs	r3, #0
 8012686:	4604      	mov	r4, r0
 8012688:	4608      	mov	r0, r1
 801268a:	4611      	mov	r1, r2
 801268c:	602b      	str	r3, [r5, #0]
 801268e:	f7f2 fa77 	bl	8004b80 <_kill>
 8012692:	1c43      	adds	r3, r0, #1
 8012694:	d102      	bne.n	801269c <_kill_r+0x1c>
 8012696:	682b      	ldr	r3, [r5, #0]
 8012698:	b103      	cbz	r3, 801269c <_kill_r+0x1c>
 801269a:	6023      	str	r3, [r4, #0]
 801269c:	bd38      	pop	{r3, r4, r5, pc}
 801269e:	bf00      	nop
 80126a0:	20005c58 	.word	0x20005c58

080126a4 <_getpid_r>:
 80126a4:	f7f2 ba64 	b.w	8004b70 <_getpid>

080126a8 <__ascii_wctomb>:
 80126a8:	b149      	cbz	r1, 80126be <__ascii_wctomb+0x16>
 80126aa:	2aff      	cmp	r2, #255	; 0xff
 80126ac:	bf85      	ittet	hi
 80126ae:	238a      	movhi	r3, #138	; 0x8a
 80126b0:	6003      	strhi	r3, [r0, #0]
 80126b2:	700a      	strbls	r2, [r1, #0]
 80126b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80126b8:	bf98      	it	ls
 80126ba:	2001      	movls	r0, #1
 80126bc:	4770      	bx	lr
 80126be:	4608      	mov	r0, r1
 80126c0:	4770      	bx	lr
	...

080126c4 <_fstat_r>:
 80126c4:	b538      	push	{r3, r4, r5, lr}
 80126c6:	4d07      	ldr	r5, [pc, #28]	; (80126e4 <_fstat_r+0x20>)
 80126c8:	2300      	movs	r3, #0
 80126ca:	4604      	mov	r4, r0
 80126cc:	4608      	mov	r0, r1
 80126ce:	4611      	mov	r1, r2
 80126d0:	602b      	str	r3, [r5, #0]
 80126d2:	f7f2 fab4 	bl	8004c3e <_fstat>
 80126d6:	1c43      	adds	r3, r0, #1
 80126d8:	d102      	bne.n	80126e0 <_fstat_r+0x1c>
 80126da:	682b      	ldr	r3, [r5, #0]
 80126dc:	b103      	cbz	r3, 80126e0 <_fstat_r+0x1c>
 80126de:	6023      	str	r3, [r4, #0]
 80126e0:	bd38      	pop	{r3, r4, r5, pc}
 80126e2:	bf00      	nop
 80126e4:	20005c58 	.word	0x20005c58

080126e8 <_isatty_r>:
 80126e8:	b538      	push	{r3, r4, r5, lr}
 80126ea:	4d06      	ldr	r5, [pc, #24]	; (8012704 <_isatty_r+0x1c>)
 80126ec:	2300      	movs	r3, #0
 80126ee:	4604      	mov	r4, r0
 80126f0:	4608      	mov	r0, r1
 80126f2:	602b      	str	r3, [r5, #0]
 80126f4:	f7f2 fab3 	bl	8004c5e <_isatty>
 80126f8:	1c43      	adds	r3, r0, #1
 80126fa:	d102      	bne.n	8012702 <_isatty_r+0x1a>
 80126fc:	682b      	ldr	r3, [r5, #0]
 80126fe:	b103      	cbz	r3, 8012702 <_isatty_r+0x1a>
 8012700:	6023      	str	r3, [r4, #0]
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	20005c58 	.word	0x20005c58

08012708 <_malloc_usable_size_r>:
 8012708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801270c:	1f18      	subs	r0, r3, #4
 801270e:	2b00      	cmp	r3, #0
 8012710:	bfbc      	itt	lt
 8012712:	580b      	ldrlt	r3, [r1, r0]
 8012714:	18c0      	addlt	r0, r0, r3
 8012716:	4770      	bx	lr

08012718 <pow>:
 8012718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271a:	ed2d 8b02 	vpush	{d8}
 801271e:	eeb0 8a40 	vmov.f32	s16, s0
 8012722:	eef0 8a60 	vmov.f32	s17, s1
 8012726:	ec55 4b11 	vmov	r4, r5, d1
 801272a:	f000 f891 	bl	8012850 <__ieee754_pow>
 801272e:	4622      	mov	r2, r4
 8012730:	462b      	mov	r3, r5
 8012732:	4620      	mov	r0, r4
 8012734:	4629      	mov	r1, r5
 8012736:	ec57 6b10 	vmov	r6, r7, d0
 801273a:	f7ee fa07 	bl	8000b4c <__aeabi_dcmpun>
 801273e:	2800      	cmp	r0, #0
 8012740:	d13b      	bne.n	80127ba <pow+0xa2>
 8012742:	ec51 0b18 	vmov	r0, r1, d8
 8012746:	2200      	movs	r2, #0
 8012748:	2300      	movs	r3, #0
 801274a:	f7ee f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 801274e:	b1b8      	cbz	r0, 8012780 <pow+0x68>
 8012750:	2200      	movs	r2, #0
 8012752:	2300      	movs	r3, #0
 8012754:	4620      	mov	r0, r4
 8012756:	4629      	mov	r1, r5
 8012758:	f7ee f9c6 	bl	8000ae8 <__aeabi_dcmpeq>
 801275c:	2800      	cmp	r0, #0
 801275e:	d146      	bne.n	80127ee <pow+0xd6>
 8012760:	ec45 4b10 	vmov	d0, r4, r5
 8012764:	f000 fe8d 	bl	8013482 <finite>
 8012768:	b338      	cbz	r0, 80127ba <pow+0xa2>
 801276a:	2200      	movs	r2, #0
 801276c:	2300      	movs	r3, #0
 801276e:	4620      	mov	r0, r4
 8012770:	4629      	mov	r1, r5
 8012772:	f7ee f9c3 	bl	8000afc <__aeabi_dcmplt>
 8012776:	b300      	cbz	r0, 80127ba <pow+0xa2>
 8012778:	f7fd f8ba 	bl	800f8f0 <__errno>
 801277c:	2322      	movs	r3, #34	; 0x22
 801277e:	e01b      	b.n	80127b8 <pow+0xa0>
 8012780:	ec47 6b10 	vmov	d0, r6, r7
 8012784:	f000 fe7d 	bl	8013482 <finite>
 8012788:	b9e0      	cbnz	r0, 80127c4 <pow+0xac>
 801278a:	eeb0 0a48 	vmov.f32	s0, s16
 801278e:	eef0 0a68 	vmov.f32	s1, s17
 8012792:	f000 fe76 	bl	8013482 <finite>
 8012796:	b1a8      	cbz	r0, 80127c4 <pow+0xac>
 8012798:	ec45 4b10 	vmov	d0, r4, r5
 801279c:	f000 fe71 	bl	8013482 <finite>
 80127a0:	b180      	cbz	r0, 80127c4 <pow+0xac>
 80127a2:	4632      	mov	r2, r6
 80127a4:	463b      	mov	r3, r7
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	f7ee f9cf 	bl	8000b4c <__aeabi_dcmpun>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d0e2      	beq.n	8012778 <pow+0x60>
 80127b2:	f7fd f89d 	bl	800f8f0 <__errno>
 80127b6:	2321      	movs	r3, #33	; 0x21
 80127b8:	6003      	str	r3, [r0, #0]
 80127ba:	ecbd 8b02 	vpop	{d8}
 80127be:	ec47 6b10 	vmov	d0, r6, r7
 80127c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c4:	2200      	movs	r2, #0
 80127c6:	2300      	movs	r3, #0
 80127c8:	4630      	mov	r0, r6
 80127ca:	4639      	mov	r1, r7
 80127cc:	f7ee f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 80127d0:	2800      	cmp	r0, #0
 80127d2:	d0f2      	beq.n	80127ba <pow+0xa2>
 80127d4:	eeb0 0a48 	vmov.f32	s0, s16
 80127d8:	eef0 0a68 	vmov.f32	s1, s17
 80127dc:	f000 fe51 	bl	8013482 <finite>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	d0ea      	beq.n	80127ba <pow+0xa2>
 80127e4:	ec45 4b10 	vmov	d0, r4, r5
 80127e8:	f000 fe4b 	bl	8013482 <finite>
 80127ec:	e7c3      	b.n	8012776 <pow+0x5e>
 80127ee:	4f01      	ldr	r7, [pc, #4]	; (80127f4 <pow+0xdc>)
 80127f0:	2600      	movs	r6, #0
 80127f2:	e7e2      	b.n	80127ba <pow+0xa2>
 80127f4:	3ff00000 	.word	0x3ff00000

080127f8 <sqrt>:
 80127f8:	b538      	push	{r3, r4, r5, lr}
 80127fa:	ed2d 8b02 	vpush	{d8}
 80127fe:	ec55 4b10 	vmov	r4, r5, d0
 8012802:	f000 fd53 	bl	80132ac <__ieee754_sqrt>
 8012806:	4622      	mov	r2, r4
 8012808:	462b      	mov	r3, r5
 801280a:	4620      	mov	r0, r4
 801280c:	4629      	mov	r1, r5
 801280e:	eeb0 8a40 	vmov.f32	s16, s0
 8012812:	eef0 8a60 	vmov.f32	s17, s1
 8012816:	f7ee f999 	bl	8000b4c <__aeabi_dcmpun>
 801281a:	b990      	cbnz	r0, 8012842 <sqrt+0x4a>
 801281c:	2200      	movs	r2, #0
 801281e:	2300      	movs	r3, #0
 8012820:	4620      	mov	r0, r4
 8012822:	4629      	mov	r1, r5
 8012824:	f7ee f96a 	bl	8000afc <__aeabi_dcmplt>
 8012828:	b158      	cbz	r0, 8012842 <sqrt+0x4a>
 801282a:	f7fd f861 	bl	800f8f0 <__errno>
 801282e:	2321      	movs	r3, #33	; 0x21
 8012830:	6003      	str	r3, [r0, #0]
 8012832:	2200      	movs	r2, #0
 8012834:	2300      	movs	r3, #0
 8012836:	4610      	mov	r0, r2
 8012838:	4619      	mov	r1, r3
 801283a:	f7ee f817 	bl	800086c <__aeabi_ddiv>
 801283e:	ec41 0b18 	vmov	d8, r0, r1
 8012842:	eeb0 0a48 	vmov.f32	s0, s16
 8012846:	eef0 0a68 	vmov.f32	s1, s17
 801284a:	ecbd 8b02 	vpop	{d8}
 801284e:	bd38      	pop	{r3, r4, r5, pc}

08012850 <__ieee754_pow>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	ed2d 8b06 	vpush	{d8-d10}
 8012858:	b089      	sub	sp, #36	; 0x24
 801285a:	ed8d 1b00 	vstr	d1, [sp]
 801285e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012866:	ea58 0102 	orrs.w	r1, r8, r2
 801286a:	ec57 6b10 	vmov	r6, r7, d0
 801286e:	d115      	bne.n	801289c <__ieee754_pow+0x4c>
 8012870:	19b3      	adds	r3, r6, r6
 8012872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012876:	4152      	adcs	r2, r2
 8012878:	4299      	cmp	r1, r3
 801287a:	4b89      	ldr	r3, [pc, #548]	; (8012aa0 <__ieee754_pow+0x250>)
 801287c:	4193      	sbcs	r3, r2
 801287e:	f080 84d2 	bcs.w	8013226 <__ieee754_pow+0x9d6>
 8012882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	f7ed fd0f 	bl	80002ac <__adddf3>
 801288e:	ec41 0b10 	vmov	d0, r0, r1
 8012892:	b009      	add	sp, #36	; 0x24
 8012894:	ecbd 8b06 	vpop	{d8-d10}
 8012898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289c:	4b81      	ldr	r3, [pc, #516]	; (8012aa4 <__ieee754_pow+0x254>)
 801289e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80128a2:	429c      	cmp	r4, r3
 80128a4:	ee10 aa10 	vmov	sl, s0
 80128a8:	463d      	mov	r5, r7
 80128aa:	dc06      	bgt.n	80128ba <__ieee754_pow+0x6a>
 80128ac:	d101      	bne.n	80128b2 <__ieee754_pow+0x62>
 80128ae:	2e00      	cmp	r6, #0
 80128b0:	d1e7      	bne.n	8012882 <__ieee754_pow+0x32>
 80128b2:	4598      	cmp	r8, r3
 80128b4:	dc01      	bgt.n	80128ba <__ieee754_pow+0x6a>
 80128b6:	d10f      	bne.n	80128d8 <__ieee754_pow+0x88>
 80128b8:	b172      	cbz	r2, 80128d8 <__ieee754_pow+0x88>
 80128ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80128be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80128c2:	ea55 050a 	orrs.w	r5, r5, sl
 80128c6:	d1dc      	bne.n	8012882 <__ieee754_pow+0x32>
 80128c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80128cc:	18db      	adds	r3, r3, r3
 80128ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80128d2:	4152      	adcs	r2, r2
 80128d4:	429d      	cmp	r5, r3
 80128d6:	e7d0      	b.n	801287a <__ieee754_pow+0x2a>
 80128d8:	2d00      	cmp	r5, #0
 80128da:	da3b      	bge.n	8012954 <__ieee754_pow+0x104>
 80128dc:	4b72      	ldr	r3, [pc, #456]	; (8012aa8 <__ieee754_pow+0x258>)
 80128de:	4598      	cmp	r8, r3
 80128e0:	dc51      	bgt.n	8012986 <__ieee754_pow+0x136>
 80128e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80128e6:	4598      	cmp	r8, r3
 80128e8:	f340 84ac 	ble.w	8013244 <__ieee754_pow+0x9f4>
 80128ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80128f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80128f4:	2b14      	cmp	r3, #20
 80128f6:	dd0f      	ble.n	8012918 <__ieee754_pow+0xc8>
 80128f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80128fc:	fa22 f103 	lsr.w	r1, r2, r3
 8012900:	fa01 f303 	lsl.w	r3, r1, r3
 8012904:	4293      	cmp	r3, r2
 8012906:	f040 849d 	bne.w	8013244 <__ieee754_pow+0x9f4>
 801290a:	f001 0101 	and.w	r1, r1, #1
 801290e:	f1c1 0302 	rsb	r3, r1, #2
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	b182      	cbz	r2, 8012938 <__ieee754_pow+0xe8>
 8012916:	e05f      	b.n	80129d8 <__ieee754_pow+0x188>
 8012918:	2a00      	cmp	r2, #0
 801291a:	d15b      	bne.n	80129d4 <__ieee754_pow+0x184>
 801291c:	f1c3 0314 	rsb	r3, r3, #20
 8012920:	fa48 f103 	asr.w	r1, r8, r3
 8012924:	fa01 f303 	lsl.w	r3, r1, r3
 8012928:	4543      	cmp	r3, r8
 801292a:	f040 8488 	bne.w	801323e <__ieee754_pow+0x9ee>
 801292e:	f001 0101 	and.w	r1, r1, #1
 8012932:	f1c1 0302 	rsb	r3, r1, #2
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	4b5c      	ldr	r3, [pc, #368]	; (8012aac <__ieee754_pow+0x25c>)
 801293a:	4598      	cmp	r8, r3
 801293c:	d132      	bne.n	80129a4 <__ieee754_pow+0x154>
 801293e:	f1b9 0f00 	cmp.w	r9, #0
 8012942:	f280 8478 	bge.w	8013236 <__ieee754_pow+0x9e6>
 8012946:	4959      	ldr	r1, [pc, #356]	; (8012aac <__ieee754_pow+0x25c>)
 8012948:	4632      	mov	r2, r6
 801294a:	463b      	mov	r3, r7
 801294c:	2000      	movs	r0, #0
 801294e:	f7ed ff8d 	bl	800086c <__aeabi_ddiv>
 8012952:	e79c      	b.n	801288e <__ieee754_pow+0x3e>
 8012954:	2300      	movs	r3, #0
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	2a00      	cmp	r2, #0
 801295a:	d13d      	bne.n	80129d8 <__ieee754_pow+0x188>
 801295c:	4b51      	ldr	r3, [pc, #324]	; (8012aa4 <__ieee754_pow+0x254>)
 801295e:	4598      	cmp	r8, r3
 8012960:	d1ea      	bne.n	8012938 <__ieee754_pow+0xe8>
 8012962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801296a:	ea53 030a 	orrs.w	r3, r3, sl
 801296e:	f000 845a 	beq.w	8013226 <__ieee754_pow+0x9d6>
 8012972:	4b4f      	ldr	r3, [pc, #316]	; (8012ab0 <__ieee754_pow+0x260>)
 8012974:	429c      	cmp	r4, r3
 8012976:	dd08      	ble.n	801298a <__ieee754_pow+0x13a>
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	f2c0 8457 	blt.w	801322e <__ieee754_pow+0x9de>
 8012980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012984:	e783      	b.n	801288e <__ieee754_pow+0x3e>
 8012986:	2302      	movs	r3, #2
 8012988:	e7e5      	b.n	8012956 <__ieee754_pow+0x106>
 801298a:	f1b9 0f00 	cmp.w	r9, #0
 801298e:	f04f 0000 	mov.w	r0, #0
 8012992:	f04f 0100 	mov.w	r1, #0
 8012996:	f6bf af7a 	bge.w	801288e <__ieee754_pow+0x3e>
 801299a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801299e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129a2:	e774      	b.n	801288e <__ieee754_pow+0x3e>
 80129a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80129a8:	d106      	bne.n	80129b8 <__ieee754_pow+0x168>
 80129aa:	4632      	mov	r2, r6
 80129ac:	463b      	mov	r3, r7
 80129ae:	4630      	mov	r0, r6
 80129b0:	4639      	mov	r1, r7
 80129b2:	f7ed fe31 	bl	8000618 <__aeabi_dmul>
 80129b6:	e76a      	b.n	801288e <__ieee754_pow+0x3e>
 80129b8:	4b3e      	ldr	r3, [pc, #248]	; (8012ab4 <__ieee754_pow+0x264>)
 80129ba:	4599      	cmp	r9, r3
 80129bc:	d10c      	bne.n	80129d8 <__ieee754_pow+0x188>
 80129be:	2d00      	cmp	r5, #0
 80129c0:	db0a      	blt.n	80129d8 <__ieee754_pow+0x188>
 80129c2:	ec47 6b10 	vmov	d0, r6, r7
 80129c6:	b009      	add	sp, #36	; 0x24
 80129c8:	ecbd 8b06 	vpop	{d8-d10}
 80129cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d0:	f000 bc6c 	b.w	80132ac <__ieee754_sqrt>
 80129d4:	2300      	movs	r3, #0
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	ec47 6b10 	vmov	d0, r6, r7
 80129dc:	f000 fd48 	bl	8013470 <fabs>
 80129e0:	ec51 0b10 	vmov	r0, r1, d0
 80129e4:	f1ba 0f00 	cmp.w	sl, #0
 80129e8:	d129      	bne.n	8012a3e <__ieee754_pow+0x1ee>
 80129ea:	b124      	cbz	r4, 80129f6 <__ieee754_pow+0x1a6>
 80129ec:	4b2f      	ldr	r3, [pc, #188]	; (8012aac <__ieee754_pow+0x25c>)
 80129ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d123      	bne.n	8012a3e <__ieee754_pow+0x1ee>
 80129f6:	f1b9 0f00 	cmp.w	r9, #0
 80129fa:	da05      	bge.n	8012a08 <__ieee754_pow+0x1b8>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	2000      	movs	r0, #0
 8012a02:	492a      	ldr	r1, [pc, #168]	; (8012aac <__ieee754_pow+0x25c>)
 8012a04:	f7ed ff32 	bl	800086c <__aeabi_ddiv>
 8012a08:	2d00      	cmp	r5, #0
 8012a0a:	f6bf af40 	bge.w	801288e <__ieee754_pow+0x3e>
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a18:	4323      	orrs	r3, r4
 8012a1a:	d108      	bne.n	8012a2e <__ieee754_pow+0x1de>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4610      	mov	r0, r2
 8012a22:	4619      	mov	r1, r3
 8012a24:	f7ed fc40 	bl	80002a8 <__aeabi_dsub>
 8012a28:	4602      	mov	r2, r0
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	e78f      	b.n	801294e <__ieee754_pow+0xfe>
 8012a2e:	9b04      	ldr	r3, [sp, #16]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	f47f af2c 	bne.w	801288e <__ieee754_pow+0x3e>
 8012a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	e727      	b.n	801288e <__ieee754_pow+0x3e>
 8012a3e:	0feb      	lsrs	r3, r5, #31
 8012a40:	3b01      	subs	r3, #1
 8012a42:	9306      	str	r3, [sp, #24]
 8012a44:	9a06      	ldr	r2, [sp, #24]
 8012a46:	9b04      	ldr	r3, [sp, #16]
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	d102      	bne.n	8012a52 <__ieee754_pow+0x202>
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	463b      	mov	r3, r7
 8012a50:	e7e6      	b.n	8012a20 <__ieee754_pow+0x1d0>
 8012a52:	4b19      	ldr	r3, [pc, #100]	; (8012ab8 <__ieee754_pow+0x268>)
 8012a54:	4598      	cmp	r8, r3
 8012a56:	f340 80fb 	ble.w	8012c50 <__ieee754_pow+0x400>
 8012a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012a5e:	4598      	cmp	r8, r3
 8012a60:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <__ieee754_pow+0x260>)
 8012a62:	dd0c      	ble.n	8012a7e <__ieee754_pow+0x22e>
 8012a64:	429c      	cmp	r4, r3
 8012a66:	dc0f      	bgt.n	8012a88 <__ieee754_pow+0x238>
 8012a68:	f1b9 0f00 	cmp.w	r9, #0
 8012a6c:	da0f      	bge.n	8012a8e <__ieee754_pow+0x23e>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	b009      	add	sp, #36	; 0x24
 8012a72:	ecbd 8b06 	vpop	{d8-d10}
 8012a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7a:	f000 bcf0 	b.w	801345e <__math_oflow>
 8012a7e:	429c      	cmp	r4, r3
 8012a80:	dbf2      	blt.n	8012a68 <__ieee754_pow+0x218>
 8012a82:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <__ieee754_pow+0x25c>)
 8012a84:	429c      	cmp	r4, r3
 8012a86:	dd19      	ble.n	8012abc <__ieee754_pow+0x26c>
 8012a88:	f1b9 0f00 	cmp.w	r9, #0
 8012a8c:	dcef      	bgt.n	8012a6e <__ieee754_pow+0x21e>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	b009      	add	sp, #36	; 0x24
 8012a92:	ecbd 8b06 	vpop	{d8-d10}
 8012a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9a:	f000 bcd7 	b.w	801344c <__math_uflow>
 8012a9e:	bf00      	nop
 8012aa0:	fff00000 	.word	0xfff00000
 8012aa4:	7ff00000 	.word	0x7ff00000
 8012aa8:	433fffff 	.word	0x433fffff
 8012aac:	3ff00000 	.word	0x3ff00000
 8012ab0:	3fefffff 	.word	0x3fefffff
 8012ab4:	3fe00000 	.word	0x3fe00000
 8012ab8:	41e00000 	.word	0x41e00000
 8012abc:	4b60      	ldr	r3, [pc, #384]	; (8012c40 <__ieee754_pow+0x3f0>)
 8012abe:	2200      	movs	r2, #0
 8012ac0:	f7ed fbf2 	bl	80002a8 <__aeabi_dsub>
 8012ac4:	a354      	add	r3, pc, #336	; (adr r3, 8012c18 <__ieee754_pow+0x3c8>)
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	4604      	mov	r4, r0
 8012acc:	460d      	mov	r5, r1
 8012ace:	f7ed fda3 	bl	8000618 <__aeabi_dmul>
 8012ad2:	a353      	add	r3, pc, #332	; (adr r3, 8012c20 <__ieee754_pow+0x3d0>)
 8012ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad8:	4606      	mov	r6, r0
 8012ada:	460f      	mov	r7, r1
 8012adc:	4620      	mov	r0, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	f7ed fd9a 	bl	8000618 <__aeabi_dmul>
 8012ae4:	4b57      	ldr	r3, [pc, #348]	; (8012c44 <__ieee754_pow+0x3f4>)
 8012ae6:	4682      	mov	sl, r0
 8012ae8:	468b      	mov	fp, r1
 8012aea:	2200      	movs	r2, #0
 8012aec:	4620      	mov	r0, r4
 8012aee:	4629      	mov	r1, r5
 8012af0:	f7ed fd92 	bl	8000618 <__aeabi_dmul>
 8012af4:	4602      	mov	r2, r0
 8012af6:	460b      	mov	r3, r1
 8012af8:	a14b      	add	r1, pc, #300	; (adr r1, 8012c28 <__ieee754_pow+0x3d8>)
 8012afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012afe:	f7ed fbd3 	bl	80002a8 <__aeabi_dsub>
 8012b02:	4622      	mov	r2, r4
 8012b04:	462b      	mov	r3, r5
 8012b06:	f7ed fd87 	bl	8000618 <__aeabi_dmul>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	2000      	movs	r0, #0
 8012b10:	494d      	ldr	r1, [pc, #308]	; (8012c48 <__ieee754_pow+0x3f8>)
 8012b12:	f7ed fbc9 	bl	80002a8 <__aeabi_dsub>
 8012b16:	4622      	mov	r2, r4
 8012b18:	4680      	mov	r8, r0
 8012b1a:	4689      	mov	r9, r1
 8012b1c:	462b      	mov	r3, r5
 8012b1e:	4620      	mov	r0, r4
 8012b20:	4629      	mov	r1, r5
 8012b22:	f7ed fd79 	bl	8000618 <__aeabi_dmul>
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	4640      	mov	r0, r8
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	f7ed fd73 	bl	8000618 <__aeabi_dmul>
 8012b32:	a33f      	add	r3, pc, #252	; (adr r3, 8012c30 <__ieee754_pow+0x3e0>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fd6e 	bl	8000618 <__aeabi_dmul>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4650      	mov	r0, sl
 8012b42:	4659      	mov	r1, fp
 8012b44:	f7ed fbb0 	bl	80002a8 <__aeabi_dsub>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4680      	mov	r8, r0
 8012b4e:	4689      	mov	r9, r1
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed fbaa 	bl	80002ac <__adddf3>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	463b      	mov	r3, r7
 8012b5e:	4604      	mov	r4, r0
 8012b60:	460d      	mov	r5, r1
 8012b62:	f7ed fba1 	bl	80002a8 <__aeabi_dsub>
 8012b66:	4602      	mov	r2, r0
 8012b68:	460b      	mov	r3, r1
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	4649      	mov	r1, r9
 8012b6e:	f7ed fb9b 	bl	80002a8 <__aeabi_dsub>
 8012b72:	9b04      	ldr	r3, [sp, #16]
 8012b74:	9a06      	ldr	r2, [sp, #24]
 8012b76:	3b01      	subs	r3, #1
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	4682      	mov	sl, r0
 8012b7c:	468b      	mov	fp, r1
 8012b7e:	f040 81e7 	bne.w	8012f50 <__ieee754_pow+0x700>
 8012b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012c38 <__ieee754_pow+0x3e8>
 8012b86:	eeb0 8a47 	vmov.f32	s16, s14
 8012b8a:	eef0 8a67 	vmov.f32	s17, s15
 8012b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b92:	2600      	movs	r6, #0
 8012b94:	4632      	mov	r2, r6
 8012b96:	463b      	mov	r3, r7
 8012b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b9c:	f7ed fb84 	bl	80002a8 <__aeabi_dsub>
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	f7ed fd38 	bl	8000618 <__aeabi_dmul>
 8012ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bac:	4680      	mov	r8, r0
 8012bae:	4689      	mov	r9, r1
 8012bb0:	4650      	mov	r0, sl
 8012bb2:	4659      	mov	r1, fp
 8012bb4:	f7ed fd30 	bl	8000618 <__aeabi_dmul>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	4649      	mov	r1, r9
 8012bc0:	f7ed fb74 	bl	80002ac <__adddf3>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	4680      	mov	r8, r0
 8012bca:	4689      	mov	r9, r1
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ed fd22 	bl	8000618 <__aeabi_dmul>
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	460d      	mov	r5, r1
 8012bda:	4602      	mov	r2, r0
 8012bdc:	4649      	mov	r1, r9
 8012bde:	4640      	mov	r0, r8
 8012be0:	f7ed fb64 	bl	80002ac <__adddf3>
 8012be4:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <__ieee754_pow+0x3fc>)
 8012be6:	4299      	cmp	r1, r3
 8012be8:	ec45 4b19 	vmov	d9, r4, r5
 8012bec:	4606      	mov	r6, r0
 8012bee:	460f      	mov	r7, r1
 8012bf0:	468b      	mov	fp, r1
 8012bf2:	f340 82f1 	ble.w	80131d8 <__ieee754_pow+0x988>
 8012bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012bfe:	4303      	orrs	r3, r0
 8012c00:	f000 81e4 	beq.w	8012fcc <__ieee754_pow+0x77c>
 8012c04:	ec51 0b18 	vmov	r0, r1, d8
 8012c08:	2200      	movs	r2, #0
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f7ed ff76 	bl	8000afc <__aeabi_dcmplt>
 8012c10:	3800      	subs	r0, #0
 8012c12:	bf18      	it	ne
 8012c14:	2001      	movne	r0, #1
 8012c16:	e72b      	b.n	8012a70 <__ieee754_pow+0x220>
 8012c18:	60000000 	.word	0x60000000
 8012c1c:	3ff71547 	.word	0x3ff71547
 8012c20:	f85ddf44 	.word	0xf85ddf44
 8012c24:	3e54ae0b 	.word	0x3e54ae0b
 8012c28:	55555555 	.word	0x55555555
 8012c2c:	3fd55555 	.word	0x3fd55555
 8012c30:	652b82fe 	.word	0x652b82fe
 8012c34:	3ff71547 	.word	0x3ff71547
 8012c38:	00000000 	.word	0x00000000
 8012c3c:	bff00000 	.word	0xbff00000
 8012c40:	3ff00000 	.word	0x3ff00000
 8012c44:	3fd00000 	.word	0x3fd00000
 8012c48:	3fe00000 	.word	0x3fe00000
 8012c4c:	408fffff 	.word	0x408fffff
 8012c50:	4bd5      	ldr	r3, [pc, #852]	; (8012fa8 <__ieee754_pow+0x758>)
 8012c52:	402b      	ands	r3, r5
 8012c54:	2200      	movs	r2, #0
 8012c56:	b92b      	cbnz	r3, 8012c64 <__ieee754_pow+0x414>
 8012c58:	4bd4      	ldr	r3, [pc, #848]	; (8012fac <__ieee754_pow+0x75c>)
 8012c5a:	f7ed fcdd 	bl	8000618 <__aeabi_dmul>
 8012c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012c62:	460c      	mov	r4, r1
 8012c64:	1523      	asrs	r3, r4, #20
 8012c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012c6a:	4413      	add	r3, r2
 8012c6c:	9305      	str	r3, [sp, #20]
 8012c6e:	4bd0      	ldr	r3, [pc, #832]	; (8012fb0 <__ieee754_pow+0x760>)
 8012c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012c78:	429c      	cmp	r4, r3
 8012c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012c7e:	dd08      	ble.n	8012c92 <__ieee754_pow+0x442>
 8012c80:	4bcc      	ldr	r3, [pc, #816]	; (8012fb4 <__ieee754_pow+0x764>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	f340 8162 	ble.w	8012f4c <__ieee754_pow+0x6fc>
 8012c88:	9b05      	ldr	r3, [sp, #20]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	9305      	str	r3, [sp, #20]
 8012c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012c92:	2400      	movs	r4, #0
 8012c94:	00e3      	lsls	r3, r4, #3
 8012c96:	9307      	str	r3, [sp, #28]
 8012c98:	4bc7      	ldr	r3, [pc, #796]	; (8012fb8 <__ieee754_pow+0x768>)
 8012c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c9e:	ed93 7b00 	vldr	d7, [r3]
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	ec53 2b17 	vmov	r2, r3, d7
 8012ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8012cac:	eef0 9a67 	vmov.f32	s19, s15
 8012cb0:	4682      	mov	sl, r0
 8012cb2:	f7ed faf9 	bl	80002a8 <__aeabi_dsub>
 8012cb6:	4652      	mov	r2, sl
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	ec51 0b19 	vmov	r0, r1, d9
 8012cc2:	f7ed faf3 	bl	80002ac <__adddf3>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	2000      	movs	r0, #0
 8012ccc:	49bb      	ldr	r1, [pc, #748]	; (8012fbc <__ieee754_pow+0x76c>)
 8012cce:	f7ed fdcd 	bl	800086c <__aeabi_ddiv>
 8012cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4630      	mov	r0, r6
 8012cdc:	4639      	mov	r1, r7
 8012cde:	f7ed fc9b 	bl	8000618 <__aeabi_dmul>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ce8:	9302      	str	r3, [sp, #8]
 8012cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012cee:	46ab      	mov	fp, r5
 8012cf0:	106d      	asrs	r5, r5, #1
 8012cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012cfa:	ec41 0b18 	vmov	d8, r0, r1
 8012cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012d02:	2200      	movs	r2, #0
 8012d04:	4640      	mov	r0, r8
 8012d06:	4649      	mov	r1, r9
 8012d08:	4614      	mov	r4, r2
 8012d0a:	461d      	mov	r5, r3
 8012d0c:	f7ed fc84 	bl	8000618 <__aeabi_dmul>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4630      	mov	r0, r6
 8012d16:	4639      	mov	r1, r7
 8012d18:	f7ed fac6 	bl	80002a8 <__aeabi_dsub>
 8012d1c:	ec53 2b19 	vmov	r2, r3, d9
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	4620      	mov	r0, r4
 8012d26:	4629      	mov	r1, r5
 8012d28:	f7ed fabe 	bl	80002a8 <__aeabi_dsub>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4650      	mov	r0, sl
 8012d32:	4659      	mov	r1, fp
 8012d34:	f7ed fab8 	bl	80002a8 <__aeabi_dsub>
 8012d38:	4642      	mov	r2, r8
 8012d3a:	464b      	mov	r3, r9
 8012d3c:	f7ed fc6c 	bl	8000618 <__aeabi_dmul>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	4630      	mov	r0, r6
 8012d46:	4639      	mov	r1, r7
 8012d48:	f7ed faae 	bl	80002a8 <__aeabi_dsub>
 8012d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8012d50:	f7ed fc62 	bl	8000618 <__aeabi_dmul>
 8012d54:	ec53 2b18 	vmov	r2, r3, d8
 8012d58:	ec41 0b19 	vmov	d9, r0, r1
 8012d5c:	ec51 0b18 	vmov	r0, r1, d8
 8012d60:	f7ed fc5a 	bl	8000618 <__aeabi_dmul>
 8012d64:	a37c      	add	r3, pc, #496	; (adr r3, 8012f58 <__ieee754_pow+0x708>)
 8012d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	f7ed fc53 	bl	8000618 <__aeabi_dmul>
 8012d72:	a37b      	add	r3, pc, #492	; (adr r3, 8012f60 <__ieee754_pow+0x710>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f7ed fa98 	bl	80002ac <__adddf3>
 8012d7c:	4622      	mov	r2, r4
 8012d7e:	462b      	mov	r3, r5
 8012d80:	f7ed fc4a 	bl	8000618 <__aeabi_dmul>
 8012d84:	a378      	add	r3, pc, #480	; (adr r3, 8012f68 <__ieee754_pow+0x718>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f7ed fa8f 	bl	80002ac <__adddf3>
 8012d8e:	4622      	mov	r2, r4
 8012d90:	462b      	mov	r3, r5
 8012d92:	f7ed fc41 	bl	8000618 <__aeabi_dmul>
 8012d96:	a376      	add	r3, pc, #472	; (adr r3, 8012f70 <__ieee754_pow+0x720>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	f7ed fa86 	bl	80002ac <__adddf3>
 8012da0:	4622      	mov	r2, r4
 8012da2:	462b      	mov	r3, r5
 8012da4:	f7ed fc38 	bl	8000618 <__aeabi_dmul>
 8012da8:	a373      	add	r3, pc, #460	; (adr r3, 8012f78 <__ieee754_pow+0x728>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	f7ed fa7d 	bl	80002ac <__adddf3>
 8012db2:	4622      	mov	r2, r4
 8012db4:	462b      	mov	r3, r5
 8012db6:	f7ed fc2f 	bl	8000618 <__aeabi_dmul>
 8012dba:	a371      	add	r3, pc, #452	; (adr r3, 8012f80 <__ieee754_pow+0x730>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa74 	bl	80002ac <__adddf3>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	4606      	mov	r6, r0
 8012dc8:	460f      	mov	r7, r1
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fc22 	bl	8000618 <__aeabi_dmul>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fc1c 	bl	8000618 <__aeabi_dmul>
 8012de0:	4642      	mov	r2, r8
 8012de2:	4604      	mov	r4, r0
 8012de4:	460d      	mov	r5, r1
 8012de6:	464b      	mov	r3, r9
 8012de8:	ec51 0b18 	vmov	r0, r1, d8
 8012dec:	f7ed fa5e 	bl	80002ac <__adddf3>
 8012df0:	ec53 2b19 	vmov	r2, r3, d9
 8012df4:	f7ed fc10 	bl	8000618 <__aeabi_dmul>
 8012df8:	4622      	mov	r2, r4
 8012dfa:	462b      	mov	r3, r5
 8012dfc:	f7ed fa56 	bl	80002ac <__adddf3>
 8012e00:	4642      	mov	r2, r8
 8012e02:	4682      	mov	sl, r0
 8012e04:	468b      	mov	fp, r1
 8012e06:	464b      	mov	r3, r9
 8012e08:	4640      	mov	r0, r8
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	f7ed fc04 	bl	8000618 <__aeabi_dmul>
 8012e10:	4b6b      	ldr	r3, [pc, #428]	; (8012fc0 <__ieee754_pow+0x770>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	4606      	mov	r6, r0
 8012e16:	460f      	mov	r7, r1
 8012e18:	f7ed fa48 	bl	80002ac <__adddf3>
 8012e1c:	4652      	mov	r2, sl
 8012e1e:	465b      	mov	r3, fp
 8012e20:	f7ed fa44 	bl	80002ac <__adddf3>
 8012e24:	2000      	movs	r0, #0
 8012e26:	4604      	mov	r4, r0
 8012e28:	460d      	mov	r5, r1
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fbf1 	bl	8000618 <__aeabi_dmul>
 8012e36:	4b62      	ldr	r3, [pc, #392]	; (8012fc0 <__ieee754_pow+0x770>)
 8012e38:	4680      	mov	r8, r0
 8012e3a:	4689      	mov	r9, r1
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	f7ed fa31 	bl	80002a8 <__aeabi_dsub>
 8012e46:	4632      	mov	r2, r6
 8012e48:	463b      	mov	r3, r7
 8012e4a:	f7ed fa2d 	bl	80002a8 <__aeabi_dsub>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	460b      	mov	r3, r1
 8012e52:	4650      	mov	r0, sl
 8012e54:	4659      	mov	r1, fp
 8012e56:	f7ed fa27 	bl	80002a8 <__aeabi_dsub>
 8012e5a:	ec53 2b18 	vmov	r2, r3, d8
 8012e5e:	f7ed fbdb 	bl	8000618 <__aeabi_dmul>
 8012e62:	4622      	mov	r2, r4
 8012e64:	4606      	mov	r6, r0
 8012e66:	460f      	mov	r7, r1
 8012e68:	462b      	mov	r3, r5
 8012e6a:	ec51 0b19 	vmov	r0, r1, d9
 8012e6e:	f7ed fbd3 	bl	8000618 <__aeabi_dmul>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	4630      	mov	r0, r6
 8012e78:	4639      	mov	r1, r7
 8012e7a:	f7ed fa17 	bl	80002ac <__adddf3>
 8012e7e:	4606      	mov	r6, r0
 8012e80:	460f      	mov	r7, r1
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	f7ed fa0f 	bl	80002ac <__adddf3>
 8012e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8012f88 <__ieee754_pow+0x738>)
 8012e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e94:	2000      	movs	r0, #0
 8012e96:	4604      	mov	r4, r0
 8012e98:	460d      	mov	r5, r1
 8012e9a:	f7ed fbbd 	bl	8000618 <__aeabi_dmul>
 8012e9e:	4642      	mov	r2, r8
 8012ea0:	ec41 0b18 	vmov	d8, r0, r1
 8012ea4:	464b      	mov	r3, r9
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f7ed f9fd 	bl	80002a8 <__aeabi_dsub>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	4639      	mov	r1, r7
 8012eb6:	f7ed f9f7 	bl	80002a8 <__aeabi_dsub>
 8012eba:	a335      	add	r3, pc, #212	; (adr r3, 8012f90 <__ieee754_pow+0x740>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed fbaa 	bl	8000618 <__aeabi_dmul>
 8012ec4:	a334      	add	r3, pc, #208	; (adr r3, 8012f98 <__ieee754_pow+0x748>)
 8012ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eca:	4606      	mov	r6, r0
 8012ecc:	460f      	mov	r7, r1
 8012ece:	4620      	mov	r0, r4
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	f7ed fba1 	bl	8000618 <__aeabi_dmul>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	460b      	mov	r3, r1
 8012eda:	4630      	mov	r0, r6
 8012edc:	4639      	mov	r1, r7
 8012ede:	f7ed f9e5 	bl	80002ac <__adddf3>
 8012ee2:	9a07      	ldr	r2, [sp, #28]
 8012ee4:	4b37      	ldr	r3, [pc, #220]	; (8012fc4 <__ieee754_pow+0x774>)
 8012ee6:	4413      	add	r3, r2
 8012ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eec:	f7ed f9de 	bl	80002ac <__adddf3>
 8012ef0:	4682      	mov	sl, r0
 8012ef2:	9805      	ldr	r0, [sp, #20]
 8012ef4:	468b      	mov	fp, r1
 8012ef6:	f7ed fb25 	bl	8000544 <__aeabi_i2d>
 8012efa:	9a07      	ldr	r2, [sp, #28]
 8012efc:	4b32      	ldr	r3, [pc, #200]	; (8012fc8 <__ieee754_pow+0x778>)
 8012efe:	4413      	add	r3, r2
 8012f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f04:	4606      	mov	r6, r0
 8012f06:	460f      	mov	r7, r1
 8012f08:	4652      	mov	r2, sl
 8012f0a:	465b      	mov	r3, fp
 8012f0c:	ec51 0b18 	vmov	r0, r1, d8
 8012f10:	f7ed f9cc 	bl	80002ac <__adddf3>
 8012f14:	4642      	mov	r2, r8
 8012f16:	464b      	mov	r3, r9
 8012f18:	f7ed f9c8 	bl	80002ac <__adddf3>
 8012f1c:	4632      	mov	r2, r6
 8012f1e:	463b      	mov	r3, r7
 8012f20:	f7ed f9c4 	bl	80002ac <__adddf3>
 8012f24:	2000      	movs	r0, #0
 8012f26:	4632      	mov	r2, r6
 8012f28:	463b      	mov	r3, r7
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	f7ed f9bb 	bl	80002a8 <__aeabi_dsub>
 8012f32:	4642      	mov	r2, r8
 8012f34:	464b      	mov	r3, r9
 8012f36:	f7ed f9b7 	bl	80002a8 <__aeabi_dsub>
 8012f3a:	ec53 2b18 	vmov	r2, r3, d8
 8012f3e:	f7ed f9b3 	bl	80002a8 <__aeabi_dsub>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4650      	mov	r0, sl
 8012f48:	4659      	mov	r1, fp
 8012f4a:	e610      	b.n	8012b6e <__ieee754_pow+0x31e>
 8012f4c:	2401      	movs	r4, #1
 8012f4e:	e6a1      	b.n	8012c94 <__ieee754_pow+0x444>
 8012f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012fa0 <__ieee754_pow+0x750>
 8012f54:	e617      	b.n	8012b86 <__ieee754_pow+0x336>
 8012f56:	bf00      	nop
 8012f58:	4a454eef 	.word	0x4a454eef
 8012f5c:	3fca7e28 	.word	0x3fca7e28
 8012f60:	93c9db65 	.word	0x93c9db65
 8012f64:	3fcd864a 	.word	0x3fcd864a
 8012f68:	a91d4101 	.word	0xa91d4101
 8012f6c:	3fd17460 	.word	0x3fd17460
 8012f70:	518f264d 	.word	0x518f264d
 8012f74:	3fd55555 	.word	0x3fd55555
 8012f78:	db6fabff 	.word	0xdb6fabff
 8012f7c:	3fdb6db6 	.word	0x3fdb6db6
 8012f80:	33333303 	.word	0x33333303
 8012f84:	3fe33333 	.word	0x3fe33333
 8012f88:	e0000000 	.word	0xe0000000
 8012f8c:	3feec709 	.word	0x3feec709
 8012f90:	dc3a03fd 	.word	0xdc3a03fd
 8012f94:	3feec709 	.word	0x3feec709
 8012f98:	145b01f5 	.word	0x145b01f5
 8012f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8012fa0:	00000000 	.word	0x00000000
 8012fa4:	3ff00000 	.word	0x3ff00000
 8012fa8:	7ff00000 	.word	0x7ff00000
 8012fac:	43400000 	.word	0x43400000
 8012fb0:	0003988e 	.word	0x0003988e
 8012fb4:	000bb679 	.word	0x000bb679
 8012fb8:	0802e908 	.word	0x0802e908
 8012fbc:	3ff00000 	.word	0x3ff00000
 8012fc0:	40080000 	.word	0x40080000
 8012fc4:	0802e928 	.word	0x0802e928
 8012fc8:	0802e918 	.word	0x0802e918
 8012fcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80132a4 <__ieee754_pow+0xa54>)
 8012fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd2:	4640      	mov	r0, r8
 8012fd4:	4649      	mov	r1, r9
 8012fd6:	f7ed f969 	bl	80002ac <__adddf3>
 8012fda:	4622      	mov	r2, r4
 8012fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	4639      	mov	r1, r7
 8012fe6:	f7ed f95f 	bl	80002a8 <__aeabi_dsub>
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	ec51 0b1a 	vmov	r0, r1, d10
 8012ff2:	f7ed fda1 	bl	8000b38 <__aeabi_dcmpgt>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f47f ae04 	bne.w	8012c04 <__ieee754_pow+0x3b4>
 8012ffc:	4aa4      	ldr	r2, [pc, #656]	; (8013290 <__ieee754_pow+0xa40>)
 8012ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013002:	4293      	cmp	r3, r2
 8013004:	f340 8108 	ble.w	8013218 <__ieee754_pow+0x9c8>
 8013008:	151b      	asrs	r3, r3, #20
 801300a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801300e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013012:	fa4a f303 	asr.w	r3, sl, r3
 8013016:	445b      	add	r3, fp
 8013018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801301c:	4e9d      	ldr	r6, [pc, #628]	; (8013294 <__ieee754_pow+0xa44>)
 801301e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013022:	4116      	asrs	r6, r2
 8013024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013028:	2000      	movs	r0, #0
 801302a:	ea23 0106 	bic.w	r1, r3, r6
 801302e:	f1c2 0214 	rsb	r2, r2, #20
 8013032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013036:	fa4a fa02 	asr.w	sl, sl, r2
 801303a:	f1bb 0f00 	cmp.w	fp, #0
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4620      	mov	r0, r4
 8013044:	4629      	mov	r1, r5
 8013046:	bfb8      	it	lt
 8013048:	f1ca 0a00 	rsblt	sl, sl, #0
 801304c:	f7ed f92c 	bl	80002a8 <__aeabi_dsub>
 8013050:	ec41 0b19 	vmov	d9, r0, r1
 8013054:	4642      	mov	r2, r8
 8013056:	464b      	mov	r3, r9
 8013058:	ec51 0b19 	vmov	r0, r1, d9
 801305c:	f7ed f926 	bl	80002ac <__adddf3>
 8013060:	a37b      	add	r3, pc, #492	; (adr r3, 8013250 <__ieee754_pow+0xa00>)
 8013062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013066:	2000      	movs	r0, #0
 8013068:	4604      	mov	r4, r0
 801306a:	460d      	mov	r5, r1
 801306c:	f7ed fad4 	bl	8000618 <__aeabi_dmul>
 8013070:	ec53 2b19 	vmov	r2, r3, d9
 8013074:	4606      	mov	r6, r0
 8013076:	460f      	mov	r7, r1
 8013078:	4620      	mov	r0, r4
 801307a:	4629      	mov	r1, r5
 801307c:	f7ed f914 	bl	80002a8 <__aeabi_dsub>
 8013080:	4602      	mov	r2, r0
 8013082:	460b      	mov	r3, r1
 8013084:	4640      	mov	r0, r8
 8013086:	4649      	mov	r1, r9
 8013088:	f7ed f90e 	bl	80002a8 <__aeabi_dsub>
 801308c:	a372      	add	r3, pc, #456	; (adr r3, 8013258 <__ieee754_pow+0xa08>)
 801308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013092:	f7ed fac1 	bl	8000618 <__aeabi_dmul>
 8013096:	a372      	add	r3, pc, #456	; (adr r3, 8013260 <__ieee754_pow+0xa10>)
 8013098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309c:	4680      	mov	r8, r0
 801309e:	4689      	mov	r9, r1
 80130a0:	4620      	mov	r0, r4
 80130a2:	4629      	mov	r1, r5
 80130a4:	f7ed fab8 	bl	8000618 <__aeabi_dmul>
 80130a8:	4602      	mov	r2, r0
 80130aa:	460b      	mov	r3, r1
 80130ac:	4640      	mov	r0, r8
 80130ae:	4649      	mov	r1, r9
 80130b0:	f7ed f8fc 	bl	80002ac <__adddf3>
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	4602      	mov	r2, r0
 80130ba:	460b      	mov	r3, r1
 80130bc:	4630      	mov	r0, r6
 80130be:	4639      	mov	r1, r7
 80130c0:	f7ed f8f4 	bl	80002ac <__adddf3>
 80130c4:	4632      	mov	r2, r6
 80130c6:	463b      	mov	r3, r7
 80130c8:	4680      	mov	r8, r0
 80130ca:	4689      	mov	r9, r1
 80130cc:	f7ed f8ec 	bl	80002a8 <__aeabi_dsub>
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	4620      	mov	r0, r4
 80130d6:	4629      	mov	r1, r5
 80130d8:	f7ed f8e6 	bl	80002a8 <__aeabi_dsub>
 80130dc:	4642      	mov	r2, r8
 80130de:	4606      	mov	r6, r0
 80130e0:	460f      	mov	r7, r1
 80130e2:	464b      	mov	r3, r9
 80130e4:	4640      	mov	r0, r8
 80130e6:	4649      	mov	r1, r9
 80130e8:	f7ed fa96 	bl	8000618 <__aeabi_dmul>
 80130ec:	a35e      	add	r3, pc, #376	; (adr r3, 8013268 <__ieee754_pow+0xa18>)
 80130ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f2:	4604      	mov	r4, r0
 80130f4:	460d      	mov	r5, r1
 80130f6:	f7ed fa8f 	bl	8000618 <__aeabi_dmul>
 80130fa:	a35d      	add	r3, pc, #372	; (adr r3, 8013270 <__ieee754_pow+0xa20>)
 80130fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013100:	f7ed f8d2 	bl	80002a8 <__aeabi_dsub>
 8013104:	4622      	mov	r2, r4
 8013106:	462b      	mov	r3, r5
 8013108:	f7ed fa86 	bl	8000618 <__aeabi_dmul>
 801310c:	a35a      	add	r3, pc, #360	; (adr r3, 8013278 <__ieee754_pow+0xa28>)
 801310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013112:	f7ed f8cb 	bl	80002ac <__adddf3>
 8013116:	4622      	mov	r2, r4
 8013118:	462b      	mov	r3, r5
 801311a:	f7ed fa7d 	bl	8000618 <__aeabi_dmul>
 801311e:	a358      	add	r3, pc, #352	; (adr r3, 8013280 <__ieee754_pow+0xa30>)
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	f7ed f8c0 	bl	80002a8 <__aeabi_dsub>
 8013128:	4622      	mov	r2, r4
 801312a:	462b      	mov	r3, r5
 801312c:	f7ed fa74 	bl	8000618 <__aeabi_dmul>
 8013130:	a355      	add	r3, pc, #340	; (adr r3, 8013288 <__ieee754_pow+0xa38>)
 8013132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013136:	f7ed f8b9 	bl	80002ac <__adddf3>
 801313a:	4622      	mov	r2, r4
 801313c:	462b      	mov	r3, r5
 801313e:	f7ed fa6b 	bl	8000618 <__aeabi_dmul>
 8013142:	4602      	mov	r2, r0
 8013144:	460b      	mov	r3, r1
 8013146:	4640      	mov	r0, r8
 8013148:	4649      	mov	r1, r9
 801314a:	f7ed f8ad 	bl	80002a8 <__aeabi_dsub>
 801314e:	4604      	mov	r4, r0
 8013150:	460d      	mov	r5, r1
 8013152:	4602      	mov	r2, r0
 8013154:	460b      	mov	r3, r1
 8013156:	4640      	mov	r0, r8
 8013158:	4649      	mov	r1, r9
 801315a:	f7ed fa5d 	bl	8000618 <__aeabi_dmul>
 801315e:	2200      	movs	r2, #0
 8013160:	ec41 0b19 	vmov	d9, r0, r1
 8013164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013168:	4620      	mov	r0, r4
 801316a:	4629      	mov	r1, r5
 801316c:	f7ed f89c 	bl	80002a8 <__aeabi_dsub>
 8013170:	4602      	mov	r2, r0
 8013172:	460b      	mov	r3, r1
 8013174:	ec51 0b19 	vmov	r0, r1, d9
 8013178:	f7ed fb78 	bl	800086c <__aeabi_ddiv>
 801317c:	4632      	mov	r2, r6
 801317e:	4604      	mov	r4, r0
 8013180:	460d      	mov	r5, r1
 8013182:	463b      	mov	r3, r7
 8013184:	4640      	mov	r0, r8
 8013186:	4649      	mov	r1, r9
 8013188:	f7ed fa46 	bl	8000618 <__aeabi_dmul>
 801318c:	4632      	mov	r2, r6
 801318e:	463b      	mov	r3, r7
 8013190:	f7ed f88c 	bl	80002ac <__adddf3>
 8013194:	4602      	mov	r2, r0
 8013196:	460b      	mov	r3, r1
 8013198:	4620      	mov	r0, r4
 801319a:	4629      	mov	r1, r5
 801319c:	f7ed f884 	bl	80002a8 <__aeabi_dsub>
 80131a0:	4642      	mov	r2, r8
 80131a2:	464b      	mov	r3, r9
 80131a4:	f7ed f880 	bl	80002a8 <__aeabi_dsub>
 80131a8:	460b      	mov	r3, r1
 80131aa:	4602      	mov	r2, r0
 80131ac:	493a      	ldr	r1, [pc, #232]	; (8013298 <__ieee754_pow+0xa48>)
 80131ae:	2000      	movs	r0, #0
 80131b0:	f7ed f87a 	bl	80002a8 <__aeabi_dsub>
 80131b4:	ec41 0b10 	vmov	d0, r0, r1
 80131b8:	ee10 3a90 	vmov	r3, s1
 80131bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80131c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131c4:	da2b      	bge.n	801321e <__ieee754_pow+0x9ce>
 80131c6:	4650      	mov	r0, sl
 80131c8:	f000 f966 	bl	8013498 <scalbn>
 80131cc:	ec51 0b10 	vmov	r0, r1, d0
 80131d0:	ec53 2b18 	vmov	r2, r3, d8
 80131d4:	f7ff bbed 	b.w	80129b2 <__ieee754_pow+0x162>
 80131d8:	4b30      	ldr	r3, [pc, #192]	; (801329c <__ieee754_pow+0xa4c>)
 80131da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80131de:	429e      	cmp	r6, r3
 80131e0:	f77f af0c 	ble.w	8012ffc <__ieee754_pow+0x7ac>
 80131e4:	4b2e      	ldr	r3, [pc, #184]	; (80132a0 <__ieee754_pow+0xa50>)
 80131e6:	440b      	add	r3, r1
 80131e8:	4303      	orrs	r3, r0
 80131ea:	d009      	beq.n	8013200 <__ieee754_pow+0x9b0>
 80131ec:	ec51 0b18 	vmov	r0, r1, d8
 80131f0:	2200      	movs	r2, #0
 80131f2:	2300      	movs	r3, #0
 80131f4:	f7ed fc82 	bl	8000afc <__aeabi_dcmplt>
 80131f8:	3800      	subs	r0, #0
 80131fa:	bf18      	it	ne
 80131fc:	2001      	movne	r0, #1
 80131fe:	e447      	b.n	8012a90 <__ieee754_pow+0x240>
 8013200:	4622      	mov	r2, r4
 8013202:	462b      	mov	r3, r5
 8013204:	f7ed f850 	bl	80002a8 <__aeabi_dsub>
 8013208:	4642      	mov	r2, r8
 801320a:	464b      	mov	r3, r9
 801320c:	f7ed fc8a 	bl	8000b24 <__aeabi_dcmpge>
 8013210:	2800      	cmp	r0, #0
 8013212:	f43f aef3 	beq.w	8012ffc <__ieee754_pow+0x7ac>
 8013216:	e7e9      	b.n	80131ec <__ieee754_pow+0x99c>
 8013218:	f04f 0a00 	mov.w	sl, #0
 801321c:	e71a      	b.n	8013054 <__ieee754_pow+0x804>
 801321e:	ec51 0b10 	vmov	r0, r1, d0
 8013222:	4619      	mov	r1, r3
 8013224:	e7d4      	b.n	80131d0 <__ieee754_pow+0x980>
 8013226:	491c      	ldr	r1, [pc, #112]	; (8013298 <__ieee754_pow+0xa48>)
 8013228:	2000      	movs	r0, #0
 801322a:	f7ff bb30 	b.w	801288e <__ieee754_pow+0x3e>
 801322e:	2000      	movs	r0, #0
 8013230:	2100      	movs	r1, #0
 8013232:	f7ff bb2c 	b.w	801288e <__ieee754_pow+0x3e>
 8013236:	4630      	mov	r0, r6
 8013238:	4639      	mov	r1, r7
 801323a:	f7ff bb28 	b.w	801288e <__ieee754_pow+0x3e>
 801323e:	9204      	str	r2, [sp, #16]
 8013240:	f7ff bb7a 	b.w	8012938 <__ieee754_pow+0xe8>
 8013244:	2300      	movs	r3, #0
 8013246:	f7ff bb64 	b.w	8012912 <__ieee754_pow+0xc2>
 801324a:	bf00      	nop
 801324c:	f3af 8000 	nop.w
 8013250:	00000000 	.word	0x00000000
 8013254:	3fe62e43 	.word	0x3fe62e43
 8013258:	fefa39ef 	.word	0xfefa39ef
 801325c:	3fe62e42 	.word	0x3fe62e42
 8013260:	0ca86c39 	.word	0x0ca86c39
 8013264:	be205c61 	.word	0xbe205c61
 8013268:	72bea4d0 	.word	0x72bea4d0
 801326c:	3e663769 	.word	0x3e663769
 8013270:	c5d26bf1 	.word	0xc5d26bf1
 8013274:	3ebbbd41 	.word	0x3ebbbd41
 8013278:	af25de2c 	.word	0xaf25de2c
 801327c:	3f11566a 	.word	0x3f11566a
 8013280:	16bebd93 	.word	0x16bebd93
 8013284:	3f66c16c 	.word	0x3f66c16c
 8013288:	5555553e 	.word	0x5555553e
 801328c:	3fc55555 	.word	0x3fc55555
 8013290:	3fe00000 	.word	0x3fe00000
 8013294:	000fffff 	.word	0x000fffff
 8013298:	3ff00000 	.word	0x3ff00000
 801329c:	4090cbff 	.word	0x4090cbff
 80132a0:	3f6f3400 	.word	0x3f6f3400
 80132a4:	652b82fe 	.word	0x652b82fe
 80132a8:	3c971547 	.word	0x3c971547

080132ac <__ieee754_sqrt>:
 80132ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b0:	ec55 4b10 	vmov	r4, r5, d0
 80132b4:	4e55      	ldr	r6, [pc, #340]	; (801340c <__ieee754_sqrt+0x160>)
 80132b6:	43ae      	bics	r6, r5
 80132b8:	ee10 0a10 	vmov	r0, s0
 80132bc:	ee10 3a10 	vmov	r3, s0
 80132c0:	462a      	mov	r2, r5
 80132c2:	4629      	mov	r1, r5
 80132c4:	d110      	bne.n	80132e8 <__ieee754_sqrt+0x3c>
 80132c6:	ee10 2a10 	vmov	r2, s0
 80132ca:	462b      	mov	r3, r5
 80132cc:	f7ed f9a4 	bl	8000618 <__aeabi_dmul>
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	4620      	mov	r0, r4
 80132d6:	4629      	mov	r1, r5
 80132d8:	f7ec ffe8 	bl	80002ac <__adddf3>
 80132dc:	4604      	mov	r4, r0
 80132de:	460d      	mov	r5, r1
 80132e0:	ec45 4b10 	vmov	d0, r4, r5
 80132e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132e8:	2d00      	cmp	r5, #0
 80132ea:	dc10      	bgt.n	801330e <__ieee754_sqrt+0x62>
 80132ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80132f0:	4330      	orrs	r0, r6
 80132f2:	d0f5      	beq.n	80132e0 <__ieee754_sqrt+0x34>
 80132f4:	b15d      	cbz	r5, 801330e <__ieee754_sqrt+0x62>
 80132f6:	ee10 2a10 	vmov	r2, s0
 80132fa:	462b      	mov	r3, r5
 80132fc:	ee10 0a10 	vmov	r0, s0
 8013300:	f7ec ffd2 	bl	80002a8 <__aeabi_dsub>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	f7ed fab0 	bl	800086c <__aeabi_ddiv>
 801330c:	e7e6      	b.n	80132dc <__ieee754_sqrt+0x30>
 801330e:	1512      	asrs	r2, r2, #20
 8013310:	d074      	beq.n	80133fc <__ieee754_sqrt+0x150>
 8013312:	07d4      	lsls	r4, r2, #31
 8013314:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013318:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801331c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013320:	bf5e      	ittt	pl
 8013322:	0fda      	lsrpl	r2, r3, #31
 8013324:	005b      	lslpl	r3, r3, #1
 8013326:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801332a:	2400      	movs	r4, #0
 801332c:	0fda      	lsrs	r2, r3, #31
 801332e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013332:	107f      	asrs	r7, r7, #1
 8013334:	005b      	lsls	r3, r3, #1
 8013336:	2516      	movs	r5, #22
 8013338:	4620      	mov	r0, r4
 801333a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801333e:	1886      	adds	r6, r0, r2
 8013340:	428e      	cmp	r6, r1
 8013342:	bfde      	ittt	le
 8013344:	1b89      	suble	r1, r1, r6
 8013346:	18b0      	addle	r0, r6, r2
 8013348:	18a4      	addle	r4, r4, r2
 801334a:	0049      	lsls	r1, r1, #1
 801334c:	3d01      	subs	r5, #1
 801334e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013352:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801335a:	d1f0      	bne.n	801333e <__ieee754_sqrt+0x92>
 801335c:	462a      	mov	r2, r5
 801335e:	f04f 0e20 	mov.w	lr, #32
 8013362:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013366:	4281      	cmp	r1, r0
 8013368:	eb06 0c05 	add.w	ip, r6, r5
 801336c:	dc02      	bgt.n	8013374 <__ieee754_sqrt+0xc8>
 801336e:	d113      	bne.n	8013398 <__ieee754_sqrt+0xec>
 8013370:	459c      	cmp	ip, r3
 8013372:	d811      	bhi.n	8013398 <__ieee754_sqrt+0xec>
 8013374:	f1bc 0f00 	cmp.w	ip, #0
 8013378:	eb0c 0506 	add.w	r5, ip, r6
 801337c:	da43      	bge.n	8013406 <__ieee754_sqrt+0x15a>
 801337e:	2d00      	cmp	r5, #0
 8013380:	db41      	blt.n	8013406 <__ieee754_sqrt+0x15a>
 8013382:	f100 0801 	add.w	r8, r0, #1
 8013386:	1a09      	subs	r1, r1, r0
 8013388:	459c      	cmp	ip, r3
 801338a:	bf88      	it	hi
 801338c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013390:	eba3 030c 	sub.w	r3, r3, ip
 8013394:	4432      	add	r2, r6
 8013396:	4640      	mov	r0, r8
 8013398:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801339c:	f1be 0e01 	subs.w	lr, lr, #1
 80133a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80133a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80133a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80133ac:	d1db      	bne.n	8013366 <__ieee754_sqrt+0xba>
 80133ae:	430b      	orrs	r3, r1
 80133b0:	d006      	beq.n	80133c0 <__ieee754_sqrt+0x114>
 80133b2:	1c50      	adds	r0, r2, #1
 80133b4:	bf13      	iteet	ne
 80133b6:	3201      	addne	r2, #1
 80133b8:	3401      	addeq	r4, #1
 80133ba:	4672      	moveq	r2, lr
 80133bc:	f022 0201 	bicne.w	r2, r2, #1
 80133c0:	1063      	asrs	r3, r4, #1
 80133c2:	0852      	lsrs	r2, r2, #1
 80133c4:	07e1      	lsls	r1, r4, #31
 80133c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80133ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80133ce:	bf48      	it	mi
 80133d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80133d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80133d8:	4614      	mov	r4, r2
 80133da:	e781      	b.n	80132e0 <__ieee754_sqrt+0x34>
 80133dc:	0ad9      	lsrs	r1, r3, #11
 80133de:	3815      	subs	r0, #21
 80133e0:	055b      	lsls	r3, r3, #21
 80133e2:	2900      	cmp	r1, #0
 80133e4:	d0fa      	beq.n	80133dc <__ieee754_sqrt+0x130>
 80133e6:	02cd      	lsls	r5, r1, #11
 80133e8:	d50a      	bpl.n	8013400 <__ieee754_sqrt+0x154>
 80133ea:	f1c2 0420 	rsb	r4, r2, #32
 80133ee:	fa23 f404 	lsr.w	r4, r3, r4
 80133f2:	1e55      	subs	r5, r2, #1
 80133f4:	4093      	lsls	r3, r2
 80133f6:	4321      	orrs	r1, r4
 80133f8:	1b42      	subs	r2, r0, r5
 80133fa:	e78a      	b.n	8013312 <__ieee754_sqrt+0x66>
 80133fc:	4610      	mov	r0, r2
 80133fe:	e7f0      	b.n	80133e2 <__ieee754_sqrt+0x136>
 8013400:	0049      	lsls	r1, r1, #1
 8013402:	3201      	adds	r2, #1
 8013404:	e7ef      	b.n	80133e6 <__ieee754_sqrt+0x13a>
 8013406:	4680      	mov	r8, r0
 8013408:	e7bd      	b.n	8013386 <__ieee754_sqrt+0xda>
 801340a:	bf00      	nop
 801340c:	7ff00000 	.word	0x7ff00000

08013410 <with_errno>:
 8013410:	b570      	push	{r4, r5, r6, lr}
 8013412:	4604      	mov	r4, r0
 8013414:	460d      	mov	r5, r1
 8013416:	4616      	mov	r6, r2
 8013418:	f7fc fa6a 	bl	800f8f0 <__errno>
 801341c:	4629      	mov	r1, r5
 801341e:	6006      	str	r6, [r0, #0]
 8013420:	4620      	mov	r0, r4
 8013422:	bd70      	pop	{r4, r5, r6, pc}

08013424 <xflow>:
 8013424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013426:	4614      	mov	r4, r2
 8013428:	461d      	mov	r5, r3
 801342a:	b108      	cbz	r0, 8013430 <xflow+0xc>
 801342c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013430:	e9cd 2300 	strd	r2, r3, [sp]
 8013434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013438:	4620      	mov	r0, r4
 801343a:	4629      	mov	r1, r5
 801343c:	f7ed f8ec 	bl	8000618 <__aeabi_dmul>
 8013440:	2222      	movs	r2, #34	; 0x22
 8013442:	b003      	add	sp, #12
 8013444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013448:	f7ff bfe2 	b.w	8013410 <with_errno>

0801344c <__math_uflow>:
 801344c:	b508      	push	{r3, lr}
 801344e:	2200      	movs	r2, #0
 8013450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013454:	f7ff ffe6 	bl	8013424 <xflow>
 8013458:	ec41 0b10 	vmov	d0, r0, r1
 801345c:	bd08      	pop	{r3, pc}

0801345e <__math_oflow>:
 801345e:	b508      	push	{r3, lr}
 8013460:	2200      	movs	r2, #0
 8013462:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013466:	f7ff ffdd 	bl	8013424 <xflow>
 801346a:	ec41 0b10 	vmov	d0, r0, r1
 801346e:	bd08      	pop	{r3, pc}

08013470 <fabs>:
 8013470:	ec51 0b10 	vmov	r0, r1, d0
 8013474:	ee10 2a10 	vmov	r2, s0
 8013478:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801347c:	ec43 2b10 	vmov	d0, r2, r3
 8013480:	4770      	bx	lr

08013482 <finite>:
 8013482:	b082      	sub	sp, #8
 8013484:	ed8d 0b00 	vstr	d0, [sp]
 8013488:	9801      	ldr	r0, [sp, #4]
 801348a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801348e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013492:	0fc0      	lsrs	r0, r0, #31
 8013494:	b002      	add	sp, #8
 8013496:	4770      	bx	lr

08013498 <scalbn>:
 8013498:	b570      	push	{r4, r5, r6, lr}
 801349a:	ec55 4b10 	vmov	r4, r5, d0
 801349e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80134a2:	4606      	mov	r6, r0
 80134a4:	462b      	mov	r3, r5
 80134a6:	b99a      	cbnz	r2, 80134d0 <scalbn+0x38>
 80134a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134ac:	4323      	orrs	r3, r4
 80134ae:	d036      	beq.n	801351e <scalbn+0x86>
 80134b0:	4b39      	ldr	r3, [pc, #228]	; (8013598 <scalbn+0x100>)
 80134b2:	4629      	mov	r1, r5
 80134b4:	ee10 0a10 	vmov	r0, s0
 80134b8:	2200      	movs	r2, #0
 80134ba:	f7ed f8ad 	bl	8000618 <__aeabi_dmul>
 80134be:	4b37      	ldr	r3, [pc, #220]	; (801359c <scalbn+0x104>)
 80134c0:	429e      	cmp	r6, r3
 80134c2:	4604      	mov	r4, r0
 80134c4:	460d      	mov	r5, r1
 80134c6:	da10      	bge.n	80134ea <scalbn+0x52>
 80134c8:	a32b      	add	r3, pc, #172	; (adr r3, 8013578 <scalbn+0xe0>)
 80134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ce:	e03a      	b.n	8013546 <scalbn+0xae>
 80134d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80134d4:	428a      	cmp	r2, r1
 80134d6:	d10c      	bne.n	80134f2 <scalbn+0x5a>
 80134d8:	ee10 2a10 	vmov	r2, s0
 80134dc:	4620      	mov	r0, r4
 80134de:	4629      	mov	r1, r5
 80134e0:	f7ec fee4 	bl	80002ac <__adddf3>
 80134e4:	4604      	mov	r4, r0
 80134e6:	460d      	mov	r5, r1
 80134e8:	e019      	b.n	801351e <scalbn+0x86>
 80134ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80134ee:	460b      	mov	r3, r1
 80134f0:	3a36      	subs	r2, #54	; 0x36
 80134f2:	4432      	add	r2, r6
 80134f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80134f8:	428a      	cmp	r2, r1
 80134fa:	dd08      	ble.n	801350e <scalbn+0x76>
 80134fc:	2d00      	cmp	r5, #0
 80134fe:	a120      	add	r1, pc, #128	; (adr r1, 8013580 <scalbn+0xe8>)
 8013500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013504:	da1c      	bge.n	8013540 <scalbn+0xa8>
 8013506:	a120      	add	r1, pc, #128	; (adr r1, 8013588 <scalbn+0xf0>)
 8013508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801350c:	e018      	b.n	8013540 <scalbn+0xa8>
 801350e:	2a00      	cmp	r2, #0
 8013510:	dd08      	ble.n	8013524 <scalbn+0x8c>
 8013512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801351a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801351e:	ec45 4b10 	vmov	d0, r4, r5
 8013522:	bd70      	pop	{r4, r5, r6, pc}
 8013524:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013528:	da19      	bge.n	801355e <scalbn+0xc6>
 801352a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801352e:	429e      	cmp	r6, r3
 8013530:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013534:	dd0a      	ble.n	801354c <scalbn+0xb4>
 8013536:	a112      	add	r1, pc, #72	; (adr r1, 8013580 <scalbn+0xe8>)
 8013538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1e2      	bne.n	8013506 <scalbn+0x6e>
 8013540:	a30f      	add	r3, pc, #60	; (adr r3, 8013580 <scalbn+0xe8>)
 8013542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013546:	f7ed f867 	bl	8000618 <__aeabi_dmul>
 801354a:	e7cb      	b.n	80134e4 <scalbn+0x4c>
 801354c:	a10a      	add	r1, pc, #40	; (adr r1, 8013578 <scalbn+0xe0>)
 801354e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d0b8      	beq.n	80134c8 <scalbn+0x30>
 8013556:	a10e      	add	r1, pc, #56	; (adr r1, 8013590 <scalbn+0xf8>)
 8013558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355c:	e7b4      	b.n	80134c8 <scalbn+0x30>
 801355e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013562:	3236      	adds	r2, #54	; 0x36
 8013564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013568:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801356c:	4620      	mov	r0, r4
 801356e:	4b0c      	ldr	r3, [pc, #48]	; (80135a0 <scalbn+0x108>)
 8013570:	2200      	movs	r2, #0
 8013572:	e7e8      	b.n	8013546 <scalbn+0xae>
 8013574:	f3af 8000 	nop.w
 8013578:	c2f8f359 	.word	0xc2f8f359
 801357c:	01a56e1f 	.word	0x01a56e1f
 8013580:	8800759c 	.word	0x8800759c
 8013584:	7e37e43c 	.word	0x7e37e43c
 8013588:	8800759c 	.word	0x8800759c
 801358c:	fe37e43c 	.word	0xfe37e43c
 8013590:	c2f8f359 	.word	0xc2f8f359
 8013594:	81a56e1f 	.word	0x81a56e1f
 8013598:	43500000 	.word	0x43500000
 801359c:	ffff3cb0 	.word	0xffff3cb0
 80135a0:	3c900000 	.word	0x3c900000

080135a4 <_init>:
 80135a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a6:	bf00      	nop
 80135a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135aa:	bc08      	pop	{r3}
 80135ac:	469e      	mov	lr, r3
 80135ae:	4770      	bx	lr

080135b0 <_fini>:
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b2:	bf00      	nop
 80135b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135b6:	bc08      	pop	{r3}
 80135b8:	469e      	mov	lr, r3
 80135ba:	4770      	bx	lr
