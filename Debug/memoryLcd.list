
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a74c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003e5b8  0801a900  0801a900  0002a900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08058eb8  08058eb8  00070558  2**0
                  CONTENTS
  4 .ARM          00000008  08058eb8  08058eb8  00068eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08058ec0  08058ec0  00070558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08058ec0  08058ec0  00068ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08058ec4  08058ec4  00068ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000558  20000000  08058ec8  00070000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070558  2**0
                  CONTENTS
 10 .bss          000058b0  20000558  20000558  00070558  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005e08  20005e08  00070558  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070558  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cd94  00000000  00000000  00070588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000772e  00000000  00000000  0009d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002280  00000000  00000000  000a4a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f90  00000000  00000000  000a6cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd6a  00000000  00000000  000a8c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035464  00000000  00000000  000d89ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc30  00000000  00000000  0010de2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fda5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab88  00000000  00000000  001fdab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000558 	.word	0x20000558
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a8e4 	.word	0x0801a8e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000055c 	.word	0x2000055c
 80001ec:	0801a8e4 	.word	0x0801a8e4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <SD_logger+0x24>)
 8001042:	f000 fa5b 	bl	80014fc <Create_Dir>
	Create_File("logs/LOG.TXT");
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <SD_logger+0x28>)
 8001048:	f000 f918 	bl	800127c <Create_File>
	Update_File("logs/LOG.TXT", msg);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <SD_logger+0x28>)
 8001050:	f000 f9a0 	bl	8001394 <Update_File>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801a900 	.word	0x0801a900
 8001060:	0801a908 	.word	0x0801a908

08001064 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <Mount_SD+0x30>)
 8001072:	f010 fa39 	bl	80114e8 <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Mount_SD+0x34>)
 800107c:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Mount_SD+0x34>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <Mount_SD+0x26>
		return SD_ERROR;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 800108a:	2301      	movs	r3, #1
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000574 	.word	0x20000574
 8001098:	200025f0 	.word	0x200025f0

0800109c <Scan_SD_my>:
	else return SD_ERROR;
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD_my (DIR *dir, char *filename)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

    if (fresult == FR_OK)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <Scan_SD_my+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d123      	bne.n	80010f6 <Scan_SD_my+0x5a>
    {
		fresult = f_readdir(dir, &fno);                   /* Read a directory item */
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <Scan_SD_my+0x6c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f011 f85f 	bl	8012174 <f_readdir>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Scan_SD_my+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || fno.fname[0] == 0)  return fresult;  /* Break on error or end of dir */
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Scan_SD_my+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <Scan_SD_my+0x32>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Scan_SD_my+0x6c>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <Scan_SD_my+0x38>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <Scan_SD_my+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	e012      	b.n	80010fa <Scan_SD_my+0x5e>
		if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <Scan_SD_my+0x6c>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <Scan_SD_my+0x50>
		{
			sprintf (filename, "Dir: %s\r\n", fno.fname);
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Scan_SD_my+0x70>)
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <Scan_SD_my+0x74>)
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f012 fccf 	bl	8013a88 <siprintf>
 80010ea:	e004      	b.n	80010f6 <Scan_SD_my+0x5a>
		}
		else
		{   /* It is a file. */
		   sprintf(filename,"File: %s\n", fno.fname);
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <Scan_SD_my+0x70>)
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <Scan_SD_my+0x78>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f012 fcc9 	bl	8013a88 <siprintf>
		}
    }
    return fresult;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <Scan_SD_my+0x68>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200025f0 	.word	0x200025f0
 8001108:	200025d8 	.word	0x200025d8
 800110c:	200025e1 	.word	0x200025e1
 8001110:	0801a918 	.word	0x0801a918
 8001114:	0801a924 	.word	0x0801a924

08001118 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001122:	494d      	ldr	r1, [pc, #308]	; (8001258 <Read_File+0x140>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f011 f862 	bl	80121ee <f_stat>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Read_File+0x144>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <Read_File+0x144>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f011 fb58 	bl	80127f0 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <Read_File+0x148>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f012 fc9d 	bl	8013a88 <siprintf>
//		Send_Uart (buf);
		free(buf);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f011 fb56 	bl	8012800 <free>
	    return fresult;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Read_File+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e07a      	b.n	8001250 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800115a:	2201      	movs	r2, #1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <Read_File+0x14c>)
 8001160:	f010 fa08 	bl	8011574 <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Read_File+0x144>)
 800116a:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <Read_File+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f011 fb3b 	bl	80127f0 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <Read_File+0x144>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <Read_File+0x150>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f012 fc7d 	bl	8013a88 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f011 fb36 	bl	8012800 <free>
		    return fresult;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Read_File+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e05a      	b.n	8001250 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800119a:	2004      	movs	r0, #4
 800119c:	f011 fb28 	bl	80127f0 <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <Read_File+0x14c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <Read_File+0x154>)
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <Read_File+0x14c>)
 80011ae:	f010 fbad 	bl	801190c <f_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <Read_File+0x144>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Read_File+0x144>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f011 fb14 	bl	80127f0 <malloc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
			free(buffer);
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f011 fb17 	bl	8012800 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Read_File+0x144>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <Read_File+0x158>)
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f012 fc53 	bl	8013a88 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f011 fb0c 	bl	8012800 <free>
 80011e8:	e030      	b.n	800124c <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80011ea:	2231      	movs	r2, #49	; 0x31
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f012 fce3 	bl	8013bba <strncpy>
			free(buffer);
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f011 fb03 	bl	8012800 <free>

			/* Close file */
			fresult = f_close(&fil);
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <Read_File+0x14c>)
 80011fc:	f010 fef7 	bl	8011fee <f_close>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Read_File+0x144>)
 8001206:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Read_File+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f011 faed 	bl	80127f0 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Read_File+0x144>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <Read_File+0x15c>)
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f012 fc2f 	bl	8013a88 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f011 fae8 	bl	8012800 <free>
 8001230:	e00c      	b.n	800124c <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f011 fadc 	bl	80127f0 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <Read_File+0x160>)
 8001240:	69b8      	ldr	r0, [r7, #24]
 8001242:	f012 fc21 	bl	8013a88 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001246:	69b8      	ldr	r0, [r7, #24]
 8001248:	f011 fada 	bl	8012800 <free>
			}
		}
	    return fresult;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <Read_File+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200025d8 	.word	0x200025d8
 800125c:	200025f0 	.word	0x200025f0
 8001260:	0801aa3c 	.word	0x0801aa3c
 8001264:	200015a8 	.word	0x200015a8
 8001268:	0801a978 	.word	0x0801a978
 800126c:	200025f4 	.word	0x200025f4
 8001270:	0801aa60 	.word	0x0801aa60
 8001274:	0801aa88 	.word	0x0801aa88
 8001278:	0801aab0 	.word	0x0801aab0

0800127c <Create_File>:

FRESULT Create_File (char *name)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <Create_File+0xf8>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f010 ffb1 	bl	80121ee <f_stat>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Create_File+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <Create_File+0xfc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f011 faa7 	bl	80127f0 <malloc>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <Create_File+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f012 fbec 	bl	8013a88 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f011 faa5 	bl	8012800 <free>
	    return fresult;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Create_File+0xfc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e057      	b.n	800136c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012bc:	220b      	movs	r2, #11
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <Create_File+0x104>)
 80012c2:	f010 f957 	bl	8011574 <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Create_File+0xfc>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <Create_File+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f011 fa8a 	bl	80127f0 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Create_File+0xfc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4926      	ldr	r1, [pc, #152]	; (8001384 <Create_File+0x108>)
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f012 fbcc 	bl	8013a88 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80012f0:	6938      	ldr	r0, [r7, #16]
 80012f2:	f011 fa85 	bl	8012800 <free>
		    return fresult;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <Create_File+0xfc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e037      	b.n	800136c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f011 fa77 	bl	80127f0 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Create_File+0x10c>)
 800130a:	69f8      	ldr	r0, [r7, #28]
 800130c:	f012 fbbc 	bl	8013a88 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f011 fa75 	bl	8012800 <free>
		}

		fresult = f_close(&fil);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Create_File+0x104>)
 8001318:	f010 fe69 	bl	8011fee <f_close>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <Create_File+0xfc>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <Create_File+0xfc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f011 fa5f 	bl	80127f0 <malloc>
 8001332:	4603      	mov	r3, r0
 8001334:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <Create_File+0xfc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4913      	ldr	r1, [pc, #76]	; (800138c <Create_File+0x110>)
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f012 fba1 	bl	8013a88 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f011 fa5a 	bl	8012800 <free>
 800134c:	e00c      	b.n	8001368 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f011 fa4e 	bl	80127f0 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <Create_File+0x114>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f012 fb93 	bl	8013a88 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001362:	69b8      	ldr	r0, [r7, #24]
 8001364:	f011 fa4c 	bl	8012800 <free>
		}
	}
    return fresult;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Create_File+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200025d8 	.word	0x200025d8
 8001378:	200025f0 	.word	0x200025f0
 800137c:	0801aad0 	.word	0x0801aad0
 8001380:	200015a8 	.word	0x200015a8
 8001384:	0801ab08 	.word	0x0801ab08
 8001388:	0801ab30 	.word	0x0801ab30
 800138c:	0801ab70 	.word	0x0801ab70
 8001390:	0801aab0 	.word	0x0801aab0

08001394 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800139e:	494d      	ldr	r1, [pc, #308]	; (80014d4 <Update_File+0x140>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f010 ff24 	bl	80121ee <f_stat>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <Update_File+0x144>)
 80013ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Update_File+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f011 fa1a 	bl	80127f0 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4946      	ldr	r1, [pc, #280]	; (80014dc <Update_File+0x148>)
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f012 fb5f 	bl	8013a88 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f011 fa18 	bl	8012800 <free>
	    return fresult;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <Update_File+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	e079      	b.n	80014ca <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <Update_File+0x14c>)
 80013dc:	f010 f8ca 	bl	8011574 <f_open>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Update_File+0x144>)
 80013e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <Update_File+0x144>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f011 f9fd 	bl	80127f0 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Update_File+0x144>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <Update_File+0x150>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f012 fb3f 	bl	8013a88 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f011 f9f8 	bl	8012800 <free>
	        return fresult;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <Update_File+0x144>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	e059      	b.n	80014ca <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7fe fef4 	bl	8000204 <strlen>
 800141c:	4602      	mov	r2, r0
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Update_File+0x154>)
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <Update_File+0x14c>)
 8001424:	f010 fbd1 	bl	8011bca <f_write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <Update_File+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Update_File+0x144>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f011 f9d9 	bl	80127f0 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Update_File+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <Update_File+0x158>)
 800144c:	69b8      	ldr	r0, [r7, #24]
 800144e:	f012 fb1b 	bl	8013a88 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f011 f9d4 	bl	8012800 <free>
 8001458:	e00c      	b.n	8001474 <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f011 f9c8 	bl	80127f0 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <Update_File+0x15c>)
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f012 fb0d 	bl	8013a88 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f011 f9c6 	bl	8012800 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <Update_File+0x14c>)
 8001476:	f010 fdba 	bl	8011fee <f_close>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Update_File+0x144>)
 8001480:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Update_File+0x144>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f011 f9b0 	bl	80127f0 <malloc>
 8001490:	4603      	mov	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <Update_File+0x144>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Update_File+0x160>)
 800149e:	6938      	ldr	r0, [r7, #16]
 80014a0:	f012 faf2 	bl	8013a88 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f011 f9ab 	bl	8012800 <free>
 80014aa:	e00c      	b.n	80014c6 <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f011 f99f 	bl	80127f0 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <Update_File+0x164>)
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f012 fae4 	bl	8013a88 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f011 f99d 	bl	8012800 <free>
	     }
	}
    return fresult;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <Update_File+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200025d8 	.word	0x200025d8
 80014d8:	200025f0 	.word	0x200025f0
 80014dc:	0801a958 	.word	0x0801a958
 80014e0:	200015a8 	.word	0x200015a8
 80014e4:	0801a978 	.word	0x0801a978
 80014e8:	200025f8 	.word	0x200025f8
 80014ec:	0801ab94 	.word	0x0801ab94
 80014f0:	0801abbc 	.word	0x0801abbc
 80014f4:	0801aa88 	.word	0x0801aa88
 80014f8:	0801aab0 	.word	0x0801aab0

080014fc <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f010 ff60 	bl	80123ca <f_mkdir>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Create_Dir+0x68>)
 8001510:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Create_Dir+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f011 f968 	bl	80127f0 <malloc>
 8001520:	4603      	mov	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4910      	ldr	r1, [pc, #64]	; (8001568 <Create_Dir+0x6c>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f012 faad 	bl	8013a88 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f011 f966 	bl	8012800 <free>
 8001534:	e00f      	b.n	8001556 <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f011 f95a 	bl	80127f0 <malloc>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Create_Dir+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <Create_Dir+0x70>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f012 fa9c 	bl	8013a88 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f011 f955 	bl	8012800 <free>
    }
    return fresult;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Create_Dir+0x68>)
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200025f0 	.word	0x200025f0
 8001568:	0801ac1c 	.word	0x0801ac1c
 800156c:	0801ac40 	.word	0x0801ac40

08001570 <Check_SD_Space>:

void Check_SD_Space (char* free_total)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <Check_SD_Space+0xcc>)
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <Check_SD_Space+0xd0>)
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <Check_SD_Space+0xd4>)
 800157e:	f010 fe6f 	bl	8012260 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Check_SD_Space+0xcc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <Check_SD_Space+0xcc>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	8952      	ldrh	r2, [r2, #10]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Check_SD_Space+0xd8>)
 80015a0:	f7ff f84a 	bl	8000638 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <Check_SD_Space+0xdc>)
 80015b4:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80015b6:	201e      	movs	r0, #30
 80015b8:	f011 f91a 	bl	80127f0 <malloc>
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <Check_SD_Space+0xdc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_SD_Space+0xe0>)
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f012 fa5d 	bl	8013a88 <siprintf>
//    Send_Uart(buf);
    free(buf);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f011 f916 	bl	8012800 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <Check_SD_Space+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <Check_SD_Space+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Check_SD_Space+0xd8>)
 80015f0:	f7ff f822 	bl	8000638 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <Check_SD_Space+0xe4>)
 8001604:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001606:	201e      	movs	r0, #30
 8001608:	f011 f8f2 	bl	80127f0 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Check_SD_Space+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4910      	ldr	r1, [pc, #64]	; (8001658 <Check_SD_Space+0xe8>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f012 fa35 	bl	8013a88 <siprintf>
//    Send_Uart(buf);
    free(buf);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f011 f8ee 	bl	8012800 <free>
    sprintf (free_total, "%lu/%lu", free_space, total);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Check_SD_Space+0xe4>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <Check_SD_Space+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <Check_SD_Space+0xec>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f012 fa2a 	bl	8013a88 <siprintf>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200025fc 	.word	0x200025fc
 8001640:	20002600 	.word	0x20002600
 8001644:	0801ac6c 	.word	0x0801ac6c
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	20002604 	.word	0x20002604
 8001650:	0801ac70 	.word	0x0801ac70
 8001654:	20002608 	.word	0x20002608
 8001658:	0801ac8c 	.word	0x0801ac8c
 800165c:	0801aca8 	.word	0x0801aca8

08001660 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	22d0      	movs	r2, #208	; 0xd0
 800167e:	21ef      	movs	r1, #239	; 0xef
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <read_chip_id+0x3c>)
 8001682:	f008 fa75 	bl	8009b70 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b55      	cmp	r3, #85	; 0x55
 800168a:	d001      	beq.n	8001690 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002740 	.word	0x20002740

080016a0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d81a      	bhi.n	80016ec <set_oss+0x4c>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_oss+0x1c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	705a      	strb	r2, [r3, #1]
			break;
 80016d2:	e00f      	b.n	80016f4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	705a      	strb	r2, [r3, #1]
			break;
 80016da:	e00b      	b.n	80016f4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	220e      	movs	r2, #14
 80016e0:	705a      	strb	r2, [r3, #1]
			break;
 80016e2:	e007      	b.n	80016f4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	221a      	movs	r2, #26
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e003      	b.n	80016f4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	705a      	strb	r2, [r3, #1]
			break;
 80016f2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001704:	2332      	movs	r3, #50	; 0x32
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	22f4      	movs	r2, #244	; 0xf4
 8001716:	21ee      	movs	r1, #238	; 0xee
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <set_oss+0x88>)
 800171a:	f008 f92f 	bl	800997c <HAL_I2C_Mem_Write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002740 	.word	0x20002740

0800172c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800175a:	2332      	movs	r3, #50	; 0x32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2316      	movs	r3, #22
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	22aa      	movs	r2, #170	; 0xaa
 800176c:	21ef      	movs	r1, #239	; 0xef
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <read_calib_data+0xe0>)
 8001770:	f008 f9fe 	bl	8009b70 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177a:	e03c      	b.n	80017f6 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800177c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	443b      	add	r3, r7
 8001786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001792:	3328      	adds	r3, #40	; 0x28
 8001794:	443b      	add	r3, r7
 8001796:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4403      	add	r3, r0
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b212      	sxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80017ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d9be      	bls.n	800177c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80017fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001802:	4618      	mov	r0, r3
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002740 	.word	0x20002740

08001810 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f011 f804 	bl	801282c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001824:	687c      	ldr	r4, [r7, #4]
 8001826:	f7ff ff1b 	bl	8001660 <read_chip_id>
 800182a:	4603      	mov	r3, r0
 800182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687c      	ldr	r4, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <read_calib_data>
 800183a:	4603      	mov	r3, r0
 800183c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff2a 	bl	80016a0 <set_oss>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800185a:	232e      	movs	r3, #46	; 0x2e
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <get_ut+0x50>)
 8001872:	f008 f883 	bl	800997c <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001876:	2005      	movs	r0, #5
 8001878:	f007 fb64 	bl	8008f44 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800187c:	2332      	movs	r3, #50	; 0x32
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	22f6      	movs	r2, #246	; 0xf6
 800188c:	21ef      	movs	r1, #239	; 0xef
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <get_ut+0x50>)
 8001890:	f008 f96e 	bl	8009b70 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4313      	orrs	r3, r2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20002740 	.word	0x20002740

080018a8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	13db      	asrs	r3, r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e4:	02da      	lsls	r2, r3, #11
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	440b      	add	r3, r1
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	3308      	adds	r3, #8
 8001908:	111b      	asrs	r3, r3, #4
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001960 <get_temp+0xb8>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001964 <get_temp+0xbc>
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d908      	bls.n	8001942 <get_temp+0x9a>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001968 <get_temp+0xc0>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	db03      	blt.n	800194a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	3dcccccd 	.word	0x3dcccccd
 8001964:	c2200000 	.word	0xc2200000
 8001968:	42aa0000 	.word	0x42aa0000

0800196c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <get_up+0x7c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	22f4      	movs	r2, #244	; 0xf4
 8001998:	21ee      	movs	r1, #238	; 0xee
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <get_up+0x80>)
 800199c:	f007 ffee 	bl	800997c <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f007 face 	bl	8008f44 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2303      	movs	r3, #3
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	22f6      	movs	r2, #246	; 0xf6
 80019ba:	21ef      	movs	r1, #239	; 0xef
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <get_up+0x80>)
 80019be:	f008 f8d7 	bl	8009b70 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4413      	add	r3, r2
 80019cc:	7aba      	ldrb	r2, [r7, #10]
 80019ce:	441a      	add	r2, r3
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	f1c3 0308 	rsb	r3, r3, #8
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	return up;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0801acb0 	.word	0x0801acb0
 80019ec:	20002740 	.word	0x20002740

080019f0 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a0e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001a10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fb03 f303 	mul.w	r3, r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <get_pressure+0x34>
 8001a20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a24:	131b      	asrs	r3, r3, #12
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da01      	bge.n	8001a32 <get_pressure+0x42>
 8001a2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a32:	12db      	asrs	r3, r3, #11
 8001a34:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <get_pressure+0x5a>
 8001a46:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a4a:	12db      	asrs	r3, r3, #11
 8001a4c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <get_pressure+0x7e>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <get_pressure+0x98>
 8001a82:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a86:	331f      	adds	r3, #31
 8001a88:	135b      	asrs	r3, r3, #13
 8001a8a:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fb03 f303 	mul.w	r3, r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <get_pressure+0xb0>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <get_pressure+0xc0>
 8001aaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <get_pressure+0xd2>
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	109b      	asrs	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	0bdb      	lsrs	r3, r3, #15
 8001ad6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aea:	410a      	asrs	r2, r1
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db06      	blt.n	8001b06 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005a      	lsls	r2, r3, #1
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e005      	b.n	8001b12 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <get_pressure+0x12a>
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	121b      	asrs	r3, r3, #8
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <get_pressure+0x136>
 8001b24:	33ff      	adds	r3, #255	; 0xff
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <get_pressure+0x152>
 8001b3c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	141b      	asrs	r3, r3, #16
 8001b44:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <get_pressure+0x198>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <get_pressure+0x168>
 8001b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	141b      	asrs	r3, r3, #16
 8001b5a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <get_pressure+0x17c>
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

	return p;
 8001b76:	69fb      	ldr	r3, [r7, #28]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	ffffe343 	.word	0xffffe343
 8001b8c:	00000000 	.word	0x00000000

08001b90 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <get_altitude+0xb8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb4:	ee16 0a90 	vmov	r0, s13
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001c38 <get_altitude+0xa8>
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f016 fb72 	bl	80182b0 <pow>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	491d      	ldr	r1, [pc, #116]	; (8001c4c <get_altitude+0xbc>)
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <get_altitude+0xb0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f818 	bl	8000c28 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <get_altitude+0xc0>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d908      	bls.n	8001c20 <get_altitude+0x90>
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c54 <get_altitude+0xc4>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db03      	blt.n	8001c28 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	ccd9456c 	.word	0xccd9456c
 8001c3c:	3fc85b95 	.word	0x3fc85b95
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40e5a540 	.word	0x40e5a540
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	c3fa0000 	.word	0xc3fa0000
 8001c54:	460ca000 	.word	0x460ca000

08001c58 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_i2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get_slp+0x80>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cdc <get_slp+0x84>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001cd0 <get_slp+0x78>
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f016 fb07 	bl	80182b0 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ffb7 	bl	8000c28 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

	return slp;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
}
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	4015051e 	.word	0x4015051e
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	472d2a00 	.word	0x472d2a00

08001ce0 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b095      	sub	sp, #84	; 0x54
 8001ce4:	af0e      	add	r7, sp, #56	; 0x38
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001cea:	f7ff fdb3 	bl	8001854 <get_ut>
 8001cee:	ee07 0a90 	vmov	s15, r0
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff fdd3 	bl	80018a8 <get_temp>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d10:	f7ff fe2c 	bl	800196c <get_up>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001d1a:	683e      	ldr	r6, [r7, #0]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d36:	f7ff fe5b 	bl	80019f0 <get_pressure>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001d40:	6838      	ldr	r0, [r7, #0]
 8001d42:	f7ff ff89 	bl	8001c58 <get_slp>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff ff1d 	bl	8001b90 <get_altitude>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	617b      	str	r3, [r7, #20]
	return result;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d90 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001d9c:	e083      	b.n	8001ea6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	440b      	add	r3, r1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4944      	ldr	r1, [pc, #272]	; (8001ebc <initButtons+0x12c>)
 8001dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4940      	ldr	r1, [pc, #256]	; (8001ec0 <initButtons+0x130>)
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	7993      	ldrb	r3, [r2, #6]
 8001dd2:	f36f 0300 	bfc	r3, #0, #1
 8001dd6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	7993      	ldrb	r3, [r2, #6]
 8001de4:	f36f 0341 	bfc	r3, #1, #1
 8001de8:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	f67f af78 	bls.w	8001d9e <initButtons+0xe>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000020 	.word	0x20000020
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001ece:	e020      	b.n	8001f12 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <resetButtonHandlers+0x64>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <resetButtonHandlers+0x64>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
		i++;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d9db      	bls.n	8001ed0 <resetButtonHandlers+0xc>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f007 fb68 	bl	8009614 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <scanButton>:

void scanButton(Button* btn){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	7993      	ldrb	r3, [r2, #6]
 8001f78:	f361 0300 	bfi	r3, r1, #0, #1
 8001f7c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffd4 	bl	8001f2c <readButton>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7993      	ldrb	r3, [r2, #6]
 8001f94:	f361 0341 	bfi	r3, r1, #1, #1
 8001f98:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001f9a:	7bba      	ldrb	r2, [r7, #14]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d150      	bne.n	8002044 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d146      	bne.n	8002036 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a9b      	ldrb	r3, [r3, #10]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7a9b      	ldrb	r3, [r3, #10]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <scanButton+0x15c>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d32d      	bcc.n	800202e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b5b      	ldrb	r3, [r3, #13]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d110      	bne.n	8001ffc <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a5b      	ldrb	r3, [r3, #9]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <scanButton+0x15c>)
 8002002:	8852      	ldrh	r2, [r2, #2]
 8002004:	fb93 f1f2 	sdiv	r1, r3, r2
 8002008:	fb01 f202 	mul.w	r2, r1, r2
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2000      	movs	r0, #0
 8002020:	4798      	blx	r3
					}
					btn->longContinuous++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002034:	e03a      	b.n	80020ac <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	735a      	strb	r2, [r3, #13]
}
 8002042:	e033      	b.n	80020ac <scanButton+0x154>
		if(currStatus == 1){
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11b      	bne.n	8002082 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d126      	bne.n	80020ac <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2000      	movs	r0, #0
 800206c:	4798      	blx	r3
				btn->shortSingleOn++;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	79db      	ldrb	r3, [r3, #7]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	731a      	strb	r2, [r3, #12]
}
 8002080:	e014      	b.n	80020ac <scanButton+0x154>
			if(btn->releaseHandled == 0){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7b9b      	ldrb	r3, [r3, #14]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d110      	bne.n	80020ac <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2000      	movs	r0, #0
 8002098:	4798      	blx	r3
				btn->shortSingleOff++;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7a1b      	ldrb	r3, [r3, #8]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	739a      	strb	r2, [r3, #14]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000044 	.word	0x20000044

080020b8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020c4:	e00a      	b.n	80020dc <scanButtons+0x24>
		scanButton(btns[i]);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff41 	bl	8001f58 <scanButton>
		i++;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d9f1      	bls.n	80020c6 <scanButtons+0xe>
	}
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	4b6b      	ldr	r3, [pc, #428]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a55      	ldr	r2, [pc, #340]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a40      	ldr	r2, [pc, #256]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2140      	movs	r1, #64	; 0x40
 80021ca:	483b      	ldr	r0, [pc, #236]	; (80022b8 <MX_GPIO_Init+0x1cc>)
 80021cc:	f007 fa3a 	bl	8009644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f244 0181 	movw	r1, #16513	; 0x4081
 80021d6:	4839      	ldr	r0, [pc, #228]	; (80022bc <MX_GPIO_Init+0x1d0>)
 80021d8:	f007 fa34 	bl	8009644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2140      	movs	r1, #64	; 0x40
 80021e0:	4837      	ldr	r0, [pc, #220]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 80021e2:	f007 fa2f 	bl	8009644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ec:	4835      	ldr	r0, [pc, #212]	; (80022c4 <MX_GPIO_Init+0x1d8>)
 80021ee:	f007 fa29 	bl	8009644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	482b      	ldr	r0, [pc, #172]	; (80022b8 <MX_GPIO_Init+0x1cc>)
 800220a:	f007 f857 	bl	80092bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800220e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4825      	ldr	r0, [pc, #148]	; (80022bc <MX_GPIO_Init+0x1d0>)
 8002228:	f007 f848 	bl	80092bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 800222c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002230:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002232:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_GPIO_Init+0x1dc>)
 8002244:	f007 f83a 	bl	80092bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002248:	2340      	movs	r3, #64	; 0x40
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4818      	ldr	r0, [pc, #96]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 8002260:	f007 f82c 	bl	80092bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 8002278:	f007 f820 	bl	80092bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <MX_GPIO_Init+0x1d8>)
 8002296:	f007 f811 	bl	80092bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2028      	movs	r0, #40	; 0x28
 80022a0:	f006 ff4f 	bl	8009142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022a4:	2028      	movs	r0, #40	; 0x28
 80022a6:	f006 ff68 	bl	800917a <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40021000 	.word	0x40021000

080022cc <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	int msb = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b2f      	cmp	r3, #47	; 0x2f
 80022de:	bf8c      	ite	hi
 80022e0:	2301      	movhi	r3, #1
 80022e2:	2300      	movls	r3, #0
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b39      	cmp	r3, #57	; 0x39
 80022ec:	bf94      	ite	ls
 80022ee:	2301      	movls	r3, #1
 80022f0:	2300      	movhi	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <hexCharToInt+0x3a>
		msb = *value - 48;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3b30      	subs	r3, #48	; 0x30
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e003      	b.n	800230e <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3b37      	subs	r3, #55	; 0x37
 800230c:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3301      	adds	r3, #1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b2f      	cmp	r3, #47	; 0x2f
 800231a:	bf8c      	ite	hi
 800231c:	2301      	movhi	r3, #1
 800231e:	2300      	movls	r3, #0
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3301      	adds	r3, #1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b39      	cmp	r3, #57	; 0x39
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4013      	ands	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3301      	adds	r3, #1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3b30      	subs	r3, #48	; 0x30
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e004      	b.n	8002350 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3301      	adds	r3, #1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3b37      	subs	r3, #55	; 0x37
 800234e:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
	return(result)
 800235a:	68fb      	ldr	r3, [r7, #12]
;}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002378:	4619      	mov	r1, r3
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <getDataFromUart+0x20>)
 800237c:	f00b fe6b 	bl	800e056 <HAL_UART_Receive_DMA>

}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20005cfc 	.word	0x20005cfc

0800238c <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 800238c:	b580      	push	{r7, lr}
 800238e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002392:	af00      	add	r7, sp, #0
 8002394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002398:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800239c:	6018      	str	r0, [r3, #0]
 800239e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023a2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80023a6:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 80023a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023b0:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80023b4:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	3304      	adds	r3, #4
 80023c2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f011 fbf6 	bl	8013bba <strncpy>
	gpsModule.getData = &getDataFromUart;
 80023ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023d2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <initGps+0x90>)
 80023d8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 80023dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80023ea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023ee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f44f 7319 	mov.w	r3, #612	; 0x264
 8002404:	461a      	mov	r2, r3
 8002406:	f010 fa03 	bl	8012810 <memcpy>
}
 800240a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800240e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	08002369 	.word	0x08002369

08002420 <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <strtoke+0x1a>
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <strtoke+0x60>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <strtoke+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <strtoke+0x26>
 8002442:	2300      	movs	r3, #0
 8002444:	e017      	b.n	8002476 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <strtoke+0x60>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <strtoke+0x60>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f011 fbc4 	bl	8013be0 <strpbrk>
 8002458:	4603      	mov	r3, r0
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <strtoke+0x60>)
 800245c:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <strtoke+0x60>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <strtoke+0x54>
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <strtoke+0x60>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <strtoke+0x60>)
 800246e:	600a      	str	r2, [r1, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8002474:	68fb      	ldr	r3, [r7, #12]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20002738 	.word	0x20002738

08002484 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002494:	e009      	b.n	80024aa <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	4053      	eors	r3, r2
 80024a2:	73fb      	strb	r3, [r7, #15]
		i++;
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	3301      	adds	r3, #1
 80024a8:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b2a      	cmp	r3, #42	; 0x2a
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	440b      	add	r3, r1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4013      	ands	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1df      	bne.n	8002496 <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	3301      	adds	r3, #1
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fef4 	bl	80022cc <hexCharToInt>
 80024e4:	4602      	mov	r2, r0
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <getMessage+0x68>)
 8002516:	4413      	add	r3, r2
 8002518:	4619      	mov	r1, r3
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f011 fb7a 	bl	8013c14 <strstr>
 8002520:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <getMessage+0x30>
 8002528:	2300      	movs	r3, #0
 800252a:	e016      	b.n	800255a <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <getMessage+0x6c>)
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f012 f9b4 	bl	801489c <strtok>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <getMessage+0x42>
 800253a:	2300      	movs	r3, #0
 800253c:	e00d      	b.n	800255a <getMessage+0x5e>
	if(validateChecksum(start)){
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ffa0 	bl	8002484 <validateChecksum>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <getMessage+0x5c>
		return strcpy(destination,start);
 800254a:	6979      	ldr	r1, [r7, #20]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f011 fb2c 	bl	8013baa <strcpy>
 8002552:	4603      	mov	r3, r0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e000      	b.n	800255a <getMessage+0x5e>
	} else {
		return NULL;
 8002558:	2300      	movs	r3, #0
	}
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	0801b98c 	.word	0x0801b98c
 8002568:	0801acb4 	.word	0x0801acb4

0800256c <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8002572:	af00      	add	r7, sp, #0
 8002574:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002578:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800257c:	6018      	str	r0, [r3, #0]
 800257e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002582:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002586:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 8002588:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800258c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8002598:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800259c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1d19      	adds	r1, r3, #4
 80025a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025ac:	4618      	mov	r0, r3
 80025ae:	f011 fb04 	bl	8013bba <strncpy>
	dev->isReady = 1;
 80025b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025b6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 80025c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2200      	movs	r2, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff95 	bl	80024fc <getMessage>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d113      	bne.n	8002600 <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 80025d8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025dc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <getLocation+0x90>)
 80025e4:	461d      	mov	r5, r3
 80025e6:	4614      	mov	r4, r2
 80025e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ea:	6028      	str	r0, [r5, #0]
 80025ec:	6069      	str	r1, [r5, #4]
 80025ee:	60aa      	str	r2, [r5, #8]
 80025f0:	60eb      	str	r3, [r5, #12]
 80025f2:	7823      	ldrb	r3, [r4, #0]
 80025f4:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e1ff      	b.n	80029fa <getLocation+0x48e>
 80025fa:	bf00      	nop
 80025fc:	0801acbc 	.word	0x0801acbc
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 8002600:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002604:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f107 020c 	add.w	r2, r7, #12
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f011 faca 	bl	8013baa <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	49dd      	ldr	r1, [pc, #884]	; (8002990 <getLocation+0x424>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff feff 	bl	8002420 <strtoke>
 8002622:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 8002626:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800262a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002634:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002638:	4618      	mov	r0, r3
 800263a:	f011 fab6 	bl	8013baa <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 800263e:	49d4      	ldr	r1, [pc, #848]	; (8002990 <getLocation+0x424>)
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff feed 	bl	8002420 <strtoke>
 8002646:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 800264a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800264e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002658:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800265c:	4618      	mov	r0, r3
 800265e:	f011 faa4 	bl	8013baa <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 8002662:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002666:	f010 f882 	bl	801276e <atoi>
 800266a:	4603      	mov	r3, r0
 800266c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 8002670:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002674:	4ac7      	ldr	r2, [pc, #796]	; (8002994 <getLocation+0x428>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0b5a      	lsrs	r2, r3, #13
 800267c:	4bc6      	ldr	r3, [pc, #792]	; (8002998 <getLocation+0x42c>)
 800267e:	fba3 1302 	umull	r1, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b2da      	uxtb	r2, r3
 800268e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002692:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 800269c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80026a0:	4abd      	ldr	r2, [pc, #756]	; (8002998 <getLocation+0x42c>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095a      	lsrs	r2, r3, #5
 80026a8:	4bbb      	ldr	r3, [pc, #748]	; (8002998 <getLocation+0x42c>)
 80026aa:	fba3 1302 	umull	r1, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2164      	movs	r1, #100	; 0x64
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026be:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 80026c8:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80026cc:	4bb2      	ldr	r3, [pc, #712]	; (8002998 <getLocation+0x42c>)
 80026ce:	fba3 1302 	umull	r1, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026e2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 80026ec:	49a8      	ldr	r1, [pc, #672]	; (8002990 <getLocation+0x424>)
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff fe96 	bl	8002420 <strtoke>
 80026f4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 80026f8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026fc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002706:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800270a:	4618      	mov	r0, r3
 800270c:	f011 fa4d 	bl	8013baa <strcpy>
	double latitude = atof(parsePointer);
 8002710:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002714:	f010 f828 	bl	8012768 <atof>
 8002718:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <getLocation+0x430>)
 8002722:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002726:	f7fe f8b1 	bl	800088c <__aeabi_ddiv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa59 	bl	8000be8 <__aeabi_d2uiz>
 8002736:	4603      	mov	r3, r0
 8002738:	b2da      	uxtb	r2, r3
 800273a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800273e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 8002748:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800274c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002756:	461a      	mov	r2, r3
 8002758:	2364      	movs	r3, #100	; 0x64
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd ff00 	bl	8000564 <__aeabi_i2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800276c:	f7fd fdac 	bl	80002c8 <__aeabi_dsub>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002778:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 8002782:	4983      	ldr	r1, [pc, #524]	; (8002990 <getLocation+0x424>)
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fe4b 	bl	8002420 <strtoke>
 800278a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 800278e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002792:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800279c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027a0:	4618      	mov	r0, r3
 80027a2:	f011 fa02 	bl	8013baa <strcpy>
	position->n_s = *parsePointer;
 80027a6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027b0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 80027ba:	4975      	ldr	r1, [pc, #468]	; (8002990 <getLocation+0x424>)
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff fe2f 	bl	8002420 <strtoke>
 80027c2:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 80027c6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027ca:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80027d4:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027d8:	4618      	mov	r0, r3
 80027da:	f011 f9e6 	bl	8013baa <strcpy>
	double longitude = atof(parsePointer);
 80027de:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80027e2:	f00f ffc1 	bl	8012768 <atof>
 80027e6:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	4b6b      	ldr	r3, [pc, #428]	; (800299c <getLocation+0x430>)
 80027f0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9f2 	bl	8000be8 <__aeabi_d2uiz>
 8002804:	4603      	mov	r3, r0
 8002806:	b2da      	uxtb	r2, r3
 8002808:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800280c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 8002816:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800281a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8002824:	461a      	mov	r2, r3
 8002826:	2364      	movs	r3, #100	; 0x64
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe99 	bl	8000564 <__aeabi_i2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800283a:	f7fd fd45 	bl	80002c8 <__aeabi_dsub>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002846:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 8002850:	494f      	ldr	r1, [pc, #316]	; (8002990 <getLocation+0x424>)
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fde4 	bl	8002420 <strtoke>
 8002858:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 800285c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002860:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800286a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800286e:	4618      	mov	r0, r3
 8002870:	f011 f99b 	bl	8013baa <strcpy>
	position->w_e = *parsePointer;
 8002874:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800287e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 8002888:	4941      	ldr	r1, [pc, #260]	; (8002990 <getLocation+0x424>)
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fdc8 	bl	8002420 <strtoke>
 8002890:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 8002894:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002898:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80028a2:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80028a6:	4618      	mov	r0, r3
 80028a8:	f011 f97f 	bl	8013baa <strcpy>
	if(*parsePointer=='0'){
 80028ac:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b30      	cmp	r3, #48	; 0x30
 80028b4:	d007      	beq.n	80028c6 <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 80028b6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028ba:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 80028c6:	4932      	ldr	r1, [pc, #200]	; (8002990 <getLocation+0x424>)
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fda9 	bl	8002420 <strtoke>
 80028ce:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 80028d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028d6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80028e0:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80028e4:	4618      	mov	r0, r3
 80028e6:	f011 f960 	bl	8013baa <strcpy>
	position->satNum = atoi(parsePointer);
 80028ea:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80028ee:	f00f ff3e 	bl	801276e <atoi>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028fa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <getLocation+0x424>)
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff fd8a 	bl	8002420 <strtoke>
 800290c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 8002910:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002914:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 800291e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002922:	4618      	mov	r0, r3
 8002924:	f011 f941 	bl	8013baa <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <getLocation+0x424>)
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff fd78 	bl	8002420 <strtoke>
 8002930:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 8002934:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002938:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8002942:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002946:	4618      	mov	r0, r3
 8002948:	f011 f92f 	bl	8013baa <strcpy>
	position->elevation = atof(parsePointer);
 800294c:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002950:	f00f ff0a 	bl	8012768 <atof>
 8002954:	eeb0 7a40 	vmov.f32	s14, s0
 8002958:	eef0 7a60 	vmov.f32	s15, s1
 800295c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002960:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <getLocation+0x424>)
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fd57 	bl	8002420 <strtoke>
 8002972:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 8002976:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800297a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002984:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002988:	4618      	mov	r0, r3
 800298a:	f011 f90e 	bl	8013baa <strcpy>
 800298e:	e007      	b.n	80029a0 <getLocation+0x434>
 8002990:	0801acb8 	.word	0x0801acb8
 8002994:	d1b71759 	.word	0xd1b71759
 8002998:	51eb851f 	.word	0x51eb851f
 800299c:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 80029a0:	4918      	ldr	r1, [pc, #96]	; (8002a04 <getLocation+0x498>)
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fd3c 	bl	8002420 <strtoke>
 80029a8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 80029ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029b0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80029ba:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029be:	4618      	mov	r0, r3
 80029c0:	f011 f8f3 	bl	8013baa <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 80029c4:	490f      	ldr	r1, [pc, #60]	; (8002a04 <getLocation+0x498>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fd2a 	bl	8002420 <strtoke>
 80029cc:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 80029d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029d4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80029de:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029e2:	4618      	mov	r0, r3
 80029e4:	f011 f8e1 	bl	8013baa <strcpy>

	//	mark position as valid
	position->isValid = 1;
 80029e8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029ec:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 80029f8:	2301      	movs	r3, #1
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	0801acb8 	.word	0x0801acb8

08002a08 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	if(position>0){
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <prevPos+0x2c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <prevPos+0x1a>
		position--;
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <prevPos+0x2c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <prevPos+0x2c>)
 8002a1e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002a20:	e002      	b.n	8002a28 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <prevPos+0x2c>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	701a      	strb	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000188 	.word	0x20000188

08002a38 <nextPos>:

void nextPos(void){
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <nextPos+0x2c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d806      	bhi.n	8002a52 <nextPos+0x1a>
		position++;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <nextPos+0x2c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <nextPos+0x2c>)
 8002a4e:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002a50:	e002      	b.n	8002a58 <nextPos+0x20>
		position=0;
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <nextPos+0x2c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000188 	.word	0x20000188

08002a68 <nextScreen>:

void nextScreen(void){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	nextPos();
 8002a6c:	f7ff ffe4 	bl	8002a38 <nextPos>
	applySelectedScreen();
 8002a70:	f000 f82c 	bl	8002acc <applySelectedScreen>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prevScreen>:
void prevScreen(void){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	prevPos();
 8002a7c:	f7ff ffc4 	bl	8002a08 <prevPos>
	applySelectedScreen();
 8002a80:	f000 f824 	bl	8002acc <applySelectedScreen>
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <resetPos>:
void resetPos(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	position=0;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <resetPos+0x14>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002a92:	f000 f81b 	bl	8002acc <applySelectedScreen>
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000188 	.word	0x20000188

08002aa0 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <guiApplyView+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <guiApplyView+0x28>)
 8002ab6:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002ab8:	f000 f830 	bl	8002b1c <selectScreen>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000190 	.word	0x20000190
 8002ac8:	2000018c 	.word	0x2000018c

08002acc <applySelectedScreen>:

void applySelectedScreen(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <applySelectedScreen+0x40>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <applySelectedScreen+0x44>)
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <applySelectedScreen+0x48>)
 8002ae8:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <applySelectedScreen+0x40>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <applySelectedScreen+0x44>)
 8002af2:	460b      	mov	r3, r1
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <applySelectedScreen+0x4c>)
 8002b02:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002b04:	f000 f80a 	bl	8002b1c <selectScreen>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000188 	.word	0x20000188
 8002b10:	20000048 	.word	0x20000048
 8002b14:	20000190 	.word	0x20000190
 8002b18:	2000018c 	.word	0x2000018c

08002b1c <selectScreen>:

void selectScreen(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002b20:	f7ff f9d0 	bl	8001ec4 <resetButtonHandlers>
	isModuleSet = 0;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <selectScreen+0x1c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <selectScreen+0x20>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <selectScreen+0x24>)
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000273c 	.word	0x2000273c
 8002b3c:	2000018c 	.word	0x2000018c
 8002b40:	20000194 	.word	0x20000194

08002b44 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <showGui+0x30>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <showGui+0x18>
		moduleSetupPtr();
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <showGui+0x34>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4798      	blx	r3
		isModuleSet = 1;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <showGui+0x30>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <showGui+0x38>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <showGui+0x26>
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <showGui+0x38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4798      	blx	r3
	lcdRefresh();
 8002b6a:	f000 ff93 	bl	8003a94 <lcdRefresh>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000273c 	.word	0x2000273c
 8002b78:	20000190 	.word	0x20000190
 8002b7c:	20000194 	.word	0x20000194

08002b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_I2C1_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <MX_I2C1_Init+0x7c>)
 8002b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bbe:	f006 fd99 	bl	80096f4 <HAL_I2C_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bc8:	f001 fa32 	bl	8004030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bd0:	f007 fd4f 	bl	800a672 <HAL_I2CEx_ConfigAnalogFilter>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002bda:	f001 fa29 	bl	8004030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bde:	2100      	movs	r1, #0
 8002be0:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002be2:	f007 fd82 	bl	800a6ea <HAL_I2CEx_ConfigDigitalFilter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002bec:	f001 fa20 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20002740 	.word	0x20002740
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	000186a0 	.word	0x000186a0

08002c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_I2C_MspInit+0x84>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d12c      	bne.n	8002c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c44:	2312      	movs	r3, #18
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c50:	2304      	movs	r3, #4
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <HAL_I2C_MspInit+0x8c>)
 8002c5c:	f006 fb2e 	bl	80092bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40005400 	.word	0x40005400
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020400 	.word	0x40020400

08002c90 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002caa:	e010      	b.n	8002cce <reverse_uint8+0x3e>
		result = result << 1;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002cc0:	7bba      	ldrb	r2, [r7, #14]
 8002cc2:	7b7b      	ldrb	r3, [r7, #13]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	73bb      	strb	r3, [r7, #14]
		times--;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1eb      	bne.n	8002cac <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f824 	bl	8002d38 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	e014      	b.n	8002d20 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	80bb      	strh	r3, [r7, #4]
 8002cfa:	e00b      	b.n	8002d14 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2232      	movs	r2, #50	; 0x32
 8002d00:	fb03 f202 	mul.w	r2, r3, r2
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <lcdClearBuffer+0x50>)
 8002d0a:	21ff      	movs	r1, #255	; 0xff
 8002d0c:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	3301      	adds	r3, #1
 8002d12:	80bb      	strh	r3, [r7, #4]
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	2b31      	cmp	r3, #49	; 0x31
 8002d18:	d9f0      	bls.n	8002cfc <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2bef      	cmp	r3, #239	; 0xef
 8002d24:	d9e7      	bls.n	8002cf6 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f000 f806 	bl	8002d38 <updateSetting>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20002798 	.word	0x20002798

08002d38 <updateSetting>:

void updateSetting(uint8_t state){
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <updateSetting+0x1c>)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	7013      	strb	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	20000198 	.word	0x20000198

08002d58 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4603      	mov	r3, r0
 8002d62:	80fb      	strh	r3, [r7, #6]
 8002d64:	460b      	mov	r3, r1
 8002d66:	717b      	strb	r3, [r7, #5]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	795b      	ldrb	r3, [r3, #5]
 8002d70:	793a      	ldrb	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d304      	bcc.n	8002d80 <lcdPutChar+0x28>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	793a      	ldrb	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	79db      	ldrb	r3, [r3, #7]
 8002d84:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	885b      	ldrh	r3, [r3, #2]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002da6:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
 8002dac:	e09b      	b.n	8002ee6 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002dae:	797a      	ldrb	r2, [r7, #5]
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	4413      	add	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	0091      	lsls	r1, r2, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002dd2:	793b      	ldrb	r3, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	7952      	ldrb	r2, [r2, #5]
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	8852      	ldrh	r2, [r2, #2]
 8002dde:	fb03 f202 	mul.w	r2, r3, r2
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	7cb9      	ldrb	r1, [r7, #18]
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	3308      	adds	r3, #8
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	7d3b      	ldrb	r3, [r7, #20]
 8002dfc:	fa42 f303 	asr.w	r3, r2, r3
 8002e00:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002e02:	8a3b      	ldrh	r3, [r7, #16]
 8002e04:	4a3e      	ldr	r2, [pc, #248]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	4013      	ands	r3, r2
 8002e14:	b25a      	sxtb	r2, r3
 8002e16:	8a3b      	ldrh	r3, [r7, #16]
 8002e18:	b2d1      	uxtb	r1, r2
 8002e1a:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e1c:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	3308      	adds	r3, #8
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b25a      	sxtb	r2, r3
 8002e2a:	7d3b      	ldrb	r3, [r7, #20]
 8002e2c:	f1c3 0308 	rsb	r3, r3, #8
 8002e30:	21ff      	movs	r1, #255	; 0xff
 8002e32:	fa41 f303 	asr.w	r3, r1, r3
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002e3e:	2301      	movs	r3, #1
 8002e40:	757b      	strb	r3, [r7, #21]
 8002e42:	e029      	b.n	8002e98 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002e44:	7d7a      	ldrb	r2, [r7, #21]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	7a1b      	ldrb	r3, [r3, #8]
 8002e50:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002e52:	8a3a      	ldrh	r2, [r7, #16]
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	b25a      	sxtb	r2, r3
 8002e5e:	7db9      	ldrb	r1, [r7, #22]
 8002e60:	7d3b      	ldrb	r3, [r7, #20]
 8002e62:	f1c3 0308 	rsb	r3, r3, #8
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	b259      	sxtb	r1, r3
 8002e6c:	7af8      	ldrb	r0, [r7, #11]
 8002e6e:	7d3b      	ldrb	r3, [r7, #20]
 8002e70:	fa40 f303 	asr.w	r3, r0, r3
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	430b      	orrs	r3, r1
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b259      	sxtb	r1, r3
 8002e82:	8a3a      	ldrh	r2, [r7, #16]
 8002e84:	7d7b      	ldrb	r3, [r7, #21]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2c9      	uxtb	r1, r1
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e8c:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002e92:	7d7b      	ldrb	r3, [r7, #21]
 8002e94:	3301      	adds	r3, #1
 8002e96:	757b      	strb	r3, [r7, #21]
 8002e98:	7d7a      	ldrb	r2, [r7, #21]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	3307      	adds	r3, #7
 8002ea0:	10db      	asrs	r3, r3, #3
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbce      	blt.n	8002e44 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002ea6:	8a3a      	ldrh	r2, [r7, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3307      	adds	r3, #7
 8002eae:	10db      	asrs	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <lcdPutChar+0x1a8>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	b25a      	sxtb	r2, r3
 8002eb8:	7db9      	ldrb	r1, [r7, #22]
 8002eba:	7d3b      	ldrb	r3, [r7, #20]
 8002ebc:	f1c3 0308 	rsb	r3, r3, #8
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b259      	sxtb	r1, r3
 8002ece:	8a3a      	ldrh	r2, [r7, #16]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	3307      	adds	r3, #7
 8002ed6:	10db      	asrs	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2c9      	uxtb	r1, r1
 8002edc:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <lcdPutChar+0x1a8>)
 8002ede:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	7dfa      	ldrb	r2, [r7, #23]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f4ff af5e 	bcc.w	8002dae <lcdPutChar+0x56>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	20002798 	.word	0x20002798

08002f04 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60ba      	str	r2, [r7, #8]
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	81fb      	strh	r3, [r7, #14]
 8002f12:	460b      	mov	r3, r1
 8002f14:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
 8002f1a:	e015      	b.n	8002f48 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	fb12 f303 	smulbb	r3, r2, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b298      	uxth	r0, r3
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	4413      	add	r3, r2
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	7b79      	ldrb	r1, [r7, #13]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f7ff ff0b 	bl	8002d58 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	3301      	adds	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
 8002f48:	7dfc      	ldrb	r4, [r7, #23]
 8002f4a:	68b8      	ldr	r0, [r7, #8]
 8002f4c:	f7fd f95a 	bl	8000204 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	429c      	cmp	r4, r3
 8002f54:	d3e2      	bcc.n	8002f1c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60ba      	str	r2, [r7, #8]
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	81fb      	strh	r3, [r7, #14]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f80:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 8002f82:	7b7b      	ldrb	r3, [r7, #13]
 8002f84:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	827b      	strh	r3, [r7, #18]
 8002f8e:	e02d      	b.n	8002fec <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8002f90:	8aba      	ldrh	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	dd06      	ble.n	8002fac <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	785a      	ldrb	r2, [r3, #1]
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 8002fac:	8a7b      	ldrh	r3, [r7, #18]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b0a      	cmp	r3, #10
 8002fb6:	d107      	bne.n	8002fc8 <lcdPutStrML+0x68>
			xPos = x;
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	785a      	ldrb	r2, [r3, #1]
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	e00e      	b.n	8002fe6 <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 8002fc8:	8a7b      	ldrh	r3, [r7, #18]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	7df9      	ldrb	r1, [r7, #23]
 8002fd2:	8ab8      	ldrh	r0, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f7ff febf 	bl	8002d58 <lcdPutChar>
			xPos += font->font_Width;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	8abb      	ldrh	r3, [r7, #20]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002fe6:	8a7b      	ldrh	r3, [r7, #18]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	827b      	strh	r3, [r7, #18]
 8002fec:	8a7c      	ldrh	r4, [r7, #18]
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f7fd f908 	bl	8000204 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	d3ca      	bcc.n	8002f90 <lcdPutStrML+0x30>
		}

	}
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}

08003004 <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8003004:	b490      	push	{r4, r7}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	4604      	mov	r4, r0
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4623      	mov	r3, r4
 8003014:	80fb      	strh	r3, [r7, #6]
 8003016:	4603      	mov	r3, r0
 8003018:	80bb      	strh	r3, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
 800301e:	4613      	mov	r3, r2
 8003020:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	b29b      	uxth	r3, r3
 8003028:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e04e      	b.n	80030d8 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2232      	movs	r2, #50	; 0x32
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	7b7b      	ldrb	r3, [r7, #13]
 8003044:	4413      	add	r3, r2
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <lcdVLine+0xe8>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d01e      	beq.n	8003090 <lcdVLine+0x8c>
 8003052:	2b02      	cmp	r3, #2
 8003054:	dc27      	bgt.n	80030a6 <lcdVLine+0xa2>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <lcdVLine+0x5c>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d00b      	beq.n	8003076 <lcdVLine+0x72>
 800305e:	e022      	b.n	80030a6 <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8003060:	7b3b      	ldrb	r3, [r7, #12]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	fa42 f303 	asr.w	r3, r2, r3
 8003068:	b25a      	sxtb	r2, r3
 800306a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800306e:	4313      	orrs	r3, r2
 8003070:	b25b      	sxtb	r3, r3
 8003072:	73bb      	strb	r3, [r7, #14]
				break;
 8003074:	e024      	b.n	80030c0 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8003076:	7b3b      	ldrb	r3, [r7, #12]
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	fa42 f303 	asr.w	r3, r2, r3
 800307e:	b25b      	sxtb	r3, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003088:	4013      	ands	r3, r2
 800308a:	b25b      	sxtb	r3, r3
 800308c:	73bb      	strb	r3, [r7, #14]
				break;
 800308e:	e017      	b.n	80030c0 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8003090:	7b3b      	ldrb	r3, [r7, #12]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	fa42 f303 	asr.w	r3, r2, r3
 8003098:	b25a      	sxtb	r2, r3
 800309a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309e:	4053      	eors	r3, r2
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	73bb      	strb	r3, [r7, #14]
				break;
 80030a4:	e00c      	b.n	80030c0 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 80030a6:	7b3b      	ldrb	r3, [r7, #12]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	fa42 f303 	asr.w	r3, r2, r3
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	73bb      	strb	r3, [r7, #14]
				break;
 80030be:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2232      	movs	r2, #50	; 0x32
 80030c4:	fb03 f202 	mul.w	r2, r3, r2
 80030c8:	7b7b      	ldrb	r3, [r7, #13]
 80030ca:	4413      	add	r3, r2
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <lcdVLine+0xe8>)
 80030ce:	7bba      	ldrb	r2, [r7, #14]
 80030d0:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3301      	adds	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d9ac      	bls.n	800303a <lcdVLine+0x36>
	}
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc90      	pop	{r4, r7}
 80030ea:	4770      	bx	lr
 80030ec:	20002798 	.word	0x20002798

080030f0 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80030f0:	b490      	push	{r4, r7}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	80fb      	strh	r3, [r7, #6]
 8003102:	4603      	mov	r3, r0
 8003104:	80bb      	strh	r3, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
 800310a:	4613      	mov	r3, r2
 800310c:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 800310e:	23ff      	movs	r3, #255	; 0xff
 8003110:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8003112:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003116:	2b14      	cmp	r3, #20
 8003118:	f200 8208 	bhi.w	800352c <lcdHLine2+0x43c>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <lcdHLine2+0x34>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003179 	.word	0x08003179
 8003128:	0800317f 	.word	0x0800317f
 800312c:	08003185 	.word	0x08003185
 8003130:	0800318b 	.word	0x0800318b
 8003134:	080031a3 	.word	0x080031a3
 8003138:	080031bb 	.word	0x080031bb
 800313c:	080031d3 	.word	0x080031d3
 8003140:	0800321d 	.word	0x0800321d
 8003144:	08003261 	.word	0x08003261
 8003148:	080032a5 	.word	0x080032a5
 800314c:	080032e3 	.word	0x080032e3
 8003150:	08003309 	.word	0x08003309
 8003154:	08003333 	.word	0x08003333
 8003158:	08003369 	.word	0x08003369
 800315c:	08003381 	.word	0x08003381
 8003160:	080033a7 	.word	0x080033a7
 8003164:	080033dd 	.word	0x080033dd
 8003168:	08003413 	.word	0x08003413
 800316c:	08003455 	.word	0x08003455
 8003170:	080034af 	.word	0x080034af
 8003174:	080034eb 	.word	0x080034eb
		case 0:	// clear
			pattern = 0x00;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
			break;
 800317c:	e1ea      	b.n	8003554 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800317e:	23ff      	movs	r3, #255	; 0xff
 8003180:	75fb      	strb	r3, [r7, #23]
			break;
 8003182:	e1e7      	b.n	8003554 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8003184:	2355      	movs	r3, #85	; 0x55
 8003186:	75fb      	strb	r3, [r7, #23]
			break;
 8003188:	e1e4      	b.n	8003554 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <lcdHLine2+0xac>
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800319a:	e1db      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0xFF;
 800319c:	23ff      	movs	r3, #255	; 0xff
 800319e:	75fb      	strb	r3, [r7, #23]
			break;
 80031a0:	e1d8      	b.n	8003554 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <lcdHLine2+0xc4>
 80031ae:	23aa      	movs	r3, #170	; 0xaa
 80031b0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 80031b2:	e1cf      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x55;
 80031b4:	2355      	movs	r3, #85	; 0x55
 80031b6:	75fb      	strb	r3, [r7, #23]
			break;
 80031b8:	e1cc      	b.n	8003554 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <lcdHLine2+0xdc>
 80031c6:	2388      	movs	r3, #136	; 0x88
 80031c8:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80031ca:	e1c3      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80031cc:	2322      	movs	r3, #34	; 0x22
 80031ce:	75fb      	strb	r3, [r7, #23]
			break;
 80031d0:	e1c0      	b.n	8003554 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <lcdHLine2+0xf4>
 80031de:	2388      	movs	r3, #136	; 0x88
 80031e0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80031e2:	e1a6      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <lcdHLine2+0x106>
 80031f0:	2344      	movs	r3, #68	; 0x44
 80031f2:	75fb      	strb	r3, [r7, #23]
			break;
 80031f4:	e19d      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d102      	bne.n	8003208 <lcdHLine2+0x118>
 8003202:	2322      	movs	r3, #34	; 0x22
 8003204:	75fb      	strb	r3, [r7, #23]
			break;
 8003206:	e194      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b03      	cmp	r3, #3
 8003212:	f040 818e 	bne.w	8003532 <lcdHLine2+0x442>
 8003216:	2311      	movs	r3, #17
 8003218:	75fb      	strb	r3, [r7, #23]
			break;
 800321a:	e18a      	b.n	8003532 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <lcdHLine2+0x144>
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <lcdHLine2+0x14a>
 8003234:	23aa      	movs	r3, #170	; 0xaa
 8003236:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003238:	e17d      	b.n	8003536 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <lcdHLine2+0x15c>
 8003246:	2322      	movs	r3, #34	; 0x22
 8003248:	75fb      	strb	r3, [r7, #23]
			break;
 800324a:	e174      	b.n	8003536 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b03      	cmp	r3, #3
 8003256:	f040 816e 	bne.w	8003536 <lcdHLine2+0x446>
 800325a:	2388      	movs	r3, #136	; 0x88
 800325c:	75fb      	strb	r3, [r7, #23]
			break;
 800325e:	e16a      	b.n	8003536 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <lcdHLine2+0x188>
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b03      	cmp	r3, #3
 8003276:	d102      	bne.n	800327e <lcdHLine2+0x18e>
 8003278:	2355      	movs	r3, #85	; 0x55
 800327a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 800327c:	e15d      	b.n	800353a <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <lcdHLine2+0x1a0>
 800328a:	2388      	movs	r3, #136	; 0x88
 800328c:	75fb      	strb	r3, [r7, #23]
			break;
 800328e:	e154      	b.n	800353a <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	f040 814e 	bne.w	800353a <lcdHLine2+0x44a>
 800329e:	2322      	movs	r3, #34	; 0x22
 80032a0:	75fb      	strb	r3, [r7, #23]
			break;
 80032a2:	e14a      	b.n	800353a <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <lcdHLine2+0x1cc>
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <lcdHLine2+0x1d2>
 80032bc:	23cc      	movs	r3, #204	; 0xcc
 80032be:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80032c0:	e13d      	b.n	800353e <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d006      	beq.n	80032dc <lcdHLine2+0x1ec>
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	f040 8131 	bne.w	800353e <lcdHLine2+0x44e>
 80032dc:	2333      	movs	r3, #51	; 0x33
 80032de:	75fb      	strb	r3, [r7, #23]
			break;
 80032e0:	e12d      	b.n	800353e <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <lcdHLine2+0x204>
 80032ee:	2355      	movs	r3, #85	; 0x55
 80032f0:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80032f2:	e126      	b.n	8003542 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8120 	beq.w	8003542 <lcdHLine2+0x452>
 8003302:	23ff      	movs	r3, #255	; 0xff
 8003304:	75fb      	strb	r3, [r7, #23]
			break;
 8003306:	e11c      	b.n	8003542 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <lcdHLine2+0x22a>
 8003314:	23cc      	movs	r3, #204	; 0xcc
 8003316:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003318:	e11c      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <lcdHLine2+0x23c>
 8003326:	2344      	movs	r3, #68	; 0x44
 8003328:	75fb      	strb	r3, [r7, #23]
			break;
 800332a:	e113      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
			break;
 8003330:	e110      	b.n	8003554 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <lcdHLine2+0x254>
 800333e:	23ee      	movs	r3, #238	; 0xee
 8003340:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8003342:	e107      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <lcdHLine2+0x26c>
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d102      	bne.n	8003362 <lcdHLine2+0x272>
 800335c:	2322      	movs	r3, #34	; 0x22
 800335e:	75fb      	strb	r3, [r7, #23]
			break;
 8003360:	e0f8      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
			break;
 8003366:	e0f5      	b.n	8003554 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <lcdHLine2+0x28a>
 8003374:	23ff      	movs	r3, #255	; 0xff
 8003376:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003378:	e0ec      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800337a:	2388      	movs	r3, #136	; 0x88
 800337c:	75fb      	strb	r3, [r7, #23]
			break;
 800337e:	e0e9      	b.n	8003554 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <lcdHLine2+0x2a2>
 800338c:	23aa      	movs	r3, #170	; 0xaa
 800338e:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8003390:	e0d9      	b.n	8003546 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80d3 	beq.w	8003546 <lcdHLine2+0x456>
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
			break;
 80033a4:	e0cf      	b.n	8003546 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <lcdHLine2+0x2ce>
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d102      	bne.n	80033c4 <lcdHLine2+0x2d4>
 80033be:	23aa      	movs	r3, #170	; 0xaa
 80033c0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80033c2:	e0c7      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <lcdHLine2+0x2e6>
 80033d0:	2344      	movs	r3, #68	; 0x44
 80033d2:	75fb      	strb	r3, [r7, #23]
			break;
 80033d4:	e0be      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
			break;
 80033da:	e0bb      	b.n	8003554 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <lcdHLine2+0x304>
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <lcdHLine2+0x30a>
 80033f4:	23ee      	movs	r3, #238	; 0xee
 80033f6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80033f8:	e0ac      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <lcdHLine2+0x31c>
 8003406:	23aa      	movs	r3, #170	; 0xaa
 8003408:	75fb      	strb	r3, [r7, #23]
			break;
 800340a:	e0a3      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
			break;
 8003410:	e0a0      	b.n	8003554 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <lcdHLine2+0x33a>
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d102      	bne.n	8003430 <lcdHLine2+0x340>
 800342a:	2344      	movs	r3, #68	; 0x44
 800342c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800342e:	e08c      	b.n	800354a <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d102      	bne.n	8003442 <lcdHLine2+0x352>
 800343c:	23aa      	movs	r3, #170	; 0xaa
 800343e:	75fb      	strb	r3, [r7, #23]
			break;
 8003440:	e083      	b.n	800354a <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d17d      	bne.n	800354a <lcdHLine2+0x45a>
 800344e:	2311      	movs	r3, #17
 8003450:	75fb      	strb	r3, [r7, #23]
			break;
 8003452:	e07a      	b.n	800354a <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4baf      	ldr	r3, [pc, #700]	; (8003714 <lcdHLine2+0x624>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	0859      	lsrs	r1, r3, #1
 800345e:	460b      	mov	r3, r1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	440b      	add	r3, r1
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <lcdHLine2+0x382>
 800346c:	2355      	movs	r3, #85	; 0x55
 800346e:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8003470:	e06d      	b.n	800354e <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4ba7      	ldr	r3, [pc, #668]	; (8003714 <lcdHLine2+0x624>)
 8003476:	fba3 1302 	umull	r1, r3, r3, r2
 800347a:	0859      	lsrs	r1, r3, #1
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <lcdHLine2+0x3a0>
 800348a:	23aa      	movs	r3, #170	; 0xaa
 800348c:	75fb      	strb	r3, [r7, #23]
			break;
 800348e:	e05e      	b.n	800354e <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <lcdHLine2+0x624>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	0859      	lsrs	r1, r3, #1
 800349a:	460b      	mov	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d152      	bne.n	800354e <lcdHLine2+0x45e>
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
			break;
 80034ac:	e04f      	b.n	800354e <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <lcdHLine2+0x3d0>
 80034ba:	2322      	movs	r3, #34	; 0x22
 80034bc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80034be:	e049      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <lcdHLine2+0x3e2>
 80034cc:	2355      	movs	r3, #85	; 0x55
 80034ce:	75fb      	strb	r3, [r7, #23]
			break;
 80034d0:	e040      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d102      	bne.n	80034e4 <lcdHLine2+0x3f4>
 80034de:	2388      	movs	r3, #136	; 0x88
 80034e0:	75fb      	strb	r3, [r7, #23]
			break;
 80034e2:	e037      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
			break;
 80034e8:	e034      	b.n	8003554 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <lcdHLine2+0x412>
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d102      	bne.n	8003508 <lcdHLine2+0x418>
 8003502:	2388      	movs	r3, #136	; 0x88
 8003504:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003506:	e024      	b.n	8003552 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <lcdHLine2+0x42a>
 8003514:	2377      	movs	r3, #119	; 0x77
 8003516:	75fb      	strb	r3, [r7, #23]
			break;
 8003518:	e01b      	b.n	8003552 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d115      	bne.n	8003552 <lcdHLine2+0x462>
 8003526:	23aa      	movs	r3, #170	; 0xaa
 8003528:	75fb      	strb	r3, [r7, #23]
			break;
 800352a:	e012      	b.n	8003552 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
			break;
 8003530:	e010      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003532:	bf00      	nop
 8003534:	e00e      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003536:	bf00      	nop
 8003538:	e00c      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800353a:	bf00      	nop
 800353c:	e00a      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800353e:	bf00      	nop
 8003540:	e008      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003542:	bf00      	nop
 8003544:	e006      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003552:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	08db      	lsrs	r3, r3, #3
 8003558:	b29b      	uxth	r3, r3
 800355a:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b29b      	uxth	r3, r3
 800356c:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800356e:	88bb      	ldrh	r3, [r7, #4]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2232      	movs	r2, #50	; 0x32
 800357c:	fb03 f202 	mul.w	r2, r3, r2
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4413      	add	r3, r2
 8003584:	4a64      	ldr	r2, [pc, #400]	; (8003718 <lcdHLine2+0x628>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2232      	movs	r2, #50	; 0x32
 800358e:	fb03 f202 	mul.w	r2, r3, r2
 8003592:	7b7b      	ldrb	r3, [r7, #13]
 8003594:	4413      	add	r3, r2
 8003596:	4a60      	ldr	r2, [pc, #384]	; (8003718 <lcdHLine2+0x628>)
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 800359c:	23ff      	movs	r3, #255	; 0xff
 800359e:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80035a0:	7bbb      	ldrb	r3, [r7, #14]
 80035a2:	f1c3 0208 	rsb	r2, r3, #8
 80035a6:	88b9      	ldrh	r1, [r7, #4]
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	1acb      	subs	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dd11      	ble.n	80035d6 <lcdHLine2+0x4e6>
 80035b2:	88ba      	ldrh	r2, [r7, #4]
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	fa42 f303 	asr.w	r3, r2, r3
 80035c0:	43da      	mvns	r2, r3
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	fa42 f303 	asr.w	r3, r2, r3
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ce:	4013      	ands	r3, r2
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	753b      	strb	r3, [r7, #20]
 80035d4:	e001      	b.n	80035da <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80035da:	78bb      	ldrb	r3, [r7, #2]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	f200 8130 	bhi.w	8003842 <lcdHLine2+0x752>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <lcdHLine2+0x4f8>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800367d 	.word	0x0800367d
 80035f0:	0800371d 	.word	0x0800371d
 80035f4:	080037a1 	.word	0x080037a1
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80035f8:	7bbb      	ldrb	r3, [r7, #14]
 80035fa:	22ff      	movs	r2, #255	; 0xff
 80035fc:	fa42 f303 	asr.w	r3, r2, r3
 8003600:	b25a      	sxtb	r2, r3
 8003602:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003606:	4013      	ands	r3, r2
 8003608:	b25a      	sxtb	r2, r3
 800360a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800360e:	4313      	orrs	r3, r2
 8003610:	b25b      	sxtb	r3, r3
 8003612:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003614:	7b3b      	ldrb	r3, [r7, #12]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	b25a      	sxtb	r2, r3
 8003622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003626:	4013      	ands	r3, r2
 8003628:	b25a      	sxtb	r2, r3
 800362a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800362e:	4313      	orrs	r3, r2
 8003630:	b25b      	sxtb	r3, r3
 8003632:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003634:	2301      	movs	r3, #1
 8003636:	74fb      	strb	r3, [r7, #19]
 8003638:	e019      	b.n	800366e <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	2232      	movs	r2, #50	; 0x32
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	441a      	add	r2, r3
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	4413      	add	r3, r2
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <lcdHLine2+0x628>)
 800364c:	5cd1      	ldrb	r1, [r2, r3]
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	2232      	movs	r2, #50	; 0x32
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	441a      	add	r2, r3
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	4413      	add	r3, r2
 800365e:	7dfa      	ldrb	r2, [r7, #23]
 8003660:	430a      	orrs	r2, r1
 8003662:	b2d1      	uxtb	r1, r2
 8003664:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <lcdHLine2+0x628>)
 8003666:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	3301      	adds	r3, #1
 800366c:	74fb      	strb	r3, [r7, #19]
 800366e:	7cfa      	ldrb	r2, [r7, #19]
 8003670:	7b79      	ldrb	r1, [r7, #13]
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	1acb      	subs	r3, r1, r3
 8003676:	429a      	cmp	r2, r3
 8003678:	dbdf      	blt.n	800363a <lcdHLine2+0x54a>
			}
			break;
 800367a:	e0e2      	b.n	8003842 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	fa42 f303 	asr.w	r3, r2, r3
 8003684:	b25a      	sxtb	r2, r3
 8003686:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800368a:	4013      	ands	r3, r2
 800368c:	b25b      	sxtb	r3, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	b25a      	sxtb	r2, r3
 8003692:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003696:	4013      	ands	r3, r2
 8003698:	b25b      	sxtb	r3, r3
 800369a:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 800369c:	7b3b      	ldrb	r3, [r7, #12]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	b25a      	sxtb	r2, r3
 80036aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	b25a      	sxtb	r2, r3
 80036b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80036c0:	2301      	movs	r3, #1
 80036c2:	74bb      	strb	r3, [r7, #18]
 80036c4:	e01e      	b.n	8003704 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	2232      	movs	r2, #50	; 0x32
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	441a      	add	r2, r3
 80036d2:	7cbb      	ldrb	r3, [r7, #18]
 80036d4:	4413      	add	r3, r2
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <lcdHLine2+0x628>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	b25a      	sxtb	r2, r3
 80036dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	b259      	sxtb	r1, r3
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2232      	movs	r2, #50	; 0x32
 80036ec:	fb03 f202 	mul.w	r2, r3, r2
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	441a      	add	r2, r3
 80036f4:	7cbb      	ldrb	r3, [r7, #18]
 80036f6:	4413      	add	r3, r2
 80036f8:	b2c9      	uxtb	r1, r1
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <lcdHLine2+0x628>)
 80036fc:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80036fe:	7cbb      	ldrb	r3, [r7, #18]
 8003700:	3301      	adds	r3, #1
 8003702:	74bb      	strb	r3, [r7, #18]
 8003704:	7cba      	ldrb	r2, [r7, #18]
 8003706:	7b79      	ldrb	r1, [r7, #13]
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	429a      	cmp	r2, r3
 800370e:	dbda      	blt.n	80036c6 <lcdHLine2+0x5d6>
			}
			break;
 8003710:	e097      	b.n	8003842 <lcdHLine2+0x752>
 8003712:	bf00      	nop
 8003714:	aaaaaaab 	.word	0xaaaaaaab
 8003718:	20002798 	.word	0x20002798
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	fa42 f303 	asr.w	r3, r2, r3
 8003724:	b25a      	sxtb	r2, r3
 8003726:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800372a:	4013      	ands	r3, r2
 800372c:	b25a      	sxtb	r2, r3
 800372e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003732:	4053      	eors	r3, r2
 8003734:	b25b      	sxtb	r3, r3
 8003736:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003738:	7b3b      	ldrb	r3, [r7, #12]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	b25a      	sxtb	r2, r3
 8003746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374a:	4013      	ands	r3, r2
 800374c:	b25a      	sxtb	r2, r3
 800374e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003752:	4053      	eors	r3, r2
 8003754:	b25b      	sxtb	r3, r3
 8003756:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003758:	2301      	movs	r3, #1
 800375a:	747b      	strb	r3, [r7, #17]
 800375c:	e019      	b.n	8003792 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	2232      	movs	r2, #50	; 0x32
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	441a      	add	r2, r3
 800376a:	7c7b      	ldrb	r3, [r7, #17]
 800376c:	4413      	add	r3, r2
 800376e:	4a42      	ldr	r2, [pc, #264]	; (8003878 <lcdHLine2+0x788>)
 8003770:	5cd1      	ldrb	r1, [r2, r3]
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2232      	movs	r2, #50	; 0x32
 8003776:	fb03 f202 	mul.w	r2, r3, r2
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	441a      	add	r2, r3
 800377e:	7c7b      	ldrb	r3, [r7, #17]
 8003780:	4413      	add	r3, r2
 8003782:	7dfa      	ldrb	r2, [r7, #23]
 8003784:	404a      	eors	r2, r1
 8003786:	b2d1      	uxtb	r1, r2
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <lcdHLine2+0x788>)
 800378a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800378c:	7c7b      	ldrb	r3, [r7, #17]
 800378e:	3301      	adds	r3, #1
 8003790:	747b      	strb	r3, [r7, #17]
 8003792:	7c7a      	ldrb	r2, [r7, #17]
 8003794:	7b79      	ldrb	r1, [r7, #13]
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	1acb      	subs	r3, r1, r3
 800379a:	429a      	cmp	r2, r3
 800379c:	dbdf      	blt.n	800375e <lcdHLine2+0x66e>
			}
			break;
 800379e:	e050      	b.n	8003842 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	fa42 f303 	asr.w	r3, r2, r3
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	b259      	sxtb	r1, r3
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	f1c3 0308 	rsb	r3, r3, #8
 80037c0:	20ff      	movs	r0, #255	; 0xff
 80037c2:	fa00 f303 	lsl.w	r3, r0, r3
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	400b      	ands	r3, r1
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80037d6:	7b3b      	ldrb	r3, [r7, #12]
 80037d8:	f1c3 0307 	rsb	r3, r3, #7
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	b25a      	sxtb	r2, r3
 80037e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	b259      	sxtb	r1, r3
 80037f4:	7b3b      	ldrb	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	20ff      	movs	r0, #255	; 0xff
 80037fa:	fa40 f303 	asr.w	r3, r0, r3
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	400b      	ands	r3, r1
 8003802:	b25b      	sxtb	r3, r3
 8003804:	4313      	orrs	r3, r2
 8003806:	b25b      	sxtb	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800380e:	2301      	movs	r3, #1
 8003810:	743b      	strb	r3, [r7, #16]
 8003812:	e00f      	b.n	8003834 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2232      	movs	r2, #50	; 0x32
 8003818:	fb03 f202 	mul.w	r2, r3, r2
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	441a      	add	r2, r3
 8003820:	7c3b      	ldrb	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	7dfa      	ldrb	r2, [r7, #23]
 8003826:	43d2      	mvns	r2, r2
 8003828:	b2d1      	uxtb	r1, r2
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <lcdHLine2+0x788>)
 800382c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800382e:	7c3b      	ldrb	r3, [r7, #16]
 8003830:	3301      	adds	r3, #1
 8003832:	743b      	strb	r3, [r7, #16]
 8003834:	7c3a      	ldrb	r2, [r7, #16]
 8003836:	7b79      	ldrb	r1, [r7, #13]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	429a      	cmp	r2, r3
 800383e:	dbe9      	blt.n	8003814 <lcdHLine2+0x724>
			}
			break;
 8003840:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2232      	movs	r2, #50	; 0x32
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	4413      	add	r3, r2
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <lcdHLine2+0x788>)
 8003850:	7dba      	ldrb	r2, [r7, #22]
 8003852:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003854:	7b7a      	ldrb	r2, [r7, #13]
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	429a      	cmp	r2, r3
 800385a:	d908      	bls.n	800386e <lcdHLine2+0x77e>
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2232      	movs	r2, #50	; 0x32
 8003860:	fb03 f202 	mul.w	r2, r3, r2
 8003864:	7b7b      	ldrb	r3, [r7, #13]
 8003866:	4413      	add	r3, r2
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <lcdHLine2+0x788>)
 800386a:	7d7a      	ldrb	r2, [r7, #21]
 800386c:	54ca      	strb	r2, [r1, r3]
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bc90      	pop	{r4, r7}
 8003876:	4770      	bx	lr
 8003878:	20002798 	.word	0x20002798

0800387c <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 800387c:	b490      	push	{r4, r7}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4623      	mov	r3, r4
 800388c:	80fb      	strh	r3, [r7, #6]
 800388e:	4603      	mov	r3, r0
 8003890:	80bb      	strh	r3, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
 8003896:	4613      	mov	r3, r2
 8003898:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	08db      	lsrs	r3, r3, #3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80038ac:	88bb      	ldrh	r3, [r7, #4]
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80038b4:	88bb      	ldrh	r3, [r7, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2232      	movs	r2, #50	; 0x32
 80038c2:	fb03 f202 	mul.w	r2, r3, r2
 80038c6:	7c7b      	ldrb	r3, [r7, #17]
 80038c8:	4413      	add	r3, r2
 80038ca:	4a71      	ldr	r2, [pc, #452]	; (8003a90 <lcdHLine+0x214>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
 80038ce:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2232      	movs	r2, #50	; 0x32
 80038d4:	fb03 f202 	mul.w	r2, r3, r2
 80038d8:	7c7b      	ldrb	r3, [r7, #17]
 80038da:	441a      	add	r2, r3
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	4413      	add	r3, r2
 80038e0:	4a6b      	ldr	r2, [pc, #428]	; (8003a90 <lcdHLine+0x214>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80038e6:	23ff      	movs	r3, #255	; 0xff
 80038e8:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80038ea:	7c3b      	ldrb	r3, [r7, #16]
 80038ec:	f1c3 0208 	rsb	r2, r3, #8
 80038f0:	88b9      	ldrh	r1, [r7, #4]
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	1acb      	subs	r3, r1, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dd09      	ble.n	8003910 <lcdHLine+0x94>
 80038fc:	88ba      	ldrh	r2, [r7, #4]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	3301      	adds	r3, #1
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	fa42 f303 	asr.w	r3, r2, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8003910:	78bb      	ldrb	r3, [r7, #2]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d067      	beq.n	80039e6 <lcdHLine+0x16a>
 8003916:	2b02      	cmp	r3, #2
 8003918:	f300 809e 	bgt.w	8003a58 <lcdHLine+0x1dc>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <lcdHLine+0xaa>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d02e      	beq.n	8003982 <lcdHLine+0x106>
 8003924:	e098      	b.n	8003a58 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003926:	7d7a      	ldrb	r2, [r7, #21]
 8003928:	7c3b      	ldrb	r3, [r7, #16]
 800392a:	fa42 f303 	asr.w	r3, r2, r3
 800392e:	b25a      	sxtb	r2, r3
 8003930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003934:	4313      	orrs	r3, r2
 8003936:	b25b      	sxtb	r3, r3
 8003938:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 800393a:	7bbb      	ldrb	r3, [r7, #14]
 800393c:	f1c3 0307 	rsb	r3, r3, #7
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	b25a      	sxtb	r2, r3
 8003948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800394c:	4313      	orrs	r3, r2
 800394e:	b25b      	sxtb	r3, r3
 8003950:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003952:	2301      	movs	r3, #1
 8003954:	753b      	strb	r3, [r7, #20]
 8003956:	e00d      	b.n	8003974 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2232      	movs	r2, #50	; 0x32
 800395c:	fb03 f202 	mul.w	r2, r3, r2
 8003960:	7c7b      	ldrb	r3, [r7, #17]
 8003962:	441a      	add	r2, r3
 8003964:	7d3b      	ldrb	r3, [r7, #20]
 8003966:	4413      	add	r3, r2
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <lcdHLine+0x214>)
 800396a:	21ff      	movs	r1, #255	; 0xff
 800396c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800396e:	7d3b      	ldrb	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	753b      	strb	r3, [r7, #20]
 8003974:	7d3a      	ldrb	r2, [r7, #20]
 8003976:	7bf9      	ldrb	r1, [r7, #15]
 8003978:	7c7b      	ldrb	r3, [r7, #17]
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	429a      	cmp	r2, r3
 800397e:	dbeb      	blt.n	8003958 <lcdHLine+0xdc>
		}
		break;
 8003980:	e06a      	b.n	8003a58 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003982:	7d7a      	ldrb	r2, [r7, #21]
 8003984:	7c3b      	ldrb	r3, [r7, #16]
 8003986:	fa42 f303 	asr.w	r3, r2, r3
 800398a:	b25b      	sxtb	r3, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	b25a      	sxtb	r2, r3
 8003990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003994:	4013      	ands	r3, r2
 8003996:	b25b      	sxtb	r3, r3
 8003998:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	f1c3 0307 	rsb	r3, r3, #7
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	b25a      	sxtb	r2, r3
 80039ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039b6:	2301      	movs	r3, #1
 80039b8:	74fb      	strb	r3, [r7, #19]
 80039ba:	e00d      	b.n	80039d8 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	fb03 f202 	mul.w	r2, r3, r2
 80039c4:	7c7b      	ldrb	r3, [r7, #17]
 80039c6:	441a      	add	r2, r3
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <lcdHLine+0x214>)
 80039ce:	2100      	movs	r1, #0
 80039d0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	3301      	adds	r3, #1
 80039d6:	74fb      	strb	r3, [r7, #19]
 80039d8:	7cfa      	ldrb	r2, [r7, #19]
 80039da:	7bf9      	ldrb	r1, [r7, #15]
 80039dc:	7c7b      	ldrb	r3, [r7, #17]
 80039de:	1acb      	subs	r3, r1, r3
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbeb      	blt.n	80039bc <lcdHLine+0x140>
		}
		break;
 80039e4:	e038      	b.n	8003a58 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80039e6:	7d7a      	ldrb	r2, [r7, #21]
 80039e8:	7c3b      	ldrb	r3, [r7, #16]
 80039ea:	fa42 f303 	asr.w	r3, r2, r3
 80039ee:	b25a      	sxtb	r2, r3
 80039f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039f4:	4053      	eors	r3, r2
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 80039fa:	7bbb      	ldrb	r3, [r7, #14]
 80039fc:	f1c3 0307 	rsb	r3, r3, #7
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a0c:	4053      	eors	r3, r2
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a12:	2301      	movs	r3, #1
 8003a14:	74bb      	strb	r3, [r7, #18]
 8003a16:	e018      	b.n	8003a4a <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2232      	movs	r2, #50	; 0x32
 8003a1c:	fb03 f202 	mul.w	r2, r3, r2
 8003a20:	7c7b      	ldrb	r3, [r7, #17]
 8003a22:	441a      	add	r2, r3
 8003a24:	7cbb      	ldrb	r3, [r7, #18]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <lcdHLine+0x214>)
 8003a2a:	5cd2      	ldrb	r2, [r2, r3]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2132      	movs	r1, #50	; 0x32
 8003a30:	fb03 f101 	mul.w	r1, r3, r1
 8003a34:	7c7b      	ldrb	r3, [r7, #17]
 8003a36:	4419      	add	r1, r3
 8003a38:	7cbb      	ldrb	r3, [r7, #18]
 8003a3a:	440b      	add	r3, r1
 8003a3c:	43d2      	mvns	r2, r2
 8003a3e:	b2d1      	uxtb	r1, r2
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <lcdHLine+0x214>)
 8003a42:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a44:	7cbb      	ldrb	r3, [r7, #18]
 8003a46:	3301      	adds	r3, #1
 8003a48:	74bb      	strb	r3, [r7, #18]
 8003a4a:	7cba      	ldrb	r2, [r7, #18]
 8003a4c:	7bf9      	ldrb	r1, [r7, #15]
 8003a4e:	7c7b      	ldrb	r3, [r7, #17]
 8003a50:	1acb      	subs	r3, r1, r3
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbe0      	blt.n	8003a18 <lcdHLine+0x19c>
		}
		break;
 8003a56:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2232      	movs	r2, #50	; 0x32
 8003a5c:	fb03 f202 	mul.w	r2, r3, r2
 8003a60:	7c7b      	ldrb	r3, [r7, #17]
 8003a62:	4413      	add	r3, r2
 8003a64:	490a      	ldr	r1, [pc, #40]	; (8003a90 <lcdHLine+0x214>)
 8003a66:	7dfa      	ldrb	r2, [r7, #23]
 8003a68:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	7c7b      	ldrb	r3, [r7, #17]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d908      	bls.n	8003a84 <lcdHLine+0x208>
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2232      	movs	r2, #50	; 0x32
 8003a76:	fb03 f202 	mul.w	r2, r3, r2
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4904      	ldr	r1, [pc, #16]	; (8003a90 <lcdHLine+0x214>)
 8003a80:	7dba      	ldrb	r2, [r7, #22]
 8003a82:	54ca      	strb	r2, [r1, r3]
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc90      	pop	{r4, r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20002798 	.word	0x20002798

08003a94 <lcdRefresh>:

void lcdRefresh(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <lcdRefresh+0x7c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	481b      	ldr	r0, [pc, #108]	; (8003b14 <lcdRefresh+0x80>)
 8003aa8:	f005 fdcc 	bl	8009644 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003aac:	2301      	movs	r3, #1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	e01c      	b.n	8003aec <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f8eb 	bl	8002c90 <reverse_uint8>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <lcdRefresh+0x84>)
 8003ac0:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003ac2:	2396      	movs	r3, #150	; 0x96
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4914      	ldr	r1, [pc, #80]	; (8003b18 <lcdRefresh+0x84>)
 8003ac8:	4814      	ldr	r0, [pc, #80]	; (8003b1c <lcdRefresh+0x88>)
 8003aca:	f008 ffb4 	bl	800ca36 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	2232      	movs	r2, #50	; 0x32
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <lcdRefresh+0x8c>)
 8003ada:	1899      	adds	r1, r3, r2
 8003adc:	2396      	movs	r3, #150	; 0x96
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	480e      	ldr	r0, [pc, #56]	; (8003b1c <lcdRefresh+0x88>)
 8003ae2:	f008 ffa8 	bl	800ca36 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2bf1      	cmp	r3, #241	; 0xf1
 8003af0:	d9df      	bls.n	8003ab2 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003af2:	2396      	movs	r3, #150	; 0x96
 8003af4:	2202      	movs	r2, #2
 8003af6:	490b      	ldr	r1, [pc, #44]	; (8003b24 <lcdRefresh+0x90>)
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <lcdRefresh+0x88>)
 8003afa:	f008 ff9c 	bl	800ca36 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003afe:	2200      	movs	r2, #0
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	4804      	ldr	r0, [pc, #16]	; (8003b14 <lcdRefresh+0x80>)
 8003b04:	f005 fd9e 	bl	8009644 <HAL_GPIO_WritePin>
	}
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000198 	.word	0x20000198
 8003b14:	40020000 	.word	0x40020000
 8003b18:	2000019c 	.word	0x2000019c
 8003b1c:	20005b34 	.word	0x20005b34
 8003b20:	20002798 	.word	0x20002798
 8003b24:	20002794 	.word	0x20002794

08003b28 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	80fb      	strh	r3, [r7, #6]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80bb      	strh	r3, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
 8003b42:	4613      	mov	r3, r2
 8003b44:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e009      	b.n	8003b60 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	88b9      	ldrh	r1, [r7, #4]
 8003b54:	88f8      	ldrh	r0, [r7, #6]
 8003b56:	f7ff fe91 	bl	800387c <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	78bb      	ldrb	r3, [r7, #2]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d9f1      	bls.n	8003b4c <lcdRect+0x24>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}

08003b72 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003b72:	b590      	push	{r4, r7, lr}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	4603      	mov	r3, r0
 8003b86:	80bb      	strh	r3, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	88bb      	ldrh	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d046      	beq.n	8003c26 <lcdRect2+0xb4>
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	78bb      	ldrb	r3, [r7, #2]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d042      	beq.n	8003c26 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e00d      	b.n	8003bc2 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003ba6:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	88b9      	ldrh	r1, [r7, #4]
 8003bae:	88f8      	ldrh	r0, [r7, #6]
 8003bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	f7ff fa9a 	bl	80030f0 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	78bb      	ldrb	r3, [r7, #2]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d9ed      	bls.n	8003ba6 <lcdRect2+0x34>
		}
		if(outline){
 8003bca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d029      	beq.n	8003c26 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	88b9      	ldrh	r1, [r7, #4]
 8003bda:	88f8      	ldrh	r0, [r7, #6]
 8003bdc:	2401      	movs	r4, #1
 8003bde:	9400      	str	r4, [sp, #0]
 8003be0:	f7ff fa86 	bl	80030f0 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003be8:	78ba      	ldrb	r2, [r7, #2]
 8003bea:	88b9      	ldrh	r1, [r7, #4]
 8003bec:	88f8      	ldrh	r0, [r7, #6]
 8003bee:	2401      	movs	r4, #1
 8003bf0:	9400      	str	r4, [sp, #0]
 8003bf2:	f7ff fa7d 	bl	80030f0 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	78bb      	ldrb	r3, [r7, #2]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c08:	88f8      	ldrh	r0, [r7, #6]
 8003c0a:	f7ff f9fb 	bl	8003004 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b299      	uxth	r1, r3
 8003c16:	78bb      	ldrb	r3, [r7, #2]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c20:	88b8      	ldrh	r0, [r7, #4]
 8003c22:	f7ff f9ef 	bl	8003004 <lcdVLine>
		}
	}
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}

08003c2e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c3a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c4a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c4e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c56:	e000      	b.n	8003c5a <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c58:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f9      	beq.n	8003c58 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c6e:	687b      	ldr	r3, [r7, #4]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffd1 	bl	8003c2e <ITM_SendChar>
	return(ch);
 8003c8c:	687b      	ldr	r3, [r7, #4]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003c9e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca0:	f005 f8de 	bl	8008e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ca4:	f000 f8d6 	bl	8003e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ca8:	f7fe fa20 	bl	80020ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003cac:	f000 ff00 	bl	8004ab0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003cb0:	f000 faae 	bl	8004210 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003cb4:	f000 fd2a 	bl	800470c <MX_TIM1_Init>
  MX_TIM10_Init();
 8003cb8:	f000 fdca 	bl	8004850 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003cbc:	f7fe ff60 	bl	8002b80 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003cc0:	f000 fdea 	bl	8004898 <MX_TIM11_Init>
  MX_RTC_Init();
 8003cc4:	f000 f9c2 	bl	800404c <MX_RTC_Init>
  MX_TIM13_Init();
 8003cc8:	f000 fe0a 	bl	80048e0 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003ccc:	f000 fa18 	bl	8004100 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003cd0:	f00b fbda 	bl	800f488 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003cd4:	f000 ff16 	bl	8004b04 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003cd8:	484a      	ldr	r0, [pc, #296]	; (8003e04 <main+0x16c>)
 8003cda:	f009 f8b3 	bl	800ce44 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003cde:	4849      	ldr	r0, [pc, #292]	; (8003e04 <main+0x16c>)
 8003ce0:	f009 f900 	bl	800cee4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4847      	ldr	r0, [pc, #284]	; (8003e04 <main+0x16c>)
 8003ce8:	f009 f9f4 	bl	800d0d4 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003cec:	4846      	ldr	r0, [pc, #280]	; (8003e08 <main+0x170>)
 8003cee:	f009 f8f9 	bl	800cee4 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003cf2:	4846      	ldr	r0, [pc, #280]	; (8003e0c <main+0x174>)
 8003cf4:	f7fe f84c 	bl	8001d90 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003cf8:	4845      	ldr	r0, [pc, #276]	; (8003e10 <main+0x178>)
 8003cfa:	f009 f8f3 	bl	800cee4 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003cfe:	4c45      	ldr	r4, [pc, #276]	; (8003e14 <main+0x17c>)
 8003d00:	463b      	mov	r3, r7
 8003d02:	4945      	ldr	r1, [pc, #276]	; (8003e18 <main+0x180>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fb41 	bl	800238c <initGps>
 8003d0a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d0e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003d12:	4620      	mov	r0, r4
 8003d14:	4619      	mov	r1, r3
 8003d16:	f44f 7319 	mov.w	r3, #612	; 0x264
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f00e fd78 	bl	8012810 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003d20:	483e      	ldr	r0, [pc, #248]	; (8003e1c <main+0x184>)
 8003d22:	f7fd fd75 	bl	8001810 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8003d26:	f240 118f 	movw	r1, #399	; 0x18f
 8003d2a:	483d      	ldr	r0, [pc, #244]	; (8003e20 <main+0x188>)
 8003d2c:	f004 ff51 	bl	8008bd2 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003d30:	f240 128f 	movw	r2, #399	; 0x18f
 8003d34:	2102      	movs	r1, #2
 8003d36:	483b      	ldr	r0, [pc, #236]	; (8003e24 <main+0x18c>)
 8003d38:	f004 fe8e 	bl	8008a58 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d42:	4839      	ldr	r0, [pc, #228]	; (8003e28 <main+0x190>)
 8003d44:	f005 fc7e 	bl	8009644 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 8003d48:	4838      	ldr	r0, [pc, #224]	; (8003e2c <main+0x194>)
 8003d4a:	f7fd f98b 	bl	8001064 <Mount_SD>
  	Create_File("FILE1.TXT");
 8003d4e:	4838      	ldr	r0, [pc, #224]	; (8003e30 <main+0x198>)
 8003d50:	f7fd fa94 	bl	800127c <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <main+0x19c>)
 8003d56:	4836      	ldr	r0, [pc, #216]	; (8003e30 <main+0x198>)
 8003d58:	f7fd fb1c 	bl	8001394 <Update_File>
  	Create_File("FILE4.TXT");
 8003d5c:	4836      	ldr	r0, [pc, #216]	; (8003e38 <main+0x1a0>)
 8003d5e:	f7fd fa8d 	bl	800127c <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8003d62:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003d66:	4619      	mov	r1, r3
 8003d68:	4834      	ldr	r0, [pc, #208]	; (8003e3c <main+0x1a4>)
 8003d6a:	f7fd f9d5 	bl	8001118 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4933      	ldr	r1, [pc, #204]	; (8003e40 <main+0x1a8>)
 8003d72:	4834      	ldr	r0, [pc, #208]	; (8003e44 <main+0x1ac>)
 8003d74:	f007 fc60 	bl	800b638 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4933      	ldr	r1, [pc, #204]	; (8003e48 <main+0x1b0>)
 8003d7c:	4831      	ldr	r0, [pc, #196]	; (8003e44 <main+0x1ac>)
 8003d7e:	f007 fd3d 	bl	800b7fc <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003d88:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8003d8c:	222e      	movs	r2, #46	; 0x2e
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00e fd4b 	bl	801282c <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <main+0x1a8>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <main+0x1a8>)
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <main+0x1a8>)
 8003da4:	789b      	ldrb	r3, [r3, #2]
 8003da6:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	460b      	mov	r3, r1
 8003dae:	4927      	ldr	r1, [pc, #156]	; (8003e4c <main+0x1b4>)
 8003db0:	f00f fe6a 	bl	8013a88 <siprintf>
	SD_logger(tmpl);
 8003db4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd f93d 	bl	8001038 <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8003dbe:	f7fe ff91 	bl	8002ce4 <lcdClearBuffer>
  lcdRefresh();
 8003dc2:	f7ff fe67 	bl	8003a94 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8003dc6:	4c22      	ldr	r4, [pc, #136]	; (8003e50 <main+0x1b8>)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <main+0x184>)
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd ff87 	bl	8001ce0 <getBmpData>
 8003dd2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003dd6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003de0:	2200      	movs	r2, #0
 8003de2:	4917      	ldr	r1, [pc, #92]	; (8003e40 <main+0x1a8>)
 8003de4:	4817      	ldr	r0, [pc, #92]	; (8003e44 <main+0x1ac>)
 8003de6:	f007 fc27 	bl	800b638 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003dea:	2200      	movs	r2, #0
 8003dec:	4916      	ldr	r1, [pc, #88]	; (8003e48 <main+0x1b0>)
 8003dee:	4815      	ldr	r0, [pc, #84]	; (8003e44 <main+0x1ac>)
 8003df0:	f007 fd04 	bl	800b7fc <HAL_RTC_GetDate>
	  lcdClearBuffer();
 8003df4:	f7fe ff76 	bl	8002ce4 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8003df8:	f7fe fea4 	bl	8002b44 <showGui>

	  lcdRefresh();
 8003dfc:	f7ff fe4a 	bl	8003a94 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 8003e00:	e7e1      	b.n	8003dc6 <main+0x12e>
 8003e02:	bf00      	nop
 8003e04:	20005b98 	.word	0x20005b98
 8003e08:	20005c28 	.word	0x20005c28
 8003e0c:	2000002c 	.word	0x2000002c
 8003e10:	20005c70 	.word	0x20005c70
 8003e14:	2000582c 	.word	0x2000582c
 8003e18:	20005cfc 	.word	0x20005cfc
 8003e1c:	2000260c 	.word	0x2000260c
 8003e20:	2000581c 	.word	0x2000581c
 8003e24:	20005808 	.word	0x20005808
 8003e28:	40020800 	.word	0x40020800
 8003e2c:	0801ad88 	.word	0x0801ad88
 8003e30:	0801ad8c 	.word	0x0801ad8c
 8003e34:	0801ad98 	.word	0x0801ad98
 8003e38:	0801adb8 	.word	0x0801adb8
 8003e3c:	0801adc4 	.word	0x0801adc4
 8003e40:	200057f0 	.word	0x200057f0
 8003e44:	20005a90 	.word	0x20005a90
 8003e48:	20005804 	.word	0x20005804
 8003e4c:	0801add0 	.word	0x0801add0
 8003e50:	20002650 	.word	0x20002650

08003e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b094      	sub	sp, #80	; 0x50
 8003e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e5a:	f107 0320 	add.w	r3, r7, #32
 8003e5e:	2230      	movs	r2, #48	; 0x30
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00e fce2 	bl	801282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <SystemClock_Config+0xd4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <SystemClock_Config+0xd4>)
 8003e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <SystemClock_Config+0xd4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ec8:	2304      	movs	r3, #4
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ecc:	23a8      	movs	r3, #168	; 0xa8
 8003ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ed8:	f107 0320 	add.w	r3, r7, #32
 8003edc:	4618      	mov	r0, r3
 8003ede:	f006 fc43 	bl	800a768 <HAL_RCC_OscConfig>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ee8:	f000 f8a2 	bl	8004030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eec:	230f      	movs	r3, #15
 8003eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ef8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	2105      	movs	r1, #5
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f006 fea4 	bl	800ac58 <HAL_RCC_ClockConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003f16:	f000 f88b 	bl	8004030 <Error_Handler>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3750      	adds	r7, #80	; 0x50
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000

08003f2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d108      	bne.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003f4c:	f000 fab2 	bl	80044b4 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d102      	bne.n	8003f60 <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003f5a:	4822      	ldr	r0, [pc, #136]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003f5c:	f7fe f8ac 	bl	80020b8 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a20      	ldr	r2, [pc, #128]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d131      	bne.n	8003fce <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f6c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_PeriodElapsedCallback+0x52>
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f76:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003f7a:	481c      	ldr	r0, [pc, #112]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f7c:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003f7e:	2101      	movs	r1, #1
 8003f80:	481b      	ldr	r0, [pc, #108]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f82:	f005 fb78 	bl	8009676 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_TIM_PeriodElapsedCallback+0x7e>
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa0:	ee17 1a90 	vmov	r1, s15
 8003fa4:	4813      	ldr	r0, [pc, #76]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003fa6:	f004 fe4a 	bl	8008c3e <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003fbc:	7c1b      	ldrb	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003fc2:	f107 030e 	add.w	r3, r7, #14
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	480d      	ldr	r0, [pc, #52]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003fca:	f004 fd82 	bl	8008ad2 <cbuf_ovw>

	}
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	20005b8c 	.word	0x20005b8c
 8003fe0:	40014800 	.word	0x40014800
 8003fe4:	2000002c 	.word	0x2000002c
 8003fe8:	40001c00 	.word	0x40001c00
 8003fec:	2000582c 	.word	0x2000582c
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	2000581c 	.word	0x2000581c
 8003ff8:	20002650 	.word	0x20002650
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	20005808 	.word	0x20005808

08004004 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a05      	ldr	r2, [pc, #20]	; (8004028 <HAL_UART_RxCpltCallback+0x24>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d103      	bne.n	800401e <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	4804      	ldr	r0, [pc, #16]	; (800402c <HAL_UART_RxCpltCallback+0x28>)
 800401a:	f005 fb2c 	bl	8009676 <HAL_GPIO_TogglePin>

	}
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40011400 	.word	0x40011400
 800402c:	40020400 	.word	0x40020400

08004030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004034:	b672      	cpsid	i
}
 8004036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004038:	2201      	movs	r2, #1
 800403a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <Error_Handler+0x18>)
 8004040:	f005 fb00 	bl	8009644 <HAL_GPIO_WritePin>
  while (1)
 8004044:	e7fe      	b.n	8004044 <Error_Handler+0x14>
 8004046:	bf00      	nop
 8004048:	40020400 	.word	0x40020400

0800404c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004060:	2300      	movs	r3, #0
 8004062:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <MX_RTC_Init+0x58>)
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <MX_RTC_Init+0x5c>)
 8004068:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <MX_RTC_Init+0x58>)
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <MX_RTC_Init+0x58>)
 8004072:	227f      	movs	r2, #127	; 0x7f
 8004074:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <MX_RTC_Init+0x58>)
 8004078:	22ff      	movs	r2, #255	; 0xff
 800407a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <MX_RTC_Init+0x58>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <MX_RTC_Init+0x58>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <MX_RTC_Init+0x58>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800408e:	4805      	ldr	r0, [pc, #20]	; (80040a4 <MX_RTC_Init+0x58>)
 8004090:	f007 f9c2 	bl	800b418 <HAL_RTC_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800409a:	f7ff ffc9 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20005a90 	.word	0x20005a90
 80040a8:	40002800 	.word	0x40002800

080040ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08e      	sub	sp, #56	; 0x38
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	2230      	movs	r2, #48	; 0x30
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f00e fbb5 	bl	801282c <memset>
  if(rtcHandle->Instance==RTC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <HAL_RTC_MspInit+0x4c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80040cc:	2320      	movs	r3, #32
 80040ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80040d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4618      	mov	r0, r3
 80040dc:	f006 ffdc 	bl	800b098 <HAL_RCCEx_PeriphCLKConfig>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80040e6:	f7ff ffa3 	bl	8004030 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RTC_MspInit+0x50>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80040f0:	bf00      	nop
 80040f2:	3738      	adds	r7, #56	; 0x38
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40002800 	.word	0x40002800
 80040fc:	42470e3c 	.word	0x42470e3c

08004100 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <MX_SDIO_SD_Init+0x3c>)
 8004108:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800412a:	2204      	movs	r2, #4
 800412c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20005ab0 	.word	0x20005ab0
 800413c:	40012c00 	.word	0x40012c00

08004140 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <HAL_SD_MspInit+0xc0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d14a      	bne.n	80041f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_SD_MspInit+0xc4>)
 800416c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004170:	6453      	str	r3, [r2, #68]	; 0x44
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	6313      	str	r3, [r2, #48]	; 0x30
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80041b6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041c8:	230c      	movs	r3, #12
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <HAL_SD_MspInit+0xc8>)
 80041d4:	f005 f872 	bl	80092bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041d8:	2304      	movs	r3, #4
 80041da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041e8:	230c      	movs	r3, #12
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4806      	ldr	r0, [pc, #24]	; (800420c <HAL_SD_MspInit+0xcc>)
 80041f4:	f005 f862 	bl	80092bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80041f8:	bf00      	nop
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40023800 	.word	0x40023800
 8004208:	40020800 	.word	0x40020800
 800420c:	40020c00 	.word	0x40020c00

08004210 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <MX_SPI1_Init+0x64>)
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <MX_SPI1_Init+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <MX_SPI1_Init+0x64>)
 800421c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <MX_SPI1_Init+0x64>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <MX_SPI1_Init+0x64>)
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <MX_SPI1_Init+0x64>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <MX_SPI1_Init+0x64>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <MX_SPI1_Init+0x64>)
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <MX_SPI1_Init+0x64>)
 8004244:	2220      	movs	r2, #32
 8004246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <MX_SPI1_Init+0x64>)
 800424a:	2200      	movs	r2, #0
 800424c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <MX_SPI1_Init+0x64>)
 8004250:	2200      	movs	r2, #0
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <MX_SPI1_Init+0x64>)
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <MX_SPI1_Init+0x64>)
 800425c:	220a      	movs	r2, #10
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <MX_SPI1_Init+0x64>)
 8004262:	f008 fb5f 	bl	800c924 <HAL_SPI_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800426c:	f7ff fee0 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20005b34 	.word	0x20005b34
 8004278:	40013000 	.word	0x40013000

0800427c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_SPI_MspInit+0x84>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d12b      	bne.n	80042f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ac:	6453      	str	r3, [r2, #68]	; 0x44
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80042d6:	23a0      	movs	r3, #160	; 0xa0
 80042d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	2302      	movs	r3, #2
 80042dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e2:	2303      	movs	r3, #3
 80042e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042e6:	2305      	movs	r3, #5
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4619      	mov	r1, r3
 80042f0:	4805      	ldr	r0, [pc, #20]	; (8004308 <HAL_SPI_MspInit+0x8c>)
 80042f2:	f004 ffe3 	bl	80092bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40013000 	.word	0x40013000
 8004304:	40023800 	.word	0x40023800
 8004308:	40020000 	.word	0x40020000

0800430c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_MspInit+0x4c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <HAL_MspInit+0x4c>)
 800431c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_MspInit+0x4c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_MspInit+0x4c>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <HAL_MspInit+0x4c>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_MspInit+0x4c>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800

0800435c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <NMI_Handler+0x4>

08004362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8004366:	f7ff fe63 	bl	8004030 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436a:	e7fe      	b.n	800436a <HardFault_Handler+0x8>

0800436c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <MemManage_Handler+0x4>

08004372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <BusFault_Handler+0x4>

08004378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <UsageFault_Handler+0x4>

0800437e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ac:	f004 fdaa 	bl	8008f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043b8:	4803      	ldr	r0, [pc, #12]	; (80043c8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80043ba:	f008 ff53 	bl	800d264 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80043be:	4803      	ldr	r0, [pc, #12]	; (80043cc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80043c0:	f008 ff50 	bl	800d264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20005b98 	.word	0x20005b98
 80043cc:	20005be0 	.word	0x20005be0

080043d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80043d6:	f008 ff45 	bl	800d264 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80043da:	4803      	ldr	r0, [pc, #12]	; (80043e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80043dc:	f008 ff42 	bl	800d264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20005b98 	.word	0x20005b98
 80043e8:	20005c28 	.word	0x20005c28

080043ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80043f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80043f4:	f005 f95a 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80043f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80043fc:	f005 f956 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004400:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004404:	f005 f952 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8004408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800440c:	f005 f94e 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004410:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004414:	f005 f94a 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800441c:	f005 f946 	bl	80096ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}

08004424 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800442a:	f008 ff1b 	bl	800d264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20005c70 	.word	0x20005c70

08004438 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 800443c:	2228      	movs	r2, #40	; 0x28
 800443e:	2100      	movs	r1, #0
 8004440:	4804      	ldr	r0, [pc, #16]	; (8004454 <clearTable+0x1c>)
 8004442:	f00e f9f3 	bl	801282c <memset>
	stwT.position = 0;
 8004446:	4b03      	ldr	r3, [pc, #12]	; (8004454 <clearTable+0x1c>)
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200001a4 	.word	0x200001a4

08004458 <addItem>:
void addItem(stw_struct stwS){
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <addItem+0x38>)
 8004468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446c:	461a      	mov	r2, r3
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <addItem+0x38>)
 8004470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <addItem+0x38>)
 8004476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447a:	3301      	adds	r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <addItem+0x38>)
 8004480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	200001a4 	.word	0x200001a4

08004494 <stwStart>:

void stwStart(void){
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <stwStart+0x18>)
 800449a:	f008 fd23 	bl	800cee4 <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <stwStart+0x1c>)
 80044a0:	78d3      	ldrb	r3, [r2, #3]
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	70d3      	strb	r3, [r2, #3]
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20005be0 	.word	0x20005be0
 80044b0:	20005b8c 	.word	0x20005b8c

080044b4 <stwTick>:
void stwTick(void){
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <stwTick+0x28>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044c6:	4905      	ldr	r1, [pc, #20]	; (80044dc <stwTick+0x28>)
 80044c8:	680b      	ldr	r3, [r1, #0]
 80044ca:	f362 0317 	bfi	r3, r2, #0, #24
 80044ce:	600b      	str	r3, [r1, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20005b8c 	.word	0x20005b8c

080044e0 <stwStop>:
void stwStop(void){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <stwStop+0x18>)
 80044e6:	78d3      	ldrb	r3, [r2, #3]
 80044e8:	f36f 0300 	bfc	r3, #0, #1
 80044ec:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 80044ee:	4803      	ldr	r0, [pc, #12]	; (80044fc <stwStop+0x1c>)
 80044f0:	f008 fd68 	bl	800cfc4 <HAL_TIM_Base_Stop_IT>

}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20005b8c 	.word	0x20005b8c
 80044fc:	20005be0 	.word	0x20005be0

08004500 <stwClear>:
void stwClear(void){
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <stwClear+0x20>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <stwClear+0x24>)
 800450e:	6813      	ldr	r3, [r2, #0]
 8004510:	f36f 0317 	bfc	r3, #0, #24
 8004514:	6013      	str	r3, [r2, #0]
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	20005be0 	.word	0x20005be0
 8004524:	20005b8c 	.word	0x20005b8c

08004528 <stwSave>:
void stwSave(void){
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <stwSave+0x18>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <stwSave+0x1c>)
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8004538:	4610      	mov	r0, r2
 800453a:	4798      	blx	r3
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200001a4 	.word	0x200001a4
 8004544:	20005b8c 	.word	0x20005b8c

08004548 <getStw>:

uint16_t getStw(void){
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <getStw+0x20>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b29b      	uxth	r3, r3
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <getStw+0x24>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	b29b      	uxth	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20005be0 	.word	0x20005be0
 800456c:	51eb851f 	.word	0x51eb851f

08004570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	return 1;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_kill>:

int _kill(int pid, int sig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800458a:	f00e f8f5 	bl	8012778 <__errno>
 800458e:	4603      	mov	r3, r0
 8004590:	2216      	movs	r2, #22
 8004592:	601a      	str	r2, [r3, #0]
	return -1;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_exit>:

void _exit (int status)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffe7 	bl	8004580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045b2:	e7fe      	b.n	80045b2 <_exit+0x12>

080045b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e00a      	b.n	80045dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045c6:	f3af 8000 	nop.w
 80045ca:	4601      	mov	r1, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60ba      	str	r2, [r7, #8]
 80045d2:	b2ca      	uxtb	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dbf0      	blt.n	80045c6 <_read+0x12>
	}

return len;
 80045e4:	687b      	ldr	r3, [r7, #4]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e009      	b.n	8004614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	60ba      	str	r2, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fb37 	bl	8003c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbf1      	blt.n	8004600 <_write+0x12>
	}
	return len;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_close>:

int _close(int file)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
	return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800464e:	605a      	str	r2, [r3, #4]
	return 0;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_isatty>:

int _isatty(int file)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
	return 1;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	return 0;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <_sbrk+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <_sbrk+0x16>
		heap_end = &end;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <_sbrk+0x50>)
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <_sbrk+0x54>)
 80046a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <_sbrk+0x50>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <_sbrk+0x50>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	466a      	mov	r2, sp
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d907      	bls.n	80046ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80046ba:	f00e f85d 	bl	8012778 <__errno>
 80046be:	4603      	mov	r3, r0
 80046c0:	220c      	movs	r2, #12
 80046c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e006      	b.n	80046d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <_sbrk+0x50>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <_sbrk+0x50>)
 80046d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20005b94 	.word	0x20005b94
 80046e4:	20005e08 	.word	0x20005e08

080046e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <SystemInit+0x20>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <SystemInit+0x20>)
 80046f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b096      	sub	sp, #88	; 0x58
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800472a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	611a      	str	r2, [r3, #16]
 800473a:	615a      	str	r2, [r3, #20]
 800473c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2220      	movs	r2, #32
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f00e f871 	bl	801282c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <MX_TIM1_Init+0x13c>)
 800474c:	4a3f      	ldr	r2, [pc, #252]	; (800484c <MX_TIM1_Init+0x140>)
 800474e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004752:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <MX_TIM1_Init+0x13c>)
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800475e:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004760:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004768:	2200      	movs	r2, #0
 800476a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <MX_TIM1_Init+0x13c>)
 800476e:	2200      	movs	r2, #0
 8004770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004772:	4b35      	ldr	r3, [pc, #212]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004778:	4833      	ldr	r0, [pc, #204]	; (8004848 <MX_TIM1_Init+0x13c>)
 800477a:	f008 fb63 	bl	800ce44 <HAL_TIM_Base_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004784:	f7ff fc54 	bl	8004030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800478e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004792:	4619      	mov	r1, r3
 8004794:	482c      	ldr	r0, [pc, #176]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004796:	f008 ff2f 	bl	800d5f8 <HAL_TIM_ConfigClockSource>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80047a0:	f7ff fc46 	bl	8004030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047a4:	4828      	ldr	r0, [pc, #160]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047a6:	f008 fc3c 	bl	800d022 <HAL_TIM_PWM_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80047b0:	f7ff fc3e 	bl	8004030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047c0:	4619      	mov	r1, r3
 80047c2:	4821      	ldr	r0, [pc, #132]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047c4:	f009 fb18 	bl	800ddf8 <HAL_TIMEx_MasterConfigSynchronization>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80047ce:	f7ff fc2f 	bl	8004030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d2:	2360      	movs	r3, #96	; 0x60
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80047d6:	2302      	movs	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047de:	2300      	movs	r3, #0
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	2200      	movs	r2, #0
 80047f4:	4619      	mov	r1, r3
 80047f6:	4814      	ldr	r0, [pc, #80]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047f8:	f008 fe3c 	bl	800d474 <HAL_TIM_PWM_ConfigChannel>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004802:	f7ff fc15 	bl	8004030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800481a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800481e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4807      	ldr	r0, [pc, #28]	; (8004848 <MX_TIM1_Init+0x13c>)
 800482a:	f009 fb61 	bl	800def0 <HAL_TIMEx_ConfigBreakDeadTime>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004834:	f7ff fbfc 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004838:	4803      	ldr	r0, [pc, #12]	; (8004848 <MX_TIM1_Init+0x13c>)
 800483a:	f000 f8ff 	bl	8004a3c <HAL_TIM_MspPostInit>

}
 800483e:	bf00      	nop
 8004840:	3758      	adds	r7, #88	; 0x58
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20005b98 	.word	0x20005b98
 800484c:	40010000 	.word	0x40010000

08004850 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <MX_TIM10_Init+0x40>)
 8004856:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <MX_TIM10_Init+0x44>)
 8004858:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <MX_TIM10_Init+0x40>)
 800485c:	f244 129f 	movw	r2, #16799	; 0x419f
 8004860:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <MX_TIM10_Init+0x40>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <MX_TIM10_Init+0x40>)
 800486a:	f242 720f 	movw	r2, #9999	; 0x270f
 800486e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <MX_TIM10_Init+0x40>)
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <MX_TIM10_Init+0x40>)
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800487c:	4804      	ldr	r0, [pc, #16]	; (8004890 <MX_TIM10_Init+0x40>)
 800487e:	f008 fae1 	bl	800ce44 <HAL_TIM_Base_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004888:	f7ff fbd2 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20005be0 	.word	0x20005be0
 8004894:	40014400 	.word	0x40014400

08004898 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <MX_TIM11_Init+0x40>)
 800489e:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <MX_TIM11_Init+0x44>)
 80048a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048a4:	f244 129f 	movw	r2, #16799	; 0x419f
 80048a8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048b2:	2263      	movs	r2, #99	; 0x63
 80048b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80048c2:	4805      	ldr	r0, [pc, #20]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048c4:	f008 fabe 	bl	800ce44 <HAL_TIM_Base_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80048ce:	f7ff fbaf 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20005c28 	.word	0x20005c28
 80048dc:	40014800 	.word	0x40014800

080048e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <MX_TIM13_Init+0x40>)
 80048e6:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <MX_TIM13_Init+0x44>)
 80048e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <MX_TIM13_Init+0x40>)
 80048ec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80048f0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <MX_TIM13_Init+0x40>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <MX_TIM13_Init+0x40>)
 80048fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80048fe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <MX_TIM13_Init+0x40>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <MX_TIM13_Init+0x40>)
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800490c:	4804      	ldr	r0, [pc, #16]	; (8004920 <MX_TIM13_Init+0x40>)
 800490e:	f008 fa99 	bl	800ce44 <HAL_TIM_Base_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004918:	f7ff fb8a 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20005c70 	.word	0x20005c70
 8004924:	40001c00 	.word	0x40001c00

08004928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <HAL_TIM_Base_MspInit+0x100>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d11e      	bne.n	8004978 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6453      	str	r3, [r2, #68]	; 0x44
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	2019      	movs	r0, #25
 800495c:	f004 fbf1 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004960:	2019      	movs	r0, #25
 8004962:	f004 fc0a 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	201a      	movs	r0, #26
 800496c:	f004 fbe9 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004970:	201a      	movs	r0, #26
 8004972:	f004 fc02 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004976:	e052      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <HAL_TIM_Base_MspInit+0x108>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d116      	bne.n	80049b0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a28      	ldr	r2, [pc, #160]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	2100      	movs	r1, #0
 80049a2:	2019      	movs	r0, #25
 80049a4:	f004 fbcd 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049a8:	2019      	movs	r0, #25
 80049aa:	f004 fbe6 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 80049ae:	e036      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_Base_MspInit+0x10c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d116      	bne.n	80049e8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	201a      	movs	r0, #26
 80049dc:	f004 fbb1 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80049e0:	201a      	movs	r0, #26
 80049e2:	f004 fbca 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 80049e6:	e01a      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_TIM_Base_MspInit+0x110>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d115      	bne.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	202c      	movs	r0, #44	; 0x2c
 8004a14:	f004 fb95 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004a18:	202c      	movs	r0, #44	; 0x2c
 8004a1a:	f004 fbae 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	40001c00 	.word	0x40001c00

08004a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <HAL_TIM_MspPostInit+0x68>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d11e      	bne.n	8004a9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	4619      	mov	r1, r3
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <HAL_TIM_MspPostInit+0x70>)
 8004a98:	f004 fc10 	bl	80092bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40021000 	.word	0x40021000

08004ab0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <MX_USART3_UART_Init+0x50>)
 8004ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ae6:	4805      	ldr	r0, [pc, #20]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ae8:	f009 fa68 	bl	800dfbc <HAL_UART_Init>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004af2:	f7ff fa9d 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20005cb8 	.word	0x20005cb8
 8004b00:	40004800 	.word	0x40004800

08004b04 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <MX_USART6_UART_Init+0x50>)
 8004b0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b3a:	4805      	ldr	r0, [pc, #20]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b3c:	f009 fa3e 	bl	800dfbc <HAL_UART_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004b46:	f7ff fa73 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20005cfc 	.word	0x20005cfc
 8004b54:	40011400 	.word	0x40011400

08004b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a32      	ldr	r2, [pc, #200]	; (8004c40 <HAL_UART_MspInit+0xe8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d12d      	bne.n	8004bd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004ba0:	f043 0308 	orr.w	r3, r3, #8
 8004ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc8:	f107 031c 	add.w	r3, r7, #28
 8004bcc:	4619      	mov	r1, r3
 8004bce:	481e      	ldr	r0, [pc, #120]	; (8004c48 <HAL_UART_MspInit+0xf0>)
 8004bd0:	f004 fb74 	bl	80092bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004bd4:	e030      	b.n	8004c38 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_UART_MspInit+0xf4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d12b      	bne.n	8004c38 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c24:	2303      	movs	r3, #3
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c28:	2308      	movs	r3, #8
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <HAL_UART_MspInit+0xf8>)
 8004c34:	f004 fb42 	bl	80092bc <HAL_GPIO_Init>
}
 8004c38:	bf00      	nop
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40004800 	.word	0x40004800
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40020c00 	.word	0x40020c00
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	40020800 	.word	0x40020800

08004c54 <setDefaultClbcks>:
#include "fonts/fonts.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t altitudeMode = 1;

static void setDefaultClbcks(void){
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <setDefaultClbcks+0x38>)
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <setDefaultClbcks+0x3c>)
 8004c5c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <setDefaultClbcks+0x40>)
 8004c60:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <setDefaultClbcks+0x44>)
 8004c62:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &changeAltiMode;
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <setDefaultClbcks+0x48>)
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <setDefaultClbcks+0x4c>)
 8004c68:	611a      	str	r2, [r3, #16]
	btn_B3.onContinuousShortPressHandler = &increaseAltitude;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <setDefaultClbcks+0x50>)
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <setDefaultClbcks+0x54>)
 8004c6e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &decreaseAltitude;
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <setDefaultClbcks+0x58>)
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <setDefaultClbcks+0x5c>)
 8004c74:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = &setRefAltitude;
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <setDefaultClbcks+0x60>)
 8004c78:	4a0f      	ldr	r2, [pc, #60]	; (8004cb8 <setDefaultClbcks+0x64>)
 8004c7a:	611a      	str	r2, [r3, #16]
	btn_B2.onSingleLongPressHandler = &clearRefAltitude;
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <setDefaultClbcks+0x60>)
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <setDefaultClbcks+0x68>)
 8004c80:	615a      	str	r2, [r3, #20]
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20002660 	.word	0x20002660
 8004c90:	08002a69 	.word	0x08002a69
 8004c94:	200026a8 	.word	0x200026a8
 8004c98:	08002a79 	.word	0x08002a79
 8004c9c:	20002684 	.word	0x20002684
 8004ca0:	0800515d 	.word	0x0800515d
 8004ca4:	20002714 	.word	0x20002714
 8004ca8:	08005185 	.word	0x08005185
 8004cac:	200026cc 	.word	0x200026cc
 8004cb0:	080051ad 	.word	0x080051ad
 8004cb4:	200026f0 	.word	0x200026f0
 8004cb8:	08005121 	.word	0x08005121
 8004cbc:	08005141 	.word	0x08005141

08004cc0 <altiSetup>:

// function executed once on module load
void altiSetup(void){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004cc4:	f7ff ffc6 	bl	8004c54 <setDefaultClbcks>
	minAltitude = bmpData.altitude;
 8004cc8:	4b02      	ldr	r3, [pc, #8]	; (8004cd4 <altiSetup+0x14>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4a02      	ldr	r2, [pc, #8]	; (8004cd8 <altiSetup+0x18>)
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20002650 	.word	0x20002650
 8004cd8:	20005d44 	.word	0x20005d44

08004cdc <altiMain>:

// main function
void altiMain(void){
 8004cdc:	b5b0      	push	{r4, r5, r7, lr}
 8004cde:	b092      	sub	sp, #72	; 0x48
 8004ce0:	af02      	add	r7, sp, #8
	// header bar temperature - time
	char guiPos[6] = {0};
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8004cea:	4b9c      	ldr	r3, [pc, #624]	; (8004f5c <altiMain+0x280>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b9a      	ldr	r3, [pc, #616]	; (8004f5c <altiMain+0x280>)
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004cf8:	4999      	ldr	r1, [pc, #612]	; (8004f60 <altiMain+0x284>)
 8004cfa:	f00e fec5 	bl	8013a88 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8004cfe:	2314      	movs	r3, #20
 8004d00:	b29c      	uxth	r4, r3
 8004d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fb fa7c 	bl	8000204 <strlen>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	fb14 f303 	smulbb	r3, r4, r3
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8004d1a:	b298      	uxth	r0, r3
 8004d1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d20:	4b90      	ldr	r3, [pc, #576]	; (8004f64 <altiMain+0x288>)
 8004d22:	210a      	movs	r1, #10
 8004d24:	f7fe f8ee 	bl	8002f04 <lcdPutStr>
	sprintf(&guiPos, "%02.1f`C", bmpData.temperature);
 8004d28:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <altiMain+0x28c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fc2b 	bl	8000588 <__aeabi_f2d>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004d3a:	498c      	ldr	r1, [pc, #560]	; (8004f6c <altiMain+0x290>)
 8004d3c:	f00e fea4 	bl	8013a88 <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 8004d40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d44:	4b87      	ldr	r3, [pc, #540]	; (8004f64 <altiMain+0x288>)
 8004d46:	210a      	movs	r1, #10
 8004d48:	200a      	movs	r0, #10
 8004d4a:	f7fe f8db 	bl	8002f04 <lcdPutStr>

	if(altitudeMode){
 8004d4e:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <altiMain+0x294>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 812c 	beq.w	8004fb0 <altiMain+0x2d4>
		// altitude - pressure at the sea level
		char tmpStr[50] = {0};
 8004d58:	2300      	movs	r3, #0
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	222e      	movs	r2, #46	; 0x2e
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f00d fd61 	bl	801282c <memset>
		sprintf(&tmpStr, "%d", (int16_t)bmpData.altitude);
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	; (8004f68 <altiMain+0x28c>)
 8004d6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d74:	ee17 3a90 	vmov	r3, s15
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	497d      	ldr	r1, [pc, #500]	; (8004f74 <altiMain+0x298>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f00e fe81 	bl	8013a88 <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 8004d86:	2342      	movs	r3, #66	; 0x42
 8004d88:	b29c      	uxth	r4, r3
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb fa39 	bl	8000204 <strlen>
 8004d92:	4603      	mov	r3, r0
 8004d94:	3301      	adds	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	fb14 f303 	smulbb	r3, r4, r3
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8004da2:	b298      	uxth	r0, r3
 8004da4:	1d3a      	adds	r2, r7, #4
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <altiMain+0x29c>)
 8004da8:	2142      	movs	r1, #66	; 0x42
 8004daa:	f7fe f8ab 	bl	8002f04 <lcdPutStr>
		sprintf(&tmpStr, ".%1um", ((uint16_t)(fabs(bmpData.altitude)*10))%10);
 8004dae:	4b6e      	ldr	r3, [pc, #440]	; (8004f68 <altiMain+0x28c>)
 8004db0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004db4:	eef0 7ae7 	vabs.f32	s15, s15
 8004db8:	ee17 0a90 	vmov	r0, s15
 8004dbc:	f7fb fbe4 	bl	8000588 <__aeabi_f2d>
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <altiMain+0x2a0>)
 8004dc6:	f7fb fc37 	bl	8000638 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f7fb ff09 	bl	8000be8 <__aeabi_d2uiz>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <altiMain+0x2a4>)
 8004ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8004de0:	08d9      	lsrs	r1, r3, #3
 8004de2:	460b      	mov	r3, r1
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	4964      	ldr	r1, [pc, #400]	; (8004f84 <altiMain+0x2a8>)
 8004df4:	4618      	mov	r0, r3
 8004df6:	f00e fe47 	bl	8013a88 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8004dfa:	2322      	movs	r3, #34	; 0x22
 8004dfc:	b29c      	uxth	r4, r3
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb f9ff 	bl	8000204 <strlen>
 8004e06:	4603      	mov	r3, r0
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	fb14 f303 	smulbb	r3, r4, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8004e16:	b298      	uxth	r0, r3
 8004e18:	1d3a      	adds	r2, r7, #4
 8004e1a:	4b5b      	ldr	r3, [pc, #364]	; (8004f88 <altiMain+0x2ac>)
 8004e1c:	2142      	movs	r1, #66	; 0x42
 8004e1e:	f7fe f871 	bl	8002f04 <lcdPutStr>
//		sprintf(&tmpStr, "m ", bmpData.pressure%100/10);
//		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
		sprintf(&tmpStr, "ASL %4.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8004e22:	4b5a      	ldr	r3, [pc, #360]	; (8004f8c <altiMain+0x2b0>)
 8004e24:	edd3 7a00 	vldr	s15, [r3]
 8004e28:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004f90 <altiMain+0x2b4>
 8004e2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e30:	ee16 0a90 	vmov	r0, s13
 8004e34:	f7fb fba8 	bl	8000588 <__aeabi_f2d>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	1d38      	adds	r0, r7, #4
 8004e3e:	4955      	ldr	r1, [pc, #340]	; (8004f94 <altiMain+0x2b8>)
 8004e40:	f00e fe22 	bl	8013a88 <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 8004e44:	2309      	movs	r3, #9
 8004e46:	b29c      	uxth	r4, r3
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb f9da 	bl	8000204 <strlen>
 8004e50:	4603      	mov	r3, r0
 8004e52:	3301      	adds	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	fb14 f303 	smulbb	r3, r4, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8004e60:	3301      	adds	r3, #1
 8004e62:	b298      	uxth	r0, r3
 8004e64:	1d3a      	adds	r2, r7, #4
 8004e66:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <altiMain+0x2bc>)
 8004e68:	21a5      	movs	r1, #165	; 0xa5
 8004e6a:	f7fe f84b 	bl	8002f04 <lcdPutStr>

		// update minimum/maximum/diff
		if(bmpData.altitude < minAltitude) minAltitude = bmpData.altitude;
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <altiMain+0x28c>)
 8004e70:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <altiMain+0x2c0>)
 8004e76:	edd3 7a00 	vldr	s15, [r3]
 8004e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e82:	d503      	bpl.n	8004e8c <altiMain+0x1b0>
 8004e84:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <altiMain+0x28c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a44      	ldr	r2, [pc, #272]	; (8004f9c <altiMain+0x2c0>)
 8004e8a:	6013      	str	r3, [r2, #0]
		if(bmpData.altitude > maxAltitude) maxAltitude = bmpData.altitude;
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <altiMain+0x28c>)
 8004e8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e92:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <altiMain+0x2c4>)
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea0:	dd03      	ble.n	8004eaa <altiMain+0x1ce>
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <altiMain+0x28c>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <altiMain+0x2c4>)
 8004ea8:	6013      	str	r3, [r2, #0]

//		sprintf(&tmpStr, "ref(diff) %.1fm(%+.1fm)", refAltitude, bmpData.altitude-refAltitude);
		if(refAltitude != 0){
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <altiMain+0x2c8>)
 8004eac:	edd3 7a00 	vldr	s15, [r3]
 8004eb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb8:	d025      	beq.n	8004f06 <altiMain+0x22a>
			sprintf(&tmpStr, "%+.1fm", bmpData.altitude-refAltitude);
 8004eba:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <altiMain+0x28c>)
 8004ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ec0:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <altiMain+0x2c8>)
 8004ec2:	edd3 7a00 	vldr	s15, [r3]
 8004ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eca:	ee17 0a90 	vmov	r0, s15
 8004ece:	f7fb fb5b 	bl	8000588 <__aeabi_f2d>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	1d38      	adds	r0, r7, #4
 8004ed8:	4933      	ldr	r1, [pc, #204]	; (8004fa8 <altiMain+0x2cc>)
 8004eda:	f00e fdd5 	bl	8013a88 <siprintf>
			lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 184, tmpStr, zekton24font);
 8004ede:	2314      	movs	r3, #20
 8004ee0:	b29c      	uxth	r4, r3
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb f98d 	bl	8000204 <strlen>
 8004eea:	4603      	mov	r3, r0
 8004eec:	3301      	adds	r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	fb14 f303 	smulbb	r3, r4, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8004efa:	b298      	uxth	r0, r3
 8004efc:	1d3a      	adds	r2, r7, #4
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <altiMain+0x288>)
 8004f00:	21b8      	movs	r1, #184	; 0xb8
 8004f02:	f7fd ffff 	bl	8002f04 <lcdPutStr>
		}
		sprintf(&tmpStr, "%.1fm/%.1fm", minAltitude, maxAltitude);
 8004f06:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <altiMain+0x2c0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fb3c 	bl	8000588 <__aeabi_f2d>
 8004f10:	4604      	mov	r4, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <altiMain+0x2c4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fb35 	bl	8000588 <__aeabi_f2d>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	1d38      	adds	r0, r7, #4
 8004f24:	e9cd 2300 	strd	r2, r3, [sp]
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	491f      	ldr	r1, [pc, #124]	; (8004fac <altiMain+0x2d0>)
 8004f2e:	f00e fdab 	bl	8013a88 <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 8004f32:	2314      	movs	r3, #20
 8004f34:	b29c      	uxth	r4, r3
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fb f963 	bl	8000204 <strlen>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	3301      	adds	r3, #1
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	fb14 f303 	smulbb	r3, r4, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8004f4e:	b298      	uxth	r0, r3
 8004f50:	1d3a      	adds	r2, r7, #4
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <altiMain+0x288>)
 8004f54:	21d2      	movs	r1, #210	; 0xd2
 8004f56:	f7fd ffd5 	bl	8002f04 <lcdPutStr>
		lcdPutStr(432-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
		sprintf(&tmpStr, "ASL: %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);

	}
}
 8004f5a:	e0c5      	b.n	80050e8 <altiMain+0x40c>
 8004f5c:	200057f0 	.word	0x200057f0
 8004f60:	0801aeac 	.word	0x0801aeac
 8004f64:	0801c464 	.word	0x0801c464
 8004f68:	20002650 	.word	0x20002650
 8004f6c:	0801aeb8 	.word	0x0801aeb8
 8004f70:	200001e0 	.word	0x200001e0
 8004f74:	0801aec4 	.word	0x0801aec4
 8004f78:	08023914 	.word	0x08023914
 8004f7c:	40240000 	.word	0x40240000
 8004f80:	cccccccd 	.word	0xcccccccd
 8004f84:	0801aec8 	.word	0x0801aec8
 8004f88:	0801e2cc 	.word	0x0801e2cc
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	42c80000 	.word	0x42c80000
 8004f94:	0801aed0 	.word	0x0801aed0
 8004f98:	0801b9dc 	.word	0x0801b9dc
 8004f9c:	20005d44 	.word	0x20005d44
 8004fa0:	20005d48 	.word	0x20005d48
 8004fa4:	20005d40 	.word	0x20005d40
 8004fa8:	0801aee0 	.word	0x0801aee0
 8004fac:	0801aee8 	.word	0x0801aee8
		char tmpStr[50] = {0};
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	222e      	movs	r2, #46	; 0x2e
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f00d fc35 	bl	801282c <memset>
		sprintf(&tmpStr, "%d", bmpData.pressure/100);
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <altiMain+0x414>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4a4b      	ldr	r2, [pc, #300]	; (80050f4 <altiMain+0x418>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	095a      	lsrs	r2, r3, #5
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	4949      	ldr	r1, [pc, #292]	; (80050f8 <altiMain+0x41c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f00e fd58 	bl	8013a88 <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 8004fd8:	2342      	movs	r3, #66	; 0x42
 8004fda:	b29c      	uxth	r4, r3
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb f910 	bl	8000204 <strlen>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	fb14 f303 	smulbb	r3, r4, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8004ff4:	b298      	uxth	r0, r3
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	4b40      	ldr	r3, [pc, #256]	; (80050fc <altiMain+0x420>)
 8004ffa:	2142      	movs	r1, #66	; 0x42
 8004ffc:	f7fd ff82 	bl	8002f04 <lcdPutStr>
		sprintf(&tmpStr, ".%d ", bmpData.pressure%100/10);
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <altiMain+0x414>)
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <altiMain+0x418>)
 8005006:	fba3 1302 	umull	r1, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2164      	movs	r1, #100	; 0x64
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	4a3a      	ldr	r2, [pc, #232]	; (8005100 <altiMain+0x424>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	4939      	ldr	r1, [pc, #228]	; (8005104 <altiMain+0x428>)
 8005020:	4618      	mov	r0, r3
 8005022:	f00e fd31 	bl	8013a88 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8005026:	2322      	movs	r3, #34	; 0x22
 8005028:	b29c      	uxth	r4, r3
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb f8e9 	bl	8000204 <strlen>
 8005032:	4603      	mov	r3, r0
 8005034:	3301      	adds	r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	fb14 f303 	smulbb	r3, r4, r3
 800503c:	b29b      	uxth	r3, r3
 800503e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8005042:	b298      	uxth	r0, r3
 8005044:	1d3a      	adds	r2, r7, #4
 8005046:	4b30      	ldr	r3, [pc, #192]	; (8005108 <altiMain+0x42c>)
 8005048:	2142      	movs	r1, #66	; 0x42
 800504a:	f7fd ff5b 	bl	8002f04 <lcdPutStr>
		sprintf(&tmpStr, "hpa", bmpData.pressure%100/10);
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <altiMain+0x414>)
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <altiMain+0x418>)
 8005054:	fba3 1302 	umull	r1, r3, r3, r2
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2164      	movs	r1, #100	; 0x64
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a27      	ldr	r2, [pc, #156]	; (8005100 <altiMain+0x424>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	08da      	lsrs	r2, r3, #3
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	4927      	ldr	r1, [pc, #156]	; (800510c <altiMain+0x430>)
 800506e:	4618      	mov	r0, r3
 8005070:	f00e fd0a 	bl	8013a88 <siprintf>
		lcdPutStr(432-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
 8005074:	2322      	movs	r3, #34	; 0x22
 8005076:	b29c      	uxth	r4, r3
 8005078:	1d3b      	adds	r3, r7, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f8c2 	bl	8000204 <strlen>
 8005080:	4603      	mov	r3, r0
 8005082:	3301      	adds	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	fb14 f303 	smulbb	r3, r4, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 8005090:	b298      	uxth	r0, r3
 8005092:	1d3a      	adds	r2, r7, #4
 8005094:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <altiMain+0x42c>)
 8005096:	2170      	movs	r1, #112	; 0x70
 8005098:	f7fd ff34 	bl	8002f04 <lcdPutStr>
		sprintf(&tmpStr, "ASL: %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 800509c:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <altiMain+0x434>)
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005114 <altiMain+0x438>
 80050a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050aa:	ee16 0a90 	vmov	r0, s13
 80050ae:	f7fb fa6b 	bl	8000588 <__aeabi_f2d>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	1d38      	adds	r0, r7, #4
 80050b8:	4917      	ldr	r1, [pc, #92]	; (8005118 <altiMain+0x43c>)
 80050ba:	f00e fce5 	bl	8013a88 <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 80050be:	2309      	movs	r3, #9
 80050c0:	b29c      	uxth	r4, r3
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb f89d 	bl	8000204 <strlen>
 80050ca:	4603      	mov	r3, r0
 80050cc:	3301      	adds	r3, #1
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	fb14 f303 	smulbb	r3, r4, r3
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 80050da:	3301      	adds	r3, #1
 80050dc:	b298      	uxth	r0, r3
 80050de:	1d3a      	adds	r2, r7, #4
 80050e0:	4b0e      	ldr	r3, [pc, #56]	; (800511c <altiMain+0x440>)
 80050e2:	21a5      	movs	r1, #165	; 0xa5
 80050e4:	f7fd ff0e 	bl	8002f04 <lcdPutStr>
}
 80050e8:	bf00      	nop
 80050ea:	3740      	adds	r7, #64	; 0x40
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}
 80050f0:	20002650 	.word	0x20002650
 80050f4:	51eb851f 	.word	0x51eb851f
 80050f8:	0801aec4 	.word	0x0801aec4
 80050fc:	08023914 	.word	0x08023914
 8005100:	cccccccd 	.word	0xcccccccd
 8005104:	0801aef4 	.word	0x0801aef4
 8005108:	0801e2cc 	.word	0x0801e2cc
 800510c:	0801aefc 	.word	0x0801aefc
 8005110:	20000000 	.word	0x20000000
 8005114:	42c80000 	.word	0x42c80000
 8005118:	0801af00 	.word	0x0801af00
 800511c:	0801b9dc 	.word	0x0801b9dc

08005120 <setRefAltitude>:

void setRefAltitude(void){
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
	refAltitude = bmpData.altitude;
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <setRefAltitude+0x18>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <setRefAltitude+0x1c>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20002650 	.word	0x20002650
 800513c:	20005d40 	.word	0x20005d40

08005140 <clearRefAltitude>:
void clearRefAltitude(void){
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
	refAltitude = 0;
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <clearRefAltitude+0x18>)
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20005d40 	.word	0x20005d40

0800515c <changeAltiMode>:
void changeAltiMode(void){
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <changeAltiMode+0x24>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d103      	bne.n	8005170 <changeAltiMode+0x14>
//		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
		altitudeMode = 0;
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <changeAltiMode+0x24>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
	} else {
//		fixedAltitude = bmpData.altitude;
		altitudeMode = 1;
	}
}
 800516e:	e002      	b.n	8005176 <changeAltiMode+0x1a>
		altitudeMode = 1;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <changeAltiMode+0x24>)
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	200001e0 	.word	0x200001e0

08005184 <increaseAltitude>:
void increaseAltitude(void){
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
	BMP_PRESS_CONST_SEA_LEVEL += 1;
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <increaseAltitude+0x24>)
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005192:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <increaseAltitude+0x24>)
 8005198:	edc3 7a00 	vstr	s15, [r3]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000000 	.word	0x20000000

080051ac <decreaseAltitude>:
void decreaseAltitude(void){
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	BMP_PRESS_CONST_SEA_LEVEL -= 1;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <decreaseAltitude+0x24>)
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <decreaseAltitude+0x24>)
 80051c0:	edc3 7a00 	vstr	s15, [r3]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000000 	.word	0x20000000

080051d4 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <setDefaultClbcks+0x34>)
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <setDefaultClbcks+0x38>)
 80051dc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <setDefaultClbcks+0x3c>)
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <setDefaultClbcks+0x40>)
 80051e2:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <setDefaultClbcks+0x44>)
 80051e6:	4a0d      	ldr	r2, [pc, #52]	; (800521c <setDefaultClbcks+0x48>)
 80051e8:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <setDefaultClbcks+0x4c>)
 80051ec:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <setDefaultClbcks+0x50>)
 80051ee:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <setDefaultClbcks+0x54>)
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <setDefaultClbcks+0x58>)
 80051f4:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <setDefaultClbcks+0x5c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20002660 	.word	0x20002660
 800520c:	08002a69 	.word	0x08002a69
 8005210:	200026a8 	.word	0x200026a8
 8005214:	08002a79 	.word	0x08002a79
 8005218:	20002684 	.word	0x20002684
 800521c:	08005715 	.word	0x08005715
 8005220:	20002714 	.word	0x20002714
 8005224:	08005759 	.word	0x08005759
 8005228:	200026cc 	.word	0x200026cc
 800522c:	080057a5 	.word	0x080057a5
 8005230:	200026f0 	.word	0x200026f0

08005234 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005238:	f7ff ffcc 	bl	80051d4 <setDefaultClbcks>
}
 800523c:	bf00      	nop
 800523e:	bd80      	pop	{r7, pc}

08005240 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	b0b2      	sub	sp, #200	; 0xc8
 8005246:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005248:	2100      	movs	r1, #0
 800524a:	488b      	ldr	r0, [pc, #556]	; (8005478 <baroMain+0x238>)
 800524c:	f003 fc9f 	bl	8008b8e <cbuf_readn>
 8005250:	4603      	mov	r3, r0
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005258:	2100      	movs	r1, #0
 800525a:	4887      	ldr	r0, [pc, #540]	; (8005478 <baroMain+0x238>)
 800525c:	f003 fc97 	bl	8008b8e <cbuf_readn>
 8005260:	4603      	mov	r3, r0
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8005268:	2100      	movs	r1, #0
 800526a:	4884      	ldr	r0, [pc, #528]	; (800547c <baroMain+0x23c>)
 800526c:	f003 fd35 	bl	8008cda <read_nth_ring_buffer>
 8005270:	4603      	mov	r3, r0
 8005272:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8005276:	2100      	movs	r1, #0
 8005278:	4880      	ldr	r0, [pc, #512]	; (800547c <baroMain+0x23c>)
 800527a:	f003 fd2e 	bl	8008cda <read_nth_ring_buffer>
 800527e:	4603      	mov	r3, r0
 8005280:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 8005284:	2300      	movs	r3, #0
 8005286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005288:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800528c:	222e      	movs	r2, #46	; 0x2e
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f00d facb 	bl	801282c <memset>
	char str3[50] = {0};
 8005296:	2300      	movs	r3, #0
 8005298:	63bb      	str	r3, [r7, #56]	; 0x38
 800529a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800529e:	222e      	movs	r2, #46	; 0x2e
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f00d fac2 	bl	801282c <memset>
	char str4[50] = {0};
 80052a8:	2300      	movs	r3, #0
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	222e      	movs	r2, #46	; 0x2e
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f00d fab9 	bl	801282c <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 80052ba:	4b71      	ldr	r3, [pc, #452]	; (8005480 <baroMain+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb f962 	bl	8000588 <__aeabi_f2d>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80052cc:	496d      	ldr	r1, [pc, #436]	; (8005484 <baroMain+0x244>)
 80052ce:	f00e fbdb 	bl	8013a88 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 80052d2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80052d6:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <baroMain+0x248>)
 80052d8:	210e      	movs	r1, #14
 80052da:	200a      	movs	r0, #10
 80052dc:	f7fd fe12 	bl	8002f04 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 80052e0:	4b67      	ldr	r3, [pc, #412]	; (8005480 <baroMain+0x240>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ec:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800548c <baroMain+0x24c>
 80052f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052f4:	ee16 0a90 	vmov	r0, s13
 80052f8:	f7fb f946 	bl	8000588 <__aeabi_f2d>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8005304:	4962      	ldr	r1, [pc, #392]	; (8005490 <baroMain+0x250>)
 8005306:	f00e fbbf 	bl	8013a88 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 800530a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800530e:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <baroMain+0x248>)
 8005310:	211e      	movs	r1, #30
 8005312:	200a      	movs	r0, #10
 8005314:	f7fd fdf6 	bl	8002f04 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005318:	4b5e      	ldr	r3, [pc, #376]	; (8005494 <baroMain+0x254>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d123      	bne.n	8005368 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	495d      	ldr	r1, [pc, #372]	; (8005498 <baroMain+0x258>)
 8005324:	4618      	mov	r0, r3
 8005326:	f00e fbaf 	bl	8013a88 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 800532a:	4b55      	ldr	r3, [pc, #340]	; (8005480 <baroMain+0x240>)
 800532c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005330:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800548c <baroMain+0x24c>
 8005334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005338:	ee16 0a90 	vmov	r0, s13
 800533c:	f7fb f924 	bl	8000588 <__aeabi_f2d>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8005348:	4954      	ldr	r1, [pc, #336]	; (800549c <baroMain+0x25c>)
 800534a:	f00e fb9d 	bl	8013a88 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 800534e:	4b54      	ldr	r3, [pc, #336]	; (80054a0 <baroMain+0x260>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb f918 	bl	8000588 <__aeabi_f2d>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005360:	4950      	ldr	r1, [pc, #320]	; (80054a4 <baroMain+0x264>)
 8005362:	f00e fb91 	bl	8013a88 <siprintf>
 8005366:	e022      	b.n	80053ae <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	494f      	ldr	r1, [pc, #316]	; (80054a8 <baroMain+0x268>)
 800536c:	4618      	mov	r0, r3
 800536e:	f00e fb8b 	bl	8013a88 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <baroMain+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f906 	bl	8000588 <__aeabi_f2d>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8005384:	4949      	ldr	r1, [pc, #292]	; (80054ac <baroMain+0x26c>)
 8005386:	f00e fb7f 	bl	8013a88 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 800538a:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <baroMain+0x270>)
 800538c:	edd3 7a00 	vldr	s15, [r3]
 8005390:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800548c <baroMain+0x24c>
 8005394:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005398:	ee16 0a90 	vmov	r0, s13
 800539c:	f7fb f8f4 	bl	8000588 <__aeabi_f2d>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80053a8:	4942      	ldr	r1, [pc, #264]	; (80054b4 <baroMain+0x274>)
 80053aa:	f00e fb6d 	bl	8013a88 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 80053ae:	1d3a      	adds	r2, r7, #4
 80053b0:	4b35      	ldr	r3, [pc, #212]	; (8005488 <baroMain+0x248>)
 80053b2:	2132      	movs	r1, #50	; 0x32
 80053b4:	200a      	movs	r0, #10
 80053b6:	f7fd fda5 	bl	8002f04 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 80053ba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80053be:	4b32      	ldr	r3, [pc, #200]	; (8005488 <baroMain+0x248>)
 80053c0:	2142      	movs	r1, #66	; 0x42
 80053c2:	200a      	movs	r0, #10
 80053c4:	f7fd fd9e 	bl	8002f04 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 80053c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053cc:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <baroMain+0x248>)
 80053ce:	2152      	movs	r1, #82	; 0x52
 80053d0:	200a      	movs	r0, #10
 80053d2:	f7fd fd97 	bl	8002f04 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80053dc:	e041      	b.n	8005462 <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 80053de:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80053e2:	4619      	mov	r1, r3
 80053e4:	4824      	ldr	r0, [pc, #144]	; (8005478 <baroMain+0x238>)
 80053e6:	f003 fbd2 	bl	8008b8e <cbuf_readn>
 80053ea:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 80053ee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80053f2:	4619      	mov	r1, r3
 80053f4:	4821      	ldr	r0, [pc, #132]	; (800547c <baroMain+0x23c>)
 80053f6:	f003 fc70 	bl	8008cda <read_nth_ring_buffer>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8005400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800540a:	429a      	cmp	r2, r3
 800540c:	d804      	bhi.n	8005418 <baroMain+0x1d8>
 800540e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 8005418:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8005422:	429a      	cmp	r2, r3
 8005424:	d304      	bcc.n	8005430 <baroMain+0x1f0>
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8005430:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8005434:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005438:	429a      	cmp	r2, r3
 800543a:	d303      	bcc.n	8005444 <baroMain+0x204>
 800543c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005440:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8005444:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8005448:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800544c:	429a      	cmp	r2, r3
 800544e:	d803      	bhi.n	8005458 <baroMain+0x218>
 8005450:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005454:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8005458:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800545c:	3301      	adds	r3, #1
 800545e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <baroMain+0x23c>)
 8005464:	891b      	ldrh	r3, [r3, #8]
 8005466:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800546a:	429a      	cmp	r2, r3
 800546c:	d3b7      	bcc.n	80053de <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <baroMain+0x278>)
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8005476:	e0ba      	b.n	80055ee <baroMain+0x3ae>
 8005478:	20005808 	.word	0x20005808
 800547c:	2000581c 	.word	0x2000581c
 8005480:	20002650 	.word	0x20002650
 8005484:	0801afc8 	.word	0x0801afc8
 8005488:	08025c88 	.word	0x08025c88
 800548c:	42c80000 	.word	0x42c80000
 8005490:	0801afe0 	.word	0x0801afe0
 8005494:	20005d4c 	.word	0x20005d4c
 8005498:	0801affc 	.word	0x0801affc
 800549c:	0801b010 	.word	0x0801b010
 80054a0:	20000004 	.word	0x20000004
 80054a4:	0801b034 	.word	0x0801b034
 80054a8:	0801b054 	.word	0x0801b054
 80054ac:	0801b068 	.word	0x0801b068
 80054b0:	20000000 	.word	0x20000000
 80054b4:	0801b088 	.word	0x0801b088
 80054b8:	200001e2 	.word	0x200001e2
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 80054bc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80054c0:	4a8c      	ldr	r2, [pc, #560]	; (80056f4 <baroMain+0x4b4>)
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	4a8c      	ldr	r2, [pc, #560]	; (80056f8 <baroMain+0x4b8>)
 80054c8:	8912      	ldrh	r2, [r2, #8]
 80054ca:	fb03 f202 	mul.w	r2, r3, r2
 80054ce:	4b8b      	ldr	r3, [pc, #556]	; (80056fc <baroMain+0x4bc>)
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b87      	ldr	r3, [pc, #540]	; (80056f4 <baroMain+0x4b4>)
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	1acb      	subs	r3, r1, r3
 80054da:	fb92 f3f3 	sdiv	r3, r2, r3
 80054de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 80054e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80054e6:	4619      	mov	r1, r3
 80054e8:	4883      	ldr	r0, [pc, #524]	; (80056f8 <baroMain+0x4b8>)
 80054ea:	f003 fb50 	bl	8008b8e <cbuf_readn>
 80054ee:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 80054f2:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 80054f6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80054fa:	1c5c      	adds	r4, r3, #1
 80054fc:	4b80      	ldr	r3, [pc, #512]	; (8005700 <baroMain+0x4c0>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461d      	mov	r5, r3
 8005502:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <baroMain+0x4c0>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <baroMain+0x4c4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005512:	8812      	ldrh	r2, [r2, #0]
 8005514:	4611      	mov	r1, r2
 8005516:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800551a:	1a8a      	subs	r2, r1, r2
 800551c:	fb03 f202 	mul.w	r2, r3, r2
 8005520:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8005524:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005528:	1acb      	subs	r3, r1, r3
 800552a:	fb92 f3f3 	sdiv	r3, r2, r3
 800552e:	1aea      	subs	r2, r5, r3
 8005530:	4b73      	ldr	r3, [pc, #460]	; (8005700 <baroMain+0x4c0>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	2300      	movs	r3, #0
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	2302      	movs	r3, #2
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	2301      	movs	r3, #1
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	460b      	mov	r3, r1
 8005544:	4621      	mov	r1, r4
 8005546:	f7fe fb14 	bl	8003b72 <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 800554a:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 800554e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8005552:	1c5e      	adds	r6, r3, #1
 8005554:	4b6a      	ldr	r3, [pc, #424]	; (8005700 <baroMain+0x4c0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4698      	mov	r8, r3
 800555a:	4b69      	ldr	r3, [pc, #420]	; (8005700 <baroMain+0x4c0>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	4b68      	ldr	r3, [pc, #416]	; (8005704 <baroMain+0x4c4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	1ad4      	subs	r4, r2, r3
 8005566:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800556a:	4619      	mov	r1, r3
 800556c:	4866      	ldr	r0, [pc, #408]	; (8005708 <baroMain+0x4c8>)
 800556e:	f003 fbb4 	bl	8008cda <read_nth_ring_buffer>
 8005572:	4602      	mov	r2, r0
 8005574:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	fb03 f204 	mul.w	r2, r3, r4
 800557e:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8005582:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005586:	1acb      	subs	r3, r1, r3
 8005588:	fb92 f3f3 	sdiv	r3, r2, r3
 800558c:	eba8 0203 	sub.w	r2, r8, r3
 8005590:	4b5b      	ldr	r3, [pc, #364]	; (8005700 <baroMain+0x4c0>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	4619      	mov	r1, r3
 8005596:	2300      	movs	r3, #0
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	230e      	movs	r3, #14
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	2301      	movs	r3, #1
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	460b      	mov	r3, r1
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7fe fae3 	bl	8003b72 <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80055ac:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <baroMain+0x4b4>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	4b52      	ldr	r3, [pc, #328]	; (80056fc <baroMain+0x4bc>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	4b52      	ldr	r3, [pc, #328]	; (8005704 <baroMain+0x4c4>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	2302      	movs	r3, #2
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2301      	movs	r3, #1
 80055c4:	f7fd fd94 	bl	80030f0 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80055c8:	4b4a      	ldr	r3, [pc, #296]	; (80056f4 <baroMain+0x4b4>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <baroMain+0x4bc>)
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <baroMain+0x4c0>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	2302      	movs	r3, #2
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	2301      	movs	r3, #1
 80055e0:	f7fd fd86 	bl	80030f0 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 80055e4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80055ee:	4b43      	ldr	r3, [pc, #268]	; (80056fc <baroMain+0x4bc>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80055f6:	429a      	cmp	r2, r3
 80055f8:	f4ff af60 	bcc.w	80054bc <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 80055fc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800560c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005610:	ee16 0a90 	vmov	r0, s13
 8005614:	f7fa ffb8 	bl	8000588 <__aeabi_f2d>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	1d38      	adds	r0, r7, #4
 800561e:	493b      	ldr	r1, [pc, #236]	; (800570c <baroMain+0x4cc>)
 8005620:	f00e fa32 	bl	8013a88 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8005624:	4b37      	ldr	r3, [pc, #220]	; (8005704 <baroMain+0x4c4>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	3b06      	subs	r3, #6
 800562a:	b2d9      	uxtb	r1, r3
 800562c:	1d3a      	adds	r2, r7, #4
 800562e:	4b38      	ldr	r3, [pc, #224]	; (8005710 <baroMain+0x4d0>)
 8005630:	2000      	movs	r0, #0
 8005632:	f7fd fc67 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8005636:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005646:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800564a:	ee16 0a90 	vmov	r0, s13
 800564e:	f7fa ff9b 	bl	8000588 <__aeabi_f2d>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	1d38      	adds	r0, r7, #4
 8005658:	492c      	ldr	r1, [pc, #176]	; (800570c <baroMain+0x4cc>)
 800565a:	f00e fa15 	bl	8013a88 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <baroMain+0x4c0>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	3b06      	subs	r3, #6
 8005664:	b2d9      	uxtb	r1, r3
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	4b29      	ldr	r3, [pc, #164]	; (8005710 <baroMain+0x4d0>)
 800566a:	2000      	movs	r0, #0
 800566c:	f7fd fc4a 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8005670:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005680:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005684:	ee16 0a90 	vmov	r0, s13
 8005688:	f7fa ff7e 	bl	8000588 <__aeabi_f2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	1d38      	adds	r0, r7, #4
 8005692:	491e      	ldr	r1, [pc, #120]	; (800570c <baroMain+0x4cc>)
 8005694:	f00e f9f8 	bl	8013a88 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 8005698:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <baroMain+0x4c4>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	3b06      	subs	r3, #6
 800569e:	b2d9      	uxtb	r1, r3
 80056a0:	1d3a      	adds	r2, r7, #4
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <baroMain+0x4d0>)
 80056a4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80056a8:	f7fd fc2c 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 80056ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80056bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056c0:	ee16 0a90 	vmov	r0, s13
 80056c4:	f7fa ff60 	bl	8000588 <__aeabi_f2d>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	1d38      	adds	r0, r7, #4
 80056ce:	490f      	ldr	r1, [pc, #60]	; (800570c <baroMain+0x4cc>)
 80056d0:	f00e f9da 	bl	8013a88 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <baroMain+0x4c0>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	3b06      	subs	r3, #6
 80056da:	b2d9      	uxtb	r1, r3
 80056dc:	1d3a      	adds	r2, r7, #4
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <baroMain+0x4d0>)
 80056e0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80056e4:	f7fd fc0e 	bl	8002f04 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 80056e8:	bf00      	nop
 80056ea:	37b8      	adds	r7, #184	; 0xb8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f2:	bf00      	nop
 80056f4:	200001e2 	.word	0x200001e2
 80056f8:	20005808 	.word	0x20005808
 80056fc:	200001e4 	.word	0x200001e4
 8005700:	200001e6 	.word	0x200001e6
 8005704:	200001e7 	.word	0x200001e7
 8005708:	2000581c 	.word	0x2000581c
 800570c:	0801b0a8 	.word	0x0801b0a8
 8005710:	0802580c 	.word	0x0802580c

08005714 <changeBaroMode>:

void changeBaroMode(void){
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <changeBaroMode+0x34>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <changeBaroMode+0x38>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <changeBaroMode+0x3c>)
 8005726:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <changeBaroMode+0x34>)
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 800572e:	e006      	b.n	800573e <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <changeBaroMode+0x38>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a07      	ldr	r2, [pc, #28]	; (8005754 <changeBaroMode+0x40>)
 8005736:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <changeBaroMode+0x34>)
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20005d4c 	.word	0x20005d4c
 800574c:	20002650 	.word	0x20002650
 8005750:	20000000 	.word	0x20000000
 8005754:	20000004 	.word	0x20000004

08005758 <addBaro>:
void addBaro(void){
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <addBaro+0x40>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <addBaro+0x22>
			fixedAltitude += 1;
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <addBaro+0x44>)
 8005766:	edd3 7a00 	vldr	s15, [r3]
 800576a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <addBaro+0x44>)
 8005774:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8005778:	e009      	b.n	800578e <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <addBaro+0x48>)
 800577c:	edd3 7a00 	vldr	s15, [r3]
 8005780:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <addBaro+0x48>)
 800578a:	edc3 7a00 	vstr	s15, [r3]
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20005d4c 	.word	0x20005d4c
 800579c:	20000004 	.word	0x20000004
 80057a0:	20000000 	.word	0x20000000

080057a4 <remBaro>:
void remBaro(void){
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <remBaro+0x40>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <remBaro+0x22>
			fixedAltitude -= 1;
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <remBaro+0x44>)
 80057b2:	edd3 7a00 	vldr	s15, [r3]
 80057b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <remBaro+0x44>)
 80057c0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 80057c4:	e009      	b.n	80057da <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <remBaro+0x48>)
 80057c8:	edd3 7a00 	vldr	s15, [r3]
 80057cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80057d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <remBaro+0x48>)
 80057d6:	edc3 7a00 	vstr	s15, [r3]
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20005d4c 	.word	0x20005d4c
 80057e8:	20000004 	.word	0x20000004
 80057ec:	20000000 	.word	0x20000000

080057f0 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 80057f8:	4a04      	ldr	r2, [pc, #16]	; (800580c <setupCntxMenu+0x1c>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6013      	str	r3, [r2, #0]
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20005d50 	.word	0x20005d50

08005810 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8005814:	f000 f87e 	bl	8005914 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <cntxSelect+0x1c>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <cntxSelect+0x20>)
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	4798      	blx	r3
}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20005d4e 	.word	0x20005d4e
 8005830:	20000240 	.word	0x20000240

08005834 <nextItem>:

void nextItem(void){
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <nextItem+0x34>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <nextItem+0x38>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	429a      	cmp	r2, r3
 8005846:	da06      	bge.n	8005856 <nextItem+0x22>
		cntxPosition++;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <nextItem+0x34>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <nextItem+0x34>)
 8005852:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8005854:	e002      	b.n	800585c <nextItem+0x28>
		cntxPosition = 0;
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <nextItem+0x34>)
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20005d4e 	.word	0x20005d4e
 800586c:	200001e8 	.word	0x200001e8

08005870 <prevItem>:
void prevItem(void){
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <prevItem+0x30>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <prevItem+0x1a>
		cntxPosition--;
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <prevItem+0x30>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	3b01      	subs	r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <prevItem+0x30>)
 8005886:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8005888:	e005      	b.n	8005896 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <prevItem+0x34>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	b2da      	uxtb	r2, r3
 8005892:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <prevItem+0x30>)
 8005894:	701a      	strb	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20005d4e 	.word	0x20005d4e
 80058a4:	200001e8 	.word	0x200001e8

080058a8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <setDefaultClbcks+0x34>)
 80058ae:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <setDefaultClbcks+0x38>)
 80058b0:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <setDefaultClbcks+0x3c>)
 80058b4:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <setDefaultClbcks+0x40>)
 80058b6:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <setDefaultClbcks+0x3c>)
 80058ba:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <setDefaultClbcks+0x40>)
 80058bc:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <setDefaultClbcks+0x44>)
 80058c0:	4a0b      	ldr	r2, [pc, #44]	; (80058f0 <setDefaultClbcks+0x48>)
 80058c2:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <setDefaultClbcks+0x4c>)
 80058c6:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <setDefaultClbcks+0x50>)
 80058c8:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <setDefaultClbcks+0x4c>)
 80058cc:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <setDefaultClbcks+0x50>)
 80058ce:	61da      	str	r2, [r3, #28]
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20002714 	.word	0x20002714
 80058e0:	08005915 	.word	0x08005915
 80058e4:	200026a8 	.word	0x200026a8
 80058e8:	08005871 	.word	0x08005871
 80058ec:	20002684 	.word	0x20002684
 80058f0:	08005811 	.word	0x08005811
 80058f4:	20002660 	.word	0x20002660
 80058f8:	08005835 	.word	0x08005835

080058fc <showCntxMenu>:

void showCntxMenu(void){
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8005900:	f7ff ffd2 	bl	80058a8 <setDefaultClbcks>
	isCntxOpen = 1;
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <showCntxMenu+0x14>)
 8005906:	2201      	movs	r2, #1
 8005908:	701a      	strb	r2, [r3, #0]
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20005d4d 	.word	0x20005d4d

08005914 <hideCntxMenu>:
void hideCntxMenu(void){
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8005918:	f7fc fad4 	bl	8001ec4 <resetButtonHandlers>
	(*prevClbcks)();
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <hideCntxMenu+0x18>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4798      	blx	r3
	isCntxOpen = 0;
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <hideCntxMenu+0x1c>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20005d50 	.word	0x20005d50
 8005930:	20005d4d 	.word	0x20005d4d

08005934 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 800593a:	4b35      	ldr	r3, [pc, #212]	; (8005a10 <enableCntxMenu+0xdc>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d062      	beq.n	8005a08 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8005942:	230e      	movs	r3, #14
 8005944:	461a      	mov	r2, r3
 8005946:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <enableCntxMenu+0xe0>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	fb02 f303 	mul.w	r3, r2, r3
 800594e:	330a      	adds	r3, #10
 8005950:	2200      	movs	r2, #0
 8005952:	9200      	str	r2, [sp, #0]
 8005954:	2205      	movs	r2, #5
 8005956:	21c8      	movs	r1, #200	; 0xc8
 8005958:	2000      	movs	r0, #0
 800595a:	f7fe f8e5 	bl	8003b28 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 800595e:	2301      	movs	r3, #1
 8005960:	2206      	movs	r2, #6
 8005962:	21c8      	movs	r1, #200	; 0xc8
 8005964:	2000      	movs	r0, #0
 8005966:	f7fd ff89 	bl	800387c <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 800596a:	230e      	movs	r3, #14
 800596c:	461a      	mov	r2, r3
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <enableCntxMenu+0xe0>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	f103 020a 	add.w	r2, r3, #10
 800597a:	2301      	movs	r3, #1
 800597c:	21c8      	movs	r1, #200	; 0xc8
 800597e:	2000      	movs	r0, #0
 8005980:	f7fd ff7c 	bl	800387c <lcdHLine>
//		create list
		char item[30] = {0};
 8005984:	2300      	movs	r3, #0
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	609a      	str	r2, [r3, #8]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	615a      	str	r2, [r3, #20]
 8005998:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 800599a:	2300      	movs	r3, #0
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e018      	b.n	80059d2 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80059a0:	7ffb      	ldrb	r3, [r7, #31]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <enableCntxMenu+0xe4>)
 80059a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a8:	461a      	mov	r2, r3
 80059aa:	463b      	mov	r3, r7
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f00e f86a 	bl	8013a88 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 80059b4:	220e      	movs	r2, #14
 80059b6:	7ffb      	ldrb	r3, [r7, #31]
 80059b8:	fb13 f302 	smulbb	r3, r3, r2
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	330a      	adds	r3, #10
 80059c0:	b2d9      	uxtb	r1, r3
 80059c2:	463a      	mov	r2, r7
 80059c4:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <enableCntxMenu+0xe8>)
 80059c6:	2005      	movs	r0, #5
 80059c8:	f7fd fa9c 	bl	8002f04 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
 80059ce:	3301      	adds	r3, #1
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <enableCntxMenu+0xe0>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	7ffa      	ldrb	r2, [r7, #31]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3e1      	bcc.n	80059a0 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 80059dc:	230e      	movs	r3, #14
 80059de:	461a      	mov	r2, r3
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <enableCntxMenu+0xec>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	f103 0208 	add.w	r2, r3, #8
 80059ec:	230e      	movs	r3, #14
 80059ee:	4619      	mov	r1, r3
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <enableCntxMenu+0xec>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	3308      	adds	r3, #8
 80059fc:	2102      	movs	r1, #2
 80059fe:	9100      	str	r1, [sp, #0]
 8005a00:	21c8      	movs	r1, #200	; 0xc8
 8005a02:	2000      	movs	r0, #0
 8005a04:	f7fe f890 	bl	8003b28 <lcdRect>

	}
}
 8005a08:	bf00      	nop
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20005d4d 	.word	0x20005d4d
 8005a14:	200001e8 	.word	0x200001e8
 8005a18:	20000240 	.word	0x20000240
 8005a1c:	08026710 	.word	0x08026710
 8005a20:	20005d4e 	.word	0x20005d4e

08005a24 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
	pageNum++;
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <nextPg+0x1c>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <nextPg+0x1c>)
 8005a32:	701a      	strb	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20005d54 	.word	0x20005d54

08005a44 <prevPg>:
void prevPg(void){
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	pageNum--;
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <prevPg+0x1c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <prevPg+0x1c>)
 8005a52:	701a      	strb	r2, [r3, #0]
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20005d54 	.word	0x20005d54

08005a64 <syncTime>:
void syncTime(void){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	if(location.isValid){
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <syncTime+0x5c>)
 8005a6a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <syncTime+0x5c>)
 8005a74:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8005a78:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <syncTime+0x60>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <syncTime+0x64>)
 8005a84:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <syncTime+0x5c>)
 8005a88:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <syncTime+0x64>)
 8005a8e:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <syncTime+0x5c>)
 8005a92:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <syncTime+0x64>)
 8005a98:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <syncTime+0x64>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005aa0:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <syncTime+0x64>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4907      	ldr	r1, [pc, #28]	; (8005ac8 <syncTime+0x64>)
 8005aaa:	4808      	ldr	r0, [pc, #32]	; (8005acc <syncTime+0x68>)
 8005aac:	f005 fd2a 	bl	800b504 <HAL_RTC_SetTime>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <syncTime+0x56>
		{
		Error_Handler();
 8005ab6:	f7fe fabb 	bl	8004030 <Error_Handler>
		}
	}
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20005678 	.word	0x20005678
 8005ac4:	200001a0 	.word	0x200001a0
 8005ac8:	200057f0 	.word	0x200057f0
 8005acc:	20005a90 	.word	0x20005a90

08005ad0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <setDefaultClbcks+0x2c>)
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <setDefaultClbcks+0x30>)
 8005ad8:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <setDefaultClbcks+0x34>)
 8005adc:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <setDefaultClbcks+0x38>)
 8005ade:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <setDefaultClbcks+0x3c>)
 8005ae2:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <setDefaultClbcks+0x40>)
 8005ae4:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <setDefaultClbcks+0x44>)
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <setDefaultClbcks+0x48>)
 8005aea:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <setDefaultClbcks+0x4c>)
 8005aee:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <setDefaultClbcks+0x50>)
 8005af0:	611a      	str	r2, [r3, #16]
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	20002660 	.word	0x20002660
 8005b00:	08002a69 	.word	0x08002a69
 8005b04:	200026a8 	.word	0x200026a8
 8005b08:	08002a79 	.word	0x08002a79
 8005b0c:	200026cc 	.word	0x200026cc
 8005b10:	08005a25 	.word	0x08005a25
 8005b14:	20002714 	.word	0x20002714
 8005b18:	08005a45 	.word	0x08005a45
 8005b1c:	200026f0 	.word	0x200026f0
 8005b20:	08005a65 	.word	0x08005a65

08005b24 <gpsSetup>:

void gpsSetup(void){
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005b28:	f7ff ffd2 	bl	8005ad0 <setDefaultClbcks>

}
 8005b2c:	bf00      	nop
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <gpsMain>:

void gpsMain(void){
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8005b36:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8005b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b42:	222f      	movs	r2, #47	; 0x2f
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f00c fe70 	bl	801282c <memset>

	switch(pageNum){
 8005b4c:	4bb2      	ldr	r3, [pc, #712]	; (8005e18 <gpsMain+0x2e8>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <gpsMain+0x2c>
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f000 80e7 	beq.w	8005d28 <gpsMain+0x1f8>
 8005b5a:	e13e      	b.n	8005dda <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 8005b62:	49ae      	ldr	r1, [pc, #696]	; (8005e1c <gpsMain+0x2ec>)
 8005b64:	48ae      	ldr	r0, [pc, #696]	; (8005e20 <gpsMain+0x2f0>)
 8005b66:	f7fc fd01 	bl	800256c <getLocation>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 8005b70:	4baa      	ldr	r3, [pc, #680]	; (8005e1c <gpsMain+0x2ec>)
 8005b72:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8005b76:	4ba9      	ldr	r3, [pc, #676]	; (8005e1c <gpsMain+0x2ec>)
 8005b78:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8095 	beq.w	8005cb0 <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 8005b86:	4ba5      	ldr	r3, [pc, #660]	; (8005e1c <gpsMain+0x2ec>)
 8005b88:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005b92:	49a4      	ldr	r1, [pc, #656]	; (8005e24 <gpsMain+0x2f4>)
 8005b94:	4618      	mov	r0, r3
 8005b96:	f00d ff77 	bl	8013a88 <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 8005b9a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005b9e:	4ba2      	ldr	r3, [pc, #648]	; (8005e28 <gpsMain+0x2f8>)
 8005ba0:	21dc      	movs	r1, #220	; 0xdc
 8005ba2:	20c8      	movs	r0, #200	; 0xc8
 8005ba4:	f7fd f9ae 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8005ba8:	4b9c      	ldr	r3, [pc, #624]	; (8005e1c <gpsMain+0x2ec>)
 8005baa:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b9a      	ldr	r3, [pc, #616]	; (8005e1c <gpsMain+0x2ec>)
 8005bb2:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4b98      	ldr	r3, [pc, #608]	; (8005e1c <gpsMain+0x2ec>)
 8005bba:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005bbe:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4999      	ldr	r1, [pc, #612]	; (8005e2c <gpsMain+0x2fc>)
 8005bc8:	f00d ff5e 	bl	8013a88 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8005bcc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005bd0:	4b97      	ldr	r3, [pc, #604]	; (8005e30 <gpsMain+0x300>)
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fd f995 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005bda:	4b96      	ldr	r3, [pc, #600]	; (8005e34 <gpsMain+0x304>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	4b94      	ldr	r3, [pc, #592]	; (8005e34 <gpsMain+0x304>)
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	4619      	mov	r1, r3
 8005be6:	4b93      	ldr	r3, [pc, #588]	; (8005e34 <gpsMain+0x304>)
 8005be8:	789b      	ldrb	r3, [r3, #2]
 8005bea:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4991      	ldr	r1, [pc, #580]	; (8005e38 <gpsMain+0x308>)
 8005bf4:	f00d ff48 	bl	8013a88 <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 8005bf8:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005bfc:	4b8c      	ldr	r3, [pc, #560]	; (8005e30 <gpsMain+0x300>)
 8005bfe:	2100      	movs	r1, #0
 8005c00:	20dc      	movs	r0, #220	; 0xdc
 8005c02:	f7fd f97f 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 8005c06:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <gpsMain+0x30c>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005c0e:	498c      	ldr	r1, [pc, #560]	; (8005e40 <gpsMain+0x310>)
 8005c10:	4618      	mov	r0, r3
 8005c12:	f00d ff39 	bl	8013a88 <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 8005c16:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005c1a:	4b85      	ldr	r3, [pc, #532]	; (8005e30 <gpsMain+0x300>)
 8005c1c:	2114      	movs	r1, #20
 8005c1e:	20dc      	movs	r0, #220	; 0xdc
 8005c20:	f7fd f970 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 8005c24:	4b7d      	ldr	r3, [pc, #500]	; (8005e1c <gpsMain+0x2ec>)
 8005c26:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4b7b      	ldr	r3, [pc, #492]	; (8005e1c <gpsMain+0x2ec>)
 8005c2e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005c32:	461c      	mov	r4, r3
 8005c34:	4b79      	ldr	r3, [pc, #484]	; (8005e1c <gpsMain+0x2ec>)
 8005c36:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8005c3a:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8005c42:	4623      	mov	r3, r4
 8005c44:	460a      	mov	r2, r1
 8005c46:	497f      	ldr	r1, [pc, #508]	; (8005e44 <gpsMain+0x314>)
 8005c48:	f00d ff1e 	bl	8013a88 <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 8005c4c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005c50:	4b7d      	ldr	r3, [pc, #500]	; (8005e48 <gpsMain+0x318>)
 8005c52:	2132      	movs	r1, #50	; 0x32
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7fd f955 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 8005c5a:	4b70      	ldr	r3, [pc, #448]	; (8005e1c <gpsMain+0x2ec>)
 8005c5c:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8005c60:	4619      	mov	r1, r3
 8005c62:	4b6e      	ldr	r3, [pc, #440]	; (8005e1c <gpsMain+0x2ec>)
 8005c64:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005c68:	461c      	mov	r4, r3
 8005c6a:	4b6c      	ldr	r3, [pc, #432]	; (8005e1c <gpsMain+0x2ec>)
 8005c6c:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005c70:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005c74:	e9cd 2300 	strd	r2, r3, [sp]
 8005c78:	4623      	mov	r3, r4
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	4971      	ldr	r1, [pc, #452]	; (8005e44 <gpsMain+0x314>)
 8005c7e:	f00d ff03 	bl	8013a88 <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 8005c82:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <gpsMain+0x318>)
 8005c88:	216e      	movs	r1, #110	; 0x6e
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f7fd f93a 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 8005c90:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <gpsMain+0x2ec>)
 8005c92:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8005c96:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005c9a:	496c      	ldr	r1, [pc, #432]	; (8005e4c <gpsMain+0x31c>)
 8005c9c:	f00d fef4 	bl	8013a88 <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 8005ca0:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	; (8005e50 <gpsMain+0x320>)
 8005ca6:	21aa      	movs	r1, #170	; 0xaa
 8005ca8:	2014      	movs	r0, #20
 8005caa:	f7fd f92b 	bl	8002f04 <lcdPutStr>
 8005cae:	e029      	b.n	8005d04 <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8005cb0:	4b5a      	ldr	r3, [pc, #360]	; (8005e1c <gpsMain+0x2ec>)
 8005cb2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005cbc:	4965      	ldr	r1, [pc, #404]	; (8005e54 <gpsMain+0x324>)
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f00d fee2 	bl	8013a88 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8005cc4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005cc8:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <gpsMain+0x300>)
 8005cca:	2100      	movs	r1, #0
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7fd f919 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8005cd2:	4b52      	ldr	r3, [pc, #328]	; (8005e1c <gpsMain+0x2ec>)
 8005cd4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b50      	ldr	r3, [pc, #320]	; (8005e1c <gpsMain+0x2ec>)
 8005cdc:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4b4e      	ldr	r3, [pc, #312]	; (8005e1c <gpsMain+0x2ec>)
 8005ce4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005ce8:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4959      	ldr	r1, [pc, #356]	; (8005e58 <gpsMain+0x328>)
 8005cf2:	f00d fec9 	bl	8013a88 <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 8005cf6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005cfa:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <gpsMain+0x300>)
 8005cfc:	211e      	movs	r1, #30
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fd f900 	bl	8002f04 <lcdPutStr>
		}
		if(locUpdated){
 8005d04:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07f      	beq.n	8005e0c <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 8005d0c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005d10:	4952      	ldr	r1, [pc, #328]	; (8005e5c <gpsMain+0x32c>)
 8005d12:	4618      	mov	r0, r3
 8005d14:	f00d feb8 	bl	8013a88 <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 8005d18:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005d1c:	4b42      	ldr	r3, [pc, #264]	; (8005e28 <gpsMain+0x2f8>)
 8005d1e:	21dc      	movs	r1, #220	; 0xdc
 8005d20:	2000      	movs	r0, #0
 8005d22:	f7fd f8ef 	bl	8002f04 <lcdPutStr>
		}
		break;
 8005d26:	e071      	b.n	8005e0c <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 8005d28:	493c      	ldr	r1, [pc, #240]	; (8005e1c <gpsMain+0x2ec>)
 8005d2a:	483d      	ldr	r0, [pc, #244]	; (8005e20 <gpsMain+0x2f0>)
 8005d2c:	f7fc fc1e 	bl	800256c <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <gpsMain+0x2f8>)
 8005d32:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <gpsMain+0x2ec>)
 8005d34:	2119      	movs	r1, #25
 8005d36:	2000      	movs	r0, #0
 8005d38:	f7fd f8e4 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 8005d3c:	4b3a      	ldr	r3, [pc, #232]	; (8005e28 <gpsMain+0x2f8>)
 8005d3e:	4a48      	ldr	r2, [pc, #288]	; (8005e60 <gpsMain+0x330>)
 8005d40:	2128      	movs	r1, #40	; 0x28
 8005d42:	2000      	movs	r0, #0
 8005d44:	f7fd f8de 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 8005d48:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <gpsMain+0x2f8>)
 8005d4a:	4a46      	ldr	r2, [pc, #280]	; (8005e64 <gpsMain+0x334>)
 8005d4c:	2137      	movs	r1, #55	; 0x37
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7fd f8d8 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <gpsMain+0x2f8>)
 8005d56:	4a44      	ldr	r2, [pc, #272]	; (8005e68 <gpsMain+0x338>)
 8005d58:	2146      	movs	r1, #70	; 0x46
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7fd f8d2 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <gpsMain+0x2f8>)
 8005d62:	4a42      	ldr	r2, [pc, #264]	; (8005e6c <gpsMain+0x33c>)
 8005d64:	2155      	movs	r1, #85	; 0x55
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fd f8cc 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <gpsMain+0x2f8>)
 8005d6e:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <gpsMain+0x340>)
 8005d70:	2164      	movs	r1, #100	; 0x64
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7fd f8c6 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <gpsMain+0x2f8>)
 8005d7a:	4a3e      	ldr	r2, [pc, #248]	; (8005e74 <gpsMain+0x344>)
 8005d7c:	2119      	movs	r1, #25
 8005d7e:	2064      	movs	r0, #100	; 0x64
 8005d80:	f7fd f8c0 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <gpsMain+0x2f8>)
 8005d86:	4a3c      	ldr	r2, [pc, #240]	; (8005e78 <gpsMain+0x348>)
 8005d88:	2128      	movs	r1, #40	; 0x28
 8005d8a:	2064      	movs	r0, #100	; 0x64
 8005d8c:	f7fd f8ba 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <gpsMain+0x2f8>)
 8005d92:	4a3a      	ldr	r2, [pc, #232]	; (8005e7c <gpsMain+0x34c>)
 8005d94:	2137      	movs	r1, #55	; 0x37
 8005d96:	2064      	movs	r0, #100	; 0x64
 8005d98:	f7fd f8b4 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 8005d9c:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <gpsMain+0x2f8>)
 8005d9e:	4a38      	ldr	r2, [pc, #224]	; (8005e80 <gpsMain+0x350>)
 8005da0:	2146      	movs	r1, #70	; 0x46
 8005da2:	2064      	movs	r0, #100	; 0x64
 8005da4:	f7fd f8ae 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <gpsMain+0x2f8>)
 8005daa:	4a36      	ldr	r2, [pc, #216]	; (8005e84 <gpsMain+0x354>)
 8005dac:	2155      	movs	r1, #85	; 0x55
 8005dae:	2064      	movs	r0, #100	; 0x64
 8005db0:	f7fd f8a8 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 8005db4:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <gpsMain+0x2f8>)
 8005db6:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <gpsMain+0x358>)
 8005db8:	2164      	movs	r1, #100	; 0x64
 8005dba:	2064      	movs	r0, #100	; 0x64
 8005dbc:	f7fd f8a2 	bl	8002f04 <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8005dc0:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <gpsMain+0x2f8>)
 8005dc2:	4a32      	ldr	r2, [pc, #200]	; (8005e8c <gpsMain+0x35c>)
 8005dc4:	2119      	movs	r1, #25
 8005dc6:	20c8      	movs	r0, #200	; 0xc8
 8005dc8:	f7fd f89c 	bl	8002f04 <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <gpsMain+0x2f8>)
 8005dce:	4a30      	ldr	r2, [pc, #192]	; (8005e90 <gpsMain+0x360>)
 8005dd0:	2128      	movs	r1, #40	; 0x28
 8005dd2:	20c8      	movs	r0, #200	; 0xc8
 8005dd4:	f7fd f896 	bl	8002f04 <lcdPutStr>
		break;
 8005dd8:	e019      	b.n	8005e0e <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 8005dda:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005dde:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	3304      	adds	r3, #4
 8005de8:	f240 2255 	movw	r2, #597	; 0x255
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f00c fd1c 	bl	801282c <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 8005df4:	463b      	mov	r3, r7
 8005df6:	4927      	ldr	r1, [pc, #156]	; (8005e94 <gpsMain+0x364>)
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f00d fed6 	bl	8013baa <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 8005dfe:	463a      	mov	r2, r7
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <gpsMain+0x2f8>)
 8005e02:	2100      	movs	r1, #0
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7fd f8ab 	bl	8002f60 <lcdPutStrML>
		break;
 8005e0a:	e000      	b.n	8005e0e <gpsMain+0x2de>
		break;
 8005e0c:	bf00      	nop





}
 8005e0e:	bf00      	nop
 8005e10:	f507 7725 	add.w	r7, r7, #660	; 0x294
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}
 8005e18:	20005d54 	.word	0x20005d54
 8005e1c:	20005678 	.word	0x20005678
 8005e20:	2000582c 	.word	0x2000582c
 8005e24:	0801b168 	.word	0x0801b168
 8005e28:	08027198 	.word	0x08027198
 8005e2c:	0801b180 	.word	0x0801b180
 8005e30:	08027614 	.word	0x08027614
 8005e34:	200057f0 	.word	0x200057f0
 8005e38:	0801b194 	.word	0x0801b194
 8005e3c:	200001a0 	.word	0x200001a0
 8005e40:	0801b1a8 	.word	0x0801b1a8
 8005e44:	0801b1b0 	.word	0x0801b1b0
 8005e48:	0802aa44 	.word	0x0802aa44
 8005e4c:	0801b1bc 	.word	0x0801b1bc
 8005e50:	08028bdc 	.word	0x08028bdc
 8005e54:	0801b1c8 	.word	0x0801b1c8
 8005e58:	0801b1e0 	.word	0x0801b1e0
 8005e5c:	0801b1fc 	.word	0x0801b1fc
 8005e60:	200056ce 	.word	0x200056ce
 8005e64:	200056dd 	.word	0x200056dd
 8005e68:	200056ec 	.word	0x200056ec
 8005e6c:	200056fb 	.word	0x200056fb
 8005e70:	2000570a 	.word	0x2000570a
 8005e74:	20005719 	.word	0x20005719
 8005e78:	20005728 	.word	0x20005728
 8005e7c:	20005737 	.word	0x20005737
 8005e80:	20005746 	.word	0x20005746
 8005e84:	20005755 	.word	0x20005755
 8005e88:	20005764 	.word	0x20005764
 8005e8c:	20005773 	.word	0x20005773
 8005e90:	20005782 	.word	0x20005782
 8005e94:	20005830 	.word	0x20005830

08005e98 <switchLocalView>:
void remDay(){
	testTime.tm_mday--;
	mktime(&testTime);

}
void switchLocalView(void){
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
	if(localModuleNum<=3){
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <switchLocalView+0x2c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d806      	bhi.n	8005eb2 <switchLocalView+0x1a>
		localModuleNum++;
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <switchLocalView+0x2c>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <switchLocalView+0x2c>)
 8005eae:	701a      	strb	r2, [r3, #0]
	} else {
		localModuleNum = 0;
	}
}
 8005eb0:	e002      	b.n	8005eb8 <switchLocalView+0x20>
		localModuleNum = 0;
 8005eb2:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <switchLocalView+0x2c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20005d7c 	.word	0x20005d7c

08005ec8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <setDefaultClbcks+0x20>)
 8005ece:	4a07      	ldr	r2, [pc, #28]	; (8005eec <setDefaultClbcks+0x24>)
 8005ed0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <setDefaultClbcks+0x28>)
 8005ed4:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <setDefaultClbcks+0x2c>)
 8005ed6:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &switchLocalView;
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <setDefaultClbcks+0x30>)
 8005eda:	4a08      	ldr	r2, [pc, #32]	; (8005efc <setDefaultClbcks+0x34>)
 8005edc:	611a      	str	r2, [r3, #16]
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20002660 	.word	0x20002660
 8005eec:	08002a69 	.word	0x08002a69
 8005ef0:	200026a8 	.word	0x200026a8
 8005ef4:	08002a79 	.word	0x08002a79
 8005ef8:	20002684 	.word	0x20002684
 8005efc:	08005e99 	.word	0x08005e99

08005f00 <localSetup>:
void localSetup(void){
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005f04:	f7ff ffe0 	bl	8005ec8 <setDefaultClbcks>
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <fractionalYear>:
	int8_t timezone;	// [h] east+ west-
	double longitude; 	// [deg]
	double latitude;	// [deg]
};
// fractional year = gamma [rad]
float fractionalYear(struct tm *timeStr, struct local_location *location){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
	int dayOfTheYear = testTime.tm_yday+1;
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <fractionalYear+0x68>)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
	return (2*M_PI/365)*(dayOfTheYear-1+(timeStr->tm_hour-location->timezone-12)/24);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	f991 1000 	ldrsb.w	r1, [r1]
 8005f30:	1a5b      	subs	r3, r3, r1
 8005f32:	3b0c      	subs	r3, #12
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <fractionalYear+0x6c>)
 8005f36:	fb81 0103 	smull	r0, r1, r1, r3
 8005f3a:	1089      	asrs	r1, r1, #2
 8005f3c:	17db      	asrs	r3, r3, #31
 8005f3e:	1acb      	subs	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fa fb0e 	bl	8000564 <__aeabi_i2d>
 8005f48:	a309      	add	r3, pc, #36	; (adr r3, 8005f70 <fractionalYear+0x60>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb73 	bl	8000638 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7fa fe65 	bl	8000c28 <__aeabi_d2f>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	ee07 3a90 	vmov	s15, r3
}
 8005f64:	eeb0 0a67 	vmov.f32	s0, s15
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	d4b3ac9a 	.word	0xd4b3ac9a
 8005f74:	3f91a099 	.word	0x3f91a099
 8005f78:	20005d58 	.word	0x20005d58
 8005f7c:	2aaaaaab 	.word	0x2aaaaaab

08005f80 <equationOfTime>:
// equation of time [min]
float equationOfTime(float fyear){
 8005f80:	b5b0      	push	{r4, r5, r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	ed87 0a01 	vstr	s0, [r7, #4]
	return 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fa fafc 	bl	8000588 <__aeabi_f2d>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	ec43 2b10 	vmov	d0, r2, r3
 8005f98:	f012 f876 	bl	8018088 <cos>
 8005f9c:	ec51 0b10 	vmov	r0, r1, d0
 8005fa0:	a33f      	add	r3, pc, #252	; (adr r3, 80060a0 <equationOfTime+0x120>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f7fa fb47 	bl	8000638 <__aeabi_dmul>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	a33d      	add	r3, pc, #244	; (adr r3, 80060a8 <equationOfTime+0x128>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa f988 	bl	80002cc <__adddf3>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fa fadf 	bl	8000588 <__aeabi_f2d>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	ec43 2b10 	vmov	d0, r2, r3
 8005fd2:	f012 f8ad 	bl	8018130 <sin>
 8005fd6:	ec51 0b10 	vmov	r0, r1, d0
 8005fda:	a335      	add	r3, pc, #212	; (adr r3, 80060b0 <equationOfTime+0x130>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fb2a 	bl	8000638 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f96c 	bl	80002c8 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ffc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006000:	ee17 0a90 	vmov	r0, s15
 8006004:	f7fa fac0 	bl	8000588 <__aeabi_f2d>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	ec43 2b10 	vmov	d0, r2, r3
 8006010:	f012 f83a 	bl	8018088 <cos>
 8006014:	ec51 0b10 	vmov	r0, r1, d0
 8006018:	a327      	add	r3, pc, #156	; (adr r3, 80060b8 <equationOfTime+0x138>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa fb0b 	bl	8000638 <__aeabi_dmul>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa f94d 	bl	80002c8 <__aeabi_dsub>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4614      	mov	r4, r2
 8006034:	461d      	mov	r5, r3
 8006036:	edd7 7a01 	vldr	s15, [r7, #4]
 800603a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800603e:	ee17 0a90 	vmov	r0, s15
 8006042:	f7fa faa1 	bl	8000588 <__aeabi_f2d>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	ec43 2b10 	vmov	d0, r2, r3
 800604e:	f012 f86f 	bl	8018130 <sin>
 8006052:	ec51 0b10 	vmov	r0, r1, d0
 8006056:	a31a      	add	r3, pc, #104	; (adr r3, 80060c0 <equationOfTime+0x140>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa faec 	bl	8000638 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	f7fa f92e 	bl	80002c8 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	a314      	add	r3, pc, #80	; (adr r3, 80060c8 <equationOfTime+0x148>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa fadd 	bl	8000638 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f7fa fdcf 	bl	8000c28 <__aeabi_d2f>
 800608a:	4603      	mov	r3, r0
 800608c:	ee07 3a90 	vmov	s15, r3
}
 8006090:	eeb0 0a67 	vmov.f32	s0, s15
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bdb0      	pop	{r4, r5, r7, pc}
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w
 80060a0:	ba2be059 	.word	0xba2be059
 80060a4:	3f5e9af5 	.word	0x3f5e9af5
 80060a8:	30553261 	.word	0x30553261
 80060ac:	3f13a92a 	.word	0x3f13a92a
 80060b0:	83e8576d 	.word	0x83e8576d
 80060b4:	3fa06c65 	.word	0x3fa06c65
 80060b8:	183f91e6 	.word	0x183f91e6
 80060bc:	3f8dee78 	.word	0x3f8dee78
 80060c0:	fe260b2d 	.word	0xfe260b2d
 80060c4:	3fa4ea28 	.word	0x3fa4ea28
 80060c8:	8f5c28f6 	.word	0x8f5c28f6
 80060cc:	406ca5c2 	.word	0x406ca5c2

080060d0 <solarDeclination>:
// solar declination angle [rad]
float solarDeclination(float fyear){
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	ed87 0a01 	vstr	s0, [r7, #4]
	return 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fa fa54 	bl	8000588 <__aeabi_f2d>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	ec43 2b10 	vmov	d0, r2, r3
 80060e8:	f011 ffce 	bl	8018088 <cos>
 80060ec:	ec51 0b10 	vmov	r0, r1, d0
 80060f0:	a359      	add	r3, pc, #356	; (adr r3, 8006258 <solarDeclination+0x188>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fa9f 	bl	8000638 <__aeabi_dmul>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	a158      	add	r1, pc, #352	; (adr r1, 8006260 <solarDeclination+0x190>)
 8006100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006104:	f7fa f8e0 	bl	80002c8 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4614      	mov	r4, r2
 800610e:	461d      	mov	r5, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fa fa39 	bl	8000588 <__aeabi_f2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	ec43 2b10 	vmov	d0, r2, r3
 800611e:	f012 f807 	bl	8018130 <sin>
 8006122:	ec51 0b10 	vmov	r0, r1, d0
 8006126:	a350      	add	r3, pc, #320	; (adr r3, 8006268 <solarDeclination+0x198>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa fa84 	bl	8000638 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f8c8 	bl	80002cc <__adddf3>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4614      	mov	r4, r2
 8006142:	461d      	mov	r5, r3
 8006144:	edd7 7a01 	vldr	s15, [r7, #4]
 8006148:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800614c:	ee17 0a90 	vmov	r0, s15
 8006150:	f7fa fa1a 	bl	8000588 <__aeabi_f2d>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	ec43 2b10 	vmov	d0, r2, r3
 800615c:	f011 ff94 	bl	8018088 <cos>
 8006160:	ec51 0b10 	vmov	r0, r1, d0
 8006164:	a342      	add	r3, pc, #264	; (adr r3, 8006270 <solarDeclination+0x1a0>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa fa65 	bl	8000638 <__aeabi_dmul>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa f8a7 	bl	80002c8 <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	edd7 7a01 	vldr	s15, [r7, #4]
 8006186:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800618a:	ee17 0a90 	vmov	r0, s15
 800618e:	f7fa f9fb 	bl	8000588 <__aeabi_f2d>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	ec43 2b10 	vmov	d0, r2, r3
 800619a:	f011 ffc9 	bl	8018130 <sin>
 800619e:	ec51 0b10 	vmov	r0, r1, d0
 80061a2:	a335      	add	r3, pc, #212	; (adr r3, 8006278 <solarDeclination+0x1a8>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fa46 	bl	8000638 <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7fa f88a 	bl	80002cc <__adddf3>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80061c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80061c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061cc:	ee17 0a90 	vmov	r0, s15
 80061d0:	f7fa f9da 	bl	8000588 <__aeabi_f2d>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	ec43 2b10 	vmov	d0, r2, r3
 80061dc:	f011 ff54 	bl	8018088 <cos>
 80061e0:	ec51 0b10 	vmov	r0, r1, d0
 80061e4:	a326      	add	r3, pc, #152	; (adr r3, 8006280 <solarDeclination+0x1b0>)
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa fa25 	bl	8000638 <__aeabi_dmul>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4620      	mov	r0, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7fa f867 	bl	80002c8 <__aeabi_dsub>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4614      	mov	r4, r2
 8006200:	461d      	mov	r5, r3
 8006202:	edd7 7a01 	vldr	s15, [r7, #4]
 8006206:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800620a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800620e:	ee17 0a90 	vmov	r0, s15
 8006212:	f7fa f9b9 	bl	8000588 <__aeabi_f2d>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	ec43 2b10 	vmov	d0, r2, r3
 800621e:	f011 ff87 	bl	8018130 <sin>
 8006222:	ec51 0b10 	vmov	r0, r1, d0
 8006226:	a318      	add	r3, pc, #96	; (adr r3, 8006288 <solarDeclination+0x1b8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa fa04 	bl	8000638 <__aeabi_dmul>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa f848 	bl	80002cc <__adddf3>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f7fa fcf0 	bl	8000c28 <__aeabi_d2f>
 8006248:	4603      	mov	r3, r0
 800624a:	ee07 3a90 	vmov	s15, r3
}
 800624e:	eeb0 0a67 	vmov.f32	s0, s15
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bdb0      	pop	{r4, r5, r7, pc}
 8006258:	8051c9f7 	.word	0x8051c9f7
 800625c:	3fd99828 	.word	0x3fd99828
 8006260:	7c0f4517 	.word	0x7c0f4517
 8006264:	3f7c560c 	.word	0x3f7c560c
 8006268:	dd50a88f 	.word	0xdd50a88f
 800626c:	3fb1fc5c 	.word	0x3fb1fc5c
 8006270:	cfc829d0 	.word	0xcfc829d0
 8006274:	3f7bae46 	.word	0x3f7bae46
 8006278:	ab324852 	.word	0xab324852
 800627c:	3f4db877 	.word	0x3f4db877
 8006280:	d9839475 	.word	0xd9839475
 8006284:	3f661804 	.word	0x3f661804
 8006288:	e646f156 	.word	0xe646f156
 800628c:	3f583f91 	.word	0x3f583f91

08006290 <timeOffset>:
// time offset [min]
float timeOffset(struct local_location *location, float fyear){
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	ed87 0a00 	vstr	s0, [r7]
	return equationOfTime(fyear)+4*location->longitude-60*location->timezone;
 800629c:	ed97 0a00 	vldr	s0, [r7]
 80062a0:	f7ff fe6e 	bl	8005f80 <equationOfTime>
 80062a4:	ee10 3a10 	vmov	r3, s0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f96d 	bl	8000588 <__aeabi_f2d>
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	4b15      	ldr	r3, [pc, #84]	; (8006314 <timeOffset+0x84>)
 80062be:	f7fa f9bb 	bl	8000638 <__aeabi_dmul>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	f7f9 ffff 	bl	80002cc <__adddf3>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4614      	mov	r4, r2
 80062d4:	461d      	mov	r5, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f993 3000 	ldrsb.w	r3, [r3]
 80062dc:	461a      	mov	r2, r3
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fa f93c 	bl	8000564 <__aeabi_i2d>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7f9 ffe8 	bl	80002c8 <__aeabi_dsub>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	f7fa fc92 	bl	8000c28 <__aeabi_d2f>
 8006304:	4603      	mov	r3, r0
 8006306:	ee07 3a90 	vmov	s15, r3
}
 800630a:	eeb0 0a67 	vmov.f32	s0, s15
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bdb0      	pop	{r4, r5, r7, pc}
 8006314:	40100000 	.word	0x40100000

08006318 <trueSolarTime>:
// true solar time [min]
float trueSolarTime(struct tm *timeStr, float timeOffset){
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	ed87 0a00 	vstr	s0, [r7]
	return timeStr->tm_hour*60+timeStr->tm_min+(float)timeStr->tm_sec/60+timeOffset;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	4613      	mov	r3, r2
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4413      	add	r3, r2
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800634c:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006370 <trueSolarTime+0x58>
 8006350:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006358:	edd7 7a00 	vldr	s15, [r7]
 800635c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006360:	eeb0 0a67 	vmov.f32	s0, s15
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	42700000 	.word	0x42700000
 8006374:	00000000 	.word	0x00000000

08006378 <solarEventTime>:
//sunrise/sunset/noon times [min]
int solarEventTime(enum SOLAR_EVENT event,struct tm *timeStr, struct local_location *location, float cha){
 8006378:	b5b0      	push	{r4, r5, r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	ed87 0a00 	vstr	s0, [r7]
 8006388:	73fb      	strb	r3, [r7, #15]
	float fyear = fractionalYear(timeStr, location);
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	f7ff fdbf 	bl	8005f10 <fractionalYear>
 8006392:	ed87 0a05 	vstr	s0, [r7, #20]
	float eqTime = equationOfTime(fyear);
 8006396:	ed97 0a05 	vldr	s0, [r7, #20]
 800639a:	f7ff fdf1 	bl	8005f80 <equationOfTime>
 800639e:	ed87 0a04 	vstr	s0, [r7, #16]
	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	switch(event){
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f000 8093 	beq.w	80064d0 <solarEventTime+0x158>
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	f300 80e2 	bgt.w	8006574 <solarEventTime+0x1fc>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <solarEventTime+0x42>
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d052      	beq.n	800645e <solarEventTime+0xe6>
 80063b8:	e0dc      	b.n	8006574 <solarEventTime+0x1fc>
		case SOLAR_SUNRISE:
			return 720-4*(location->longitude+cha*180/M_PI)-eqTime+60*location->timezone;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80063c0:	edd7 7a00 	vldr	s15, [r7]
 80063c4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8006588 <solarEventTime+0x210>
 80063c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063cc:	ee17 0a90 	vmov	r0, s15
 80063d0:	f7fa f8da 	bl	8000588 <__aeabi_f2d>
 80063d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006580 <solarEventTime+0x208>)
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f7fa fa57 	bl	800088c <__aeabi_ddiv>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4620      	mov	r0, r4
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7f9 ff71 	bl	80002cc <__adddf3>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	4b65      	ldr	r3, [pc, #404]	; (800658c <solarEventTime+0x214>)
 80063f8:	f7fa f91e 	bl	8000638 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	f04f 0000 	mov.w	r0, #0
 8006404:	4962      	ldr	r1, [pc, #392]	; (8006590 <solarEventTime+0x218>)
 8006406:	f7f9 ff5f 	bl	80002c8 <__aeabi_dsub>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4614      	mov	r4, r2
 8006410:	461d      	mov	r5, r3
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f7fa f8b8 	bl	8000588 <__aeabi_f2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7f9 ff52 	bl	80002c8 <__aeabi_dsub>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f993 3000 	ldrsb.w	r3, [r3]
 8006432:	461a      	mov	r2, r3
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f7fa f891 	bl	8000564 <__aeabi_i2d>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 ff3f 	bl	80002cc <__adddf3>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f7fa fb9f 	bl	8000b98 <__aeabi_d2iz>
 800645a:	4603      	mov	r3, r0
 800645c:	e08a      	b.n	8006574 <solarEventTime+0x1fc>
		case SOLAR_NOON:
			return 720-4*location->longitude-eqTime+60*location->timezone;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	4b48      	ldr	r3, [pc, #288]	; (800658c <solarEventTime+0x214>)
 800646a:	f7fa f8e5 	bl	8000638 <__aeabi_dmul>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	4946      	ldr	r1, [pc, #280]	; (8006590 <solarEventTime+0x218>)
 8006478:	f7f9 ff26 	bl	80002c8 <__aeabi_dsub>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	6938      	ldr	r0, [r7, #16]
 8006486:	f7fa f87f 	bl	8000588 <__aeabi_f2d>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7f9 ff19 	bl	80002c8 <__aeabi_dsub>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4614      	mov	r4, r2
 800649c:	461d      	mov	r5, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f993 3000 	ldrsb.w	r3, [r3]
 80064a4:	461a      	mov	r2, r3
 80064a6:	4613      	mov	r3, r2
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fa f858 	bl	8000564 <__aeabi_i2d>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7f9 ff06 	bl	80002cc <__adddf3>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f7fa fb66 	bl	8000b98 <__aeabi_d2iz>
 80064cc:	4603      	mov	r3, r0
 80064ce:	e051      	b.n	8006574 <solarEventTime+0x1fc>
		case SOLAR_SUNSET:
			return 720-4*(location->longitude-cha*180/M_PI)-eqTime+60*location->timezone;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80064d6:	edd7 7a00 	vldr	s15, [r7]
 80064da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006588 <solarEventTime+0x210>
 80064de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064e2:	ee17 0a90 	vmov	r0, s15
 80064e6:	f7fa f84f 	bl	8000588 <__aeabi_f2d>
 80064ea:	a325      	add	r3, pc, #148	; (adr r3, 8006580 <solarEventTime+0x208>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7fa f9cc 	bl	800088c <__aeabi_ddiv>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7f9 fee4 	bl	80002c8 <__aeabi_dsub>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4610      	mov	r0, r2
 8006506:	4619      	mov	r1, r3
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <solarEventTime+0x214>)
 800650e:	f7fa f893 	bl	8000638 <__aeabi_dmul>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	f04f 0000 	mov.w	r0, #0
 800651a:	491d      	ldr	r1, [pc, #116]	; (8006590 <solarEventTime+0x218>)
 800651c:	f7f9 fed4 	bl	80002c8 <__aeabi_dsub>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	6938      	ldr	r0, [r7, #16]
 800652a:	f7fa f82d 	bl	8000588 <__aeabi_f2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7f9 fec7 	bl	80002c8 <__aeabi_dsub>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4614      	mov	r4, r2
 8006540:	461d      	mov	r5, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f993 3000 	ldrsb.w	r3, [r3]
 8006548:	461a      	mov	r2, r3
 800654a:	4613      	mov	r3, r2
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4618      	mov	r0, r3
 8006554:	f7fa f806 	bl	8000564 <__aeabi_i2d>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7f9 feb4 	bl	80002cc <__adddf3>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4610      	mov	r0, r2
 800656a:	4619      	mov	r1, r3
 800656c:	f7fa fb14 	bl	8000b98 <__aeabi_d2iz>
 8006570:	4603      	mov	r3, r0
 8006572:	e7ff      	b.n	8006574 <solarEventTime+0x1fc>
	}
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bdb0      	pop	{r4, r5, r7, pc}
 800657c:	f3af 8000 	nop.w
 8006580:	54442d18 	.word	0x54442d18
 8006584:	400921fb 	.word	0x400921fb
 8006588:	43340000 	.word	0x43340000
 800658c:	40100000 	.word	0x40100000
 8006590:	40868000 	.word	0x40868000
 8006594:	00000000 	.word	0x00000000

08006598 <localMain>:
	int sunrise, noon, sunset; //[min]
};



void localMain(void){
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b0c2      	sub	sp, #264	; 0x108
 800659e:	af06      	add	r7, sp, #24
	testTime.tm_hour = RtcTime.Hours;
 80065a0:	4b3e      	ldr	r3, [pc, #248]	; (800669c <localMain+0x104>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <localMain+0x108>)
 80065a8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80065aa:	4b3c      	ldr	r3, [pc, #240]	; (800669c <localMain+0x104>)
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <localMain+0x108>)
 80065b2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80065b4:	4b39      	ldr	r3, [pc, #228]	; (800669c <localMain+0x104>)
 80065b6:	789b      	ldrb	r3, [r3, #2]
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <localMain+0x108>)
 80065bc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80065be:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <localMain+0x10c>)
 80065c0:	789b      	ldrb	r3, [r3, #2]
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <localMain+0x108>)
 80065c6:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <localMain+0x10c>)
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	4a34      	ldr	r2, [pc, #208]	; (80066a0 <localMain+0x108>)
 80065d0:	6113      	str	r3, [r2, #16]
	testTime.tm_year = RtcDate.Year+100;
 80065d2:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <localMain+0x10c>)
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	3364      	adds	r3, #100	; 0x64
 80065d8:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <localMain+0x108>)
 80065da:	6153      	str	r3, [r2, #20]
	mktime(&testTime);
 80065dc:	4830      	ldr	r0, [pc, #192]	; (80066a0 <localMain+0x108>)
 80065de:	f00c fa05 	bl	80129ec <mktime>

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 80065e2:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <localMain+0x110>)
 80065e4:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d061      	beq.n	80066b0 <localMain+0x118>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 80065ec:	4b2e      	ldr	r3, [pc, #184]	; (80066a8 <localMain+0x110>)
 80065ee:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7f9 ffa6 	bl	8000544 <__aeabi_ui2d>
 80065f8:	4604      	mov	r4, r0
 80065fa:	460d      	mov	r5, r1
 80065fc:	4b2a      	ldr	r3, [pc, #168]	; (80066a8 <localMain+0x110>)
 80065fe:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <localMain+0x114>)
 8006608:	f7fa f940 	bl	800088c <__aeabi_ddiv>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4620      	mov	r0, r4
 8006612:	4629      	mov	r1, r5
 8006614:	f7f9 fe5a 	bl	80002cc <__adddf3>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <localMain+0x110>)
 8006622:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006626:	4618      	mov	r0, r3
 8006628:	f7f9 ff8c 	bl	8000544 <__aeabi_ui2d>
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <localMain+0x110>)
 8006632:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <localMain+0x114>)
 800663c:	f7fa f926 	bl	800088c <__aeabi_ddiv>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7f9 fe40 	bl	80002cc <__adddf3>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(location.n_s == 'S') longitude = longitude*(-1);
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <localMain+0x110>)
 8006656:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 800665a:	2b53      	cmp	r3, #83	; 0x53
 800665c:	d10b      	bne.n	8006676 <localMain+0xde>
 800665e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	ed97 7b02 	vldr	d7, [r7, #8]
 8006672:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
		if(location.w_e == 'W') latitude = latitude*(-1);
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <localMain+0x110>)
 8006678:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 800667c:	2b57      	cmp	r3, #87	; 0x57
 800667e:	d13f      	bne.n	8006700 <localMain+0x168>
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	ed97 7b00 	vldr	d7, [r7]
 8006694:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
 8006698:	e032      	b.n	8006700 <localMain+0x168>
 800669a:	bf00      	nop
 800669c:	200057f0 	.word	0x200057f0
 80066a0:	20005d58 	.word	0x20005d58
 80066a4:	20005804 	.word	0x20005804
 80066a8:	20005678 	.word	0x20005678
 80066ac:	404e0000 	.word	0x404e0000
	} else {
		longitude = 17; 	// [deg]
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	4bde      	ldr	r3, [pc, #888]	; (8006a30 <localMain+0x498>)
 80066b6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = 51;	// [deg]
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	4bdd      	ldr	r3, [pc, #884]	; (8006a34 <localMain+0x49c>)
 80066c0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(longitude>=0) location.n_s = 'N';
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80066d0:	f7fa fa38 	bl	8000b44 <__aeabi_dcmpge>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <localMain+0x14a>
 80066da:	4bd7      	ldr	r3, [pc, #860]	; (8006a38 <localMain+0x4a0>)
 80066dc:	224e      	movs	r2, #78	; 0x4e
 80066de:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066ee:	f7fa fa29 	bl	8000b44 <__aeabi_dcmpge>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <localMain+0x168>
 80066f8:	4bcf      	ldr	r3, [pc, #828]	; (8006a38 <localMain+0x4a0>)
 80066fa:	2245      	movs	r2, #69	; 0x45
 80066fc:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	struct local_location myLocation = {GLOBAL_timezone, longitude, latitude};
 8006700:	4bce      	ldr	r3, [pc, #824]	; (8006a3c <localMain+0x4a4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	b25b      	sxtb	r3, r3
 8006706:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800670a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800670e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8006712:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006716:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	// fractional year = gamma [rad]
	float fyear = fractionalYear(&testTime, &myLocation);
 800671a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800671e:	4619      	mov	r1, r3
 8006720:	48c7      	ldr	r0, [pc, #796]	; (8006a40 <localMain+0x4a8>)
 8006722:	f7ff fbf5 	bl	8005f10 <fractionalYear>
 8006726:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 800672a:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800672e:	f7ff fc27 	bl	8005f80 <equationOfTime>
 8006732:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 8006736:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800673a:	f7ff fcc9 	bl	80060d0 <solarDeclination>
 800673e:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc

	float time_off = timeOffset(&myLocation, fyear);
 8006742:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006746:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fda0 	bl	8006290 <timeOffset>
 8006750:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	float tst = trueSolarTime(&testTime, time_off);
 8006754:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8006758:	48b9      	ldr	r0, [pc, #740]	; (8006a40 <localMain+0x4a8>)
 800675a:	f7ff fddd 	bl	8006318 <trueSolarTime>
 800675e:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8006762:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006766:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800676a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800676e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8006a44 <localMain+0x4ac>
 8006772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006776:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 800677a:	a3ab      	add	r3, pc, #684	; (adr r3, 8006a28 <localMain+0x490>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006784:	f7f9 ff58 	bl	8000638 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	4bac      	ldr	r3, [pc, #688]	; (8006a48 <localMain+0x4b0>)
 8006796:	f7fa f879 	bl	800088c <__aeabi_ddiv>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	ec43 2b17 	vmov	d7, r2, r3
 80067a2:	eeb0 0a47 	vmov.f32	s0, s14
 80067a6:	eef0 0a67 	vmov.f32	s1, s15
 80067aa:	f011 fcc1 	bl	8018130 <sin>
 80067ae:	ec55 4b10 	vmov	r4, r5, d0
 80067b2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80067b6:	f7f9 fee7 	bl	8000588 <__aeabi_f2d>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	ec43 2b10 	vmov	d0, r2, r3
 80067c2:	f011 fcb5 	bl	8018130 <sin>
 80067c6:	ec53 2b10 	vmov	r2, r3, d0
 80067ca:	4620      	mov	r0, r4
 80067cc:	4629      	mov	r1, r5
 80067ce:	f7f9 ff33 	bl	8000638 <__aeabi_dmul>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4614      	mov	r4, r2
 80067d8:	461d      	mov	r5, r3
 80067da:	a393      	add	r3, pc, #588	; (adr r3, 8006a28 <localMain+0x490>)
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e4:	f7f9 ff28 	bl	8000638 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	4b94      	ldr	r3, [pc, #592]	; (8006a48 <localMain+0x4b0>)
 80067f6:	f7fa f849 	bl	800088c <__aeabi_ddiv>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	ec43 2b17 	vmov	d7, r2, r3
 8006802:	eeb0 0a47 	vmov.f32	s0, s14
 8006806:	eef0 0a67 	vmov.f32	s1, s15
 800680a:	f011 fc3d 	bl	8018088 <cos>
 800680e:	ec5b ab10 	vmov	sl, fp, d0
 8006812:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006816:	f7f9 feb7 	bl	8000588 <__aeabi_f2d>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	ec43 2b10 	vmov	d0, r2, r3
 8006822:	f011 fc31 	bl	8018088 <cos>
 8006826:	ec53 2b10 	vmov	r2, r3, d0
 800682a:	4650      	mov	r0, sl
 800682c:	4659      	mov	r1, fp
 800682e:	f7f9 ff03 	bl	8000638 <__aeabi_dmul>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4692      	mov	sl, r2
 8006838:	469b      	mov	fp, r3
 800683a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800683e:	f7f9 fea3 	bl	8000588 <__aeabi_f2d>
 8006842:	a379      	add	r3, pc, #484	; (adr r3, 8006a28 <localMain+0x490>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f7f9 fef6 	bl	8000638 <__aeabi_dmul>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	4b7b      	ldr	r3, [pc, #492]	; (8006a48 <localMain+0x4b0>)
 800685a:	f7fa f817 	bl	800088c <__aeabi_ddiv>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	ec43 2b17 	vmov	d7, r2, r3
 8006866:	eeb0 0a47 	vmov.f32	s0, s14
 800686a:	eef0 0a67 	vmov.f32	s1, s15
 800686e:	f011 fc0b 	bl	8018088 <cos>
 8006872:	ec53 2b10 	vmov	r2, r3, d0
 8006876:	4650      	mov	r0, sl
 8006878:	4659      	mov	r1, fp
 800687a:	f7f9 fedd 	bl	8000638 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7f9 fd21 	bl	80002cc <__adddf3>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	f7fa f9c9 	bl	8000c28 <__aeabi_d2f>
 8006896:	4603      	mov	r3, r0
 8006898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float phi = acos(cosphi);
 800689c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80068a0:	f7f9 fe72 	bl	8000588 <__aeabi_f2d>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	ec43 2b10 	vmov	d0, r2, r3
 80068ac:	f011 fccc 	bl	8018248 <acos>
 80068b0:	ec53 2b10 	vmov	r2, r3, d0
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	f7fa f9b6 	bl	8000c28 <__aeabi_d2f>
 80068bc:	4603      	mov	r3, r0
 80068be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float sinphi = sqrt(1-cosphi*cosphi);
 80068c2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80068c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d2:	ee17 0a90 	vmov	r0, s15
 80068d6:	f7f9 fe57 	bl	8000588 <__aeabi_f2d>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	ec43 2b10 	vmov	d0, r2, r3
 80068e2:	f011 fd55 	bl	8018390 <sqrt>
 80068e6:	ec53 2b10 	vmov	r2, r3, d0
 80068ea:	4610      	mov	r0, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	f7fa f99b 	bl	8000c28 <__aeabi_d2f>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 80068f8:	a34b      	add	r3, pc, #300	; (adr r3, 8006a28 <localMain+0x490>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006902:	f7f9 fe99 	bl	8000638 <__aeabi_dmul>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	4b4d      	ldr	r3, [pc, #308]	; (8006a48 <localMain+0x4b0>)
 8006914:	f7f9 ffba 	bl	800088c <__aeabi_ddiv>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	ec43 2b17 	vmov	d7, r2, r3
 8006920:	eeb0 0a47 	vmov.f32	s0, s14
 8006924:	eef0 0a67 	vmov.f32	s1, s15
 8006928:	f011 fc02 	bl	8018130 <sin>
 800692c:	ec55 4b10 	vmov	r4, r5, d0
 8006930:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006934:	f7f9 fe28 	bl	8000588 <__aeabi_f2d>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fe7a 	bl	8000638 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4614      	mov	r4, r2
 800694a:	461d      	mov	r5, r3
 800694c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006950:	f7f9 fe1a 	bl	8000588 <__aeabi_f2d>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	ec43 2b10 	vmov	d0, r2, r3
 800695c:	f011 fbe8 	bl	8018130 <sin>
 8006960:	ec53 2b10 	vmov	r2, r3, d0
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f7f9 fcae 	bl	80002c8 <__aeabi_dsub>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4690      	mov	r8, r2
 8006972:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006976:	a32c      	add	r3, pc, #176	; (adr r3, 8006a28 <localMain+0x490>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006980:	f7f9 fe5a 	bl	8000638 <__aeabi_dmul>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4610      	mov	r0, r2
 800698a:	4619      	mov	r1, r3
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	4b2d      	ldr	r3, [pc, #180]	; (8006a48 <localMain+0x4b0>)
 8006992:	f7f9 ff7b 	bl	800088c <__aeabi_ddiv>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	ec43 2b17 	vmov	d7, r2, r3
 800699e:	eeb0 0a47 	vmov.f32	s0, s14
 80069a2:	eef0 0a67 	vmov.f32	s1, s15
 80069a6:	f011 fb6f 	bl	8018088 <cos>
 80069aa:	ec55 4b10 	vmov	r4, r5, d0
 80069ae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80069b2:	f7f9 fde9 	bl	8000588 <__aeabi_f2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4620      	mov	r0, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	f7f9 fe3b 	bl	8000638 <__aeabi_dmul>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4640      	mov	r0, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	f7f9 ff5f 	bl	800088c <__aeabi_ddiv>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	ec43 2b17 	vmov	d7, r2, r3
 80069d6:	eeb0 0a47 	vmov.f32	s0, s14
 80069da:	eef0 0a67 	vmov.f32	s1, s15
 80069de:	f011 fc33 	bl	8018248 <acos>
 80069e2:	ec53 2b10 	vmov	r2, r3, d0
 80069e6:	4610      	mov	r0, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	f7fa f91d 	bl	8000c28 <__aeabi_d2f>
 80069ee:	4603      	mov	r3, r0
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef1 7a67 	vneg.f32	s15, s15
 80069f8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <localMain+0x4b4>)
 80069fe:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006a02:	461d      	mov	r5, r3
 8006a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8006a10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <localMain+0x4b8>)
 8006a1a:	f7f9 fc57 	bl	80002cc <__adddf3>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	e015      	b.n	8006a54 <localMain+0x4bc>
 8006a28:	54442d18 	.word	0x54442d18
 8006a2c:	400921fb 	.word	0x400921fb
 8006a30:	40310000 	.word	0x40310000
 8006a34:	40498000 	.word	0x40498000
 8006a38:	20005678 	.word	0x20005678
 8006a3c:	200001a0 	.word	0x200001a0
 8006a40:	20005d58 	.word	0x20005d58
 8006a44:	43340000 	.word	0x43340000
 8006a48:	40668000 	.word	0x40668000
 8006a4c:	0801b3b0 	.word	0x0801b3b0
 8006a50:	40568000 	.word	0x40568000
 8006a54:	a388      	add	r3, pc, #544	; (adr r3, 8006c78 <localMain+0x6e0>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fded 	bl	8000638 <__aeabi_dmul>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	4b85      	ldr	r3, [pc, #532]	; (8006c80 <localMain+0x6e8>)
 8006a6c:	f7f9 ff0e 	bl	800088c <__aeabi_ddiv>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8006a78:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8006a7c:	f011 fb04 	bl	8018088 <cos>
 8006a80:	ec55 4b10 	vmov	r4, r5, d0
 8006a84:	a37c      	add	r3, pc, #496	; (adr r3, 8006c78 <localMain+0x6e0>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a8e:	f7f9 fdd3 	bl	8000638 <__aeabi_dmul>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4610      	mov	r0, r2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	4b78      	ldr	r3, [pc, #480]	; (8006c80 <localMain+0x6e8>)
 8006aa0:	f7f9 fef4 	bl	800088c <__aeabi_ddiv>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	ec43 2b17 	vmov	d7, r2, r3
 8006aac:	eeb0 0a47 	vmov.f32	s0, s14
 8006ab0:	eef0 0a67 	vmov.f32	s1, s15
 8006ab4:	f011 fae8 	bl	8018088 <cos>
 8006ab8:	ec59 8b10 	vmov	r8, r9, d0
 8006abc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006ac0:	f7f9 fd62 	bl	8000588 <__aeabi_f2d>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	ec43 2b10 	vmov	d0, r2, r3
 8006acc:	f011 fadc 	bl	8018088 <cos>
 8006ad0:	ec53 2b10 	vmov	r2, r3, d0
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fdae 	bl	8000638 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	f7f9 fed2 	bl	800088c <__aeabi_ddiv>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	a361      	add	r3, pc, #388	; (adr r3, 8006c78 <localMain+0x6e0>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006afa:	f7f9 fd9d 	bl	8000638 <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	4b5d      	ldr	r3, [pc, #372]	; (8006c80 <localMain+0x6e8>)
 8006b0c:	f7f9 febe 	bl	800088c <__aeabi_ddiv>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	ec43 2b17 	vmov	d7, r2, r3
 8006b18:	eeb0 0a47 	vmov.f32	s0, s14
 8006b1c:	eef0 0a67 	vmov.f32	s1, s15
 8006b20:	f011 fb5e 	bl	80181e0 <tan>
 8006b24:	ec59 8b10 	vmov	r8, r9, d0
 8006b28:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006b2c:	f7f9 fd2c 	bl	8000588 <__aeabi_f2d>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	ec43 2b10 	vmov	d0, r2, r3
 8006b38:	f011 fb52 	bl	80181e0 <tan>
 8006b3c:	ec53 2b10 	vmov	r2, r3, d0
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fd78 	bl	8000638 <__aeabi_dmul>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f7f9 fbba 	bl	80002c8 <__aeabi_dsub>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	ec43 2b17 	vmov	d7, r2, r3
 8006b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b60:	eef0 0a67 	vmov.f32	s1, s15
 8006b64:	f011 fb70 	bl	8018248 <acos>
 8006b68:	ec53 2b10 	vmov	r2, r3, d0
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f7fa f85a 	bl	8000c28 <__aeabi_d2f>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8006b7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b7e:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8006b82:	461a      	mov	r2, r3
 8006b84:	493f      	ldr	r1, [pc, #252]	; (8006c84 <localMain+0x6ec>)
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7ff fbf6 	bl	8006378 <solarEventTime>
 8006b8c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	int sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8006b90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b94:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8006b98:	461a      	mov	r2, r3
 8006b9a:	493a      	ldr	r1, [pc, #232]	; (8006c84 <localMain+0x6ec>)
 8006b9c:	2002      	movs	r0, #2
 8006b9e:	f7ff fbeb 	bl	8006378 <solarEventTime>
 8006ba2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	int noon = solarEventTime(SOLAR_NOON, &testTime, &myLocation, cha);
 8006ba6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006baa:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4934      	ldr	r1, [pc, #208]	; (8006c84 <localMain+0x6ec>)
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f7ff fbe0 	bl	8006378 <solarEventTime>
 8006bb8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	struct sunEventsTimes suntimes = {sunrise, sunset, noon};
 8006bbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bcc:	64fb      	str	r3, [r7, #76]	; 0x4c


	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8006bce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	d515      	bpl.n	8006c08 <localMain+0x670>
 8006bdc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006be0:	eef1 7a67 	vneg.f32	s15, s15
 8006be4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006c88 <localMain+0x6f0>
 8006be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bec:	ee17 0a90 	vmov	r0, s15
 8006bf0:	f7f9 fcca 	bl	8000588 <__aeabi_f2d>
 8006bf4:	a320      	add	r3, pc, #128	; (adr r3, 8006c78 <localMain+0x6e0>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fe47 	bl	800088c <__aeabi_ddiv>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8006c06:	e01b      	b.n	8006c40 <localMain+0x6a8>
	else saDeg = 360+sa*180/M_PI;
 8006c08:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006c0c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006c88 <localMain+0x6f0>
 8006c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c14:	ee17 0a90 	vmov	r0, s15
 8006c18:	f7f9 fcb6 	bl	8000588 <__aeabi_f2d>
 8006c1c:	a316      	add	r3, pc, #88	; (adr r3, 8006c78 <localMain+0x6e0>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fe33 	bl	800088c <__aeabi_ddiv>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <localMain+0x6f4>)
 8006c34:	f7f9 fb4a 	bl	80002cc <__adddf3>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

	char textBuffer[50] = {0};
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	222e      	movs	r2, #46	; 0x2e
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f00b fded 	bl	801282c <memset>

	switch(localModuleNum){
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <localMain+0x6f8>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	f200 821d 	bhi.w	8007096 <localMain+0xafe>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <localMain+0x6cc>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08007095 	.word	0x08007095
 8006c6c:	08006dfb 	.word	0x08006dfb
 8006c70:	08006f25 	.word	0x08006f25
 8006c74:	08007095 	.word	0x08007095
 8006c78:	54442d18 	.word	0x54442d18
 8006c7c:	400921fb 	.word	0x400921fb
 8006c80:	40668000 	.word	0x40668000
 8006c84:	20005d58 	.word	0x20005d58
 8006c88:	43340000 	.word	0x43340000
 8006c8c:	40768000 	.word	0x40768000
 8006c90:	20005d7c 	.word	0x20005d7c
	case 0:{
		uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8006c94:	4b94      	ldr	r3, [pc, #592]	; (8006ee8 <localMain+0x950>)
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	1d9a      	adds	r2, r3, #6
 8006c9a:	4b94      	ldr	r3, [pc, #592]	; (8006eec <localMain+0x954>)
 8006c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	1099      	asrs	r1, r3, #2
 8006ca4:	17d3      	asrs	r3, r2, #31
 8006ca6:	1ac9      	subs	r1, r1, r3
 8006ca8:	460b      	mov	r3, r1
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	1a5b      	subs	r3, r3, r1
 8006cae:	1ad1      	subs	r1, r2, r3
 8006cb0:	b2cb      	uxtb	r3, r1
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8006cb8:	4b8b      	ldr	r3, [pc, #556]	; (8006ee8 <localMain+0x950>)
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f103 0208 	add.w	r2, r3, #8
 8006cc0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	4a89      	ldr	r2, [pc, #548]	; (8006eec <localMain+0x954>)
 8006cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8006ccc:	441a      	add	r2, r3
 8006cce:	1092      	asrs	r2, r2, #2
 8006cd0:	17db      	asrs	r3, r3, #31
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		sprintf(&textBuffer, "%s week %d day %d", asctime(&testTime), weekOfTheYear, testTime.tm_yday+1);
 8006cd8:	4883      	ldr	r0, [pc, #524]	; (8006ee8 <localMain+0x950>)
 8006cda:	f00b fcdf 	bl	801269c <asctime>
 8006cde:	4601      	mov	r1, r0
 8006ce0:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8006ce4:	4b80      	ldr	r3, [pc, #512]	; (8006ee8 <localMain+0x950>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f107 0010 	add.w	r0, r7, #16
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	497e      	ldr	r1, [pc, #504]	; (8006ef0 <localMain+0x958>)
 8006cf6:	f00c fec7 	bl	8013a88 <siprintf>
		lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8006cfa:	f107 0210 	add.w	r2, r7, #16
 8006cfe:	4b7d      	ldr	r3, [pc, #500]	; (8006ef4 <localMain+0x95c>)
 8006d00:	210a      	movs	r1, #10
 8006d02:	200a      	movs	r0, #10
 8006d04:	f7fc f8fe 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", 90-phi*180/M_PI);
 8006d08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006d0c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006f20 <localMain+0x988>
 8006d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d14:	ee17 0a90 	vmov	r0, s15
 8006d18:	f7f9 fc36 	bl	8000588 <__aeabi_f2d>
 8006d1c:	a370      	add	r3, pc, #448	; (adr r3, 8006ee0 <localMain+0x948>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fdb3 	bl	800088c <__aeabi_ddiv>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	f04f 0000 	mov.w	r0, #0
 8006d2e:	4972      	ldr	r1, [pc, #456]	; (8006ef8 <localMain+0x960>)
 8006d30:	f7f9 faca 	bl	80002c8 <__aeabi_dsub>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	f107 0010 	add.w	r0, r7, #16
 8006d3c:	496f      	ldr	r1, [pc, #444]	; (8006efc <localMain+0x964>)
 8006d3e:	f00c fea3 	bl	8013a88 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 66, textBuffer, zekton45font);
 8006d42:	2322      	movs	r3, #34	; 0x22
 8006d44:	b29c      	uxth	r4, r3
 8006d46:	f107 0310 	add.w	r3, r7, #16
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 fa5a 	bl	8000204 <strlen>
 8006d50:	4603      	mov	r3, r0
 8006d52:	3301      	adds	r3, #1
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	fb14 f303 	smulbb	r3, r4, r3
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8006d60:	b298      	uxth	r0, r3
 8006d62:	f107 0210 	add.w	r2, r7, #16
 8006d66:	4b66      	ldr	r3, [pc, #408]	; (8006f00 <localMain+0x968>)
 8006d68:	2142      	movs	r1, #66	; 0x42
 8006d6a:	f7fc f8cb 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", saDeg);
 8006d6e:	f107 0010 	add.w	r0, r7, #16
 8006d72:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006d76:	4961      	ldr	r1, [pc, #388]	; (8006efc <localMain+0x964>)
 8006d78:	f00c fe86 	bl	8013a88 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 115, textBuffer, zekton45font);
 8006d7c:	2322      	movs	r3, #34	; 0x22
 8006d7e:	b29c      	uxth	r4, r3
 8006d80:	f107 0310 	add.w	r3, r7, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7f9 fa3d 	bl	8000204 <strlen>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	fb14 f303 	smulbb	r3, r4, r3
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8006d9a:	b298      	uxth	r0, r3
 8006d9c:	f107 0210 	add.w	r2, r7, #16
 8006da0:	4b57      	ldr	r3, [pc, #348]	; (8006f00 <localMain+0x968>)
 8006da2:	2173      	movs	r1, #115	; 0x73
 8006da4:	f7fc f8ae 	bl	8002f04 <lcdPutStr>

		sprintf(&textBuffer, "%c%.3f %c%.3f", location.n_s, latitude, location.w_e, longitude);
 8006da8:	4b56      	ldr	r3, [pc, #344]	; (8006f04 <localMain+0x96c>)
 8006daa:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8006dae:	461c      	mov	r4, r3
 8006db0:	4b54      	ldr	r3, [pc, #336]	; (8006f04 <localMain+0x96c>)
 8006db2:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8006db6:	4619      	mov	r1, r3
 8006db8:	f107 0010 	add.w	r0, r7, #16
 8006dbc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8006dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dc4:	9102      	str	r1, [sp, #8]
 8006dc6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006dca:	e9cd 2300 	strd	r2, r3, [sp]
 8006dce:	4622      	mov	r2, r4
 8006dd0:	494d      	ldr	r1, [pc, #308]	; (8006f08 <localMain+0x970>)
 8006dd2:	f00c fe59 	bl	8013a88 <siprintf>
		lcdPutStr(10, 25, textBuffer, font_12_zekton);
 8006dd6:	f107 0210 	add.w	r2, r7, #16
 8006dda:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <localMain+0x95c>)
 8006ddc:	2119      	movs	r1, #25
 8006dde:	200a      	movs	r0, #10
 8006de0:	f7fc f890 	bl	8002f04 <lcdPutStr>

		drawSunlightGraph(215, 10, 399-10, 50, &suntimes);
 8006de4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2332      	movs	r3, #50	; 0x32
 8006dec:	f240 1285 	movw	r2, #389	; 0x185
 8006df0:	210a      	movs	r1, #10
 8006df2:	20d7      	movs	r0, #215	; 0xd7
 8006df4:	f000 f96c 	bl	80070d0 <drawSunlightGraph>
		break;
 8006df8:	e14d      	b.n	8007096 <localMain+0xafe>
		}
	case 1:
		break;
	case 2:
		sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8006dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dfe:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <localMain+0x974>)
 8006e00:	fb82 1203 	smull	r1, r2, r2, r3
 8006e04:	441a      	add	r2, r3
 8006e06:	1152      	asrs	r2, r2, #5
 8006e08:	17db      	asrs	r3, r3, #31
 8006e0a:	1ad4      	subs	r4, r2, r3
 8006e0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006e10:	4b3e      	ldr	r3, [pc, #248]	; (8006f0c <localMain+0x974>)
 8006e12:	fb83 1302 	smull	r1, r3, r3, r2
 8006e16:	4413      	add	r3, r2
 8006e18:	1159      	asrs	r1, r3, #5
 8006e1a:	17d3      	asrs	r3, r2, #31
 8006e1c:	1ac9      	subs	r1, r1, r3
 8006e1e:	460b      	mov	r3, r1
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	1a5b      	subs	r3, r3, r1
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	1ad1      	subs	r1, r2, r3
 8006e28:	f107 0010 	add.w	r0, r7, #16
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4937      	ldr	r1, [pc, #220]	; (8006f10 <localMain+0x978>)
 8006e32:	f00c fe29 	bl	8013a88 <siprintf>
		lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 8006e36:	f107 0210 	add.w	r2, r7, #16
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <localMain+0x97c>)
 8006e3c:	211c      	movs	r1, #28
 8006e3e:	200a      	movs	r0, #10
 8006e40:	f7fc f860 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8006e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e48:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <localMain+0x974>)
 8006e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8006e4e:	441a      	add	r2, r3
 8006e50:	1152      	asrs	r2, r2, #5
 8006e52:	17db      	asrs	r3, r3, #31
 8006e54:	1ad4      	subs	r4, r2, r3
 8006e56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <localMain+0x974>)
 8006e5c:	fb83 1302 	smull	r1, r3, r3, r2
 8006e60:	4413      	add	r3, r2
 8006e62:	1159      	asrs	r1, r3, #5
 8006e64:	17d3      	asrs	r3, r2, #31
 8006e66:	1ac9      	subs	r1, r1, r3
 8006e68:	460b      	mov	r3, r1
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	1a5b      	subs	r3, r3, r1
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	1ad1      	subs	r1, r2, r3
 8006e72:	f107 0010 	add.w	r0, r7, #16
 8006e76:	460b      	mov	r3, r1
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4927      	ldr	r1, [pc, #156]	; (8006f18 <localMain+0x980>)
 8006e7c:	f00c fe04 	bl	8013a88 <siprintf>
		lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 8006e80:	f107 0210 	add.w	r2, r7, #16
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <localMain+0x97c>)
 8006e86:	212c      	movs	r1, #44	; 0x2c
 8006e88:	200a      	movs	r0, #10
 8006e8a:	f7fc f83b 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8006e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e92:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <localMain+0x974>)
 8006e94:	fb82 1203 	smull	r1, r2, r2, r3
 8006e98:	441a      	add	r2, r3
 8006e9a:	1152      	asrs	r2, r2, #5
 8006e9c:	17db      	asrs	r3, r3, #31
 8006e9e:	1ad4      	subs	r4, r2, r3
 8006ea0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <localMain+0x974>)
 8006ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8006eaa:	4413      	add	r3, r2
 8006eac:	1159      	asrs	r1, r3, #5
 8006eae:	17d3      	asrs	r3, r2, #31
 8006eb0:	1ac9      	subs	r1, r1, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	1a5b      	subs	r3, r3, r1
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	1ad1      	subs	r1, r2, r3
 8006ebc:	f107 0010 	add.w	r0, r7, #16
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4915      	ldr	r1, [pc, #84]	; (8006f1c <localMain+0x984>)
 8006ec6:	f00c fddf 	bl	8013a88 <siprintf>
		lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8006eca:	f107 0210 	add.w	r2, r7, #16
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <localMain+0x97c>)
 8006ed0:	213c      	movs	r1, #60	; 0x3c
 8006ed2:	200a      	movs	r0, #10
 8006ed4:	f7fc f816 	bl	8002f04 <lcdPutStr>
		break;
 8006ed8:	e0dd      	b.n	8007096 <localMain+0xafe>
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	54442d18 	.word	0x54442d18
 8006ee4:	400921fb 	.word	0x400921fb
 8006ee8:	20005d58 	.word	0x20005d58
 8006eec:	92492493 	.word	0x92492493
 8006ef0:	0801b2c8 	.word	0x0801b2c8
 8006ef4:	08030508 	.word	0x08030508
 8006ef8:	40568000 	.word	0x40568000
 8006efc:	0801b2dc 	.word	0x0801b2dc
 8006f00:	08031a18 	.word	0x08031a18
 8006f04:	20005678 	.word	0x20005678
 8006f08:	0801b2e4 	.word	0x0801b2e4
 8006f0c:	88888889 	.word	0x88888889
 8006f10:	0801b2f4 	.word	0x0801b2f4
 8006f14:	08030f90 	.word	0x08030f90
 8006f18:	0801b308 	.word	0x0801b308
 8006f1c:	0801b318 	.word	0x0801b318
 8006f20:	43340000 	.word	0x43340000
	case 3:
		sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8006f24:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006f28:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8006f20 <localMain+0x988>
 8006f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f30:	ee17 0a90 	vmov	r0, s15
 8006f34:	f7f9 fb28 	bl	8000588 <__aeabi_f2d>
 8006f38:	a363      	add	r3, pc, #396	; (adr r3, 80070c8 <localMain+0xb30>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f7f9 fca5 	bl	800088c <__aeabi_ddiv>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	f04f 0000 	mov.w	r0, #0
 8006f4a:	4955      	ldr	r1, [pc, #340]	; (80070a0 <localMain+0xb08>)
 8006f4c:	f7f9 f9bc 	bl	80002c8 <__aeabi_dsub>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	f107 0010 	add.w	r0, r7, #16
 8006f58:	4952      	ldr	r1, [pc, #328]	; (80070a4 <localMain+0xb0c>)
 8006f5a:	f00c fd95 	bl	8013a88 <siprintf>
		lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 8006f5e:	f107 0210 	add.w	r2, r7, #16
 8006f62:	4b51      	ldr	r3, [pc, #324]	; (80070a8 <localMain+0xb10>)
 8006f64:	2150      	movs	r1, #80	; 0x50
 8006f66:	200a      	movs	r0, #10
 8006f68:	f7fb ffcc 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8006f6c:	f107 0010 	add.w	r0, r7, #16
 8006f70:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006f74:	494d      	ldr	r1, [pc, #308]	; (80070ac <localMain+0xb14>)
 8006f76:	f00c fd87 	bl	8013a88 <siprintf>
	//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
		lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 8006f7a:	f107 0210 	add.w	r2, r7, #16
 8006f7e:	4b4a      	ldr	r3, [pc, #296]	; (80070a8 <localMain+0xb10>)
 8006f80:	2160      	movs	r1, #96	; 0x60
 8006f82:	200a      	movs	r0, #10
 8006f84:	f7fb ffbe 	bl	8002f04 <lcdPutStr>

		double perc = (testTime.tm_hour*60+testTime.tm_min+(double)testTime.tm_sec/60-sunrise)*100/(sunset-sunrise);
 8006f88:	4b49      	ldr	r3, [pc, #292]	; (80070b0 <localMain+0xb18>)
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <localMain+0xb18>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7f9 fae1 	bl	8000564 <__aeabi_i2d>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	4b42      	ldr	r3, [pc, #264]	; (80070b0 <localMain+0xb18>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7f9 fada 	bl	8000564 <__aeabi_i2d>
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	4b3f      	ldr	r3, [pc, #252]	; (80070b4 <localMain+0xb1c>)
 8006fb6:	f7f9 fc69 	bl	800088c <__aeabi_ddiv>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f983 	bl	80002cc <__adddf3>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4614      	mov	r4, r2
 8006fcc:	461d      	mov	r5, r3
 8006fce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006fd2:	f7f9 fac7 	bl	8000564 <__aeabi_i2d>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f973 	bl	80002c8 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <localMain+0xb20>)
 8006ff0:	f7f9 fb22 	bl	8000638 <__aeabi_dmul>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	4618      	mov	r0, r3
 8007008:	f7f9 faac 	bl	8000564 <__aeabi_i2d>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 fc3a 	bl	800088c <__aeabi_ddiv>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 8007020:	f107 0010 	add.w	r0, r7, #16
 8007024:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007028:	4924      	ldr	r1, [pc, #144]	; (80070bc <localMain+0xb24>)
 800702a:	f00c fd2d 	bl	8013a88 <siprintf>
		lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 800702e:	f107 0210 	add.w	r2, r7, #16
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <localMain+0xb10>)
 8007034:	2174      	movs	r1, #116	; 0x74
 8007036:	200a      	movs	r0, #10
 8007038:	f7fb ff64 	bl	8002f04 <lcdPutStr>
		sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 800703c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <localMain+0xb28>)
 8007048:	fb82 1203 	smull	r1, r2, r2, r3
 800704c:	441a      	add	r2, r3
 800704e:	1152      	asrs	r2, r2, #5
 8007050:	17db      	asrs	r3, r3, #31
 8007052:	1ad4      	subs	r4, r2, r3
 8007054:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <localMain+0xb28>)
 8007060:	fb83 1302 	smull	r1, r3, r3, r2
 8007064:	4413      	add	r3, r2
 8007066:	1159      	asrs	r1, r3, #5
 8007068:	17d3      	asrs	r3, r2, #31
 800706a:	1ac9      	subs	r1, r1, r3
 800706c:	460b      	mov	r3, r1
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a5b      	subs	r3, r3, r1
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	1ad1      	subs	r1, r2, r3
 8007076:	f107 0010 	add.w	r0, r7, #16
 800707a:	460b      	mov	r3, r1
 800707c:	4622      	mov	r2, r4
 800707e:	4911      	ldr	r1, [pc, #68]	; (80070c4 <localMain+0xb2c>)
 8007080:	f00c fd02 	bl	8013a88 <siprintf>
		lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8007084:	f107 0210 	add.w	r2, r7, #16
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <localMain+0xb10>)
 800708a:	2184      	movs	r1, #132	; 0x84
 800708c:	200a      	movs	r0, #10
 800708e:	f7fb ff39 	bl	8002f04 <lcdPutStr>
		break;
 8007092:	e000      	b.n	8007096 <localMain+0xafe>
		break;
 8007094:	bf00      	nop
	case 4:{
		break;
		}
	}
}
 8007096:	bf00      	nop
 8007098:	37f0      	adds	r7, #240	; 0xf0
 800709a:	46bd      	mov	sp, r7
 800709c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a0:	40568000 	.word	0x40568000
 80070a4:	0801b32c 	.word	0x0801b32c
 80070a8:	08030f90 	.word	0x08030f90
 80070ac:	0801b350 	.word	0x0801b350
 80070b0:	20005d58 	.word	0x20005d58
 80070b4:	404e0000 	.word	0x404e0000
 80070b8:	40590000 	.word	0x40590000
 80070bc:	0801b370 	.word	0x0801b370
 80070c0:	88888889 	.word	0x88888889
 80070c4:	0801b390 	.word	0x0801b390
 80070c8:	54442d18 	.word	0x54442d18
 80070cc:	400921fb 	.word	0x400921fb

080070d0 <drawSunlightGraph>:

void drawSunlightGraph(uint8_t yPos, uint16_t x1, uint16_t x2, uint8_t height, struct sunEventsTimes *suntimes){
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b093      	sub	sp, #76	; 0x4c
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4623      	mov	r3, r4
 80070e0:	71fb      	strb	r3, [r7, #7]
 80070e2:	4603      	mov	r3, r0
 80070e4:	80bb      	strh	r3, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	807b      	strh	r3, [r7, #2]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71bb      	strb	r3, [r7, #6]
	lcdHLine(x1,x2,yPos,1);
 80070ee:	88b8      	ldrh	r0, [r7, #4]
 80070f0:	8879      	ldrh	r1, [r7, #2]
 80070f2:	79fa      	ldrb	r2, [r7, #7]
 80070f4:	2301      	movs	r3, #1
 80070f6:	f7fc fbc1 	bl	800387c <lcdHLine>
	lcdVLine(x1, yPos-2, yPos+2, 1);
 80070fa:	88b8      	ldrh	r0, [r7, #4]
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	1e99      	subs	r1, r3, #2
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	2301      	movs	r3, #1
 8007106:	f7fb ff7d 	bl	8003004 <lcdVLine>
	lcdVLine(x2, yPos-2, yPos+2, 1);
 800710a:	8878      	ldrh	r0, [r7, #2]
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	1e99      	subs	r1, r3, #2
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	1c9a      	adds	r2, r3, #2
 8007114:	2301      	movs	r3, #1
 8007116:	f7fb ff75 	bl	8003004 <lcdVLine>

	uint16_t scaleXrise = x1+(x2-x1+1)*suntimes->sunrise/(24*60-0);
 800711a:	887a      	ldrh	r2, [r7, #2]
 800711c:	88bb      	ldrh	r3, [r7, #4]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	3301      	adds	r3, #1
 8007122:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	4a80      	ldr	r2, [pc, #512]	; (800732c <drawSunlightGraph+0x25c>)
 800712c:	fb82 1203 	smull	r1, r2, r2, r3
 8007130:	441a      	add	r2, r3
 8007132:	1292      	asrs	r2, r2, #10
 8007134:	17db      	asrs	r3, r3, #31
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29a      	uxth	r2, r3
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t scaleXset = x1+(x2-x1+1)*suntimes->sunset/(24*60-0);
 8007142:	887a      	ldrh	r2, [r7, #2]
 8007144:	88bb      	ldrh	r3, [r7, #4]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	3301      	adds	r3, #1
 800714a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	4a76      	ldr	r2, [pc, #472]	; (800732c <drawSunlightGraph+0x25c>)
 8007154:	fb82 1203 	smull	r1, r2, r2, r3
 8007158:	441a      	add	r2, r3
 800715a:	1292      	asrs	r2, r2, #10
 800715c:	17db      	asrs	r3, r3, #31
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	b29a      	uxth	r2, r3
 8007162:	88bb      	ldrh	r3, [r7, #4]
 8007164:	4413      	add	r3, r2
 8007166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint16_t scaleXnoon = x1+(x2-x1+1)*suntimes->noon/(24*60-0);
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	88bb      	ldrh	r3, [r7, #4]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	3301      	adds	r3, #1
 8007172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007174:	6852      	ldr	r2, [r2, #4]
 8007176:	fb02 f303 	mul.w	r3, r2, r3
 800717a:	4a6c      	ldr	r2, [pc, #432]	; (800732c <drawSunlightGraph+0x25c>)
 800717c:	fb82 1203 	smull	r1, r2, r2, r3
 8007180:	441a      	add	r2, r3
 8007182:	1292      	asrs	r2, r2, #10
 8007184:	17db      	asrs	r3, r3, #31
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	b29a      	uxth	r2, r3
 800718a:	88bb      	ldrh	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t scaleXnow = x1+(x2-x1+1)*(testTime.tm_hour*60+testTime.tm_min)/(24*60-0);
 8007192:	887a      	ldrh	r2, [r7, #2]
 8007194:	88bb      	ldrh	r3, [r7, #4]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	4b65      	ldr	r3, [pc, #404]	; (8007330 <drawSunlightGraph+0x260>)
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	461a      	mov	r2, r3
 80071a8:	4b61      	ldr	r3, [pc, #388]	; (8007330 <drawSunlightGraph+0x260>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	fb01 f303 	mul.w	r3, r1, r3
 80071b2:	4a5e      	ldr	r2, [pc, #376]	; (800732c <drawSunlightGraph+0x25c>)
 80071b4:	fb82 1203 	smull	r1, r2, r2, r3
 80071b8:	441a      	add	r2, r3
 80071ba:	1292      	asrs	r2, r2, #10
 80071bc:	17db      	asrs	r3, r3, #31
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	88bb      	ldrh	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	lcdVLine(scaleXrise, yPos-5, yPos+5, 2);
 80071ca:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	1f59      	subs	r1, r3, #5
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	1d5a      	adds	r2, r3, #5
 80071d6:	2302      	movs	r3, #2
 80071d8:	f7fb ff14 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXset, yPos-5, yPos+5, 2);
 80071dc:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	1f59      	subs	r1, r3, #5
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	1d5a      	adds	r2, r3, #5
 80071e8:	2302      	movs	r3, #2
 80071ea:	f7fb ff0b 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXnoon, yPos-5, yPos+5, 2);
 80071ee:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	1f59      	subs	r1, r3, #5
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	1d5a      	adds	r2, r3, #5
 80071fa:	2302      	movs	r3, #2
 80071fc:	f7fb ff02 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXnow, yPos-10, yPos+10, 2);
 8007200:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	f1a3 010a 	sub.w	r1, r3, #10
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	f103 020a 	add.w	r2, r3, #10
 8007210:	2302      	movs	r3, #2
 8007212:	f7fb fef7 	bl	8003004 <lcdVLine>

	char textBuffer[50] = {0};
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	f107 0310 	add.w	r3, r7, #16
 800721e:	222e      	movs	r2, #46	; 0x2e
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f00b fb02 	bl	801282c <memset>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunrise/60, suntimes->sunrise%60);
 8007228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a41      	ldr	r2, [pc, #260]	; (8007334 <drawSunlightGraph+0x264>)
 800722e:	fb82 1203 	smull	r1, r2, r2, r3
 8007232:	441a      	add	r2, r3
 8007234:	1152      	asrs	r2, r2, #5
 8007236:	17db      	asrs	r3, r3, #31
 8007238:	1ad4      	subs	r4, r2, r3
 800723a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <drawSunlightGraph+0x264>)
 8007240:	fb83 1302 	smull	r1, r3, r3, r2
 8007244:	4413      	add	r3, r2
 8007246:	1159      	asrs	r1, r3, #5
 8007248:	17d3      	asrs	r3, r2, #31
 800724a:	1ac9      	subs	r1, r1, r3
 800724c:	460b      	mov	r3, r1
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	1a5b      	subs	r3, r3, r1
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	1ad1      	subs	r1, r2, r3
 8007256:	f107 000c 	add.w	r0, r7, #12
 800725a:	460b      	mov	r3, r1
 800725c:	4622      	mov	r2, r4
 800725e:	4936      	ldr	r1, [pc, #216]	; (8007338 <drawSunlightGraph+0x268>)
 8007260:	f00c fc12 	bl	8013a88 <siprintf>
	lcdPutStr(scaleXrise-19, yPos+5, textBuffer, smallestFont);
 8007264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007268:	3b13      	subs	r3, #19
 800726a:	b298      	uxth	r0, r3
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	3305      	adds	r3, #5
 8007270:	b2d9      	uxtb	r1, r3
 8007272:	f107 020c 	add.w	r2, r7, #12
 8007276:	4b31      	ldr	r3, [pc, #196]	; (800733c <drawSunlightGraph+0x26c>)
 8007278:	f7fb fe44 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunset/60, suntimes->sunset%60);
 800727c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <drawSunlightGraph+0x264>)
 8007282:	fb82 1203 	smull	r1, r2, r2, r3
 8007286:	441a      	add	r2, r3
 8007288:	1152      	asrs	r2, r2, #5
 800728a:	17db      	asrs	r3, r3, #31
 800728c:	1ad4      	subs	r4, r2, r3
 800728e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	4b28      	ldr	r3, [pc, #160]	; (8007334 <drawSunlightGraph+0x264>)
 8007294:	fb83 1302 	smull	r1, r3, r3, r2
 8007298:	4413      	add	r3, r2
 800729a:	1159      	asrs	r1, r3, #5
 800729c:	17d3      	asrs	r3, r2, #31
 800729e:	1ac9      	subs	r1, r1, r3
 80072a0:	460b      	mov	r3, r1
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a5b      	subs	r3, r3, r1
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	1ad1      	subs	r1, r2, r3
 80072aa:	f107 000c 	add.w	r0, r7, #12
 80072ae:	460b      	mov	r3, r1
 80072b0:	4622      	mov	r2, r4
 80072b2:	4921      	ldr	r1, [pc, #132]	; (8007338 <drawSunlightGraph+0x268>)
 80072b4:	f00c fbe8 	bl	8013a88 <siprintf>
	lcdPutStr(scaleXset-19, yPos+5, textBuffer, smallestFont);
 80072b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072bc:	3b13      	subs	r3, #19
 80072be:	b298      	uxth	r0, r3
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	3305      	adds	r3, #5
 80072c4:	b2d9      	uxtb	r1, r3
 80072c6:	f107 020c 	add.w	r2, r7, #12
 80072ca:	4b1c      	ldr	r3, [pc, #112]	; (800733c <drawSunlightGraph+0x26c>)
 80072cc:	f7fb fe1a 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->noon/60, suntimes->noon%60);
 80072d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4a17      	ldr	r2, [pc, #92]	; (8007334 <drawSunlightGraph+0x264>)
 80072d6:	fb82 1203 	smull	r1, r2, r2, r3
 80072da:	441a      	add	r2, r3
 80072dc:	1152      	asrs	r2, r2, #5
 80072de:	17db      	asrs	r3, r3, #31
 80072e0:	1ad4      	subs	r4, r2, r3
 80072e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <drawSunlightGraph+0x264>)
 80072e8:	fb83 1302 	smull	r1, r3, r3, r2
 80072ec:	4413      	add	r3, r2
 80072ee:	1159      	asrs	r1, r3, #5
 80072f0:	17d3      	asrs	r3, r2, #31
 80072f2:	1ac9      	subs	r1, r1, r3
 80072f4:	460b      	mov	r3, r1
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	1a5b      	subs	r3, r3, r1
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	1ad1      	subs	r1, r2, r3
 80072fe:	f107 000c 	add.w	r0, r7, #12
 8007302:	460b      	mov	r3, r1
 8007304:	4622      	mov	r2, r4
 8007306:	490c      	ldr	r1, [pc, #48]	; (8007338 <drawSunlightGraph+0x268>)
 8007308:	f00c fbbe 	bl	8013a88 <siprintf>
	lcdPutStr(scaleXnoon-19, yPos+5, textBuffer, smallestFont);
 800730c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007310:	3b13      	subs	r3, #19
 8007312:	b298      	uxth	r0, r3
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	3305      	adds	r3, #5
 8007318:	b2d9      	uxtb	r1, r3
 800731a:	f107 020c 	add.w	r2, r7, #12
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <drawSunlightGraph+0x26c>)
 8007320:	f7fb fdf0 	bl	8002f04 <lcdPutStr>
//	int sunElev = (90-phi(testTime)*180/M_PI)*height/90;
//	for(uint16_t pix = x1; pix <= x2; pix++){
//		lcdPutPix(pix, sunElev, 1);
//	}
}
 8007324:	bf00      	nop
 8007326:	374c      	adds	r7, #76	; 0x4c
 8007328:	46bd      	mov	sp, r7
 800732a:	bd90      	pop	{r4, r7, pc}
 800732c:	b60b60b7 	.word	0xb60b60b7
 8007330:	20005d58 	.word	0x20005d58
 8007334:	88888889 	.word	0x88888889
 8007338:	0801b3d0 	.word	0x0801b3d0
 800733c:	0803008c 	.word	0x0803008c

08007340 <setDefaultClbcks>:
#include "sdcardModule.h"
#include "contextMenu.h"
#include "fonts/fonts.h"
#include "File_Handling.h"

static void setDefaultClbcks(void){
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
	// module callbacks
//	btn_B2.onSinglePressHandler = &showCntxMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <setDefaultClbcks+0x1c>)
 8007346:	4a06      	ldr	r2, [pc, #24]	; (8007360 <setDefaultClbcks+0x20>)
 8007348:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <setDefaultClbcks+0x24>)
 800734c:	4a06      	ldr	r2, [pc, #24]	; (8007368 <setDefaultClbcks+0x28>)
 800734e:	611a      	str	r2, [r3, #16]
}
 8007350:	bf00      	nop
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20002660 	.word	0x20002660
 8007360:	08002a69 	.word	0x08002a69
 8007364:	200026a8 	.word	0x200026a8
 8007368:	08002a79 	.word	0x08002a79

0800736c <sdcardSetup>:
//static const struct ContextAction action2 = {"Unmount SD card", &setDateAction};
//static const struct ContextAction action3 = {"Customize", &setTimeAction};
//static const struct ContextAction action4 = {"Lock", &setTimeAction};
//static const struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void sdcardSetup(void){
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007370:	f7ff ffe6 	bl	8007340 <setDefaultClbcks>
//	setupCntxMenu(&setDefaultClbcks);
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}

08007378 <sdcardMain>:
void sdcardMain(void){
 8007378:	b580      	push	{r7, lr}
 800737a:	b0a8      	sub	sp, #160	; 0xa0
 800737c:	af00      	add	r7, sp, #0
	char title[50] = {0};
 800737e:	2300      	movs	r3, #0
 8007380:	667b      	str	r3, [r7, #100]	; 0x64
 8007382:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007386:	222e      	movs	r2, #46	; 0x2e
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f00b fa4e 	bl	801282c <memset>
	sprintf(&title, "SD card explorer");
 8007390:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007394:	492f      	ldr	r1, [pc, #188]	; (8007454 <sdcardMain+0xdc>)
 8007396:	4618      	mov	r0, r3
 8007398:	f00c fb76 	bl	8013a88 <siprintf>
	lcdPutStr(0, 0, title, smallestFont);
 800739c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80073a0:	4b2d      	ldr	r3, [pc, #180]	; (8007458 <sdcardMain+0xe0>)
 80073a2:	2100      	movs	r1, #0
 80073a4:	2000      	movs	r0, #0
 80073a6:	f7fb fdad 	bl	8002f04 <lcdPutStr>
	char freeTotal[50];
	Check_SD_Space(&freeTotal);
 80073aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fa f8de 	bl	8001570 <Check_SD_Space>
	sprintf(&title, "Free/total space: %s [kB]", freeTotal);
 80073b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80073b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80073bc:	4927      	ldr	r1, [pc, #156]	; (800745c <sdcardMain+0xe4>)
 80073be:	4618      	mov	r0, r3
 80073c0:	f00c fb62 	bl	8013a88 <siprintf>
	lcdPutStr(0, 12, title, smallestFont);
 80073c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80073c8:	4b23      	ldr	r3, [pc, #140]	; (8007458 <sdcardMain+0xe0>)
 80073ca:	210c      	movs	r1, #12
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7fb fd99 	bl	8002f04 <lcdPutStr>

    DIR dir;
	UINT i;
	char *path = malloc(20*sizeof (char));
 80073d2:	2014      	movs	r0, #20
 80073d4:	f00b fa0c 	bl	80127f0 <malloc>
 80073d8:	4603      	mov	r3, r0
 80073da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sprintf (path, "%s","/");
 80073de:	4a20      	ldr	r2, [pc, #128]	; (8007460 <sdcardMain+0xe8>)
 80073e0:	4920      	ldr	r1, [pc, #128]	; (8007464 <sdcardMain+0xec>)
 80073e2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80073e6:	f00c fb4f 	bl	8013a88 <siprintf>
    f_opendir(&dir, path);                       /* Open the directory */
 80073ea:	463b      	mov	r3, r7
 80073ec:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80073f0:	4618      	mov	r0, r3
 80073f2:	f00a fe26 	bl	8012042 <f_opendir>
	for(uint8_t i = 1; i<10; i++){
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80073fc:	e01a      	b.n	8007434 <sdcardMain+0xbc>
		Scan_SD_my(&dir, &title);
 80073fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007402:	463b      	mov	r3, r7
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7f9 fe48 	bl	800109c <Scan_SD_my>
		lcdPutStr(0, 12+i*12, title, smallestFont);
 800740c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8007410:	3301      	adds	r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	0052      	lsls	r2, r2, #1
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	b2d9      	uxtb	r1, r3
 800741e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <sdcardMain+0xe0>)
 8007424:	2000      	movs	r0, #0
 8007426:	f7fb fd6d 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 1; i<10; i++){
 800742a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800742e:	3301      	adds	r3, #1
 8007430:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8007434:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8007438:	2b09      	cmp	r3, #9
 800743a:	d9e0      	bls.n	80073fe <sdcardMain+0x86>
	}
	f_closedir(&dir);
 800743c:	463b      	mov	r3, r7
 800743e:	4618      	mov	r0, r3
 8007440:	f00a fe72 	bl	8012128 <f_closedir>
    free(path);
 8007444:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007448:	f00b f9da 	bl	8012800 <free>

//	lcdPutStr(0,60, fileText, smallestFont);
//	lcdRefresh();
//	enableCntxMenu();
}
 800744c:	bf00      	nop
 800744e:	37a0      	adds	r7, #160	; 0xa0
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	0801b494 	.word	0x0801b494
 8007458:	08037060 	.word	0x08037060
 800745c:	0801b4a8 	.word	0x0801b4a8
 8007460:	0801b4c4 	.word	0x0801b4c4
 8007464:	0801b4c8 	.word	0x0801b4c8

08007468 <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
	if(currentPage>0){
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prevPage+0x30>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <prevPage+0x1a>
		currentPage--;
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <prevPage+0x30>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	3b01      	subs	r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <prevPage+0x30>)
 800747e:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8007480:	e005      	b.n	800748e <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <prevPage+0x34>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	3b01      	subs	r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <prevPage+0x30>)
 800748c:	701a      	strb	r2, [r3, #0]
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20005d7d 	.word	0x20005d7d
 800749c:	200001e9 	.word	0x200001e9

080074a0 <nextPage>:
void nextPage(void){
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <nextPage+0x34>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <nextPage+0x38>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	429a      	cmp	r2, r3
 80074b2:	da06      	bge.n	80074c2 <nextPage+0x22>
		currentPage++;
 80074b4:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <nextPage+0x34>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <nextPage+0x34>)
 80074be:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 80074c0:	e002      	b.n	80074c8 <nextPage+0x28>
		currentPage=0;
 80074c2:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <nextPage+0x34>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20005d7d 	.word	0x20005d7d
 80074d8:	200001e9 	.word	0x200001e9

080074dc <showPage1>:

void showPage1(void){
 80074dc:	b580      	push	{r7, lr}
 80074de:	b092      	sub	sp, #72	; 0x48
 80074e0:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 80074e2:	2300      	movs	r3, #0
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	60da      	str	r2, [r3, #12]
 80074f4:	611a      	str	r2, [r3, #16]
 80074f6:	615a      	str	r2, [r3, #20]
 80074f8:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80074fa:	2300      	movs	r3, #0
 80074fc:	603b      	str	r3, [r7, #0]
 80074fe:	1d3b      	adds	r3, r7, #4
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	611a      	str	r2, [r3, #16]
 800750c:	615a      	str	r2, [r3, #20]
 800750e:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8007510:	4b17      	ldr	r3, [pc, #92]	; (8007570 <showPage1+0x94>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <showPage1+0x94>)
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	4619      	mov	r1, r3
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <showPage1+0x94>)
 800751e:	789b      	ldrb	r3, [r3, #2]
 8007520:	4638      	mov	r0, r7
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	460b      	mov	r3, r1
 8007526:	4913      	ldr	r1, [pc, #76]	; (8007574 <showPage1+0x98>)
 8007528:	f00c faae 	bl	8013a88 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 800752c:	463a      	mov	r2, r7
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <showPage1+0x9c>)
 8007530:	210b      	movs	r1, #11
 8007532:	200e      	movs	r0, #14
 8007534:	f7fb fce6 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8007538:	2301      	movs	r3, #1
 800753a:	2227      	movs	r2, #39	; 0x27
 800753c:	2106      	movs	r1, #6
 800753e:	2001      	movs	r0, #1
 8007540:	f7fb fd60 	bl	8003004 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8007544:	2301      	movs	r3, #1
 8007546:	2228      	movs	r2, #40	; 0x28
 8007548:	2105      	movs	r1, #5
 800754a:	2002      	movs	r0, #2
 800754c:	f7fb fd5a 	bl	8003004 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8007550:	2301      	movs	r3, #1
 8007552:	2228      	movs	r2, #40	; 0x28
 8007554:	2105      	movs	r1, #5
 8007556:	2003      	movs	r0, #3
 8007558:	f7fb fd54 	bl	8003004 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 800755c:	2301      	movs	r3, #1
 800755e:	2227      	movs	r2, #39	; 0x27
 8007560:	2106      	movs	r1, #6
 8007562:	2004      	movs	r0, #4
 8007564:	f7fb fd4e 	bl	8003004 <lcdVLine>
}
 8007568:	bf00      	nop
 800756a:	3740      	adds	r7, #64	; 0x40
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	200057f0 	.word	0x200057f0
 8007574:	0801b584 	.word	0x0801b584
 8007578:	0803bfd4 	.word	0x0803bfd4

0800757c <showPage2>:
void showPage2(void){
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8007582:	2300      	movs	r3, #0
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	1d3b      	adds	r3, r7, #4
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	605a      	str	r2, [r3, #4]
 800758e:	609a      	str	r2, [r3, #8]
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	611a      	str	r2, [r3, #16]
 8007594:	615a      	str	r2, [r3, #20]
 8007596:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8007598:	463b      	mov	r3, r7
 800759a:	4913      	ldr	r1, [pc, #76]	; (80075e8 <showPage2+0x6c>)
 800759c:	4618      	mov	r0, r3
 800759e:	f00c fa73 	bl	8013a88 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 80075a2:	463a      	mov	r2, r7
 80075a4:	4b11      	ldr	r3, [pc, #68]	; (80075ec <showPage2+0x70>)
 80075a6:	2132      	movs	r1, #50	; 0x32
 80075a8:	200e      	movs	r0, #14
 80075aa:	f7fb fcab 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80075ae:	2301      	movs	r3, #1
 80075b0:	224e      	movs	r2, #78	; 0x4e
 80075b2:	212d      	movs	r1, #45	; 0x2d
 80075b4:	2001      	movs	r0, #1
 80075b6:	f7fb fd25 	bl	8003004 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80075ba:	2301      	movs	r3, #1
 80075bc:	224f      	movs	r2, #79	; 0x4f
 80075be:	212c      	movs	r1, #44	; 0x2c
 80075c0:	2002      	movs	r0, #2
 80075c2:	f7fb fd1f 	bl	8003004 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80075c6:	2301      	movs	r3, #1
 80075c8:	224f      	movs	r2, #79	; 0x4f
 80075ca:	212c      	movs	r1, #44	; 0x2c
 80075cc:	2003      	movs	r0, #3
 80075ce:	f7fb fd19 	bl	8003004 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80075d2:	2301      	movs	r3, #1
 80075d4:	224e      	movs	r2, #78	; 0x4e
 80075d6:	212d      	movs	r1, #45	; 0x2d
 80075d8:	2004      	movs	r0, #4
 80075da:	f7fb fd13 	bl	8003004 <lcdVLine>
}
 80075de:	bf00      	nop
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	0801b594 	.word	0x0801b594
 80075ec:	0803bfd4 	.word	0x0803bfd4

080075f0 <showPage3>:
void showPage3(void){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80075f6:	2300      	movs	r3, #0
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	611a      	str	r2, [r3, #16]
 8007608:	615a      	str	r2, [r3, #20]
 800760a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 800760c:	463b      	mov	r3, r7
 800760e:	4913      	ldr	r1, [pc, #76]	; (800765c <showPage3+0x6c>)
 8007610:	4618      	mov	r0, r3
 8007612:	f00c fa39 	bl	8013a88 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8007616:	463a      	mov	r2, r7
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <showPage3+0x70>)
 800761a:	2100      	movs	r1, #0
 800761c:	2000      	movs	r0, #0
 800761e:	f7fb fc71 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8007622:	2301      	movs	r3, #1
 8007624:	2275      	movs	r2, #117	; 0x75
 8007626:	2154      	movs	r1, #84	; 0x54
 8007628:	2001      	movs	r0, #1
 800762a:	f7fb fceb 	bl	8003004 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 800762e:	2301      	movs	r3, #1
 8007630:	2276      	movs	r2, #118	; 0x76
 8007632:	2153      	movs	r1, #83	; 0x53
 8007634:	2002      	movs	r0, #2
 8007636:	f7fb fce5 	bl	8003004 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 800763a:	2301      	movs	r3, #1
 800763c:	2276      	movs	r2, #118	; 0x76
 800763e:	2153      	movs	r1, #83	; 0x53
 8007640:	2003      	movs	r0, #3
 8007642:	f7fb fcdf 	bl	8003004 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8007646:	2301      	movs	r3, #1
 8007648:	2275      	movs	r2, #117	; 0x75
 800764a:	2154      	movs	r1, #84	; 0x54
 800764c:	2004      	movs	r0, #4
 800764e:	f7fb fcd9 	bl	8003004 <lcdVLine>
}
 8007652:	bf00      	nop
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	0801b598 	.word	0x0801b598
 8007660:	0803bfd4 	.word	0x0803bfd4

08007664 <showPage4>:
void showPage4(void){
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800766a:	2300      	movs	r3, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
 800767c:	615a      	str	r2, [r3, #20]
 800767e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8007680:	463b      	mov	r3, r7
 8007682:	4913      	ldr	r1, [pc, #76]	; (80076d0 <showPage4+0x6c>)
 8007684:	4618      	mov	r0, r3
 8007686:	f00c f9ff 	bl	8013a88 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800768a:	463a      	mov	r2, r7
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <showPage4+0x70>)
 800768e:	2100      	movs	r1, #0
 8007690:	2000      	movs	r0, #0
 8007692:	f7fb fc37 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8007696:	2301      	movs	r3, #1
 8007698:	229c      	movs	r2, #156	; 0x9c
 800769a:	217b      	movs	r1, #123	; 0x7b
 800769c:	2001      	movs	r0, #1
 800769e:	f7fb fcb1 	bl	8003004 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80076a2:	2301      	movs	r3, #1
 80076a4:	229d      	movs	r2, #157	; 0x9d
 80076a6:	217a      	movs	r1, #122	; 0x7a
 80076a8:	2002      	movs	r0, #2
 80076aa:	f7fb fcab 	bl	8003004 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80076ae:	2301      	movs	r3, #1
 80076b0:	229d      	movs	r2, #157	; 0x9d
 80076b2:	217a      	movs	r1, #122	; 0x7a
 80076b4:	2003      	movs	r0, #3
 80076b6:	f7fb fca5 	bl	8003004 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80076ba:	2301      	movs	r3, #1
 80076bc:	229c      	movs	r2, #156	; 0x9c
 80076be:	217b      	movs	r1, #123	; 0x7b
 80076c0:	2004      	movs	r0, #4
 80076c2:	f7fb fc9f 	bl	8003004 <lcdVLine>
}
 80076c6:	bf00      	nop
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	0801b5a4 	.word	0x0801b5a4
 80076d4:	0803bfd4 	.word	0x0803bfd4

080076d8 <showPage5>:
void showPage5(void){
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80076de:	2300      	movs	r3, #0
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	1d3b      	adds	r3, r7, #4
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	609a      	str	r2, [r3, #8]
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	611a      	str	r2, [r3, #16]
 80076f0:	615a      	str	r2, [r3, #20]
 80076f2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 80076f4:	463b      	mov	r3, r7
 80076f6:	4925      	ldr	r1, [pc, #148]	; (800778c <showPage5+0xb4>)
 80076f8:	4618      	mov	r0, r3
 80076fa:	f00c f9c5 	bl	8013a88 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 80076fe:	463a      	mov	r2, r7
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <showPage5+0xb8>)
 8007702:	2100      	movs	r1, #0
 8007704:	200a      	movs	r0, #10
 8007706:	f7fb fbfd 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 800770a:	463a      	mov	r2, r7
 800770c:	4b21      	ldr	r3, [pc, #132]	; (8007794 <showPage5+0xbc>)
 800770e:	210f      	movs	r1, #15
 8007710:	200a      	movs	r0, #10
 8007712:	f7fb fbf7 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8007716:	463a      	mov	r2, r7
 8007718:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <showPage5+0xc0>)
 800771a:	2132      	movs	r1, #50	; 0x32
 800771c:	200a      	movs	r0, #10
 800771e:	f7fb fbf1 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8007722:	463a      	mov	r2, r7
 8007724:	4b1d      	ldr	r3, [pc, #116]	; (800779c <showPage5+0xc4>)
 8007726:	213c      	movs	r1, #60	; 0x3c
 8007728:	200a      	movs	r0, #10
 800772a:	f7fb fbeb 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 800772e:	463a      	mov	r2, r7
 8007730:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <showPage5+0xc8>)
 8007732:	215a      	movs	r1, #90	; 0x5a
 8007734:	200a      	movs	r0, #10
 8007736:	f7fb fbe5 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 800773a:	463a      	mov	r2, r7
 800773c:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <showPage5+0xcc>)
 800773e:	2178      	movs	r1, #120	; 0x78
 8007740:	200a      	movs	r0, #10
 8007742:	f7fb fbdf 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8007746:	463a      	mov	r2, r7
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <showPage5+0xd0>)
 800774a:	2196      	movs	r1, #150	; 0x96
 800774c:	200a      	movs	r0, #10
 800774e:	f7fb fbd9 	bl	8002f04 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8007752:	2301      	movs	r3, #1
 8007754:	22c3      	movs	r2, #195	; 0xc3
 8007756:	21a2      	movs	r1, #162	; 0xa2
 8007758:	2001      	movs	r0, #1
 800775a:	f7fb fc53 	bl	8003004 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 800775e:	2301      	movs	r3, #1
 8007760:	22c4      	movs	r2, #196	; 0xc4
 8007762:	21a1      	movs	r1, #161	; 0xa1
 8007764:	2002      	movs	r0, #2
 8007766:	f7fb fc4d 	bl	8003004 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 800776a:	2301      	movs	r3, #1
 800776c:	22c4      	movs	r2, #196	; 0xc4
 800776e:	21a1      	movs	r1, #161	; 0xa1
 8007770:	2003      	movs	r0, #3
 8007772:	f7fb fc47 	bl	8003004 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8007776:	2301      	movs	r3, #1
 8007778:	22c3      	movs	r2, #195	; 0xc3
 800777a:	21a2      	movs	r1, #162	; 0xa2
 800777c:	2004      	movs	r0, #4
 800777e:	f7fb fc41 	bl	8003004 <lcdVLine>
}
 8007782:	bf00      	nop
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	0801b5b0 	.word	0x0801b5b0
 8007790:	08039ec4 	.word	0x08039ec4
 8007794:	0803aa0c 	.word	0x0803aa0c
 8007798:	080374dc 	.word	0x080374dc
 800779c:	08037958 	.word	0x08037958
 80077a0:	080389b4 	.word	0x080389b4
 80077a4:	0803943c 	.word	0x0803943c
 80077a8:	0803bfd4 	.word	0x0803bfd4

080077ac <showPage6>:
void showPage6(void){
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80077b2:	2301      	movs	r3, #1
 80077b4:	22ea      	movs	r2, #234	; 0xea
 80077b6:	21c9      	movs	r1, #201	; 0xc9
 80077b8:	2001      	movs	r0, #1
 80077ba:	f7fb fc23 	bl	8003004 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 80077be:	2301      	movs	r3, #1
 80077c0:	22eb      	movs	r2, #235	; 0xeb
 80077c2:	21c8      	movs	r1, #200	; 0xc8
 80077c4:	2002      	movs	r0, #2
 80077c6:	f7fb fc1d 	bl	8003004 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 80077ca:	2301      	movs	r3, #1
 80077cc:	22eb      	movs	r2, #235	; 0xeb
 80077ce:	21c8      	movs	r1, #200	; 0xc8
 80077d0:	2003      	movs	r0, #3
 80077d2:	f7fb fc17 	bl	8003004 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80077d6:	2301      	movs	r3, #1
 80077d8:	22ea      	movs	r2, #234	; 0xea
 80077da:	21c9      	movs	r1, #201	; 0xc9
 80077dc:	2004      	movs	r0, #4
 80077de:	f7fb fc11 	bl	8003004 <lcdVLine>
		lcdRect(0,399,25,80,1);
 80077e2:	2301      	movs	r3, #1
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	2350      	movs	r3, #80	; 0x50
 80077e8:	2219      	movs	r2, #25
 80077ea:	f240 118f 	movw	r1, #399	; 0x18f
 80077ee:	2000      	movs	r0, #0
 80077f0:	f7fc f99a 	bl	8003b28 <lcdRect>
		lcdRect(0,399,120,180,1);
 80077f4:	2301      	movs	r3, #1
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	23b4      	movs	r3, #180	; 0xb4
 80077fa:	2278      	movs	r2, #120	; 0x78
 80077fc:	f240 118f 	movw	r1, #399	; 0x18f
 8007800:	2000      	movs	r0, #0
 8007802:	f7fc f991 	bl	8003b28 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8007806:	2301      	movs	r3, #1
 8007808:	9302      	str	r3, [sp, #8]
 800780a:	2300      	movs	r3, #0
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	2303      	movs	r3, #3
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2332      	movs	r3, #50	; 0x32
 8007814:	220a      	movs	r2, #10
 8007816:	2132      	movs	r1, #50	; 0x32
 8007818:	200a      	movs	r0, #10
 800781a:	f7fc f9aa 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 800781e:	2301      	movs	r3, #1
 8007820:	9302      	str	r3, [sp, #8]
 8007822:	2301      	movs	r3, #1
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	2303      	movs	r3, #3
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2332      	movs	r3, #50	; 0x32
 800782c:	220a      	movs	r2, #10
 800782e:	2164      	movs	r1, #100	; 0x64
 8007830:	203c      	movs	r0, #60	; 0x3c
 8007832:	f7fc f99e 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8007836:	2301      	movs	r3, #1
 8007838:	9302      	str	r3, [sp, #8]
 800783a:	2302      	movs	r3, #2
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	2303      	movs	r3, #3
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2332      	movs	r3, #50	; 0x32
 8007844:	220a      	movs	r2, #10
 8007846:	2196      	movs	r1, #150	; 0x96
 8007848:	206e      	movs	r0, #110	; 0x6e
 800784a:	f7fc f992 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 800784e:	2301      	movs	r3, #1
 8007850:	9302      	str	r3, [sp, #8]
 8007852:	2303      	movs	r3, #3
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	2303      	movs	r3, #3
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	2332      	movs	r3, #50	; 0x32
 800785c:	220a      	movs	r2, #10
 800785e:	21c8      	movs	r1, #200	; 0xc8
 8007860:	20a0      	movs	r0, #160	; 0xa0
 8007862:	f7fc f986 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8007866:	2301      	movs	r3, #1
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	2304      	movs	r3, #4
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2303      	movs	r3, #3
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2332      	movs	r3, #50	; 0x32
 8007874:	220a      	movs	r2, #10
 8007876:	21fa      	movs	r1, #250	; 0xfa
 8007878:	20d2      	movs	r0, #210	; 0xd2
 800787a:	f7fc f97a 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 800787e:	2301      	movs	r3, #1
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	2305      	movs	r3, #5
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	2303      	movs	r3, #3
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	2332      	movs	r3, #50	; 0x32
 800788c:	220a      	movs	r2, #10
 800788e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007892:	f44f 7082 	mov.w	r0, #260	; 0x104
 8007896:	f7fc f96c 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 800789a:	2301      	movs	r3, #1
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	2306      	movs	r3, #6
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	2303      	movs	r3, #3
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	2332      	movs	r3, #50	; 0x32
 80078a8:	220a      	movs	r2, #10
 80078aa:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80078ae:	f44f 709b 	mov.w	r0, #310	; 0x136
 80078b2:	f7fc f95e 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 80078b6:	2301      	movs	r3, #1
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	2307      	movs	r3, #7
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	2303      	movs	r3, #3
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	2364      	movs	r3, #100	; 0x64
 80078c4:	223c      	movs	r2, #60	; 0x3c
 80078c6:	2132      	movs	r1, #50	; 0x32
 80078c8:	200a      	movs	r0, #10
 80078ca:	f7fc f952 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 80078ce:	2301      	movs	r3, #1
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	2308      	movs	r3, #8
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	2303      	movs	r3, #3
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	2364      	movs	r3, #100	; 0x64
 80078dc:	223c      	movs	r2, #60	; 0x3c
 80078de:	2164      	movs	r1, #100	; 0x64
 80078e0:	203c      	movs	r0, #60	; 0x3c
 80078e2:	f7fc f946 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 80078e6:	2301      	movs	r3, #1
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	2309      	movs	r3, #9
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	2303      	movs	r3, #3
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2364      	movs	r3, #100	; 0x64
 80078f4:	223c      	movs	r2, #60	; 0x3c
 80078f6:	2196      	movs	r1, #150	; 0x96
 80078f8:	206e      	movs	r0, #110	; 0x6e
 80078fa:	f7fc f93a 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 80078fe:	2301      	movs	r3, #1
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	230a      	movs	r3, #10
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	2303      	movs	r3, #3
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2364      	movs	r3, #100	; 0x64
 800790c:	223c      	movs	r2, #60	; 0x3c
 800790e:	21c8      	movs	r1, #200	; 0xc8
 8007910:	20a0      	movs	r0, #160	; 0xa0
 8007912:	f7fc f92e 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8007916:	2301      	movs	r3, #1
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	230b      	movs	r3, #11
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2303      	movs	r3, #3
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2364      	movs	r3, #100	; 0x64
 8007924:	223c      	movs	r2, #60	; 0x3c
 8007926:	21fa      	movs	r1, #250	; 0xfa
 8007928:	20d2      	movs	r0, #210	; 0xd2
 800792a:	f7fc f922 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 800792e:	2301      	movs	r3, #1
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	230c      	movs	r3, #12
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	2303      	movs	r3, #3
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	2364      	movs	r3, #100	; 0x64
 800793c:	223c      	movs	r2, #60	; 0x3c
 800793e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007942:	f44f 7082 	mov.w	r0, #260	; 0x104
 8007946:	f7fc f914 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 800794a:	2301      	movs	r3, #1
 800794c:	9302      	str	r3, [sp, #8]
 800794e:	230d      	movs	r3, #13
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	2303      	movs	r3, #3
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	2364      	movs	r3, #100	; 0x64
 8007958:	223c      	movs	r2, #60	; 0x3c
 800795a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800795e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8007962:	f7fc f906 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8007966:	2301      	movs	r3, #1
 8007968:	9302      	str	r3, [sp, #8]
 800796a:	230e      	movs	r3, #14
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	2303      	movs	r3, #3
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2396      	movs	r3, #150	; 0x96
 8007974:	226e      	movs	r2, #110	; 0x6e
 8007976:	2132      	movs	r1, #50	; 0x32
 8007978:	200a      	movs	r0, #10
 800797a:	f7fc f8fa 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 800797e:	2301      	movs	r3, #1
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	230f      	movs	r3, #15
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	2303      	movs	r3, #3
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	2396      	movs	r3, #150	; 0x96
 800798c:	226e      	movs	r2, #110	; 0x6e
 800798e:	2164      	movs	r1, #100	; 0x64
 8007990:	203c      	movs	r0, #60	; 0x3c
 8007992:	f7fc f8ee 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8007996:	2301      	movs	r3, #1
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	2310      	movs	r3, #16
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	2303      	movs	r3, #3
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	2396      	movs	r3, #150	; 0x96
 80079a4:	226e      	movs	r2, #110	; 0x6e
 80079a6:	2196      	movs	r1, #150	; 0x96
 80079a8:	206e      	movs	r0, #110	; 0x6e
 80079aa:	f7fc f8e2 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 80079ae:	2301      	movs	r3, #1
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	2311      	movs	r3, #17
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	2303      	movs	r3, #3
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2396      	movs	r3, #150	; 0x96
 80079bc:	226e      	movs	r2, #110	; 0x6e
 80079be:	21c8      	movs	r1, #200	; 0xc8
 80079c0:	20a0      	movs	r0, #160	; 0xa0
 80079c2:	f7fc f8d6 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 80079c6:	2301      	movs	r3, #1
 80079c8:	9302      	str	r3, [sp, #8]
 80079ca:	2312      	movs	r3, #18
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	2303      	movs	r3, #3
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	2396      	movs	r3, #150	; 0x96
 80079d4:	226e      	movs	r2, #110	; 0x6e
 80079d6:	21fa      	movs	r1, #250	; 0xfa
 80079d8:	20d2      	movs	r0, #210	; 0xd2
 80079da:	f7fc f8ca 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 80079de:	2301      	movs	r3, #1
 80079e0:	9302      	str	r3, [sp, #8]
 80079e2:	2313      	movs	r3, #19
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	2303      	movs	r3, #3
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2396      	movs	r3, #150	; 0x96
 80079ec:	226e      	movs	r2, #110	; 0x6e
 80079ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80079f2:	f44f 7082 	mov.w	r0, #260	; 0x104
 80079f6:	f7fc f8bc 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 80079fa:	2301      	movs	r3, #1
 80079fc:	9302      	str	r3, [sp, #8]
 80079fe:	2314      	movs	r3, #20
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	2303      	movs	r3, #3
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2396      	movs	r3, #150	; 0x96
 8007a08:	226e      	movs	r2, #110	; 0x6e
 8007a0a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007a0e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8007a12:	f7fc f8ae 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8007a16:	2304      	movs	r3, #4
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	23c8      	movs	r3, #200	; 0xc8
 8007a20:	22a0      	movs	r2, #160	; 0xa0
 8007a22:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007a26:	200a      	movs	r0, #10
 8007a28:	f7fc f8a3 	bl	8003b72 <lcdRect2>
}
 8007a2c:	bf00      	nop
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <showPage>:

void showPage(uint8_t pageNum){
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	2b05      	cmp	r3, #5
 8007a42:	d821      	bhi.n	8007a88 <showPage+0x54>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <showPage+0x18>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a6b 	.word	0x08007a6b
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a77 	.word	0x08007a77
 8007a5c:	08007a7d 	.word	0x08007a7d
 8007a60:	08007a83 	.word	0x08007a83
	case 0:
		showPage1();
 8007a64:	f7ff fd3a 	bl	80074dc <showPage1>
		break;
 8007a68:	e00e      	b.n	8007a88 <showPage+0x54>
	case 1:
		showPage2();
 8007a6a:	f7ff fd87 	bl	800757c <showPage2>
		break;
 8007a6e:	e00b      	b.n	8007a88 <showPage+0x54>
	case 2:
		showPage3();
 8007a70:	f7ff fdbe 	bl	80075f0 <showPage3>
		break;
 8007a74:	e008      	b.n	8007a88 <showPage+0x54>
	case 3:
		showPage4();
 8007a76:	f7ff fdf5 	bl	8007664 <showPage4>
		break;
 8007a7a:	e005      	b.n	8007a88 <showPage+0x54>
	case 4:
		showPage5();
 8007a7c:	f7ff fe2c 	bl	80076d8 <showPage5>
		break;
 8007a80:	e002      	b.n	8007a88 <showPage+0x54>
	case 5:
		showPage6();
 8007a82:	f7ff fe93 	bl	80077ac <showPage6>
		break;
 8007a86:	bf00      	nop
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8007a94:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <setDefaultClbcks+0x28>)
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <setDefaultClbcks+0x2c>)
 8007a98:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <setDefaultClbcks+0x30>)
 8007a9c:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <setDefaultClbcks+0x34>)
 8007a9e:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <setDefaultClbcks+0x38>)
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <setDefaultClbcks+0x3c>)
 8007aa4:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <setDefaultClbcks+0x40>)
 8007aa8:	4a0a      	ldr	r2, [pc, #40]	; (8007ad4 <setDefaultClbcks+0x44>)
 8007aaa:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8007aac:	bf00      	nop
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20002660 	.word	0x20002660
 8007abc:	08002a69 	.word	0x08002a69
 8007ac0:	200026a8 	.word	0x200026a8
 8007ac4:	08002a79 	.word	0x08002a79
 8007ac8:	20002714 	.word	0x20002714
 8007acc:	08007469 	.word	0x08007469
 8007ad0:	200026cc 	.word	0x200026cc
 8007ad4:	080074a1 	.word	0x080074a1

08007ad8 <settingsSetup>:


void settingsSetup(void){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007adc:	f7ff ffd8 	bl	8007a90 <setDefaultClbcks>
}
 8007ae0:	bf00      	nop
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <settingsMain>:

void settingsMain(void){
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	609a      	str	r2, [r3, #8]
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	611a      	str	r2, [r3, #16]
 8007afc:	615a      	str	r2, [r3, #20]
 8007afe:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <settingsMain+0x30>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff ff95 	bl	8007a34 <showPage>

}
 8007b0a:	bf00      	nop
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20005d7d 	.word	0x20005d7d

08007b18 <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
	stwStart();
 8007b1c:	f7fc fcba 	bl	8004494 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <startStopwatch+0x18>)
 8007b22:	4a04      	ldr	r2, [pc, #16]	; (8007b34 <startStopwatch+0x1c>)
 8007b24:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8007b26:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <startStopwatch+0x20>)
 8007b28:	4a04      	ldr	r2, [pc, #16]	; (8007b3c <startStopwatch+0x24>)
 8007b2a:	611a      	str	r2, [r3, #16]
}
 8007b2c:	bf00      	nop
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20002684 	.word	0x20002684
 8007b34:	08007b41 	.word	0x08007b41
 8007b38:	200026f0 	.word	0x200026f0
 8007b3c:	08007b81 	.word	0x08007b81

08007b40 <stopStopwatch>:
void stopStopwatch(){
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
	stwStop();
 8007b44:	f7fc fccc 	bl	80044e0 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8007b48:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <stopStopwatch+0x18>)
 8007b4a:	4a04      	ldr	r2, [pc, #16]	; (8007b5c <stopStopwatch+0x1c>)
 8007b4c:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8007b4e:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <stopStopwatch+0x20>)
 8007b50:	4a04      	ldr	r2, [pc, #16]	; (8007b64 <stopStopwatch+0x24>)
 8007b52:	611a      	str	r2, [r3, #16]
}
 8007b54:	bf00      	nop
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20002684 	.word	0x20002684
 8007b5c:	08007b19 	.word	0x08007b19
 8007b60:	200026f0 	.word	0x200026f0
 8007b64:	08007b69 	.word	0x08007b69

08007b68 <resetStopwatch>:
void resetStopwatch(){
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
	stwClear();
 8007b6c:	f7fc fcc8 	bl	8004500 <stwClear>
	stwT.clear();
 8007b70:	4b02      	ldr	r3, [pc, #8]	; (8007b7c <resetStopwatch+0x14>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4798      	blx	r3
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	200001a4 	.word	0x200001a4

08007b80 <saveStopwatch>:
void saveStopwatch(){
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
	stwSave();
 8007b84:	f7fc fcd0 	bl	8004528 <stwSave>
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8007b90:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <setDefaultClbcks+0x48>)
 8007b92:	4a11      	ldr	r2, [pc, #68]	; (8007bd8 <setDefaultClbcks+0x4c>)
 8007b94:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8007b96:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <setDefaultClbcks+0x50>)
 8007b98:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <setDefaultClbcks+0x54>)
 8007b9a:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8007b9c:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <setDefaultClbcks+0x58>)
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <setDefaultClbcks+0x5c>)
 8007ba0:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <setDefaultClbcks+0x60>)
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <setDefaultClbcks+0x64>)
 8007bb2:	4a10      	ldr	r2, [pc, #64]	; (8007bf4 <setDefaultClbcks+0x68>)
 8007bb4:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <setDefaultClbcks+0x6c>)
 8007bb8:	4a10      	ldr	r2, [pc, #64]	; (8007bfc <setDefaultClbcks+0x70>)
 8007bba:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8007bbc:	e005      	b.n	8007bca <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <setDefaultClbcks+0x64>)
 8007bc0:	4a0f      	ldr	r2, [pc, #60]	; (8007c00 <setDefaultClbcks+0x74>)
 8007bc2:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <setDefaultClbcks+0x6c>)
 8007bc6:	4a0f      	ldr	r2, [pc, #60]	; (8007c04 <setDefaultClbcks+0x78>)
 8007bc8:	611a      	str	r2, [r3, #16]
}
 8007bca:	bf00      	nop
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	20002714 	.word	0x20002714
 8007bd8:	08002a89 	.word	0x08002a89
 8007bdc:	20002660 	.word	0x20002660
 8007be0:	08002a69 	.word	0x08002a69
 8007be4:	200026a8 	.word	0x200026a8
 8007be8:	08002a79 	.word	0x08002a79
 8007bec:	20005b8c 	.word	0x20005b8c
 8007bf0:	20002684 	.word	0x20002684
 8007bf4:	08007b41 	.word	0x08007b41
 8007bf8:	200026f0 	.word	0x200026f0
 8007bfc:	08007b81 	.word	0x08007b81
 8007c00:	08007b19 	.word	0x08007b19
 8007c04:	08007b69 	.word	0x08007b69

08007c08 <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	099b      	lsrs	r3, r3, #6
 8007c14:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <convertTicks+0x98>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	0993      	lsrs	r3, r2, #6
 8007c24:	491e      	ldr	r1, [pc, #120]	; (8007ca0 <convertTicks+0x98>)
 8007c26:	fba1 1303 	umull	r1, r3, r1, r3
 8007c2a:	089b      	lsrs	r3, r3, #2
 8007c2c:	491d      	ldr	r1, [pc, #116]	; (8007ca4 <convertTicks+0x9c>)
 8007c2e:	fb01 f303 	mul.w	r3, r1, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <convertTicks+0xa0>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <convertTicks+0xa0>)
 8007c44:	fba3 1302 	umull	r1, r3, r3, r2
 8007c48:	09db      	lsrs	r3, r3, #7
 8007c4a:	f241 7170 	movw	r1, #6000	; 0x1770
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	4a15      	ldr	r2, [pc, #84]	; (8007cac <convertTicks+0xa4>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4b12      	ldr	r3, [pc, #72]	; (8007cac <convertTicks+0xa4>)
 8007c64:	fba3 1302 	umull	r1, r3, r3, r2
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	2164      	movs	r1, #100	; 0x64
 8007c6c:	fb01 f303 	mul.w	r3, r1, r3
 8007c70:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	7b3a      	ldrb	r2, [r7, #12]
 8007c7e:	f362 0307 	bfi	r3, r2, #0, #8
 8007c82:	7b7a      	ldrb	r2, [r7, #13]
 8007c84:	f362 230f 	bfi	r3, r2, #8, #8
 8007c88:	7bba      	ldrb	r2, [r7, #14]
 8007c8a:	f362 4317 	bfi	r3, r2, #16, #8
 8007c8e:	7bfa      	ldrb	r2, [r7, #15]
 8007c90:	f362 631f 	bfi	r3, r2, #24, #8
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	002e9a77 	.word	0x002e9a77
 8007ca4:	00057e40 	.word	0x00057e40
 8007ca8:	057619f1 	.word	0x057619f1
 8007cac:	51eb851f 	.word	0x51eb851f

08007cb0 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8007cba:	793b      	ldrb	r3, [r7, #4]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	797b      	ldrb	r3, [r7, #5]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	79bb      	ldrb	r3, [r7, #6]
 8007cc4:	79fa      	ldrb	r2, [r7, #7]
 8007cc6:	9201      	str	r2, [sp, #4]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	460a      	mov	r2, r1
 8007cce:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <stwString+0x30>)
 8007cd0:	6838      	ldr	r0, [r7, #0]
 8007cd2:	f00b fed9 	bl	8013a88 <siprintf>
	return str;
 8007cd6:	683b      	ldr	r3, [r7, #0]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	0801b678 	.word	0x0801b678

08007ce4 <updateStopwatch>:
void updateStopwatch(void){
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 8007ce8:	4b22      	ldr	r3, [pc, #136]	; (8007d74 <updateStopwatch+0x90>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007cf0:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <updateStopwatch+0x94>)
 8007cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8007cf6:	441a      	add	r2, r3
 8007cf8:	12d2      	asrs	r2, r2, #11
 8007cfa:	17db      	asrs	r3, r3, #31
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <updateStopwatch+0x98>)
 8007d02:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 8007d04:	4b1b      	ldr	r3, [pc, #108]	; (8007d74 <updateStopwatch+0x90>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <updateStopwatch+0x94>)
 8007d10:	fb83 1302 	smull	r1, r3, r3, r2
 8007d14:	4413      	add	r3, r2
 8007d16:	12d9      	asrs	r1, r3, #11
 8007d18:	17d3      	asrs	r3, r2, #31
 8007d1a:	1acb      	subs	r3, r1, r3
 8007d1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <updateStopwatch+0x9c>)
 8007d28:	fb82 1203 	smull	r1, r2, r2, r3
 8007d2c:	441a      	add	r2, r3
 8007d2e:	1152      	asrs	r2, r2, #5
 8007d30:	17db      	asrs	r3, r3, #31
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <updateStopwatch+0x98>)
 8007d38:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <updateStopwatch+0x90>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007d42:	461a      	mov	r2, r3
 8007d44:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <updateStopwatch+0x9c>)
 8007d46:	fb83 1302 	smull	r1, r3, r3, r2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	1159      	asrs	r1, r3, #5
 8007d4e:	17d3      	asrs	r3, r2, #31
 8007d50:	1ac9      	subs	r1, r1, r3
 8007d52:	460b      	mov	r3, r1
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	1a5b      	subs	r3, r3, r1
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	1ad1      	subs	r1, r2, r3
 8007d5c:	b2ca      	uxtb	r2, r1
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <updateStopwatch+0x98>)
 8007d60:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 8007d62:	f7fc fbf1 	bl	8004548 <getStw>
 8007d66:	4603      	mov	r3, r0
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <updateStopwatch+0x98>)
 8007d6c:	70da      	strb	r2, [r3, #3]
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20005b8c 	.word	0x20005b8c
 8007d78:	91a2b3c5 	.word	0x91a2b3c5
 8007d7c:	20005d80 	.word	0x20005d80
 8007d80:	88888889 	.word	0x88888889

08007d84 <stwSetup>:

void stwSetup(void){
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007d88:	f7ff ff00 	bl	8007b8c <setDefaultClbcks>
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b091      	sub	sp, #68	; 0x44
 8007d94:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 8007d96:	2300      	movs	r3, #0
 8007d98:	623b      	str	r3, [r7, #32]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8007d9e:	4b7c      	ldr	r3, [pc, #496]	; (8007f90 <stwMain+0x200>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	4b7a      	ldr	r3, [pc, #488]	; (8007f90 <stwMain+0x200>)
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	f107 0020 	add.w	r0, r7, #32
 8007dac:	4979      	ldr	r1, [pc, #484]	; (8007f94 <stwMain+0x204>)
 8007dae:	f00b fe6b 	bl	8013a88 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8007db2:	2314      	movs	r3, #20
 8007db4:	b29c      	uxth	r4, r3
 8007db6:	f107 0320 	add.w	r3, r7, #32
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7f8 fa22 	bl	8000204 <strlen>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	fb14 f303 	smulbb	r3, r4, r3
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007dce:	b298      	uxth	r0, r3
 8007dd0:	f107 0220 	add.w	r2, r7, #32
 8007dd4:	4b70      	ldr	r3, [pc, #448]	; (8007f98 <stwMain+0x208>)
 8007dd6:	210a      	movs	r1, #10
 8007dd8:	f7fb f894 	bl	8002f04 <lcdPutStr>

	updateStopwatch();
 8007ddc:	f7ff ff82 	bl	8007ce4 <updateStopwatch>

	char tempStr2[30] = {0};
 8007de0:	2300      	movs	r3, #0
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	609a      	str	r2, [r3, #8]
 8007dee:	60da      	str	r2, [r3, #12]
 8007df0:	611a      	str	r2, [r3, #16]
 8007df2:	615a      	str	r2, [r3, #20]
 8007df4:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8007df6:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <stwMain+0x20c>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8007dfe:	4b67      	ldr	r3, [pc, #412]	; (8007f9c <stwMain+0x20c>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	463b      	mov	r3, r7
 8007e06:	4966      	ldr	r1, [pc, #408]	; (8007fa0 <stwMain+0x210>)
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f00b fe3d 	bl	8013a88 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8007e0e:	463a      	mov	r2, r7
 8007e10:	4b61      	ldr	r3, [pc, #388]	; (8007f98 <stwMain+0x208>)
 8007e12:	215f      	movs	r1, #95	; 0x5f
 8007e14:	2014      	movs	r0, #20
 8007e16:	f7fb f875 	bl	8002f04 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8007e1a:	4b60      	ldr	r3, [pc, #384]	; (8007f9c <stwMain+0x20c>)
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4b5e      	ldr	r3, [pc, #376]	; (8007f9c <stwMain+0x20c>)
 8007e22:	789b      	ldrb	r3, [r3, #2]
 8007e24:	4619      	mov	r1, r3
 8007e26:	4b5d      	ldr	r3, [pc, #372]	; (8007f9c <stwMain+0x20c>)
 8007e28:	78db      	ldrb	r3, [r3, #3]
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	495c      	ldr	r1, [pc, #368]	; (8007fa4 <stwMain+0x214>)
 8007e32:	f00b fe29 	bl	8013a88 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8007e36:	2322      	movs	r3, #34	; 0x22
 8007e38:	b29c      	uxth	r4, r3
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7f8 f9e1 	bl	8000204 <strlen>
 8007e42:	4603      	mov	r3, r0
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	fb14 f303 	smulbb	r3, r4, r3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8007e50:	b298      	uxth	r0, r3
 8007e52:	463a      	mov	r2, r7
 8007e54:	4b54      	ldr	r3, [pc, #336]	; (8007fa8 <stwMain+0x218>)
 8007e56:	214c      	movs	r1, #76	; 0x4c
 8007e58:	f7fb f854 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e62:	e08b      	b.n	8007f7c <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8007e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e68:	4a50      	ldr	r2, [pc, #320]	; (8007fac <stwMain+0x21c>)
 8007e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d07f      	beq.n	8007f72 <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8007e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	463b      	mov	r3, r7
 8007e7a:	494d      	ldr	r1, [pc, #308]	; (8007fb0 <stwMain+0x220>)
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f00b fe03 	bl	8013a88 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8007e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	3b7e      	subs	r3, #126	; 0x7e
 8007e8c:	b2d9      	uxtb	r1, r3
 8007e8e:	463a      	mov	r2, r7
 8007e90:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <stwMain+0x224>)
 8007e92:	2000      	movs	r0, #0
 8007e94:	f7fb f836 	bl	8002f04 <lcdPutStr>
			if(i>0){
 8007e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d022      	beq.n	8007ee6 <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8007ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	3b7e      	subs	r3, #126	; 0x7e
 8007eaa:	b2dc      	uxtb	r4, r3
 8007eac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007eb0:	4a3e      	ldr	r2, [pc, #248]	; (8007fac <stwMain+0x21c>)
 8007eb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	493b      	ldr	r1, [pc, #236]	; (8007fac <stwMain+0x21c>)
 8007ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fe9f 	bl	8007c08 <convertTicks>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ece:	463b      	mov	r3, r7
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed4:	f7ff feec 	bl	8007cb0 <stwString>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b36      	ldr	r3, [pc, #216]	; (8007fb4 <stwMain+0x224>)
 8007edc:	4621      	mov	r1, r4
 8007ede:	2037      	movs	r0, #55	; 0x37
 8007ee0:	f7fb f810 	bl	8002f04 <lcdPutStr>
 8007ee4:	e01a      	b.n	8007f1c <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8007ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b7e      	subs	r3, #126	; 0x7e
 8007ef0:	b2dc      	uxtb	r4, r3
 8007ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ef6:	4a2d      	ldr	r2, [pc, #180]	; (8007fac <stwMain+0x21c>)
 8007ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff fe83 	bl	8007c08 <convertTicks>
 8007f02:	4603      	mov	r3, r0
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f06:	463b      	mov	r3, r7
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f0c:	f7ff fed0 	bl	8007cb0 <stwString>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <stwMain+0x224>)
 8007f14:	4621      	mov	r1, r4
 8007f16:	2037      	movs	r0, #55	; 0x37
 8007f18:	f7fa fff4 	bl	8002f04 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4926      	ldr	r1, [pc, #152]	; (8007fb8 <stwMain+0x228>)
 8007f20:	4618      	mov	r0, r3
 8007f22:	f00b fdb1 	bl	8013a88 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8007f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	3b7e      	subs	r3, #126	; 0x7e
 8007f30:	b2d9      	uxtb	r1, r3
 8007f32:	463a      	mov	r2, r7
 8007f34:	4b1f      	ldr	r3, [pc, #124]	; (8007fb4 <stwMain+0x224>)
 8007f36:	20a5      	movs	r0, #165	; 0xa5
 8007f38:	f7fa ffe4 	bl	8002f04 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8007f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	3b7e      	subs	r3, #126	; 0x7e
 8007f46:	b2dc      	uxtb	r4, r3
 8007f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f4c:	4a17      	ldr	r2, [pc, #92]	; (8007fac <stwMain+0x21c>)
 8007f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fe58 	bl	8007c08 <convertTicks>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f62:	f7ff fea5 	bl	8007cb0 <stwString>
 8007f66:	4602      	mov	r2, r0
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <stwMain+0x224>)
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	20e1      	movs	r0, #225	; 0xe1
 8007f6e:	f7fa ffc9 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8007f72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f76:	3301      	adds	r3, #1
 8007f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f80:	2b06      	cmp	r3, #6
 8007f82:	f67f af6f 	bls.w	8007e64 <stwMain+0xd4>
		}
	}
}
 8007f86:	bf00      	nop
 8007f88:	bf00      	nop
 8007f8a:	373c      	adds	r7, #60	; 0x3c
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}
 8007f90:	200057f0 	.word	0x200057f0
 8007f94:	0801b68c 	.word	0x0801b68c
 8007f98:	0803e8c4 	.word	0x0803e8c4
 8007f9c:	20005d80 	.word	0x20005d80
 8007fa0:	0801b698 	.word	0x0801b698
 8007fa4:	0801b6a0 	.word	0x0801b6a0
 8007fa8:	0804072c 	.word	0x0804072c
 8007fac:	200001a4 	.word	0x200001a4
 8007fb0:	0801b6b0 	.word	0x0801b6b0
 8007fb4:	0803de3c 	.word	0x0803de3c
 8007fb8:	0801b6b8 	.word	0x0801b6b8

08007fbc <setDefaultClbcks>:
#include "contextMenu.h"

// fonts
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <setDefaultClbcks+0x20>)
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <setDefaultClbcks+0x24>)
 8007fc4:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <setDefaultClbcks+0x28>)
 8007fc8:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <setDefaultClbcks+0x2c>)
 8007fca:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <setDefaultClbcks+0x30>)
 8007fce:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <setDefaultClbcks+0x34>)
 8007fd0:	611a      	str	r2, [r3, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	200026f0 	.word	0x200026f0
 8007fe0:	080058fd 	.word	0x080058fd
 8007fe4:	20002660 	.word	0x20002660
 8007fe8:	08002a69 	.word	0x08002a69
 8007fec:	200026a8 	.word	0x200026a8
 8007ff0:	08002a79 	.word	0x08002a79

08007ff4 <setTimeAction>:

static void setTimeAction(void){
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8007ff8:	4802      	ldr	r0, [pc, #8]	; (8008004 <setTimeAction+0x10>)
 8007ffa:	f7fa fd51 	bl	8002aa0 <guiApplyView>
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200002f0 	.word	0x200002f0

08008008 <setDateAction>:
static void setDateAction(void){
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 800800c:	4802      	ldr	r0, [pc, #8]	; (8008018 <setDateAction+0x10>)
 800800e:	f7fa fd47 	bl	8002aa0 <guiApplyView>
}
 8008012:	bf00      	nop
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	200002bc 	.word	0x200002bc

0800801c <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8008020:	f7ff ffcc 	bl	8007fbc <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8008024:	4802      	ldr	r0, [pc, #8]	; (8008030 <faceSetup+0x14>)
 8008026:	f7fd fbe3 	bl	80057f0 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 800802a:	bf00      	nop
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	08007fbd 	.word	0x08007fbd

08008034 <faceMain>:

void faceMain(void){
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b0b1      	sub	sp, #196	; 0xc4
 8008038:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	60da      	str	r2, [r3, #12]
 800804e:	611a      	str	r2, [r3, #16]
 8008050:	615a      	str	r2, [r3, #20]
 8008052:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8008054:	4b83      	ldr	r3, [pc, #524]	; (8008264 <faceMain+0x230>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f7f8 fa95 	bl	8000588 <__aeabi_f2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8008066:	4980      	ldr	r1, [pc, #512]	; (8008268 <faceMain+0x234>)
 8008068:	f00b fd0e 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 800806c:	2314      	movs	r3, #20
 800806e:	b29c      	uxth	r4, r3
 8008070:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008074:	4618      	mov	r0, r3
 8008076:	f7f8 f8c5 	bl	8000204 <strlen>
 800807a:	4603      	mov	r3, r0
 800807c:	f1c3 030d 	rsb	r3, r3, #13
 8008080:	b29b      	uxth	r3, r3
 8008082:	fb14 f303 	smulbb	r3, r4, r3
 8008086:	b29b      	uxth	r3, r3
 8008088:	3323      	adds	r3, #35	; 0x23
 800808a:	b298      	uxth	r0, r3
 800808c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8008090:	4b76      	ldr	r3, [pc, #472]	; (800826c <faceMain+0x238>)
 8008092:	210e      	movs	r1, #14
 8008094:	f7fa ff36 	bl	8002f04 <lcdPutStr>
	char baroStr[30] = {0};
 8008098:	2300      	movs	r3, #0
 800809a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800809e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	605a      	str	r2, [r3, #4]
 80080a8:	609a      	str	r2, [r3, #8]
 80080aa:	60da      	str	r2, [r3, #12]
 80080ac:	611a      	str	r2, [r3, #16]
 80080ae:	615a      	str	r2, [r3, #20]
 80080b0:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 80080b2:	4b6c      	ldr	r3, [pc, #432]	; (8008264 <faceMain+0x230>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008270 <faceMain+0x23c>
 80080c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080c6:	ee16 0a90 	vmov	r0, s13
 80080ca:	f7f8 fa5d 	bl	8000588 <__aeabi_f2d>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80080d6:	4967      	ldr	r1, [pc, #412]	; (8008274 <faceMain+0x240>)
 80080d8:	f00b fcd6 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 80080dc:	2314      	movs	r3, #20
 80080de:	b29c      	uxth	r4, r3
 80080e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7f8 f88d 	bl	8000204 <strlen>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f1c3 030d 	rsb	r3, r3, #13
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	fb14 f303 	smulbb	r3, r4, r3
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3323      	adds	r3, #35	; 0x23
 80080fa:	b298      	uxth	r0, r3
 80080fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008100:	4b5a      	ldr	r3, [pc, #360]	; (800826c <faceMain+0x238>)
 8008102:	212a      	movs	r1, #42	; 0x2a
 8008104:	f7fa fefe 	bl	8002f04 <lcdPutStr>

	char fracStr[30] = {0};
 8008108:	2300      	movs	r3, #0
 800810a:	663b      	str	r3, [r7, #96]	; 0x60
 800810c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	605a      	str	r2, [r3, #4]
 8008116:	609a      	str	r2, [r3, #8]
 8008118:	60da      	str	r2, [r3, #12]
 800811a:	611a      	str	r2, [r3, #16]
 800811c:	615a      	str	r2, [r3, #20]
 800811e:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8008120:	2300      	movs	r3, #0
 8008122:	643b      	str	r3, [r7, #64]	; 0x40
 8008124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	605a      	str	r2, [r3, #4]
 800812e:	609a      	str	r2, [r3, #8]
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	611a      	str	r2, [r3, #16]
 8008134:	615a      	str	r2, [r3, #20]
 8008136:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8008138:	2300      	movs	r3, #0
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	611a      	str	r2, [r3, #16]
 800814c:	615a      	str	r2, [r3, #20]
 800814e:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8008150:	4b49      	ldr	r3, [pc, #292]	; (8008278 <faceMain+0x244>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800815a:	4948      	ldr	r1, [pc, #288]	; (800827c <faceMain+0x248>)
 800815c:	4618      	mov	r0, r3
 800815e:	f00b fc93 	bl	8013a88 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8008162:	4b45      	ldr	r3, [pc, #276]	; (8008278 <faceMain+0x244>)
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	461a      	mov	r2, r3
 8008168:	f107 0320 	add.w	r3, r7, #32
 800816c:	4943      	ldr	r1, [pc, #268]	; (800827c <faceMain+0x248>)
 800816e:	4618      	mov	r0, r3
 8008170:	f00b fc8a 	bl	8013a88 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8008174:	4b40      	ldr	r3, [pc, #256]	; (8008278 <faceMain+0x244>)
 8008176:	789b      	ldrb	r3, [r3, #2]
 8008178:	461a      	mov	r2, r3
 800817a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800817e:	493f      	ldr	r1, [pc, #252]	; (800827c <faceMain+0x248>)
 8008180:	4618      	mov	r0, r3
 8008182:	f00b fc81 	bl	8013a88 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8008186:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800818a:	4b3d      	ldr	r3, [pc, #244]	; (8008280 <faceMain+0x24c>)
 800818c:	214c      	movs	r1, #76	; 0x4c
 800818e:	2014      	movs	r0, #20
 8008190:	f7fa feb8 	bl	8002f04 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8008194:	f107 0220 	add.w	r2, r7, #32
 8008198:	4b39      	ldr	r3, [pc, #228]	; (8008280 <faceMain+0x24c>)
 800819a:	214c      	movs	r1, #76	; 0x4c
 800819c:	20aa      	movs	r0, #170	; 0xaa
 800819e:	f7fa feb1 	bl	8002f04 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 80081a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <faceMain+0x250>)
 80081a8:	214c      	movs	r1, #76	; 0x4c
 80081aa:	f240 103b 	movw	r0, #315	; 0x13b
 80081ae:	f7fa fea9 	bl	8002f04 <lcdPutStr>

	char buffString[30] = {0};
 80081b2:	2300      	movs	r3, #0
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
 80081c4:	615a      	str	r2, [r3, #20]
 80081c6:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 80081c8:	463b      	mov	r3, r7
 80081ca:	492f      	ldr	r1, [pc, #188]	; (8008288 <faceMain+0x254>)
 80081cc:	4618      	mov	r0, r3
 80081ce:	f00b fc5b 	bl	8013a88 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <faceMain+0x258>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b2d      	ldr	r3, [pc, #180]	; (8008290 <faceMain+0x25c>)
 80081da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081de:	4b2b      	ldr	r3, [pc, #172]	; (800828c <faceMain+0x258>)
 80081e0:	78db      	ldrb	r3, [r3, #3]
 80081e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80081e6:	4638      	mov	r0, r7
 80081e8:	492a      	ldr	r1, [pc, #168]	; (8008294 <faceMain+0x260>)
 80081ea:	f00b fc4d 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80081ee:	2314      	movs	r3, #20
 80081f0:	b29c      	uxth	r4, r3
 80081f2:	463b      	mov	r3, r7
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7f8 f805 	bl	8000204 <strlen>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f1c3 030d 	rsb	r3, r3, #13
 8008200:	b29b      	uxth	r3, r3
 8008202:	fb14 f303 	smulbb	r3, r4, r3
 8008206:	b29b      	uxth	r3, r3
 8008208:	3323      	adds	r3, #35	; 0x23
 800820a:	b298      	uxth	r0, r3
 800820c:	463a      	mov	r2, r7
 800820e:	4b17      	ldr	r3, [pc, #92]	; (800826c <faceMain+0x238>)
 8008210:	21ae      	movs	r1, #174	; 0xae
 8008212:	f7fa fe77 	bl	8002f04 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8008216:	4b1d      	ldr	r3, [pc, #116]	; (800828c <faceMain+0x258>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <faceMain+0x264>)
 800821e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008222:	4b1a      	ldr	r3, [pc, #104]	; (800828c <faceMain+0x258>)
 8008224:	789b      	ldrb	r3, [r3, #2]
 8008226:	4638      	mov	r0, r7
 8008228:	491a      	ldr	r1, [pc, #104]	; (8008294 <faceMain+0x260>)
 800822a:	f00b fc2d 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800822e:	2314      	movs	r3, #20
 8008230:	b29c      	uxth	r4, r3
 8008232:	463b      	mov	r3, r7
 8008234:	4618      	mov	r0, r3
 8008236:	f7f7 ffe5 	bl	8000204 <strlen>
 800823a:	4603      	mov	r3, r0
 800823c:	f1c3 030d 	rsb	r3, r3, #13
 8008240:	b29b      	uxth	r3, r3
 8008242:	fb14 f303 	smulbb	r3, r4, r3
 8008246:	b29b      	uxth	r3, r3
 8008248:	3323      	adds	r3, #35	; 0x23
 800824a:	b298      	uxth	r0, r3
 800824c:	463a      	mov	r2, r7
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <faceMain+0x238>)
 8008250:	21ca      	movs	r1, #202	; 0xca
 8008252:	f7fa fe57 	bl	8002f04 <lcdPutStr>

	enableCntxMenu();
 8008256:	f7fd fb6d 	bl	8005934 <enableCntxMenu>
}
 800825a:	bf00      	nop
 800825c:	37c4      	adds	r7, #196	; 0xc4
 800825e:	46bd      	mov	sp, r7
 8008260:	bd90      	pop	{r4, r7, pc}
 8008262:	bf00      	nop
 8008264:	20002650 	.word	0x20002650
 8008268:	0801b778 	.word	0x0801b778
 800826c:	08045d74 	.word	0x08045d74
 8008270:	42c80000 	.word	0x42c80000
 8008274:	0801b780 	.word	0x0801b780
 8008278:	200057f0 	.word	0x200057f0
 800827c:	0801b78c 	.word	0x0801b78c
 8008280:	0804d224 	.word	0x0804d224
 8008284:	08047bdc 	.word	0x08047bdc
 8008288:	0801b794 	.word	0x0801b794
 800828c:	20005804 	.word	0x20005804
 8008290:	2000020c 	.word	0x2000020c
 8008294:	0801b7a4 	.word	0x0801b7a4
 8008298:	200001ec 	.word	0x200001ec

0800829c <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <setDefaultClbcks+0x34>)
 80082a2:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <setDefaultClbcks+0x38>)
 80082a4:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <setDefaultClbcks+0x3c>)
 80082a8:	4a0c      	ldr	r2, [pc, #48]	; (80082dc <setDefaultClbcks+0x40>)
 80082aa:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <setDefaultClbcks+0x44>)
 80082ae:	4a0d      	ldr	r2, [pc, #52]	; (80082e4 <setDefaultClbcks+0x48>)
 80082b0:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 80082b2:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <setDefaultClbcks+0x4c>)
 80082b4:	4a0d      	ldr	r2, [pc, #52]	; (80082ec <setDefaultClbcks+0x50>)
 80082b6:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <setDefaultClbcks+0x54>)
 80082ba:	4a0e      	ldr	r2, [pc, #56]	; (80082f4 <setDefaultClbcks+0x58>)
 80082bc:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 80082be:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <setDefaultClbcks+0x5c>)
 80082c0:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <setDefaultClbcks+0x60>)
 80082c2:	611a      	str	r2, [r3, #16]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20002714 	.word	0x20002714
 80082d4:	0800860d 	.word	0x0800860d
 80082d8:	200026f0 	.word	0x200026f0
 80082dc:	080084cd 	.word	0x080084cd
 80082e0:	200026cc 	.word	0x200026cc
 80082e4:	08008619 	.word	0x08008619
 80082e8:	20002660 	.word	0x20002660
 80082ec:	08008585 	.word	0x08008585
 80082f0:	20002684 	.word	0x20002684
 80082f4:	0800849d 	.word	0x0800849d
 80082f8:	200026a8 	.word	0x200026a8
 80082fc:	080084fd 	.word	0x080084fd

08008300 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8008304:	f7ff ffca 	bl	800829c <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <dateInputSetup+0x24>)
 800830a:	789a      	ldrb	r2, [r3, #2]
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <dateInputSetup+0x28>)
 800830e:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <dateInputSetup+0x24>)
 8008312:	785a      	ldrb	r2, [r3, #1]
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <dateInputSetup+0x28>)
 8008316:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <dateInputSetup+0x24>)
 800831a:	78da      	ldrb	r2, [r3, #3]
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <dateInputSetup+0x28>)
 800831e:	709a      	strb	r2, [r3, #2]
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20005804 	.word	0x20005804
 8008328:	20005d88 	.word	0x20005d88

0800832c <dateInputMain>:

void dateInputMain(void){
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b089      	sub	sp, #36	; 0x24
 8008330:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8008332:	2300      	movs	r3, #0
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]
 8008344:	615a      	str	r2, [r3, #20]
 8008346:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8008348:	463b      	mov	r3, r7
 800834a:	494a      	ldr	r1, [pc, #296]	; (8008474 <dateInputMain+0x148>)
 800834c:	4618      	mov	r0, r3
 800834e:	f00b fb9b 	bl	8013a88 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8008352:	4b49      	ldr	r3, [pc, #292]	; (8008478 <dateInputMain+0x14c>)
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	461a      	mov	r2, r3
 8008358:	4b48      	ldr	r3, [pc, #288]	; (800847c <dateInputMain+0x150>)
 800835a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800835e:	4b46      	ldr	r3, [pc, #280]	; (8008478 <dateInputMain+0x14c>)
 8008360:	789b      	ldrb	r3, [r3, #2]
 8008362:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008366:	4638      	mov	r0, r7
 8008368:	4945      	ldr	r1, [pc, #276]	; (8008480 <dateInputMain+0x154>)
 800836a:	f00b fb8d 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800836e:	2314      	movs	r3, #20
 8008370:	b29c      	uxth	r4, r3
 8008372:	463b      	mov	r3, r7
 8008374:	4618      	mov	r0, r3
 8008376:	f7f7 ff45 	bl	8000204 <strlen>
 800837a:	4603      	mov	r3, r0
 800837c:	f1c3 030d 	rsb	r3, r3, #13
 8008380:	b29b      	uxth	r3, r3
 8008382:	fb14 f303 	smulbb	r3, r4, r3
 8008386:	b29b      	uxth	r3, r3
 8008388:	3323      	adds	r3, #35	; 0x23
 800838a:	b298      	uxth	r0, r3
 800838c:	463a      	mov	r2, r7
 800838e:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <dateInputMain+0x158>)
 8008390:	21ae      	movs	r1, #174	; 0xae
 8008392:	f7fa fdb7 	bl	8002f04 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8008396:	4b38      	ldr	r3, [pc, #224]	; (8008478 <dateInputMain+0x14c>)
 8008398:	7818      	ldrb	r0, [r3, #0]
 800839a:	4b37      	ldr	r3, [pc, #220]	; (8008478 <dateInputMain+0x14c>)
 800839c:	7859      	ldrb	r1, [r3, #1]
 800839e:	4b36      	ldr	r3, [pc, #216]	; (8008478 <dateInputMain+0x14c>)
 80083a0:	789b      	ldrb	r3, [r3, #2]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	f000 fcb6 	bl	8008d1c <zellerCongruence>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	4b34      	ldr	r3, [pc, #208]	; (8008488 <dateInputMain+0x15c>)
 80083b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083ba:	4b2f      	ldr	r3, [pc, #188]	; (8008478 <dateInputMain+0x14c>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	4638      	mov	r0, r7
 80083c0:	492f      	ldr	r1, [pc, #188]	; (8008480 <dateInputMain+0x154>)
 80083c2:	f00b fb61 	bl	8013a88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80083c6:	2314      	movs	r3, #20
 80083c8:	b29c      	uxth	r4, r3
 80083ca:	463b      	mov	r3, r7
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7f7 ff19 	bl	8000204 <strlen>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f1c3 030d 	rsb	r3, r3, #13
 80083d8:	b29b      	uxth	r3, r3
 80083da:	fb14 f303 	smulbb	r3, r4, r3
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3323      	adds	r3, #35	; 0x23
 80083e2:	b298      	uxth	r0, r3
 80083e4:	463a      	mov	r2, r7
 80083e6:	4b27      	ldr	r3, [pc, #156]	; (8008484 <dateInputMain+0x158>)
 80083e8:	21ca      	movs	r1, #202	; 0xca
 80083ea:	f7fa fd8b 	bl	8002f04 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 80083ee:	4b27      	ldr	r3, [pc, #156]	; (800848c <dateInputMain+0x160>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	4b26      	ldr	r3, [pc, #152]	; (8008490 <dateInputMain+0x164>)
 80083f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80083fa:	4618      	mov	r0, r3
 80083fc:	4b23      	ldr	r3, [pc, #140]	; (800848c <dateInputMain+0x160>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	4b23      	ldr	r3, [pc, #140]	; (8008490 <dateInputMain+0x164>)
 8008404:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008408:	461a      	mov	r2, r3
 800840a:	4b20      	ldr	r3, [pc, #128]	; (800848c <dateInputMain+0x160>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	4b20      	ldr	r3, [pc, #128]	; (8008494 <dateInputMain+0x168>)
 8008412:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008416:	18d1      	adds	r1, r2, r3
 8008418:	4b1c      	ldr	r3, [pc, #112]	; (800848c <dateInputMain+0x160>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <dateInputMain+0x16c>)
 8008420:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008424:	461a      	mov	r2, r3
 8008426:	2301      	movs	r3, #1
 8008428:	f7fb fa28 	bl	800387c <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <dateInputMain+0x160>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	4b17      	ldr	r3, [pc, #92]	; (8008490 <dateInputMain+0x164>)
 8008434:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008438:	4618      	mov	r0, r3
 800843a:	4b14      	ldr	r3, [pc, #80]	; (800848c <dateInputMain+0x160>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	4b13      	ldr	r3, [pc, #76]	; (8008490 <dateInputMain+0x164>)
 8008442:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008446:	461a      	mov	r2, r3
 8008448:	4b10      	ldr	r3, [pc, #64]	; (800848c <dateInputMain+0x160>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	4b11      	ldr	r3, [pc, #68]	; (8008494 <dateInputMain+0x168>)
 8008450:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008454:	18d1      	adds	r1, r2, r3
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <dateInputMain+0x160>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <dateInputMain+0x16c>)
 800845e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	2301      	movs	r3, #1
 8008466:	f7fb fa09 	bl	800387c <lcdHLine>
}
 800846a:	bf00      	nop
 800846c:	3724      	adds	r7, #36	; 0x24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	0801b864 	.word	0x0801b864
 8008478:	20005d88 	.word	0x20005d88
 800847c:	20000270 	.word	0x20000270
 8008480:	0801b874 	.word	0x0801b874
 8008484:	0804f1ac 	.word	0x0804f1ac
 8008488:	20000250 	.word	0x20000250
 800848c:	20005d84 	.word	0x20005d84
 8008490:	200002a4 	.word	0x200002a4
 8008494:	200002b4 	.word	0x200002b4
 8008498:	200002ac 	.word	0x200002ac

0800849c <cursorNext>:

static void cursorNext(void){
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <cursorNext+0x2c>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d806      	bhi.n	80084b6 <cursorNext+0x1a>
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <cursorNext+0x2c>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <cursorNext+0x2c>)
 80084b2:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80084b4:	e002      	b.n	80084bc <cursorNext+0x20>
	else curPosition = 0;
 80084b6:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <cursorNext+0x2c>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20005d84 	.word	0x20005d84

080084cc <cursorPrev>:
static void cursorPrev(void){
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <cursorPrev+0x2c>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <cursorPrev+0x1a>
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <cursorPrev+0x2c>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	3b01      	subs	r3, #1
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <cursorPrev+0x2c>)
 80084e2:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 80084e4:	e002      	b.n	80084ec <cursorPrev+0x20>
	else curPosition = 2;
 80084e6:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <cursorPrev+0x2c>)
 80084e8:	2202      	movs	r2, #2
 80084ea:	701a      	strb	r2, [r3, #0]
}
 80084ec:	bf00      	nop
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20005d84 	.word	0x20005d84

080084fc <increment>:
static void increment(void){
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
	switch(curPosition){
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <increment+0x80>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d024      	beq.n	8008552 <increment+0x56>
 8008508:	2b02      	cmp	r3, #2
 800850a:	dc31      	bgt.n	8008570 <increment+0x74>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <increment+0x1a>
 8008510:	2b01      	cmp	r3, #1
 8008512:	d00f      	beq.n	8008534 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8008514:	e02c      	b.n	8008570 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 8008516:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <increment+0x84>)
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b0b      	cmp	r3, #11
 800851c:	d806      	bhi.n	800852c <increment+0x30>
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <increment+0x84>)
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	3301      	adds	r3, #1
 8008524:	b2da      	uxtb	r2, r3
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <increment+0x84>)
 8008528:	705a      	strb	r2, [r3, #1]
			break;
 800852a:	e021      	b.n	8008570 <increment+0x74>
			else valDatePos[1] = 1;
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <increment+0x84>)
 800852e:	2201      	movs	r2, #1
 8008530:	705a      	strb	r2, [r3, #1]
			break;
 8008532:	e01d      	b.n	8008570 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <increment+0x84>)
 8008536:	789b      	ldrb	r3, [r3, #2]
 8008538:	2b63      	cmp	r3, #99	; 0x63
 800853a:	d806      	bhi.n	800854a <increment+0x4e>
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <increment+0x84>)
 800853e:	789b      	ldrb	r3, [r3, #2]
 8008540:	3301      	adds	r3, #1
 8008542:	b2da      	uxtb	r2, r3
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <increment+0x84>)
 8008546:	709a      	strb	r2, [r3, #2]
			break;
 8008548:	e012      	b.n	8008570 <increment+0x74>
			else valDatePos[2] = 0;
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <increment+0x84>)
 800854c:	2200      	movs	r2, #0
 800854e:	709a      	strb	r2, [r3, #2]
			break;
 8008550:	e00e      	b.n	8008570 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <increment+0x84>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b1e      	cmp	r3, #30
 8008558:	d806      	bhi.n	8008568 <increment+0x6c>
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <increment+0x84>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	3301      	adds	r3, #1
 8008560:	b2da      	uxtb	r2, r3
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <increment+0x84>)
 8008564:	701a      	strb	r2, [r3, #0]
			break;
 8008566:	e002      	b.n	800856e <increment+0x72>
			else valDatePos[0] = 1;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <increment+0x84>)
 800856a:	2201      	movs	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
			break;
 800856e:	bf00      	nop
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20005d84 	.word	0x20005d84
 8008580:	20005d88 	.word	0x20005d88

08008584 <decrement>:
static void decrement(void){
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
	switch(curPosition){
 8008588:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <decrement+0x80>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d024      	beq.n	80085da <decrement+0x56>
 8008590:	2b02      	cmp	r3, #2
 8008592:	dc31      	bgt.n	80085f8 <decrement+0x74>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <decrement+0x1a>
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00f      	beq.n	80085bc <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 800859c:	e02c      	b.n	80085f8 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <decrement+0x84>)
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <decrement+0x30>
 80085a6:	4b18      	ldr	r3, [pc, #96]	; (8008608 <decrement+0x84>)
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	4b16      	ldr	r3, [pc, #88]	; (8008608 <decrement+0x84>)
 80085b0:	705a      	strb	r2, [r3, #1]
				break;
 80085b2:	e021      	b.n	80085f8 <decrement+0x74>
				else valDatePos[1] = 12;
 80085b4:	4b14      	ldr	r3, [pc, #80]	; (8008608 <decrement+0x84>)
 80085b6:	220c      	movs	r2, #12
 80085b8:	705a      	strb	r2, [r3, #1]
				break;
 80085ba:	e01d      	b.n	80085f8 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 80085bc:	4b12      	ldr	r3, [pc, #72]	; (8008608 <decrement+0x84>)
 80085be:	789b      	ldrb	r3, [r3, #2]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <decrement+0x4e>
 80085c4:	4b10      	ldr	r3, [pc, #64]	; (8008608 <decrement+0x84>)
 80085c6:	789b      	ldrb	r3, [r3, #2]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <decrement+0x84>)
 80085ce:	709a      	strb	r2, [r3, #2]
				break;
 80085d0:	e012      	b.n	80085f8 <decrement+0x74>
				else valDatePos[2] = 100;
 80085d2:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <decrement+0x84>)
 80085d4:	2264      	movs	r2, #100	; 0x64
 80085d6:	709a      	strb	r2, [r3, #2]
				break;
 80085d8:	e00e      	b.n	80085f8 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <decrement+0x84>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d906      	bls.n	80085f0 <decrement+0x6c>
 80085e2:	4b09      	ldr	r3, [pc, #36]	; (8008608 <decrement+0x84>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <decrement+0x84>)
 80085ec:	701a      	strb	r2, [r3, #0]
				break;
 80085ee:	e002      	b.n	80085f6 <decrement+0x72>
				else valDatePos[0] = 31;
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <decrement+0x84>)
 80085f2:	221f      	movs	r2, #31
 80085f4:	701a      	strb	r2, [r3, #0]
				break;
 80085f6:	bf00      	nop
}
 80085f8:	bf00      	nop
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20005d84 	.word	0x20005d84
 8008608:	20005d88 	.word	0x20005d88

0800860c <exitScr>:
static void exitScr(void){
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8008610:	f7fa fa5c 	bl	8002acc <applySelectedScreen>
}
 8008614:	bf00      	nop
 8008616:	bd80      	pop	{r7, pc}

08008618 <accept>:
static void accept(void){
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 800861c:	4b15      	ldr	r3, [pc, #84]	; (8008674 <accept+0x5c>)
 800861e:	785a      	ldrb	r2, [r3, #1]
 8008620:	4b15      	ldr	r3, [pc, #84]	; (8008678 <accept+0x60>)
 8008622:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <accept+0x5c>)
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	4b13      	ldr	r3, [pc, #76]	; (8008678 <accept+0x60>)
 800862a:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 800862c:	4b11      	ldr	r3, [pc, #68]	; (8008674 <accept+0x5c>)
 800862e:	789a      	ldrb	r2, [r3, #2]
 8008630:	4b11      	ldr	r3, [pc, #68]	; (8008678 <accept+0x60>)
 8008632:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <accept+0x5c>)
 8008636:	7818      	ldrb	r0, [r3, #0]
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <accept+0x5c>)
 800863a:	7859      	ldrb	r1, [r3, #1]
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <accept+0x5c>)
 800863e:	789b      	ldrb	r3, [r3, #2]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008646:	b29b      	uxth	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	f000 fb67 	bl	8008d1c <zellerCongruence>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <accept+0x60>)
 8008654:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8008656:	2200      	movs	r2, #0
 8008658:	4907      	ldr	r1, [pc, #28]	; (8008678 <accept+0x60>)
 800865a:	4808      	ldr	r0, [pc, #32]	; (800867c <accept+0x64>)
 800865c:	f003 f84a 	bl	800b6f4 <HAL_RTC_SetDate>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <accept+0x52>
	{
	Error_Handler();
 8008666:	f7fb fce3 	bl	8004030 <Error_Handler>
	}
	exitScr();
 800866a:	f7ff ffcf 	bl	800860c <exitScr>
}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20005d88 	.word	0x20005d88
 8008678:	20005804 	.word	0x20005804
 800867c:	20005a90 	.word	0x20005a90

08008680 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <setDefaultClbcks+0x34>)
 8008686:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <setDefaultClbcks+0x38>)
 8008688:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <setDefaultClbcks+0x3c>)
 800868c:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <setDefaultClbcks+0x40>)
 800868e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <setDefaultClbcks+0x44>)
 8008692:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <setDefaultClbcks+0x48>)
 8008694:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <setDefaultClbcks+0x4c>)
 8008698:	4a0d      	ldr	r2, [pc, #52]	; (80086d0 <setDefaultClbcks+0x50>)
 800869a:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800869c:	4b0d      	ldr	r3, [pc, #52]	; (80086d4 <setDefaultClbcks+0x54>)
 800869e:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <setDefaultClbcks+0x58>)
 80086a0:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <setDefaultClbcks+0x5c>)
 80086a4:	4a0e      	ldr	r2, [pc, #56]	; (80086e0 <setDefaultClbcks+0x60>)
 80086a6:	611a      	str	r2, [r3, #16]
}
 80086a8:	bf00      	nop
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20002714 	.word	0x20002714
 80086b8:	08008a05 	.word	0x08008a05
 80086bc:	200026f0 	.word	0x200026f0
 80086c0:	08008849 	.word	0x08008849
 80086c4:	200026cc 	.word	0x200026cc
 80086c8:	08008a11 	.word	0x08008a11
 80086cc:	20002660 	.word	0x20002660
 80086d0:	08008935 	.word	0x08008935
 80086d4:	20002684 	.word	0x20002684
 80086d8:	08008819 	.word	0x08008819
 80086dc:	200026a8 	.word	0x200026a8
 80086e0:	08008879 	.word	0x08008879

080086e4 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80086e8:	f7ff ffca 	bl	8008680 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <timeInputSetup+0x24>)
 80086ee:	781a      	ldrb	r2, [r3, #0]
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <timeInputSetup+0x28>)
 80086f2:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <timeInputSetup+0x24>)
 80086f6:	785a      	ldrb	r2, [r3, #1]
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <timeInputSetup+0x28>)
 80086fa:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <timeInputSetup+0x24>)
 80086fe:	789a      	ldrb	r2, [r3, #2]
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <timeInputSetup+0x28>)
 8008702:	709a      	strb	r2, [r3, #2]
}
 8008704:	bf00      	nop
 8008706:	bd80      	pop	{r7, pc}
 8008708:	200057f0 	.word	0x200057f0
 800870c:	20005d8c 	.word	0x20005d8c

08008710 <timeInputMain>:

void timeInputMain(void){
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 8008716:	2300      	movs	r3, #0
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	1d3b      	adds	r3, r7, #4
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	605a      	str	r2, [r3, #4]
 8008722:	609a      	str	r2, [r3, #8]
 8008724:	60da      	str	r2, [r3, #12]
 8008726:	611a      	str	r2, [r3, #16]
 8008728:	615a      	str	r2, [r3, #20]
 800872a:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 800872c:	4b33      	ldr	r3, [pc, #204]	; (80087fc <timeInputMain+0xec>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	463b      	mov	r3, r7
 8008734:	4932      	ldr	r1, [pc, #200]	; (8008800 <timeInputMain+0xf0>)
 8008736:	4618      	mov	r0, r3
 8008738:	f00b f9a6 	bl	8013a88 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 800873c:	463a      	mov	r2, r7
 800873e:	4b31      	ldr	r3, [pc, #196]	; (8008804 <timeInputMain+0xf4>)
 8008740:	214c      	movs	r1, #76	; 0x4c
 8008742:	2014      	movs	r0, #20
 8008744:	f7fa fbde 	bl	8002f04 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8008748:	4b2c      	ldr	r3, [pc, #176]	; (80087fc <timeInputMain+0xec>)
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	461a      	mov	r2, r3
 800874e:	463b      	mov	r3, r7
 8008750:	492b      	ldr	r1, [pc, #172]	; (8008800 <timeInputMain+0xf0>)
 8008752:	4618      	mov	r0, r3
 8008754:	f00b f998 	bl	8013a88 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8008758:	463a      	mov	r2, r7
 800875a:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <timeInputMain+0xf4>)
 800875c:	214c      	movs	r1, #76	; 0x4c
 800875e:	20aa      	movs	r0, #170	; 0xaa
 8008760:	f7fa fbd0 	bl	8002f04 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8008764:	4b28      	ldr	r3, [pc, #160]	; (8008808 <timeInputMain+0xf8>)
 8008766:	789b      	ldrb	r3, [r3, #2]
 8008768:	461a      	mov	r2, r3
 800876a:	463b      	mov	r3, r7
 800876c:	4924      	ldr	r1, [pc, #144]	; (8008800 <timeInputMain+0xf0>)
 800876e:	4618      	mov	r0, r3
 8008770:	f00b f98a 	bl	8013a88 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8008774:	463a      	mov	r2, r7
 8008776:	4b25      	ldr	r3, [pc, #148]	; (800880c <timeInputMain+0xfc>)
 8008778:	214c      	movs	r1, #76	; 0x4c
 800877a:	f240 103b 	movw	r0, #315	; 0x13b
 800877e:	f7fa fbc1 	bl	8002f04 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8008782:	4b23      	ldr	r3, [pc, #140]	; (8008810 <timeInputMain+0x100>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	4b22      	ldr	r3, [pc, #136]	; (8008814 <timeInputMain+0x104>)
 800878a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800878e:	4618      	mov	r0, r3
 8008790:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <timeInputMain+0x100>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	4b1f      	ldr	r3, [pc, #124]	; (8008814 <timeInputMain+0x104>)
 8008798:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800879c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80087a0:	2301      	movs	r3, #1
 80087a2:	22af      	movs	r2, #175	; 0xaf
 80087a4:	f7fb f86a 	bl	800387c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 80087a8:	4b19      	ldr	r3, [pc, #100]	; (8008810 <timeInputMain+0x100>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b19      	ldr	r3, [pc, #100]	; (8008814 <timeInputMain+0x104>)
 80087b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087b4:	4618      	mov	r0, r3
 80087b6:	4b16      	ldr	r3, [pc, #88]	; (8008810 <timeInputMain+0x100>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	4b15      	ldr	r3, [pc, #84]	; (8008814 <timeInputMain+0x104>)
 80087be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80087c6:	2301      	movs	r3, #1
 80087c8:	22b0      	movs	r2, #176	; 0xb0
 80087ca:	f7fb f857 	bl	800387c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 80087ce:	4b10      	ldr	r3, [pc, #64]	; (8008810 <timeInputMain+0x100>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <timeInputMain+0x104>)
 80087d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087da:	4618      	mov	r0, r3
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <timeInputMain+0x100>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <timeInputMain+0x104>)
 80087e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80087ec:	2301      	movs	r3, #1
 80087ee:	22b1      	movs	r2, #177	; 0xb1
 80087f0:	f7fb f844 	bl	800387c <lcdHLine>
}
 80087f4:	bf00      	nop
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20005d8c 	.word	0x20005d8c
 8008800:	0801b934 	.word	0x0801b934
 8008804:	0805665c 	.word	0x0805665c
 8008808:	200057f0 	.word	0x200057f0
 800880c:	08051014 	.word	0x08051014
 8008810:	20005d8b 	.word	0x20005d8b
 8008814:	200002e4 	.word	0x200002e4

08008818 <cursorNext>:

static void cursorNext(void){
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 800881c:	4b09      	ldr	r3, [pc, #36]	; (8008844 <cursorNext+0x2c>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d806      	bhi.n	8008832 <cursorNext+0x1a>
 8008824:	4b07      	ldr	r3, [pc, #28]	; (8008844 <cursorNext+0x2c>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	3301      	adds	r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	4b05      	ldr	r3, [pc, #20]	; (8008844 <cursorNext+0x2c>)
 800882e:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8008830:	e002      	b.n	8008838 <cursorNext+0x20>
	else curPosition = 0;
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <cursorNext+0x2c>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
}
 8008838:	bf00      	nop
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20005d8b 	.word	0x20005d8b

08008848 <cursorPrev>:
static void cursorPrev(void){
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <cursorPrev+0x2c>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d006      	beq.n	8008862 <cursorPrev+0x1a>
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <cursorPrev+0x2c>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	3b01      	subs	r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <cursorPrev+0x2c>)
 800885e:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8008860:	e002      	b.n	8008868 <cursorPrev+0x20>
	else curPosition = 4;
 8008862:	4b04      	ldr	r3, [pc, #16]	; (8008874 <cursorPrev+0x2c>)
 8008864:	2204      	movs	r2, #4
 8008866:	701a      	strb	r2, [r3, #0]
}
 8008868:	bf00      	nop
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20005d8b 	.word	0x20005d8b

08008878 <increment>:
static void increment(void){
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800887c:	4b2b      	ldr	r3, [pc, #172]	; (800892c <increment+0xb4>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b04      	cmp	r3, #4
 8008882:	d84d      	bhi.n	8008920 <increment+0xa8>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <increment+0x14>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088bf 	.word	0x080088bf
 8008894:	080088dd 	.word	0x080088dd
 8008898:	080088fb 	.word	0x080088fb
 800889c:	08008919 	.word	0x08008919
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 80088a0:	4b23      	ldr	r3, [pc, #140]	; (8008930 <increment+0xb8>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2b0c      	cmp	r3, #12
 80088a6:	d806      	bhi.n	80088b6 <increment+0x3e>
 80088a8:	4b21      	ldr	r3, [pc, #132]	; (8008930 <increment+0xb8>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	330a      	adds	r3, #10
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	4b1f      	ldr	r3, [pc, #124]	; (8008930 <increment+0xb8>)
 80088b2:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 80088b4:	e034      	b.n	8008920 <increment+0xa8>
			else valTimePos[0] = 20;
 80088b6:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <increment+0xb8>)
 80088b8:	2214      	movs	r2, #20
 80088ba:	701a      	strb	r2, [r3, #0]
			break;
 80088bc:	e030      	b.n	8008920 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <increment+0xb8>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b17      	cmp	r3, #23
 80088c4:	d806      	bhi.n	80088d4 <increment+0x5c>
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <increment+0xb8>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	3301      	adds	r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <increment+0xb8>)
 80088d0:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 80088d2:	e025      	b.n	8008920 <increment+0xa8>
			else valTimePos[0] = 0;
 80088d4:	4b16      	ldr	r3, [pc, #88]	; (8008930 <increment+0xb8>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]
			break;
 80088da:	e021      	b.n	8008920 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 80088dc:	4b14      	ldr	r3, [pc, #80]	; (8008930 <increment+0xb8>)
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d806      	bhi.n	80088f2 <increment+0x7a>
 80088e4:	4b12      	ldr	r3, [pc, #72]	; (8008930 <increment+0xb8>)
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	330a      	adds	r3, #10
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b10      	ldr	r3, [pc, #64]	; (8008930 <increment+0xb8>)
 80088ee:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80088f0:	e016      	b.n	8008920 <increment+0xa8>
			else valTimePos[1] = 0;
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <increment+0xb8>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	705a      	strb	r2, [r3, #1]
			break;
 80088f8:	e012      	b.n	8008920 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 80088fa:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <increment+0xb8>)
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2b3a      	cmp	r3, #58	; 0x3a
 8008900:	d806      	bhi.n	8008910 <increment+0x98>
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <increment+0xb8>)
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	3301      	adds	r3, #1
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <increment+0xb8>)
 800890c:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800890e:	e007      	b.n	8008920 <increment+0xa8>
			else valTimePos[1] = 0;
 8008910:	4b07      	ldr	r3, [pc, #28]	; (8008930 <increment+0xb8>)
 8008912:	2200      	movs	r2, #0
 8008914:	705a      	strb	r2, [r3, #1]
			break;
 8008916:	e003      	b.n	8008920 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <increment+0xb8>)
 800891a:	2200      	movs	r2, #0
 800891c:	709a      	strb	r2, [r3, #2]
			break;
 800891e:	bf00      	nop
	}
}
 8008920:	bf00      	nop
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20005d8b 	.word	0x20005d8b
 8008930:	20005d8c 	.word	0x20005d8c

08008934 <decrement>:
static void decrement(void){
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
	switch(curPosition){
 8008938:	4b2e      	ldr	r3, [pc, #184]	; (80089f4 <decrement+0xc0>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b04      	cmp	r3, #4
 800893e:	d857      	bhi.n	80089f0 <decrement+0xbc>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <decrement+0x14>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800895d 	.word	0x0800895d
 800894c:	0800897b 	.word	0x0800897b
 8008950:	08008999 	.word	0x08008999
 8008954:	080089b7 	.word	0x080089b7
 8008958:	080089d5 	.word	0x080089d5
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 800895c:	4b26      	ldr	r3, [pc, #152]	; (80089f8 <decrement+0xc4>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b09      	cmp	r3, #9
 8008962:	d906      	bls.n	8008972 <decrement+0x3e>
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <decrement+0xc4>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	3b0a      	subs	r3, #10
 800896a:	b2da      	uxtb	r2, r3
 800896c:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <decrement+0xc4>)
 800896e:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8008970:	e03e      	b.n	80089f0 <decrement+0xbc>
				else valTimePos[0] = 0;
 8008972:	4b21      	ldr	r3, [pc, #132]	; (80089f8 <decrement+0xc4>)
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
				break;
 8008978:	e03a      	b.n	80089f0 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800897a:	4b1f      	ldr	r3, [pc, #124]	; (80089f8 <decrement+0xc4>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d006      	beq.n	8008990 <decrement+0x5c>
 8008982:	4b1d      	ldr	r3, [pc, #116]	; (80089f8 <decrement+0xc4>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	b2da      	uxtb	r2, r3
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <decrement+0xc4>)
 800898c:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 800898e:	e02f      	b.n	80089f0 <decrement+0xbc>
				else valTimePos[0] = 23;
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <decrement+0xc4>)
 8008992:	2217      	movs	r2, #23
 8008994:	701a      	strb	r2, [r3, #0]
				break;
 8008996:	e02b      	b.n	80089f0 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8008998:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <decrement+0xc4>)
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	2b09      	cmp	r3, #9
 800899e:	d906      	bls.n	80089ae <decrement+0x7a>
 80089a0:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <decrement+0xc4>)
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	3b0a      	subs	r3, #10
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <decrement+0xc4>)
 80089aa:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 80089ac:	e020      	b.n	80089f0 <decrement+0xbc>
				else valTimePos[1] = 0;
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <decrement+0xc4>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	705a      	strb	r2, [r3, #1]
				break;
 80089b4:	e01c      	b.n	80089f0 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <decrement+0xc4>)
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d006      	beq.n	80089cc <decrement+0x98>
 80089be:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <decrement+0xc4>)
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <decrement+0xc4>)
 80089c8:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 80089ca:	e011      	b.n	80089f0 <decrement+0xbc>
				else valTimePos[1] = 59;
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <decrement+0xc4>)
 80089ce:	223b      	movs	r2, #59	; 0x3b
 80089d0:	705a      	strb	r2, [r3, #1]
				break;
 80089d2:	e00d      	b.n	80089f0 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <decrement+0xc8>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80089da:	2200      	movs	r2, #0
 80089dc:	4907      	ldr	r1, [pc, #28]	; (80089fc <decrement+0xc8>)
 80089de:	4808      	ldr	r0, [pc, #32]	; (8008a00 <decrement+0xcc>)
 80089e0:	f002 fd90 	bl	800b504 <HAL_RTC_SetTime>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <decrement+0xba>
					{
						Error_Handler();
 80089ea:	f7fb fb21 	bl	8004030 <Error_Handler>
					}
				break;
 80089ee:	bf00      	nop
		}
}
 80089f0:	bf00      	nop
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20005d8b 	.word	0x20005d8b
 80089f8:	20005d8c 	.word	0x20005d8c
 80089fc:	200057f0 	.word	0x200057f0
 8008a00:	20005a90 	.word	0x20005a90

08008a04 <exitScr>:
static void exitScr(void){
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8008a08:	f7fa f860 	bl	8002acc <applySelectedScreen>
}
 8008a0c:	bf00      	nop
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <accept>:
static void accept(void){
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8008a14:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <accept+0x3c>)
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <accept+0x40>)
 8008a1a:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <accept+0x3c>)
 8008a1e:	785a      	ldrb	r2, [r3, #1]
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <accept+0x40>)
 8008a22:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008a24:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <accept+0x40>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <accept+0x40>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8008a30:	2200      	movs	r2, #0
 8008a32:	4907      	ldr	r1, [pc, #28]	; (8008a50 <accept+0x40>)
 8008a34:	4807      	ldr	r0, [pc, #28]	; (8008a54 <accept+0x44>)
 8008a36:	f002 fd65 	bl	800b504 <HAL_RTC_SetTime>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <accept+0x34>
	{
	Error_Handler();
 8008a40:	f7fb faf6 	bl	8004030 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 8008a44:	f7ff ffde 	bl	8008a04 <exitScr>
}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20005d8c 	.word	0x20005d8c
 8008a50:	200057f0 	.word	0x200057f0
 8008a54:	20005a90 	.word	0x20005a90

08008a58 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4613      	mov	r3, r2
 8008a64:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	88fa      	ldrh	r2, [r7, #6]
 8008a70:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f009 feb6 	bl	80127f0 <malloc>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	741a      	strb	r2, [r3, #16]
}
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	891a      	ldrh	r2, [r3, #8]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	895b      	ldrh	r3, [r3, #10]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ffe5 	bl	8008aac <cbuf_isFull>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d02a      	beq.n	8008b3e <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	88db      	ldrh	r3, [r3, #6]
 8008af0:	4619      	mov	r1, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	18d0      	adds	r0, r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	f009 fe84 	bl	8012810 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	88db      	ldrh	r3, [r3, #6]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	8952      	ldrh	r2, [r2, #10]
 8008b12:	fb93 f1f2 	sdiv	r1, r3, r2
 8008b16:	fb01 f202 	mul.w	r2, r1, r2
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	3301      	adds	r3, #1
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	8952      	ldrh	r2, [r2, #10]
 8008b2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008b30:	fb01 f202 	mul.w	r2, r1, r2
 8008b34:	1a9b      	subs	r3, r3, r2
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8008b3c:	e023      	b.n	8008b86 <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	88db      	ldrh	r3, [r3, #6]
 8008b46:	4619      	mov	r1, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	18d0      	adds	r0, r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	f009 fe59 	bl	8012810 <memcpy>
		b->elemNum++;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	891b      	ldrh	r3, [r3, #8]
 8008b62:	3301      	adds	r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	8952      	ldrh	r2, [r2, #10]
 8008b74:	fb93 f1f2 	sdiv	r1, r3, r2
 8008b78:	fb01 f202 	mul.w	r2, r1, r2
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	80da      	strh	r2, [r3, #6]
		return 1;
 8008b84:	2301      	movs	r3, #1
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	889a      	ldrh	r2, [r3, #4]
 8008b9e:	887b      	ldrh	r3, [r7, #2]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	895a      	ldrh	r2, [r3, #10]
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bae:	fb01 f202 	mul.w	r2, r1, r2
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	887b      	ldrh	r3, [r7, #2]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	68c9      	ldr	r1, [r1, #12]
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	887a      	ldrh	r2, [r7, #2]
 8008be2:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	895b      	ldrh	r3, [r3, #10]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f009 fe00 	bl	80127f0 <malloc>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	731a      	strb	r2, [r3, #12]
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	891a      	ldrh	r2, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff ffe5 	bl	8008c18 <ring_buffer_full>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d022      	beq.n	8008c9a <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	88db      	ldrh	r3, [r3, #6]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	88db      	ldrh	r3, [r3, #6]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	8952      	ldrh	r2, [r2, #10]
 8008c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c72:	fb01 f202 	mul.w	r2, r1, r2
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	8952      	ldrh	r2, [r2, #10]
 8008c88:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c8c:	fb01 f202 	mul.w	r2, r1, r2
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8008c98:	e01b      	b.n	8008cd2 <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	88db      	ldrh	r3, [r3, #6]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	891b      	ldrh	r3, [r3, #8]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	88db      	ldrh	r3, [r3, #6]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	8952      	ldrh	r2, [r2, #10]
 8008cc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8008cc4:	fb01 f202 	mul.w	r2, r1, r2
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	80da      	strh	r2, [r3, #6]
		return 1;
 8008cd0:	2301      	movs	r3, #1
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	889a      	ldrh	r2, [r3, #4]
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	4413      	add	r3, r2
 8008cee:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	895a      	ldrh	r2, [r3, #10]
 8008cf4:	887b      	ldrh	r3, [r7, #2]
 8008cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cfa:	fb01 f202 	mul.w	r2, r1, r2
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	887b      	ldrh	r3, [r7, #2]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681b      	ldr	r3, [r3, #0]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	71fb      	strb	r3, [r7, #7]
 8008d26:	460b      	mov	r3, r1
 8008d28:	71bb      	strb	r3, [r7, #6]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8008d2e:	79bb      	ldrb	r3, [r7, #6]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d104      	bne.n	8008d3e <zellerCongruence+0x22>
	        month = 13;
 8008d34:	230d      	movs	r3, #13
 8008d36:	71bb      	strb	r3, [r7, #6]
	        year--;
 8008d38:	88bb      	ldrh	r3, [r7, #4]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8008d3e:	79bb      	ldrb	r3, [r7, #6]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d104      	bne.n	8008d4e <zellerCongruence+0x32>
	        month = 14;
 8008d44:	230e      	movs	r3, #14
 8008d46:	71bb      	strb	r3, [r7, #6]
	        year--;
 8008d48:	88bb      	ldrh	r3, [r7, #4]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8008d52:	79bb      	ldrb	r3, [r7, #6]
 8008d54:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8008d56:	88bb      	ldrh	r3, [r7, #4]
 8008d58:	4a29      	ldr	r2, [pc, #164]	; (8008e00 <zellerCongruence+0xe4>)
 8008d5a:	fba2 1203 	umull	r1, r2, r2, r3
 8008d5e:	0952      	lsrs	r2, r2, #5
 8008d60:	2164      	movs	r1, #100	; 0x64
 8008d62:	fb01 f202 	mul.w	r2, r1, r2
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8008d6c:	88bb      	ldrh	r3, [r7, #4]
 8008d6e:	4a24      	ldr	r2, [pc, #144]	; (8008e00 <zellerCongruence+0xe4>)
 8008d70:	fba2 2303 	umull	r2, r3, r2, r3
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008d7a:	7bf9      	ldrb	r1, [r7, #15]
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	4613      	mov	r3, r2
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	4a1e      	ldr	r2, [pc, #120]	; (8008e04 <zellerCongruence+0xe8>)
 8008d8c:	fb82 0203 	smull	r0, r2, r2, r3
 8008d90:	1052      	asrs	r2, r2, #1
 8008d92:	17db      	asrs	r3, r3, #31
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	18ca      	adds	r2, r1, r3
 8008d98:	7b7b      	ldrb	r3, [r7, #13]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	7b7a      	ldrb	r2, [r7, #13]
 8008d9e:	0892      	lsrs	r2, r2, #2
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8008da4:	7b3a      	ldrb	r2, [r7, #12]
 8008da6:	0892      	lsrs	r2, r2, #2
 8008da8:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008daa:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8008dac:	7b3a      	ldrb	r2, [r7, #12]
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008db4:	440b      	add	r3, r1
 8008db6:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <zellerCongruence+0xec>)
 8008dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	1099      	asrs	r1, r3, #2
 8008dc4:	17d3      	asrs	r3, r2, #31
 8008dc6:	1ac9      	subs	r1, r1, r3
 8008dc8:	460b      	mov	r3, r1
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	1a5b      	subs	r3, r3, r1
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	1d5a      	adds	r2, r3, #5
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <zellerCongruence+0xec>)
 8008dd8:	fb83 1302 	smull	r1, r3, r3, r2
 8008ddc:	4413      	add	r3, r2
 8008dde:	1099      	asrs	r1, r3, #2
 8008de0:	17d3      	asrs	r3, r2, #31
 8008de2:	1ac9      	subs	r1, r1, r3
 8008de4:	460b      	mov	r3, r1
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	1a5b      	subs	r3, r3, r1
 8008dea:	1ad1      	subs	r1, r2, r3
 8008dec:	b2cb      	uxtb	r3, r1
 8008dee:	3301      	adds	r3, #1
 8008df0:	b2db      	uxtb	r3, r3
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	51eb851f 	.word	0x51eb851f
 8008e04:	66666667 	.word	0x66666667
 8008e08:	92492493 	.word	0x92492493

08008e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e10:	480d      	ldr	r0, [pc, #52]	; (8008e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008e12:	490e      	ldr	r1, [pc, #56]	; (8008e4c <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 8008e14:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e18:	e002      	b.n	8008e20 <LoopCopyDataInit>

08008e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e1e:	3304      	adds	r3, #4

08008e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e24:	d3f9      	bcc.n	8008e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e26:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e28:	4c0b      	ldr	r4, [pc, #44]	; (8008e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e2c:	e001      	b.n	8008e32 <LoopFillZerobss>

08008e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e30:	3204      	adds	r2, #4

08008e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e34:	d3fb      	bcc.n	8008e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e36:	f7fb fc57 	bl	80046e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e3a:	f009 fcb5 	bl	80127a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e3e:	f7fa ff2b 	bl	8003c98 <main>
  bx  lr    
 8008e42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008e44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e4c:	20000558 	.word	0x20000558
                                         ldr r2, =_sidata
 8008e50:	08058ec8 	.word	0x08058ec8
  ldr r2, =_sbss
 8008e54:	20000558 	.word	0x20000558
  ldr r4, =_ebss
 8008e58:	20005e08 	.word	0x20005e08

08008e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e5c:	e7fe      	b.n	8008e5c <ADC_IRQHandler>
	...

08008e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <HAL_Init+0x40>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a0d      	ldr	r2, [pc, #52]	; (8008ea0 <HAL_Init+0x40>)
 8008e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_Init+0x40>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <HAL_Init+0x40>)
 8008e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_Init+0x40>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <HAL_Init+0x40>)
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f000 f94f 	bl	800912c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f000 f808 	bl	8008ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e94:	f7fb fa3a 	bl	800430c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023c00 	.word	0x40023c00

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <HAL_InitTick+0x54>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_InitTick+0x58>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f967 	bl	8009196 <HAL_SYSTICK_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e00e      	b.n	8008ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	d80a      	bhi.n	8008eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	f000 f92f 	bl	8009142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ee4:	4a06      	ldr	r2, [pc, #24]	; (8008f00 <HAL_InitTick+0x5c>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e000      	b.n	8008ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200001dc 	.word	0x200001dc
 8008efc:	2000031c 	.word	0x2000031c
 8008f00:	20000318 	.word	0x20000318

08008f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <HAL_IncTick+0x20>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_IncTick+0x24>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	4a04      	ldr	r2, [pc, #16]	; (8008f28 <HAL_IncTick+0x24>)
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	2000031c 	.word	0x2000031c
 8008f28:	20005d90 	.word	0x20005d90

08008f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <HAL_GetTick+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20005d90 	.word	0x20005d90

08008f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	f7ff ffee 	bl	8008f2c <HAL_GetTick>
 8008f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d005      	beq.n	8008f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <HAL_Delay+0x44>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f6a:	bf00      	nop
 8008f6c:	f7ff ffde 	bl	8008f2c <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d8f7      	bhi.n	8008f6c <HAL_Delay+0x28>
  {
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000031c 	.word	0x2000031c

08008f8c <__NVIC_SetPriorityGrouping>:
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f9c:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fbe:	4a04      	ldr	r2, [pc, #16]	; (8008fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	60d3      	str	r3, [r2, #12]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	e000ed00 	.word	0xe000ed00

08008fd4 <__NVIC_GetPriorityGrouping>:
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <__NVIC_GetPriorityGrouping+0x18>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	f003 0307 	and.w	r3, r3, #7
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <__NVIC_EnableIRQ>:
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	db0b      	blt.n	800901a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	f003 021f 	and.w	r2, r3, #31
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <__NVIC_EnableIRQ+0x38>)
 800900a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	2001      	movs	r0, #1
 8009012:	fa00 f202 	lsl.w	r2, r0, r2
 8009016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	e000e100 	.word	0xe000e100

0800902c <__NVIC_SetPriority>:
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903c:	2b00      	cmp	r3, #0
 800903e:	db0a      	blt.n	8009056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	b2da      	uxtb	r2, r3
 8009044:	490c      	ldr	r1, [pc, #48]	; (8009078 <__NVIC_SetPriority+0x4c>)
 8009046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904a:	0112      	lsls	r2, r2, #4
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	440b      	add	r3, r1
 8009050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009054:	e00a      	b.n	800906c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	b2da      	uxtb	r2, r3
 800905a:	4908      	ldr	r1, [pc, #32]	; (800907c <__NVIC_SetPriority+0x50>)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	3b04      	subs	r3, #4
 8009064:	0112      	lsls	r2, r2, #4
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	440b      	add	r3, r1
 800906a:	761a      	strb	r2, [r3, #24]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	e000e100 	.word	0xe000e100
 800907c:	e000ed00 	.word	0xe000ed00

08009080 <NVIC_EncodePriority>:
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f1c3 0307 	rsb	r3, r3, #7
 800909a:	2b04      	cmp	r3, #4
 800909c:	bf28      	it	cs
 800909e:	2304      	movcs	r3, #4
 80090a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3304      	adds	r3, #4
 80090a6:	2b06      	cmp	r3, #6
 80090a8:	d902      	bls.n	80090b0 <NVIC_EncodePriority+0x30>
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	3b03      	subs	r3, #3
 80090ae:	e000      	b.n	80090b2 <NVIC_EncodePriority+0x32>
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43da      	mvns	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	401a      	ands	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090c8:	f04f 31ff 	mov.w	r1, #4294967295
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	43d9      	mvns	r1, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090d8:	4313      	orrs	r3, r2
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <SysTick_Config>:
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090f8:	d301      	bcc.n	80090fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80090fa:	2301      	movs	r3, #1
 80090fc:	e00f      	b.n	800911e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090fe:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <SysTick_Config+0x40>)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009106:	210f      	movs	r1, #15
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	f7ff ff8e 	bl	800902c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <SysTick_Config+0x40>)
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <SysTick_Config+0x40>)
 8009118:	2207      	movs	r2, #7
 800911a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	e000e010 	.word	0xe000e010

0800912c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ff29 	bl	8008f8c <__NVIC_SetPriorityGrouping>
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	4603      	mov	r3, r0
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009154:	f7ff ff3e 	bl	8008fd4 <__NVIC_GetPriorityGrouping>
 8009158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff ff8e 	bl	8009080 <NVIC_EncodePriority>
 8009164:	4602      	mov	r2, r0
 8009166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff ff5d 	bl	800902c <__NVIC_SetPriority>
}
 8009172:	bf00      	nop
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ff31 	bl	8008ff0 <__NVIC_EnableIRQ>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff ffa2 	bl	80090e8 <SysTick_Config>
 80091a4:	4603      	mov	r3, r0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_DMA_Start_IT+0x26>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e040      	b.n	8009256 <HAL_DMA_Start_IT+0xa8>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d12f      	bne.n	8009248 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f82e 	bl	800925e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009206:	223f      	movs	r2, #63	; 0x3f
 8009208:	409a      	lsls	r2, r3
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 0216 	orr.w	r2, r2, #22
 800921c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0208 	orr.w	r2, r2, #8
 8009234:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0201 	orr.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e005      	b.n	8009254 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009250:	2302      	movs	r3, #2
 8009252:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800927a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2b40      	cmp	r3, #64	; 0x40
 800928a:	d108      	bne.n	800929e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800929c:	e007      	b.n	80092ae <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	60da      	str	r2, [r3, #12]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092bc:	b480      	push	{r7}
 80092be:	b089      	sub	sp, #36	; 0x24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092d2:	2300      	movs	r3, #0
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	e177      	b.n	80095c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80092d8:	2201      	movs	r2, #1
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4013      	ands	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	f040 8166 	bne.w	80095c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d005      	beq.n	800930e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800930a:	2b02      	cmp	r3, #2
 800930c:	d130      	bne.n	8009370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	2203      	movs	r2, #3
 800931a:	fa02 f303 	lsl.w	r3, r2, r3
 800931e:	43db      	mvns	r3, r3
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	4013      	ands	r3, r2
 8009324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	fa02 f303 	lsl.w	r3, r2, r3
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	4313      	orrs	r3, r2
 8009336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009344:	2201      	movs	r2, #1
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	43db      	mvns	r3, r3
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	4013      	ands	r3, r2
 8009352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	091b      	lsrs	r3, r3, #4
 800935a:	f003 0201 	and.w	r2, r3, #1
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	fa02 f303 	lsl.w	r3, r2, r3
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	4313      	orrs	r3, r2
 8009368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b03      	cmp	r3, #3
 800937a:	d017      	beq.n	80093ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	2203      	movs	r2, #3
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43db      	mvns	r3, r3
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 0303 	and.w	r3, r3, #3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d123      	bne.n	8009400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	08da      	lsrs	r2, r3, #3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3208      	adds	r2, #8
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	220f      	movs	r2, #15
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	43db      	mvns	r3, r3
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	4013      	ands	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	08da      	lsrs	r2, r3, #3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3208      	adds	r2, #8
 80093fa:	69b9      	ldr	r1, [r7, #24]
 80093fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	2203      	movs	r2, #3
 800940c:	fa02 f303 	lsl.w	r3, r2, r3
 8009410:	43db      	mvns	r3, r3
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4013      	ands	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f003 0203 	and.w	r2, r3, #3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4313      	orrs	r3, r2
 800942c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80c0 	beq.w	80095c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	4b66      	ldr	r3, [pc, #408]	; (80095e0 <HAL_GPIO_Init+0x324>)
 8009448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944a:	4a65      	ldr	r2, [pc, #404]	; (80095e0 <HAL_GPIO_Init+0x324>)
 800944c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009450:	6453      	str	r3, [r2, #68]	; 0x44
 8009452:	4b63      	ldr	r3, [pc, #396]	; (80095e0 <HAL_GPIO_Init+0x324>)
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800945e:	4a61      	ldr	r2, [pc, #388]	; (80095e4 <HAL_GPIO_Init+0x328>)
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	089b      	lsrs	r3, r3, #2
 8009464:	3302      	adds	r3, #2
 8009466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800946a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	220f      	movs	r2, #15
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	43db      	mvns	r3, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	4013      	ands	r3, r2
 8009480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a58      	ldr	r2, [pc, #352]	; (80095e8 <HAL_GPIO_Init+0x32c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d037      	beq.n	80094fa <HAL_GPIO_Init+0x23e>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a57      	ldr	r2, [pc, #348]	; (80095ec <HAL_GPIO_Init+0x330>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d031      	beq.n	80094f6 <HAL_GPIO_Init+0x23a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a56      	ldr	r2, [pc, #344]	; (80095f0 <HAL_GPIO_Init+0x334>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02b      	beq.n	80094f2 <HAL_GPIO_Init+0x236>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a55      	ldr	r2, [pc, #340]	; (80095f4 <HAL_GPIO_Init+0x338>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d025      	beq.n	80094ee <HAL_GPIO_Init+0x232>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a54      	ldr	r2, [pc, #336]	; (80095f8 <HAL_GPIO_Init+0x33c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d01f      	beq.n	80094ea <HAL_GPIO_Init+0x22e>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a53      	ldr	r2, [pc, #332]	; (80095fc <HAL_GPIO_Init+0x340>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d019      	beq.n	80094e6 <HAL_GPIO_Init+0x22a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a52      	ldr	r2, [pc, #328]	; (8009600 <HAL_GPIO_Init+0x344>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <HAL_GPIO_Init+0x226>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a51      	ldr	r2, [pc, #324]	; (8009604 <HAL_GPIO_Init+0x348>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00d      	beq.n	80094de <HAL_GPIO_Init+0x222>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a50      	ldr	r2, [pc, #320]	; (8009608 <HAL_GPIO_Init+0x34c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d007      	beq.n	80094da <HAL_GPIO_Init+0x21e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a4f      	ldr	r2, [pc, #316]	; (800960c <HAL_GPIO_Init+0x350>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d101      	bne.n	80094d6 <HAL_GPIO_Init+0x21a>
 80094d2:	2309      	movs	r3, #9
 80094d4:	e012      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094d6:	230a      	movs	r3, #10
 80094d8:	e010      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094da:	2308      	movs	r3, #8
 80094dc:	e00e      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094de:	2307      	movs	r3, #7
 80094e0:	e00c      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094e2:	2306      	movs	r3, #6
 80094e4:	e00a      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094e6:	2305      	movs	r3, #5
 80094e8:	e008      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094ea:	2304      	movs	r3, #4
 80094ec:	e006      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094ee:	2303      	movs	r3, #3
 80094f0:	e004      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e002      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <HAL_GPIO_Init+0x240>
 80094fa:	2300      	movs	r3, #0
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	f002 0203 	and.w	r2, r2, #3
 8009502:	0092      	lsls	r2, r2, #2
 8009504:	4093      	lsls	r3, r2
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	4313      	orrs	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800950c:	4935      	ldr	r1, [pc, #212]	; (80095e4 <HAL_GPIO_Init+0x328>)
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	089b      	lsrs	r3, r3, #2
 8009512:	3302      	adds	r3, #2
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800951a:	4b3d      	ldr	r3, [pc, #244]	; (8009610 <HAL_GPIO_Init+0x354>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	43db      	mvns	r3, r3
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	4013      	ands	r3, r2
 8009528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800953e:	4a34      	ldr	r2, [pc, #208]	; (8009610 <HAL_GPIO_Init+0x354>)
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009544:	4b32      	ldr	r3, [pc, #200]	; (8009610 <HAL_GPIO_Init+0x354>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	43db      	mvns	r3, r3
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	4013      	ands	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009568:	4a29      	ldr	r2, [pc, #164]	; (8009610 <HAL_GPIO_Init+0x354>)
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800956e:	4b28      	ldr	r3, [pc, #160]	; (8009610 <HAL_GPIO_Init+0x354>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	43db      	mvns	r3, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	4013      	ands	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009592:	4a1f      	ldr	r2, [pc, #124]	; (8009610 <HAL_GPIO_Init+0x354>)
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009598:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <HAL_GPIO_Init+0x354>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	43db      	mvns	r3, r3
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4013      	ands	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80095bc:	4a14      	ldr	r2, [pc, #80]	; (8009610 <HAL_GPIO_Init+0x354>)
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	3301      	adds	r3, #1
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	2b0f      	cmp	r3, #15
 80095cc:	f67f ae84 	bls.w	80092d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	3724      	adds	r7, #36	; 0x24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40023800 	.word	0x40023800
 80095e4:	40013800 	.word	0x40013800
 80095e8:	40020000 	.word	0x40020000
 80095ec:	40020400 	.word	0x40020400
 80095f0:	40020800 	.word	0x40020800
 80095f4:	40020c00 	.word	0x40020c00
 80095f8:	40021000 	.word	0x40021000
 80095fc:	40021400 	.word	0x40021400
 8009600:	40021800 	.word	0x40021800
 8009604:	40021c00 	.word	0x40021c00
 8009608:	40022000 	.word	0x40022000
 800960c:	40022400 	.word	0x40022400
 8009610:	40013c00 	.word	0x40013c00

08009614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
 8009630:	e001      	b.n	8009636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	807b      	strh	r3, [r7, #2]
 8009650:	4613      	mov	r3, r2
 8009652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009654:	787b      	ldrb	r3, [r7, #1]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800965a:	887a      	ldrh	r2, [r7, #2]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009660:	e003      	b.n	800966a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009662:	887b      	ldrh	r3, [r7, #2]
 8009664:	041a      	lsls	r2, r3, #16
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	619a      	str	r2, [r3, #24]
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009688:	887a      	ldrh	r2, [r7, #2]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4013      	ands	r3, r2
 800968e:	041a      	lsls	r2, r3, #16
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	43d9      	mvns	r1, r3
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	400b      	ands	r3, r1
 8009698:	431a      	orrs	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	619a      	str	r2, [r3, #24]
}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	4013      	ands	r3, r2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d006      	beq.n	80096d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80096c2:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f806 	bl	80096dc <HAL_GPIO_EXTI_Callback>
  }
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40013c00 	.word	0x40013c00

080096dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e12b      	b.n	800995e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7f9 fa70 	bl	8002c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2224      	movs	r2, #36	; 0x24
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0201 	bic.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009758:	f001 fc76 	bl	800b048 <HAL_RCC_GetPCLK1Freq>
 800975c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4a81      	ldr	r2, [pc, #516]	; (8009968 <HAL_I2C_Init+0x274>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d807      	bhi.n	8009778 <HAL_I2C_Init+0x84>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a80      	ldr	r2, [pc, #512]	; (800996c <HAL_I2C_Init+0x278>)
 800976c:	4293      	cmp	r3, r2
 800976e:	bf94      	ite	ls
 8009770:	2301      	movls	r3, #1
 8009772:	2300      	movhi	r3, #0
 8009774:	b2db      	uxtb	r3, r3
 8009776:	e006      	b.n	8009786 <HAL_I2C_Init+0x92>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a7d      	ldr	r2, [pc, #500]	; (8009970 <HAL_I2C_Init+0x27c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	bf94      	ite	ls
 8009780:	2301      	movls	r3, #1
 8009782:	2300      	movhi	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e0e7      	b.n	800995e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a78      	ldr	r2, [pc, #480]	; (8009974 <HAL_I2C_Init+0x280>)
 8009792:	fba2 2303 	umull	r2, r3, r2, r3
 8009796:	0c9b      	lsrs	r3, r3, #18
 8009798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4a6a      	ldr	r2, [pc, #424]	; (8009968 <HAL_I2C_Init+0x274>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d802      	bhi.n	80097c8 <HAL_I2C_Init+0xd4>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	3301      	adds	r3, #1
 80097c6:	e009      	b.n	80097dc <HAL_I2C_Init+0xe8>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	4a69      	ldr	r2, [pc, #420]	; (8009978 <HAL_I2C_Init+0x284>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	099b      	lsrs	r3, r3, #6
 80097da:	3301      	adds	r3, #1
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	6812      	ldr	r2, [r2, #0]
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80097ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	495c      	ldr	r1, [pc, #368]	; (8009968 <HAL_I2C_Init+0x274>)
 80097f8:	428b      	cmp	r3, r1
 80097fa:	d819      	bhi.n	8009830 <HAL_I2C_Init+0x13c>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1e59      	subs	r1, r3, #1
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	fbb1 f3f3 	udiv	r3, r1, r3
 800980a:	1c59      	adds	r1, r3, #1
 800980c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009810:	400b      	ands	r3, r1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <HAL_I2C_Init+0x138>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	1e59      	subs	r1, r3, #1
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	fbb1 f3f3 	udiv	r3, r1, r3
 8009824:	3301      	adds	r3, #1
 8009826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800982a:	e051      	b.n	80098d0 <HAL_I2C_Init+0x1dc>
 800982c:	2304      	movs	r3, #4
 800982e:	e04f      	b.n	80098d0 <HAL_I2C_Init+0x1dc>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d111      	bne.n	800985c <HAL_I2C_Init+0x168>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	1e58      	subs	r0, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6859      	ldr	r1, [r3, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	440b      	add	r3, r1
 8009846:	fbb0 f3f3 	udiv	r3, r0, r3
 800984a:	3301      	adds	r3, #1
 800984c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009850:	2b00      	cmp	r3, #0
 8009852:	bf0c      	ite	eq
 8009854:	2301      	moveq	r3, #1
 8009856:	2300      	movne	r3, #0
 8009858:	b2db      	uxtb	r3, r3
 800985a:	e012      	b.n	8009882 <HAL_I2C_Init+0x18e>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1e58      	subs	r0, r3, #1
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6859      	ldr	r1, [r3, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	0099      	lsls	r1, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009872:	3301      	adds	r3, #1
 8009874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009878:	2b00      	cmp	r3, #0
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <HAL_I2C_Init+0x196>
 8009886:	2301      	movs	r3, #1
 8009888:	e022      	b.n	80098d0 <HAL_I2C_Init+0x1dc>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10e      	bne.n	80098b0 <HAL_I2C_Init+0x1bc>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1e58      	subs	r0, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6859      	ldr	r1, [r3, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	440b      	add	r3, r1
 80098a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80098a4:	3301      	adds	r3, #1
 80098a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ae:	e00f      	b.n	80098d0 <HAL_I2C_Init+0x1dc>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1e58      	subs	r0, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	440b      	add	r3, r1
 80098be:	0099      	lsls	r1, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80098c6:	3301      	adds	r3, #1
 80098c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	6809      	ldr	r1, [r1, #0]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	69da      	ldr	r2, [r3, #28]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6911      	ldr	r1, [r2, #16]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	68d2      	ldr	r2, [r2, #12]
 800990a:	4311      	orrs	r1, r2
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	430b      	orrs	r3, r1
 8009912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695a      	ldr	r2, [r3, #20]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	000186a0 	.word	0x000186a0
 800996c:	001e847f 	.word	0x001e847f
 8009970:	003d08ff 	.word	0x003d08ff
 8009974:	431bde83 	.word	0x431bde83
 8009978:	10624dd3 	.word	0x10624dd3

0800997c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af02      	add	r7, sp, #8
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	461a      	mov	r2, r3
 800998a:	4603      	mov	r3, r0
 800998c:	817b      	strh	r3, [r7, #10]
 800998e:	460b      	mov	r3, r1
 8009990:	813b      	strh	r3, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009996:	f7ff fac9 	bl	8008f2c <HAL_GetTick>
 800999a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	f040 80d9 	bne.w	8009b5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2319      	movs	r3, #25
 80099b0:	2201      	movs	r2, #1
 80099b2:	496d      	ldr	r1, [pc, #436]	; (8009b68 <HAL_I2C_Mem_Write+0x1ec>)
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fc7f 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
 80099c2:	e0cc      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_I2C_Mem_Write+0x56>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e0c5      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d007      	beq.n	80099f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2221      	movs	r2, #33	; 0x21
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a4d      	ldr	r2, [pc, #308]	; (8009b6c <HAL_I2C_Mem_Write+0x1f0>)
 8009a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a3a:	88f8      	ldrh	r0, [r7, #6]
 8009a3c:	893a      	ldrh	r2, [r7, #8]
 8009a3e:	8979      	ldrh	r1, [r7, #10]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fab6 	bl	8009fbc <I2C_RequestMemoryWrite>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d052      	beq.n	8009afc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e081      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fd00 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00d      	beq.n	8009a86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d107      	bne.n	8009a82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e06b      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d11b      	bne.n	8009afc <HAL_I2C_Mem_Write+0x180>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d017      	beq.n	8009afc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1aa      	bne.n	8009a5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fcec 	bl	800a4e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00d      	beq.n	8009b30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d107      	bne.n	8009b2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e016      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e000      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b5c:	2302      	movs	r3, #2
  }
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	00100002 	.word	0x00100002
 8009b6c:	ffff0000 	.word	0xffff0000

08009b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08c      	sub	sp, #48	; 0x30
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	817b      	strh	r3, [r7, #10]
 8009b82:	460b      	mov	r3, r1
 8009b84:	813b      	strh	r3, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b8a:	f7ff f9cf 	bl	8008f2c <HAL_GetTick>
 8009b8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	f040 8208 	bne.w	8009fae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2319      	movs	r3, #25
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	497b      	ldr	r1, [pc, #492]	; (8009d94 <HAL_I2C_Mem_Read+0x224>)
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 fb85 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e1fb      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_I2C_Mem_Read+0x56>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e1f4      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d007      	beq.n	8009bec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2222      	movs	r2, #34	; 0x22
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2240      	movs	r2, #64	; 0x40
 8009c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4a5b      	ldr	r2, [pc, #364]	; (8009d98 <HAL_I2C_Mem_Read+0x228>)
 8009c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c2e:	88f8      	ldrh	r0, [r7, #6]
 8009c30:	893a      	ldrh	r2, [r7, #8]
 8009c32:	8979      	ldrh	r1, [r7, #10]
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 fa52 	bl	800a0e8 <I2C_RequestMemoryRead>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e1b0      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d113      	bne.n	8009c7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c56:	2300      	movs	r3, #0
 8009c58:	623b      	str	r3, [r7, #32]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	623b      	str	r3, [r7, #32]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	623b      	str	r3, [r7, #32]
 8009c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	e184      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d11b      	bne.n	8009cbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	61fb      	str	r3, [r7, #28]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	61fb      	str	r3, [r7, #28]
 8009caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	e164      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d11b      	bne.n	8009cfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	e144      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009d14:	e138      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	f200 80f1 	bhi.w	8009f02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d123      	bne.n	8009d70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fc1b 	bl	800a568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e139      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691a      	ldr	r2, [r3, #16]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d6e:	e10b      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d14e      	bne.n	8009e16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4906      	ldr	r1, [pc, #24]	; (8009d9c <HAL_I2C_Mem_Read+0x22c>)
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 fa98 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d008      	beq.n	8009da0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e10e      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
 8009d92:	bf00      	nop
 8009d94:	00100002 	.word	0x00100002
 8009d98:	ffff0000 	.word	0xffff0000
 8009d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691a      	ldr	r2, [r3, #16]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e14:	e0b8      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4966      	ldr	r1, [pc, #408]	; (8009fb8 <HAL_I2C_Mem_Read+0x448>)
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fa49 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0bf      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691a      	ldr	r2, [r3, #16]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	2200      	movs	r2, #0
 8009e7a:	494f      	ldr	r1, [pc, #316]	; (8009fb8 <HAL_I2C_Mem_Read+0x448>)
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fa1b 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e091      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	b2d2      	uxtb	r2, r2
 8009ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f00:	e042      	b.n	8009f88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 fb2e 	bl	800a568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e04c      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d118      	bne.n	8009f88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f47f aec2 	bne.w	8009d16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3728      	adds	r7, #40	; 0x28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	00010004 	.word	0x00010004

08009fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	817b      	strh	r3, [r7, #10]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	813b      	strh	r3, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f960 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00d      	beq.n	800a01a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00c:	d103      	bne.n	800a016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e05f      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a01a:	897b      	ldrh	r3, [r7, #10]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	6a3a      	ldr	r2, [r7, #32]
 800a02e:	492d      	ldr	r1, [pc, #180]	; (800a0e4 <I2C_RequestMemoryWrite+0x128>)
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 f998 	bl	800a366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e04c      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a058:	6a39      	ldr	r1, [r7, #32]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fa02 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d107      	bne.n	800a07e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a07c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e02b      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a082:	88fb      	ldrh	r3, [r7, #6]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d105      	bne.n	800a094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a088:	893b      	ldrh	r3, [r7, #8]
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	611a      	str	r2, [r3, #16]
 800a092:	e021      	b.n	800a0d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a094:	893b      	ldrh	r3, [r7, #8]
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	b29b      	uxth	r3, r3
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	6a39      	ldr	r1, [r7, #32]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f9dc 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d107      	bne.n	800a0ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e005      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ce:	893b      	ldrh	r3, [r7, #8]
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	00010002 	.word	0x00010002

0800a0e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	817b      	strh	r3, [r7, #10]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	813b      	strh	r3, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	2200      	movs	r2, #0
 800a12a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f8c2 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a148:	d103      	bne.n	800a152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e0aa      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	6a3a      	ldr	r2, [r7, #32]
 800a16a:	4952      	ldr	r1, [pc, #328]	; (800a2b4 <I2C_RequestMemoryRead+0x1cc>)
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f8fa 	bl	800a366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e097      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	6a39      	ldr	r1, [r7, #32]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f964 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d107      	bne.n	800a1ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e076      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d105      	bne.n	800a1d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	611a      	str	r2, [r3, #16]
 800a1ce:	e021      	b.n	800a214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	0a1b      	lsrs	r3, r3, #8
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	6a39      	ldr	r1, [r7, #32]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f93e 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d107      	bne.n	800a206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e050      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a20a:	893b      	ldrh	r3, [r7, #8]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	6a39      	ldr	r1, [r7, #32]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f923 	bl	800a464 <I2C_WaitOnTXEFlagUntilTimeout>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00d      	beq.n	800a240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d107      	bne.n	800a23c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a23a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e035      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a24e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2200      	movs	r2, #0
 800a258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f82b 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00d      	beq.n	800a284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a276:	d103      	bne.n	800a280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e013      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a284:	897b      	ldrh	r3, [r7, #10]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f043 0301 	orr.w	r3, r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	6a3a      	ldr	r2, [r7, #32]
 800a298:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <I2C_RequestMemoryRead+0x1cc>)
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f863 	bl	800a366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	00010002 	.word	0x00010002

0800a2b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2c8:	e025      	b.n	800a316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d021      	beq.n	800a316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d2:	f7fe fe2b 	bl	8008f2c <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d302      	bcc.n	800a2e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d116      	bne.n	800a316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	f043 0220 	orr.w	r2, r3, #32
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e023      	b.n	800a35e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	0c1b      	lsrs	r3, r3, #16
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d10d      	bne.n	800a33c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	43da      	mvns	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4013      	ands	r3, r2
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	e00c      	b.n	800a356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	43da      	mvns	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4013      	ands	r3, r2
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf0c      	ite	eq
 800a34e:	2301      	moveq	r3, #1
 800a350:	2300      	movne	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	79fb      	ldrb	r3, [r7, #7]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d0b6      	beq.n	800a2ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a374:	e051      	b.n	800a41a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a384:	d123      	bne.n	800a3ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a39e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	f043 0204 	orr.w	r2, r3, #4
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e046      	b.n	800a45c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d4:	d021      	beq.n	800a41a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d6:	f7fe fda9 	bl	8008f2c <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d116      	bne.n	800a41a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	f043 0220 	orr.w	r2, r3, #32
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e020      	b.n	800a45c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	0c1b      	lsrs	r3, r3, #16
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d10c      	bne.n	800a43e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	43da      	mvns	r2, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4013      	ands	r3, r2
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	bf14      	ite	ne
 800a436:	2301      	movne	r3, #1
 800a438:	2300      	moveq	r3, #0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	e00b      	b.n	800a456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	43da      	mvns	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4013      	ands	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bf14      	ite	ne
 800a450:	2301      	movne	r3, #1
 800a452:	2300      	moveq	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d18d      	bne.n	800a376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a470:	e02d      	b.n	800a4ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 f8ce 	bl	800a614 <I2C_IsAcknowledgeFailed>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e02d      	b.n	800a4de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a488:	d021      	beq.n	800a4ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48a:	f7fe fd4f 	bl	8008f2c <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	429a      	cmp	r2, r3
 800a498:	d302      	bcc.n	800a4a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d116      	bne.n	800a4ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	f043 0220 	orr.w	r2, r3, #32
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e007      	b.n	800a4de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d8:	2b80      	cmp	r3, #128	; 0x80
 800a4da:	d1ca      	bne.n	800a472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4f2:	e02d      	b.n	800a550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f88d 	bl	800a614 <I2C_IsAcknowledgeFailed>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e02d      	b.n	800a560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d021      	beq.n	800a550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a50c:	f7fe fd0e 	bl	8008f2c <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d302      	bcc.n	800a522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d116      	bne.n	800a550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	f043 0220 	orr.w	r2, r3, #32
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e007      	b.n	800a560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d1ca      	bne.n	800a4f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a574:	e042      	b.n	800a5fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b10      	cmp	r3, #16
 800a582:	d119      	bne.n	800a5b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f06f 0210 	mvn.w	r2, #16
 800a58c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e029      	b.n	800a60c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b8:	f7fe fcb8 	bl	8008f2c <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d302      	bcc.n	800a5ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d116      	bne.n	800a5fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	f043 0220 	orr.w	r2, r3, #32
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e007      	b.n	800a60c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	d1b5      	bne.n	800a576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62a:	d11b      	bne.n	800a664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	f043 0204 	orr.w	r2, r3, #4
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e000      	b.n	800a666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b20      	cmp	r3, #32
 800a686:	d129      	bne.n	800a6dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2224      	movs	r2, #36	; 0x24
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0210 	bic.w	r2, r2, #16
 800a6ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0201 	orr.w	r2, r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b085      	sub	sp, #20
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b20      	cmp	r3, #32
 800a702:	d12a      	bne.n	800a75a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2224      	movs	r2, #36	; 0x24
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0201 	bic.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a724:	89fb      	ldrh	r3, [r7, #14]
 800a726:	f023 030f 	bic.w	r3, r3, #15
 800a72a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	89fb      	ldrh	r3, [r7, #14]
 800a732:	4313      	orrs	r3, r2
 800a734:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	89fa      	ldrh	r2, [r7, #14]
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f042 0201 	orr.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	e000      	b.n	800a75c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a75a:	2302      	movs	r3, #2
  }
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e267      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d075      	beq.n	800a872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a786:	4b88      	ldr	r3, [pc, #544]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f003 030c 	and.w	r3, r3, #12
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d00c      	beq.n	800a7ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a792:	4b85      	ldr	r3, [pc, #532]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a79a:	2b08      	cmp	r3, #8
 800a79c:	d112      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a79e:	4b82      	ldr	r3, [pc, #520]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7aa:	d10b      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7ac:	4b7e      	ldr	r3, [pc, #504]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05b      	beq.n	800a870 <HAL_RCC_OscConfig+0x108>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d157      	bne.n	800a870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e242      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7cc:	d106      	bne.n	800a7dc <HAL_RCC_OscConfig+0x74>
 800a7ce:	4b76      	ldr	r3, [pc, #472]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a75      	ldr	r2, [pc, #468]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	e01d      	b.n	800a818 <HAL_RCC_OscConfig+0xb0>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7e4:	d10c      	bne.n	800a800 <HAL_RCC_OscConfig+0x98>
 800a7e6:	4b70      	ldr	r3, [pc, #448]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a6f      	ldr	r2, [pc, #444]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	4b6d      	ldr	r3, [pc, #436]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a6c      	ldr	r2, [pc, #432]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	e00b      	b.n	800a818 <HAL_RCC_OscConfig+0xb0>
 800a800:	4b69      	ldr	r3, [pc, #420]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a68      	ldr	r2, [pc, #416]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80a:	6013      	str	r3, [r2, #0]
 800a80c:	4b66      	ldr	r3, [pc, #408]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a65      	ldr	r2, [pc, #404]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d013      	beq.n	800a848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a820:	f7fe fb84 	bl	8008f2c <HAL_GetTick>
 800a824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a826:	e008      	b.n	800a83a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a828:	f7fe fb80 	bl	8008f2c <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	2b64      	cmp	r3, #100	; 0x64
 800a834:	d901      	bls.n	800a83a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e207      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a83a:	4b5b      	ldr	r3, [pc, #364]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0f0      	beq.n	800a828 <HAL_RCC_OscConfig+0xc0>
 800a846:	e014      	b.n	800a872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a848:	f7fe fb70 	bl	8008f2c <HAL_GetTick>
 800a84c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a84e:	e008      	b.n	800a862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a850:	f7fe fb6c 	bl	8008f2c <HAL_GetTick>
 800a854:	4602      	mov	r2, r0
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	2b64      	cmp	r3, #100	; 0x64
 800a85c:	d901      	bls.n	800a862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e1f3      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a862:	4b51      	ldr	r3, [pc, #324]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1f0      	bne.n	800a850 <HAL_RCC_OscConfig+0xe8>
 800a86e:	e000      	b.n	800a872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d063      	beq.n	800a946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a87e:	4b4a      	ldr	r3, [pc, #296]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f003 030c 	and.w	r3, r3, #12
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a88a:	4b47      	ldr	r3, [pc, #284]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a892:	2b08      	cmp	r3, #8
 800a894:	d11c      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a896:	4b44      	ldr	r3, [pc, #272]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d116      	bne.n	800a8d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8a2:	4b41      	ldr	r3, [pc, #260]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <HAL_RCC_OscConfig+0x152>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d001      	beq.n	800a8ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e1c7      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ba:	4b3b      	ldr	r3, [pc, #236]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	4937      	ldr	r1, [pc, #220]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8ce:	e03a      	b.n	800a946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d020      	beq.n	800a91a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8d8:	4b34      	ldr	r3, [pc, #208]	; (800a9ac <HAL_RCC_OscConfig+0x244>)
 800a8da:	2201      	movs	r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8de:	f7fe fb25 	bl	8008f2c <HAL_GetTick>
 800a8e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8e6:	f7fe fb21 	bl	8008f2c <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e1a8      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8f8:	4b2b      	ldr	r3, [pc, #172]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0302 	and.w	r3, r3, #2
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a904:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	4925      	ldr	r1, [pc, #148]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a914:	4313      	orrs	r3, r2
 800a916:	600b      	str	r3, [r1, #0]
 800a918:	e015      	b.n	800a946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <HAL_RCC_OscConfig+0x244>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a920:	f7fe fb04 	bl	8008f2c <HAL_GetTick>
 800a924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a926:	e008      	b.n	800a93a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a928:	f7fe fb00 	bl	8008f2c <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d901      	bls.n	800a93a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e187      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a93a:	4b1b      	ldr	r3, [pc, #108]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0302 	and.w	r3, r3, #2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1f0      	bne.n	800a928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0308 	and.w	r3, r3, #8
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d036      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <HAL_RCC_OscConfig+0x248>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a960:	f7fe fae4 	bl	8008f2c <HAL_GetTick>
 800a964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a966:	e008      	b.n	800a97a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a968:	f7fe fae0 	bl	8008f2c <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b02      	cmp	r3, #2
 800a974:	d901      	bls.n	800a97a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e167      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <HAL_RCC_OscConfig+0x240>)
 800a97c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0f0      	beq.n	800a968 <HAL_RCC_OscConfig+0x200>
 800a986:	e01b      	b.n	800a9c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a988:	4b09      	ldr	r3, [pc, #36]	; (800a9b0 <HAL_RCC_OscConfig+0x248>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a98e:	f7fe facd 	bl	8008f2c <HAL_GetTick>
 800a992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a994:	e00e      	b.n	800a9b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a996:	f7fe fac9 	bl	8008f2c <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d907      	bls.n	800a9b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e150      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
 800a9a8:	40023800 	.word	0x40023800
 800a9ac:	42470000 	.word	0x42470000
 800a9b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9b4:	4b88      	ldr	r3, [pc, #544]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800a9b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1ea      	bne.n	800a996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8097 	beq.w	800aafc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9d2:	4b81      	ldr	r3, [pc, #516]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10f      	bne.n	800a9fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60bb      	str	r3, [r7, #8]
 800a9e2:	4b7d      	ldr	r3, [pc, #500]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e6:	4a7c      	ldr	r2, [pc, #496]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800a9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ee:	4b7a      	ldr	r3, [pc, #488]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	60bb      	str	r3, [r7, #8]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9fe:	4b77      	ldr	r3, [pc, #476]	; (800abdc <HAL_RCC_OscConfig+0x474>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d118      	bne.n	800aa3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa0a:	4b74      	ldr	r3, [pc, #464]	; (800abdc <HAL_RCC_OscConfig+0x474>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a73      	ldr	r2, [pc, #460]	; (800abdc <HAL_RCC_OscConfig+0x474>)
 800aa10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa16:	f7fe fa89 	bl	8008f2c <HAL_GetTick>
 800aa1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa1c:	e008      	b.n	800aa30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa1e:	f7fe fa85 	bl	8008f2c <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e10c      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa30:	4b6a      	ldr	r3, [pc, #424]	; (800abdc <HAL_RCC_OscConfig+0x474>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0f0      	beq.n	800aa1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d106      	bne.n	800aa52 <HAL_RCC_OscConfig+0x2ea>
 800aa44:	4b64      	ldr	r3, [pc, #400]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	4a63      	ldr	r2, [pc, #396]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa50:	e01c      	b.n	800aa8c <HAL_RCC_OscConfig+0x324>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	d10c      	bne.n	800aa74 <HAL_RCC_OscConfig+0x30c>
 800aa5a:	4b5f      	ldr	r3, [pc, #380]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	4a5e      	ldr	r2, [pc, #376]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa60:	f043 0304 	orr.w	r3, r3, #4
 800aa64:	6713      	str	r3, [r2, #112]	; 0x70
 800aa66:	4b5c      	ldr	r3, [pc, #368]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6a:	4a5b      	ldr	r2, [pc, #364]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa6c:	f043 0301 	orr.w	r3, r3, #1
 800aa70:	6713      	str	r3, [r2, #112]	; 0x70
 800aa72:	e00b      	b.n	800aa8c <HAL_RCC_OscConfig+0x324>
 800aa74:	4b58      	ldr	r3, [pc, #352]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa78:	4a57      	ldr	r2, [pc, #348]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa7a:	f023 0301 	bic.w	r3, r3, #1
 800aa7e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa80:	4b55      	ldr	r3, [pc, #340]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	4a54      	ldr	r2, [pc, #336]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aa86:	f023 0304 	bic.w	r3, r3, #4
 800aa8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d015      	beq.n	800aac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa94:	f7fe fa4a 	bl	8008f2c <HAL_GetTick>
 800aa98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa9a:	e00a      	b.n	800aab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa9c:	f7fe fa46 	bl	8008f2c <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e0cb      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aab2:	4b49      	ldr	r3, [pc, #292]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0ee      	beq.n	800aa9c <HAL_RCC_OscConfig+0x334>
 800aabe:	e014      	b.n	800aaea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aac0:	f7fe fa34 	bl	8008f2c <HAL_GetTick>
 800aac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aac6:	e00a      	b.n	800aade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aac8:	f7fe fa30 	bl	8008f2c <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d901      	bls.n	800aade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e0b5      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aade:	4b3e      	ldr	r3, [pc, #248]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1ee      	bne.n	800aac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d105      	bne.n	800aafc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaf0:	4b39      	ldr	r3, [pc, #228]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf4:	4a38      	ldr	r2, [pc, #224]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800aaf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aafa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 80a1 	beq.w	800ac48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab06:	4b34      	ldr	r3, [pc, #208]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f003 030c 	and.w	r3, r3, #12
 800ab0e:	2b08      	cmp	r3, #8
 800ab10:	d05c      	beq.n	800abcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d141      	bne.n	800ab9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab1a:	4b31      	ldr	r3, [pc, #196]	; (800abe0 <HAL_RCC_OscConfig+0x478>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab20:	f7fe fa04 	bl	8008f2c <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab28:	f7fe fa00 	bl	8008f2c <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e087      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab3a:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69da      	ldr	r2, [r3, #28]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	019b      	lsls	r3, r3, #6
 800ab56:	431a      	orrs	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5c:	085b      	lsrs	r3, r3, #1
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	041b      	lsls	r3, r3, #16
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	491b      	ldr	r1, [pc, #108]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab70:	4b1b      	ldr	r3, [pc, #108]	; (800abe0 <HAL_RCC_OscConfig+0x478>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab76:	f7fe f9d9 	bl	8008f2c <HAL_GetTick>
 800ab7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab7c:	e008      	b.n	800ab90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab7e:	f7fe f9d5 	bl	8008f2c <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e05c      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab90:	4b11      	ldr	r3, [pc, #68]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0f0      	beq.n	800ab7e <HAL_RCC_OscConfig+0x416>
 800ab9c:	e054      	b.n	800ac48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab9e:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <HAL_RCC_OscConfig+0x478>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aba4:	f7fe f9c2 	bl	8008f2c <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abac:	f7fe f9be 	bl	8008f2c <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e045      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abbe:	4b06      	ldr	r3, [pc, #24]	; (800abd8 <HAL_RCC_OscConfig+0x470>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f0      	bne.n	800abac <HAL_RCC_OscConfig+0x444>
 800abca:	e03d      	b.n	800ac48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d107      	bne.n	800abe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e038      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
 800abd8:	40023800 	.word	0x40023800
 800abdc:	40007000 	.word	0x40007000
 800abe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800abe4:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <HAL_RCC_OscConfig+0x4ec>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d028      	beq.n	800ac44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d121      	bne.n	800ac44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d11a      	bne.n	800ac44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ac14:	4013      	ands	r3, r2
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d111      	bne.n	800ac44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d107      	bne.n	800ac44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d001      	beq.n	800ac48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	40023800 	.word	0x40023800

0800ac58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0cc      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac6c:	4b68      	ldr	r3, [pc, #416]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d90c      	bls.n	800ac94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac7a:	4b65      	ldr	r3, [pc, #404]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac82:	4b63      	ldr	r3, [pc, #396]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d001      	beq.n	800ac94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e0b8      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d020      	beq.n	800ace2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800acac:	4b59      	ldr	r3, [pc, #356]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	4a58      	ldr	r2, [pc, #352]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800acb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0308 	and.w	r3, r3, #8
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800acc4:	4b53      	ldr	r3, [pc, #332]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	4a52      	ldr	r2, [pc, #328]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800acce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acd0:	4b50      	ldr	r3, [pc, #320]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	494d      	ldr	r1, [pc, #308]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d044      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d107      	bne.n	800ad06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acf6:	4b47      	ldr	r3, [pc, #284]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d119      	bne.n	800ad36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e07f      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d003      	beq.n	800ad16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d107      	bne.n	800ad26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad16:	4b3f      	ldr	r3, [pc, #252]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d109      	bne.n	800ad36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e06f      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad26:	4b3b      	ldr	r3, [pc, #236]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e067      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad36:	4b37      	ldr	r3, [pc, #220]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	f023 0203 	bic.w	r2, r3, #3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4934      	ldr	r1, [pc, #208]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ad44:	4313      	orrs	r3, r2
 800ad46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad48:	f7fe f8f0 	bl	8008f2c <HAL_GetTick>
 800ad4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad4e:	e00a      	b.n	800ad66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad50:	f7fe f8ec 	bl	8008f2c <HAL_GetTick>
 800ad54:	4602      	mov	r2, r0
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d901      	bls.n	800ad66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e04f      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad66:	4b2b      	ldr	r3, [pc, #172]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f003 020c 	and.w	r2, r3, #12
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d1eb      	bne.n	800ad50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad78:	4b25      	ldr	r3, [pc, #148]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d20c      	bcs.n	800ada0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad86:	4b22      	ldr	r3, [pc, #136]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	b2d2      	uxtb	r2, r2
 800ad8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad8e:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <HAL_RCC_ClockConfig+0x1b8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d001      	beq.n	800ada0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e032      	b.n	800ae06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0304 	and.w	r3, r3, #4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d008      	beq.n	800adbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adac:	4b19      	ldr	r3, [pc, #100]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	4916      	ldr	r1, [pc, #88]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d009      	beq.n	800adde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800adca:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	490e      	ldr	r1, [pc, #56]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800adda:	4313      	orrs	r3, r2
 800addc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800adde:	f000 f821 	bl	800ae24 <HAL_RCC_GetSysClockFreq>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <HAL_RCC_ClockConfig+0x1bc>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	091b      	lsrs	r3, r3, #4
 800adea:	f003 030f 	and.w	r3, r3, #15
 800adee:	490a      	ldr	r1, [pc, #40]	; (800ae18 <HAL_RCC_ClockConfig+0x1c0>)
 800adf0:	5ccb      	ldrb	r3, [r1, r3]
 800adf2:	fa22 f303 	lsr.w	r3, r2, r3
 800adf6:	4a09      	ldr	r2, [pc, #36]	; (800ae1c <HAL_RCC_ClockConfig+0x1c4>)
 800adf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800adfa:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <HAL_RCC_ClockConfig+0x1c8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe f850 	bl	8008ea4 <HAL_InitTick>

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	40023c00 	.word	0x40023c00
 800ae14:	40023800 	.word	0x40023800
 800ae18:	0801b9c4 	.word	0x0801b9c4
 800ae1c:	200001dc 	.word	0x200001dc
 800ae20:	20000318 	.word	0x20000318

0800ae24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae28:	b094      	sub	sp, #80	; 0x50
 800ae2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae30:	2300      	movs	r3, #0
 800ae32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae34:	2300      	movs	r3, #0
 800ae36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae3c:	4b79      	ldr	r3, [pc, #484]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f003 030c 	and.w	r3, r3, #12
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d00d      	beq.n	800ae64 <HAL_RCC_GetSysClockFreq+0x40>
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	f200 80e1 	bhi.w	800b010 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <HAL_RCC_GetSysClockFreq+0x34>
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d003      	beq.n	800ae5e <HAL_RCC_GetSysClockFreq+0x3a>
 800ae56:	e0db      	b.n	800b010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae58:	4b73      	ldr	r3, [pc, #460]	; (800b028 <HAL_RCC_GetSysClockFreq+0x204>)
 800ae5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800ae5c:	e0db      	b.n	800b016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae5e:	4b73      	ldr	r3, [pc, #460]	; (800b02c <HAL_RCC_GetSysClockFreq+0x208>)
 800ae60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ae62:	e0d8      	b.n	800b016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae64:	4b6f      	ldr	r3, [pc, #444]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae6e:	4b6d      	ldr	r3, [pc, #436]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d063      	beq.n	800af42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae7a:	4b6a      	ldr	r3, [pc, #424]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	099b      	lsrs	r3, r3, #6
 800ae80:	2200      	movs	r2, #0
 800ae82:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae84:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8c:	633b      	str	r3, [r7, #48]	; 0x30
 800ae8e:	2300      	movs	r3, #0
 800ae90:	637b      	str	r3, [r7, #52]	; 0x34
 800ae92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ae96:	4622      	mov	r2, r4
 800ae98:	462b      	mov	r3, r5
 800ae9a:	f04f 0000 	mov.w	r0, #0
 800ae9e:	f04f 0100 	mov.w	r1, #0
 800aea2:	0159      	lsls	r1, r3, #5
 800aea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aea8:	0150      	lsls	r0, r2, #5
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4621      	mov	r1, r4
 800aeb0:	1a51      	subs	r1, r2, r1
 800aeb2:	6139      	str	r1, [r7, #16]
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	eb63 0301 	sbc.w	r3, r3, r1
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	f04f 0200 	mov.w	r2, #0
 800aec0:	f04f 0300 	mov.w	r3, #0
 800aec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aec8:	4659      	mov	r1, fp
 800aeca:	018b      	lsls	r3, r1, #6
 800aecc:	4651      	mov	r1, sl
 800aece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aed2:	4651      	mov	r1, sl
 800aed4:	018a      	lsls	r2, r1, #6
 800aed6:	4651      	mov	r1, sl
 800aed8:	ebb2 0801 	subs.w	r8, r2, r1
 800aedc:	4659      	mov	r1, fp
 800aede:	eb63 0901 	sbc.w	r9, r3, r1
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	f04f 0300 	mov.w	r3, #0
 800aeea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aeee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aef6:	4690      	mov	r8, r2
 800aef8:	4699      	mov	r9, r3
 800aefa:	4623      	mov	r3, r4
 800aefc:	eb18 0303 	adds.w	r3, r8, r3
 800af00:	60bb      	str	r3, [r7, #8]
 800af02:	462b      	mov	r3, r5
 800af04:	eb49 0303 	adc.w	r3, r9, r3
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	f04f 0200 	mov.w	r2, #0
 800af0e:	f04f 0300 	mov.w	r3, #0
 800af12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800af16:	4629      	mov	r1, r5
 800af18:	024b      	lsls	r3, r1, #9
 800af1a:	4621      	mov	r1, r4
 800af1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800af20:	4621      	mov	r1, r4
 800af22:	024a      	lsls	r2, r1, #9
 800af24:	4610      	mov	r0, r2
 800af26:	4619      	mov	r1, r3
 800af28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af2a:	2200      	movs	r2, #0
 800af2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af34:	f7f5 fec8 	bl	8000cc8 <__aeabi_uldivmod>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4613      	mov	r3, r2
 800af3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af40:	e058      	b.n	800aff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af42:	4b38      	ldr	r3, [pc, #224]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	099b      	lsrs	r3, r3, #6
 800af48:	2200      	movs	r2, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	4611      	mov	r1, r2
 800af4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800af52:	623b      	str	r3, [r7, #32]
 800af54:	2300      	movs	r3, #0
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
 800af58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800af5c:	4642      	mov	r2, r8
 800af5e:	464b      	mov	r3, r9
 800af60:	f04f 0000 	mov.w	r0, #0
 800af64:	f04f 0100 	mov.w	r1, #0
 800af68:	0159      	lsls	r1, r3, #5
 800af6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af6e:	0150      	lsls	r0, r2, #5
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4641      	mov	r1, r8
 800af76:	ebb2 0a01 	subs.w	sl, r2, r1
 800af7a:	4649      	mov	r1, r9
 800af7c:	eb63 0b01 	sbc.w	fp, r3, r1
 800af80:	f04f 0200 	mov.w	r2, #0
 800af84:	f04f 0300 	mov.w	r3, #0
 800af88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800af8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800af90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800af94:	ebb2 040a 	subs.w	r4, r2, sl
 800af98:	eb63 050b 	sbc.w	r5, r3, fp
 800af9c:	f04f 0200 	mov.w	r2, #0
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	00eb      	lsls	r3, r5, #3
 800afa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afaa:	00e2      	lsls	r2, r4, #3
 800afac:	4614      	mov	r4, r2
 800afae:	461d      	mov	r5, r3
 800afb0:	4643      	mov	r3, r8
 800afb2:	18e3      	adds	r3, r4, r3
 800afb4:	603b      	str	r3, [r7, #0]
 800afb6:	464b      	mov	r3, r9
 800afb8:	eb45 0303 	adc.w	r3, r5, r3
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	f04f 0200 	mov.w	r2, #0
 800afc2:	f04f 0300 	mov.w	r3, #0
 800afc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800afca:	4629      	mov	r1, r5
 800afcc:	028b      	lsls	r3, r1, #10
 800afce:	4621      	mov	r1, r4
 800afd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800afd4:	4621      	mov	r1, r4
 800afd6:	028a      	lsls	r2, r1, #10
 800afd8:	4610      	mov	r0, r2
 800afda:	4619      	mov	r1, r3
 800afdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afde:	2200      	movs	r2, #0
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	61fa      	str	r2, [r7, #28]
 800afe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afe8:	f7f5 fe6e 	bl	8000cc8 <__aeabi_uldivmod>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4613      	mov	r3, r2
 800aff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <HAL_RCC_GetSysClockFreq+0x200>)
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	0c1b      	lsrs	r3, r3, #16
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	3301      	adds	r3, #1
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b00e:	e002      	b.n	800b016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b010:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCC_GetSysClockFreq+0x204>)
 800b012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b014:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3750      	adds	r7, #80	; 0x50
 800b01c:	46bd      	mov	sp, r7
 800b01e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b022:	bf00      	nop
 800b024:	40023800 	.word	0x40023800
 800b028:	00f42400 	.word	0x00f42400
 800b02c:	007a1200 	.word	0x007a1200

0800b030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b034:	4b03      	ldr	r3, [pc, #12]	; (800b044 <HAL_RCC_GetHCLKFreq+0x14>)
 800b036:	681b      	ldr	r3, [r3, #0]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	200001dc 	.word	0x200001dc

0800b048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b04c:	f7ff fff0 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800b050:	4602      	mov	r2, r0
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	0a9b      	lsrs	r3, r3, #10
 800b058:	f003 0307 	and.w	r3, r3, #7
 800b05c:	4903      	ldr	r1, [pc, #12]	; (800b06c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b05e:	5ccb      	ldrb	r3, [r1, r3]
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b064:	4618      	mov	r0, r3
 800b066:	bd80      	pop	{r7, pc}
 800b068:	40023800 	.word	0x40023800
 800b06c:	0801b9d4 	.word	0x0801b9d4

0800b070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b074:	f7ff ffdc 	bl	800b030 <HAL_RCC_GetHCLKFreq>
 800b078:	4602      	mov	r2, r0
 800b07a:	4b05      	ldr	r3, [pc, #20]	; (800b090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	0b5b      	lsrs	r3, r3, #13
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	4903      	ldr	r1, [pc, #12]	; (800b094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b086:	5ccb      	ldrb	r3, [r1, r3]
 800b088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	40023800 	.word	0x40023800
 800b094:	0801b9d4 	.word	0x0801b9d4

0800b098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10b      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d105      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d075      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0cc:	4b91      	ldr	r3, [pc, #580]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0d2:	f7fd ff2b 	bl	8008f2c <HAL_GetTick>
 800b0d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0d8:	e008      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b0da:	f7fd ff27 	bl	8008f2c <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d901      	bls.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e189      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0ec:	4b8a      	ldr	r3, [pc, #552]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1f0      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	d009      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	019a      	lsls	r2, r3, #6
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	071b      	lsls	r3, r3, #28
 800b110:	4981      	ldr	r1, [pc, #516]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b112:	4313      	orrs	r3, r2
 800b114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	d01f      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b124:	4b7c      	ldr	r3, [pc, #496]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b12a:	0f1b      	lsrs	r3, r3, #28
 800b12c:	f003 0307 	and.w	r3, r3, #7
 800b130:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	019a      	lsls	r2, r3, #6
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	061b      	lsls	r3, r3, #24
 800b13e:	431a      	orrs	r2, r3
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	071b      	lsls	r3, r3, #28
 800b144:	4974      	ldr	r1, [pc, #464]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b146:	4313      	orrs	r3, r2
 800b148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b14c:	4b72      	ldr	r3, [pc, #456]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b14e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b152:	f023 021f 	bic.w	r2, r3, #31
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	496e      	ldr	r1, [pc, #440]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00d      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	019a      	lsls	r2, r3, #6
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	061b      	lsls	r3, r3, #24
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	071b      	lsls	r3, r3, #28
 800b184:	4964      	ldr	r1, [pc, #400]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b186:	4313      	orrs	r3, r2
 800b188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b18c:	4b61      	ldr	r3, [pc, #388]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b18e:	2201      	movs	r2, #1
 800b190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b192:	f7fd fecb 	bl	8008f2c <HAL_GetTick>
 800b196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b198:	e008      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b19a:	f7fd fec7 	bl	8008f2c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e129      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b1ac:	4b5a      	ldr	r3, [pc, #360]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0f0      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d079      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b1d0:	4b52      	ldr	r3, [pc, #328]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b1d6:	f7fd fea9 	bl	8008f2c <HAL_GetTick>
 800b1da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1dc:	e008      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b1de:	f7fd fea5 	bl	8008f2c <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e107      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1f0:	4b49      	ldr	r3, [pc, #292]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fc:	d0ef      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	d020      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b20a:	4b43      	ldr	r3, [pc, #268]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b210:	0f1b      	lsrs	r3, r3, #28
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	019a      	lsls	r2, r3, #6
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	061b      	lsls	r3, r3, #24
 800b224:	431a      	orrs	r2, r3
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	071b      	lsls	r3, r3, #28
 800b22a:	493b      	ldr	r1, [pc, #236]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b22c:	4313      	orrs	r3, r2
 800b22e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b232:	4b39      	ldr	r3, [pc, #228]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b238:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	3b01      	subs	r3, #1
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	4934      	ldr	r1, [pc, #208]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b246:	4313      	orrs	r3, r2
 800b248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0308 	and.w	r3, r3, #8
 800b254:	2b00      	cmp	r3, #0
 800b256:	d01e      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b258:	4b2f      	ldr	r3, [pc, #188]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25e:	0e1b      	lsrs	r3, r3, #24
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	019a      	lsls	r2, r3, #6
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	061b      	lsls	r3, r3, #24
 800b270:	431a      	orrs	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	071b      	lsls	r3, r3, #28
 800b278:	4927      	ldr	r1, [pc, #156]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b286:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	4922      	ldr	r1, [pc, #136]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b290:	4313      	orrs	r3, r2
 800b292:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b296:	4b21      	ldr	r3, [pc, #132]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b298:	2201      	movs	r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b29c:	f7fd fe46 	bl	8008f2c <HAL_GetTick>
 800b2a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b2a4:	f7fd fe42 	bl	8008f2c <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e0a4      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c2:	d1ef      	bne.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 808b 	beq.w	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	4b10      	ldr	r3, [pc, #64]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	4a0f      	ldr	r2, [pc, #60]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e2:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b2ee:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b2f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b2fa:	f7fd fe17 	bl	8008f2c <HAL_GetTick>
 800b2fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b300:	e010      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b302:	f7fd fe13 	bl	8008f2c <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d909      	bls.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e075      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800b314:	42470068 	.word	0x42470068
 800b318:	40023800 	.word	0x40023800
 800b31c:	42470070 	.word	0x42470070
 800b320:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b324:	4b38      	ldr	r3, [pc, #224]	; (800b408 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0e8      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b330:	4b36      	ldr	r3, [pc, #216]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b338:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02f      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d028      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b34e:	4b2f      	ldr	r3, [pc, #188]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b356:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b358:	4b2d      	ldr	r3, [pc, #180]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b35e:	4b2c      	ldr	r3, [pc, #176]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b364:	4a29      	ldr	r2, [pc, #164]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b36a:	4b28      	ldr	r3, [pc, #160]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b01      	cmp	r3, #1
 800b374:	d114      	bne.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b376:	f7fd fdd9 	bl	8008f2c <HAL_GetTick>
 800b37a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b37c:	e00a      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b37e:	f7fd fdd5 	bl	8008f2c <HAL_GetTick>
 800b382:	4602      	mov	r2, r0
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d901      	bls.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e035      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b394:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0ee      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ac:	d10d      	bne.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b3ae:	4b17      	ldr	r3, [pc, #92]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c2:	4912      	ldr	r1, [pc, #72]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	608b      	str	r3, [r1, #8]
 800b3c8:	e005      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	4a0f      	ldr	r2, [pc, #60]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b3d4:	6093      	str	r3, [r2, #8]
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3e2:	490a      	ldr	r1, [pc, #40]	; (800b40c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d004      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b3fa:	4b06      	ldr	r3, [pc, #24]	; (800b414 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800b3fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	40007000 	.word	0x40007000
 800b40c:	40023800 	.word	0x40023800
 800b410:	42470e40 	.word	0x42470e40
 800b414:	424711e0 	.word	0x424711e0

0800b418 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e066      	b.n	800b4fc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7f5b      	ldrb	r3, [r3, #29]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d105      	bne.n	800b444 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f8 fe34 	bl	80040ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	22ca      	movs	r2, #202	; 0xca
 800b450:	625a      	str	r2, [r3, #36]	; 0x24
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2253      	movs	r2, #83	; 0x53
 800b458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fa45 	bl	800b8ea <RTC_EnterInitMode>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d12c      	bne.n	800b4c4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6812      	ldr	r2, [r2, #0]
 800b474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b47c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6899      	ldr	r1, [r3, #8]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	431a      	orrs	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	431a      	orrs	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	68d2      	ldr	r2, [r2, #12]
 800b4a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6919      	ldr	r1, [r3, #16]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	041a      	lsls	r2, r3, #16
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa4c 	bl	800b958 <RTC_ExitInitMode>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d113      	bne.n	800b4f2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4d8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699a      	ldr	r2, [r3, #24]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	22ff      	movs	r2, #255	; 0xff
 800b4f8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	7f1b      	ldrb	r3, [r3, #28]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <HAL_RTC_SetTime+0x1c>
 800b51c:	2302      	movs	r3, #2
 800b51e:	e087      	b.n	800b630 <HAL_RTC_SetTime+0x12c>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2202      	movs	r2, #2
 800b52a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d126      	bne.n	800b580 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fa29 	bl	800b9a2 <RTC_ByteToBcd2>
 800b550:	4603      	mov	r3, r0
 800b552:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fa22 	bl	800b9a2 <RTC_ByteToBcd2>
 800b55e:	4603      	mov	r3, r0
 800b560:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b562:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	789b      	ldrb	r3, [r3, #2]
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fa1a 	bl	800b9a2 <RTC_ByteToBcd2>
 800b56e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b570:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	78db      	ldrb	r3, [r3, #3]
 800b578:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b57a:	4313      	orrs	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e018      	b.n	800b5b2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d102      	bne.n	800b594 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2200      	movs	r2, #0
 800b592:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b5a0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b5a6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	78db      	ldrb	r3, [r3, #3]
 800b5ac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	22ca      	movs	r2, #202	; 0xca
 800b5b8:	625a      	str	r2, [r3, #36]	; 0x24
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2253      	movs	r2, #83	; 0x53
 800b5c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 f991 	bl	800b8ea <RTC_EnterInitMode>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b5cc:	7cfb      	ldrb	r3, [r7, #19]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d120      	bne.n	800b614 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b5dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b5e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b5f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6899      	ldr	r1, [r3, #8]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	431a      	orrs	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 f9a4 	bl	800b958 <RTC_ExitInitMode>
 800b610:	4603      	mov	r3, r0
 800b612:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b614:	7cfb      	ldrb	r3, [r7, #19]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d102      	bne.n	800b620 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2201      	movs	r2, #1
 800b61e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	22ff      	movs	r2, #255	; 0xff
 800b626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	771a      	strb	r2, [r3, #28]

  return status;
 800b62e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b630:	4618      	mov	r0, r3
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	bd90      	pop	{r4, r7, pc}

0800b638 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b66a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b66e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	0c1b      	lsrs	r3, r3, #16
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	0a1b      	lsrs	r3, r3, #8
 800b684:	b2db      	uxtb	r3, r3
 800b686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	b2db      	uxtb	r3, r3
 800b694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	0d9b      	lsrs	r3, r3, #22
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11a      	bne.n	800b6ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f98f 	bl	800b9dc <RTC_Bcd2ToByte>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f986 	bl	800b9dc <RTC_Bcd2ToByte>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	789b      	ldrb	r3, [r3, #2]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 f97d 	bl	800b9dc <RTC_Bcd2ToByte>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6f4:	b590      	push	{r4, r7, lr}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	7f1b      	ldrb	r3, [r3, #28]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d101      	bne.n	800b710 <HAL_RTC_SetDate+0x1c>
 800b70c:	2302      	movs	r3, #2
 800b70e:	e071      	b.n	800b7f4 <HAL_RTC_SetDate+0x100>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2201      	movs	r2, #1
 800b714:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2202      	movs	r2, #2
 800b71a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10e      	bne.n	800b740 <HAL_RTC_SetDate+0x4c>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	785b      	ldrb	r3, [r3, #1]
 800b726:	f003 0310 	and.w	r3, r3, #16
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d008      	beq.n	800b740 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	785b      	ldrb	r3, [r3, #1]
 800b732:	f023 0310 	bic.w	r3, r3, #16
 800b736:	b2db      	uxtb	r3, r3
 800b738:	330a      	adds	r3, #10
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d11c      	bne.n	800b780 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	78db      	ldrb	r3, [r3, #3]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f929 	bl	800b9a2 <RTC_ByteToBcd2>
 800b750:	4603      	mov	r3, r0
 800b752:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f922 	bl	800b9a2 <RTC_ByteToBcd2>
 800b75e:	4603      	mov	r3, r0
 800b760:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b762:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	789b      	ldrb	r3, [r3, #2]
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 f91a 	bl	800b9a2 <RTC_ByteToBcd2>
 800b76e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b770:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	e00e      	b.n	800b79e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	78db      	ldrb	r3, [r3, #3]
 800b784:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	785b      	ldrb	r3, [r3, #1]
 800b78a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b78c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b792:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b79a:	4313      	orrs	r3, r2
 800b79c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	22ca      	movs	r2, #202	; 0xca
 800b7a4:	625a      	str	r2, [r3, #36]	; 0x24
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2253      	movs	r2, #83	; 0x53
 800b7ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 f89b 	bl	800b8ea <RTC_EnterInitMode>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b7b8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10c      	bne.n	800b7d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b7c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b7cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 f8c2 	bl	800b958 <RTC_ExitInitMode>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b7d8:	7cfb      	ldrb	r3, [r7, #19]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	22ff      	movs	r2, #255	; 0xff
 800b7ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	771a      	strb	r2, [r3, #28]

  return status;
 800b7f2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd90      	pop	{r4, r7, pc}

0800b7fc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b808:	2300      	movs	r3, #0
 800b80a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b816:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b81a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	0c1b      	lsrs	r3, r3, #16
 800b820:	b2da      	uxtb	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	0a1b      	lsrs	r3, r3, #8
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 031f 	and.w	r3, r3, #31
 800b830:	b2da      	uxtb	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	0b5b      	lsrs	r3, r3, #13
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	f003 0307 	and.w	r3, r3, #7
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d11a      	bne.n	800b890 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	78db      	ldrb	r3, [r3, #3]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f8bc 	bl	800b9dc <RTC_Bcd2ToByte>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	4618      	mov	r0, r3
 800b872:	f000 f8b3 	bl	800b9dc <RTC_Bcd2ToByte>
 800b876:	4603      	mov	r3, r0
 800b878:	461a      	mov	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	789b      	ldrb	r3, [r3, #2]
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f8aa 	bl	800b9dc <RTC_Bcd2ToByte>
 800b888:	4603      	mov	r3, r0
 800b88a:	461a      	mov	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8b4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8b6:	f7fd fb39 	bl	8008f2c <HAL_GetTick>
 800b8ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8bc:	e009      	b.n	800b8d2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8be:	f7fd fb35 	bl	8008f2c <HAL_GetTick>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8cc:	d901      	bls.n	800b8d2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e007      	b.n	800b8e2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0320 	and.w	r3, r3, #32
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d0ee      	beq.n	800b8be <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	d122      	bne.n	800b94e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b916:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b918:	f7fd fb08 	bl	8008f2c <HAL_GetTick>
 800b91c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b91e:	e00c      	b.n	800b93a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b920:	f7fd fb04 	bl	8008f2c <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b92e:	d904      	bls.n	800b93a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2204      	movs	r2, #4
 800b934:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <RTC_EnterInitMode+0x64>
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d1e8      	bne.n	800b920 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b972:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f003 0320 	and.w	r3, r3, #32
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff89 	bl	800b89a <HAL_RTC_WaitForSynchro>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2204      	movs	r2, #4
 800b992:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b9b0:	e005      	b.n	800b9be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	3b0a      	subs	r3, #10
 800b9bc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b09      	cmp	r3, #9
 800b9c2:	d8f6      	bhi.n	800b9b2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	b2db      	uxtb	r3, r3
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	091b      	lsrs	r3, r3, #4
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	0092      	lsls	r2, r2, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	4413      	add	r3, r2
 800ba06:	b2db      	uxtb	r3, r3
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e022      	b.n	800ba6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d105      	bne.n	800ba3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7f8 fb81 	bl	8004140 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2203      	movs	r2, #3
 800ba42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f814 	bl	800ba74 <HAL_SD_InitCard>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e00a      	b.n	800ba6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba74:	b5b0      	push	{r4, r5, r7, lr}
 800ba76:	b08e      	sub	sp, #56	; 0x38
 800ba78:	af04      	add	r7, sp, #16
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ba90:	2376      	movs	r3, #118	; 0x76
 800ba92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681d      	ldr	r5, [r3, #0]
 800ba98:	466c      	mov	r4, sp
 800ba9a:	f107 0314 	add.w	r3, r7, #20
 800ba9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800baa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800baa6:	f107 0308 	add.w	r3, r7, #8
 800baaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800baac:	4628      	mov	r0, r5
 800baae:	f002 ffb9 	bl	800ea24 <SDIO_Init>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800bab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e04f      	b.n	800bb64 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bac4:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <HAL_SD_InitCard+0xf8>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 fff1 	bl	800eab6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bad4:	4b25      	ldr	r3, [pc, #148]	; (800bb6c <HAL_SD_InitCard+0xf8>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800bada:	2002      	movs	r0, #2
 800badc:	f7fd fa32 	bl	8008f44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fe69 	bl	800c7b8 <SD_PowerON>
 800bae6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00b      	beq.n	800bb06 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e02e      	b.n	800bb64 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fd88 	bl	800c61c <SD_InitCard>
 800bb0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	431a      	orrs	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e01b      	b.n	800bb64 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb34:	4618      	mov	r0, r3
 800bb36:	f003 f850 	bl	800ebda <SDMMC_CmdBlockLength>
 800bb3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00f      	beq.n	800bb62 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a0a      	ldr	r2, [pc, #40]	; (800bb70 <HAL_SD_InitCard+0xfc>)
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3728      	adds	r7, #40	; 0x28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb6c:	422580a0 	.word	0x422580a0
 800bb70:	004005ff 	.word	0x004005ff

0800bb74 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b092      	sub	sp, #72	; 0x48
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb82:	f7fd f9d3 	bl	8008f2c <HAL_GetTick>
 800bb86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d107      	bne.n	800bba6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e1bd      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	f040 81b0 	bne.w	800bf14 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bbba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	441a      	add	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d907      	bls.n	800bbd8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbcc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e1a4      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2203      	movs	r2, #3
 800bbdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d002      	beq.n	800bbf6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	025b      	lsls	r3, r3, #9
 800bbf4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	025b      	lsls	r3, r3, #9
 800bc00:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bc02:	2390      	movs	r3, #144	; 0x90
 800bc04:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bc06:	2302      	movs	r3, #2
 800bc08:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f107 0214 	add.w	r2, r7, #20
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f002 ffb0 	bl	800eb82 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d90a      	bls.n	800bc3e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc34:	4618      	mov	r0, r3
 800bc36:	f003 f814 	bl	800ec62 <SDMMC_CmdReadMultiBlock>
 800bc3a:	6478      	str	r0, [r7, #68]	; 0x44
 800bc3c:	e009      	b.n	800bc52 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f002 ffe7 	bl	800ec1e <SDMMC_CmdReadSingleBlock>
 800bc50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d012      	beq.n	800bc7e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a7a      	ldr	r2, [pc, #488]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800bc5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc66:	431a      	orrs	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e151      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800bc82:	e061      	b.n	800bd48 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d03c      	beq.n	800bd0c <HAL_SD_ReadBlocks+0x198>
 800bc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d039      	beq.n	800bd0c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc9c:	e033      	b.n	800bd06 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f002 fee9 	bl	800ea7a <SDIO_ReadFIFO>
 800bca8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	0a1b      	lsrs	r3, r3, #8
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcca:	3301      	adds	r3, #1
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	0c1b      	lsrs	r3, r3, #16
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce0:	3301      	adds	r3, #1
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	3b01      	subs	r3, #1
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	0e1b      	lsrs	r3, r3, #24
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800bd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd02:	3301      	adds	r3, #1
 800bd04:	643b      	str	r3, [r7, #64]	; 0x40
 800bd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd08:	2b07      	cmp	r3, #7
 800bd0a:	d9c8      	bls.n	800bc9e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bd0c:	f7fd f90e 	bl	8008f2c <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d902      	bls.n	800bd22 <HAL_SD_ReadBlocks+0x1ae>
 800bd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d112      	bne.n	800bd48 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a48      	ldr	r2, [pc, #288]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e0ec      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd4e:	f240 332a 	movw	r3, #810	; 0x32a
 800bd52:	4013      	ands	r3, r2
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d095      	beq.n	800bc84 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d022      	beq.n	800bdac <HAL_SD_ReadBlocks+0x238>
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d91f      	bls.n	800bdac <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d01b      	beq.n	800bdac <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f002 ffd9 	bl	800ed30 <SDMMC_CmdStopTransfer>
 800bd7e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d012      	beq.n	800bdac <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a2f      	ldr	r2, [pc, #188]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800bd8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd94:	431a      	orrs	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e0ba      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb2:	f003 0308 	and.w	r3, r3, #8
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a22      	ldr	r2, [pc, #136]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800bdc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc6:	f043 0208 	orr.w	r2, r3, #8
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e0a0      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d012      	beq.n	800be14 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a15      	ldr	r2, [pc, #84]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800bdf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	f043 0202 	orr.w	r2, r3, #2
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e086      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1a:	f003 0320 	and.w	r3, r3, #32
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d063      	beq.n	800beea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a08      	ldr	r2, [pc, #32]	; (800be48 <HAL_SD_ReadBlocks+0x2d4>)
 800be28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	f043 0220 	orr.w	r2, r3, #32
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e06c      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
 800be48:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4618      	mov	r0, r3
 800be52:	f002 fe12 	bl	800ea7a <SDIO_ReadFIFO>
 800be56:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	3301      	adds	r3, #1
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800be66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be68:	3b01      	subs	r3, #1
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800be6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6e:	0a1b      	lsrs	r3, r3, #8
 800be70:	b2da      	uxtb	r2, r3
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be78:	3301      	adds	r3, #1
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800be7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7e:	3b01      	subs	r3, #1
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	0c1b      	lsrs	r3, r3, #16
 800be86:	b2da      	uxtb	r2, r3
 800be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800be8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8e:	3301      	adds	r3, #1
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800be92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be94:	3b01      	subs	r3, #1
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	0e1b      	lsrs	r3, r3, #24
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800bea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea4:	3301      	adds	r3, #1
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	3b01      	subs	r3, #1
 800beac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800beae:	f7fd f83d 	bl	8008f2c <HAL_GetTick>
 800beb2:	4602      	mov	r2, r0
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800beba:	429a      	cmp	r2, r3
 800bebc:	d902      	bls.n	800bec4 <HAL_SD_ReadBlocks+0x350>
 800bebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d112      	bne.n	800beea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a18      	ldr	r2, [pc, #96]	; (800bf2c <HAL_SD_ReadBlocks+0x3b8>)
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e01b      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <HAL_SD_ReadBlocks+0x38a>
 800bef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1a6      	bne.n	800be4c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	e006      	b.n	800bf22 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
  }
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3748      	adds	r7, #72	; 0x48
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	004005ff 	.word	0x004005ff

0800bf30 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b092      	sub	sp, #72	; 0x48
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf3e:	f7fc fff5 	bl	8008f2c <HAL_GetTick>
 800bf42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d107      	bne.n	800bf62 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e166      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	f040 8159 	bne.w	800c222 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bf76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	441a      	add	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d907      	bls.n	800bf94 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e14d      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2203      	movs	r2, #3
 800bf98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d002      	beq.n	800bfb2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	025b      	lsls	r3, r3, #9
 800bfb0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bfb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	025b      	lsls	r3, r3, #9
 800bfbc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bfbe:	2390      	movs	r3, #144	; 0x90
 800bfc0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f107 0218 	add.w	r2, r7, #24
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f002 fdd2 	bl	800eb82 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d90a      	bls.n	800bffa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bff0:	4618      	mov	r0, r3
 800bff2:	f002 fe7a 	bl	800ecea <SDMMC_CmdWriteMultiBlock>
 800bff6:	6478      	str	r0, [r7, #68]	; 0x44
 800bff8:	e009      	b.n	800c00e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2210      	movs	r2, #16
 800bffe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c006:	4618      	mov	r0, r3
 800c008:	f002 fe4d 	bl	800eca6 <SDMMC_CmdWriteSingleBlock>
 800c00c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c010:	2b00      	cmp	r3, #0
 800c012:	d012      	beq.n	800c03a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a87      	ldr	r2, [pc, #540]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c01a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c022:	431a      	orrs	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e0fa      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800c03e:	e065      	b.n	800c10c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d040      	beq.n	800c0d0 <HAL_SD_WriteBlocks+0x1a0>
 800c04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d03d      	beq.n	800c0d0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c054:	2300      	movs	r3, #0
 800c056:	643b      	str	r3, [r7, #64]	; 0x40
 800c058:	e037      	b.n	800c0ca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	3301      	adds	r3, #1
 800c064:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c068:	3b01      	subs	r3, #1
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	021a      	lsls	r2, r3, #8
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	4313      	orrs	r3, r2
 800c076:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07a:	3301      	adds	r3, #1
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c080:	3b01      	subs	r3, #1
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	041a      	lsls	r2, r3, #16
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	3301      	adds	r3, #1
 800c094:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	3b01      	subs	r3, #1
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	061a      	lsls	r2, r3, #24
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f107 0214 	add.w	r2, r7, #20
 800c0bc:	4611      	mov	r1, r2
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f002 fce8 	bl	800ea94 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	643b      	str	r3, [r7, #64]	; 0x40
 800c0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0cc:	2b07      	cmp	r3, #7
 800c0ce:	d9c4      	bls.n	800c05a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c0d0:	f7fc ff2c 	bl	8008f2c <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d902      	bls.n	800c0e6 <HAL_SD_WriteBlocks+0x1b6>
 800c0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d112      	bne.n	800c10c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a53      	ldr	r2, [pc, #332]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c0ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e091      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c112:	f240 331a 	movw	r3, #794	; 0x31a
 800c116:	4013      	ands	r3, r2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d091      	beq.n	800c040 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c126:	2b00      	cmp	r3, #0
 800c128:	d022      	beq.n	800c170 <HAL_SD_WriteBlocks+0x240>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d91f      	bls.n	800c170 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c134:	2b03      	cmp	r3, #3
 800c136:	d01b      	beq.n	800c170 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f002 fdf7 	bl	800ed30 <SDMMC_CmdStopTransfer>
 800c142:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c146:	2b00      	cmp	r3, #0
 800c148:	d012      	beq.n	800c170 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a3a      	ldr	r2, [pc, #232]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c150:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c158:	431a      	orrs	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e05f      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c176:	f003 0308 	and.w	r3, r3, #8
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d012      	beq.n	800c1a4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a2d      	ldr	r2, [pc, #180]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	f043 0208 	orr.w	r2, r3, #8
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e045      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1aa:	f003 0302 	and.w	r3, r3, #2
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d012      	beq.n	800c1d8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a20      	ldr	r2, [pc, #128]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	f043 0202 	orr.w	r2, r3, #2
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e02b      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d012      	beq.n	800c20c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a13      	ldr	r2, [pc, #76]	; (800c238 <HAL_SD_WriteBlocks+0x308>)
 800c1ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f2:	f043 0210 	orr.w	r2, r3, #16
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e011      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f240 523a 	movw	r2, #1338	; 0x53a
 800c214:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	e006      	b.n	800c230 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3748      	adds	r7, #72	; 0x48
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	004005ff 	.word	0x004005ff

0800c23c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c24a:	0f9b      	lsrs	r3, r3, #30
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c256:	0e9b      	lsrs	r3, r3, #26
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	f003 030f 	and.w	r3, r3, #15
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c268:	0e1b      	lsrs	r3, r3, #24
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	b2da      	uxtb	r2, r3
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c27a:	0c1b      	lsrs	r3, r3, #16
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c286:	0a1b      	lsrs	r3, r3, #8
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c292:	b2da      	uxtb	r2, r3
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c29c:	0d1b      	lsrs	r3, r3, #20
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2a8:	0c1b      	lsrs	r3, r3, #16
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 030f 	and.w	r3, r3, #15
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2ba:	0bdb      	lsrs	r3, r3, #15
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2cc:	0b9b      	lsrs	r3, r3, #14
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f003 0301 	and.w	r3, r3, #1
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2de:	0b5b      	lsrs	r3, r3, #13
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2f0:	0b1b      	lsrs	r3, r3, #12
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0301 	and.w	r3, r3, #1
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2200      	movs	r2, #0
 800c302:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d163      	bne.n	800c3d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c310:	009a      	lsls	r2, r3, #2
 800c312:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c316:	4013      	ands	r3, r2
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c31c:	0f92      	lsrs	r2, r2, #30
 800c31e:	431a      	orrs	r2, r3
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c328:	0edb      	lsrs	r3, r3, #27
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	b2da      	uxtb	r2, r3
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c33a:	0e1b      	lsrs	r3, r3, #24
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	b2da      	uxtb	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c34c:	0d5b      	lsrs	r3, r3, #21
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f003 0307 	and.w	r3, r3, #7
 800c354:	b2da      	uxtb	r2, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c35e:	0c9b      	lsrs	r3, r3, #18
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	b2da      	uxtb	r2, r3
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c370:	0bdb      	lsrs	r3, r3, #15
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f003 0307 	and.w	r3, r3, #7
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	7e1b      	ldrb	r3, [r3, #24]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	3302      	adds	r3, #2
 800c394:	2201      	movs	r2, #1
 800c396:	fa02 f303 	lsl.w	r3, r2, r3
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c39e:	fb03 f202 	mul.w	r2, r3, r2
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	7a1b      	ldrb	r3, [r3, #8]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	f003 030f 	and.w	r3, r3, #15
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	409a      	lsls	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c3c0:	0a52      	lsrs	r2, r2, #9
 800c3c2:	fb03 f202 	mul.w	r2, r3, r2
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d0:	661a      	str	r2, [r3, #96]	; 0x60
 800c3d2:	e031      	b.n	800c438 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d11d      	bne.n	800c418 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3e0:	041b      	lsls	r3, r3, #16
 800c3e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ea:	0c1b      	lsrs	r3, r3, #16
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	029a      	lsls	r2, r3, #10
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c40c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	661a      	str	r2, [r3, #96]	; 0x60
 800c416:	e00f      	b.n	800c438 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a58      	ldr	r2, [pc, #352]	; (800c580 <HAL_SD_GetCardCSD+0x344>)
 800c41e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e09d      	b.n	800c574 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c43c:	0b9b      	lsrs	r3, r3, #14
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c44e:	09db      	lsrs	r3, r3, #7
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c456:	b2da      	uxtb	r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c460:	b2db      	uxtb	r3, r3
 800c462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c466:	b2da      	uxtb	r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c470:	0fdb      	lsrs	r3, r3, #31
 800c472:	b2da      	uxtb	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47c:	0f5b      	lsrs	r3, r3, #29
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 0303 	and.w	r3, r3, #3
 800c484:	b2da      	uxtb	r2, r3
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48e:	0e9b      	lsrs	r3, r3, #26
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	b2da      	uxtb	r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a0:	0d9b      	lsrs	r3, r3, #22
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	f003 030f 	and.w	r3, r3, #15
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b2:	0d5b      	lsrs	r3, r3, #21
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ce:	0c1b      	lsrs	r3, r3, #16
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e2:	0bdb      	lsrs	r3, r3, #15
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f6:	0b9b      	lsrs	r3, r3, #14
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50a:	0b5b      	lsrs	r3, r3, #13
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	b2da      	uxtb	r2, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c51e:	0b1b      	lsrs	r3, r3, #12
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	b2da      	uxtb	r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c532:	0a9b      	lsrs	r3, r3, #10
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 0303 	and.w	r3, r3, #3
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c546:	0a1b      	lsrs	r3, r3, #8
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c55a:	085b      	lsrs	r3, r3, #1
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c562:	b2da      	uxtb	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	004005ff 	.word	0x004005ff

0800c584 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c5e8:	f107 030c 	add.w	r3, r7, #12
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f970 	bl	800c8d4 <SD_SendStatus>
 800c5f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	431a      	orrs	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	0a5b      	lsrs	r3, r3, #9
 800c60c:	f003 030f 	and.w	r3, r3, #15
 800c610:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c612:	693b      	ldr	r3, [r7, #16]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c61c:	b5b0      	push	{r4, r5, r7, lr}
 800c61e:	b094      	sub	sp, #80	; 0x50
 800c620:	af04      	add	r7, sp, #16
 800c622:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c624:	2301      	movs	r3, #1
 800c626:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f002 fa50 	bl	800ead2 <SDIO_GetPowerState>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c638:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c63c:	e0b8      	b.n	800c7b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c642:	2b03      	cmp	r3, #3
 800c644:	d02f      	beq.n	800c6a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f002 fc37 	bl	800eebe <SDMMC_CmdSendCID>
 800c650:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <SD_InitCard+0x40>
    {
      return errorstate;
 800c658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65a:	e0a9      	b.n	800c7b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2100      	movs	r1, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f002 fa7a 	bl	800eb5c <SDIO_GetResponse>
 800c668:	4602      	mov	r2, r0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2104      	movs	r1, #4
 800c674:	4618      	mov	r0, r3
 800c676:	f002 fa71 	bl	800eb5c <SDIO_GetResponse>
 800c67a:	4602      	mov	r2, r0
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2108      	movs	r1, #8
 800c686:	4618      	mov	r0, r3
 800c688:	f002 fa68 	bl	800eb5c <SDIO_GetResponse>
 800c68c:	4602      	mov	r2, r0
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	210c      	movs	r1, #12
 800c698:	4618      	mov	r0, r3
 800c69a:	f002 fa5f 	bl	800eb5c <SDIO_GetResponse>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d00d      	beq.n	800c6ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f107 020e 	add.w	r2, r7, #14
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f002 fc3d 	bl	800ef38 <SDMMC_CmdSetRelAdd>
 800c6be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <SD_InitCard+0xae>
    {
      return errorstate;
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c8:	e072      	b.n	800c7b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d036      	beq.n	800c740 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c6d2:	89fb      	ldrh	r3, [r7, #14]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e2:	041b      	lsls	r3, r3, #16
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	f002 fc07 	bl	800eefa <SDMMC_CmdSendCSD>
 800c6ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f6:	e05b      	b.n	800c7b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f002 fa2c 	bl	800eb5c <SDIO_GetResponse>
 800c704:	4602      	mov	r2, r0
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2104      	movs	r1, #4
 800c710:	4618      	mov	r0, r3
 800c712:	f002 fa23 	bl	800eb5c <SDIO_GetResponse>
 800c716:	4602      	mov	r2, r0
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2108      	movs	r1, #8
 800c722:	4618      	mov	r0, r3
 800c724:	f002 fa1a 	bl	800eb5c <SDIO_GetResponse>
 800c728:	4602      	mov	r2, r0
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	210c      	movs	r1, #12
 800c734:	4618      	mov	r0, r3
 800c736:	f002 fa11 	bl	800eb5c <SDIO_GetResponse>
 800c73a:	4602      	mov	r2, r0
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2104      	movs	r1, #4
 800c746:	4618      	mov	r0, r3
 800c748:	f002 fa08 	bl	800eb5c <SDIO_GetResponse>
 800c74c:	4603      	mov	r3, r0
 800c74e:	0d1a      	lsrs	r2, r3, #20
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c754:	f107 0310 	add.w	r3, r7, #16
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff fd6e 	bl	800c23c <HAL_SD_GetCardCSD>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c76a:	e021      	b.n	800c7b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c774:	041b      	lsls	r3, r3, #16
 800c776:	2200      	movs	r2, #0
 800c778:	461c      	mov	r4, r3
 800c77a:	4615      	mov	r5, r2
 800c77c:	4622      	mov	r2, r4
 800c77e:	462b      	mov	r3, r5
 800c780:	4608      	mov	r0, r1
 800c782:	f002 faf7 	bl	800ed74 <SDMMC_CmdSelDesel>
 800c786:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <SD_InitCard+0x176>
  {
    return errorstate;
 800c78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c790:	e00e      	b.n	800c7b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681d      	ldr	r5, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	466c      	mov	r4, sp
 800c79a:	f103 0210 	add.w	r2, r3, #16
 800c79e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	f002 f93b 	bl	800ea24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3740      	adds	r7, #64	; 0x40
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c7b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	617b      	str	r3, [r7, #20]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f002 faf2 	bl	800edba <SDMMC_CmdGoIdleState>
 800c7d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	e072      	b.n	800c8c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f002 fb05 	bl	800edf6 <SDMMC_CmdOperCond>
 800c7ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00d      	beq.n	800c810 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f002 fadb 	bl	800edba <SDMMC_CmdGoIdleState>
 800c804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d004      	beq.n	800c816 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	e05b      	b.n	800c8c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d137      	bne.n	800c88e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f002 fb05 	bl	800ee34 <SDMMC_CmdAppCommand>
 800c82a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d02d      	beq.n	800c88e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c836:	e047      	b.n	800c8c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2100      	movs	r1, #0
 800c83e:	4618      	mov	r0, r3
 800c840:	f002 faf8 	bl	800ee34 <SDMMC_CmdAppCommand>
 800c844:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <SD_PowerON+0x98>
    {
      return errorstate;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	e03b      	b.n	800c8c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	491e      	ldr	r1, [pc, #120]	; (800c8d0 <SD_PowerON+0x118>)
 800c856:	4618      	mov	r0, r3
 800c858:	f002 fb0e 	bl	800ee78 <SDMMC_CmdAppOperCommand>
 800c85c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c868:	e02e      	b.n	800c8c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2100      	movs	r1, #0
 800c870:	4618      	mov	r0, r3
 800c872:	f002 f973 	bl	800eb5c <SDIO_GetResponse>
 800c876:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	0fdb      	lsrs	r3, r3, #31
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <SD_PowerON+0xcc>
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <SD_PowerON+0xce>
 800c884:	2300      	movs	r3, #0
 800c886:	613b      	str	r3, [r7, #16]

    count++;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c894:	4293      	cmp	r3, r2
 800c896:	d802      	bhi.n	800c89e <SD_PowerON+0xe6>
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0cc      	beq.n	800c838 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d902      	bls.n	800c8ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c8a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c8ac:	e00c      	b.n	800c8c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	645a      	str	r2, [r3, #68]	; 0x44
 800c8be:	e002      	b.n	800c8c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	c1100000 	.word	0xc1100000

0800c8d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c8e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8e8:	e018      	b.n	800c91c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f2:	041b      	lsls	r3, r3, #16
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f002 fb3f 	bl	800ef7a <SDMMC_CmdSendStatus>
 800c8fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	e009      	b.n	800c91c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2100      	movs	r1, #0
 800c90e:	4618      	mov	r0, r3
 800c910:	f002 f924 	bl	800eb5c <SDIO_GetResponse>
 800c914:	4602      	mov	r2, r0
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e07b      	b.n	800ca2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d108      	bne.n	800c950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c946:	d009      	beq.n	800c95c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	61da      	str	r2, [r3, #28]
 800c94e:	e005      	b.n	800c95c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7f7 fc80 	bl	800427c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c9a4:	431a      	orrs	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	69db      	ldr	r3, [r3, #28]
 800c9d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9e0:	ea42 0103 	orr.w	r1, r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	0c1b      	lsrs	r3, r3, #16
 800c9fa:	f003 0104 	and.w	r1, r3, #4
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	f003 0210 	and.w	r2, r3, #16
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	430a      	orrs	r2, r1
 800ca0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69da      	ldr	r2, [r3, #28]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b088      	sub	sp, #32
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	60f8      	str	r0, [r7, #12]
 800ca3e:	60b9      	str	r1, [r7, #8]
 800ca40:	603b      	str	r3, [r7, #0]
 800ca42:	4613      	mov	r3, r2
 800ca44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d101      	bne.n	800ca58 <HAL_SPI_Transmit+0x22>
 800ca54:	2302      	movs	r3, #2
 800ca56:	e126      	b.n	800cca6 <HAL_SPI_Transmit+0x270>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca60:	f7fc fa64 	bl	8008f2c <HAL_GetTick>
 800ca64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d002      	beq.n	800ca7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ca76:	2302      	movs	r3, #2
 800ca78:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca7a:	e10b      	b.n	800cc94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <HAL_SPI_Transmit+0x52>
 800ca82:	88fb      	ldrh	r3, [r7, #6]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca8c:	e102      	b.n	800cc94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2203      	movs	r2, #3
 800ca92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	88fa      	ldrh	r2, [r7, #6]
 800caa6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	88fa      	ldrh	r2, [r7, #6]
 800caac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2200      	movs	r2, #0
 800cab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad4:	d10f      	bne.n	800caf6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb00:	2b40      	cmp	r3, #64	; 0x40
 800cb02:	d007      	beq.n	800cb14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb1c:	d14b      	bne.n	800cbb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <HAL_SPI_Transmit+0xf6>
 800cb26:	8afb      	ldrh	r3, [r7, #22]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d13e      	bne.n	800cbaa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb30:	881a      	ldrh	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3c:	1c9a      	adds	r2, r3, #2
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cb50:	e02b      	b.n	800cbaa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d112      	bne.n	800cb86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb64:	881a      	ldrh	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	1c9a      	adds	r2, r3, #2
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	86da      	strh	r2, [r3, #54]	; 0x36
 800cb84:	e011      	b.n	800cbaa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb86:	f7fc f9d1 	bl	8008f2c <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d803      	bhi.n	800cb9e <HAL_SPI_Transmit+0x168>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9c:	d102      	bne.n	800cba4 <HAL_SPI_Transmit+0x16e>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cba8:	e074      	b.n	800cc94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1ce      	bne.n	800cb52 <HAL_SPI_Transmit+0x11c>
 800cbb4:	e04c      	b.n	800cc50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <HAL_SPI_Transmit+0x18e>
 800cbbe:	8afb      	ldrh	r3, [r7, #22]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d140      	bne.n	800cc46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	330c      	adds	r3, #12
 800cbce:	7812      	ldrb	r2, [r2, #0]
 800cbd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cbea:	e02c      	b.n	800cc46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d113      	bne.n	800cc22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	330c      	adds	r3, #12
 800cc04:	7812      	ldrb	r2, [r2, #0]
 800cc06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0c:	1c5a      	adds	r2, r3, #1
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	86da      	strh	r2, [r3, #54]	; 0x36
 800cc20:	e011      	b.n	800cc46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc22:	f7fc f983 	bl	8008f2c <HAL_GetTick>
 800cc26:	4602      	mov	r2, r0
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d803      	bhi.n	800cc3a <HAL_SPI_Transmit+0x204>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc38:	d102      	bne.n	800cc40 <HAL_SPI_Transmit+0x20a>
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d102      	bne.n	800cc46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cc44:	e026      	b.n	800cc94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1cd      	bne.n	800cbec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc50:	69ba      	ldr	r2, [r7, #24]
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f8b3 	bl	800cdc0 <SPI_EndRxTxTransaction>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2220      	movs	r2, #32
 800cc64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10a      	bne.n	800cc84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	613b      	str	r3, [r7, #16]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	613b      	str	r3, [r7, #16]
 800cc82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	77fb      	strb	r3, [r7, #31]
 800cc90:	e000      	b.n	800cc94 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cc92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3720      	adds	r7, #32
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ccc0:	f7fc f934 	bl	8008f2c <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4413      	add	r3, r2
 800ccce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ccd0:	f7fc f92c 	bl	8008f2c <HAL_GetTick>
 800ccd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ccd6:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	015b      	lsls	r3, r3, #5
 800ccdc:	0d1b      	lsrs	r3, r3, #20
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	fb02 f303 	mul.w	r3, r2, r3
 800cce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cce6:	e054      	b.n	800cd92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccee:	d050      	beq.n	800cd92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ccf0:	f7fc f91c 	bl	8008f2c <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d902      	bls.n	800cd06 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d13d      	bne.n	800cd82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd1e:	d111      	bne.n	800cd44 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd28:	d004      	beq.n	800cd34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd32:	d107      	bne.n	800cd44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd4c:	d10f      	bne.n	800cd6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e017      	b.n	800cdb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689a      	ldr	r2, [r3, #8]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	bf0c      	ite	eq
 800cda2:	2301      	moveq	r3, #1
 800cda4:	2300      	movne	r3, #0
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d19b      	bne.n	800cce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	200001dc 	.word	0x200001dc

0800cdc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cdcc:	4b1b      	ldr	r3, [pc, #108]	; (800ce3c <SPI_EndRxTxTransaction+0x7c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <SPI_EndRxTxTransaction+0x80>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	0d5b      	lsrs	r3, r3, #21
 800cdd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdea:	d112      	bne.n	800ce12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	2180      	movs	r1, #128	; 0x80
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff ff5a 	bl	800ccb0 <SPI_WaitFlagStateUntilTimeout>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d016      	beq.n	800ce30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce06:	f043 0220 	orr.w	r2, r3, #32
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e00f      	b.n	800ce32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00a      	beq.n	800ce2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce28:	2b80      	cmp	r3, #128	; 0x80
 800ce2a:	d0f2      	beq.n	800ce12 <SPI_EndRxTxTransaction+0x52>
 800ce2c:	e000      	b.n	800ce30 <SPI_EndRxTxTransaction+0x70>
        break;
 800ce2e:	bf00      	nop
  }

  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200001dc 	.word	0x200001dc
 800ce40:	165e9f81 	.word	0x165e9f81

0800ce44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e041      	b.n	800ceda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7f7 fd5c 	bl	8004928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2202      	movs	r2, #2
 800ce74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f000 fca8 	bl	800d7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d001      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e04e      	b.n	800cf9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68da      	ldr	r2, [r3, #12]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f042 0201 	orr.w	r2, r2, #1
 800cf12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a23      	ldr	r2, [pc, #140]	; (800cfa8 <HAL_TIM_Base_Start_IT+0xc4>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d022      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf26:	d01d      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a1f      	ldr	r2, [pc, #124]	; (800cfac <HAL_TIM_Base_Start_IT+0xc8>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d018      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a1e      	ldr	r2, [pc, #120]	; (800cfb0 <HAL_TIM_Base_Start_IT+0xcc>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d013      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a1c      	ldr	r2, [pc, #112]	; (800cfb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d00e      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a1b      	ldr	r2, [pc, #108]	; (800cfb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d009      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a19      	ldr	r2, [pc, #100]	; (800cfbc <HAL_TIM_Base_Start_IT+0xd8>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d004      	beq.n	800cf64 <HAL_TIM_Base_Start_IT+0x80>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a18      	ldr	r2, [pc, #96]	; (800cfc0 <HAL_TIM_Base_Start_IT+0xdc>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d111      	bne.n	800cf88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f003 0307 	and.w	r3, r3, #7
 800cf6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2b06      	cmp	r3, #6
 800cf74:	d010      	beq.n	800cf98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f042 0201 	orr.w	r2, r2, #1
 800cf84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf86:	e007      	b.n	800cf98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f042 0201 	orr.w	r2, r2, #1
 800cf96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40000400 	.word	0x40000400
 800cfb0:	40000800 	.word	0x40000800
 800cfb4:	40000c00 	.word	0x40000c00
 800cfb8:	40010400 	.word	0x40010400
 800cfbc:	40014000 	.word	0x40014000
 800cfc0:	40001800 	.word	0x40001800

0800cfc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f022 0201 	bic.w	r2, r2, #1
 800cfda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6a1a      	ldr	r2, [r3, #32]
 800cfe2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10f      	bne.n	800d00c <HAL_TIM_Base_Stop_IT+0x48>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6a1a      	ldr	r2, [r3, #32]
 800cff2:	f240 4344 	movw	r3, #1092	; 0x444
 800cff6:	4013      	ands	r3, r2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d107      	bne.n	800d00c <HAL_TIM_Base_Stop_IT+0x48>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0201 	bic.w	r2, r2, #1
 800d00a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e041      	b.n	800d0b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d106      	bne.n	800d04e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f839 	bl	800d0c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2202      	movs	r2, #2
 800d052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3304      	adds	r3, #4
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f000 fbb9 	bl	800d7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <HAL_TIM_PWM_Start+0x24>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	bf14      	ite	ne
 800d0f0:	2301      	movne	r3, #1
 800d0f2:	2300      	moveq	r3, #0
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	e022      	b.n	800d13e <HAL_TIM_PWM_Start+0x6a>
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	2b04      	cmp	r3, #4
 800d0fc:	d109      	bne.n	800d112 <HAL_TIM_PWM_Start+0x3e>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b01      	cmp	r3, #1
 800d108:	bf14      	ite	ne
 800d10a:	2301      	movne	r3, #1
 800d10c:	2300      	moveq	r3, #0
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	e015      	b.n	800d13e <HAL_TIM_PWM_Start+0x6a>
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b08      	cmp	r3, #8
 800d116:	d109      	bne.n	800d12c <HAL_TIM_PWM_Start+0x58>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b01      	cmp	r3, #1
 800d122:	bf14      	ite	ne
 800d124:	2301      	movne	r3, #1
 800d126:	2300      	moveq	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	e008      	b.n	800d13e <HAL_TIM_PWM_Start+0x6a>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b01      	cmp	r3, #1
 800d136:	bf14      	ite	ne
 800d138:	2301      	movne	r3, #1
 800d13a:	2300      	moveq	r3, #0
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e07c      	b.n	800d240 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d104      	bne.n	800d156 <HAL_TIM_PWM_Start+0x82>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d154:	e013      	b.n	800d17e <HAL_TIM_PWM_Start+0xaa>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b04      	cmp	r3, #4
 800d15a:	d104      	bne.n	800d166 <HAL_TIM_PWM_Start+0x92>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d164:	e00b      	b.n	800d17e <HAL_TIM_PWM_Start+0xaa>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d104      	bne.n	800d176 <HAL_TIM_PWM_Start+0xa2>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d174:	e003      	b.n	800d17e <HAL_TIM_PWM_Start+0xaa>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2202      	movs	r2, #2
 800d17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2201      	movs	r2, #1
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fe10 	bl	800ddac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a2d      	ldr	r2, [pc, #180]	; (800d248 <HAL_TIM_PWM_Start+0x174>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d004      	beq.n	800d1a0 <HAL_TIM_PWM_Start+0xcc>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a2c      	ldr	r2, [pc, #176]	; (800d24c <HAL_TIM_PWM_Start+0x178>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d101      	bne.n	800d1a4 <HAL_TIM_PWM_Start+0xd0>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <HAL_TIM_PWM_Start+0xd2>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a22      	ldr	r2, [pc, #136]	; (800d248 <HAL_TIM_PWM_Start+0x174>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d022      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1cc:	d01d      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a1f      	ldr	r2, [pc, #124]	; (800d250 <HAL_TIM_PWM_Start+0x17c>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d018      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a1d      	ldr	r2, [pc, #116]	; (800d254 <HAL_TIM_PWM_Start+0x180>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d013      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a1c      	ldr	r2, [pc, #112]	; (800d258 <HAL_TIM_PWM_Start+0x184>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d00e      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a16      	ldr	r2, [pc, #88]	; (800d24c <HAL_TIM_PWM_Start+0x178>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d009      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a18      	ldr	r2, [pc, #96]	; (800d25c <HAL_TIM_PWM_Start+0x188>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d004      	beq.n	800d20a <HAL_TIM_PWM_Start+0x136>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a16      	ldr	r2, [pc, #88]	; (800d260 <HAL_TIM_PWM_Start+0x18c>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d111      	bne.n	800d22e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b06      	cmp	r3, #6
 800d21a:	d010      	beq.n	800d23e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0201 	orr.w	r2, r2, #1
 800d22a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d22c:	e007      	b.n	800d23e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f042 0201 	orr.w	r2, r2, #1
 800d23c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	40010000 	.word	0x40010000
 800d24c:	40010400 	.word	0x40010400
 800d250:	40000400 	.word	0x40000400
 800d254:	40000800 	.word	0x40000800
 800d258:	40000c00 	.word	0x40000c00
 800d25c:	40014000 	.word	0x40014000
 800d260:	40001800 	.word	0x40001800

0800d264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	f003 0302 	and.w	r3, r3, #2
 800d276:	2b02      	cmp	r3, #2
 800d278:	d122      	bne.n	800d2c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	f003 0302 	and.w	r3, r3, #2
 800d284:	2b02      	cmp	r3, #2
 800d286:	d11b      	bne.n	800d2c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f06f 0202 	mvn.w	r2, #2
 800d290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	f003 0303 	and.w	r3, r3, #3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fa77 	bl	800d79a <HAL_TIM_IC_CaptureCallback>
 800d2ac:	e005      	b.n	800d2ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fa69 	bl	800d786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fa7a 	bl	800d7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	f003 0304 	and.w	r3, r3, #4
 800d2ca:	2b04      	cmp	r3, #4
 800d2cc:	d122      	bne.n	800d314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d11b      	bne.n	800d314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f06f 0204 	mvn.w	r2, #4
 800d2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d003      	beq.n	800d302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fa4d 	bl	800d79a <HAL_TIM_IC_CaptureCallback>
 800d300:	e005      	b.n	800d30e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fa3f 	bl	800d786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fa50 	bl	800d7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f003 0308 	and.w	r3, r3, #8
 800d31e:	2b08      	cmp	r3, #8
 800d320:	d122      	bne.n	800d368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	f003 0308 	and.w	r3, r3, #8
 800d32c:	2b08      	cmp	r3, #8
 800d32e:	d11b      	bne.n	800d368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f06f 0208 	mvn.w	r2, #8
 800d338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2204      	movs	r2, #4
 800d33e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d003      	beq.n	800d356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fa23 	bl	800d79a <HAL_TIM_IC_CaptureCallback>
 800d354:	e005      	b.n	800d362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fa15 	bl	800d786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fa26 	bl	800d7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	f003 0310 	and.w	r3, r3, #16
 800d372:	2b10      	cmp	r3, #16
 800d374:	d122      	bne.n	800d3bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	f003 0310 	and.w	r3, r3, #16
 800d380:	2b10      	cmp	r3, #16
 800d382:	d11b      	bne.n	800d3bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f06f 0210 	mvn.w	r2, #16
 800d38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2208      	movs	r2, #8
 800d392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f9f9 	bl	800d79a <HAL_TIM_IC_CaptureCallback>
 800d3a8:	e005      	b.n	800d3b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f9eb 	bl	800d786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f9fc 	bl	800d7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	f003 0301 	and.w	r3, r3, #1
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d10e      	bne.n	800d3e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d107      	bne.n	800d3e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f06f 0201 	mvn.w	r2, #1
 800d3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7f6 fda2 	bl	8003f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3f2:	2b80      	cmp	r3, #128	; 0x80
 800d3f4:	d10e      	bne.n	800d414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d400:	2b80      	cmp	r3, #128	; 0x80
 800d402:	d107      	bne.n	800d414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d40c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fdca 	bl	800dfa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41e:	2b40      	cmp	r3, #64	; 0x40
 800d420:	d10e      	bne.n	800d440 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42c:	2b40      	cmp	r3, #64	; 0x40
 800d42e:	d107      	bne.n	800d440 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f9c1 	bl	800d7c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 0320 	and.w	r3, r3, #32
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d10e      	bne.n	800d46c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f003 0320 	and.w	r3, r3, #32
 800d458:	2b20      	cmp	r3, #32
 800d45a:	d107      	bne.n	800d46c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f06f 0220 	mvn.w	r2, #32
 800d464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fd94 	bl	800df94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d48e:	2302      	movs	r3, #2
 800d490:	e0ae      	b.n	800d5f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b0c      	cmp	r3, #12
 800d49e:	f200 809f 	bhi.w	800d5e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d4a2:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d4dd 	.word	0x0800d4dd
 800d4ac:	0800d5e1 	.word	0x0800d5e1
 800d4b0:	0800d5e1 	.word	0x0800d5e1
 800d4b4:	0800d5e1 	.word	0x0800d5e1
 800d4b8:	0800d51d 	.word	0x0800d51d
 800d4bc:	0800d5e1 	.word	0x0800d5e1
 800d4c0:	0800d5e1 	.word	0x0800d5e1
 800d4c4:	0800d5e1 	.word	0x0800d5e1
 800d4c8:	0800d55f 	.word	0x0800d55f
 800d4cc:	0800d5e1 	.word	0x0800d5e1
 800d4d0:	0800d5e1 	.word	0x0800d5e1
 800d4d4:	0800d5e1 	.word	0x0800d5e1
 800d4d8:	0800d59f 	.word	0x0800d59f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68b9      	ldr	r1, [r7, #8]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fa18 	bl	800d918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	699a      	ldr	r2, [r3, #24]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f042 0208 	orr.w	r2, r2, #8
 800d4f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	699a      	ldr	r2, [r3, #24]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f022 0204 	bic.w	r2, r2, #4
 800d506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6999      	ldr	r1, [r3, #24]
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	691a      	ldr	r2, [r3, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	430a      	orrs	r2, r1
 800d518:	619a      	str	r2, [r3, #24]
      break;
 800d51a:	e064      	b.n	800d5e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fa68 	bl	800d9f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	699a      	ldr	r2, [r3, #24]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	699a      	ldr	r2, [r3, #24]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6999      	ldr	r1, [r3, #24]
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	021a      	lsls	r2, r3, #8
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	430a      	orrs	r2, r1
 800d55a:	619a      	str	r2, [r3, #24]
      break;
 800d55c:	e043      	b.n	800d5e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	68b9      	ldr	r1, [r7, #8]
 800d564:	4618      	mov	r0, r3
 800d566:	f000 fabd 	bl	800dae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69da      	ldr	r2, [r3, #28]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f042 0208 	orr.w	r2, r2, #8
 800d578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	69da      	ldr	r2, [r3, #28]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0204 	bic.w	r2, r2, #4
 800d588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	69d9      	ldr	r1, [r3, #28]
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	691a      	ldr	r2, [r3, #16]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	430a      	orrs	r2, r1
 800d59a:	61da      	str	r2, [r3, #28]
      break;
 800d59c:	e023      	b.n	800d5e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fb11 	bl	800dbcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	69da      	ldr	r2, [r3, #28]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	69da      	ldr	r2, [r3, #28]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69d9      	ldr	r1, [r3, #28]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	021a      	lsls	r2, r3, #8
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	430a      	orrs	r2, r1
 800d5dc:	61da      	str	r2, [r3, #28]
      break;
 800d5de:	e002      	b.n	800d5e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800d5e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d101      	bne.n	800d614 <HAL_TIM_ConfigClockSource+0x1c>
 800d610:	2302      	movs	r3, #2
 800d612:	e0b4      	b.n	800d77e <HAL_TIM_ConfigClockSource+0x186>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d63a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d64c:	d03e      	beq.n	800d6cc <HAL_TIM_ConfigClockSource+0xd4>
 800d64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d652:	f200 8087 	bhi.w	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d65a:	f000 8086 	beq.w	800d76a <HAL_TIM_ConfigClockSource+0x172>
 800d65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d662:	d87f      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d664:	2b70      	cmp	r3, #112	; 0x70
 800d666:	d01a      	beq.n	800d69e <HAL_TIM_ConfigClockSource+0xa6>
 800d668:	2b70      	cmp	r3, #112	; 0x70
 800d66a:	d87b      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d66c:	2b60      	cmp	r3, #96	; 0x60
 800d66e:	d050      	beq.n	800d712 <HAL_TIM_ConfigClockSource+0x11a>
 800d670:	2b60      	cmp	r3, #96	; 0x60
 800d672:	d877      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d674:	2b50      	cmp	r3, #80	; 0x50
 800d676:	d03c      	beq.n	800d6f2 <HAL_TIM_ConfigClockSource+0xfa>
 800d678:	2b50      	cmp	r3, #80	; 0x50
 800d67a:	d873      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d67c:	2b40      	cmp	r3, #64	; 0x40
 800d67e:	d058      	beq.n	800d732 <HAL_TIM_ConfigClockSource+0x13a>
 800d680:	2b40      	cmp	r3, #64	; 0x40
 800d682:	d86f      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d684:	2b30      	cmp	r3, #48	; 0x30
 800d686:	d064      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0x15a>
 800d688:	2b30      	cmp	r3, #48	; 0x30
 800d68a:	d86b      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d68c:	2b20      	cmp	r3, #32
 800d68e:	d060      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0x15a>
 800d690:	2b20      	cmp	r3, #32
 800d692:	d867      	bhi.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
 800d694:	2b00      	cmp	r3, #0
 800d696:	d05c      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0x15a>
 800d698:	2b10      	cmp	r3, #16
 800d69a:	d05a      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0x15a>
 800d69c:	e062      	b.n	800d764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	6899      	ldr	r1, [r3, #8]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	f000 fb5d 	bl	800dd6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	609a      	str	r2, [r3, #8]
      break;
 800d6ca:	e04f      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6818      	ldr	r0, [r3, #0]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	6899      	ldr	r1, [r3, #8]
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	f000 fb46 	bl	800dd6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689a      	ldr	r2, [r3, #8]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6ee:	609a      	str	r2, [r3, #8]
      break;
 800d6f0:	e03c      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	6859      	ldr	r1, [r3, #4]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	461a      	mov	r2, r3
 800d700:	f000 faba 	bl	800dc78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2150      	movs	r1, #80	; 0x50
 800d70a:	4618      	mov	r0, r3
 800d70c:	f000 fb13 	bl	800dd36 <TIM_ITRx_SetConfig>
      break;
 800d710:	e02c      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	6859      	ldr	r1, [r3, #4]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	461a      	mov	r2, r3
 800d720:	f000 fad9 	bl	800dcd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2160      	movs	r1, #96	; 0x60
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 fb03 	bl	800dd36 <TIM_ITRx_SetConfig>
      break;
 800d730:	e01c      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6818      	ldr	r0, [r3, #0]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	6859      	ldr	r1, [r3, #4]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	461a      	mov	r2, r3
 800d740:	f000 fa9a 	bl	800dc78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2140      	movs	r1, #64	; 0x40
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 faf3 	bl	800dd36 <TIM_ITRx_SetConfig>
      break;
 800d750:	e00c      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4619      	mov	r1, r3
 800d75c:	4610      	mov	r0, r2
 800d75e:	f000 faea 	bl	800dd36 <TIM_ITRx_SetConfig>
      break;
 800d762:	e003      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	73fb      	strb	r3, [r7, #15]
      break;
 800d768:	e000      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d76a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d786:	b480      	push	{r7}
 800d788:	b083      	sub	sp, #12
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d78e:	bf00      	nop
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b083      	sub	sp, #12
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7a2:	bf00      	nop
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7ae:	b480      	push	{r7}
 800d7b0:	b083      	sub	sp, #12
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b083      	sub	sp, #12
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
	...

0800d7d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a40      	ldr	r2, [pc, #256]	; (800d8ec <TIM_Base_SetConfig+0x114>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d013      	beq.n	800d818 <TIM_Base_SetConfig+0x40>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7f6:	d00f      	beq.n	800d818 <TIM_Base_SetConfig+0x40>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a3d      	ldr	r2, [pc, #244]	; (800d8f0 <TIM_Base_SetConfig+0x118>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d00b      	beq.n	800d818 <TIM_Base_SetConfig+0x40>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a3c      	ldr	r2, [pc, #240]	; (800d8f4 <TIM_Base_SetConfig+0x11c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d007      	beq.n	800d818 <TIM_Base_SetConfig+0x40>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a3b      	ldr	r2, [pc, #236]	; (800d8f8 <TIM_Base_SetConfig+0x120>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d003      	beq.n	800d818 <TIM_Base_SetConfig+0x40>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a3a      	ldr	r2, [pc, #232]	; (800d8fc <TIM_Base_SetConfig+0x124>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d108      	bne.n	800d82a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d81e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4313      	orrs	r3, r2
 800d828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a2f      	ldr	r2, [pc, #188]	; (800d8ec <TIM_Base_SetConfig+0x114>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d02b      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d838:	d027      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a2c      	ldr	r2, [pc, #176]	; (800d8f0 <TIM_Base_SetConfig+0x118>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d023      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a2b      	ldr	r2, [pc, #172]	; (800d8f4 <TIM_Base_SetConfig+0x11c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d01f      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a2a      	ldr	r2, [pc, #168]	; (800d8f8 <TIM_Base_SetConfig+0x120>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d01b      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a29      	ldr	r2, [pc, #164]	; (800d8fc <TIM_Base_SetConfig+0x124>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d017      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a28      	ldr	r2, [pc, #160]	; (800d900 <TIM_Base_SetConfig+0x128>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d013      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a27      	ldr	r2, [pc, #156]	; (800d904 <TIM_Base_SetConfig+0x12c>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d00f      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a26      	ldr	r2, [pc, #152]	; (800d908 <TIM_Base_SetConfig+0x130>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00b      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a25      	ldr	r2, [pc, #148]	; (800d90c <TIM_Base_SetConfig+0x134>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d007      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a24      	ldr	r2, [pc, #144]	; (800d910 <TIM_Base_SetConfig+0x138>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d003      	beq.n	800d88a <TIM_Base_SetConfig+0xb2>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a23      	ldr	r2, [pc, #140]	; (800d914 <TIM_Base_SetConfig+0x13c>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d108      	bne.n	800d89c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a0a      	ldr	r2, [pc, #40]	; (800d8ec <TIM_Base_SetConfig+0x114>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d003      	beq.n	800d8d0 <TIM_Base_SetConfig+0xf8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a0c      	ldr	r2, [pc, #48]	; (800d8fc <TIM_Base_SetConfig+0x124>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d103      	bne.n	800d8d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	691a      	ldr	r2, [r3, #16]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	615a      	str	r2, [r3, #20]
}
 800d8de:	bf00      	nop
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	40010000 	.word	0x40010000
 800d8f0:	40000400 	.word	0x40000400
 800d8f4:	40000800 	.word	0x40000800
 800d8f8:	40000c00 	.word	0x40000c00
 800d8fc:	40010400 	.word	0x40010400
 800d900:	40014000 	.word	0x40014000
 800d904:	40014400 	.word	0x40014400
 800d908:	40014800 	.word	0x40014800
 800d90c:	40001800 	.word	0x40001800
 800d910:	40001c00 	.word	0x40001c00
 800d914:	40002000 	.word	0x40002000

0800d918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	f023 0201 	bic.w	r2, r3, #1
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 0303 	bic.w	r3, r3, #3
 800d94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	4313      	orrs	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f023 0302 	bic.w	r3, r3, #2
 800d960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	4313      	orrs	r3, r2
 800d96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a20      	ldr	r2, [pc, #128]	; (800d9f0 <TIM_OC1_SetConfig+0xd8>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d003      	beq.n	800d97c <TIM_OC1_SetConfig+0x64>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a1f      	ldr	r2, [pc, #124]	; (800d9f4 <TIM_OC1_SetConfig+0xdc>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d10c      	bne.n	800d996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	f023 0308 	bic.w	r3, r3, #8
 800d982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f023 0304 	bic.w	r3, r3, #4
 800d994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a15      	ldr	r2, [pc, #84]	; (800d9f0 <TIM_OC1_SetConfig+0xd8>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d003      	beq.n	800d9a6 <TIM_OC1_SetConfig+0x8e>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a14      	ldr	r2, [pc, #80]	; (800d9f4 <TIM_OC1_SetConfig+0xdc>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d111      	bne.n	800d9ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d9b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	699b      	ldr	r3, [r3, #24]
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	693a      	ldr	r2, [r7, #16]
 800d9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	621a      	str	r2, [r3, #32]
}
 800d9e4:	bf00      	nop
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	40010000 	.word	0x40010000
 800d9f4:	40010400 	.word	0x40010400

0800d9f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	f023 0210 	bic.w	r2, r3, #16
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	021b      	lsls	r3, r3, #8
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	4313      	orrs	r3, r2
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f023 0320 	bic.w	r3, r3, #32
 800da42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a22      	ldr	r2, [pc, #136]	; (800dadc <TIM_OC2_SetConfig+0xe4>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d003      	beq.n	800da60 <TIM_OC2_SetConfig+0x68>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a21      	ldr	r2, [pc, #132]	; (800dae0 <TIM_OC2_SetConfig+0xe8>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d10d      	bne.n	800da7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	011b      	lsls	r3, r3, #4
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	4313      	orrs	r3, r2
 800da72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a17      	ldr	r2, [pc, #92]	; (800dadc <TIM_OC2_SetConfig+0xe4>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d003      	beq.n	800da8c <TIM_OC2_SetConfig+0x94>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a16      	ldr	r2, [pc, #88]	; (800dae0 <TIM_OC2_SetConfig+0xe8>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d113      	bne.n	800dab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	695b      	ldr	r3, [r3, #20]
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	621a      	str	r2, [r3, #32]
}
 800dace:	bf00      	nop
 800dad0:	371c      	adds	r7, #28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	40010000 	.word	0x40010000
 800dae0:	40010400 	.word	0x40010400

0800dae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f023 0303 	bic.w	r3, r3, #3
 800db1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	4313      	orrs	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	021b      	lsls	r3, r3, #8
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	4313      	orrs	r3, r2
 800db38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a21      	ldr	r2, [pc, #132]	; (800dbc4 <TIM_OC3_SetConfig+0xe0>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d003      	beq.n	800db4a <TIM_OC3_SetConfig+0x66>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a20      	ldr	r2, [pc, #128]	; (800dbc8 <TIM_OC3_SetConfig+0xe4>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d10d      	bne.n	800db66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	021b      	lsls	r3, r3, #8
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a16      	ldr	r2, [pc, #88]	; (800dbc4 <TIM_OC3_SetConfig+0xe0>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d003      	beq.n	800db76 <TIM_OC3_SetConfig+0x92>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a15      	ldr	r2, [pc, #84]	; (800dbc8 <TIM_OC3_SetConfig+0xe4>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d113      	bne.n	800db9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	693a      	ldr	r2, [r7, #16]
 800dba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	685a      	ldr	r2, [r3, #4]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	621a      	str	r2, [r3, #32]
}
 800dbb8:	bf00      	nop
 800dbba:	371c      	adds	r7, #28
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	40010000 	.word	0x40010000
 800dbc8:	40010400 	.word	0x40010400

0800dbcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	69db      	ldr	r3, [r3, #28]
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	021b      	lsls	r3, r3, #8
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	031b      	lsls	r3, r3, #12
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a12      	ldr	r2, [pc, #72]	; (800dc70 <TIM_OC4_SetConfig+0xa4>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d003      	beq.n	800dc34 <TIM_OC4_SetConfig+0x68>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a11      	ldr	r2, [pc, #68]	; (800dc74 <TIM_OC4_SetConfig+0xa8>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d109      	bne.n	800dc48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	019b      	lsls	r3, r3, #6
 800dc42:	697a      	ldr	r2, [r7, #20]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	621a      	str	r2, [r3, #32]
}
 800dc62:	bf00      	nop
 800dc64:	371c      	adds	r7, #28
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	40010000 	.word	0x40010000
 800dc74:	40010400 	.word	0x40010400

0800dc78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	f023 0201 	bic.w	r2, r3, #1
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	011b      	lsls	r3, r3, #4
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f023 030a 	bic.w	r3, r3, #10
 800dcb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	621a      	str	r2, [r3, #32]
}
 800dcca:	bf00      	nop
 800dccc:	371c      	adds	r7, #28
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b087      	sub	sp, #28
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	60b9      	str	r1, [r7, #8]
 800dce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	f023 0210 	bic.w	r2, r3, #16
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6a1b      	ldr	r3, [r3, #32]
 800dcf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	031b      	lsls	r3, r3, #12
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	011b      	lsls	r3, r3, #4
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	621a      	str	r2, [r3, #32]
}
 800dd2a:	bf00      	nop
 800dd2c:	371c      	adds	r7, #28
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd36:	b480      	push	{r7}
 800dd38:	b085      	sub	sp, #20
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	f043 0307 	orr.w	r3, r3, #7
 800dd58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	609a      	str	r2, [r3, #8]
}
 800dd60:	bf00      	nop
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	021a      	lsls	r2, r3, #8
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	431a      	orrs	r2, r3
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	609a      	str	r2, [r3, #8]
}
 800dda0:	bf00      	nop
 800dda2:	371c      	adds	r7, #28
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	f003 031f 	and.w	r3, r3, #31
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6a1a      	ldr	r2, [r3, #32]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	43db      	mvns	r3, r3
 800ddce:	401a      	ands	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a1a      	ldr	r2, [r3, #32]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	f003 031f 	and.w	r3, r3, #31
 800ddde:	6879      	ldr	r1, [r7, #4]
 800dde0:	fa01 f303 	lsl.w	r3, r1, r3
 800dde4:	431a      	orrs	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	621a      	str	r2, [r3, #32]
}
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
	...

0800ddf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de0c:	2302      	movs	r3, #2
 800de0e:	e05a      	b.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2202      	movs	r2, #2
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	4313      	orrs	r3, r2
 800de40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a21      	ldr	r2, [pc, #132]	; (800ded4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d022      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5c:	d01d      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d018      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a1b      	ldr	r2, [pc, #108]	; (800dedc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d013      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a1a      	ldr	r2, [pc, #104]	; (800dee0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00e      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a18      	ldr	r2, [pc, #96]	; (800dee4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d009      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d004      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a15      	ldr	r2, [pc, #84]	; (800deec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d10c      	bne.n	800deb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	40010000 	.word	0x40010000
 800ded8:	40000400 	.word	0x40000400
 800dedc:	40000800 	.word	0x40000800
 800dee0:	40000c00 	.word	0x40000c00
 800dee4:	40010400 	.word	0x40010400
 800dee8:	40014000 	.word	0x40014000
 800deec:	40001800 	.word	0x40001800

0800def0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df04:	2b01      	cmp	r3, #1
 800df06:	d101      	bne.n	800df0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800df08:	2302      	movs	r3, #2
 800df0a:	e03d      	b.n	800df88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	4313      	orrs	r3, r2
 800df20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4313      	orrs	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	4313      	orrs	r3, r2
 800df58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	695b      	ldr	r3, [r3, #20]
 800df64:	4313      	orrs	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	4313      	orrs	r3, r2
 800df74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df9c:	bf00      	nop
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfb0:	bf00      	nop
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e03f      	b.n	800e04e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7f6 fdb8 	bl	8004b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2224      	movs	r2, #36	; 0x24
 800dfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68da      	ldr	r2, [r3, #12]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fa9b 	bl	800e53c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	691a      	ldr	r2, [r3, #16]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	695a      	ldr	r2, [r3, #20]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2220      	movs	r2, #32
 800e040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	60f8      	str	r0, [r7, #12]
 800e05e:	60b9      	str	r1, [r7, #8]
 800e060:	4613      	mov	r3, r2
 800e062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	d11d      	bne.n	800e0ac <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <HAL_UART_Receive_DMA+0x26>
 800e076:	88fb      	ldrh	r3, [r7, #6]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d101      	bne.n	800e080 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e016      	b.n	800e0ae <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e086:	2b01      	cmp	r3, #1
 800e088:	d101      	bne.n	800e08e <HAL_UART_Receive_DMA+0x38>
 800e08a:	2302      	movs	r3, #2
 800e08c:	e00f      	b.n	800e0ae <HAL_UART_Receive_DMA+0x58>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e09c:	88fb      	ldrh	r3, [r7, #6]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	68b9      	ldr	r1, [r7, #8]
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f000 f920 	bl	800e2e8 <UART_Start_Receive_DMA>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	e000      	b.n	800e0ae <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e0ac:	2302      	movs	r3, #2
  }
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b083      	sub	sp, #12
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e0be:	bf00      	nop
 800e0c0:	370c      	adds	r7, #12
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b083      	sub	sp, #12
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e0d2:	bf00      	nop
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0de:	b480      	push	{r7}
 800e0e0:	b083      	sub	sp, #12
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0ea:	bf00      	nop
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b09c      	sub	sp, #112	; 0x70
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e102:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d172      	bne.n	800e1f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e114:	2200      	movs	r2, #0
 800e116:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	330c      	adds	r3, #12
 800e11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e122:	e853 3f00 	ldrex	r3, [r3]
 800e126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e12a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e12e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	330c      	adds	r3, #12
 800e136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e138:	65ba      	str	r2, [r7, #88]	; 0x58
 800e13a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e13c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e13e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e140:	e841 2300 	strex	r3, r2, [r1]
 800e144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1e5      	bne.n	800e118 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3314      	adds	r3, #20
 800e152:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	e853 3f00 	ldrex	r3, [r3]
 800e15a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15e:	f023 0301 	bic.w	r3, r3, #1
 800e162:	667b      	str	r3, [r7, #100]	; 0x64
 800e164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	3314      	adds	r3, #20
 800e16a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e16c:	647a      	str	r2, [r7, #68]	; 0x44
 800e16e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e174:	e841 2300 	strex	r3, r2, [r1]
 800e178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1e5      	bne.n	800e14c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3314      	adds	r3, #20
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	e853 3f00 	ldrex	r3, [r3]
 800e18e:	623b      	str	r3, [r7, #32]
   return(result);
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e196:	663b      	str	r3, [r7, #96]	; 0x60
 800e198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3314      	adds	r3, #20
 800e19e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1a0:	633a      	str	r2, [r7, #48]	; 0x30
 800e1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a8:	e841 2300 	strex	r3, r2, [r1]
 800e1ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1e5      	bne.n	800e180 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b6:	2220      	movs	r2, #32
 800e1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d119      	bne.n	800e1f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	e853 3f00 	ldrex	r3, [r3]
 800e1d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f023 0310 	bic.w	r3, r3, #16
 800e1da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	330c      	adds	r3, #12
 800e1e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1e4:	61fa      	str	r2, [r7, #28]
 800e1e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e8:	69b9      	ldr	r1, [r7, #24]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	e841 2300 	strex	r3, r2, [r1]
 800e1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1e5      	bne.n	800e1c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d106      	bne.n	800e20e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e202:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e204:	4619      	mov	r1, r3
 800e206:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e208:	f7ff ff69 	bl	800e0de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e20c:	e002      	b.n	800e214 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e20e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e210:	f7f5 fef8 	bl	8004004 <HAL_UART_RxCpltCallback>
}
 800e214:	bf00      	nop
 800e216:	3770      	adds	r7, #112	; 0x70
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e228:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d108      	bne.n	800e244 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e236:	085b      	lsrs	r3, r3, #1
 800e238:	b29b      	uxth	r3, r3
 800e23a:	4619      	mov	r1, r3
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7ff ff4e 	bl	800e0de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e242:	e002      	b.n	800e24a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff ff36 	bl	800e0b6 <HAL_UART_RxHalfCpltCallback>
}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b084      	sub	sp, #16
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e262:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	695b      	ldr	r3, [r3, #20]
 800e26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26e:	2b80      	cmp	r3, #128	; 0x80
 800e270:	bf0c      	ite	eq
 800e272:	2301      	moveq	r3, #1
 800e274:	2300      	movne	r3, #0
 800e276:	b2db      	uxtb	r3, r3
 800e278:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b21      	cmp	r3, #33	; 0x21
 800e284:	d108      	bne.n	800e298 <UART_DMAError+0x46>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2200      	movs	r2, #0
 800e290:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e292:	68b8      	ldr	r0, [r7, #8]
 800e294:	f000 f8c6 	bl	800e424 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	bf0c      	ite	eq
 800e2a6:	2301      	moveq	r3, #1
 800e2a8:	2300      	movne	r3, #0
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b22      	cmp	r3, #34	; 0x22
 800e2b8:	d108      	bne.n	800e2cc <UART_DMAError+0x7a>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e2c6:	68b8      	ldr	r0, [r7, #8]
 800e2c8:	f000 f8d4 	bl	800e474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	f043 0210 	orr.w	r2, r3, #16
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f7ff fef6 	bl	800e0ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2de:	bf00      	nop
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
	...

0800e2e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b098      	sub	sp, #96	; 0x60
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	88fa      	ldrh	r2, [r7, #6]
 800e300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2222      	movs	r2, #34	; 0x22
 800e30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e314:	4a40      	ldr	r2, [pc, #256]	; (800e418 <UART_Start_Receive_DMA+0x130>)
 800e316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31c:	4a3f      	ldr	r2, [pc, #252]	; (800e41c <UART_Start_Receive_DMA+0x134>)
 800e31e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e324:	4a3e      	ldr	r2, [pc, #248]	; (800e420 <UART_Start_Receive_DMA+0x138>)
 800e326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32c:	2200      	movs	r2, #0
 800e32e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e330:	f107 0308 	add.w	r3, r7, #8
 800e334:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	88fb      	ldrh	r3, [r7, #6]
 800e348:	f7fa ff31 	bl	80091ae <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e34c:	2300      	movs	r3, #0
 800e34e:	613b      	str	r3, [r7, #16]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	613b      	str	r3, [r7, #16]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	613b      	str	r3, [r7, #16]
 800e360:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d019      	beq.n	800e3a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	330c      	adds	r3, #12
 800e378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37c:	e853 3f00 	ldrex	r3, [r3]
 800e380:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e388:	65bb      	str	r3, [r7, #88]	; 0x58
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	330c      	adds	r3, #12
 800e390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e392:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e396:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e39a:	e841 2300 	strex	r3, r2, [r1]
 800e39e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1e5      	bne.n	800e372 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3314      	adds	r3, #20
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	e853 3f00 	ldrex	r3, [r3]
 800e3b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	f043 0301 	orr.w	r3, r3, #1
 800e3bc:	657b      	str	r3, [r7, #84]	; 0x54
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3314      	adds	r3, #20
 800e3c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3c6:	63ba      	str	r2, [r7, #56]	; 0x38
 800e3c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ce:	e841 2300 	strex	r3, r2, [r1]
 800e3d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1e5      	bne.n	800e3a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3314      	adds	r3, #20
 800e3e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	e853 3f00 	ldrex	r3, [r3]
 800e3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f0:	653b      	str	r3, [r7, #80]	; 0x50
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3314      	adds	r3, #20
 800e3f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3fa:	627a      	str	r2, [r7, #36]	; 0x24
 800e3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fe:	6a39      	ldr	r1, [r7, #32]
 800e400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e402:	e841 2300 	strex	r3, r2, [r1]
 800e406:	61fb      	str	r3, [r7, #28]
   return(result);
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1e5      	bne.n	800e3da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3760      	adds	r7, #96	; 0x60
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	0800e0f7 	.word	0x0800e0f7
 800e41c:	0800e21d 	.word	0x0800e21d
 800e420:	0800e253 	.word	0x0800e253

0800e424 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e424:	b480      	push	{r7}
 800e426:	b089      	sub	sp, #36	; 0x24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	330c      	adds	r3, #12
 800e432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	e853 3f00 	ldrex	r3, [r3]
 800e43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e442:	61fb      	str	r3, [r7, #28]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	330c      	adds	r3, #12
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	61ba      	str	r2, [r7, #24]
 800e44e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e450:	6979      	ldr	r1, [r7, #20]
 800e452:	69ba      	ldr	r2, [r7, #24]
 800e454:	e841 2300 	strex	r3, r2, [r1]
 800e458:	613b      	str	r3, [r7, #16]
   return(result);
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e5      	bne.n	800e42c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2220      	movs	r2, #32
 800e464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e468:	bf00      	nop
 800e46a:	3724      	adds	r7, #36	; 0x24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b095      	sub	sp, #84	; 0x54
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	330c      	adds	r3, #12
 800e482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e486:	e853 3f00 	ldrex	r3, [r3]
 800e48a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e492:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	330c      	adds	r3, #12
 800e49a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e49c:	643a      	str	r2, [r7, #64]	; 0x40
 800e49e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4a4:	e841 2300 	strex	r3, r2, [r1]
 800e4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1e5      	bne.n	800e47c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3314      	adds	r3, #20
 800e4b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	e853 3f00 	ldrex	r3, [r3]
 800e4be:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	f023 0301 	bic.w	r3, r3, #1
 800e4c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3314      	adds	r3, #20
 800e4ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4d8:	e841 2300 	strex	r3, r2, [r1]
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e5      	bne.n	800e4b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d119      	bne.n	800e520 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	330c      	adds	r3, #12
 800e4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	e853 3f00 	ldrex	r3, [r3]
 800e4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f023 0310 	bic.w	r3, r3, #16
 800e502:	647b      	str	r3, [r7, #68]	; 0x44
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	330c      	adds	r3, #12
 800e50a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e50c:	61ba      	str	r2, [r7, #24]
 800e50e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6979      	ldr	r1, [r7, #20]
 800e512:	69ba      	ldr	r2, [r7, #24]
 800e514:	e841 2300 	strex	r3, r2, [r1]
 800e518:	613b      	str	r3, [r7, #16]
   return(result);
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e5      	bne.n	800e4ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2220      	movs	r2, #32
 800e524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e52e:	bf00      	nop
 800e530:	3754      	adds	r7, #84	; 0x54
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr
	...

0800e53c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e540:	b0c0      	sub	sp, #256	; 0x100
 800e542:	af00      	add	r7, sp, #0
 800e544:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e558:	68d9      	ldr	r1, [r3, #12]
 800e55a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	ea40 0301 	orr.w	r3, r0, r1
 800e564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e56a:	689a      	ldr	r2, [r3, #8]
 800e56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	431a      	orrs	r2, r3
 800e574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	431a      	orrs	r2, r3
 800e57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e580:	69db      	ldr	r3, [r3, #28]
 800e582:	4313      	orrs	r3, r2
 800e584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e594:	f021 010c 	bic.w	r1, r1, #12
 800e598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5a2:	430b      	orrs	r3, r1
 800e5a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5b6:	6999      	ldr	r1, [r3, #24]
 800e5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	ea40 0301 	orr.w	r3, r0, r1
 800e5c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	4b8f      	ldr	r3, [pc, #572]	; (800e808 <UART_SetConfig+0x2cc>)
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d005      	beq.n	800e5dc <UART_SetConfig+0xa0>
 800e5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	4b8d      	ldr	r3, [pc, #564]	; (800e80c <UART_SetConfig+0x2d0>)
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d104      	bne.n	800e5e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e5dc:	f7fc fd48 	bl	800b070 <HAL_RCC_GetPCLK2Freq>
 800e5e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e5e4:	e003      	b.n	800e5ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e5e6:	f7fc fd2f 	bl	800b048 <HAL_RCC_GetPCLK1Freq>
 800e5ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5f2:	69db      	ldr	r3, [r3, #28]
 800e5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5f8:	f040 810c 	bne.w	800e814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e5fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e600:	2200      	movs	r2, #0
 800e602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e606:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e60a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e60e:	4622      	mov	r2, r4
 800e610:	462b      	mov	r3, r5
 800e612:	1891      	adds	r1, r2, r2
 800e614:	65b9      	str	r1, [r7, #88]	; 0x58
 800e616:	415b      	adcs	r3, r3
 800e618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e61a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e61e:	4621      	mov	r1, r4
 800e620:	eb12 0801 	adds.w	r8, r2, r1
 800e624:	4629      	mov	r1, r5
 800e626:	eb43 0901 	adc.w	r9, r3, r1
 800e62a:	f04f 0200 	mov.w	r2, #0
 800e62e:	f04f 0300 	mov.w	r3, #0
 800e632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e63a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e63e:	4690      	mov	r8, r2
 800e640:	4699      	mov	r9, r3
 800e642:	4623      	mov	r3, r4
 800e644:	eb18 0303 	adds.w	r3, r8, r3
 800e648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e64c:	462b      	mov	r3, r5
 800e64e:	eb49 0303 	adc.w	r3, r9, r3
 800e652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e662:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e66a:	460b      	mov	r3, r1
 800e66c:	18db      	adds	r3, r3, r3
 800e66e:	653b      	str	r3, [r7, #80]	; 0x50
 800e670:	4613      	mov	r3, r2
 800e672:	eb42 0303 	adc.w	r3, r2, r3
 800e676:	657b      	str	r3, [r7, #84]	; 0x54
 800e678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e67c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e680:	f7f2 fb22 	bl	8000cc8 <__aeabi_uldivmod>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4b61      	ldr	r3, [pc, #388]	; (800e810 <UART_SetConfig+0x2d4>)
 800e68a:	fba3 2302 	umull	r2, r3, r3, r2
 800e68e:	095b      	lsrs	r3, r3, #5
 800e690:	011c      	lsls	r4, r3, #4
 800e692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e696:	2200      	movs	r2, #0
 800e698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e69c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e6a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e6a4:	4642      	mov	r2, r8
 800e6a6:	464b      	mov	r3, r9
 800e6a8:	1891      	adds	r1, r2, r2
 800e6aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800e6ac:	415b      	adcs	r3, r3
 800e6ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e6b4:	4641      	mov	r1, r8
 800e6b6:	eb12 0a01 	adds.w	sl, r2, r1
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	eb43 0b01 	adc.w	fp, r3, r1
 800e6c0:	f04f 0200 	mov.w	r2, #0
 800e6c4:	f04f 0300 	mov.w	r3, #0
 800e6c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e6cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e6d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e6d4:	4692      	mov	sl, r2
 800e6d6:	469b      	mov	fp, r3
 800e6d8:	4643      	mov	r3, r8
 800e6da:	eb1a 0303 	adds.w	r3, sl, r3
 800e6de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6e2:	464b      	mov	r3, r9
 800e6e4:	eb4b 0303 	adc.w	r3, fp, r3
 800e6e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e6fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e700:	460b      	mov	r3, r1
 800e702:	18db      	adds	r3, r3, r3
 800e704:	643b      	str	r3, [r7, #64]	; 0x40
 800e706:	4613      	mov	r3, r2
 800e708:	eb42 0303 	adc.w	r3, r2, r3
 800e70c:	647b      	str	r3, [r7, #68]	; 0x44
 800e70e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e716:	f7f2 fad7 	bl	8000cc8 <__aeabi_uldivmod>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4611      	mov	r1, r2
 800e720:	4b3b      	ldr	r3, [pc, #236]	; (800e810 <UART_SetConfig+0x2d4>)
 800e722:	fba3 2301 	umull	r2, r3, r3, r1
 800e726:	095b      	lsrs	r3, r3, #5
 800e728:	2264      	movs	r2, #100	; 0x64
 800e72a:	fb02 f303 	mul.w	r3, r2, r3
 800e72e:	1acb      	subs	r3, r1, r3
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e736:	4b36      	ldr	r3, [pc, #216]	; (800e810 <UART_SetConfig+0x2d4>)
 800e738:	fba3 2302 	umull	r2, r3, r3, r2
 800e73c:	095b      	lsrs	r3, r3, #5
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e744:	441c      	add	r4, r3
 800e746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e74a:	2200      	movs	r2, #0
 800e74c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e750:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e758:	4642      	mov	r2, r8
 800e75a:	464b      	mov	r3, r9
 800e75c:	1891      	adds	r1, r2, r2
 800e75e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e760:	415b      	adcs	r3, r3
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e768:	4641      	mov	r1, r8
 800e76a:	1851      	adds	r1, r2, r1
 800e76c:	6339      	str	r1, [r7, #48]	; 0x30
 800e76e:	4649      	mov	r1, r9
 800e770:	414b      	adcs	r3, r1
 800e772:	637b      	str	r3, [r7, #52]	; 0x34
 800e774:	f04f 0200 	mov.w	r2, #0
 800e778:	f04f 0300 	mov.w	r3, #0
 800e77c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e780:	4659      	mov	r1, fp
 800e782:	00cb      	lsls	r3, r1, #3
 800e784:	4651      	mov	r1, sl
 800e786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e78a:	4651      	mov	r1, sl
 800e78c:	00ca      	lsls	r2, r1, #3
 800e78e:	4610      	mov	r0, r2
 800e790:	4619      	mov	r1, r3
 800e792:	4603      	mov	r3, r0
 800e794:	4642      	mov	r2, r8
 800e796:	189b      	adds	r3, r3, r2
 800e798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e79c:	464b      	mov	r3, r9
 800e79e:	460a      	mov	r2, r1
 800e7a0:	eb42 0303 	adc.w	r3, r2, r3
 800e7a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e7b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e7b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e7bc:	460b      	mov	r3, r1
 800e7be:	18db      	adds	r3, r3, r3
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	eb42 0303 	adc.w	r3, r2, r3
 800e7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e7ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e7d2:	f7f2 fa79 	bl	8000cc8 <__aeabi_uldivmod>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	4b0d      	ldr	r3, [pc, #52]	; (800e810 <UART_SetConfig+0x2d4>)
 800e7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800e7e0:	095b      	lsrs	r3, r3, #5
 800e7e2:	2164      	movs	r1, #100	; 0x64
 800e7e4:	fb01 f303 	mul.w	r3, r1, r3
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	00db      	lsls	r3, r3, #3
 800e7ec:	3332      	adds	r3, #50	; 0x32
 800e7ee:	4a08      	ldr	r2, [pc, #32]	; (800e810 <UART_SetConfig+0x2d4>)
 800e7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7f4:	095b      	lsrs	r3, r3, #5
 800e7f6:	f003 0207 	and.w	r2, r3, #7
 800e7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4422      	add	r2, r4
 800e802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e804:	e105      	b.n	800ea12 <UART_SetConfig+0x4d6>
 800e806:	bf00      	nop
 800e808:	40011000 	.word	0x40011000
 800e80c:	40011400 	.word	0x40011400
 800e810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e818:	2200      	movs	r2, #0
 800e81a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e81e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e826:	4642      	mov	r2, r8
 800e828:	464b      	mov	r3, r9
 800e82a:	1891      	adds	r1, r2, r2
 800e82c:	6239      	str	r1, [r7, #32]
 800e82e:	415b      	adcs	r3, r3
 800e830:	627b      	str	r3, [r7, #36]	; 0x24
 800e832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e836:	4641      	mov	r1, r8
 800e838:	1854      	adds	r4, r2, r1
 800e83a:	4649      	mov	r1, r9
 800e83c:	eb43 0501 	adc.w	r5, r3, r1
 800e840:	f04f 0200 	mov.w	r2, #0
 800e844:	f04f 0300 	mov.w	r3, #0
 800e848:	00eb      	lsls	r3, r5, #3
 800e84a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e84e:	00e2      	lsls	r2, r4, #3
 800e850:	4614      	mov	r4, r2
 800e852:	461d      	mov	r5, r3
 800e854:	4643      	mov	r3, r8
 800e856:	18e3      	adds	r3, r4, r3
 800e858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e85c:	464b      	mov	r3, r9
 800e85e:	eb45 0303 	adc.w	r3, r5, r3
 800e862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e876:	f04f 0200 	mov.w	r2, #0
 800e87a:	f04f 0300 	mov.w	r3, #0
 800e87e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e882:	4629      	mov	r1, r5
 800e884:	008b      	lsls	r3, r1, #2
 800e886:	4621      	mov	r1, r4
 800e888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e88c:	4621      	mov	r1, r4
 800e88e:	008a      	lsls	r2, r1, #2
 800e890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e894:	f7f2 fa18 	bl	8000cc8 <__aeabi_uldivmod>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4b60      	ldr	r3, [pc, #384]	; (800ea20 <UART_SetConfig+0x4e4>)
 800e89e:	fba3 2302 	umull	r2, r3, r3, r2
 800e8a2:	095b      	lsrs	r3, r3, #5
 800e8a4:	011c      	lsls	r4, r3, #4
 800e8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e8b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e8b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e8b8:	4642      	mov	r2, r8
 800e8ba:	464b      	mov	r3, r9
 800e8bc:	1891      	adds	r1, r2, r2
 800e8be:	61b9      	str	r1, [r7, #24]
 800e8c0:	415b      	adcs	r3, r3
 800e8c2:	61fb      	str	r3, [r7, #28]
 800e8c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e8c8:	4641      	mov	r1, r8
 800e8ca:	1851      	adds	r1, r2, r1
 800e8cc:	6139      	str	r1, [r7, #16]
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	414b      	adcs	r3, r1
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	f04f 0300 	mov.w	r3, #0
 800e8dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e8e0:	4659      	mov	r1, fp
 800e8e2:	00cb      	lsls	r3, r1, #3
 800e8e4:	4651      	mov	r1, sl
 800e8e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e8ea:	4651      	mov	r1, sl
 800e8ec:	00ca      	lsls	r2, r1, #3
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4642      	mov	r2, r8
 800e8f6:	189b      	adds	r3, r3, r2
 800e8f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	460a      	mov	r2, r1
 800e900:	eb42 0303 	adc.w	r3, r2, r3
 800e904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	67bb      	str	r3, [r7, #120]	; 0x78
 800e912:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e914:	f04f 0200 	mov.w	r2, #0
 800e918:	f04f 0300 	mov.w	r3, #0
 800e91c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e920:	4649      	mov	r1, r9
 800e922:	008b      	lsls	r3, r1, #2
 800e924:	4641      	mov	r1, r8
 800e926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e92a:	4641      	mov	r1, r8
 800e92c:	008a      	lsls	r2, r1, #2
 800e92e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e932:	f7f2 f9c9 	bl	8000cc8 <__aeabi_uldivmod>
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	4b39      	ldr	r3, [pc, #228]	; (800ea20 <UART_SetConfig+0x4e4>)
 800e93c:	fba3 1302 	umull	r1, r3, r3, r2
 800e940:	095b      	lsrs	r3, r3, #5
 800e942:	2164      	movs	r1, #100	; 0x64
 800e944:	fb01 f303 	mul.w	r3, r1, r3
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	011b      	lsls	r3, r3, #4
 800e94c:	3332      	adds	r3, #50	; 0x32
 800e94e:	4a34      	ldr	r2, [pc, #208]	; (800ea20 <UART_SetConfig+0x4e4>)
 800e950:	fba2 2303 	umull	r2, r3, r2, r3
 800e954:	095b      	lsrs	r3, r3, #5
 800e956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e95a:	441c      	add	r4, r3
 800e95c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e960:	2200      	movs	r2, #0
 800e962:	673b      	str	r3, [r7, #112]	; 0x70
 800e964:	677a      	str	r2, [r7, #116]	; 0x74
 800e966:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e96a:	4642      	mov	r2, r8
 800e96c:	464b      	mov	r3, r9
 800e96e:	1891      	adds	r1, r2, r2
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	415b      	adcs	r3, r3
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e97a:	4641      	mov	r1, r8
 800e97c:	1851      	adds	r1, r2, r1
 800e97e:	6039      	str	r1, [r7, #0]
 800e980:	4649      	mov	r1, r9
 800e982:	414b      	adcs	r3, r1
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	f04f 0200 	mov.w	r2, #0
 800e98a:	f04f 0300 	mov.w	r3, #0
 800e98e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e992:	4659      	mov	r1, fp
 800e994:	00cb      	lsls	r3, r1, #3
 800e996:	4651      	mov	r1, sl
 800e998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e99c:	4651      	mov	r1, sl
 800e99e:	00ca      	lsls	r2, r1, #3
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	4642      	mov	r2, r8
 800e9a8:	189b      	adds	r3, r3, r2
 800e9aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9ac:	464b      	mov	r3, r9
 800e9ae:	460a      	mov	r2, r1
 800e9b0:	eb42 0303 	adc.w	r3, r2, r3
 800e9b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	663b      	str	r3, [r7, #96]	; 0x60
 800e9c0:	667a      	str	r2, [r7, #100]	; 0x64
 800e9c2:	f04f 0200 	mov.w	r2, #0
 800e9c6:	f04f 0300 	mov.w	r3, #0
 800e9ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	008b      	lsls	r3, r1, #2
 800e9d2:	4641      	mov	r1, r8
 800e9d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e9d8:	4641      	mov	r1, r8
 800e9da:	008a      	lsls	r2, r1, #2
 800e9dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e9e0:	f7f2 f972 	bl	8000cc8 <__aeabi_uldivmod>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <UART_SetConfig+0x4e4>)
 800e9ea:	fba3 1302 	umull	r1, r3, r3, r2
 800e9ee:	095b      	lsrs	r3, r3, #5
 800e9f0:	2164      	movs	r1, #100	; 0x64
 800e9f2:	fb01 f303 	mul.w	r3, r1, r3
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	3332      	adds	r3, #50	; 0x32
 800e9fc:	4a08      	ldr	r2, [pc, #32]	; (800ea20 <UART_SetConfig+0x4e4>)
 800e9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ea02:	095b      	lsrs	r3, r3, #5
 800ea04:	f003 020f 	and.w	r2, r3, #15
 800ea08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4422      	add	r2, r4
 800ea10:	609a      	str	r2, [r3, #8]
}
 800ea12:	bf00      	nop
 800ea14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea1e:	bf00      	nop
 800ea20:	51eb851f 	.word	0x51eb851f

0800ea24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ea24:	b084      	sub	sp, #16
 800ea26:	b480      	push	{r7}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	f107 001c 	add.w	r0, r7, #28
 800ea32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ea3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ea3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ea42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ea46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ea4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ea4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ea5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	431a      	orrs	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	b004      	add	sp, #16
 800ea78:	4770      	bx	lr

0800ea7a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eaa8:	2300      	movs	r3, #0
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800eab6:	b480      	push	{r7}
 800eab8:	b083      	sub	sp, #12
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2203      	movs	r2, #3
 800eac2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ead2:	b480      	push	{r7}
 800ead4:	b083      	sub	sp, #12
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0303 	and.w	r3, r3, #3
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr

0800eaee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800eaee:	b480      	push	{r7}
 800eaf0:	b085      	sub	sp, #20
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
 800eaf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb0c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eb12:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eb18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eb28:	f023 030f 	bic.w	r3, r3, #15
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	431a      	orrs	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800eb34:	2300      	movs	r3, #0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800eb42:	b480      	push	{r7}
 800eb44:	b083      	sub	sp, #12
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	b2db      	uxtb	r3, r3
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3314      	adds	r3, #20
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	4413      	add	r3, r2
 800eb70:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
}  
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b085      	sub	sp, #20
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eba8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ebae:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ebb4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ebcc:	2300      	movs	r3, #0

}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr

0800ebda <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b088      	sub	sp, #32
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ebe8:	2310      	movs	r3, #16
 800ebea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebec:	2340      	movs	r3, #64	; 0x40
 800ebee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebfa:	f107 0308 	add.w	r3, r7, #8
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7ff ff74 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ec06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec0a:	2110      	movs	r1, #16
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f9d7 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ec12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec14:	69fb      	ldr	r3, [r7, #28]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b088      	sub	sp, #32
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ec2c:	2311      	movs	r3, #17
 800ec2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec30:	2340      	movs	r3, #64	; 0x40
 800ec32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	4619      	mov	r1, r3
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7ff ff52 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ec4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec4e:	2111      	movs	r1, #17
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f9b5 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ec56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec58:	69fb      	ldr	r3, [r7, #28]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3720      	adds	r7, #32
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b088      	sub	sp, #32
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec70:	2312      	movs	r3, #18
 800ec72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec74:	2340      	movs	r3, #64	; 0x40
 800ec76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec82:	f107 0308 	add.w	r3, r7, #8
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7ff ff30 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ec8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec92:	2112      	movs	r1, #18
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 f993 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ec9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec9c:	69fb      	ldr	r3, [r7, #28]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3720      	adds	r7, #32
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b088      	sub	sp, #32
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ecb4:	2318      	movs	r3, #24
 800ecb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecb8:	2340      	movs	r3, #64	; 0x40
 800ecba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecc6:	f107 0308 	add.w	r3, r7, #8
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7ff ff0e 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ecd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecd6:	2118      	movs	r1, #24
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 f971 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ecde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ece0:	69fb      	ldr	r3, [r7, #28]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3720      	adds	r7, #32
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b088      	sub	sp, #32
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ecf8:	2319      	movs	r3, #25
 800ecfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecfc:	2340      	movs	r3, #64	; 0x40
 800ecfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed0a:	f107 0308 	add.w	r3, r7, #8
 800ed0e:	4619      	mov	r1, r3
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f7ff feec 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ed16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed1a:	2119      	movs	r1, #25
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f94f 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ed22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed24:	69fb      	ldr	r3, [r7, #28]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
	...

0800ed30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b088      	sub	sp, #32
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ed3c:	230c      	movs	r3, #12
 800ed3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed40:	2340      	movs	r3, #64	; 0x40
 800ed42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed44:	2300      	movs	r3, #0
 800ed46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed4e:	f107 0308 	add.w	r3, r7, #8
 800ed52:	4619      	mov	r1, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff feca 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ed5a:	4a05      	ldr	r2, [pc, #20]	; (800ed70 <SDMMC_CmdStopTransfer+0x40>)
 800ed5c:	210c      	movs	r1, #12
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f92e 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ed64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed66:	69fb      	ldr	r3, [r7, #28]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3720      	adds	r7, #32
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	05f5e100 	.word	0x05f5e100

0800ed74 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08a      	sub	sp, #40	; 0x28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed84:	2307      	movs	r3, #7
 800ed86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed88:	2340      	movs	r3, #64	; 0x40
 800ed8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed94:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed96:	f107 0310 	add.w	r3, r7, #16
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f7ff fea6 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800eda2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eda6:	2107      	movs	r1, #7
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f000 f909 	bl	800efc0 <SDMMC_GetCmdResp1>
 800edae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3728      	adds	r7, #40	; 0x28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b088      	sub	sp, #32
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800edca:	2300      	movs	r3, #0
 800edcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff fe85 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fb23 	bl	800f430 <SDMMC_GetCmdError>
 800edea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edec:	69fb      	ldr	r3, [r7, #28]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b088      	sub	sp, #32
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800edfe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ee02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ee04:	2308      	movs	r3, #8
 800ee06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee16:	f107 0308 	add.w	r3, r7, #8
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7ff fe66 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 fab6 	bl	800f394 <SDMMC_GetCmdResp7>
 800ee28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee2a:	69fb      	ldr	r3, [r7, #28]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3720      	adds	r7, #32
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee42:	2337      	movs	r3, #55	; 0x37
 800ee44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee46:	2340      	movs	r3, #64	; 0x40
 800ee48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee54:	f107 0308 	add.w	r3, r7, #8
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7ff fe47 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ee60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee64:	2137      	movs	r1, #55	; 0x37
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f8aa 	bl	800efc0 <SDMMC_GetCmdResp1>
 800ee6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee6e:	69fb      	ldr	r3, [r7, #28]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3720      	adds	r7, #32
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b088      	sub	sp, #32
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ee88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee8e:	2329      	movs	r3, #41	; 0x29
 800ee90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee92:	2340      	movs	r3, #64	; 0x40
 800ee94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee96:	2300      	movs	r3, #0
 800ee98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eea0:	f107 0308 	add.w	r3, r7, #8
 800eea4:	4619      	mov	r1, r3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7ff fe21 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f9bd 	bl	800f22c <SDMMC_GetCmdResp3>
 800eeb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eeb4:	69fb      	ldr	r3, [r7, #28]
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3720      	adds	r7, #32
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b088      	sub	sp, #32
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eec6:	2300      	movs	r3, #0
 800eec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eeca:	2302      	movs	r3, #2
 800eecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eece:	23c0      	movs	r3, #192	; 0xc0
 800eed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eed2:	2300      	movs	r3, #0
 800eed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eedc:	f107 0308 	add.w	r3, r7, #8
 800eee0:	4619      	mov	r1, r3
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fe03 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f957 	bl	800f19c <SDMMC_GetCmdResp2>
 800eeee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eef0:	69fb      	ldr	r3, [r7, #28]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3720      	adds	r7, #32
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b088      	sub	sp, #32
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
 800ef02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ef08:	2309      	movs	r3, #9
 800ef0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ef0c:	23c0      	movs	r3, #192	; 0xc0
 800ef0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef10:	2300      	movs	r3, #0
 800ef12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef1a:	f107 0308 	add.w	r3, r7, #8
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7ff fde4 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f938 	bl	800f19c <SDMMC_GetCmdResp2>
 800ef2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef2e:	69fb      	ldr	r3, [r7, #28]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ef46:	2303      	movs	r3, #3
 800ef48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef58:	f107 0308 	add.w	r3, r7, #8
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff fdc5 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	2103      	movs	r1, #3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f99d 	bl	800f2a8 <SDMMC_GetCmdResp6>
 800ef6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef70:	69fb      	ldr	r3, [r7, #28]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3720      	adds	r7, #32
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b088      	sub	sp, #32
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ef88:	230d      	movs	r3, #13
 800ef8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef8c:	2340      	movs	r3, #64	; 0x40
 800ef8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef90:	2300      	movs	r3, #0
 800ef92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef9a:	f107 0308 	add.w	r3, r7, #8
 800ef9e:	4619      	mov	r1, r3
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff fda4 	bl	800eaee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800efa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800efaa:	210d      	movs	r1, #13
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f807 	bl	800efc0 <SDMMC_GetCmdResp1>
 800efb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efb4:	69fb      	ldr	r3, [r7, #28]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3720      	adds	r7, #32
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b088      	sub	sp, #32
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	460b      	mov	r3, r1
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800efce:	4b70      	ldr	r3, [pc, #448]	; (800f190 <SDMMC_GetCmdResp1+0x1d0>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a70      	ldr	r2, [pc, #448]	; (800f194 <SDMMC_GetCmdResp1+0x1d4>)
 800efd4:	fba2 2303 	umull	r2, r3, r2, r3
 800efd8:	0a5a      	lsrs	r2, r3, #9
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	fb02 f303 	mul.w	r3, r2, r3
 800efe0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	1e5a      	subs	r2, r3, #1
 800efe6:	61fa      	str	r2, [r7, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d102      	bne.n	800eff2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eff0:	e0c9      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800effe:	2b00      	cmp	r3, #0
 800f000:	d0ef      	beq.n	800efe2 <SDMMC_GetCmdResp1+0x22>
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d1ea      	bne.n	800efe2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f010:	f003 0304 	and.w	r3, r3, #4
 800f014:	2b00      	cmp	r3, #0
 800f016:	d004      	beq.n	800f022 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2204      	movs	r2, #4
 800f01c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f01e:	2304      	movs	r3, #4
 800f020:	e0b1      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d004      	beq.n	800f038 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2201      	movs	r2, #1
 800f032:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f034:	2301      	movs	r3, #1
 800f036:	e0a6      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	22c5      	movs	r2, #197	; 0xc5
 800f03c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7ff fd7f 	bl	800eb42 <SDIO_GetCommandResponse>
 800f044:	4603      	mov	r3, r0
 800f046:	461a      	mov	r2, r3
 800f048:	7afb      	ldrb	r3, [r7, #11]
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d001      	beq.n	800f052 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f04e:	2301      	movs	r3, #1
 800f050:	e099      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f052:	2100      	movs	r1, #0
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7ff fd81 	bl	800eb5c <SDIO_GetResponse>
 800f05a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	4b4e      	ldr	r3, [pc, #312]	; (800f198 <SDMMC_GetCmdResp1+0x1d8>)
 800f060:	4013      	ands	r3, r2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f066:	2300      	movs	r3, #0
 800f068:	e08d      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	da02      	bge.n	800f076 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f074:	e087      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f080:	2340      	movs	r3, #64	; 0x40
 800f082:	e080      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f08e:	2380      	movs	r3, #128	; 0x80
 800f090:	e079      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f09c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0a0:	e071      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f0ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0b0:	e069      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d002      	beq.n	800f0c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0c0:	e061      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d002      	beq.n	800f0d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f0cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0d0:	e059      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f0dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0e0:	e051      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f0ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f0f0:	e049      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f0fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f100:	e041      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f10c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f110:	e039      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d002      	beq.n	800f122 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f11c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f120:	e031      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f12c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f130:	e029      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f13c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f140:	e021      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f14c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f150:	e019      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f15c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f160:	e011      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f16c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f170:	e009      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	f003 0308 	and.w	r3, r3, #8
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f17c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f180:	e001      	b.n	800f186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f186:	4618      	mov	r0, r3
 800f188:	3720      	adds	r7, #32
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	200001dc 	.word	0x200001dc
 800f194:	10624dd3 	.word	0x10624dd3
 800f198:	fdffe008 	.word	0xfdffe008

0800f19c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f1a4:	4b1f      	ldr	r3, [pc, #124]	; (800f224 <SDMMC_GetCmdResp2+0x88>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a1f      	ldr	r2, [pc, #124]	; (800f228 <SDMMC_GetCmdResp2+0x8c>)
 800f1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ae:	0a5b      	lsrs	r3, r3, #9
 800f1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1b4:	fb02 f303 	mul.w	r3, r2, r3
 800f1b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	1e5a      	subs	r2, r3, #1
 800f1be:	60fa      	str	r2, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d102      	bne.n	800f1ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1c8:	e026      	b.n	800f218 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0ef      	beq.n	800f1ba <SDMMC_GetCmdResp2+0x1e>
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1ea      	bne.n	800f1ba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e8:	f003 0304 	and.w	r3, r3, #4
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d004      	beq.n	800f1fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1f6:	2304      	movs	r3, #4
 800f1f8:	e00e      	b.n	800f218 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2201      	movs	r2, #1
 800f20a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f20c:	2301      	movs	r3, #1
 800f20e:	e003      	b.n	800f218 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	22c5      	movs	r2, #197	; 0xc5
 800f214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f216:	2300      	movs	r3, #0
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr
 800f224:	200001dc 	.word	0x200001dc
 800f228:	10624dd3 	.word	0x10624dd3

0800f22c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f234:	4b1a      	ldr	r3, [pc, #104]	; (800f2a0 <SDMMC_GetCmdResp3+0x74>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a1a      	ldr	r2, [pc, #104]	; (800f2a4 <SDMMC_GetCmdResp3+0x78>)
 800f23a:	fba2 2303 	umull	r2, r3, r2, r3
 800f23e:	0a5b      	lsrs	r3, r3, #9
 800f240:	f241 3288 	movw	r2, #5000	; 0x1388
 800f244:	fb02 f303 	mul.w	r3, r2, r3
 800f248:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	1e5a      	subs	r2, r3, #1
 800f24e:	60fa      	str	r2, [r7, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d102      	bne.n	800f25a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f254:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f258:	e01b      	b.n	800f292 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f25e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f266:	2b00      	cmp	r3, #0
 800f268:	d0ef      	beq.n	800f24a <SDMMC_GetCmdResp3+0x1e>
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1ea      	bne.n	800f24a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f278:	f003 0304 	and.w	r3, r3, #4
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2204      	movs	r2, #4
 800f284:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f286:	2304      	movs	r3, #4
 800f288:	e003      	b.n	800f292 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	22c5      	movs	r2, #197	; 0xc5
 800f28e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	200001dc 	.word	0x200001dc
 800f2a4:	10624dd3 	.word	0x10624dd3

0800f2a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b088      	sub	sp, #32
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2b6:	4b35      	ldr	r3, [pc, #212]	; (800f38c <SDMMC_GetCmdResp6+0xe4>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a35      	ldr	r2, [pc, #212]	; (800f390 <SDMMC_GetCmdResp6+0xe8>)
 800f2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c0:	0a5b      	lsrs	r3, r3, #9
 800f2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2c6:	fb02 f303 	mul.w	r3, r2, r3
 800f2ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	1e5a      	subs	r2, r3, #1
 800f2d0:	61fa      	str	r2, [r7, #28]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d102      	bne.n	800f2dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2da:	e052      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d0ef      	beq.n	800f2cc <SDMMC_GetCmdResp6+0x24>
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1ea      	bne.n	800f2cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fa:	f003 0304 	and.w	r3, r3, #4
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d004      	beq.n	800f30c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2204      	movs	r2, #4
 800f306:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f308:	2304      	movs	r3, #4
 800f30a:	e03a      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f310:	f003 0301 	and.w	r3, r3, #1
 800f314:	2b00      	cmp	r3, #0
 800f316:	d004      	beq.n	800f322 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2201      	movs	r2, #1
 800f31c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f31e:	2301      	movs	r3, #1
 800f320:	e02f      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7ff fc0d 	bl	800eb42 <SDIO_GetCommandResponse>
 800f328:	4603      	mov	r3, r0
 800f32a:	461a      	mov	r2, r3
 800f32c:	7afb      	ldrb	r3, [r7, #11]
 800f32e:	4293      	cmp	r3, r2
 800f330:	d001      	beq.n	800f336 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f332:	2301      	movs	r3, #1
 800f334:	e025      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	22c5      	movs	r2, #197	; 0xc5
 800f33a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f33c:	2100      	movs	r1, #0
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7ff fc0c 	bl	800eb5c <SDIO_GetResponse>
 800f344:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	0c1b      	lsrs	r3, r3, #16
 800f354:	b29a      	uxth	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	e011      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f36c:	e009      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f37c:	e001      	b.n	800f382 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f37e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f382:	4618      	mov	r0, r3
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	200001dc 	.word	0x200001dc
 800f390:	10624dd3 	.word	0x10624dd3

0800f394 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f39c:	4b22      	ldr	r3, [pc, #136]	; (800f428 <SDMMC_GetCmdResp7+0x94>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a22      	ldr	r2, [pc, #136]	; (800f42c <SDMMC_GetCmdResp7+0x98>)
 800f3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3a6:	0a5b      	lsrs	r3, r3, #9
 800f3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3ac:	fb02 f303 	mul.w	r3, r2, r3
 800f3b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	1e5a      	subs	r2, r3, #1
 800f3b6:	60fa      	str	r2, [r7, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d102      	bne.n	800f3c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3c0:	e02c      	b.n	800f41c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d0ef      	beq.n	800f3b2 <SDMMC_GetCmdResp7+0x1e>
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1ea      	bne.n	800f3b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3e0:	f003 0304 	and.w	r3, r3, #4
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2204      	movs	r2, #4
 800f3ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3ee:	2304      	movs	r3, #4
 800f3f0:	e014      	b.n	800f41c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f6:	f003 0301 	and.w	r3, r3, #1
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d004      	beq.n	800f408 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f404:	2301      	movs	r3, #1
 800f406:	e009      	b.n	800f41c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2240      	movs	r2, #64	; 0x40
 800f418:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f41a:	2300      	movs	r3, #0
  
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3714      	adds	r7, #20
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	200001dc 	.word	0x200001dc
 800f42c:	10624dd3 	.word	0x10624dd3

0800f430 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f438:	4b11      	ldr	r3, [pc, #68]	; (800f480 <SDMMC_GetCmdError+0x50>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a11      	ldr	r2, [pc, #68]	; (800f484 <SDMMC_GetCmdError+0x54>)
 800f43e:	fba2 2303 	umull	r2, r3, r2, r3
 800f442:	0a5b      	lsrs	r3, r3, #9
 800f444:	f241 3288 	movw	r2, #5000	; 0x1388
 800f448:	fb02 f303 	mul.w	r3, r2, r3
 800f44c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	1e5a      	subs	r2, r3, #1
 800f452:	60fa      	str	r2, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f45c:	e009      	b.n	800f472 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f466:	2b00      	cmp	r3, #0
 800f468:	d0f1      	beq.n	800f44e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	22c5      	movs	r2, #197	; 0xc5
 800f46e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3714      	adds	r7, #20
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	200001dc 	.word	0x200001dc
 800f484:	10624dd3 	.word	0x10624dd3

0800f488 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f48c:	4904      	ldr	r1, [pc, #16]	; (800f4a0 <MX_FATFS_Init+0x18>)
 800f48e:	4805      	ldr	r0, [pc, #20]	; (800f4a4 <MX_FATFS_Init+0x1c>)
 800f490:	f003 f8f4 	bl	801267c <FATFS_LinkDriver>
 800f494:	4603      	mov	r3, r0
 800f496:	461a      	mov	r2, r3
 800f498:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <MX_FATFS_Init+0x20>)
 800f49a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f49c:	bf00      	nop
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	20005d98 	.word	0x20005d98
 800f4a4:	08058554 	.word	0x08058554
 800f4a8:	20005d94 	.word	0x20005d94

0800f4ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f4b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f4c6:	f000 f86b 	bl	800f5a0 <BSP_SD_IsDetected>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d001      	beq.n	800f4d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e005      	b.n	800f4e0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f4d4:	4804      	ldr	r0, [pc, #16]	; (800f4e8 <BSP_SD_Init+0x2c>)
 800f4d6:	f7fc fa9d 	bl	800ba14 <HAL_SD_Init>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f4de:	79fb      	ldrb	r3, [r7, #7]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20005ab0 	.word	0x20005ab0

0800f4ec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af02      	add	r7, sp, #8
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	68f9      	ldr	r1, [r7, #12]
 800f508:	4806      	ldr	r0, [pc, #24]	; (800f524 <BSP_SD_ReadBlocks+0x38>)
 800f50a:	f7fc fb33 	bl	800bb74 <HAL_SD_ReadBlocks>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f514:	2301      	movs	r3, #1
 800f516:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f518:	7dfb      	ldrb	r3, [r7, #23]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3718      	adds	r7, #24
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	20005ab0 	.word	0x20005ab0

0800f528 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af02      	add	r7, sp, #8
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	607a      	str	r2, [r7, #4]
 800f534:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f536:	2300      	movs	r3, #0
 800f538:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	68f9      	ldr	r1, [r7, #12]
 800f544:	4806      	ldr	r0, [pc, #24]	; (800f560 <BSP_SD_WriteBlocks+0x38>)
 800f546:	f7fc fcf3 	bl	800bf30 <HAL_SD_WriteBlocks>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f554:	7dfb      	ldrb	r3, [r7, #23]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20005ab0 	.word	0x20005ab0

0800f564 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f568:	4805      	ldr	r0, [pc, #20]	; (800f580 <BSP_SD_GetCardState+0x1c>)
 800f56a:	f7fd f837 	bl	800c5dc <HAL_SD_GetCardState>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b04      	cmp	r3, #4
 800f572:	bf14      	ite	ne
 800f574:	2301      	movne	r3, #1
 800f576:	2300      	moveq	r3, #0
 800f578:	b2db      	uxtb	r3, r3
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20005ab0 	.word	0x20005ab0

0800f584 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f58c:	6879      	ldr	r1, [r7, #4]
 800f58e:	4803      	ldr	r0, [pc, #12]	; (800f59c <BSP_SD_GetCardInfo+0x18>)
 800f590:	f7fc fff8 	bl	800c584 <HAL_SD_GetCardInfo>
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	20005ab0 	.word	0x20005ab0

0800f5a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	b2db      	uxtb	r3, r3
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
	...

0800f5bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f5c6:	4b0b      	ldr	r3, [pc, #44]	; (800f5f4 <SD_CheckStatus+0x38>)
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f5cc:	f7ff ffca 	bl	800f564 <BSP_SD_GetCardState>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d107      	bne.n	800f5e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f5d6:	4b07      	ldr	r3, [pc, #28]	; (800f5f4 <SD_CheckStatus+0x38>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f023 0301 	bic.w	r3, r3, #1
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	4b04      	ldr	r3, [pc, #16]	; (800f5f4 <SD_CheckStatus+0x38>)
 800f5e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f5e6:	4b03      	ldr	r3, [pc, #12]	; (800f5f4 <SD_CheckStatus+0x38>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	b2db      	uxtb	r3, r3
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	2000031d 	.word	0x2000031d

0800f5f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	4603      	mov	r3, r0
 800f600:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f602:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <SD_initialize+0x38>)
 800f604:	2201      	movs	r2, #1
 800f606:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f608:	f7ff ff58 	bl	800f4bc <BSP_SD_Init>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d107      	bne.n	800f622 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	4618      	mov	r0, r3
 800f616:	f7ff ffd1 	bl	800f5bc <SD_CheckStatus>
 800f61a:	4603      	mov	r3, r0
 800f61c:	461a      	mov	r2, r3
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <SD_initialize+0x38>)
 800f620:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f622:	4b03      	ldr	r3, [pc, #12]	; (800f630 <SD_initialize+0x38>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	b2db      	uxtb	r3, r3
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	2000031d 	.word	0x2000031d

0800f634 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f63e:	79fb      	ldrb	r3, [r7, #7]
 800f640:	4618      	mov	r0, r3
 800f642:	f7ff ffbb 	bl	800f5bc <SD_CheckStatus>
 800f646:	4603      	mov	r3, r0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	60b9      	str	r1, [r7, #8]
 800f658:	607a      	str	r2, [r7, #4]
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f660:	2301      	movs	r3, #1
 800f662:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f664:	f04f 33ff 	mov.w	r3, #4294967295
 800f668:	683a      	ldr	r2, [r7, #0]
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	68b8      	ldr	r0, [r7, #8]
 800f66e:	f7ff ff3d 	bl	800f4ec <BSP_SD_ReadBlocks>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d107      	bne.n	800f688 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f678:	bf00      	nop
 800f67a:	f7ff ff73 	bl	800f564 <BSP_SD_GetCardState>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1fa      	bne.n	800f67a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b086      	sub	sp, #24
 800f696:	af00      	add	r7, sp, #0
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	603b      	str	r3, [r7, #0]
 800f69e:	4603      	mov	r3, r0
 800f6a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6aa:	683a      	ldr	r2, [r7, #0]
 800f6ac:	6879      	ldr	r1, [r7, #4]
 800f6ae:	68b8      	ldr	r0, [r7, #8]
 800f6b0:	f7ff ff3a 	bl	800f528 <BSP_SD_WriteBlocks>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d107      	bne.n	800f6ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f6ba:	bf00      	nop
 800f6bc:	f7ff ff52 	bl	800f564 <BSP_SD_GetCardState>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1fa      	bne.n	800f6bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08c      	sub	sp, #48	; 0x30
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	603a      	str	r2, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f6ea:	4b25      	ldr	r3, [pc, #148]	; (800f780 <SD_ioctl+0xac>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <SD_ioctl+0x28>
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	e03c      	b.n	800f776 <SD_ioctl+0xa2>

  switch (cmd)
 800f6fc:	79bb      	ldrb	r3, [r7, #6]
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d834      	bhi.n	800f76c <SD_ioctl+0x98>
 800f702:	a201      	add	r2, pc, #4	; (adr r2, 800f708 <SD_ioctl+0x34>)
 800f704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f708:	0800f719 	.word	0x0800f719
 800f70c:	0800f721 	.word	0x0800f721
 800f710:	0800f739 	.word	0x0800f739
 800f714:	0800f753 	.word	0x0800f753
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f718:	2300      	movs	r3, #0
 800f71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f71e:	e028      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f720:	f107 030c 	add.w	r3, r7, #12
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff ff2d 	bl	800f584 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f736:	e01c      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f738:	f107 030c 	add.w	r3, r7, #12
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff ff21 	bl	800f584 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	b29a      	uxth	r2, r3
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f750:	e00f      	b.n	800f772 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f752:	f107 030c 	add.w	r3, r7, #12
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff ff14 	bl	800f584 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75e:	0a5a      	lsrs	r2, r3, #9
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f76a:	e002      	b.n	800f772 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f76c:	2304      	movs	r3, #4
 800f76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f776:	4618      	mov	r0, r3
 800f778:	3730      	adds	r7, #48	; 0x30
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	2000031d 	.word	0x2000031d

0800f784 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	4603      	mov	r3, r0
 800f78c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f78e:	79fb      	ldrb	r3, [r7, #7]
 800f790:	4a08      	ldr	r2, [pc, #32]	; (800f7b4 <disk_status+0x30>)
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	79fa      	ldrb	r2, [r7, #7]
 800f79c:	4905      	ldr	r1, [pc, #20]	; (800f7b4 <disk_status+0x30>)
 800f79e:	440a      	add	r2, r1
 800f7a0:	7a12      	ldrb	r2, [r2, #8]
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	4798      	blx	r3
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	20005dc4 	.word	0x20005dc4

0800f7b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	4603      	mov	r3, r0
 800f7c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f7c6:	79fb      	ldrb	r3, [r7, #7]
 800f7c8:	4a0d      	ldr	r2, [pc, #52]	; (800f800 <disk_initialize+0x48>)
 800f7ca:	5cd3      	ldrb	r3, [r2, r3]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d111      	bne.n	800f7f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	4a0b      	ldr	r2, [pc, #44]	; (800f800 <disk_initialize+0x48>)
 800f7d4:	2101      	movs	r1, #1
 800f7d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7d8:	79fb      	ldrb	r3, [r7, #7]
 800f7da:	4a09      	ldr	r2, [pc, #36]	; (800f800 <disk_initialize+0x48>)
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	79fa      	ldrb	r2, [r7, #7]
 800f7e6:	4906      	ldr	r1, [pc, #24]	; (800f800 <disk_initialize+0x48>)
 800f7e8:	440a      	add	r2, r1
 800f7ea:	7a12      	ldrb	r2, [r2, #8]
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	4798      	blx	r3
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	20005dc4 	.word	0x20005dc4

0800f804 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f804:	b590      	push	{r4, r7, lr}
 800f806:	b087      	sub	sp, #28
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60b9      	str	r1, [r7, #8]
 800f80c:	607a      	str	r2, [r7, #4]
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	4603      	mov	r3, r0
 800f812:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f814:	7bfb      	ldrb	r3, [r7, #15]
 800f816:	4a0a      	ldr	r2, [pc, #40]	; (800f840 <disk_read+0x3c>)
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	689c      	ldr	r4, [r3, #8]
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	4a07      	ldr	r2, [pc, #28]	; (800f840 <disk_read+0x3c>)
 800f824:	4413      	add	r3, r2
 800f826:	7a18      	ldrb	r0, [r3, #8]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	68b9      	ldr	r1, [r7, #8]
 800f82e:	47a0      	blx	r4
 800f830:	4603      	mov	r3, r0
 800f832:	75fb      	strb	r3, [r7, #23]
  return res;
 800f834:	7dfb      	ldrb	r3, [r7, #23]
}
 800f836:	4618      	mov	r0, r3
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd90      	pop	{r4, r7, pc}
 800f83e:	bf00      	nop
 800f840:	20005dc4 	.word	0x20005dc4

0800f844 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b087      	sub	sp, #28
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60b9      	str	r1, [r7, #8]
 800f84c:	607a      	str	r2, [r7, #4]
 800f84e:	603b      	str	r3, [r7, #0]
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f854:	7bfb      	ldrb	r3, [r7, #15]
 800f856:	4a0a      	ldr	r2, [pc, #40]	; (800f880 <disk_write+0x3c>)
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	68dc      	ldr	r4, [r3, #12]
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	4a07      	ldr	r2, [pc, #28]	; (800f880 <disk_write+0x3c>)
 800f864:	4413      	add	r3, r2
 800f866:	7a18      	ldrb	r0, [r3, #8]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	68b9      	ldr	r1, [r7, #8]
 800f86e:	47a0      	blx	r4
 800f870:	4603      	mov	r3, r0
 800f872:	75fb      	strb	r3, [r7, #23]
  return res;
 800f874:	7dfb      	ldrb	r3, [r7, #23]
}
 800f876:	4618      	mov	r0, r3
 800f878:	371c      	adds	r7, #28
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd90      	pop	{r4, r7, pc}
 800f87e:	bf00      	nop
 800f880:	20005dc4 	.word	0x20005dc4

0800f884 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4603      	mov	r3, r0
 800f88c:	603a      	str	r2, [r7, #0]
 800f88e:	71fb      	strb	r3, [r7, #7]
 800f890:	460b      	mov	r3, r1
 800f892:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f894:	79fb      	ldrb	r3, [r7, #7]
 800f896:	4a09      	ldr	r2, [pc, #36]	; (800f8bc <disk_ioctl+0x38>)
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	4413      	add	r3, r2
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	79fa      	ldrb	r2, [r7, #7]
 800f8a2:	4906      	ldr	r1, [pc, #24]	; (800f8bc <disk_ioctl+0x38>)
 800f8a4:	440a      	add	r2, r1
 800f8a6:	7a10      	ldrb	r0, [r2, #8]
 800f8a8:	79b9      	ldrb	r1, [r7, #6]
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	4798      	blx	r3
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20005dc4 	.word	0x20005dc4

0800f8c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f8d0:	89fb      	ldrh	r3, [r7, #14]
 800f8d2:	021b      	lsls	r3, r3, #8
 800f8d4:	b21a      	sxth	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	b21b      	sxth	r3, r3
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	b21b      	sxth	r3, r3
 800f8e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f8e2:	89fb      	ldrh	r3, [r7, #14]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3303      	adds	r3, #3
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	021b      	lsls	r3, r3, #8
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	3202      	adds	r2, #2
 800f908:	7812      	ldrb	r2, [r2, #0]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	021b      	lsls	r3, r3, #8
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	3201      	adds	r2, #1
 800f916:	7812      	ldrb	r2, [r2, #0]
 800f918:	4313      	orrs	r3, r2
 800f91a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	021b      	lsls	r3, r3, #8
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	7812      	ldrb	r2, [r2, #0]
 800f924:	4313      	orrs	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
	return rv;
 800f928:	68fb      	ldr	r3, [r7, #12]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f936:	b480      	push	{r7}
 800f938:	b083      	sub	sp, #12
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	460b      	mov	r3, r1
 800f940:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	887a      	ldrh	r2, [r7, #2]
 800f94a:	b2d2      	uxtb	r2, r2
 800f94c:	701a      	strb	r2, [r3, #0]
 800f94e:	887b      	ldrh	r3, [r7, #2]
 800f950:	0a1b      	lsrs	r3, r3, #8
 800f952:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	1c5a      	adds	r2, r3, #1
 800f958:	607a      	str	r2, [r7, #4]
 800f95a:	887a      	ldrh	r2, [r7, #2]
 800f95c:	b2d2      	uxtb	r2, r2
 800f95e:	701a      	strb	r2, [r3, #0]
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	607a      	str	r2, [r7, #4]
 800f97c:	683a      	ldr	r2, [r7, #0]
 800f97e:	b2d2      	uxtb	r2, r2
 800f980:	701a      	strb	r2, [r3, #0]
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	0a1b      	lsrs	r3, r3, #8
 800f986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	1c5a      	adds	r2, r3, #1
 800f98c:	607a      	str	r2, [r7, #4]
 800f98e:	683a      	ldr	r2, [r7, #0]
 800f990:	b2d2      	uxtb	r2, r2
 800f992:	701a      	strb	r2, [r3, #0]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	0a1b      	lsrs	r3, r3, #8
 800f998:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	1c5a      	adds	r2, r3, #1
 800f99e:	607a      	str	r2, [r7, #4]
 800f9a0:	683a      	ldr	r2, [r7, #0]
 800f9a2:	b2d2      	uxtb	r2, r2
 800f9a4:	701a      	strb	r2, [r3, #0]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	0a1b      	lsrs	r3, r3, #8
 800f9aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	1c5a      	adds	r2, r3, #1
 800f9b0:	607a      	str	r2, [r7, #4]
 800f9b2:	683a      	ldr	r2, [r7, #0]
 800f9b4:	b2d2      	uxtb	r2, r2
 800f9b6:	701a      	strb	r2, [r3, #0]
}
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00d      	beq.n	800f9fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	1c53      	adds	r3, r2, #1
 800f9e2:	613b      	str	r3, [r7, #16]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	1c59      	adds	r1, r3, #1
 800f9e8:	6179      	str	r1, [r7, #20]
 800f9ea:	7812      	ldrb	r2, [r2, #0]
 800f9ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	607b      	str	r3, [r7, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1f1      	bne.n	800f9de <mem_cpy+0x1a>
	}
}
 800f9fa:	bf00      	nop
 800f9fc:	371c      	adds	r7, #28
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fa06:	b480      	push	{r7}
 800fa08:	b087      	sub	sp, #28
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	617a      	str	r2, [r7, #20]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	b2d2      	uxtb	r2, r2
 800fa20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	607b      	str	r3, [r7, #4]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1f3      	bne.n	800fa16 <mem_set+0x10>
}
 800fa2e:	bf00      	nop
 800fa30:	bf00      	nop
 800fa32:	371c      	adds	r7, #28
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fa3c:	b480      	push	{r7}
 800fa3e:	b089      	sub	sp, #36	; 0x24
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	61fb      	str	r3, [r7, #28]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fa50:	2300      	movs	r3, #0
 800fa52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	61fa      	str	r2, [r7, #28]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	61ba      	str	r2, [r7, #24]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	1acb      	subs	r3, r1, r3
 800fa68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	607b      	str	r3, [r7, #4]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d002      	beq.n	800fa7c <mem_cmp+0x40>
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d0eb      	beq.n	800fa54 <mem_cmp+0x18>

	return r;
 800fa7c:	697b      	ldr	r3, [r7, #20]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3724      	adds	r7, #36	; 0x24
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa94:	e002      	b.n	800fa9c <chk_chr+0x12>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	607b      	str	r3, [r7, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d005      	beq.n	800fab0 <chk_chr+0x26>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	4293      	cmp	r3, r2
 800faae:	d1f2      	bne.n	800fa96 <chk_chr+0xc>
	return *str;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	781b      	ldrb	r3, [r3, #0]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800faca:	2300      	movs	r3, #0
 800facc:	60bb      	str	r3, [r7, #8]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	60fb      	str	r3, [r7, #12]
 800fad2:	e029      	b.n	800fb28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fad4:	4a27      	ldr	r2, [pc, #156]	; (800fb74 <chk_lock+0xb4>)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	011b      	lsls	r3, r3, #4
 800fada:	4413      	add	r3, r2
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d01d      	beq.n	800fb1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fae2:	4a24      	ldr	r2, [pc, #144]	; (800fb74 <chk_lock+0xb4>)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	011b      	lsls	r3, r3, #4
 800fae8:	4413      	add	r3, r2
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d116      	bne.n	800fb22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800faf4:	4a1f      	ldr	r2, [pc, #124]	; (800fb74 <chk_lock+0xb4>)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	011b      	lsls	r3, r3, #4
 800fafa:	4413      	add	r3, r2
 800fafc:	3304      	adds	r3, #4
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d10c      	bne.n	800fb22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb08:	4a1a      	ldr	r2, [pc, #104]	; (800fb74 <chk_lock+0xb4>)
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	011b      	lsls	r3, r3, #4
 800fb0e:	4413      	add	r3, r2
 800fb10:	3308      	adds	r3, #8
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d102      	bne.n	800fb22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb1c:	e007      	b.n	800fb2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3301      	adds	r3, #1
 800fb26:	60fb      	str	r3, [r7, #12]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d9d2      	bls.n	800fad4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2b02      	cmp	r3, #2
 800fb32:	d109      	bne.n	800fb48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d102      	bne.n	800fb40 <chk_lock+0x80>
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	d101      	bne.n	800fb44 <chk_lock+0x84>
 800fb40:	2300      	movs	r3, #0
 800fb42:	e010      	b.n	800fb66 <chk_lock+0xa6>
 800fb44:	2312      	movs	r3, #18
 800fb46:	e00e      	b.n	800fb66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d108      	bne.n	800fb60 <chk_lock+0xa0>
 800fb4e:	4a09      	ldr	r2, [pc, #36]	; (800fb74 <chk_lock+0xb4>)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	4413      	add	r3, r2
 800fb56:	330c      	adds	r3, #12
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb5e:	d101      	bne.n	800fb64 <chk_lock+0xa4>
 800fb60:	2310      	movs	r3, #16
 800fb62:	e000      	b.n	800fb66 <chk_lock+0xa6>
 800fb64:	2300      	movs	r3, #0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	20005da4 	.word	0x20005da4

0800fb78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	607b      	str	r3, [r7, #4]
 800fb82:	e002      	b.n	800fb8a <enq_lock+0x12>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	3301      	adds	r3, #1
 800fb88:	607b      	str	r3, [r7, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d806      	bhi.n	800fb9e <enq_lock+0x26>
 800fb90:	4a09      	ldr	r2, [pc, #36]	; (800fbb8 <enq_lock+0x40>)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	011b      	lsls	r3, r3, #4
 800fb96:	4413      	add	r3, r2
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1f2      	bne.n	800fb84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	bf14      	ite	ne
 800fba4:	2301      	movne	r3, #1
 800fba6:	2300      	moveq	r3, #0
 800fba8:	b2db      	uxtb	r3, r3
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	370c      	adds	r7, #12
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20005da4 	.word	0x20005da4

0800fbbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b085      	sub	sp, #20
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60fb      	str	r3, [r7, #12]
 800fbca:	e01f      	b.n	800fc0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fbcc:	4a41      	ldr	r2, [pc, #260]	; (800fcd4 <inc_lock+0x118>)
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	4413      	add	r3, r2
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d113      	bne.n	800fc06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fbde:	4a3d      	ldr	r2, [pc, #244]	; (800fcd4 <inc_lock+0x118>)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	011b      	lsls	r3, r3, #4
 800fbe4:	4413      	add	r3, r2
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d109      	bne.n	800fc06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fbf2:	4a38      	ldr	r2, [pc, #224]	; (800fcd4 <inc_lock+0x118>)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	011b      	lsls	r3, r3, #4
 800fbf8:	4413      	add	r3, r2
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d006      	beq.n	800fc14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d9dc      	bls.n	800fbcc <inc_lock+0x10>
 800fc12:	e000      	b.n	800fc16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fc14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d132      	bne.n	800fc82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	60fb      	str	r3, [r7, #12]
 800fc20:	e002      	b.n	800fc28 <inc_lock+0x6c>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	3301      	adds	r3, #1
 800fc26:	60fb      	str	r3, [r7, #12]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d806      	bhi.n	800fc3c <inc_lock+0x80>
 800fc2e:	4a29      	ldr	r2, [pc, #164]	; (800fcd4 <inc_lock+0x118>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	4413      	add	r3, r2
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1f2      	bne.n	800fc22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2b02      	cmp	r3, #2
 800fc40:	d101      	bne.n	800fc46 <inc_lock+0x8a>
 800fc42:	2300      	movs	r3, #0
 800fc44:	e040      	b.n	800fcc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	4922      	ldr	r1, [pc, #136]	; (800fcd4 <inc_lock+0x118>)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	440b      	add	r3, r1
 800fc52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689a      	ldr	r2, [r3, #8]
 800fc58:	491e      	ldr	r1, [pc, #120]	; (800fcd4 <inc_lock+0x118>)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	011b      	lsls	r3, r3, #4
 800fc5e:	440b      	add	r3, r1
 800fc60:	3304      	adds	r3, #4
 800fc62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	695a      	ldr	r2, [r3, #20]
 800fc68:	491a      	ldr	r1, [pc, #104]	; (800fcd4 <inc_lock+0x118>)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	011b      	lsls	r3, r3, #4
 800fc6e:	440b      	add	r3, r1
 800fc70:	3308      	adds	r3, #8
 800fc72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc74:	4a17      	ldr	r2, [pc, #92]	; (800fcd4 <inc_lock+0x118>)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	4413      	add	r3, r2
 800fc7c:	330c      	adds	r3, #12
 800fc7e:	2200      	movs	r2, #0
 800fc80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d009      	beq.n	800fc9c <inc_lock+0xe0>
 800fc88:	4a12      	ldr	r2, [pc, #72]	; (800fcd4 <inc_lock+0x118>)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	4413      	add	r3, r2
 800fc90:	330c      	adds	r3, #12
 800fc92:	881b      	ldrh	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <inc_lock+0xe0>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e015      	b.n	800fcc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d108      	bne.n	800fcb4 <inc_lock+0xf8>
 800fca2:	4a0c      	ldr	r2, [pc, #48]	; (800fcd4 <inc_lock+0x118>)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	011b      	lsls	r3, r3, #4
 800fca8:	4413      	add	r3, r2
 800fcaa:	330c      	adds	r3, #12
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	e001      	b.n	800fcb8 <inc_lock+0xfc>
 800fcb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcb8:	4906      	ldr	r1, [pc, #24]	; (800fcd4 <inc_lock+0x118>)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	011b      	lsls	r3, r3, #4
 800fcbe:	440b      	add	r3, r1
 800fcc0:	330c      	adds	r3, #12
 800fcc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	3301      	adds	r3, #1
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr
 800fcd4:	20005da4 	.word	0x20005da4

0800fcd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	3b01      	subs	r3, #1
 800fce4:	607b      	str	r3, [r7, #4]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d825      	bhi.n	800fd38 <dec_lock+0x60>
		n = Files[i].ctr;
 800fcec:	4a17      	ldr	r2, [pc, #92]	; (800fd4c <dec_lock+0x74>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	011b      	lsls	r3, r3, #4
 800fcf2:	4413      	add	r3, r2
 800fcf4:	330c      	adds	r3, #12
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fcfa:	89fb      	ldrh	r3, [r7, #14]
 800fcfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd00:	d101      	bne.n	800fd06 <dec_lock+0x2e>
 800fd02:	2300      	movs	r3, #0
 800fd04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fd06:	89fb      	ldrh	r3, [r7, #14]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <dec_lock+0x3a>
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fd12:	4a0e      	ldr	r2, [pc, #56]	; (800fd4c <dec_lock+0x74>)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	011b      	lsls	r3, r3, #4
 800fd18:	4413      	add	r3, r2
 800fd1a:	330c      	adds	r3, #12
 800fd1c:	89fa      	ldrh	r2, [r7, #14]
 800fd1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd20:	89fb      	ldrh	r3, [r7, #14]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d105      	bne.n	800fd32 <dec_lock+0x5a>
 800fd26:	4a09      	ldr	r2, [pc, #36]	; (800fd4c <dec_lock+0x74>)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	011b      	lsls	r3, r3, #4
 800fd2c:	4413      	add	r3, r2
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd32:	2300      	movs	r3, #0
 800fd34:	737b      	strb	r3, [r7, #13]
 800fd36:	e001      	b.n	800fd3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fd38:	2302      	movs	r3, #2
 800fd3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fd3c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	20005da4 	.word	0x20005da4

0800fd50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fd58:	2300      	movs	r3, #0
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	e010      	b.n	800fd80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd5e:	4a0d      	ldr	r2, [pc, #52]	; (800fd94 <clear_lock+0x44>)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	4413      	add	r3, r2
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d105      	bne.n	800fd7a <clear_lock+0x2a>
 800fd6e:	4a09      	ldr	r2, [pc, #36]	; (800fd94 <clear_lock+0x44>)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	4413      	add	r3, r2
 800fd76:	2200      	movs	r2, #0
 800fd78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d9eb      	bls.n	800fd5e <clear_lock+0xe>
	}
}
 800fd86:	bf00      	nop
 800fd88:	bf00      	nop
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	20005da4 	.word	0x20005da4

0800fd98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fda0:	2300      	movs	r3, #0
 800fda2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	78db      	ldrb	r3, [r3, #3]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d034      	beq.n	800fe16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	7858      	ldrb	r0, [r3, #1]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	f7ff fd40 	bl	800f844 <disk_write>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	73fb      	strb	r3, [r7, #15]
 800fdce:	e022      	b.n	800fe16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdda:	697a      	ldr	r2, [r7, #20]
 800fddc:	1ad2      	subs	r2, r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	69db      	ldr	r3, [r3, #28]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d217      	bcs.n	800fe16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	789b      	ldrb	r3, [r3, #2]
 800fdea:	613b      	str	r3, [r7, #16]
 800fdec:	e010      	b.n	800fe10 <sync_window+0x78>
					wsect += fs->fsize;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	69db      	ldr	r3, [r3, #28]
 800fdf2:	697a      	ldr	r2, [r7, #20]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7858      	ldrb	r0, [r3, #1]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe02:	2301      	movs	r3, #1
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	f7ff fd1d 	bl	800f844 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	613b      	str	r3, [r7, #16]
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d8eb      	bhi.n	800fdee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe32:	683a      	ldr	r2, [r7, #0]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d01b      	beq.n	800fe70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff ffad 	bl	800fd98 <sync_window>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d113      	bne.n	800fe70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	7858      	ldrb	r0, [r3, #1]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe52:	2301      	movs	r3, #1
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	f7ff fcd5 	bl	800f804 <disk_read>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295
 800fe64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fe66:	2301      	movs	r3, #1
 800fe68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fe70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
	...

0800fe7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7ff ff87 	bl	800fd98 <sync_window>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d159      	bne.n	800ff48 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	d149      	bne.n	800ff30 <sync_fs+0xb4>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	791b      	ldrb	r3, [r3, #4]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d145      	bne.n	800ff30 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	899b      	ldrh	r3, [r3, #12]
 800feae:	461a      	mov	r2, r3
 800feb0:	2100      	movs	r1, #0
 800feb2:	f7ff fda8 	bl	800fa06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	3334      	adds	r3, #52	; 0x34
 800feba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800febe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7ff fd37 	bl	800f936 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	3334      	adds	r3, #52	; 0x34
 800fecc:	4921      	ldr	r1, [pc, #132]	; (800ff54 <sync_fs+0xd8>)
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff fd4c 	bl	800f96c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3334      	adds	r3, #52	; 0x34
 800fed8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fedc:	491e      	ldr	r1, [pc, #120]	; (800ff58 <sync_fs+0xdc>)
 800fede:	4618      	mov	r0, r3
 800fee0:	f7ff fd44 	bl	800f96c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	3334      	adds	r3, #52	; 0x34
 800fee8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	695b      	ldr	r3, [r3, #20]
 800fef0:	4619      	mov	r1, r3
 800fef2:	4610      	mov	r0, r2
 800fef4:	f7ff fd3a 	bl	800f96c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	3334      	adds	r3, #52	; 0x34
 800fefc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	4619      	mov	r1, r3
 800ff06:	4610      	mov	r0, r2
 800ff08:	f7ff fd30 	bl	800f96c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a1b      	ldr	r3, [r3, #32]
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	7858      	ldrb	r0, [r3, #1]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff24:	2301      	movs	r3, #1
 800ff26:	f7ff fc8d 	bl	800f844 <disk_write>
			fs->fsi_flag = 0;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	785b      	ldrb	r3, [r3, #1]
 800ff34:	2200      	movs	r2, #0
 800ff36:	2100      	movs	r1, #0
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff fca3 	bl	800f884 <disk_ioctl>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d001      	beq.n	800ff48 <sync_fs+0xcc>
 800ff44:	2301      	movs	r3, #1
 800ff46:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	41615252 	.word	0x41615252
 800ff58:	61417272 	.word	0x61417272

0800ff5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	3b02      	subs	r3, #2
 800ff6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	699b      	ldr	r3, [r3, #24]
 800ff70:	3b02      	subs	r3, #2
 800ff72:	683a      	ldr	r2, [r7, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d301      	bcc.n	800ff7c <clust2sect+0x20>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	e008      	b.n	800ff8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	895b      	ldrh	r3, [r3, #10]
 800ff80:	461a      	mov	r2, r3
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	fb03 f202 	mul.w	r2, r3, r2
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8c:	4413      	add	r3, r2
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b086      	sub	sp, #24
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d904      	bls.n	800ffba <get_fat+0x20>
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d302      	bcc.n	800ffc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ffba:	2301      	movs	r3, #1
 800ffbc:	617b      	str	r3, [r7, #20]
 800ffbe:	e0bb      	b.n	8010138 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ffc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	f000 8083 	beq.w	80100d6 <get_fat+0x13c>
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	f300 80a7 	bgt.w	8010124 <get_fat+0x18a>
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d002      	beq.n	800ffe0 <get_fat+0x46>
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d056      	beq.n	801008c <get_fat+0xf2>
 800ffde:	e0a1      	b.n	8010124 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	60fb      	str	r3, [r7, #12]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	085b      	lsrs	r3, r3, #1
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	4413      	add	r3, r2
 800ffec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	899b      	ldrh	r3, [r3, #12]
 800fff6:	4619      	mov	r1, r3
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fffe:	4413      	add	r3, r2
 8010000:	4619      	mov	r1, r3
 8010002:	6938      	ldr	r0, [r7, #16]
 8010004:	f7ff ff0c 	bl	800fe20 <move_window>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	f040 808d 	bne.w	801012a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	60fa      	str	r2, [r7, #12]
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	8992      	ldrh	r2, [r2, #12]
 801001a:	fbb3 f1f2 	udiv	r1, r3, r2
 801001e:	fb01 f202 	mul.w	r2, r1, r2
 8010022:	1a9b      	subs	r3, r3, r2
 8010024:	693a      	ldr	r2, [r7, #16]
 8010026:	4413      	add	r3, r2
 8010028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801002c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	899b      	ldrh	r3, [r3, #12]
 8010036:	4619      	mov	r1, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	fbb3 f3f1 	udiv	r3, r3, r1
 801003e:	4413      	add	r3, r2
 8010040:	4619      	mov	r1, r3
 8010042:	6938      	ldr	r0, [r7, #16]
 8010044:	f7ff feec 	bl	800fe20 <move_window>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d16f      	bne.n	801012e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	899b      	ldrh	r3, [r3, #12]
 8010052:	461a      	mov	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	fbb3 f1f2 	udiv	r1, r3, r2
 801005a:	fb01 f202 	mul.w	r2, r1, r2
 801005e:	1a9b      	subs	r3, r3, r2
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	4413      	add	r3, r2
 8010064:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010068:	021b      	lsls	r3, r3, #8
 801006a:	461a      	mov	r2, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	4313      	orrs	r3, r2
 8010070:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	f003 0301 	and.w	r3, r3, #1
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <get_fat+0xe8>
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	091b      	lsrs	r3, r3, #4
 8010080:	e002      	b.n	8010088 <get_fat+0xee>
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010088:	617b      	str	r3, [r7, #20]
			break;
 801008a:	e055      	b.n	8010138 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	899b      	ldrh	r3, [r3, #12]
 8010094:	085b      	lsrs	r3, r3, #1
 8010096:	b29b      	uxth	r3, r3
 8010098:	4619      	mov	r1, r3
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	fbb3 f3f1 	udiv	r3, r3, r1
 80100a0:	4413      	add	r3, r2
 80100a2:	4619      	mov	r1, r3
 80100a4:	6938      	ldr	r0, [r7, #16]
 80100a6:	f7ff febb 	bl	800fe20 <move_window>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d140      	bne.n	8010132 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	005b      	lsls	r3, r3, #1
 80100ba:	693a      	ldr	r2, [r7, #16]
 80100bc:	8992      	ldrh	r2, [r2, #12]
 80100be:	fbb3 f0f2 	udiv	r0, r3, r2
 80100c2:	fb00 f202 	mul.w	r2, r0, r2
 80100c6:	1a9b      	subs	r3, r3, r2
 80100c8:	440b      	add	r3, r1
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fbf8 	bl	800f8c0 <ld_word>
 80100d0:	4603      	mov	r3, r0
 80100d2:	617b      	str	r3, [r7, #20]
			break;
 80100d4:	e030      	b.n	8010138 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	899b      	ldrh	r3, [r3, #12]
 80100de:	089b      	lsrs	r3, r3, #2
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	4619      	mov	r1, r3
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80100ea:	4413      	add	r3, r2
 80100ec:	4619      	mov	r1, r3
 80100ee:	6938      	ldr	r0, [r7, #16]
 80100f0:	f7ff fe96 	bl	800fe20 <move_window>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d11d      	bne.n	8010136 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	693a      	ldr	r2, [r7, #16]
 8010106:	8992      	ldrh	r2, [r2, #12]
 8010108:	fbb3 f0f2 	udiv	r0, r3, r2
 801010c:	fb00 f202 	mul.w	r2, r0, r2
 8010110:	1a9b      	subs	r3, r3, r2
 8010112:	440b      	add	r3, r1
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fbeb 	bl	800f8f0 <ld_dword>
 801011a:	4603      	mov	r3, r0
 801011c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010120:	617b      	str	r3, [r7, #20]
			break;
 8010122:	e009      	b.n	8010138 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010124:	2301      	movs	r3, #1
 8010126:	617b      	str	r3, [r7, #20]
 8010128:	e006      	b.n	8010138 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801012a:	bf00      	nop
 801012c:	e004      	b.n	8010138 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801012e:	bf00      	nop
 8010130:	e002      	b.n	8010138 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010132:	bf00      	nop
 8010134:	e000      	b.n	8010138 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010136:	bf00      	nop
		}
	}

	return val;
 8010138:	697b      	ldr	r3, [r7, #20]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010142:	b590      	push	{r4, r7, lr}
 8010144:	b089      	sub	sp, #36	; 0x24
 8010146:	af00      	add	r7, sp, #0
 8010148:	60f8      	str	r0, [r7, #12]
 801014a:	60b9      	str	r1, [r7, #8]
 801014c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801014e:	2302      	movs	r3, #2
 8010150:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b01      	cmp	r3, #1
 8010156:	f240 8102 	bls.w	801035e <put_fat+0x21c>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	429a      	cmp	r2, r3
 8010162:	f080 80fc 	bcs.w	801035e <put_fat+0x21c>
		switch (fs->fs_type) {
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	2b03      	cmp	r3, #3
 801016c:	f000 80b6 	beq.w	80102dc <put_fat+0x19a>
 8010170:	2b03      	cmp	r3, #3
 8010172:	f300 80fd 	bgt.w	8010370 <put_fat+0x22e>
 8010176:	2b01      	cmp	r3, #1
 8010178:	d003      	beq.n	8010182 <put_fat+0x40>
 801017a:	2b02      	cmp	r3, #2
 801017c:	f000 8083 	beq.w	8010286 <put_fat+0x144>
 8010180:	e0f6      	b.n	8010370 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	61bb      	str	r3, [r7, #24]
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	085b      	lsrs	r3, r3, #1
 801018a:	69ba      	ldr	r2, [r7, #24]
 801018c:	4413      	add	r3, r2
 801018e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	899b      	ldrh	r3, [r3, #12]
 8010198:	4619      	mov	r1, r3
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	fbb3 f3f1 	udiv	r3, r3, r1
 80101a0:	4413      	add	r3, r2
 80101a2:	4619      	mov	r1, r3
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f7ff fe3b 	bl	800fe20 <move_window>
 80101aa:	4603      	mov	r3, r0
 80101ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101ae:	7ffb      	ldrb	r3, [r7, #31]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f040 80d6 	bne.w	8010362 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	61ba      	str	r2, [r7, #24]
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	8992      	ldrh	r2, [r2, #12]
 80101c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80101ca:	fb00 f202 	mul.w	r2, r0, r2
 80101ce:	1a9b      	subs	r3, r3, r2
 80101d0:	440b      	add	r3, r1
 80101d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	f003 0301 	and.w	r3, r3, #1
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00d      	beq.n	80101fa <put_fat+0xb8>
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	b25b      	sxtb	r3, r3
 80101e4:	f003 030f 	and.w	r3, r3, #15
 80101e8:	b25a      	sxtb	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	011b      	lsls	r3, r3, #4
 80101f0:	b25b      	sxtb	r3, r3
 80101f2:	4313      	orrs	r3, r2
 80101f4:	b25b      	sxtb	r3, r3
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	e001      	b.n	80101fe <put_fat+0xbc>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	697a      	ldr	r2, [r7, #20]
 8010200:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2201      	movs	r2, #1
 8010206:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	899b      	ldrh	r3, [r3, #12]
 8010210:	4619      	mov	r1, r3
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	fbb3 f3f1 	udiv	r3, r3, r1
 8010218:	4413      	add	r3, r2
 801021a:	4619      	mov	r1, r3
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f7ff fdff 	bl	800fe20 <move_window>
 8010222:	4603      	mov	r3, r0
 8010224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010226:	7ffb      	ldrb	r3, [r7, #31]
 8010228:	2b00      	cmp	r3, #0
 801022a:	f040 809c 	bne.w	8010366 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	899b      	ldrh	r3, [r3, #12]
 8010238:	461a      	mov	r2, r3
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010240:	fb00 f202 	mul.w	r2, r0, r2
 8010244:	1a9b      	subs	r3, r3, r2
 8010246:	440b      	add	r3, r1
 8010248:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	d003      	beq.n	801025c <put_fat+0x11a>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	091b      	lsrs	r3, r3, #4
 8010258:	b2db      	uxtb	r3, r3
 801025a:	e00e      	b.n	801027a <put_fat+0x138>
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	b25b      	sxtb	r3, r3
 8010262:	f023 030f 	bic.w	r3, r3, #15
 8010266:	b25a      	sxtb	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	0a1b      	lsrs	r3, r3, #8
 801026c:	b25b      	sxtb	r3, r3
 801026e:	f003 030f 	and.w	r3, r3, #15
 8010272:	b25b      	sxtb	r3, r3
 8010274:	4313      	orrs	r3, r2
 8010276:	b25b      	sxtb	r3, r3
 8010278:	b2db      	uxtb	r3, r3
 801027a:	697a      	ldr	r2, [r7, #20]
 801027c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2201      	movs	r2, #1
 8010282:	70da      	strb	r2, [r3, #3]
			break;
 8010284:	e074      	b.n	8010370 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	899b      	ldrh	r3, [r3, #12]
 801028e:	085b      	lsrs	r3, r3, #1
 8010290:	b29b      	uxth	r3, r3
 8010292:	4619      	mov	r1, r3
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	fbb3 f3f1 	udiv	r3, r3, r1
 801029a:	4413      	add	r3, r2
 801029c:	4619      	mov	r1, r3
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f7ff fdbe 	bl	800fe20 <move_window>
 80102a4:	4603      	mov	r3, r0
 80102a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102a8:	7ffb      	ldrb	r3, [r7, #31]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d15d      	bne.n	801036a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	8992      	ldrh	r2, [r2, #12]
 80102bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80102c0:	fb00 f202 	mul.w	r2, r0, r2
 80102c4:	1a9b      	subs	r3, r3, r2
 80102c6:	440b      	add	r3, r1
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	b292      	uxth	r2, r2
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff fb31 	bl	800f936 <st_word>
			fs->wflag = 1;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2201      	movs	r2, #1
 80102d8:	70da      	strb	r2, [r3, #3]
			break;
 80102da:	e049      	b.n	8010370 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	899b      	ldrh	r3, [r3, #12]
 80102e4:	089b      	lsrs	r3, r3, #2
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	4619      	mov	r1, r3
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80102f0:	4413      	add	r3, r2
 80102f2:	4619      	mov	r1, r3
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f7ff fd93 	bl	800fe20 <move_window>
 80102fa:	4603      	mov	r3, r0
 80102fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102fe:	7ffb      	ldrb	r3, [r7, #31]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d134      	bne.n	801036e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	8992      	ldrh	r2, [r2, #12]
 8010318:	fbb3 f0f2 	udiv	r0, r3, r2
 801031c:	fb00 f202 	mul.w	r2, r0, r2
 8010320:	1a9b      	subs	r3, r3, r2
 8010322:	440b      	add	r3, r1
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff fae3 	bl	800f8f0 <ld_dword>
 801032a:	4603      	mov	r3, r0
 801032c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010330:	4323      	orrs	r3, r4
 8010332:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	8992      	ldrh	r2, [r2, #12]
 8010342:	fbb3 f0f2 	udiv	r0, r3, r2
 8010346:	fb00 f202 	mul.w	r2, r0, r2
 801034a:	1a9b      	subs	r3, r3, r2
 801034c:	440b      	add	r3, r1
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff fb0b 	bl	800f96c <st_dword>
			fs->wflag = 1;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2201      	movs	r2, #1
 801035a:	70da      	strb	r2, [r3, #3]
			break;
 801035c:	e008      	b.n	8010370 <put_fat+0x22e>
		}
	}
 801035e:	bf00      	nop
 8010360:	e006      	b.n	8010370 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010362:	bf00      	nop
 8010364:	e004      	b.n	8010370 <put_fat+0x22e>
			if (res != FR_OK) break;
 8010366:	bf00      	nop
 8010368:	e002      	b.n	8010370 <put_fat+0x22e>
			if (res != FR_OK) break;
 801036a:	bf00      	nop
 801036c:	e000      	b.n	8010370 <put_fat+0x22e>
			if (res != FR_OK) break;
 801036e:	bf00      	nop
	return res;
 8010370:	7ffb      	ldrb	r3, [r7, #31]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3724      	adds	r7, #36	; 0x24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd90      	pop	{r4, r7, pc}

0801037a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b088      	sub	sp, #32
 801037e:	af00      	add	r7, sp, #0
 8010380:	60f8      	str	r0, [r7, #12]
 8010382:	60b9      	str	r1, [r7, #8]
 8010384:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010386:	2300      	movs	r3, #0
 8010388:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d904      	bls.n	80103a0 <remove_chain+0x26>
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	68ba      	ldr	r2, [r7, #8]
 801039c:	429a      	cmp	r2, r3
 801039e:	d301      	bcc.n	80103a4 <remove_chain+0x2a>
 80103a0:	2302      	movs	r3, #2
 80103a2:	e04b      	b.n	801043c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00c      	beq.n	80103c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80103aa:	f04f 32ff 	mov.w	r2, #4294967295
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	69b8      	ldr	r0, [r7, #24]
 80103b2:	f7ff fec6 	bl	8010142 <put_fat>
 80103b6:	4603      	mov	r3, r0
 80103b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80103ba:	7ffb      	ldrb	r3, [r7, #31]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d001      	beq.n	80103c4 <remove_chain+0x4a>
 80103c0:	7ffb      	ldrb	r3, [r7, #31]
 80103c2:	e03b      	b.n	801043c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80103c4:	68b9      	ldr	r1, [r7, #8]
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f7ff fde7 	bl	800ff9a <get_fat>
 80103cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d031      	beq.n	8010438 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d101      	bne.n	80103de <remove_chain+0x64>
 80103da:	2302      	movs	r3, #2
 80103dc:	e02e      	b.n	801043c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e4:	d101      	bne.n	80103ea <remove_chain+0x70>
 80103e6:	2301      	movs	r3, #1
 80103e8:	e028      	b.n	801043c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80103ea:	2200      	movs	r2, #0
 80103ec:	68b9      	ldr	r1, [r7, #8]
 80103ee:	69b8      	ldr	r0, [r7, #24]
 80103f0:	f7ff fea7 	bl	8010142 <put_fat>
 80103f4:	4603      	mov	r3, r0
 80103f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80103f8:	7ffb      	ldrb	r3, [r7, #31]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <remove_chain+0x88>
 80103fe:	7ffb      	ldrb	r3, [r7, #31]
 8010400:	e01c      	b.n	801043c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	695a      	ldr	r2, [r3, #20]
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	3b02      	subs	r3, #2
 801040c:	429a      	cmp	r2, r3
 801040e:	d20b      	bcs.n	8010428 <remove_chain+0xae>
			fs->free_clst++;
 8010410:	69bb      	ldr	r3, [r7, #24]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	1c5a      	adds	r2, r3, #1
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	791b      	ldrb	r3, [r3, #4]
 801041e:	f043 0301 	orr.w	r3, r3, #1
 8010422:	b2da      	uxtb	r2, r3
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	699b      	ldr	r3, [r3, #24]
 8010430:	68ba      	ldr	r2, [r7, #8]
 8010432:	429a      	cmp	r2, r3
 8010434:	d3c6      	bcc.n	80103c4 <remove_chain+0x4a>
 8010436:	e000      	b.n	801043a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010438:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d10d      	bne.n	8010476 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d004      	beq.n	8010470 <create_chain+0x2c>
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d31b      	bcc.n	80104a8 <create_chain+0x64>
 8010470:	2301      	movs	r3, #1
 8010472:	61bb      	str	r3, [r7, #24]
 8010474:	e018      	b.n	80104a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff fd8e 	bl	800ff9a <get_fat>
 801047e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d801      	bhi.n	801048a <create_chain+0x46>
 8010486:	2301      	movs	r3, #1
 8010488:	e070      	b.n	801056c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010490:	d101      	bne.n	8010496 <create_chain+0x52>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	e06a      	b.n	801056c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	68fa      	ldr	r2, [r7, #12]
 801049c:	429a      	cmp	r2, r3
 801049e:	d201      	bcs.n	80104a4 <create_chain+0x60>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	e063      	b.n	801056c <create_chain+0x128>
		scl = clst;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	3301      	adds	r3, #1
 80104b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	69fa      	ldr	r2, [r7, #28]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d307      	bcc.n	80104cc <create_chain+0x88>
				ncl = 2;
 80104bc:	2302      	movs	r3, #2
 80104be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80104c0:	69fa      	ldr	r2, [r7, #28]
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d901      	bls.n	80104cc <create_chain+0x88>
 80104c8:	2300      	movs	r3, #0
 80104ca:	e04f      	b.n	801056c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80104cc:	69f9      	ldr	r1, [r7, #28]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff fd63 	bl	800ff9a <get_fat>
 80104d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00e      	beq.n	80104fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d003      	beq.n	80104ea <create_chain+0xa6>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e8:	d101      	bne.n	80104ee <create_chain+0xaa>
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	e03e      	b.n	801056c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80104ee:	69fa      	ldr	r2, [r7, #28]
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d1da      	bne.n	80104ac <create_chain+0x68>
 80104f6:	2300      	movs	r3, #0
 80104f8:	e038      	b.n	801056c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80104fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80104fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010500:	69f9      	ldr	r1, [r7, #28]
 8010502:	6938      	ldr	r0, [r7, #16]
 8010504:	f7ff fe1d 	bl	8010142 <put_fat>
 8010508:	4603      	mov	r3, r0
 801050a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801050c:	7dfb      	ldrb	r3, [r7, #23]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d109      	bne.n	8010526 <create_chain+0xe2>
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d006      	beq.n	8010526 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010518:	69fa      	ldr	r2, [r7, #28]
 801051a:	6839      	ldr	r1, [r7, #0]
 801051c:	6938      	ldr	r0, [r7, #16]
 801051e:	f7ff fe10 	bl	8010142 <put_fat>
 8010522:	4603      	mov	r3, r0
 8010524:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010526:	7dfb      	ldrb	r3, [r7, #23]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d116      	bne.n	801055a <create_chain+0x116>
		fs->last_clst = ncl;
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	69fa      	ldr	r2, [r7, #28]
 8010530:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	695a      	ldr	r2, [r3, #20]
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	3b02      	subs	r3, #2
 801053c:	429a      	cmp	r2, r3
 801053e:	d804      	bhi.n	801054a <create_chain+0x106>
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	695b      	ldr	r3, [r3, #20]
 8010544:	1e5a      	subs	r2, r3, #1
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	791b      	ldrb	r3, [r3, #4]
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	b2da      	uxtb	r2, r3
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	711a      	strb	r2, [r3, #4]
 8010558:	e007      	b.n	801056a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d102      	bne.n	8010566 <create_chain+0x122>
 8010560:	f04f 33ff 	mov.w	r3, #4294967295
 8010564:	e000      	b.n	8010568 <create_chain+0x124>
 8010566:	2301      	movs	r3, #1
 8010568:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801056a:	69fb      	ldr	r3, [r7, #28]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010574:	b480      	push	{r7}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010588:	3304      	adds	r3, #4
 801058a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	899b      	ldrh	r3, [r3, #12]
 8010590:	461a      	mov	r2, r3
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	fbb3 f3f2 	udiv	r3, r3, r2
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	8952      	ldrh	r2, [r2, #10]
 801059c:	fbb3 f3f2 	udiv	r3, r3, r2
 80105a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	1d1a      	adds	r2, r3, #4
 80105a6:	613a      	str	r2, [r7, #16]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <clmt_clust+0x42>
 80105b2:	2300      	movs	r3, #0
 80105b4:	e010      	b.n	80105d8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d307      	bcc.n	80105ce <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80105be:	697a      	ldr	r2, [r7, #20]
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	617b      	str	r3, [r7, #20]
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	3304      	adds	r3, #4
 80105ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105cc:	e7e9      	b.n	80105a2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80105ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	4413      	add	r3, r2
}
 80105d8:	4618      	mov	r0, r3
 80105da:	371c      	adds	r7, #28
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105fa:	d204      	bcs.n	8010606 <dir_sdi+0x22>
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	f003 031f 	and.w	r3, r3, #31
 8010602:	2b00      	cmp	r3, #0
 8010604:	d001      	beq.n	801060a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010606:	2302      	movs	r3, #2
 8010608:	e071      	b.n	80106ee <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d106      	bne.n	801062a <dir_sdi+0x46>
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b02      	cmp	r3, #2
 8010622:	d902      	bls.n	801062a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010628:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10c      	bne.n	801064a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	095b      	lsrs	r3, r3, #5
 8010634:	693a      	ldr	r2, [r7, #16]
 8010636:	8912      	ldrh	r2, [r2, #8]
 8010638:	4293      	cmp	r3, r2
 801063a:	d301      	bcc.n	8010640 <dir_sdi+0x5c>
 801063c:	2302      	movs	r3, #2
 801063e:	e056      	b.n	80106ee <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	61da      	str	r2, [r3, #28]
 8010648:	e02d      	b.n	80106a6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	895b      	ldrh	r3, [r3, #10]
 801064e:	461a      	mov	r2, r3
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	899b      	ldrh	r3, [r3, #12]
 8010654:	fb02 f303 	mul.w	r3, r2, r3
 8010658:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801065a:	e019      	b.n	8010690 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6979      	ldr	r1, [r7, #20]
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff fc9a 	bl	800ff9a <get_fat>
 8010666:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066e:	d101      	bne.n	8010674 <dir_sdi+0x90>
 8010670:	2301      	movs	r3, #1
 8010672:	e03c      	b.n	80106ee <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d904      	bls.n	8010684 <dir_sdi+0xa0>
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	697a      	ldr	r2, [r7, #20]
 8010680:	429a      	cmp	r2, r3
 8010682:	d301      	bcc.n	8010688 <dir_sdi+0xa4>
 8010684:	2302      	movs	r3, #2
 8010686:	e032      	b.n	80106ee <dir_sdi+0x10a>
			ofs -= csz;
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	429a      	cmp	r2, r3
 8010696:	d2e1      	bcs.n	801065c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010698:	6979      	ldr	r1, [r7, #20]
 801069a:	6938      	ldr	r0, [r7, #16]
 801069c:	f7ff fc5e 	bl	800ff5c <clust2sect>
 80106a0:	4602      	mov	r2, r0
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	697a      	ldr	r2, [r7, #20]
 80106aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <dir_sdi+0xd4>
 80106b4:	2302      	movs	r3, #2
 80106b6:	e01a      	b.n	80106ee <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	69da      	ldr	r2, [r3, #28]
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	899b      	ldrh	r3, [r3, #12]
 80106c0:	4619      	mov	r1, r3
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80106c8:	441a      	add	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	899b      	ldrh	r3, [r3, #12]
 80106d8:	461a      	mov	r2, r3
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80106e0:	fb00 f202 	mul.w	r2, r0, r2
 80106e4:	1a9b      	subs	r3, r3, r2
 80106e6:	18ca      	adds	r2, r1, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3718      	adds	r7, #24
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b086      	sub	sp, #24
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	695b      	ldr	r3, [r3, #20]
 801070a:	3320      	adds	r3, #32
 801070c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	69db      	ldr	r3, [r3, #28]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <dir_next+0x28>
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801071c:	d301      	bcc.n	8010722 <dir_next+0x2c>
 801071e:	2304      	movs	r3, #4
 8010720:	e0bb      	b.n	801089a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	899b      	ldrh	r3, [r3, #12]
 8010726:	461a      	mov	r2, r3
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	fbb3 f1f2 	udiv	r1, r3, r2
 801072e:	fb01 f202 	mul.w	r2, r1, r2
 8010732:	1a9b      	subs	r3, r3, r2
 8010734:	2b00      	cmp	r3, #0
 8010736:	f040 809d 	bne.w	8010874 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	69db      	ldr	r3, [r3, #28]
 801073e:	1c5a      	adds	r2, r3, #1
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d10b      	bne.n	8010764 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	095b      	lsrs	r3, r3, #5
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	8912      	ldrh	r2, [r2, #8]
 8010754:	4293      	cmp	r3, r2
 8010756:	f0c0 808d 	bcc.w	8010874 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	61da      	str	r2, [r3, #28]
 8010760:	2304      	movs	r3, #4
 8010762:	e09a      	b.n	801089a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	899b      	ldrh	r3, [r3, #12]
 8010768:	461a      	mov	r2, r3
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	8952      	ldrh	r2, [r2, #10]
 8010774:	3a01      	subs	r2, #1
 8010776:	4013      	ands	r3, r2
 8010778:	2b00      	cmp	r3, #0
 801077a:	d17b      	bne.n	8010874 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	699b      	ldr	r3, [r3, #24]
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7ff fc08 	bl	800ff9a <get_fat>
 801078a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	2b01      	cmp	r3, #1
 8010790:	d801      	bhi.n	8010796 <dir_next+0xa0>
 8010792:	2302      	movs	r3, #2
 8010794:	e081      	b.n	801089a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079c:	d101      	bne.n	80107a2 <dir_next+0xac>
 801079e:	2301      	movs	r3, #1
 80107a0:	e07b      	b.n	801089a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d359      	bcc.n	8010860 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d104      	bne.n	80107bc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	61da      	str	r2, [r3, #28]
 80107b8:	2304      	movs	r3, #4
 80107ba:	e06e      	b.n	801089a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	699b      	ldr	r3, [r3, #24]
 80107c2:	4619      	mov	r1, r3
 80107c4:	4610      	mov	r0, r2
 80107c6:	f7ff fe3d 	bl	8010444 <create_chain>
 80107ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d101      	bne.n	80107d6 <dir_next+0xe0>
 80107d2:	2307      	movs	r3, #7
 80107d4:	e061      	b.n	801089a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d101      	bne.n	80107e0 <dir_next+0xea>
 80107dc:	2302      	movs	r3, #2
 80107de:	e05c      	b.n	801089a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e6:	d101      	bne.n	80107ec <dir_next+0xf6>
 80107e8:	2301      	movs	r3, #1
 80107ea:	e056      	b.n	801089a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff fad3 	bl	800fd98 <sync_window>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <dir_next+0x106>
 80107f8:	2301      	movs	r3, #1
 80107fa:	e04e      	b.n	801089a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	461a      	mov	r2, r3
 8010808:	2100      	movs	r1, #0
 801080a:	f7ff f8fc 	bl	800fa06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801080e:	2300      	movs	r3, #0
 8010810:	613b      	str	r3, [r7, #16]
 8010812:	6979      	ldr	r1, [r7, #20]
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f7ff fba1 	bl	800ff5c <clust2sect>
 801081a:	4602      	mov	r2, r0
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	631a      	str	r2, [r3, #48]	; 0x30
 8010820:	e012      	b.n	8010848 <dir_next+0x152>
						fs->wflag = 1;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2201      	movs	r2, #1
 8010826:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f7ff fab5 	bl	800fd98 <sync_window>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d001      	beq.n	8010838 <dir_next+0x142>
 8010834:	2301      	movs	r3, #1
 8010836:	e030      	b.n	801089a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	3301      	adds	r3, #1
 801083c:	613b      	str	r3, [r7, #16]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010842:	1c5a      	adds	r2, r3, #1
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	631a      	str	r2, [r3, #48]	; 0x30
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	895b      	ldrh	r3, [r3, #10]
 801084c:	461a      	mov	r2, r3
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	4293      	cmp	r3, r2
 8010852:	d3e6      	bcc.n	8010822 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	1ad2      	subs	r2, r2, r3
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010866:	6979      	ldr	r1, [r7, #20]
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7ff fb77 	bl	800ff5c <clust2sect>
 801086e:	4602      	mov	r2, r0
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	899b      	ldrh	r3, [r3, #12]
 8010884:	461a      	mov	r2, r3
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	fbb3 f0f2 	udiv	r0, r3, r2
 801088c:	fb00 f202 	mul.w	r2, r0, r2
 8010890:	1a9b      	subs	r3, r3, r2
 8010892:	18ca      	adds	r2, r1, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3718      	adds	r7, #24
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b086      	sub	sp, #24
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80108b2:	2100      	movs	r1, #0
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff fe95 	bl	80105e4 <dir_sdi>
 80108ba:	4603      	mov	r3, r0
 80108bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d12b      	bne.n	801091c <dir_alloc+0x7a>
		n = 0;
 80108c4:	2300      	movs	r3, #0
 80108c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	69db      	ldr	r3, [r3, #28]
 80108cc:	4619      	mov	r1, r3
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f7ff faa6 	bl	800fe20 <move_window>
 80108d4:	4603      	mov	r3, r0
 80108d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d11d      	bne.n	801091a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2be5      	cmp	r3, #229	; 0xe5
 80108e6:	d004      	beq.n	80108f2 <dir_alloc+0x50>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d107      	bne.n	8010902 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	3301      	adds	r3, #1
 80108f6:	613b      	str	r3, [r7, #16]
 80108f8:	693a      	ldr	r2, [r7, #16]
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d102      	bne.n	8010906 <dir_alloc+0x64>
 8010900:	e00c      	b.n	801091c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010902:	2300      	movs	r3, #0
 8010904:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010906:	2101      	movs	r1, #1
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ff fef4 	bl	80106f6 <dir_next>
 801090e:	4603      	mov	r3, r0
 8010910:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010912:	7dfb      	ldrb	r3, [r7, #23]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d0d7      	beq.n	80108c8 <dir_alloc+0x26>
 8010918:	e000      	b.n	801091c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801091a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801091c:	7dfb      	ldrb	r3, [r7, #23]
 801091e:	2b04      	cmp	r3, #4
 8010920:	d101      	bne.n	8010926 <dir_alloc+0x84>
 8010922:	2307      	movs	r3, #7
 8010924:	75fb      	strb	r3, [r7, #23]
	return res;
 8010926:	7dfb      	ldrb	r3, [r7, #23]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	331a      	adds	r3, #26
 801093e:	4618      	mov	r0, r3
 8010940:	f7fe ffbe 	bl	800f8c0 <ld_word>
 8010944:	4603      	mov	r3, r0
 8010946:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	2b03      	cmp	r3, #3
 801094e:	d109      	bne.n	8010964 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	3314      	adds	r3, #20
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe ffb3 	bl	800f8c0 <ld_word>
 801095a:	4603      	mov	r3, r0
 801095c:	041b      	lsls	r3, r3, #16
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	4313      	orrs	r3, r2
 8010962:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010964:	68fb      	ldr	r3, [r7, #12]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	60f8      	str	r0, [r7, #12]
 8010976:	60b9      	str	r1, [r7, #8]
 8010978:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	331a      	adds	r3, #26
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	b292      	uxth	r2, r2
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f7fe ffd6 	bl	800f936 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2b03      	cmp	r3, #3
 8010990:	d109      	bne.n	80109a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	f103 0214 	add.w	r2, r3, #20
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	0c1b      	lsrs	r3, r3, #16
 801099c:	b29b      	uxth	r3, r3
 801099e:	4619      	mov	r1, r3
 80109a0:	4610      	mov	r0, r2
 80109a2:	f7fe ffc8 	bl	800f936 <st_word>
	}
}
 80109a6:	bf00      	nop
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b086      	sub	sp, #24
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80109b8:	2304      	movs	r3, #4
 80109ba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80109c2:	e03c      	b.n	8010a3e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	4619      	mov	r1, r3
 80109ca:	6938      	ldr	r0, [r7, #16]
 80109cc:	f7ff fa28 	bl	800fe20 <move_window>
 80109d0:	4603      	mov	r3, r0
 80109d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109d4:	7dfb      	ldrb	r3, [r7, #23]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d136      	bne.n	8010a48 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6a1b      	ldr	r3, [r3, #32]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80109e2:	7bfb      	ldrb	r3, [r7, #15]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d102      	bne.n	80109ee <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80109e8:	2304      	movs	r3, #4
 80109ea:	75fb      	strb	r3, [r7, #23]
 80109ec:	e031      	b.n	8010a52 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a1b      	ldr	r3, [r3, #32]
 80109f2:	330b      	adds	r3, #11
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109fa:	73bb      	strb	r3, [r7, #14]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	7bba      	ldrb	r2, [r7, #14]
 8010a00:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
 8010a04:	2be5      	cmp	r3, #229	; 0xe5
 8010a06:	d011      	beq.n	8010a2c <dir_read+0x7e>
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
 8010a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a0c:	d00e      	beq.n	8010a2c <dir_read+0x7e>
 8010a0e:	7bbb      	ldrb	r3, [r7, #14]
 8010a10:	2b0f      	cmp	r3, #15
 8010a12:	d00b      	beq.n	8010a2c <dir_read+0x7e>
 8010a14:	7bbb      	ldrb	r3, [r7, #14]
 8010a16:	f023 0320 	bic.w	r3, r3, #32
 8010a1a:	2b08      	cmp	r3, #8
 8010a1c:	bf0c      	ite	eq
 8010a1e:	2301      	moveq	r3, #1
 8010a20:	2300      	movne	r3, #0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	461a      	mov	r2, r3
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d00f      	beq.n	8010a4c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff fe61 	bl	80106f6 <dir_next>
 8010a34:	4603      	mov	r3, r0
 8010a36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d108      	bne.n	8010a50 <dir_read+0xa2>
	while (dp->sect) {
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	69db      	ldr	r3, [r3, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1be      	bne.n	80109c4 <dir_read+0x16>
 8010a46:	e004      	b.n	8010a52 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010a48:	bf00      	nop
 8010a4a:	e002      	b.n	8010a52 <dir_read+0xa4>
				break;
 8010a4c:	bf00      	nop
 8010a4e:	e000      	b.n	8010a52 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010a50:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010a52:	7dfb      	ldrb	r3, [r7, #23]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d002      	beq.n	8010a5e <dir_read+0xb0>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	61da      	str	r2, [r3, #28]
	return res;
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010a76:	2100      	movs	r1, #0
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff fdb3 	bl	80105e4 <dir_sdi>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d001      	beq.n	8010a8c <dir_find+0x24>
 8010a88:	7dfb      	ldrb	r3, [r7, #23]
 8010a8a:	e03e      	b.n	8010b0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	69db      	ldr	r3, [r3, #28]
 8010a90:	4619      	mov	r1, r3
 8010a92:	6938      	ldr	r0, [r7, #16]
 8010a94:	f7ff f9c4 	bl	800fe20 <move_window>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a9c:	7dfb      	ldrb	r3, [r7, #23]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d12f      	bne.n	8010b02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d102      	bne.n	8010ab6 <dir_find+0x4e>
 8010ab0:	2304      	movs	r3, #4
 8010ab2:	75fb      	strb	r3, [r7, #23]
 8010ab4:	e028      	b.n	8010b08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6a1b      	ldr	r3, [r3, #32]
 8010aba:	330b      	adds	r3, #11
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ac2:	b2da      	uxtb	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a1b      	ldr	r3, [r3, #32]
 8010acc:	330b      	adds	r3, #11
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	f003 0308 	and.w	r3, r3, #8
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10a      	bne.n	8010aee <dir_find+0x86>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6a18      	ldr	r0, [r3, #32]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	3324      	adds	r3, #36	; 0x24
 8010ae0:	220b      	movs	r2, #11
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	f7fe ffaa 	bl	800fa3c <mem_cmp>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010aee:	2100      	movs	r1, #0
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fe00 	bl	80106f6 <dir_next>
 8010af6:	4603      	mov	r3, r0
 8010af8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d0c5      	beq.n	8010a8c <dir_find+0x24>
 8010b00:	e002      	b.n	8010b08 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010b02:	bf00      	nop
 8010b04:	e000      	b.n	8010b08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010b06:	bf00      	nop

	return res;
 8010b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3718      	adds	r7, #24
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010b20:	2101      	movs	r1, #1
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff febd 	bl	80108a2 <dir_alloc>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d11c      	bne.n	8010b6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	69db      	ldr	r3, [r3, #28]
 8010b36:	4619      	mov	r1, r3
 8010b38:	68b8      	ldr	r0, [r7, #8]
 8010b3a:	f7ff f971 	bl	800fe20 <move_window>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d111      	bne.n	8010b6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6a1b      	ldr	r3, [r3, #32]
 8010b4c:	2220      	movs	r2, #32
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fe ff58 	bl	800fa06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a18      	ldr	r0, [r3, #32]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	3324      	adds	r3, #36	; 0x24
 8010b5e:	220b      	movs	r2, #11
 8010b60:	4619      	mov	r1, r3
 8010b62:	f7fe ff2f 	bl	800f9c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b086      	sub	sp, #24
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2200      	movs	r2, #0
 8010b84:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	69db      	ldr	r3, [r3, #28]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d04e      	beq.n	8010c2c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	613b      	str	r3, [r7, #16]
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010b96:	e021      	b.n	8010bdc <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a1a      	ldr	r2, [r3, #32]
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	1c59      	adds	r1, r3, #1
 8010ba0:	6179      	str	r1, [r7, #20]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
 8010baa:	2b20      	cmp	r3, #32
 8010bac:	d100      	bne.n	8010bb0 <get_fileinfo+0x3a>
 8010bae:	e015      	b.n	8010bdc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	2b05      	cmp	r3, #5
 8010bb4:	d101      	bne.n	8010bba <get_fileinfo+0x44>
 8010bb6:	23e5      	movs	r3, #229	; 0xe5
 8010bb8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b09      	cmp	r3, #9
 8010bbe:	d106      	bne.n	8010bce <get_fileinfo+0x58>
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	1c5a      	adds	r2, r3, #1
 8010bc4:	613a      	str	r2, [r7, #16]
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	4413      	add	r3, r2
 8010bca:	222e      	movs	r2, #46	; 0x2e
 8010bcc:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	1c5a      	adds	r2, r3, #1
 8010bd2:	613a      	str	r2, [r7, #16]
 8010bd4:	683a      	ldr	r2, [r7, #0]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	7bfa      	ldrb	r2, [r7, #15]
 8010bda:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	2b0a      	cmp	r3, #10
 8010be0:	d9da      	bls.n	8010b98 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	4413      	add	r3, r2
 8010be8:	3309      	adds	r3, #9
 8010bea:	2200      	movs	r2, #0
 8010bec:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	7ada      	ldrb	r2, [r3, #11]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a1b      	ldr	r3, [r3, #32]
 8010bfc:	331c      	adds	r3, #28
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fe76 	bl	800f8f0 <ld_dword>
 8010c04:	4602      	mov	r2, r0
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a1b      	ldr	r3, [r3, #32]
 8010c0e:	3316      	adds	r3, #22
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe fe6d 	bl	800f8f0 <ld_dword>
 8010c16:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	80da      	strh	r2, [r3, #6]
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	0c1b      	lsrs	r3, r3, #16
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	809a      	strh	r2, [r3, #4]
 8010c2a:	e000      	b.n	8010c2e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010c2c:	bf00      	nop
}
 8010c2e:	3718      	adds	r7, #24
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b088      	sub	sp, #32
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	60fb      	str	r3, [r7, #12]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	3324      	adds	r3, #36	; 0x24
 8010c48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010c4a:	220b      	movs	r2, #11
 8010c4c:	2120      	movs	r1, #32
 8010c4e:	68b8      	ldr	r0, [r7, #8]
 8010c50:	f7fe fed9 	bl	800fa06 <mem_set>
	si = i = 0; ni = 8;
 8010c54:	2300      	movs	r3, #0
 8010c56:	613b      	str	r3, [r7, #16]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	61fb      	str	r3, [r7, #28]
 8010c5c:	2308      	movs	r3, #8
 8010c5e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	61fa      	str	r2, [r7, #28]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	4413      	add	r3, r2
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c6e:	7efb      	ldrb	r3, [r7, #27]
 8010c70:	2b20      	cmp	r3, #32
 8010c72:	d94e      	bls.n	8010d12 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010c74:	7efb      	ldrb	r3, [r7, #27]
 8010c76:	2b2f      	cmp	r3, #47	; 0x2f
 8010c78:	d006      	beq.n	8010c88 <create_name+0x54>
 8010c7a:	7efb      	ldrb	r3, [r7, #27]
 8010c7c:	2b5c      	cmp	r3, #92	; 0x5c
 8010c7e:	d110      	bne.n	8010ca2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010c80:	e002      	b.n	8010c88 <create_name+0x54>
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	3301      	adds	r3, #1
 8010c86:	61fb      	str	r3, [r7, #28]
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	2b2f      	cmp	r3, #47	; 0x2f
 8010c92:	d0f6      	beq.n	8010c82 <create_name+0x4e>
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	69fb      	ldr	r3, [r7, #28]
 8010c98:	4413      	add	r3, r2
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	2b5c      	cmp	r3, #92	; 0x5c
 8010c9e:	d0f0      	beq.n	8010c82 <create_name+0x4e>
			break;
 8010ca0:	e038      	b.n	8010d14 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010ca2:	7efb      	ldrb	r3, [r7, #27]
 8010ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8010ca6:	d003      	beq.n	8010cb0 <create_name+0x7c>
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d30c      	bcc.n	8010cca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2b0b      	cmp	r3, #11
 8010cb4:	d002      	beq.n	8010cbc <create_name+0x88>
 8010cb6:	7efb      	ldrb	r3, [r7, #27]
 8010cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8010cba:	d001      	beq.n	8010cc0 <create_name+0x8c>
 8010cbc:	2306      	movs	r3, #6
 8010cbe:	e044      	b.n	8010d4a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010cc0:	2308      	movs	r3, #8
 8010cc2:	613b      	str	r3, [r7, #16]
 8010cc4:	230b      	movs	r3, #11
 8010cc6:	617b      	str	r3, [r7, #20]
			continue;
 8010cc8:	e022      	b.n	8010d10 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010cca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	da04      	bge.n	8010cdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010cd2:	7efb      	ldrb	r3, [r7, #27]
 8010cd4:	3b80      	subs	r3, #128	; 0x80
 8010cd6:	4a1f      	ldr	r2, [pc, #124]	; (8010d54 <create_name+0x120>)
 8010cd8:	5cd3      	ldrb	r3, [r2, r3]
 8010cda:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010cdc:	7efb      	ldrb	r3, [r7, #27]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	481d      	ldr	r0, [pc, #116]	; (8010d58 <create_name+0x124>)
 8010ce2:	f7fe fed2 	bl	800fa8a <chk_chr>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <create_name+0xbc>
 8010cec:	2306      	movs	r3, #6
 8010cee:	e02c      	b.n	8010d4a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010cf0:	7efb      	ldrb	r3, [r7, #27]
 8010cf2:	2b60      	cmp	r3, #96	; 0x60
 8010cf4:	d905      	bls.n	8010d02 <create_name+0xce>
 8010cf6:	7efb      	ldrb	r3, [r7, #27]
 8010cf8:	2b7a      	cmp	r3, #122	; 0x7a
 8010cfa:	d802      	bhi.n	8010d02 <create_name+0xce>
 8010cfc:	7efb      	ldrb	r3, [r7, #27]
 8010cfe:	3b20      	subs	r3, #32
 8010d00:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	1c5a      	adds	r2, r3, #1
 8010d06:	613a      	str	r2, [r7, #16]
 8010d08:	68ba      	ldr	r2, [r7, #8]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	7efa      	ldrb	r2, [r7, #27]
 8010d0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010d10:	e7a6      	b.n	8010c60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010d12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	441a      	add	r2, r3
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <create_name+0xf4>
 8010d24:	2306      	movs	r3, #6
 8010d26:	e010      	b.n	8010d4a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2be5      	cmp	r3, #229	; 0xe5
 8010d2e:	d102      	bne.n	8010d36 <create_name+0x102>
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2205      	movs	r2, #5
 8010d34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010d36:	7efb      	ldrb	r3, [r7, #27]
 8010d38:	2b20      	cmp	r3, #32
 8010d3a:	d801      	bhi.n	8010d40 <create_name+0x10c>
 8010d3c:	2204      	movs	r2, #4
 8010d3e:	e000      	b.n	8010d42 <create_name+0x10e>
 8010d40:	2200      	movs	r2, #0
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	330b      	adds	r3, #11
 8010d46:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010d48:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3720      	adds	r7, #32
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	08058568 	.word	0x08058568
 8010d58:	0801b93c 	.word	0x0801b93c

08010d5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010d70:	e002      	b.n	8010d78 <follow_path+0x1c>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	3301      	adds	r3, #1
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8010d7e:	d0f8      	beq.n	8010d72 <follow_path+0x16>
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	2b5c      	cmp	r3, #92	; 0x5c
 8010d86:	d0f4      	beq.n	8010d72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	2b1f      	cmp	r3, #31
 8010d94:	d80a      	bhi.n	8010dac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2280      	movs	r2, #128	; 0x80
 8010d9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010d9e:	2100      	movs	r1, #0
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff fc1f 	bl	80105e4 <dir_sdi>
 8010da6:	4603      	mov	r3, r0
 8010da8:	75fb      	strb	r3, [r7, #23]
 8010daa:	e048      	b.n	8010e3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010dac:	463b      	mov	r3, r7
 8010dae:	4619      	mov	r1, r3
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7ff ff3f 	bl	8010c34 <create_name>
 8010db6:	4603      	mov	r3, r0
 8010db8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010dba:	7dfb      	ldrb	r3, [r7, #23]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d139      	bne.n	8010e34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff fe51 	bl	8010a68 <dir_find>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010dd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010dd2:	7dfb      	ldrb	r3, [r7, #23]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00a      	beq.n	8010dee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010dd8:	7dfb      	ldrb	r3, [r7, #23]
 8010dda:	2b04      	cmp	r3, #4
 8010ddc:	d12c      	bne.n	8010e38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010dde:	7afb      	ldrb	r3, [r7, #11]
 8010de0:	f003 0304 	and.w	r3, r3, #4
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d127      	bne.n	8010e38 <follow_path+0xdc>
 8010de8:	2305      	movs	r3, #5
 8010dea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010dec:	e024      	b.n	8010e38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010dee:	7afb      	ldrb	r3, [r7, #11]
 8010df0:	f003 0304 	and.w	r3, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d121      	bne.n	8010e3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	799b      	ldrb	r3, [r3, #6]
 8010dfc:	f003 0310 	and.w	r3, r3, #16
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d102      	bne.n	8010e0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010e04:	2305      	movs	r3, #5
 8010e06:	75fb      	strb	r3, [r7, #23]
 8010e08:	e019      	b.n	8010e3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	695b      	ldr	r3, [r3, #20]
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	8992      	ldrh	r2, [r2, #12]
 8010e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e1c:	fb00 f202 	mul.w	r2, r0, r2
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	440b      	add	r3, r1
 8010e24:	4619      	mov	r1, r3
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7ff fd82 	bl	8010930 <ld_clust>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e32:	e7bb      	b.n	8010dac <follow_path+0x50>
			if (res != FR_OK) break;
 8010e34:	bf00      	nop
 8010e36:	e002      	b.n	8010e3e <follow_path+0xe2>
				break;
 8010e38:	bf00      	nop
 8010e3a:	e000      	b.n	8010e3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e3c:	bf00      	nop
			}
		}
	}

	return res;
 8010e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3718      	adds	r7, #24
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b087      	sub	sp, #28
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010e50:	f04f 33ff 	mov.w	r3, #4294967295
 8010e54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d031      	beq.n	8010ec2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	617b      	str	r3, [r7, #20]
 8010e64:	e002      	b.n	8010e6c <get_ldnumber+0x24>
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b20      	cmp	r3, #32
 8010e72:	d903      	bls.n	8010e7c <get_ldnumber+0x34>
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b3a      	cmp	r3, #58	; 0x3a
 8010e7a:	d1f4      	bne.n	8010e66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	2b3a      	cmp	r3, #58	; 0x3a
 8010e82:	d11c      	bne.n	8010ebe <get_ldnumber+0x76>
			tp = *path;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	60fa      	str	r2, [r7, #12]
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	3b30      	subs	r3, #48	; 0x30
 8010e94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	2b09      	cmp	r3, #9
 8010e9a:	d80e      	bhi.n	8010eba <get_ldnumber+0x72>
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d10a      	bne.n	8010eba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d107      	bne.n	8010eba <get_ldnumber+0x72>
					vol = (int)i;
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	617b      	str	r3, [r7, #20]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	697a      	ldr	r2, [r7, #20]
 8010eb8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	e002      	b.n	8010ec4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ec2:	693b      	ldr	r3, [r7, #16]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	371c      	adds	r7, #28
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	70da      	strb	r2, [r3, #3]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ee6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7fe ff98 	bl	800fe20 <move_window>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d001      	beq.n	8010efa <check_fs+0x2a>
 8010ef6:	2304      	movs	r3, #4
 8010ef8:	e038      	b.n	8010f6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3334      	adds	r3, #52	; 0x34
 8010efe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fe fcdc 	bl	800f8c0 <ld_word>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d001      	beq.n	8010f18 <check_fs+0x48>
 8010f14:	2303      	movs	r3, #3
 8010f16:	e029      	b.n	8010f6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f1e:	2be9      	cmp	r3, #233	; 0xe9
 8010f20:	d009      	beq.n	8010f36 <check_fs+0x66>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f28:	2beb      	cmp	r3, #235	; 0xeb
 8010f2a:	d11e      	bne.n	8010f6a <check_fs+0x9a>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010f32:	2b90      	cmp	r3, #144	; 0x90
 8010f34:	d119      	bne.n	8010f6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3334      	adds	r3, #52	; 0x34
 8010f3a:	3336      	adds	r3, #54	; 0x36
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fe fcd7 	bl	800f8f0 <ld_dword>
 8010f42:	4603      	mov	r3, r0
 8010f44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f48:	4a0a      	ldr	r2, [pc, #40]	; (8010f74 <check_fs+0xa4>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d101      	bne.n	8010f52 <check_fs+0x82>
 8010f4e:	2300      	movs	r3, #0
 8010f50:	e00c      	b.n	8010f6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	3334      	adds	r3, #52	; 0x34
 8010f56:	3352      	adds	r3, #82	; 0x52
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fe fcc9 	bl	800f8f0 <ld_dword>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	4a05      	ldr	r2, [pc, #20]	; (8010f78 <check_fs+0xa8>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d101      	bne.n	8010f6a <check_fs+0x9a>
 8010f66:	2300      	movs	r3, #0
 8010f68:	e000      	b.n	8010f6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010f6a:	2302      	movs	r3, #2
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	00544146 	.word	0x00544146
 8010f78:	33544146 	.word	0x33544146

08010f7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b096      	sub	sp, #88	; 0x58
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	4613      	mov	r3, r2
 8010f88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f7ff ff59 	bl	8010e48 <get_ldnumber>
 8010f96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	da01      	bge.n	8010fa2 <find_volume+0x26>
 8010f9e:	230b      	movs	r3, #11
 8010fa0:	e262      	b.n	8011468 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010fa2:	4a9f      	ldr	r2, [pc, #636]	; (8011220 <find_volume+0x2a4>)
 8010fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010faa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d101      	bne.n	8010fb6 <find_volume+0x3a>
 8010fb2:	230c      	movs	r3, #12
 8010fb4:	e258      	b.n	8011468 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	f023 0301 	bic.w	r3, r3, #1
 8010fc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01a      	beq.n	8011002 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fce:	785b      	ldrb	r3, [r3, #1]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fe fbd7 	bl	800f784 <disk_status>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10c      	bne.n	8011002 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010fe8:	79fb      	ldrb	r3, [r7, #7]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d007      	beq.n	8010ffe <find_volume+0x82>
 8010fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ff2:	f003 0304 	and.w	r3, r3, #4
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010ffa:	230a      	movs	r3, #10
 8010ffc:	e234      	b.n	8011468 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8010ffe:	2300      	movs	r3, #0
 8011000:	e232      	b.n	8011468 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011004:	2200      	movs	r2, #0
 8011006:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100a:	b2da      	uxtb	r2, r3
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011012:	785b      	ldrb	r3, [r3, #1]
 8011014:	4618      	mov	r0, r3
 8011016:	f7fe fbcf 	bl	800f7b8 <disk_initialize>
 801101a:	4603      	mov	r3, r0
 801101c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011024:	f003 0301 	and.w	r3, r3, #1
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801102c:	2303      	movs	r3, #3
 801102e:	e21b      	b.n	8011468 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011030:	79fb      	ldrb	r3, [r7, #7]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d007      	beq.n	8011046 <find_volume+0xca>
 8011036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801103a:	f003 0304 	and.w	r3, r3, #4
 801103e:	2b00      	cmp	r3, #0
 8011040:	d001      	beq.n	8011046 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011042:	230a      	movs	r3, #10
 8011044:	e210      	b.n	8011468 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011048:	7858      	ldrb	r0, [r3, #1]
 801104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104c:	330c      	adds	r3, #12
 801104e:	461a      	mov	r2, r3
 8011050:	2102      	movs	r1, #2
 8011052:	f7fe fc17 	bl	800f884 <disk_ioctl>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <find_volume+0xe4>
 801105c:	2301      	movs	r3, #1
 801105e:	e203      	b.n	8011468 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011062:	899b      	ldrh	r3, [r3, #12]
 8011064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011068:	d80d      	bhi.n	8011086 <find_volume+0x10a>
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	899b      	ldrh	r3, [r3, #12]
 801106e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011072:	d308      	bcc.n	8011086 <find_volume+0x10a>
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	899b      	ldrh	r3, [r3, #12]
 8011078:	461a      	mov	r2, r3
 801107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107c:	899b      	ldrh	r3, [r3, #12]
 801107e:	3b01      	subs	r3, #1
 8011080:	4013      	ands	r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <find_volume+0x10e>
 8011086:	2301      	movs	r3, #1
 8011088:	e1ee      	b.n	8011468 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801108e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011092:	f7ff ff1d 	bl	8010ed0 <check_fs>
 8011096:	4603      	mov	r3, r0
 8011098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801109c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d149      	bne.n	8011138 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110a4:	2300      	movs	r3, #0
 80110a6:	643b      	str	r3, [r7, #64]	; 0x40
 80110a8:	e01e      	b.n	80110e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80110aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80110b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b2:	011b      	lsls	r3, r3, #4
 80110b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80110b8:	4413      	add	r3, r2
 80110ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80110bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110be:	3304      	adds	r3, #4
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d006      	beq.n	80110d4 <find_volume+0x158>
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	3308      	adds	r3, #8
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fe fc10 	bl	800f8f0 <ld_dword>
 80110d0:	4602      	mov	r2, r0
 80110d2:	e000      	b.n	80110d6 <find_volume+0x15a>
 80110d4:	2200      	movs	r2, #0
 80110d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d8:	009b      	lsls	r3, r3, #2
 80110da:	3358      	adds	r3, #88	; 0x58
 80110dc:	443b      	add	r3, r7
 80110de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110e4:	3301      	adds	r3, #1
 80110e6:	643b      	str	r3, [r7, #64]	; 0x40
 80110e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ea:	2b03      	cmp	r3, #3
 80110ec:	d9dd      	bls.n	80110aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80110ee:	2300      	movs	r3, #0
 80110f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80110f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d002      	beq.n	80110fe <find_volume+0x182>
 80110f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110fa:	3b01      	subs	r3, #1
 80110fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80110fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	3358      	adds	r3, #88	; 0x58
 8011104:	443b      	add	r3, r7
 8011106:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801110a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801110c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801110e:	2b00      	cmp	r3, #0
 8011110:	d005      	beq.n	801111e <find_volume+0x1a2>
 8011112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011116:	f7ff fedb 	bl	8010ed0 <check_fs>
 801111a:	4603      	mov	r3, r0
 801111c:	e000      	b.n	8011120 <find_volume+0x1a4>
 801111e:	2303      	movs	r3, #3
 8011120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011128:	2b01      	cmp	r3, #1
 801112a:	d905      	bls.n	8011138 <find_volume+0x1bc>
 801112c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801112e:	3301      	adds	r3, #1
 8011130:	643b      	str	r3, [r7, #64]	; 0x40
 8011132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011134:	2b03      	cmp	r3, #3
 8011136:	d9e2      	bls.n	80110fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801113c:	2b04      	cmp	r3, #4
 801113e:	d101      	bne.n	8011144 <find_volume+0x1c8>
 8011140:	2301      	movs	r3, #1
 8011142:	e191      	b.n	8011468 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011148:	2b01      	cmp	r3, #1
 801114a:	d901      	bls.n	8011150 <find_volume+0x1d4>
 801114c:	230d      	movs	r3, #13
 801114e:	e18b      	b.n	8011468 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011152:	3334      	adds	r3, #52	; 0x34
 8011154:	330b      	adds	r3, #11
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fbb2 	bl	800f8c0 <ld_word>
 801115c:	4603      	mov	r3, r0
 801115e:	461a      	mov	r2, r3
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	899b      	ldrh	r3, [r3, #12]
 8011164:	429a      	cmp	r2, r3
 8011166:	d001      	beq.n	801116c <find_volume+0x1f0>
 8011168:	230d      	movs	r3, #13
 801116a:	e17d      	b.n	8011468 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116e:	3334      	adds	r3, #52	; 0x34
 8011170:	3316      	adds	r3, #22
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe fba4 	bl	800f8c0 <ld_word>
 8011178:	4603      	mov	r3, r0
 801117a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801117c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801117e:	2b00      	cmp	r3, #0
 8011180:	d106      	bne.n	8011190 <find_volume+0x214>
 8011182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011184:	3334      	adds	r3, #52	; 0x34
 8011186:	3324      	adds	r3, #36	; 0x24
 8011188:	4618      	mov	r0, r3
 801118a:	f7fe fbb1 	bl	800f8f0 <ld_dword>
 801118e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011194:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011198:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	789b      	ldrb	r3, [r3, #2]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d005      	beq.n	80111b4 <find_volume+0x238>
 80111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111aa:	789b      	ldrb	r3, [r3, #2]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d001      	beq.n	80111b4 <find_volume+0x238>
 80111b0:	230d      	movs	r3, #13
 80111b2:	e159      	b.n	8011468 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80111b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b6:	789b      	ldrb	r3, [r3, #2]
 80111b8:	461a      	mov	r2, r3
 80111ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111bc:	fb02 f303 	mul.w	r3, r2, r3
 80111c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80111c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	895b      	ldrh	r3, [r3, #10]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d008      	beq.n	80111e8 <find_volume+0x26c>
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	895b      	ldrh	r3, [r3, #10]
 80111da:	461a      	mov	r2, r3
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	895b      	ldrh	r3, [r3, #10]
 80111e0:	3b01      	subs	r3, #1
 80111e2:	4013      	ands	r3, r2
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <find_volume+0x270>
 80111e8:	230d      	movs	r3, #13
 80111ea:	e13d      	b.n	8011468 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80111ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ee:	3334      	adds	r3, #52	; 0x34
 80111f0:	3311      	adds	r3, #17
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fe fb64 	bl	800f8c0 <ld_word>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	891b      	ldrh	r3, [r3, #8]
 8011204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011206:	8992      	ldrh	r2, [r2, #12]
 8011208:	0952      	lsrs	r2, r2, #5
 801120a:	b292      	uxth	r2, r2
 801120c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011210:	fb01 f202 	mul.w	r2, r1, r2
 8011214:	1a9b      	subs	r3, r3, r2
 8011216:	b29b      	uxth	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <find_volume+0x2a8>
 801121c:	230d      	movs	r3, #13
 801121e:	e123      	b.n	8011468 <find_volume+0x4ec>
 8011220:	20005d9c 	.word	0x20005d9c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	3334      	adds	r3, #52	; 0x34
 8011228:	3313      	adds	r3, #19
 801122a:	4618      	mov	r0, r3
 801122c:	f7fe fb48 	bl	800f8c0 <ld_word>
 8011230:	4603      	mov	r3, r0
 8011232:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011236:	2b00      	cmp	r3, #0
 8011238:	d106      	bne.n	8011248 <find_volume+0x2cc>
 801123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123c:	3334      	adds	r3, #52	; 0x34
 801123e:	3320      	adds	r3, #32
 8011240:	4618      	mov	r0, r3
 8011242:	f7fe fb55 	bl	800f8f0 <ld_dword>
 8011246:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124a:	3334      	adds	r3, #52	; 0x34
 801124c:	330e      	adds	r3, #14
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe fb36 	bl	800f8c0 <ld_word>
 8011254:	4603      	mov	r3, r0
 8011256:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011258:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <find_volume+0x2e6>
 801125e:	230d      	movs	r3, #13
 8011260:	e102      	b.n	8011468 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011262:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011266:	4413      	add	r3, r2
 8011268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801126a:	8911      	ldrh	r1, [r2, #8]
 801126c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801126e:	8992      	ldrh	r2, [r2, #12]
 8011270:	0952      	lsrs	r2, r2, #5
 8011272:	b292      	uxth	r2, r2
 8011274:	fbb1 f2f2 	udiv	r2, r1, r2
 8011278:	b292      	uxth	r2, r2
 801127a:	4413      	add	r3, r2
 801127c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801127e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	429a      	cmp	r2, r3
 8011284:	d201      	bcs.n	801128a <find_volume+0x30e>
 8011286:	230d      	movs	r3, #13
 8011288:	e0ee      	b.n	8011468 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801128a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011292:	8952      	ldrh	r2, [r2, #10]
 8011294:	fbb3 f3f2 	udiv	r3, r3, r2
 8011298:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <find_volume+0x328>
 80112a0:	230d      	movs	r3, #13
 80112a2:	e0e1      	b.n	8011468 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80112a4:	2303      	movs	r3, #3
 80112a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80112aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d802      	bhi.n	80112ba <find_volume+0x33e>
 80112b4:	2302      	movs	r3, #2
 80112b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d802      	bhi.n	80112ca <find_volume+0x34e>
 80112c4:	2301      	movs	r3, #1
 80112c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	1c9a      	adds	r2, r3, #2
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80112d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112d6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80112d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80112da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112dc:	441a      	add	r2, r3
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80112e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e6:	441a      	add	r2, r3
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80112ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d11e      	bne.n	8011332 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f6:	3334      	adds	r3, #52	; 0x34
 80112f8:	332a      	adds	r3, #42	; 0x2a
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fe fae0 	bl	800f8c0 <ld_word>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <find_volume+0x38e>
 8011306:	230d      	movs	r3, #13
 8011308:	e0ae      	b.n	8011468 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130c:	891b      	ldrh	r3, [r3, #8]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d001      	beq.n	8011316 <find_volume+0x39a>
 8011312:	230d      	movs	r3, #13
 8011314:	e0a8      	b.n	8011468 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011318:	3334      	adds	r3, #52	; 0x34
 801131a:	332c      	adds	r3, #44	; 0x2c
 801131c:	4618      	mov	r0, r3
 801131e:	f7fe fae7 	bl	800f8f0 <ld_dword>
 8011322:	4602      	mov	r2, r0
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	647b      	str	r3, [r7, #68]	; 0x44
 8011330:	e01f      	b.n	8011372 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	891b      	ldrh	r3, [r3, #8]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d101      	bne.n	801133e <find_volume+0x3c2>
 801133a:	230d      	movs	r3, #13
 801133c:	e094      	b.n	8011468 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011344:	441a      	add	r2, r3
 8011346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011348:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801134a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801134e:	2b02      	cmp	r3, #2
 8011350:	d103      	bne.n	801135a <find_volume+0x3de>
 8011352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011354:	699b      	ldr	r3, [r3, #24]
 8011356:	005b      	lsls	r3, r3, #1
 8011358:	e00a      	b.n	8011370 <find_volume+0x3f4>
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	699a      	ldr	r2, [r3, #24]
 801135e:	4613      	mov	r3, r2
 8011360:	005b      	lsls	r3, r3, #1
 8011362:	4413      	add	r3, r2
 8011364:	085a      	lsrs	r2, r3, #1
 8011366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011368:	699b      	ldr	r3, [r3, #24]
 801136a:	f003 0301 	and.w	r3, r3, #1
 801136e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011370:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011374:	69da      	ldr	r2, [r3, #28]
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	899b      	ldrh	r3, [r3, #12]
 801137a:	4619      	mov	r1, r3
 801137c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801137e:	440b      	add	r3, r1
 8011380:	3b01      	subs	r3, #1
 8011382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011384:	8989      	ldrh	r1, [r1, #12]
 8011386:	fbb3 f3f1 	udiv	r3, r3, r1
 801138a:	429a      	cmp	r2, r3
 801138c:	d201      	bcs.n	8011392 <find_volume+0x416>
 801138e:	230d      	movs	r3, #13
 8011390:	e06a      	b.n	8011468 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	f04f 32ff 	mov.w	r2, #4294967295
 8011398:	615a      	str	r2, [r3, #20]
 801139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139c:	695a      	ldr	r2, [r3, #20]
 801139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80113a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a4:	2280      	movs	r2, #128	; 0x80
 80113a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80113a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113ac:	2b03      	cmp	r3, #3
 80113ae:	d149      	bne.n	8011444 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	3334      	adds	r3, #52	; 0x34
 80113b4:	3330      	adds	r3, #48	; 0x30
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fe fa82 	bl	800f8c0 <ld_word>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d140      	bne.n	8011444 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80113c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113c4:	3301      	adds	r3, #1
 80113c6:	4619      	mov	r1, r3
 80113c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113ca:	f7fe fd29 	bl	800fe20 <move_window>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d137      	bne.n	8011444 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80113d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d6:	2200      	movs	r2, #0
 80113d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80113da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113dc:	3334      	adds	r3, #52	; 0x34
 80113de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fe fa6c 	bl	800f8c0 <ld_word>
 80113e8:	4603      	mov	r3, r0
 80113ea:	461a      	mov	r2, r3
 80113ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d127      	bne.n	8011444 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80113f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f6:	3334      	adds	r3, #52	; 0x34
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fe fa79 	bl	800f8f0 <ld_dword>
 80113fe:	4603      	mov	r3, r0
 8011400:	4a1b      	ldr	r2, [pc, #108]	; (8011470 <find_volume+0x4f4>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d11e      	bne.n	8011444 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011408:	3334      	adds	r3, #52	; 0x34
 801140a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe fa6e 	bl	800f8f0 <ld_dword>
 8011414:	4603      	mov	r3, r0
 8011416:	4a17      	ldr	r2, [pc, #92]	; (8011474 <find_volume+0x4f8>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d113      	bne.n	8011444 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	3334      	adds	r3, #52	; 0x34
 8011420:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011424:	4618      	mov	r0, r3
 8011426:	f7fe fa63 	bl	800f8f0 <ld_dword>
 801142a:	4602      	mov	r2, r0
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011432:	3334      	adds	r3, #52	; 0x34
 8011434:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011438:	4618      	mov	r0, r3
 801143a:	f7fe fa59 	bl	800f8f0 <ld_dword>
 801143e:	4602      	mov	r2, r0
 8011440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011442:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801144a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801144c:	4b0a      	ldr	r3, [pc, #40]	; (8011478 <find_volume+0x4fc>)
 801144e:	881b      	ldrh	r3, [r3, #0]
 8011450:	3301      	adds	r3, #1
 8011452:	b29a      	uxth	r2, r3
 8011454:	4b08      	ldr	r3, [pc, #32]	; (8011478 <find_volume+0x4fc>)
 8011456:	801a      	strh	r2, [r3, #0]
 8011458:	4b07      	ldr	r3, [pc, #28]	; (8011478 <find_volume+0x4fc>)
 801145a:	881a      	ldrh	r2, [r3, #0]
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011462:	f7fe fc75 	bl	800fd50 <clear_lock>
#endif
	return FR_OK;
 8011466:	2300      	movs	r3, #0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3758      	adds	r7, #88	; 0x58
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	41615252 	.word	0x41615252
 8011474:	61417272 	.word	0x61417272
 8011478:	20005da0 	.word	0x20005da0

0801147c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011486:	2309      	movs	r3, #9
 8011488:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d01c      	beq.n	80114ca <validate+0x4e>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d018      	beq.n	80114ca <validate+0x4e>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d013      	beq.n	80114ca <validate+0x4e>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	889a      	ldrh	r2, [r3, #4]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	88db      	ldrh	r3, [r3, #6]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d10c      	bne.n	80114ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	785b      	ldrb	r3, [r3, #1]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe f964 	bl	800f784 <disk_status>
 80114bc:	4603      	mov	r3, r0
 80114be:	f003 0301 	and.w	r3, r3, #1
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d101      	bne.n	80114ca <validate+0x4e>
			res = FR_OK;
 80114c6:	2300      	movs	r3, #0
 80114c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d102      	bne.n	80114d6 <validate+0x5a>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	e000      	b.n	80114d8 <validate+0x5c>
 80114d6:	2300      	movs	r3, #0
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	6013      	str	r3, [r2, #0]
	return res;
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
	...

080114e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b088      	sub	sp, #32
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	4613      	mov	r3, r2
 80114f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80114fa:	f107 0310 	add.w	r3, r7, #16
 80114fe:	4618      	mov	r0, r3
 8011500:	f7ff fca2 	bl	8010e48 <get_ldnumber>
 8011504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	2b00      	cmp	r3, #0
 801150a:	da01      	bge.n	8011510 <f_mount+0x28>
 801150c:	230b      	movs	r3, #11
 801150e:	e02b      	b.n	8011568 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011510:	4a17      	ldr	r2, [pc, #92]	; (8011570 <f_mount+0x88>)
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d005      	beq.n	801152c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f7fe fc15 	bl	800fd50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	2200      	movs	r2, #0
 801152a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2200      	movs	r2, #0
 8011536:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	490d      	ldr	r1, [pc, #52]	; (8011570 <f_mount+0x88>)
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <f_mount+0x66>
 8011548:	79fb      	ldrb	r3, [r7, #7]
 801154a:	2b01      	cmp	r3, #1
 801154c:	d001      	beq.n	8011552 <f_mount+0x6a>
 801154e:	2300      	movs	r3, #0
 8011550:	e00a      	b.n	8011568 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011552:	f107 010c 	add.w	r1, r7, #12
 8011556:	f107 0308 	add.w	r3, r7, #8
 801155a:	2200      	movs	r2, #0
 801155c:	4618      	mov	r0, r3
 801155e:	f7ff fd0d 	bl	8010f7c <find_volume>
 8011562:	4603      	mov	r3, r0
 8011564:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011566:	7dfb      	ldrb	r3, [r7, #23]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3720      	adds	r7, #32
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	20005d9c 	.word	0x20005d9c

08011574 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b098      	sub	sp, #96	; 0x60
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	4613      	mov	r3, r2
 8011580:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d101      	bne.n	801158c <f_open+0x18>
 8011588:	2309      	movs	r3, #9
 801158a:	e1bb      	b.n	8011904 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011592:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011594:	79fa      	ldrb	r2, [r7, #7]
 8011596:	f107 0110 	add.w	r1, r7, #16
 801159a:	f107 0308 	add.w	r3, r7, #8
 801159e:	4618      	mov	r0, r3
 80115a0:	f7ff fcec 	bl	8010f7c <find_volume>
 80115a4:	4603      	mov	r3, r0
 80115a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80115aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f040 819f 	bne.w	80118f2 <f_open+0x37e>
		dj.obj.fs = fs;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80115b8:	68ba      	ldr	r2, [r7, #8]
 80115ba:	f107 0314 	add.w	r3, r7, #20
 80115be:	4611      	mov	r1, r2
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff fbcb 	bl	8010d5c <follow_path>
 80115c6:	4603      	mov	r3, r0
 80115c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80115cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d11a      	bne.n	801160a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80115d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115d8:	b25b      	sxtb	r3, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	da03      	bge.n	80115e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80115de:	2306      	movs	r3, #6
 80115e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80115e4:	e011      	b.n	801160a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115e6:	79fb      	ldrb	r3, [r7, #7]
 80115e8:	f023 0301 	bic.w	r3, r3, #1
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	bf14      	ite	ne
 80115f0:	2301      	movne	r3, #1
 80115f2:	2300      	moveq	r3, #0
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	461a      	mov	r2, r3
 80115f8:	f107 0314 	add.w	r3, r7, #20
 80115fc:	4611      	mov	r1, r2
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fe fa5e 	bl	800fac0 <chk_lock>
 8011604:	4603      	mov	r3, r0
 8011606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801160a:	79fb      	ldrb	r3, [r7, #7]
 801160c:	f003 031c 	and.w	r3, r3, #28
 8011610:	2b00      	cmp	r3, #0
 8011612:	d07f      	beq.n	8011714 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011618:	2b00      	cmp	r3, #0
 801161a:	d017      	beq.n	801164c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801161c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011620:	2b04      	cmp	r3, #4
 8011622:	d10e      	bne.n	8011642 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011624:	f7fe faa8 	bl	800fb78 <enq_lock>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d006      	beq.n	801163c <f_open+0xc8>
 801162e:	f107 0314 	add.w	r3, r7, #20
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff fa6d 	bl	8010b12 <dir_register>
 8011638:	4603      	mov	r3, r0
 801163a:	e000      	b.n	801163e <f_open+0xca>
 801163c:	2312      	movs	r3, #18
 801163e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011642:	79fb      	ldrb	r3, [r7, #7]
 8011644:	f043 0308 	orr.w	r3, r3, #8
 8011648:	71fb      	strb	r3, [r7, #7]
 801164a:	e010      	b.n	801166e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801164c:	7ebb      	ldrb	r3, [r7, #26]
 801164e:	f003 0311 	and.w	r3, r3, #17
 8011652:	2b00      	cmp	r3, #0
 8011654:	d003      	beq.n	801165e <f_open+0xea>
					res = FR_DENIED;
 8011656:	2307      	movs	r3, #7
 8011658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801165c:	e007      	b.n	801166e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	f003 0304 	and.w	r3, r3, #4
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <f_open+0xfa>
 8011668:	2308      	movs	r3, #8
 801166a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801166e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011672:	2b00      	cmp	r3, #0
 8011674:	d168      	bne.n	8011748 <f_open+0x1d4>
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	f003 0308 	and.w	r3, r3, #8
 801167c:	2b00      	cmp	r3, #0
 801167e:	d063      	beq.n	8011748 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011680:	f7fd ff14 	bl	800f4ac <get_fattime>
 8011684:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011688:	330e      	adds	r3, #14
 801168a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801168c:	4618      	mov	r0, r3
 801168e:	f7fe f96d 	bl	800f96c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011694:	3316      	adds	r3, #22
 8011696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011698:	4618      	mov	r0, r3
 801169a:	f7fe f967 	bl	800f96c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a0:	330b      	adds	r3, #11
 80116a2:	2220      	movs	r2, #32
 80116a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116aa:	4611      	mov	r1, r2
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff f93f 	bl	8010930 <ld_clust>
 80116b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80116b8:	2200      	movs	r2, #0
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7ff f957 	bl	801096e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	331c      	adds	r3, #28
 80116c4:	2100      	movs	r1, #0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe f950 	bl	800f96c <st_dword>
					fs->wflag = 1;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	2201      	movs	r2, #1
 80116d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80116d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d037      	beq.n	8011748 <f_open+0x1d4>
						dw = fs->winsect;
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80116de:	f107 0314 	add.w	r3, r7, #20
 80116e2:	2200      	movs	r2, #0
 80116e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe fe47 	bl	801037a <remove_chain>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80116f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d126      	bne.n	8011748 <f_open+0x1d4>
							res = move_window(fs, dw);
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fe fb8e 	bl	800fe20 <move_window>
 8011704:	4603      	mov	r3, r0
 8011706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801170e:	3a01      	subs	r2, #1
 8011710:	611a      	str	r2, [r3, #16]
 8011712:	e019      	b.n	8011748 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011718:	2b00      	cmp	r3, #0
 801171a:	d115      	bne.n	8011748 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801171c:	7ebb      	ldrb	r3, [r7, #26]
 801171e:	f003 0310 	and.w	r3, r3, #16
 8011722:	2b00      	cmp	r3, #0
 8011724:	d003      	beq.n	801172e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011726:	2304      	movs	r3, #4
 8011728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801172c:	e00c      	b.n	8011748 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801172e:	79fb      	ldrb	r3, [r7, #7]
 8011730:	f003 0302 	and.w	r3, r3, #2
 8011734:	2b00      	cmp	r3, #0
 8011736:	d007      	beq.n	8011748 <f_open+0x1d4>
 8011738:	7ebb      	ldrb	r3, [r7, #26]
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <f_open+0x1d4>
						res = FR_DENIED;
 8011742:	2307      	movs	r3, #7
 8011744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801174c:	2b00      	cmp	r3, #0
 801174e:	d128      	bne.n	80117a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011750:	79fb      	ldrb	r3, [r7, #7]
 8011752:	f003 0308 	and.w	r3, r3, #8
 8011756:	2b00      	cmp	r3, #0
 8011758:	d003      	beq.n	8011762 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801175a:	79fb      	ldrb	r3, [r7, #7]
 801175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801176a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011770:	79fb      	ldrb	r3, [r7, #7]
 8011772:	f023 0301 	bic.w	r3, r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	bf14      	ite	ne
 801177a:	2301      	movne	r3, #1
 801177c:	2300      	moveq	r3, #0
 801177e:	b2db      	uxtb	r3, r3
 8011780:	461a      	mov	r2, r3
 8011782:	f107 0314 	add.w	r3, r7, #20
 8011786:	4611      	mov	r1, r2
 8011788:	4618      	mov	r0, r3
 801178a:	f7fe fa17 	bl	800fbbc <inc_lock>
 801178e:	4602      	mov	r2, r0
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <f_open+0x22e>
 801179c:	2302      	movs	r3, #2
 801179e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80117a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f040 80a3 	bne.w	80118f2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff f8bc 	bl	8010930 <ld_clust>
 80117b8:	4602      	mov	r2, r0
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80117be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c0:	331c      	adds	r3, #28
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe f894 	bl	800f8f0 <ld_dword>
 80117c8:	4602      	mov	r2, r0
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2200      	movs	r2, #0
 80117d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	88da      	ldrh	r2, [r3, #6]
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	79fa      	ldrb	r2, [r7, #7]
 80117e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2200      	movs	r2, #0
 80117ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2200      	movs	r2, #0
 80117f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	3330      	adds	r3, #48	; 0x30
 80117fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011802:	2100      	movs	r1, #0
 8011804:	4618      	mov	r0, r3
 8011806:	f7fe f8fe 	bl	800fa06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801180a:	79fb      	ldrb	r3, [r7, #7]
 801180c:	f003 0320 	and.w	r3, r3, #32
 8011810:	2b00      	cmp	r3, #0
 8011812:	d06e      	beq.n	80118f2 <f_open+0x37e>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d06a      	beq.n	80118f2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	68da      	ldr	r2, [r3, #12]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	895b      	ldrh	r3, [r3, #10]
 8011828:	461a      	mov	r2, r3
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	899b      	ldrh	r3, [r3, #12]
 801182e:	fb02 f303 	mul.w	r3, r2, r3
 8011832:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	657b      	str	r3, [r7, #84]	; 0x54
 8011840:	e016      	b.n	8011870 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011846:	4618      	mov	r0, r3
 8011848:	f7fe fba7 	bl	800ff9a <get_fat>
 801184c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801184e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011850:	2b01      	cmp	r3, #1
 8011852:	d802      	bhi.n	801185a <f_open+0x2e6>
 8011854:	2302      	movs	r3, #2
 8011856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801185a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011860:	d102      	bne.n	8011868 <f_open+0x2f4>
 8011862:	2301      	movs	r3, #1
 8011864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801186a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	657b      	str	r3, [r7, #84]	; 0x54
 8011870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011874:	2b00      	cmp	r3, #0
 8011876:	d103      	bne.n	8011880 <f_open+0x30c>
 8011878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801187c:	429a      	cmp	r2, r3
 801187e:	d8e0      	bhi.n	8011842 <f_open+0x2ce>
				}
				fp->clust = clst;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801188a:	2b00      	cmp	r3, #0
 801188c:	d131      	bne.n	80118f2 <f_open+0x37e>
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	899b      	ldrh	r3, [r3, #12]
 8011892:	461a      	mov	r2, r3
 8011894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011896:	fbb3 f1f2 	udiv	r1, r3, r2
 801189a:	fb01 f202 	mul.w	r2, r1, r2
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d026      	beq.n	80118f2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fe fb57 	bl	800ff5c <clust2sect>
 80118ae:	6478      	str	r0, [r7, #68]	; 0x44
 80118b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d103      	bne.n	80118be <f_open+0x34a>
						res = FR_INT_ERR;
 80118b6:	2302      	movs	r3, #2
 80118b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80118bc:	e019      	b.n	80118f2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	461a      	mov	r2, r3
 80118c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80118ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118cc:	441a      	add	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	7858      	ldrb	r0, [r3, #1]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	6a1a      	ldr	r2, [r3, #32]
 80118e0:	2301      	movs	r3, #1
 80118e2:	f7fd ff8f 	bl	800f804 <disk_read>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <f_open+0x37e>
 80118ec:	2301      	movs	r3, #1
 80118ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80118f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d002      	beq.n	8011900 <f_open+0x38c>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011904:	4618      	mov	r0, r3
 8011906:	3760      	adds	r7, #96	; 0x60
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b08e      	sub	sp, #56	; 0x38
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2200      	movs	r2, #0
 8011922:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	f107 0214 	add.w	r2, r7, #20
 801192a:	4611      	mov	r1, r2
 801192c:	4618      	mov	r0, r3
 801192e:	f7ff fda5 	bl	801147c <validate>
 8011932:	4603      	mov	r3, r0
 8011934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801193c:	2b00      	cmp	r3, #0
 801193e:	d107      	bne.n	8011950 <f_read+0x44>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	7d5b      	ldrb	r3, [r3, #21]
 8011944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <f_read+0x4a>
 8011950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011954:	e135      	b.n	8011bc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	7d1b      	ldrb	r3, [r3, #20]
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <f_read+0x5a>
 8011962:	2307      	movs	r3, #7
 8011964:	e12d      	b.n	8011bc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	68da      	ldr	r2, [r3, #12]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	699b      	ldr	r3, [r3, #24]
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	429a      	cmp	r2, r3
 8011978:	f240 811e 	bls.w	8011bb8 <f_read+0x2ac>
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011980:	e11a      	b.n	8011bb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	699b      	ldr	r3, [r3, #24]
 8011986:	697a      	ldr	r2, [r7, #20]
 8011988:	8992      	ldrh	r2, [r2, #12]
 801198a:	fbb3 f1f2 	udiv	r1, r3, r2
 801198e:	fb01 f202 	mul.w	r2, r1, r2
 8011992:	1a9b      	subs	r3, r3, r2
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 80d5 	bne.w	8011b44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	699b      	ldr	r3, [r3, #24]
 801199e:	697a      	ldr	r2, [r7, #20]
 80119a0:	8992      	ldrh	r2, [r2, #12]
 80119a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80119a6:	697a      	ldr	r2, [r7, #20]
 80119a8:	8952      	ldrh	r2, [r2, #10]
 80119aa:	3a01      	subs	r2, #1
 80119ac:	4013      	ands	r3, r2
 80119ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d12f      	bne.n	8011a16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	699b      	ldr	r3, [r3, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d103      	bne.n	80119c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	633b      	str	r3, [r7, #48]	; 0x30
 80119c4:	e013      	b.n	80119ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d007      	beq.n	80119de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	699b      	ldr	r3, [r3, #24]
 80119d2:	4619      	mov	r1, r3
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f7fe fdcd 	bl	8010574 <clmt_clust>
 80119da:	6338      	str	r0, [r7, #48]	; 0x30
 80119dc:	e007      	b.n	80119ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	69db      	ldr	r3, [r3, #28]
 80119e4:	4619      	mov	r1, r3
 80119e6:	4610      	mov	r0, r2
 80119e8:	f7fe fad7 	bl	800ff9a <get_fat>
 80119ec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d804      	bhi.n	80119fe <f_read+0xf2>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2202      	movs	r2, #2
 80119f8:	755a      	strb	r2, [r3, #21]
 80119fa:	2302      	movs	r3, #2
 80119fc:	e0e1      	b.n	8011bc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a04:	d104      	bne.n	8011a10 <f_read+0x104>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	755a      	strb	r2, [r3, #21]
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e0d8      	b.n	8011bc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4610      	mov	r0, r2
 8011a20:	f7fe fa9c 	bl	800ff5c <clust2sect>
 8011a24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d104      	bne.n	8011a36 <f_read+0x12a>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2202      	movs	r2, #2
 8011a30:	755a      	strb	r2, [r3, #21]
 8011a32:	2302      	movs	r3, #2
 8011a34:	e0c5      	b.n	8011bc2 <f_read+0x2b6>
			sect += csect;
 8011a36:	69ba      	ldr	r2, [r7, #24]
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	899b      	ldrh	r3, [r3, #12]
 8011a42:	461a      	mov	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d041      	beq.n	8011ad6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a52:	69fa      	ldr	r2, [r7, #28]
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	4413      	add	r3, r2
 8011a58:	697a      	ldr	r2, [r7, #20]
 8011a5a:	8952      	ldrh	r2, [r2, #10]
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d905      	bls.n	8011a6c <f_read+0x160>
					cc = fs->csize - csect;
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	895b      	ldrh	r3, [r3, #10]
 8011a64:	461a      	mov	r2, r3
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	7858      	ldrb	r0, [r3, #1]
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	69ba      	ldr	r2, [r7, #24]
 8011a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a76:	f7fd fec5 	bl	800f804 <disk_read>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <f_read+0x17e>
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2201      	movs	r2, #1
 8011a84:	755a      	strb	r2, [r3, #21]
 8011a86:	2301      	movs	r3, #1
 8011a88:	e09b      	b.n	8011bc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	7d1b      	ldrb	r3, [r3, #20]
 8011a8e:	b25b      	sxtb	r3, r3
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	da18      	bge.n	8011ac6 <f_read+0x1ba>
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6a1a      	ldr	r2, [r3, #32]
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d911      	bls.n	8011ac6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6a1a      	ldr	r2, [r3, #32]
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	697a      	ldr	r2, [r7, #20]
 8011aac:	8992      	ldrh	r2, [r2, #12]
 8011aae:	fb02 f303 	mul.w	r3, r2, r3
 8011ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ab4:	18d0      	adds	r0, r2, r3
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	899b      	ldrh	r3, [r3, #12]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	f7fd ff7f 	bl	800f9c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	899b      	ldrh	r3, [r3, #12]
 8011aca:	461a      	mov	r2, r3
 8011acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ace:	fb02 f303 	mul.w	r3, r2, r3
 8011ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011ad4:	e05c      	b.n	8011b90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	69ba      	ldr	r2, [r7, #24]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d02e      	beq.n	8011b3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	7d1b      	ldrb	r3, [r3, #20]
 8011ae4:	b25b      	sxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da18      	bge.n	8011b1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	7858      	ldrb	r0, [r3, #1]
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6a1a      	ldr	r2, [r3, #32]
 8011af8:	2301      	movs	r3, #1
 8011afa:	f7fd fea3 	bl	800f844 <disk_write>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d004      	beq.n	8011b0e <f_read+0x202>
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2201      	movs	r2, #1
 8011b08:	755a      	strb	r2, [r3, #21]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e059      	b.n	8011bc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	7d1b      	ldrb	r3, [r3, #20]
 8011b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	7858      	ldrb	r0, [r3, #1]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b26:	2301      	movs	r3, #1
 8011b28:	69ba      	ldr	r2, [r7, #24]
 8011b2a:	f7fd fe6b 	bl	800f804 <disk_read>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d004      	beq.n	8011b3e <f_read+0x232>
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2201      	movs	r2, #1
 8011b38:	755a      	strb	r2, [r3, #21]
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e041      	b.n	8011bc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	69ba      	ldr	r2, [r7, #24]
 8011b42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	899b      	ldrh	r3, [r3, #12]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	699b      	ldr	r3, [r3, #24]
 8011b4e:	697a      	ldr	r2, [r7, #20]
 8011b50:	8992      	ldrh	r2, [r2, #12]
 8011b52:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b56:	fb01 f202 	mul.w	r2, r1, r2
 8011b5a:	1a9b      	subs	r3, r3, r2
 8011b5c:	1ac3      	subs	r3, r0, r3
 8011b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d901      	bls.n	8011b6c <f_read+0x260>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	699b      	ldr	r3, [r3, #24]
 8011b76:	697a      	ldr	r2, [r7, #20]
 8011b78:	8992      	ldrh	r2, [r2, #12]
 8011b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b7e:	fb00 f202 	mul.w	r2, r0, r2
 8011b82:	1a9b      	subs	r3, r3, r2
 8011b84:	440b      	add	r3, r1
 8011b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b8c:	f7fd ff1a 	bl	800f9c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	4413      	add	r3, r2
 8011b96:	627b      	str	r3, [r7, #36]	; 0x24
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	699a      	ldr	r2, [r3, #24]
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	441a      	add	r2, r3
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	619a      	str	r2, [r3, #24]
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	441a      	add	r2, r3
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f47f aee1 	bne.w	8011982 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3738      	adds	r7, #56	; 0x38
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b08c      	sub	sp, #48	; 0x30
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	60f8      	str	r0, [r7, #12]
 8011bd2:	60b9      	str	r1, [r7, #8]
 8011bd4:	607a      	str	r2, [r7, #4]
 8011bd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	2200      	movs	r2, #0
 8011be0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f107 0210 	add.w	r2, r7, #16
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7ff fc46 	bl	801147c <validate>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d107      	bne.n	8011c0e <f_write+0x44>
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	7d5b      	ldrb	r3, [r3, #21]
 8011c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d002      	beq.n	8011c14 <f_write+0x4a>
 8011c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c12:	e16a      	b.n	8011eea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	7d1b      	ldrb	r3, [r3, #20]
 8011c18:	f003 0302 	and.w	r3, r3, #2
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d101      	bne.n	8011c24 <f_write+0x5a>
 8011c20:	2307      	movs	r3, #7
 8011c22:	e162      	b.n	8011eea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	699a      	ldr	r2, [r3, #24]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	441a      	add	r2, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	f080 814c 	bcs.w	8011ece <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	699b      	ldr	r3, [r3, #24]
 8011c3a:	43db      	mvns	r3, r3
 8011c3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011c3e:	e146      	b.n	8011ece <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	699b      	ldr	r3, [r3, #24]
 8011c44:	693a      	ldr	r2, [r7, #16]
 8011c46:	8992      	ldrh	r2, [r2, #12]
 8011c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c4c:	fb01 f202 	mul.w	r2, r1, r2
 8011c50:	1a9b      	subs	r3, r3, r2
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f040 80f1 	bne.w	8011e3a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	699b      	ldr	r3, [r3, #24]
 8011c5c:	693a      	ldr	r2, [r7, #16]
 8011c5e:	8992      	ldrh	r2, [r2, #12]
 8011c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c64:	693a      	ldr	r2, [r7, #16]
 8011c66:	8952      	ldrh	r2, [r2, #10]
 8011c68:	3a01      	subs	r2, #1
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d143      	bne.n	8011cfc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d10c      	bne.n	8011c96 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d11a      	bne.n	8011cbe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2100      	movs	r1, #0
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fe fbd9 	bl	8010444 <create_chain>
 8011c92:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c94:	e013      	b.n	8011cbe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d007      	beq.n	8011cae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f7fe fc65 	bl	8010574 <clmt_clust>
 8011caa:	62b8      	str	r0, [r7, #40]	; 0x28
 8011cac:	e007      	b.n	8011cbe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	69db      	ldr	r3, [r3, #28]
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7fe fbc4 	bl	8010444 <create_chain>
 8011cbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 8109 	beq.w	8011ed8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d104      	bne.n	8011cd6 <f_write+0x10c>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2202      	movs	r2, #2
 8011cd0:	755a      	strb	r2, [r3, #21]
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	e109      	b.n	8011eea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cdc:	d104      	bne.n	8011ce8 <f_write+0x11e>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	755a      	strb	r2, [r3, #21]
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	e100      	b.n	8011eea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d102      	bne.n	8011cfc <f_write+0x132>
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	7d1b      	ldrb	r3, [r3, #20]
 8011d00:	b25b      	sxtb	r3, r3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	da18      	bge.n	8011d38 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	7858      	ldrb	r0, [r3, #1]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6a1a      	ldr	r2, [r3, #32]
 8011d14:	2301      	movs	r3, #1
 8011d16:	f7fd fd95 	bl	800f844 <disk_write>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d004      	beq.n	8011d2a <f_write+0x160>
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2201      	movs	r2, #1
 8011d24:	755a      	strb	r2, [r3, #21]
 8011d26:	2301      	movs	r3, #1
 8011d28:	e0df      	b.n	8011eea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	7d1b      	ldrb	r3, [r3, #20]
 8011d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d38:	693a      	ldr	r2, [r7, #16]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	69db      	ldr	r3, [r3, #28]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4610      	mov	r0, r2
 8011d42:	f7fe f90b 	bl	800ff5c <clust2sect>
 8011d46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d104      	bne.n	8011d58 <f_write+0x18e>
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2202      	movs	r2, #2
 8011d52:	755a      	strb	r2, [r3, #21]
 8011d54:	2302      	movs	r3, #2
 8011d56:	e0c8      	b.n	8011eea <f_write+0x320>
			sect += csect;
 8011d58:	697a      	ldr	r2, [r7, #20]
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	899b      	ldrh	r3, [r3, #12]
 8011d64:	461a      	mov	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d043      	beq.n	8011dfc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	6a3b      	ldr	r3, [r7, #32]
 8011d78:	4413      	add	r3, r2
 8011d7a:	693a      	ldr	r2, [r7, #16]
 8011d7c:	8952      	ldrh	r2, [r2, #10]
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d905      	bls.n	8011d8e <f_write+0x1c4>
					cc = fs->csize - csect;
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	895b      	ldrh	r3, [r3, #10]
 8011d86:	461a      	mov	r2, r3
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	7858      	ldrb	r0, [r3, #1]
 8011d92:	6a3b      	ldr	r3, [r7, #32]
 8011d94:	697a      	ldr	r2, [r7, #20]
 8011d96:	69f9      	ldr	r1, [r7, #28]
 8011d98:	f7fd fd54 	bl	800f844 <disk_write>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d004      	beq.n	8011dac <f_write+0x1e2>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2201      	movs	r2, #1
 8011da6:	755a      	strb	r2, [r3, #21]
 8011da8:	2301      	movs	r3, #1
 8011daa:	e09e      	b.n	8011eea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	6a1a      	ldr	r2, [r3, #32]
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	6a3a      	ldr	r2, [r7, #32]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d918      	bls.n	8011dec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	6a1a      	ldr	r2, [r3, #32]
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	693a      	ldr	r2, [r7, #16]
 8011dca:	8992      	ldrh	r2, [r2, #12]
 8011dcc:	fb02 f303 	mul.w	r3, r2, r3
 8011dd0:	69fa      	ldr	r2, [r7, #28]
 8011dd2:	18d1      	adds	r1, r2, r3
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	899b      	ldrh	r3, [r3, #12]
 8011dd8:	461a      	mov	r2, r3
 8011dda:	f7fd fdf3 	bl	800f9c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	7d1b      	ldrb	r3, [r3, #20]
 8011de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011de6:	b2da      	uxtb	r2, r3
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	899b      	ldrh	r3, [r3, #12]
 8011df0:	461a      	mov	r2, r3
 8011df2:	6a3b      	ldr	r3, [r7, #32]
 8011df4:	fb02 f303 	mul.w	r3, r2, r3
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011dfa:	e04b      	b.n	8011e94 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	6a1b      	ldr	r3, [r3, #32]
 8011e00:	697a      	ldr	r2, [r7, #20]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d016      	beq.n	8011e34 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	699a      	ldr	r2, [r3, #24]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d210      	bcs.n	8011e34 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	7858      	ldrb	r0, [r3, #1]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	697a      	ldr	r2, [r7, #20]
 8011e20:	f7fd fcf0 	bl	800f804 <disk_read>
 8011e24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d004      	beq.n	8011e34 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	755a      	strb	r2, [r3, #21]
 8011e30:	2301      	movs	r3, #1
 8011e32:	e05a      	b.n	8011eea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	697a      	ldr	r2, [r7, #20]
 8011e38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	693a      	ldr	r2, [r7, #16]
 8011e46:	8992      	ldrh	r2, [r2, #12]
 8011e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e4c:	fb01 f202 	mul.w	r2, r1, r2
 8011e50:	1a9b      	subs	r3, r3, r2
 8011e52:	1ac3      	subs	r3, r0, r3
 8011e54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d901      	bls.n	8011e62 <f_write+0x298>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	699b      	ldr	r3, [r3, #24]
 8011e6c:	693a      	ldr	r2, [r7, #16]
 8011e6e:	8992      	ldrh	r2, [r2, #12]
 8011e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e74:	fb00 f202 	mul.w	r2, r0, r2
 8011e78:	1a9b      	subs	r3, r3, r2
 8011e7a:	440b      	add	r3, r1
 8011e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e7e:	69f9      	ldr	r1, [r7, #28]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fd fd9f 	bl	800f9c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7d1b      	ldrb	r3, [r3, #20]
 8011e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011e94:	69fa      	ldr	r2, [r7, #28]
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	4413      	add	r3, r2
 8011e9a:	61fb      	str	r3, [r7, #28]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	699a      	ldr	r2, [r3, #24]
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea2:	441a      	add	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	619a      	str	r2, [r3, #24]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	68da      	ldr	r2, [r3, #12]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	699b      	ldr	r3, [r3, #24]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	bf38      	it	cc
 8011eb4:	461a      	movcc	r2, r3
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	60da      	str	r2, [r3, #12]
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	441a      	add	r2, r3
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	601a      	str	r2, [r3, #0]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f47f aeb5 	bne.w	8011c40 <f_write+0x76>
 8011ed6:	e000      	b.n	8011eda <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ed8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	7d1b      	ldrb	r3, [r3, #20]
 8011ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3730      	adds	r7, #48	; 0x30
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b086      	sub	sp, #24
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f107 0208 	add.w	r2, r7, #8
 8011f00:	4611      	mov	r1, r2
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ff faba 	bl	801147c <validate>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f0c:	7dfb      	ldrb	r3, [r7, #23]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d168      	bne.n	8011fe4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	7d1b      	ldrb	r3, [r3, #20]
 8011f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d062      	beq.n	8011fe4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	7d1b      	ldrb	r3, [r3, #20]
 8011f22:	b25b      	sxtb	r3, r3
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	da15      	bge.n	8011f54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	7858      	ldrb	r0, [r3, #1]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6a1a      	ldr	r2, [r3, #32]
 8011f36:	2301      	movs	r3, #1
 8011f38:	f7fd fc84 	bl	800f844 <disk_write>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <f_sync+0x54>
 8011f42:	2301      	movs	r3, #1
 8011f44:	e04f      	b.n	8011fe6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
 8011f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011f54:	f7fd faaa 	bl	800f4ac <get_fattime>
 8011f58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f60:	4619      	mov	r1, r3
 8011f62:	4610      	mov	r0, r2
 8011f64:	f7fd ff5c 	bl	800fe20 <move_window>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f6c:	7dfb      	ldrb	r3, [r7, #23]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d138      	bne.n	8011fe4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	330b      	adds	r3, #11
 8011f7c:	781a      	ldrb	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	330b      	adds	r3, #11
 8011f82:	f042 0220 	orr.w	r2, r2, #32
 8011f86:	b2d2      	uxtb	r2, r2
 8011f88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6818      	ldr	r0, [r3, #0]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	461a      	mov	r2, r3
 8011f94:	68f9      	ldr	r1, [r7, #12]
 8011f96:	f7fe fcea 	bl	801096e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f103 021c 	add.w	r2, r3, #28
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	4610      	mov	r0, r2
 8011fa8:	f7fd fce0 	bl	800f96c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	3316      	adds	r3, #22
 8011fb0:	6939      	ldr	r1, [r7, #16]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fd fcda 	bl	800f96c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3312      	adds	r3, #18
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fd fcb9 	bl	800f936 <st_word>
					fs->wflag = 1;
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fd ff55 	bl	800fe7c <sync_fs>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	7d1b      	ldrb	r3, [r3, #20]
 8011fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b084      	sub	sp, #16
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff ff7b 	bl	8011ef2 <f_sync>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012000:	7bfb      	ldrb	r3, [r7, #15]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d118      	bne.n	8012038 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f107 0208 	add.w	r2, r7, #8
 801200c:	4611      	mov	r1, r2
 801200e:	4618      	mov	r0, r3
 8012010:	f7ff fa34 	bl	801147c <validate>
 8012014:	4603      	mov	r3, r0
 8012016:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d10c      	bne.n	8012038 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	4618      	mov	r0, r3
 8012024:	f7fd fe58 	bl	800fcd8 <dec_lock>
 8012028:	4603      	mov	r3, r0
 801202a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801202c:	7bfb      	ldrb	r3, [r7, #15]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d102      	bne.n	8012038 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012038:	7bfb      	ldrb	r3, [r7, #15]
}
 801203a:	4618      	mov	r0, r3
 801203c:	3710      	adds	r7, #16
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}

08012042 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012042:	b580      	push	{r7, lr}
 8012044:	b086      	sub	sp, #24
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
 801204a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d101      	bne.n	8012056 <f_opendir+0x14>
 8012052:	2309      	movs	r3, #9
 8012054:	e064      	b.n	8012120 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801205a:	f107 010c 	add.w	r1, r7, #12
 801205e:	463b      	mov	r3, r7
 8012060:	2200      	movs	r2, #0
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe ff8a 	bl	8010f7c <find_volume>
 8012068:	4603      	mov	r3, r0
 801206a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801206c:	7dfb      	ldrb	r3, [r7, #23]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d14f      	bne.n	8012112 <f_opendir+0xd0>
		obj->fs = fs;
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7fe fe6d 	bl	8010d5c <follow_path>
 8012082:	4603      	mov	r3, r0
 8012084:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012086:	7dfb      	ldrb	r3, [r7, #23]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d13d      	bne.n	8012108 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012092:	b25b      	sxtb	r3, r3
 8012094:	2b00      	cmp	r3, #0
 8012096:	db12      	blt.n	80120be <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	799b      	ldrb	r3, [r3, #6]
 801209c:	f003 0310 	and.w	r3, r3, #16
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00a      	beq.n	80120ba <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6a1b      	ldr	r3, [r3, #32]
 80120aa:	4619      	mov	r1, r3
 80120ac:	4610      	mov	r0, r2
 80120ae:	f7fe fc3f 	bl	8010930 <ld_clust>
 80120b2:	4602      	mov	r2, r0
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	609a      	str	r2, [r3, #8]
 80120b8:	e001      	b.n	80120be <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80120ba:	2305      	movs	r3, #5
 80120bc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80120be:	7dfb      	ldrb	r3, [r7, #23]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d121      	bne.n	8012108 <f_opendir+0xc6>
				obj->id = fs->id;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	88da      	ldrh	r2, [r3, #6]
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80120cc:	2100      	movs	r1, #0
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7fe fa88 	bl	80105e4 <dir_sdi>
 80120d4:	4603      	mov	r3, r0
 80120d6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80120d8:	7dfb      	ldrb	r3, [r7, #23]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d114      	bne.n	8012108 <f_opendir+0xc6>
					if (obj->sclust) {
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00d      	beq.n	8012102 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80120e6:	2100      	movs	r1, #0
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f7fd fd67 	bl	800fbbc <inc_lock>
 80120ee:	4602      	mov	r2, r0
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	691b      	ldr	r3, [r3, #16]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d105      	bne.n	8012108 <f_opendir+0xc6>
 80120fc:	2312      	movs	r3, #18
 80120fe:	75fb      	strb	r3, [r7, #23]
 8012100:	e002      	b.n	8012108 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	2200      	movs	r2, #0
 8012106:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012108:	7dfb      	ldrb	r3, [r7, #23]
 801210a:	2b04      	cmp	r3, #4
 801210c:	d101      	bne.n	8012112 <f_opendir+0xd0>
 801210e:	2305      	movs	r3, #5
 8012110:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d002      	beq.n	801211e <f_opendir+0xdc>
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	2200      	movs	r2, #0
 801211c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012120:	4618      	mov	r0, r3
 8012122:	3718      	adds	r7, #24
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f107 0208 	add.w	r2, r7, #8
 8012136:	4611      	mov	r1, r2
 8012138:	4618      	mov	r0, r3
 801213a:	f7ff f99f 	bl	801147c <validate>
 801213e:	4603      	mov	r3, r0
 8012140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012142:	7bfb      	ldrb	r3, [r7, #15]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d110      	bne.n	801216a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	691b      	ldr	r3, [r3, #16]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	691b      	ldr	r3, [r3, #16]
 8012154:	4618      	mov	r0, r3
 8012156:	f7fd fdbf 	bl	800fcd8 <dec_lock>
 801215a:	4603      	mov	r3, r0
 801215c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801215e:	7bfb      	ldrb	r3, [r7, #15]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d102      	bne.n	801216a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801216a:	7bfb      	ldrb	r3, [r7, #15]
}
 801216c:	4618      	mov	r0, r3
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f107 0208 	add.w	r2, r7, #8
 8012184:	4611      	mov	r1, r2
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff f978 	bl	801147c <validate>
 801218c:	4603      	mov	r3, r0
 801218e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d126      	bne.n	80121e4 <f_readdir+0x70>
		if (!fno) {
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d106      	bne.n	80121aa <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801219c:	2100      	movs	r1, #0
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7fe fa20 	bl	80105e4 <dir_sdi>
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]
 80121a8:	e01c      	b.n	80121e4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80121aa:	2100      	movs	r1, #0
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7fe fbfe 	bl	80109ae <dir_read>
 80121b2:	4603      	mov	r3, r0
 80121b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80121b6:	7bfb      	ldrb	r3, [r7, #15]
 80121b8:	2b04      	cmp	r3, #4
 80121ba:	d101      	bne.n	80121c0 <f_readdir+0x4c>
 80121bc:	2300      	movs	r3, #0
 80121be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80121c0:	7bfb      	ldrb	r3, [r7, #15]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d10e      	bne.n	80121e4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7fe fcd4 	bl	8010b76 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80121ce:	2100      	movs	r1, #0
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7fe fa90 	bl	80106f6 <dir_next>
 80121d6:	4603      	mov	r3, r0
 80121d8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80121da:	7bfb      	ldrb	r3, [r7, #15]
 80121dc:	2b04      	cmp	r3, #4
 80121de:	d101      	bne.n	80121e4 <f_readdir+0x70>
 80121e0:	2300      	movs	r3, #0
 80121e2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b090      	sub	sp, #64	; 0x40
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
 80121f6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80121f8:	f107 010c 	add.w	r1, r7, #12
 80121fc:	1d3b      	adds	r3, r7, #4
 80121fe:	2200      	movs	r2, #0
 8012200:	4618      	mov	r0, r3
 8012202:	f7fe febb 	bl	8010f7c <find_volume>
 8012206:	4603      	mov	r3, r0
 8012208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801220c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012210:	2b00      	cmp	r3, #0
 8012212:	d11f      	bne.n	8012254 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	f107 030c 	add.w	r3, r7, #12
 801221a:	4611      	mov	r1, r2
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fd9d 	bl	8010d5c <follow_path>
 8012222:	4603      	mov	r3, r0
 8012224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8012228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801222c:	2b00      	cmp	r3, #0
 801222e:	d111      	bne.n	8012254 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012230:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012234:	b25b      	sxtb	r3, r3
 8012236:	2b00      	cmp	r3, #0
 8012238:	da03      	bge.n	8012242 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801223a:	2306      	movs	r3, #6
 801223c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012240:	e008      	b.n	8012254 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d005      	beq.n	8012254 <f_stat+0x66>
 8012248:	f107 030c 	add.w	r3, r7, #12
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe fc91 	bl	8010b76 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8012254:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012258:	4618      	mov	r0, r3
 801225a:	3740      	adds	r7, #64	; 0x40
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b092      	sub	sp, #72	; 0x48
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801226c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012270:	f107 030c 	add.w	r3, r7, #12
 8012274:	2200      	movs	r2, #0
 8012276:	4618      	mov	r0, r3
 8012278:	f7fe fe80 	bl	8010f7c <find_volume>
 801227c:	4603      	mov	r3, r0
 801227e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8012282:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012286:	2b00      	cmp	r3, #0
 8012288:	f040 8099 	bne.w	80123be <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8012292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012294:	695a      	ldr	r2, [r3, #20]
 8012296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012298:	699b      	ldr	r3, [r3, #24]
 801229a:	3b02      	subs	r3, #2
 801229c:	429a      	cmp	r2, r3
 801229e:	d804      	bhi.n	80122aa <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	695a      	ldr	r2, [r3, #20]
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	601a      	str	r2, [r3, #0]
 80122a8:	e089      	b.n	80123be <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80122aa:	2300      	movs	r3, #0
 80122ac:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d128      	bne.n	8012308 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80122b6:	2302      	movs	r3, #2
 80122b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122bc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80122be:	f107 0314 	add.w	r3, r7, #20
 80122c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fd fe68 	bl	800ff9a <get_fat>
 80122ca:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122d2:	d103      	bne.n	80122dc <f_getfree+0x7c>
 80122d4:	2301      	movs	r3, #1
 80122d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80122da:	e063      	b.n	80123a4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80122dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d103      	bne.n	80122ea <f_getfree+0x8a>
 80122e2:	2302      	movs	r3, #2
 80122e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80122e8:	e05c      	b.n	80123a4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d102      	bne.n	80122f6 <f_getfree+0x96>
 80122f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122f2:	3301      	adds	r3, #1
 80122f4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80122f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f8:	3301      	adds	r3, #1
 80122fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	699b      	ldr	r3, [r3, #24]
 8012300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012302:	429a      	cmp	r2, r3
 8012304:	d3db      	bcc.n	80122be <f_getfree+0x5e>
 8012306:	e04d      	b.n	80123a4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8012308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230a:	699b      	ldr	r3, [r3, #24]
 801230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012312:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8012314:	2300      	movs	r3, #0
 8012316:	637b      	str	r3, [r7, #52]	; 0x34
 8012318:	2300      	movs	r3, #0
 801231a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801231e:	2b00      	cmp	r3, #0
 8012320:	d113      	bne.n	801234a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8012322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	1c5a      	adds	r2, r3, #1
 8012328:	63ba      	str	r2, [r7, #56]	; 0x38
 801232a:	4619      	mov	r1, r3
 801232c:	f7fd fd78 	bl	800fe20 <move_window>
 8012330:	4603      	mov	r3, r0
 8012332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8012336:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801233a:	2b00      	cmp	r3, #0
 801233c:	d131      	bne.n	80123a2 <f_getfree+0x142>
							p = fs->win;
 801233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012340:	3334      	adds	r3, #52	; 0x34
 8012342:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8012344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012346:	899b      	ldrh	r3, [r3, #12]
 8012348:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	2b02      	cmp	r3, #2
 8012350:	d10f      	bne.n	8012372 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8012352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012354:	f7fd fab4 	bl	800f8c0 <ld_word>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d102      	bne.n	8012364 <f_getfree+0x104>
 801235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012360:	3301      	adds	r3, #1
 8012362:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8012364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012366:	3302      	adds	r3, #2
 8012368:	633b      	str	r3, [r7, #48]	; 0x30
 801236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236c:	3b02      	subs	r3, #2
 801236e:	637b      	str	r3, [r7, #52]	; 0x34
 8012370:	e010      	b.n	8012394 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8012372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012374:	f7fd fabc 	bl	800f8f0 <ld_dword>
 8012378:	4603      	mov	r3, r0
 801237a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <f_getfree+0x128>
 8012382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012384:	3301      	adds	r3, #1
 8012386:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	3304      	adds	r3, #4
 801238c:	633b      	str	r3, [r7, #48]	; 0x30
 801238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012390:	3b04      	subs	r3, #4
 8012392:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8012394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012396:	3b01      	subs	r3, #1
 8012398:	63fb      	str	r3, [r7, #60]	; 0x3c
 801239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1bd      	bne.n	801231c <f_getfree+0xbc>
 80123a0:	e000      	b.n	80123a4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80123a2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123a8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80123aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123ae:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80123b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b2:	791a      	ldrb	r2, [r3, #4]
 80123b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b6:	f042 0201 	orr.w	r2, r2, #1
 80123ba:	b2d2      	uxtb	r2, r2
 80123bc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80123be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3748      	adds	r7, #72	; 0x48
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b096      	sub	sp, #88	; 0x58
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80123d2:	f107 0108 	add.w	r1, r7, #8
 80123d6:	1d3b      	adds	r3, r7, #4
 80123d8:	2202      	movs	r2, #2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fe fdce 	bl	8010f7c <find_volume>
 80123e0:	4603      	mov	r3, r0
 80123e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80123ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f040 80f2 	bne.w	80125d8 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	f107 030c 	add.w	r3, r7, #12
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fe fcad 	bl	8010d5c <follow_path>
 8012402:	4603      	mov	r3, r0
 8012404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801240c:	2b00      	cmp	r3, #0
 801240e:	d102      	bne.n	8012416 <f_mkdir+0x4c>
 8012410:	2308      	movs	r3, #8
 8012412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012416:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801241a:	2b04      	cmp	r3, #4
 801241c:	f040 80dc 	bne.w	80125d8 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012420:	f107 030c 	add.w	r3, r7, #12
 8012424:	2100      	movs	r1, #0
 8012426:	4618      	mov	r0, r3
 8012428:	f7fe f80c 	bl	8010444 <create_chain>
 801242c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	895b      	ldrh	r3, [r3, #10]
 8012432:	461a      	mov	r2, r3
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	899b      	ldrh	r3, [r3, #12]
 8012438:	fb02 f303 	mul.w	r3, r2, r3
 801243c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801243e:	2300      	movs	r3, #0
 8012440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012446:	2b00      	cmp	r3, #0
 8012448:	d102      	bne.n	8012450 <f_mkdir+0x86>
 801244a:	2307      	movs	r3, #7
 801244c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012452:	2b01      	cmp	r3, #1
 8012454:	d102      	bne.n	801245c <f_mkdir+0x92>
 8012456:	2302      	movs	r3, #2
 8012458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801245c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012462:	d102      	bne.n	801246a <f_mkdir+0xa0>
 8012464:	2301      	movs	r3, #1
 8012466:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801246a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801246e:	2b00      	cmp	r3, #0
 8012470:	d106      	bne.n	8012480 <f_mkdir+0xb6>
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	4618      	mov	r0, r3
 8012476:	f7fd fc8f 	bl	800fd98 <sync_window>
 801247a:	4603      	mov	r3, r0
 801247c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012480:	f7fd f814 	bl	800f4ac <get_fattime>
 8012484:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801248a:	2b00      	cmp	r3, #0
 801248c:	d16c      	bne.n	8012568 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012492:	4618      	mov	r0, r3
 8012494:	f7fd fd62 	bl	800ff5c <clust2sect>
 8012498:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	3334      	adds	r3, #52	; 0x34
 801249e:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	899b      	ldrh	r3, [r3, #12]
 80124a4:	461a      	mov	r2, r3
 80124a6:	2100      	movs	r1, #0
 80124a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80124aa:	f7fd faac 	bl	800fa06 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80124ae:	220b      	movs	r2, #11
 80124b0:	2120      	movs	r1, #32
 80124b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80124b4:	f7fd faa7 	bl	800fa06 <mem_set>
					dir[DIR_Name] = '.';
 80124b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ba:	222e      	movs	r2, #46	; 0x2e
 80124bc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80124be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c0:	330b      	adds	r3, #11
 80124c2:	2210      	movs	r2, #16
 80124c4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80124c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c8:	3316      	adds	r3, #22
 80124ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fd fa4d 	bl	800f96c <st_dword>
					st_clust(fs, dir, dcl);
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fa48 	bl	801096e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80124de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124e0:	3320      	adds	r3, #32
 80124e2:	2220      	movs	r2, #32
 80124e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7fd fa6c 	bl	800f9c4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80124ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ee:	3321      	adds	r3, #33	; 0x21
 80124f0:	222e      	movs	r2, #46	; 0x2e
 80124f2:	701a      	strb	r2, [r3, #0]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b03      	cmp	r3, #3
 80124fe:	d106      	bne.n	801250e <f_mkdir+0x144>
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012506:	429a      	cmp	r2, r3
 8012508:	d101      	bne.n	801250e <f_mkdir+0x144>
 801250a:	2300      	movs	r3, #0
 801250c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801250e:	68b8      	ldr	r0, [r7, #8]
 8012510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012512:	3320      	adds	r3, #32
 8012514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012516:	4619      	mov	r1, r3
 8012518:	f7fe fa29 	bl	801096e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	895b      	ldrh	r3, [r3, #10]
 8012520:	653b      	str	r3, [r7, #80]	; 0x50
 8012522:	e01c      	b.n	801255e <f_mkdir+0x194>
					fs->winsect = dsc++;
 8012524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012526:	1c5a      	adds	r2, r3, #1
 8012528:	64fa      	str	r2, [r7, #76]	; 0x4c
 801252a:	68ba      	ldr	r2, [r7, #8]
 801252c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	2201      	movs	r2, #1
 8012532:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	4618      	mov	r0, r3
 8012538:	f7fd fc2e 	bl	800fd98 <sync_window>
 801253c:	4603      	mov	r3, r0
 801253e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012542:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012546:	2b00      	cmp	r3, #0
 8012548:	d10d      	bne.n	8012566 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	899b      	ldrh	r3, [r3, #12]
 801254e:	461a      	mov	r2, r3
 8012550:	2100      	movs	r1, #0
 8012552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012554:	f7fd fa57 	bl	800fa06 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801255a:	3b01      	subs	r3, #1
 801255c:	653b      	str	r3, [r7, #80]	; 0x50
 801255e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012560:	2b00      	cmp	r3, #0
 8012562:	d1df      	bne.n	8012524 <f_mkdir+0x15a>
 8012564:	e000      	b.n	8012568 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8012566:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801256c:	2b00      	cmp	r3, #0
 801256e:	d107      	bne.n	8012580 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012570:	f107 030c 	add.w	r3, r7, #12
 8012574:	4618      	mov	r0, r3
 8012576:	f7fe facc 	bl	8010b12 <dir_register>
 801257a:	4603      	mov	r3, r0
 801257c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012584:	2b00      	cmp	r3, #0
 8012586:	d120      	bne.n	80125ca <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258e:	3316      	adds	r3, #22
 8012590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012592:	4618      	mov	r0, r3
 8012594:	f7fd f9ea 	bl	800f96c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801259c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fe f9e5 	bl	801096e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80125a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a6:	330b      	adds	r3, #11
 80125a8:	2210      	movs	r2, #16
 80125aa:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	2201      	movs	r2, #1
 80125b0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80125b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10e      	bne.n	80125d8 <f_mkdir+0x20e>
					res = sync_fs(fs);
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fd fc5d 	bl	800fe7c <sync_fs>
 80125c2:	4603      	mov	r3, r0
 80125c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80125c8:	e006      	b.n	80125d8 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80125ca:	f107 030c 	add.w	r3, r7, #12
 80125ce:	2200      	movs	r2, #0
 80125d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fd fed1 	bl	801037a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80125d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3758      	adds	r7, #88	; 0x58
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b087      	sub	sp, #28
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	4613      	mov	r3, r2
 80125f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80125f2:	2301      	movs	r3, #1
 80125f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80125fa:	4b1f      	ldr	r3, [pc, #124]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 80125fc:	7a5b      	ldrb	r3, [r3, #9]
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d131      	bne.n	8012668 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012604:	4b1c      	ldr	r3, [pc, #112]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 8012606:	7a5b      	ldrb	r3, [r3, #9]
 8012608:	b2db      	uxtb	r3, r3
 801260a:	461a      	mov	r2, r3
 801260c:	4b1a      	ldr	r3, [pc, #104]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 801260e:	2100      	movs	r1, #0
 8012610:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012612:	4b19      	ldr	r3, [pc, #100]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 8012614:	7a5b      	ldrb	r3, [r3, #9]
 8012616:	b2db      	uxtb	r3, r3
 8012618:	4a17      	ldr	r2, [pc, #92]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	4413      	add	r3, r2
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012622:	4b15      	ldr	r3, [pc, #84]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 8012624:	7a5b      	ldrb	r3, [r3, #9]
 8012626:	b2db      	uxtb	r3, r3
 8012628:	461a      	mov	r2, r3
 801262a:	4b13      	ldr	r3, [pc, #76]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 801262c:	4413      	add	r3, r2
 801262e:	79fa      	ldrb	r2, [r7, #7]
 8012630:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012632:	4b11      	ldr	r3, [pc, #68]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 8012634:	7a5b      	ldrb	r3, [r3, #9]
 8012636:	b2db      	uxtb	r3, r3
 8012638:	1c5a      	adds	r2, r3, #1
 801263a:	b2d1      	uxtb	r1, r2
 801263c:	4a0e      	ldr	r2, [pc, #56]	; (8012678 <FATFS_LinkDriverEx+0x94>)
 801263e:	7251      	strb	r1, [r2, #9]
 8012640:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012642:	7dbb      	ldrb	r3, [r7, #22]
 8012644:	3330      	adds	r3, #48	; 0x30
 8012646:	b2da      	uxtb	r2, r3
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	3301      	adds	r3, #1
 8012650:	223a      	movs	r2, #58	; 0x3a
 8012652:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	3302      	adds	r3, #2
 8012658:	222f      	movs	r2, #47	; 0x2f
 801265a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	3303      	adds	r3, #3
 8012660:	2200      	movs	r2, #0
 8012662:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012668:	7dfb      	ldrb	r3, [r7, #23]
}
 801266a:	4618      	mov	r0, r3
 801266c:	371c      	adds	r7, #28
 801266e:	46bd      	mov	sp, r7
 8012670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop
 8012678:	20005dc4 	.word	0x20005dc4

0801267c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b082      	sub	sp, #8
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012686:	2200      	movs	r2, #0
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff ffaa 	bl	80125e4 <FATFS_LinkDriverEx>
 8012690:	4603      	mov	r3, r0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <asctime>:
 801269c:	4b0d      	ldr	r3, [pc, #52]	; (80126d4 <asctime+0x38>)
 801269e:	b570      	push	{r4, r5, r6, lr}
 80126a0:	681d      	ldr	r5, [r3, #0]
 80126a2:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80126a4:	4604      	mov	r4, r0
 80126a6:	b976      	cbnz	r6, 80126c6 <asctime+0x2a>
 80126a8:	201a      	movs	r0, #26
 80126aa:	f000 f8a1 	bl	80127f0 <malloc>
 80126ae:	4602      	mov	r2, r0
 80126b0:	6428      	str	r0, [r5, #64]	; 0x40
 80126b2:	b920      	cbnz	r0, 80126be <asctime+0x22>
 80126b4:	4b08      	ldr	r3, [pc, #32]	; (80126d8 <asctime+0x3c>)
 80126b6:	4809      	ldr	r0, [pc, #36]	; (80126dc <asctime+0x40>)
 80126b8:	2137      	movs	r1, #55	; 0x37
 80126ba:	f000 f837 	bl	801272c <__assert_func>
 80126be:	221a      	movs	r2, #26
 80126c0:	4631      	mov	r1, r6
 80126c2:	f000 f8b3 	bl	801282c <memset>
 80126c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80126c8:	4620      	mov	r0, r4
 80126ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126ce:	f000 b807 	b.w	80126e0 <asctime_r>
 80126d2:	bf00      	nop
 80126d4:	20000320 	.word	0x20000320
 80126d8:	080585e8 	.word	0x080585e8
 80126dc:	080585ff 	.word	0x080585ff

080126e0 <asctime_r>:
 80126e0:	b510      	push	{r4, lr}
 80126e2:	460c      	mov	r4, r1
 80126e4:	6941      	ldr	r1, [r0, #20]
 80126e6:	6903      	ldr	r3, [r0, #16]
 80126e8:	6982      	ldr	r2, [r0, #24]
 80126ea:	b086      	sub	sp, #24
 80126ec:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80126f0:	9104      	str	r1, [sp, #16]
 80126f2:	6801      	ldr	r1, [r0, #0]
 80126f4:	9103      	str	r1, [sp, #12]
 80126f6:	6841      	ldr	r1, [r0, #4]
 80126f8:	9102      	str	r1, [sp, #8]
 80126fa:	6881      	ldr	r1, [r0, #8]
 80126fc:	9101      	str	r1, [sp, #4]
 80126fe:	68c1      	ldr	r1, [r0, #12]
 8012700:	9100      	str	r1, [sp, #0]
 8012702:	4907      	ldr	r1, [pc, #28]	; (8012720 <asctime_r+0x40>)
 8012704:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012708:	440b      	add	r3, r1
 801270a:	4906      	ldr	r1, [pc, #24]	; (8012724 <asctime_r+0x44>)
 801270c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012710:	440a      	add	r2, r1
 8012712:	4620      	mov	r0, r4
 8012714:	4904      	ldr	r1, [pc, #16]	; (8012728 <asctime_r+0x48>)
 8012716:	f001 f9b7 	bl	8013a88 <siprintf>
 801271a:	4620      	mov	r0, r4
 801271c:	b006      	add	sp, #24
 801271e:	bd10      	pop	{r4, pc}
 8012720:	08058690 	.word	0x08058690
 8012724:	0805867b 	.word	0x0805867b
 8012728:	0805865b 	.word	0x0805865b

0801272c <__assert_func>:
 801272c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801272e:	4614      	mov	r4, r2
 8012730:	461a      	mov	r2, r3
 8012732:	4b09      	ldr	r3, [pc, #36]	; (8012758 <__assert_func+0x2c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4605      	mov	r5, r0
 8012738:	68d8      	ldr	r0, [r3, #12]
 801273a:	b14c      	cbz	r4, 8012750 <__assert_func+0x24>
 801273c:	4b07      	ldr	r3, [pc, #28]	; (801275c <__assert_func+0x30>)
 801273e:	9100      	str	r1, [sp, #0]
 8012740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012744:	4906      	ldr	r1, [pc, #24]	; (8012760 <__assert_func+0x34>)
 8012746:	462b      	mov	r3, r5
 8012748:	f000 f81c 	bl	8012784 <fiprintf>
 801274c:	f002 fc9e 	bl	801508c <abort>
 8012750:	4b04      	ldr	r3, [pc, #16]	; (8012764 <__assert_func+0x38>)
 8012752:	461c      	mov	r4, r3
 8012754:	e7f3      	b.n	801273e <__assert_func+0x12>
 8012756:	bf00      	nop
 8012758:	20000320 	.word	0x20000320
 801275c:	080586b4 	.word	0x080586b4
 8012760:	080586c1 	.word	0x080586c1
 8012764:	0805867a 	.word	0x0805867a

08012768 <atof>:
 8012768:	2100      	movs	r1, #0
 801276a:	f002 b88b 	b.w	8014884 <strtod>

0801276e <atoi>:
 801276e:	220a      	movs	r2, #10
 8012770:	2100      	movs	r1, #0
 8012772:	f002 b973 	b.w	8014a5c <strtol>
	...

08012778 <__errno>:
 8012778:	4b01      	ldr	r3, [pc, #4]	; (8012780 <__errno+0x8>)
 801277a:	6818      	ldr	r0, [r3, #0]
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	20000320 	.word	0x20000320

08012784 <fiprintf>:
 8012784:	b40e      	push	{r1, r2, r3}
 8012786:	b503      	push	{r0, r1, lr}
 8012788:	4601      	mov	r1, r0
 801278a:	ab03      	add	r3, sp, #12
 801278c:	4805      	ldr	r0, [pc, #20]	; (80127a4 <fiprintf+0x20>)
 801278e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012792:	6800      	ldr	r0, [r0, #0]
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	f000 fbcd 	bl	8012f34 <_vfiprintf_r>
 801279a:	b002      	add	sp, #8
 801279c:	f85d eb04 	ldr.w	lr, [sp], #4
 80127a0:	b003      	add	sp, #12
 80127a2:	4770      	bx	lr
 80127a4:	20000320 	.word	0x20000320

080127a8 <__libc_init_array>:
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	4d0d      	ldr	r5, [pc, #52]	; (80127e0 <__libc_init_array+0x38>)
 80127ac:	4c0d      	ldr	r4, [pc, #52]	; (80127e4 <__libc_init_array+0x3c>)
 80127ae:	1b64      	subs	r4, r4, r5
 80127b0:	10a4      	asrs	r4, r4, #2
 80127b2:	2600      	movs	r6, #0
 80127b4:	42a6      	cmp	r6, r4
 80127b6:	d109      	bne.n	80127cc <__libc_init_array+0x24>
 80127b8:	4d0b      	ldr	r5, [pc, #44]	; (80127e8 <__libc_init_array+0x40>)
 80127ba:	4c0c      	ldr	r4, [pc, #48]	; (80127ec <__libc_init_array+0x44>)
 80127bc:	f008 f892 	bl	801a8e4 <_init>
 80127c0:	1b64      	subs	r4, r4, r5
 80127c2:	10a4      	asrs	r4, r4, #2
 80127c4:	2600      	movs	r6, #0
 80127c6:	42a6      	cmp	r6, r4
 80127c8:	d105      	bne.n	80127d6 <__libc_init_array+0x2e>
 80127ca:	bd70      	pop	{r4, r5, r6, pc}
 80127cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80127d0:	4798      	blx	r3
 80127d2:	3601      	adds	r6, #1
 80127d4:	e7ee      	b.n	80127b4 <__libc_init_array+0xc>
 80127d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80127da:	4798      	blx	r3
 80127dc:	3601      	adds	r6, #1
 80127de:	e7f2      	b.n	80127c6 <__libc_init_array+0x1e>
 80127e0:	08058ec0 	.word	0x08058ec0
 80127e4:	08058ec0 	.word	0x08058ec0
 80127e8:	08058ec0 	.word	0x08058ec0
 80127ec:	08058ec4 	.word	0x08058ec4

080127f0 <malloc>:
 80127f0:	4b02      	ldr	r3, [pc, #8]	; (80127fc <malloc+0xc>)
 80127f2:	4601      	mov	r1, r0
 80127f4:	6818      	ldr	r0, [r3, #0]
 80127f6:	f000 baff 	b.w	8012df8 <_malloc_r>
 80127fa:	bf00      	nop
 80127fc:	20000320 	.word	0x20000320

08012800 <free>:
 8012800:	4b02      	ldr	r3, [pc, #8]	; (801280c <free+0xc>)
 8012802:	4601      	mov	r1, r0
 8012804:	6818      	ldr	r0, [r3, #0]
 8012806:	f000 ba8b 	b.w	8012d20 <_free_r>
 801280a:	bf00      	nop
 801280c:	20000320 	.word	0x20000320

08012810 <memcpy>:
 8012810:	440a      	add	r2, r1
 8012812:	4291      	cmp	r1, r2
 8012814:	f100 33ff 	add.w	r3, r0, #4294967295
 8012818:	d100      	bne.n	801281c <memcpy+0xc>
 801281a:	4770      	bx	lr
 801281c:	b510      	push	{r4, lr}
 801281e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012826:	4291      	cmp	r1, r2
 8012828:	d1f9      	bne.n	801281e <memcpy+0xe>
 801282a:	bd10      	pop	{r4, pc}

0801282c <memset>:
 801282c:	4402      	add	r2, r0
 801282e:	4603      	mov	r3, r0
 8012830:	4293      	cmp	r3, r2
 8012832:	d100      	bne.n	8012836 <memset+0xa>
 8012834:	4770      	bx	lr
 8012836:	f803 1b01 	strb.w	r1, [r3], #1
 801283a:	e7f9      	b.n	8012830 <memset+0x4>

0801283c <validate_structure>:
 801283c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801283e:	6801      	ldr	r1, [r0, #0]
 8012840:	293b      	cmp	r1, #59	; 0x3b
 8012842:	4604      	mov	r4, r0
 8012844:	d911      	bls.n	801286a <validate_structure+0x2e>
 8012846:	223c      	movs	r2, #60	; 0x3c
 8012848:	4668      	mov	r0, sp
 801284a:	f002 fc37 	bl	80150bc <div>
 801284e:	9a01      	ldr	r2, [sp, #4]
 8012850:	6863      	ldr	r3, [r4, #4]
 8012852:	9900      	ldr	r1, [sp, #0]
 8012854:	2a00      	cmp	r2, #0
 8012856:	440b      	add	r3, r1
 8012858:	6063      	str	r3, [r4, #4]
 801285a:	bfbb      	ittet	lt
 801285c:	323c      	addlt	r2, #60	; 0x3c
 801285e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012862:	6022      	strge	r2, [r4, #0]
 8012864:	6022      	strlt	r2, [r4, #0]
 8012866:	bfb8      	it	lt
 8012868:	6063      	strlt	r3, [r4, #4]
 801286a:	6861      	ldr	r1, [r4, #4]
 801286c:	293b      	cmp	r1, #59	; 0x3b
 801286e:	d911      	bls.n	8012894 <validate_structure+0x58>
 8012870:	223c      	movs	r2, #60	; 0x3c
 8012872:	4668      	mov	r0, sp
 8012874:	f002 fc22 	bl	80150bc <div>
 8012878:	9a01      	ldr	r2, [sp, #4]
 801287a:	68a3      	ldr	r3, [r4, #8]
 801287c:	9900      	ldr	r1, [sp, #0]
 801287e:	2a00      	cmp	r2, #0
 8012880:	440b      	add	r3, r1
 8012882:	60a3      	str	r3, [r4, #8]
 8012884:	bfbb      	ittet	lt
 8012886:	323c      	addlt	r2, #60	; 0x3c
 8012888:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801288c:	6062      	strge	r2, [r4, #4]
 801288e:	6062      	strlt	r2, [r4, #4]
 8012890:	bfb8      	it	lt
 8012892:	60a3      	strlt	r3, [r4, #8]
 8012894:	68a1      	ldr	r1, [r4, #8]
 8012896:	2917      	cmp	r1, #23
 8012898:	d911      	bls.n	80128be <validate_structure+0x82>
 801289a:	2218      	movs	r2, #24
 801289c:	4668      	mov	r0, sp
 801289e:	f002 fc0d 	bl	80150bc <div>
 80128a2:	9a01      	ldr	r2, [sp, #4]
 80128a4:	68e3      	ldr	r3, [r4, #12]
 80128a6:	9900      	ldr	r1, [sp, #0]
 80128a8:	2a00      	cmp	r2, #0
 80128aa:	440b      	add	r3, r1
 80128ac:	60e3      	str	r3, [r4, #12]
 80128ae:	bfbb      	ittet	lt
 80128b0:	3218      	addlt	r2, #24
 80128b2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80128b6:	60a2      	strge	r2, [r4, #8]
 80128b8:	60a2      	strlt	r2, [r4, #8]
 80128ba:	bfb8      	it	lt
 80128bc:	60e3      	strlt	r3, [r4, #12]
 80128be:	6921      	ldr	r1, [r4, #16]
 80128c0:	290b      	cmp	r1, #11
 80128c2:	d911      	bls.n	80128e8 <validate_structure+0xac>
 80128c4:	220c      	movs	r2, #12
 80128c6:	4668      	mov	r0, sp
 80128c8:	f002 fbf8 	bl	80150bc <div>
 80128cc:	9a01      	ldr	r2, [sp, #4]
 80128ce:	6963      	ldr	r3, [r4, #20]
 80128d0:	9900      	ldr	r1, [sp, #0]
 80128d2:	2a00      	cmp	r2, #0
 80128d4:	440b      	add	r3, r1
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	bfbb      	ittet	lt
 80128da:	320c      	addlt	r2, #12
 80128dc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80128e0:	6122      	strge	r2, [r4, #16]
 80128e2:	6122      	strlt	r2, [r4, #16]
 80128e4:	bfb8      	it	lt
 80128e6:	6163      	strlt	r3, [r4, #20]
 80128e8:	6963      	ldr	r3, [r4, #20]
 80128ea:	0798      	lsls	r0, r3, #30
 80128ec:	d120      	bne.n	8012930 <validate_structure+0xf4>
 80128ee:	2164      	movs	r1, #100	; 0x64
 80128f0:	fb93 f2f1 	sdiv	r2, r3, r1
 80128f4:	fb01 3212 	mls	r2, r1, r2, r3
 80128f8:	b9e2      	cbnz	r2, 8012934 <validate_structure+0xf8>
 80128fa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80128fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012902:	fb93 f1f2 	sdiv	r1, r3, r2
 8012906:	fb02 3311 	mls	r3, r2, r1, r3
 801290a:	2b00      	cmp	r3, #0
 801290c:	bf14      	ite	ne
 801290e:	231c      	movne	r3, #28
 8012910:	231d      	moveq	r3, #29
 8012912:	68e2      	ldr	r2, [r4, #12]
 8012914:	2a00      	cmp	r2, #0
 8012916:	dc0f      	bgt.n	8012938 <validate_structure+0xfc>
 8012918:	4f33      	ldr	r7, [pc, #204]	; (80129e8 <validate_structure+0x1ac>)
 801291a:	260b      	movs	r6, #11
 801291c:	2064      	movs	r0, #100	; 0x64
 801291e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012922:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012926:	f1bc 0f00 	cmp.w	ip, #0
 801292a:	dd31      	ble.n	8012990 <validate_structure+0x154>
 801292c:	b003      	add	sp, #12
 801292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012930:	231c      	movs	r3, #28
 8012932:	e7ee      	b.n	8012912 <validate_structure+0xd6>
 8012934:	231d      	movs	r3, #29
 8012936:	e7ec      	b.n	8012912 <validate_structure+0xd6>
 8012938:	4e2b      	ldr	r6, [pc, #172]	; (80129e8 <validate_structure+0x1ac>)
 801293a:	2700      	movs	r7, #0
 801293c:	2064      	movs	r0, #100	; 0x64
 801293e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012942:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8012946:	2a01      	cmp	r2, #1
 8012948:	bf14      	ite	ne
 801294a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 801294e:	469c      	moveq	ip, r3
 8012950:	4561      	cmp	r1, ip
 8012952:	ddeb      	ble.n	801292c <validate_structure+0xf0>
 8012954:	3201      	adds	r2, #1
 8012956:	eba1 010c 	sub.w	r1, r1, ip
 801295a:	2a0c      	cmp	r2, #12
 801295c:	60e1      	str	r1, [r4, #12]
 801295e:	6122      	str	r2, [r4, #16]
 8012960:	d1ef      	bne.n	8012942 <validate_structure+0x106>
 8012962:	6963      	ldr	r3, [r4, #20]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	0791      	lsls	r1, r2, #30
 8012968:	e9c4 7204 	strd	r7, r2, [r4, #16]
 801296c:	d137      	bne.n	80129de <validate_structure+0x1a2>
 801296e:	fb92 f1f0 	sdiv	r1, r2, r0
 8012972:	fb00 2211 	mls	r2, r0, r1, r2
 8012976:	2a00      	cmp	r2, #0
 8012978:	d133      	bne.n	80129e2 <validate_structure+0x1a6>
 801297a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801297e:	fb93 f2f5 	sdiv	r2, r3, r5
 8012982:	fb05 3312 	mls	r3, r5, r2, r3
 8012986:	2b00      	cmp	r3, #0
 8012988:	bf14      	ite	ne
 801298a:	231c      	movne	r3, #28
 801298c:	231d      	moveq	r3, #29
 801298e:	e7d8      	b.n	8012942 <validate_structure+0x106>
 8012990:	6921      	ldr	r1, [r4, #16]
 8012992:	3901      	subs	r1, #1
 8012994:	6121      	str	r1, [r4, #16]
 8012996:	3101      	adds	r1, #1
 8012998:	d114      	bne.n	80129c4 <validate_structure+0x188>
 801299a:	6963      	ldr	r3, [r4, #20]
 801299c:	1e5a      	subs	r2, r3, #1
 801299e:	0791      	lsls	r1, r2, #30
 80129a0:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80129a4:	d117      	bne.n	80129d6 <validate_structure+0x19a>
 80129a6:	fb92 f1f0 	sdiv	r1, r2, r0
 80129aa:	fb00 2211 	mls	r2, r0, r1, r2
 80129ae:	b9a2      	cbnz	r2, 80129da <validate_structure+0x19e>
 80129b0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80129b4:	fb93 f2f5 	sdiv	r2, r3, r5
 80129b8:	fb05 3312 	mls	r3, r5, r2, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	bf14      	ite	ne
 80129c0:	231c      	movne	r3, #28
 80129c2:	231d      	moveq	r3, #29
 80129c4:	6922      	ldr	r2, [r4, #16]
 80129c6:	2a01      	cmp	r2, #1
 80129c8:	bf14      	ite	ne
 80129ca:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80129ce:	461a      	moveq	r2, r3
 80129d0:	4462      	add	r2, ip
 80129d2:	60e2      	str	r2, [r4, #12]
 80129d4:	e7a5      	b.n	8012922 <validate_structure+0xe6>
 80129d6:	231c      	movs	r3, #28
 80129d8:	e7f4      	b.n	80129c4 <validate_structure+0x188>
 80129da:	231d      	movs	r3, #29
 80129dc:	e7f2      	b.n	80129c4 <validate_structure+0x188>
 80129de:	231c      	movs	r3, #28
 80129e0:	e7af      	b.n	8012942 <validate_structure+0x106>
 80129e2:	231d      	movs	r3, #29
 80129e4:	e7ad      	b.n	8012942 <validate_structure+0x106>
 80129e6:	bf00      	nop
 80129e8:	080586f4 	.word	0x080586f4

080129ec <mktime>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	b085      	sub	sp, #20
 80129f2:	4607      	mov	r7, r0
 80129f4:	f003 ff5c 	bl	80168b0 <__gettzinfo>
 80129f8:	4681      	mov	r9, r0
 80129fa:	4638      	mov	r0, r7
 80129fc:	f7ff ff1e 	bl	801283c <validate_structure>
 8012a00:	e9d7 4000 	ldrd	r4, r0, [r7]
 8012a04:	233c      	movs	r3, #60	; 0x3c
 8012a06:	fb03 4400 	mla	r4, r3, r0, r4
 8012a0a:	68b8      	ldr	r0, [r7, #8]
 8012a0c:	4abc      	ldr	r2, [pc, #752]	; (8012d00 <mktime+0x314>)
 8012a0e:	697e      	ldr	r6, [r7, #20]
 8012a10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012a14:	fb03 4400 	mla	r4, r3, r0, r4
 8012a18:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8012a1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012a20:	3d01      	subs	r5, #1
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	4415      	add	r5, r2
 8012a26:	dd11      	ble.n	8012a4c <mktime+0x60>
 8012a28:	07b1      	lsls	r1, r6, #30
 8012a2a:	d10f      	bne.n	8012a4c <mktime+0x60>
 8012a2c:	2264      	movs	r2, #100	; 0x64
 8012a2e:	fb96 f3f2 	sdiv	r3, r6, r2
 8012a32:	fb02 6313 	mls	r3, r2, r3, r6
 8012a36:	b943      	cbnz	r3, 8012a4a <mktime+0x5e>
 8012a38:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012a3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012a40:	fb93 f1f2 	sdiv	r1, r3, r2
 8012a44:	fb02 3311 	mls	r3, r2, r1, r3
 8012a48:	b903      	cbnz	r3, 8012a4c <mktime+0x60>
 8012a4a:	3501      	adds	r5, #1
 8012a4c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012a50:	3310      	adds	r3, #16
 8012a52:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012a56:	4293      	cmp	r3, r2
 8012a58:	61fd      	str	r5, [r7, #28]
 8012a5a:	f200 815d 	bhi.w	8012d18 <mktime+0x32c>
 8012a5e:	2e46      	cmp	r6, #70	; 0x46
 8012a60:	dd71      	ble.n	8012b46 <mktime+0x15a>
 8012a62:	2346      	movs	r3, #70	; 0x46
 8012a64:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012a68:	2164      	movs	r1, #100	; 0x64
 8012a6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012a6e:	079a      	lsls	r2, r3, #30
 8012a70:	d163      	bne.n	8012b3a <mktime+0x14e>
 8012a72:	fb93 f2f1 	sdiv	r2, r3, r1
 8012a76:	fb01 3212 	mls	r2, r1, r2, r3
 8012a7a:	2a00      	cmp	r2, #0
 8012a7c:	d160      	bne.n	8012b40 <mktime+0x154>
 8012a7e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012a82:	fb92 fef0 	sdiv	lr, r2, r0
 8012a86:	fb00 221e 	mls	r2, r0, lr, r2
 8012a8a:	2a00      	cmp	r2, #0
 8012a8c:	bf14      	ite	ne
 8012a8e:	4662      	movne	r2, ip
 8012a90:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012a94:	3301      	adds	r3, #1
 8012a96:	429e      	cmp	r6, r3
 8012a98:	4415      	add	r5, r2
 8012a9a:	d1e8      	bne.n	8012a6e <mktime+0x82>
 8012a9c:	4b99      	ldr	r3, [pc, #612]	; (8012d04 <mktime+0x318>)
 8012a9e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8012aa2:	fbc5 4803 	smlal	r4, r8, r5, r3
 8012aa6:	f002 f88d 	bl	8014bc4 <__tz_lock>
 8012aaa:	f002 f897 	bl	8014bdc <_tzset_unlocked>
 8012aae:	4b96      	ldr	r3, [pc, #600]	; (8012d08 <mktime+0x31c>)
 8012ab0:	f8d3 b000 	ldr.w	fp, [r3]
 8012ab4:	f1bb 0f00 	cmp.w	fp, #0
 8012ab8:	d039      	beq.n	8012b2e <mktime+0x142>
 8012aba:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8012abe:	6978      	ldr	r0, [r7, #20]
 8012ac0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012ac4:	f1bb 0f01 	cmp.w	fp, #1
 8012ac8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012acc:	46da      	mov	sl, fp
 8012ace:	bfa8      	it	ge
 8012ad0:	f04f 0a01 	movge.w	sl, #1
 8012ad4:	4283      	cmp	r3, r0
 8012ad6:	d178      	bne.n	8012bca <mktime+0x1de>
 8012ad8:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8012adc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012ae0:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8012ae4:	1a5b      	subs	r3, r3, r1
 8012ae6:	9302      	str	r3, [sp, #8]
 8012ae8:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8012aec:	9303      	str	r3, [sp, #12]
 8012aee:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8012af2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8012af6:	9301      	str	r3, [sp, #4]
 8012af8:	ebb3 0c02 	subs.w	ip, r3, r2
 8012afc:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8012b00:	4564      	cmp	r4, ip
 8012b02:	eb78 0300 	sbcs.w	r3, r8, r0
 8012b06:	da66      	bge.n	8012bd6 <mktime+0x1ea>
 8012b08:	f8d9 3000 	ldr.w	r3, [r9]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d06f      	beq.n	8012bf0 <mktime+0x204>
 8012b10:	9b02      	ldr	r3, [sp, #8]
 8012b12:	429c      	cmp	r4, r3
 8012b14:	9b03      	ldr	r3, [sp, #12]
 8012b16:	eb78 0303 	sbcs.w	r3, r8, r3
 8012b1a:	db03      	blt.n	8012b24 <mktime+0x138>
 8012b1c:	4564      	cmp	r4, ip
 8012b1e:	eb78 0300 	sbcs.w	r3, r8, r0
 8012b22:	db6b      	blt.n	8012bfc <mktime+0x210>
 8012b24:	f1bb 0f00 	cmp.w	fp, #0
 8012b28:	f04f 0b00 	mov.w	fp, #0
 8012b2c:	da6b      	bge.n	8012c06 <mktime+0x21a>
 8012b2e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8012b32:	190c      	adds	r4, r1, r4
 8012b34:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8012b38:	e0a9      	b.n	8012c8e <mktime+0x2a2>
 8012b3a:	f240 126d 	movw	r2, #365	; 0x16d
 8012b3e:	e7a9      	b.n	8012a94 <mktime+0xa8>
 8012b40:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012b44:	e7a6      	b.n	8012a94 <mktime+0xa8>
 8012b46:	d0a9      	beq.n	8012a9c <mktime+0xb0>
 8012b48:	2345      	movs	r3, #69	; 0x45
 8012b4a:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012b4e:	2164      	movs	r1, #100	; 0x64
 8012b50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012b54:	e012      	b.n	8012b7c <mktime+0x190>
 8012b56:	bb62      	cbnz	r2, 8012bb2 <mktime+0x1c6>
 8012b58:	fb93 f2f1 	sdiv	r2, r3, r1
 8012b5c:	fb01 3212 	mls	r2, r1, r2, r3
 8012b60:	bb52      	cbnz	r2, 8012bb8 <mktime+0x1cc>
 8012b62:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012b66:	fb92 fef0 	sdiv	lr, r2, r0
 8012b6a:	fb00 221e 	mls	r2, r0, lr, r2
 8012b6e:	2a00      	cmp	r2, #0
 8012b70:	bf14      	ite	ne
 8012b72:	4662      	movne	r2, ip
 8012b74:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012b78:	1aad      	subs	r5, r5, r2
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	429e      	cmp	r6, r3
 8012b7e:	f003 0203 	and.w	r2, r3, #3
 8012b82:	dbe8      	blt.n	8012b56 <mktime+0x16a>
 8012b84:	b9da      	cbnz	r2, 8012bbe <mktime+0x1d2>
 8012b86:	2264      	movs	r2, #100	; 0x64
 8012b88:	fb96 f3f2 	sdiv	r3, r6, r2
 8012b8c:	fb02 6313 	mls	r3, r2, r3, r6
 8012b90:	b9c3      	cbnz	r3, 8012bc4 <mktime+0x1d8>
 8012b92:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012b96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012b9a:	fb93 f1f2 	sdiv	r1, r3, r2
 8012b9e:	fb02 3311 	mls	r3, r2, r1, r3
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f240 136d 	movw	r3, #365	; 0x16d
 8012ba8:	bf08      	it	eq
 8012baa:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012bae:	1aed      	subs	r5, r5, r3
 8012bb0:	e774      	b.n	8012a9c <mktime+0xb0>
 8012bb2:	f240 126d 	movw	r2, #365	; 0x16d
 8012bb6:	e7df      	b.n	8012b78 <mktime+0x18c>
 8012bb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012bbc:	e7dc      	b.n	8012b78 <mktime+0x18c>
 8012bbe:	f240 136d 	movw	r3, #365	; 0x16d
 8012bc2:	e7f4      	b.n	8012bae <mktime+0x1c2>
 8012bc4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8012bc8:	e7f1      	b.n	8012bae <mktime+0x1c2>
 8012bca:	f001 ff51 	bl	8014a70 <__tzcalc_limits>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d182      	bne.n	8012ad8 <mktime+0xec>
 8012bd2:	46d3      	mov	fp, sl
 8012bd4:	e050      	b.n	8012c78 <mktime+0x28c>
 8012bd6:	9b01      	ldr	r3, [sp, #4]
 8012bd8:	1a5b      	subs	r3, r3, r1
 8012bda:	9301      	str	r3, [sp, #4]
 8012bdc:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012be0:	eb6e 0e03 	sbc.w	lr, lr, r3
 8012be4:	9b01      	ldr	r3, [sp, #4]
 8012be6:	429c      	cmp	r4, r3
 8012be8:	eb78 030e 	sbcs.w	r3, r8, lr
 8012bec:	dbf1      	blt.n	8012bd2 <mktime+0x1e6>
 8012bee:	e78b      	b.n	8012b08 <mktime+0x11c>
 8012bf0:	9b02      	ldr	r3, [sp, #8]
 8012bf2:	429c      	cmp	r4, r3
 8012bf4:	9b03      	ldr	r3, [sp, #12]
 8012bf6:	eb78 0303 	sbcs.w	r3, r8, r3
 8012bfa:	db8f      	blt.n	8012b1c <mktime+0x130>
 8012bfc:	f1bb 0f00 	cmp.w	fp, #0
 8012c00:	db3e      	blt.n	8012c80 <mktime+0x294>
 8012c02:	f04f 0b01 	mov.w	fp, #1
 8012c06:	ea8a 0a0b 	eor.w	sl, sl, fp
 8012c0a:	f1ba 0f01 	cmp.w	sl, #1
 8012c0e:	d133      	bne.n	8012c78 <mktime+0x28c>
 8012c10:	f1bb 0f00 	cmp.w	fp, #0
 8012c14:	d04e      	beq.n	8012cb4 <mktime+0x2c8>
 8012c16:	1a52      	subs	r2, r2, r1
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8012c1e:	4413      	add	r3, r2
 8012c20:	1914      	adds	r4, r2, r4
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	4638      	mov	r0, r7
 8012c26:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8012c2a:	f7ff fe07 	bl	801283c <validate_structure>
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	ebb2 020a 	subs.w	r2, r2, sl
 8012c34:	d020      	beq.n	8012c78 <mktime+0x28c>
 8012c36:	2a01      	cmp	r2, #1
 8012c38:	dc3e      	bgt.n	8012cb8 <mktime+0x2cc>
 8012c3a:	1c90      	adds	r0, r2, #2
 8012c3c:	bfd8      	it	le
 8012c3e:	2201      	movle	r2, #1
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	18d3      	adds	r3, r2, r3
 8012c44:	4415      	add	r5, r2
 8012c46:	d540      	bpl.n	8012cca <mktime+0x2de>
 8012c48:	1e73      	subs	r3, r6, #1
 8012c4a:	0799      	lsls	r1, r3, #30
 8012c4c:	d137      	bne.n	8012cbe <mktime+0x2d2>
 8012c4e:	2264      	movs	r2, #100	; 0x64
 8012c50:	fb93 f1f2 	sdiv	r1, r3, r2
 8012c54:	fb02 3311 	mls	r3, r2, r1, r3
 8012c58:	bba3      	cbnz	r3, 8012cc4 <mktime+0x2d8>
 8012c5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012c5e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8012c62:	fb96 f2f3 	sdiv	r2, r6, r3
 8012c66:	fb03 6612 	mls	r6, r3, r2, r6
 8012c6a:	2e00      	cmp	r6, #0
 8012c6c:	f240 136d 	movw	r3, #365	; 0x16d
 8012c70:	bf18      	it	ne
 8012c72:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8012c76:	61fb      	str	r3, [r7, #28]
 8012c78:	f1bb 0f01 	cmp.w	fp, #1
 8012c7c:	f47f af57 	bne.w	8012b2e <mktime+0x142>
 8012c80:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012c84:	190c      	adds	r4, r1, r4
 8012c86:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8012c8a:	f04f 0b01 	mov.w	fp, #1
 8012c8e:	f001 ff9f 	bl	8014bd0 <__tz_unlock>
 8012c92:	3504      	adds	r5, #4
 8012c94:	2307      	movs	r3, #7
 8012c96:	fb95 f3f3 	sdiv	r3, r5, r3
 8012c9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012c9e:	1aed      	subs	r5, r5, r3
 8012ca0:	bf48      	it	mi
 8012ca2:	3507      	addmi	r5, #7
 8012ca4:	f8c7 b020 	str.w	fp, [r7, #32]
 8012ca8:	61bd      	str	r5, [r7, #24]
 8012caa:	4620      	mov	r0, r4
 8012cac:	4641      	mov	r1, r8
 8012cae:	b005      	add	sp, #20
 8012cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb4:	1a8a      	subs	r2, r1, r2
 8012cb6:	e7af      	b.n	8012c18 <mktime+0x22c>
 8012cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cbc:	e7c0      	b.n	8012c40 <mktime+0x254>
 8012cbe:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8012cc2:	e7d8      	b.n	8012c76 <mktime+0x28a>
 8012cc4:	f240 136d 	movw	r3, #365	; 0x16d
 8012cc8:	e7d5      	b.n	8012c76 <mktime+0x28a>
 8012cca:	07b2      	lsls	r2, r6, #30
 8012ccc:	d11e      	bne.n	8012d0c <mktime+0x320>
 8012cce:	2164      	movs	r1, #100	; 0x64
 8012cd0:	fb96 f2f1 	sdiv	r2, r6, r1
 8012cd4:	fb01 6212 	mls	r2, r1, r2, r6
 8012cd8:	b9da      	cbnz	r2, 8012d12 <mktime+0x326>
 8012cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012cde:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8012ce2:	fb96 f1f2 	sdiv	r1, r6, r2
 8012ce6:	fb02 6611 	mls	r6, r2, r1, r6
 8012cea:	2e00      	cmp	r6, #0
 8012cec:	f240 126d 	movw	r2, #365	; 0x16d
 8012cf0:	bf08      	it	eq
 8012cf2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	bfa8      	it	ge
 8012cfa:	1a9b      	subge	r3, r3, r2
 8012cfc:	e7bb      	b.n	8012c76 <mktime+0x28a>
 8012cfe:	bf00      	nop
 8012d00:	08058724 	.word	0x08058724
 8012d04:	00015180 	.word	0x00015180
 8012d08:	20005df4 	.word	0x20005df4
 8012d0c:	f240 126d 	movw	r2, #365	; 0x16d
 8012d10:	e7f1      	b.n	8012cf6 <mktime+0x30a>
 8012d12:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012d16:	e7ee      	b.n	8012cf6 <mktime+0x30a>
 8012d18:	f04f 34ff 	mov.w	r4, #4294967295
 8012d1c:	46a0      	mov	r8, r4
 8012d1e:	e7c4      	b.n	8012caa <mktime+0x2be>

08012d20 <_free_r>:
 8012d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d22:	2900      	cmp	r1, #0
 8012d24:	d044      	beq.n	8012db0 <_free_r+0x90>
 8012d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d2a:	9001      	str	r0, [sp, #4]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8012d32:	bfb8      	it	lt
 8012d34:	18e4      	addlt	r4, r4, r3
 8012d36:	f003 fe6d 	bl	8016a14 <__malloc_lock>
 8012d3a:	4a1e      	ldr	r2, [pc, #120]	; (8012db4 <_free_r+0x94>)
 8012d3c:	9801      	ldr	r0, [sp, #4]
 8012d3e:	6813      	ldr	r3, [r2, #0]
 8012d40:	b933      	cbnz	r3, 8012d50 <_free_r+0x30>
 8012d42:	6063      	str	r3, [r4, #4]
 8012d44:	6014      	str	r4, [r2, #0]
 8012d46:	b003      	add	sp, #12
 8012d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d4c:	f003 be68 	b.w	8016a20 <__malloc_unlock>
 8012d50:	42a3      	cmp	r3, r4
 8012d52:	d908      	bls.n	8012d66 <_free_r+0x46>
 8012d54:	6825      	ldr	r5, [r4, #0]
 8012d56:	1961      	adds	r1, r4, r5
 8012d58:	428b      	cmp	r3, r1
 8012d5a:	bf01      	itttt	eq
 8012d5c:	6819      	ldreq	r1, [r3, #0]
 8012d5e:	685b      	ldreq	r3, [r3, #4]
 8012d60:	1949      	addeq	r1, r1, r5
 8012d62:	6021      	streq	r1, [r4, #0]
 8012d64:	e7ed      	b.n	8012d42 <_free_r+0x22>
 8012d66:	461a      	mov	r2, r3
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	b10b      	cbz	r3, 8012d70 <_free_r+0x50>
 8012d6c:	42a3      	cmp	r3, r4
 8012d6e:	d9fa      	bls.n	8012d66 <_free_r+0x46>
 8012d70:	6811      	ldr	r1, [r2, #0]
 8012d72:	1855      	adds	r5, r2, r1
 8012d74:	42a5      	cmp	r5, r4
 8012d76:	d10b      	bne.n	8012d90 <_free_r+0x70>
 8012d78:	6824      	ldr	r4, [r4, #0]
 8012d7a:	4421      	add	r1, r4
 8012d7c:	1854      	adds	r4, r2, r1
 8012d7e:	42a3      	cmp	r3, r4
 8012d80:	6011      	str	r1, [r2, #0]
 8012d82:	d1e0      	bne.n	8012d46 <_free_r+0x26>
 8012d84:	681c      	ldr	r4, [r3, #0]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	6053      	str	r3, [r2, #4]
 8012d8a:	4421      	add	r1, r4
 8012d8c:	6011      	str	r1, [r2, #0]
 8012d8e:	e7da      	b.n	8012d46 <_free_r+0x26>
 8012d90:	d902      	bls.n	8012d98 <_free_r+0x78>
 8012d92:	230c      	movs	r3, #12
 8012d94:	6003      	str	r3, [r0, #0]
 8012d96:	e7d6      	b.n	8012d46 <_free_r+0x26>
 8012d98:	6825      	ldr	r5, [r4, #0]
 8012d9a:	1961      	adds	r1, r4, r5
 8012d9c:	428b      	cmp	r3, r1
 8012d9e:	bf04      	itt	eq
 8012da0:	6819      	ldreq	r1, [r3, #0]
 8012da2:	685b      	ldreq	r3, [r3, #4]
 8012da4:	6063      	str	r3, [r4, #4]
 8012da6:	bf04      	itt	eq
 8012da8:	1949      	addeq	r1, r1, r5
 8012daa:	6021      	streq	r1, [r4, #0]
 8012dac:	6054      	str	r4, [r2, #4]
 8012dae:	e7ca      	b.n	8012d46 <_free_r+0x26>
 8012db0:	b003      	add	sp, #12
 8012db2:	bd30      	pop	{r4, r5, pc}
 8012db4:	20005dd0 	.word	0x20005dd0

08012db8 <sbrk_aligned>:
 8012db8:	b570      	push	{r4, r5, r6, lr}
 8012dba:	4e0e      	ldr	r6, [pc, #56]	; (8012df4 <sbrk_aligned+0x3c>)
 8012dbc:	460c      	mov	r4, r1
 8012dbe:	6831      	ldr	r1, [r6, #0]
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	b911      	cbnz	r1, 8012dca <sbrk_aligned+0x12>
 8012dc4:	f000 fe50 	bl	8013a68 <_sbrk_r>
 8012dc8:	6030      	str	r0, [r6, #0]
 8012dca:	4621      	mov	r1, r4
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f000 fe4b 	bl	8013a68 <_sbrk_r>
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	d00a      	beq.n	8012dec <sbrk_aligned+0x34>
 8012dd6:	1cc4      	adds	r4, r0, #3
 8012dd8:	f024 0403 	bic.w	r4, r4, #3
 8012ddc:	42a0      	cmp	r0, r4
 8012dde:	d007      	beq.n	8012df0 <sbrk_aligned+0x38>
 8012de0:	1a21      	subs	r1, r4, r0
 8012de2:	4628      	mov	r0, r5
 8012de4:	f000 fe40 	bl	8013a68 <_sbrk_r>
 8012de8:	3001      	adds	r0, #1
 8012dea:	d101      	bne.n	8012df0 <sbrk_aligned+0x38>
 8012dec:	f04f 34ff 	mov.w	r4, #4294967295
 8012df0:	4620      	mov	r0, r4
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	20005dd4 	.word	0x20005dd4

08012df8 <_malloc_r>:
 8012df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfc:	1ccd      	adds	r5, r1, #3
 8012dfe:	f025 0503 	bic.w	r5, r5, #3
 8012e02:	3508      	adds	r5, #8
 8012e04:	2d0c      	cmp	r5, #12
 8012e06:	bf38      	it	cc
 8012e08:	250c      	movcc	r5, #12
 8012e0a:	2d00      	cmp	r5, #0
 8012e0c:	4607      	mov	r7, r0
 8012e0e:	db01      	blt.n	8012e14 <_malloc_r+0x1c>
 8012e10:	42a9      	cmp	r1, r5
 8012e12:	d905      	bls.n	8012e20 <_malloc_r+0x28>
 8012e14:	230c      	movs	r3, #12
 8012e16:	603b      	str	r3, [r7, #0]
 8012e18:	2600      	movs	r6, #0
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e20:	4e2e      	ldr	r6, [pc, #184]	; (8012edc <_malloc_r+0xe4>)
 8012e22:	f003 fdf7 	bl	8016a14 <__malloc_lock>
 8012e26:	6833      	ldr	r3, [r6, #0]
 8012e28:	461c      	mov	r4, r3
 8012e2a:	bb34      	cbnz	r4, 8012e7a <_malloc_r+0x82>
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4638      	mov	r0, r7
 8012e30:	f7ff ffc2 	bl	8012db8 <sbrk_aligned>
 8012e34:	1c43      	adds	r3, r0, #1
 8012e36:	4604      	mov	r4, r0
 8012e38:	d14d      	bne.n	8012ed6 <_malloc_r+0xde>
 8012e3a:	6834      	ldr	r4, [r6, #0]
 8012e3c:	4626      	mov	r6, r4
 8012e3e:	2e00      	cmp	r6, #0
 8012e40:	d140      	bne.n	8012ec4 <_malloc_r+0xcc>
 8012e42:	6823      	ldr	r3, [r4, #0]
 8012e44:	4631      	mov	r1, r6
 8012e46:	4638      	mov	r0, r7
 8012e48:	eb04 0803 	add.w	r8, r4, r3
 8012e4c:	f000 fe0c 	bl	8013a68 <_sbrk_r>
 8012e50:	4580      	cmp	r8, r0
 8012e52:	d13a      	bne.n	8012eca <_malloc_r+0xd2>
 8012e54:	6821      	ldr	r1, [r4, #0]
 8012e56:	3503      	adds	r5, #3
 8012e58:	1a6d      	subs	r5, r5, r1
 8012e5a:	f025 0503 	bic.w	r5, r5, #3
 8012e5e:	3508      	adds	r5, #8
 8012e60:	2d0c      	cmp	r5, #12
 8012e62:	bf38      	it	cc
 8012e64:	250c      	movcc	r5, #12
 8012e66:	4629      	mov	r1, r5
 8012e68:	4638      	mov	r0, r7
 8012e6a:	f7ff ffa5 	bl	8012db8 <sbrk_aligned>
 8012e6e:	3001      	adds	r0, #1
 8012e70:	d02b      	beq.n	8012eca <_malloc_r+0xd2>
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	442b      	add	r3, r5
 8012e76:	6023      	str	r3, [r4, #0]
 8012e78:	e00e      	b.n	8012e98 <_malloc_r+0xa0>
 8012e7a:	6822      	ldr	r2, [r4, #0]
 8012e7c:	1b52      	subs	r2, r2, r5
 8012e7e:	d41e      	bmi.n	8012ebe <_malloc_r+0xc6>
 8012e80:	2a0b      	cmp	r2, #11
 8012e82:	d916      	bls.n	8012eb2 <_malloc_r+0xba>
 8012e84:	1961      	adds	r1, r4, r5
 8012e86:	42a3      	cmp	r3, r4
 8012e88:	6025      	str	r5, [r4, #0]
 8012e8a:	bf18      	it	ne
 8012e8c:	6059      	strne	r1, [r3, #4]
 8012e8e:	6863      	ldr	r3, [r4, #4]
 8012e90:	bf08      	it	eq
 8012e92:	6031      	streq	r1, [r6, #0]
 8012e94:	5162      	str	r2, [r4, r5]
 8012e96:	604b      	str	r3, [r1, #4]
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f104 060b 	add.w	r6, r4, #11
 8012e9e:	f003 fdbf 	bl	8016a20 <__malloc_unlock>
 8012ea2:	f026 0607 	bic.w	r6, r6, #7
 8012ea6:	1d23      	adds	r3, r4, #4
 8012ea8:	1af2      	subs	r2, r6, r3
 8012eaa:	d0b6      	beq.n	8012e1a <_malloc_r+0x22>
 8012eac:	1b9b      	subs	r3, r3, r6
 8012eae:	50a3      	str	r3, [r4, r2]
 8012eb0:	e7b3      	b.n	8012e1a <_malloc_r+0x22>
 8012eb2:	6862      	ldr	r2, [r4, #4]
 8012eb4:	42a3      	cmp	r3, r4
 8012eb6:	bf0c      	ite	eq
 8012eb8:	6032      	streq	r2, [r6, #0]
 8012eba:	605a      	strne	r2, [r3, #4]
 8012ebc:	e7ec      	b.n	8012e98 <_malloc_r+0xa0>
 8012ebe:	4623      	mov	r3, r4
 8012ec0:	6864      	ldr	r4, [r4, #4]
 8012ec2:	e7b2      	b.n	8012e2a <_malloc_r+0x32>
 8012ec4:	4634      	mov	r4, r6
 8012ec6:	6876      	ldr	r6, [r6, #4]
 8012ec8:	e7b9      	b.n	8012e3e <_malloc_r+0x46>
 8012eca:	230c      	movs	r3, #12
 8012ecc:	603b      	str	r3, [r7, #0]
 8012ece:	4638      	mov	r0, r7
 8012ed0:	f003 fda6 	bl	8016a20 <__malloc_unlock>
 8012ed4:	e7a1      	b.n	8012e1a <_malloc_r+0x22>
 8012ed6:	6025      	str	r5, [r4, #0]
 8012ed8:	e7de      	b.n	8012e98 <_malloc_r+0xa0>
 8012eda:	bf00      	nop
 8012edc:	20005dd0 	.word	0x20005dd0

08012ee0 <__sfputc_r>:
 8012ee0:	6893      	ldr	r3, [r2, #8]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	b410      	push	{r4}
 8012ee8:	6093      	str	r3, [r2, #8]
 8012eea:	da08      	bge.n	8012efe <__sfputc_r+0x1e>
 8012eec:	6994      	ldr	r4, [r2, #24]
 8012eee:	42a3      	cmp	r3, r4
 8012ef0:	db01      	blt.n	8012ef6 <__sfputc_r+0x16>
 8012ef2:	290a      	cmp	r1, #10
 8012ef4:	d103      	bne.n	8012efe <__sfputc_r+0x1e>
 8012ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012efa:	f001 bff5 	b.w	8014ee8 <__swbuf_r>
 8012efe:	6813      	ldr	r3, [r2, #0]
 8012f00:	1c58      	adds	r0, r3, #1
 8012f02:	6010      	str	r0, [r2, #0]
 8012f04:	7019      	strb	r1, [r3, #0]
 8012f06:	4608      	mov	r0, r1
 8012f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f0c:	4770      	bx	lr

08012f0e <__sfputs_r>:
 8012f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f10:	4606      	mov	r6, r0
 8012f12:	460f      	mov	r7, r1
 8012f14:	4614      	mov	r4, r2
 8012f16:	18d5      	adds	r5, r2, r3
 8012f18:	42ac      	cmp	r4, r5
 8012f1a:	d101      	bne.n	8012f20 <__sfputs_r+0x12>
 8012f1c:	2000      	movs	r0, #0
 8012f1e:	e007      	b.n	8012f30 <__sfputs_r+0x22>
 8012f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f24:	463a      	mov	r2, r7
 8012f26:	4630      	mov	r0, r6
 8012f28:	f7ff ffda 	bl	8012ee0 <__sfputc_r>
 8012f2c:	1c43      	adds	r3, r0, #1
 8012f2e:	d1f3      	bne.n	8012f18 <__sfputs_r+0xa>
 8012f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012f34 <_vfiprintf_r>:
 8012f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f38:	460d      	mov	r5, r1
 8012f3a:	b09d      	sub	sp, #116	; 0x74
 8012f3c:	4614      	mov	r4, r2
 8012f3e:	4698      	mov	r8, r3
 8012f40:	4606      	mov	r6, r0
 8012f42:	b118      	cbz	r0, 8012f4c <_vfiprintf_r+0x18>
 8012f44:	6983      	ldr	r3, [r0, #24]
 8012f46:	b90b      	cbnz	r3, 8012f4c <_vfiprintf_r+0x18>
 8012f48:	f003 f862 	bl	8016010 <__sinit>
 8012f4c:	4b89      	ldr	r3, [pc, #548]	; (8013174 <_vfiprintf_r+0x240>)
 8012f4e:	429d      	cmp	r5, r3
 8012f50:	d11b      	bne.n	8012f8a <_vfiprintf_r+0x56>
 8012f52:	6875      	ldr	r5, [r6, #4]
 8012f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f56:	07d9      	lsls	r1, r3, #31
 8012f58:	d405      	bmi.n	8012f66 <_vfiprintf_r+0x32>
 8012f5a:	89ab      	ldrh	r3, [r5, #12]
 8012f5c:	059a      	lsls	r2, r3, #22
 8012f5e:	d402      	bmi.n	8012f66 <_vfiprintf_r+0x32>
 8012f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f62:	f003 fcaf 	bl	80168c4 <__retarget_lock_acquire_recursive>
 8012f66:	89ab      	ldrh	r3, [r5, #12]
 8012f68:	071b      	lsls	r3, r3, #28
 8012f6a:	d501      	bpl.n	8012f70 <_vfiprintf_r+0x3c>
 8012f6c:	692b      	ldr	r3, [r5, #16]
 8012f6e:	b9eb      	cbnz	r3, 8012fac <_vfiprintf_r+0x78>
 8012f70:	4629      	mov	r1, r5
 8012f72:	4630      	mov	r0, r6
 8012f74:	f002 f81c 	bl	8014fb0 <__swsetup_r>
 8012f78:	b1c0      	cbz	r0, 8012fac <_vfiprintf_r+0x78>
 8012f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f7c:	07dc      	lsls	r4, r3, #31
 8012f7e:	d50e      	bpl.n	8012f9e <_vfiprintf_r+0x6a>
 8012f80:	f04f 30ff 	mov.w	r0, #4294967295
 8012f84:	b01d      	add	sp, #116	; 0x74
 8012f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8a:	4b7b      	ldr	r3, [pc, #492]	; (8013178 <_vfiprintf_r+0x244>)
 8012f8c:	429d      	cmp	r5, r3
 8012f8e:	d101      	bne.n	8012f94 <_vfiprintf_r+0x60>
 8012f90:	68b5      	ldr	r5, [r6, #8]
 8012f92:	e7df      	b.n	8012f54 <_vfiprintf_r+0x20>
 8012f94:	4b79      	ldr	r3, [pc, #484]	; (801317c <_vfiprintf_r+0x248>)
 8012f96:	429d      	cmp	r5, r3
 8012f98:	bf08      	it	eq
 8012f9a:	68f5      	ldreq	r5, [r6, #12]
 8012f9c:	e7da      	b.n	8012f54 <_vfiprintf_r+0x20>
 8012f9e:	89ab      	ldrh	r3, [r5, #12]
 8012fa0:	0598      	lsls	r0, r3, #22
 8012fa2:	d4ed      	bmi.n	8012f80 <_vfiprintf_r+0x4c>
 8012fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fa6:	f003 fc8f 	bl	80168c8 <__retarget_lock_release_recursive>
 8012faa:	e7e9      	b.n	8012f80 <_vfiprintf_r+0x4c>
 8012fac:	2300      	movs	r3, #0
 8012fae:	9309      	str	r3, [sp, #36]	; 0x24
 8012fb0:	2320      	movs	r3, #32
 8012fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fba:	2330      	movs	r3, #48	; 0x30
 8012fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013180 <_vfiprintf_r+0x24c>
 8012fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fc4:	f04f 0901 	mov.w	r9, #1
 8012fc8:	4623      	mov	r3, r4
 8012fca:	469a      	mov	sl, r3
 8012fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fd0:	b10a      	cbz	r2, 8012fd6 <_vfiprintf_r+0xa2>
 8012fd2:	2a25      	cmp	r2, #37	; 0x25
 8012fd4:	d1f9      	bne.n	8012fca <_vfiprintf_r+0x96>
 8012fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8012fda:	d00b      	beq.n	8012ff4 <_vfiprintf_r+0xc0>
 8012fdc:	465b      	mov	r3, fp
 8012fde:	4622      	mov	r2, r4
 8012fe0:	4629      	mov	r1, r5
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	f7ff ff93 	bl	8012f0e <__sfputs_r>
 8012fe8:	3001      	adds	r0, #1
 8012fea:	f000 80aa 	beq.w	8013142 <_vfiprintf_r+0x20e>
 8012fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ff0:	445a      	add	r2, fp
 8012ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8012ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	f000 80a2 	beq.w	8013142 <_vfiprintf_r+0x20e>
 8012ffe:	2300      	movs	r3, #0
 8013000:	f04f 32ff 	mov.w	r2, #4294967295
 8013004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013008:	f10a 0a01 	add.w	sl, sl, #1
 801300c:	9304      	str	r3, [sp, #16]
 801300e:	9307      	str	r3, [sp, #28]
 8013010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013014:	931a      	str	r3, [sp, #104]	; 0x68
 8013016:	4654      	mov	r4, sl
 8013018:	2205      	movs	r2, #5
 801301a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801301e:	4858      	ldr	r0, [pc, #352]	; (8013180 <_vfiprintf_r+0x24c>)
 8013020:	f7ed f8fe 	bl	8000220 <memchr>
 8013024:	9a04      	ldr	r2, [sp, #16]
 8013026:	b9d8      	cbnz	r0, 8013060 <_vfiprintf_r+0x12c>
 8013028:	06d1      	lsls	r1, r2, #27
 801302a:	bf44      	itt	mi
 801302c:	2320      	movmi	r3, #32
 801302e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013032:	0713      	lsls	r3, r2, #28
 8013034:	bf44      	itt	mi
 8013036:	232b      	movmi	r3, #43	; 0x2b
 8013038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801303c:	f89a 3000 	ldrb.w	r3, [sl]
 8013040:	2b2a      	cmp	r3, #42	; 0x2a
 8013042:	d015      	beq.n	8013070 <_vfiprintf_r+0x13c>
 8013044:	9a07      	ldr	r2, [sp, #28]
 8013046:	4654      	mov	r4, sl
 8013048:	2000      	movs	r0, #0
 801304a:	f04f 0c0a 	mov.w	ip, #10
 801304e:	4621      	mov	r1, r4
 8013050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013054:	3b30      	subs	r3, #48	; 0x30
 8013056:	2b09      	cmp	r3, #9
 8013058:	d94e      	bls.n	80130f8 <_vfiprintf_r+0x1c4>
 801305a:	b1b0      	cbz	r0, 801308a <_vfiprintf_r+0x156>
 801305c:	9207      	str	r2, [sp, #28]
 801305e:	e014      	b.n	801308a <_vfiprintf_r+0x156>
 8013060:	eba0 0308 	sub.w	r3, r0, r8
 8013064:	fa09 f303 	lsl.w	r3, r9, r3
 8013068:	4313      	orrs	r3, r2
 801306a:	9304      	str	r3, [sp, #16]
 801306c:	46a2      	mov	sl, r4
 801306e:	e7d2      	b.n	8013016 <_vfiprintf_r+0xe2>
 8013070:	9b03      	ldr	r3, [sp, #12]
 8013072:	1d19      	adds	r1, r3, #4
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	9103      	str	r1, [sp, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	bfbb      	ittet	lt
 801307c:	425b      	neglt	r3, r3
 801307e:	f042 0202 	orrlt.w	r2, r2, #2
 8013082:	9307      	strge	r3, [sp, #28]
 8013084:	9307      	strlt	r3, [sp, #28]
 8013086:	bfb8      	it	lt
 8013088:	9204      	strlt	r2, [sp, #16]
 801308a:	7823      	ldrb	r3, [r4, #0]
 801308c:	2b2e      	cmp	r3, #46	; 0x2e
 801308e:	d10c      	bne.n	80130aa <_vfiprintf_r+0x176>
 8013090:	7863      	ldrb	r3, [r4, #1]
 8013092:	2b2a      	cmp	r3, #42	; 0x2a
 8013094:	d135      	bne.n	8013102 <_vfiprintf_r+0x1ce>
 8013096:	9b03      	ldr	r3, [sp, #12]
 8013098:	1d1a      	adds	r2, r3, #4
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	9203      	str	r2, [sp, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	bfb8      	it	lt
 80130a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80130a6:	3402      	adds	r4, #2
 80130a8:	9305      	str	r3, [sp, #20]
 80130aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013190 <_vfiprintf_r+0x25c>
 80130ae:	7821      	ldrb	r1, [r4, #0]
 80130b0:	2203      	movs	r2, #3
 80130b2:	4650      	mov	r0, sl
 80130b4:	f7ed f8b4 	bl	8000220 <memchr>
 80130b8:	b140      	cbz	r0, 80130cc <_vfiprintf_r+0x198>
 80130ba:	2340      	movs	r3, #64	; 0x40
 80130bc:	eba0 000a 	sub.w	r0, r0, sl
 80130c0:	fa03 f000 	lsl.w	r0, r3, r0
 80130c4:	9b04      	ldr	r3, [sp, #16]
 80130c6:	4303      	orrs	r3, r0
 80130c8:	3401      	adds	r4, #1
 80130ca:	9304      	str	r3, [sp, #16]
 80130cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d0:	482c      	ldr	r0, [pc, #176]	; (8013184 <_vfiprintf_r+0x250>)
 80130d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130d6:	2206      	movs	r2, #6
 80130d8:	f7ed f8a2 	bl	8000220 <memchr>
 80130dc:	2800      	cmp	r0, #0
 80130de:	d03f      	beq.n	8013160 <_vfiprintf_r+0x22c>
 80130e0:	4b29      	ldr	r3, [pc, #164]	; (8013188 <_vfiprintf_r+0x254>)
 80130e2:	bb1b      	cbnz	r3, 801312c <_vfiprintf_r+0x1f8>
 80130e4:	9b03      	ldr	r3, [sp, #12]
 80130e6:	3307      	adds	r3, #7
 80130e8:	f023 0307 	bic.w	r3, r3, #7
 80130ec:	3308      	adds	r3, #8
 80130ee:	9303      	str	r3, [sp, #12]
 80130f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f2:	443b      	add	r3, r7
 80130f4:	9309      	str	r3, [sp, #36]	; 0x24
 80130f6:	e767      	b.n	8012fc8 <_vfiprintf_r+0x94>
 80130f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80130fc:	460c      	mov	r4, r1
 80130fe:	2001      	movs	r0, #1
 8013100:	e7a5      	b.n	801304e <_vfiprintf_r+0x11a>
 8013102:	2300      	movs	r3, #0
 8013104:	3401      	adds	r4, #1
 8013106:	9305      	str	r3, [sp, #20]
 8013108:	4619      	mov	r1, r3
 801310a:	f04f 0c0a 	mov.w	ip, #10
 801310e:	4620      	mov	r0, r4
 8013110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013114:	3a30      	subs	r2, #48	; 0x30
 8013116:	2a09      	cmp	r2, #9
 8013118:	d903      	bls.n	8013122 <_vfiprintf_r+0x1ee>
 801311a:	2b00      	cmp	r3, #0
 801311c:	d0c5      	beq.n	80130aa <_vfiprintf_r+0x176>
 801311e:	9105      	str	r1, [sp, #20]
 8013120:	e7c3      	b.n	80130aa <_vfiprintf_r+0x176>
 8013122:	fb0c 2101 	mla	r1, ip, r1, r2
 8013126:	4604      	mov	r4, r0
 8013128:	2301      	movs	r3, #1
 801312a:	e7f0      	b.n	801310e <_vfiprintf_r+0x1da>
 801312c:	ab03      	add	r3, sp, #12
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	462a      	mov	r2, r5
 8013132:	4b16      	ldr	r3, [pc, #88]	; (801318c <_vfiprintf_r+0x258>)
 8013134:	a904      	add	r1, sp, #16
 8013136:	4630      	mov	r0, r6
 8013138:	f000 f8cc 	bl	80132d4 <_printf_float>
 801313c:	4607      	mov	r7, r0
 801313e:	1c78      	adds	r0, r7, #1
 8013140:	d1d6      	bne.n	80130f0 <_vfiprintf_r+0x1bc>
 8013142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013144:	07d9      	lsls	r1, r3, #31
 8013146:	d405      	bmi.n	8013154 <_vfiprintf_r+0x220>
 8013148:	89ab      	ldrh	r3, [r5, #12]
 801314a:	059a      	lsls	r2, r3, #22
 801314c:	d402      	bmi.n	8013154 <_vfiprintf_r+0x220>
 801314e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013150:	f003 fbba 	bl	80168c8 <__retarget_lock_release_recursive>
 8013154:	89ab      	ldrh	r3, [r5, #12]
 8013156:	065b      	lsls	r3, r3, #25
 8013158:	f53f af12 	bmi.w	8012f80 <_vfiprintf_r+0x4c>
 801315c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801315e:	e711      	b.n	8012f84 <_vfiprintf_r+0x50>
 8013160:	ab03      	add	r3, sp, #12
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	462a      	mov	r2, r5
 8013166:	4b09      	ldr	r3, [pc, #36]	; (801318c <_vfiprintf_r+0x258>)
 8013168:	a904      	add	r1, sp, #16
 801316a:	4630      	mov	r0, r6
 801316c:	f000 fb56 	bl	801381c <_printf_i>
 8013170:	e7e4      	b.n	801313c <_vfiprintf_r+0x208>
 8013172:	bf00      	nop
 8013174:	08058a1c 	.word	0x08058a1c
 8013178:	08058a3c 	.word	0x08058a3c
 801317c:	080589fc 	.word	0x080589fc
 8013180:	08058754 	.word	0x08058754
 8013184:	0805875e 	.word	0x0805875e
 8013188:	080132d5 	.word	0x080132d5
 801318c:	08012f0f 	.word	0x08012f0f
 8013190:	0805875a 	.word	0x0805875a

08013194 <__cvt>:
 8013194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013198:	ec55 4b10 	vmov	r4, r5, d0
 801319c:	2d00      	cmp	r5, #0
 801319e:	460e      	mov	r6, r1
 80131a0:	4619      	mov	r1, r3
 80131a2:	462b      	mov	r3, r5
 80131a4:	bfbb      	ittet	lt
 80131a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80131aa:	461d      	movlt	r5, r3
 80131ac:	2300      	movge	r3, #0
 80131ae:	232d      	movlt	r3, #45	; 0x2d
 80131b0:	700b      	strb	r3, [r1, #0]
 80131b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80131b8:	4691      	mov	r9, r2
 80131ba:	f023 0820 	bic.w	r8, r3, #32
 80131be:	bfbc      	itt	lt
 80131c0:	4622      	movlt	r2, r4
 80131c2:	4614      	movlt	r4, r2
 80131c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80131c8:	d005      	beq.n	80131d6 <__cvt+0x42>
 80131ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80131ce:	d100      	bne.n	80131d2 <__cvt+0x3e>
 80131d0:	3601      	adds	r6, #1
 80131d2:	2102      	movs	r1, #2
 80131d4:	e000      	b.n	80131d8 <__cvt+0x44>
 80131d6:	2103      	movs	r1, #3
 80131d8:	ab03      	add	r3, sp, #12
 80131da:	9301      	str	r3, [sp, #4]
 80131dc:	ab02      	add	r3, sp, #8
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	ec45 4b10 	vmov	d0, r4, r5
 80131e4:	4653      	mov	r3, sl
 80131e6:	4632      	mov	r2, r6
 80131e8:	f002 f80a 	bl	8015200 <_dtoa_r>
 80131ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80131f0:	4607      	mov	r7, r0
 80131f2:	d102      	bne.n	80131fa <__cvt+0x66>
 80131f4:	f019 0f01 	tst.w	r9, #1
 80131f8:	d022      	beq.n	8013240 <__cvt+0xac>
 80131fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80131fe:	eb07 0906 	add.w	r9, r7, r6
 8013202:	d110      	bne.n	8013226 <__cvt+0x92>
 8013204:	783b      	ldrb	r3, [r7, #0]
 8013206:	2b30      	cmp	r3, #48	; 0x30
 8013208:	d10a      	bne.n	8013220 <__cvt+0x8c>
 801320a:	2200      	movs	r2, #0
 801320c:	2300      	movs	r3, #0
 801320e:	4620      	mov	r0, r4
 8013210:	4629      	mov	r1, r5
 8013212:	f7ed fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8013216:	b918      	cbnz	r0, 8013220 <__cvt+0x8c>
 8013218:	f1c6 0601 	rsb	r6, r6, #1
 801321c:	f8ca 6000 	str.w	r6, [sl]
 8013220:	f8da 3000 	ldr.w	r3, [sl]
 8013224:	4499      	add	r9, r3
 8013226:	2200      	movs	r2, #0
 8013228:	2300      	movs	r3, #0
 801322a:	4620      	mov	r0, r4
 801322c:	4629      	mov	r1, r5
 801322e:	f7ed fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 8013232:	b108      	cbz	r0, 8013238 <__cvt+0xa4>
 8013234:	f8cd 900c 	str.w	r9, [sp, #12]
 8013238:	2230      	movs	r2, #48	; 0x30
 801323a:	9b03      	ldr	r3, [sp, #12]
 801323c:	454b      	cmp	r3, r9
 801323e:	d307      	bcc.n	8013250 <__cvt+0xbc>
 8013240:	9b03      	ldr	r3, [sp, #12]
 8013242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013244:	1bdb      	subs	r3, r3, r7
 8013246:	4638      	mov	r0, r7
 8013248:	6013      	str	r3, [r2, #0]
 801324a:	b004      	add	sp, #16
 801324c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013250:	1c59      	adds	r1, r3, #1
 8013252:	9103      	str	r1, [sp, #12]
 8013254:	701a      	strb	r2, [r3, #0]
 8013256:	e7f0      	b.n	801323a <__cvt+0xa6>

08013258 <__exponent>:
 8013258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801325a:	4603      	mov	r3, r0
 801325c:	2900      	cmp	r1, #0
 801325e:	bfb8      	it	lt
 8013260:	4249      	neglt	r1, r1
 8013262:	f803 2b02 	strb.w	r2, [r3], #2
 8013266:	bfb4      	ite	lt
 8013268:	222d      	movlt	r2, #45	; 0x2d
 801326a:	222b      	movge	r2, #43	; 0x2b
 801326c:	2909      	cmp	r1, #9
 801326e:	7042      	strb	r2, [r0, #1]
 8013270:	dd2a      	ble.n	80132c8 <__exponent+0x70>
 8013272:	f10d 0407 	add.w	r4, sp, #7
 8013276:	46a4      	mov	ip, r4
 8013278:	270a      	movs	r7, #10
 801327a:	46a6      	mov	lr, r4
 801327c:	460a      	mov	r2, r1
 801327e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013282:	fb07 1516 	mls	r5, r7, r6, r1
 8013286:	3530      	adds	r5, #48	; 0x30
 8013288:	2a63      	cmp	r2, #99	; 0x63
 801328a:	f104 34ff 	add.w	r4, r4, #4294967295
 801328e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013292:	4631      	mov	r1, r6
 8013294:	dcf1      	bgt.n	801327a <__exponent+0x22>
 8013296:	3130      	adds	r1, #48	; 0x30
 8013298:	f1ae 0502 	sub.w	r5, lr, #2
 801329c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80132a0:	1c44      	adds	r4, r0, #1
 80132a2:	4629      	mov	r1, r5
 80132a4:	4561      	cmp	r1, ip
 80132a6:	d30a      	bcc.n	80132be <__exponent+0x66>
 80132a8:	f10d 0209 	add.w	r2, sp, #9
 80132ac:	eba2 020e 	sub.w	r2, r2, lr
 80132b0:	4565      	cmp	r5, ip
 80132b2:	bf88      	it	hi
 80132b4:	2200      	movhi	r2, #0
 80132b6:	4413      	add	r3, r2
 80132b8:	1a18      	subs	r0, r3, r0
 80132ba:	b003      	add	sp, #12
 80132bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80132c6:	e7ed      	b.n	80132a4 <__exponent+0x4c>
 80132c8:	2330      	movs	r3, #48	; 0x30
 80132ca:	3130      	adds	r1, #48	; 0x30
 80132cc:	7083      	strb	r3, [r0, #2]
 80132ce:	70c1      	strb	r1, [r0, #3]
 80132d0:	1d03      	adds	r3, r0, #4
 80132d2:	e7f1      	b.n	80132b8 <__exponent+0x60>

080132d4 <_printf_float>:
 80132d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d8:	ed2d 8b02 	vpush	{d8}
 80132dc:	b08d      	sub	sp, #52	; 0x34
 80132de:	460c      	mov	r4, r1
 80132e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80132e4:	4616      	mov	r6, r2
 80132e6:	461f      	mov	r7, r3
 80132e8:	4605      	mov	r5, r0
 80132ea:	f003 fae5 	bl	80168b8 <_localeconv_r>
 80132ee:	f8d0 a000 	ldr.w	sl, [r0]
 80132f2:	4650      	mov	r0, sl
 80132f4:	f7ec ff86 	bl	8000204 <strlen>
 80132f8:	2300      	movs	r3, #0
 80132fa:	930a      	str	r3, [sp, #40]	; 0x28
 80132fc:	6823      	ldr	r3, [r4, #0]
 80132fe:	9305      	str	r3, [sp, #20]
 8013300:	f8d8 3000 	ldr.w	r3, [r8]
 8013304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013308:	3307      	adds	r3, #7
 801330a:	f023 0307 	bic.w	r3, r3, #7
 801330e:	f103 0208 	add.w	r2, r3, #8
 8013312:	f8c8 2000 	str.w	r2, [r8]
 8013316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801331e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013326:	9307      	str	r3, [sp, #28]
 8013328:	f8cd 8018 	str.w	r8, [sp, #24]
 801332c:	ee08 0a10 	vmov	s16, r0
 8013330:	4b9f      	ldr	r3, [pc, #636]	; (80135b0 <_printf_float+0x2dc>)
 8013332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013336:	f04f 32ff 	mov.w	r2, #4294967295
 801333a:	f7ed fc17 	bl	8000b6c <__aeabi_dcmpun>
 801333e:	bb88      	cbnz	r0, 80133a4 <_printf_float+0xd0>
 8013340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013344:	4b9a      	ldr	r3, [pc, #616]	; (80135b0 <_printf_float+0x2dc>)
 8013346:	f04f 32ff 	mov.w	r2, #4294967295
 801334a:	f7ed fbf1 	bl	8000b30 <__aeabi_dcmple>
 801334e:	bb48      	cbnz	r0, 80133a4 <_printf_float+0xd0>
 8013350:	2200      	movs	r2, #0
 8013352:	2300      	movs	r3, #0
 8013354:	4640      	mov	r0, r8
 8013356:	4649      	mov	r1, r9
 8013358:	f7ed fbe0 	bl	8000b1c <__aeabi_dcmplt>
 801335c:	b110      	cbz	r0, 8013364 <_printf_float+0x90>
 801335e:	232d      	movs	r3, #45	; 0x2d
 8013360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013364:	4b93      	ldr	r3, [pc, #588]	; (80135b4 <_printf_float+0x2e0>)
 8013366:	4894      	ldr	r0, [pc, #592]	; (80135b8 <_printf_float+0x2e4>)
 8013368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801336c:	bf94      	ite	ls
 801336e:	4698      	movls	r8, r3
 8013370:	4680      	movhi	r8, r0
 8013372:	2303      	movs	r3, #3
 8013374:	6123      	str	r3, [r4, #16]
 8013376:	9b05      	ldr	r3, [sp, #20]
 8013378:	f023 0204 	bic.w	r2, r3, #4
 801337c:	6022      	str	r2, [r4, #0]
 801337e:	f04f 0900 	mov.w	r9, #0
 8013382:	9700      	str	r7, [sp, #0]
 8013384:	4633      	mov	r3, r6
 8013386:	aa0b      	add	r2, sp, #44	; 0x2c
 8013388:	4621      	mov	r1, r4
 801338a:	4628      	mov	r0, r5
 801338c:	f000 f9d8 	bl	8013740 <_printf_common>
 8013390:	3001      	adds	r0, #1
 8013392:	f040 8090 	bne.w	80134b6 <_printf_float+0x1e2>
 8013396:	f04f 30ff 	mov.w	r0, #4294967295
 801339a:	b00d      	add	sp, #52	; 0x34
 801339c:	ecbd 8b02 	vpop	{d8}
 80133a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a4:	4642      	mov	r2, r8
 80133a6:	464b      	mov	r3, r9
 80133a8:	4640      	mov	r0, r8
 80133aa:	4649      	mov	r1, r9
 80133ac:	f7ed fbde 	bl	8000b6c <__aeabi_dcmpun>
 80133b0:	b140      	cbz	r0, 80133c4 <_printf_float+0xf0>
 80133b2:	464b      	mov	r3, r9
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bfbc      	itt	lt
 80133b8:	232d      	movlt	r3, #45	; 0x2d
 80133ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80133be:	487f      	ldr	r0, [pc, #508]	; (80135bc <_printf_float+0x2e8>)
 80133c0:	4b7f      	ldr	r3, [pc, #508]	; (80135c0 <_printf_float+0x2ec>)
 80133c2:	e7d1      	b.n	8013368 <_printf_float+0x94>
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80133ca:	9206      	str	r2, [sp, #24]
 80133cc:	1c5a      	adds	r2, r3, #1
 80133ce:	d13f      	bne.n	8013450 <_printf_float+0x17c>
 80133d0:	2306      	movs	r3, #6
 80133d2:	6063      	str	r3, [r4, #4]
 80133d4:	9b05      	ldr	r3, [sp, #20]
 80133d6:	6861      	ldr	r1, [r4, #4]
 80133d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80133dc:	2300      	movs	r3, #0
 80133de:	9303      	str	r3, [sp, #12]
 80133e0:	ab0a      	add	r3, sp, #40	; 0x28
 80133e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80133e6:	ab09      	add	r3, sp, #36	; 0x24
 80133e8:	ec49 8b10 	vmov	d0, r8, r9
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133f4:	4628      	mov	r0, r5
 80133f6:	f7ff fecd 	bl	8013194 <__cvt>
 80133fa:	9b06      	ldr	r3, [sp, #24]
 80133fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133fe:	2b47      	cmp	r3, #71	; 0x47
 8013400:	4680      	mov	r8, r0
 8013402:	d108      	bne.n	8013416 <_printf_float+0x142>
 8013404:	1cc8      	adds	r0, r1, #3
 8013406:	db02      	blt.n	801340e <_printf_float+0x13a>
 8013408:	6863      	ldr	r3, [r4, #4]
 801340a:	4299      	cmp	r1, r3
 801340c:	dd41      	ble.n	8013492 <_printf_float+0x1be>
 801340e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013412:	fa5f fb8b 	uxtb.w	fp, fp
 8013416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801341a:	d820      	bhi.n	801345e <_printf_float+0x18a>
 801341c:	3901      	subs	r1, #1
 801341e:	465a      	mov	r2, fp
 8013420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013424:	9109      	str	r1, [sp, #36]	; 0x24
 8013426:	f7ff ff17 	bl	8013258 <__exponent>
 801342a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801342c:	1813      	adds	r3, r2, r0
 801342e:	2a01      	cmp	r2, #1
 8013430:	4681      	mov	r9, r0
 8013432:	6123      	str	r3, [r4, #16]
 8013434:	dc02      	bgt.n	801343c <_printf_float+0x168>
 8013436:	6822      	ldr	r2, [r4, #0]
 8013438:	07d2      	lsls	r2, r2, #31
 801343a:	d501      	bpl.n	8013440 <_printf_float+0x16c>
 801343c:	3301      	adds	r3, #1
 801343e:	6123      	str	r3, [r4, #16]
 8013440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013444:	2b00      	cmp	r3, #0
 8013446:	d09c      	beq.n	8013382 <_printf_float+0xae>
 8013448:	232d      	movs	r3, #45	; 0x2d
 801344a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801344e:	e798      	b.n	8013382 <_printf_float+0xae>
 8013450:	9a06      	ldr	r2, [sp, #24]
 8013452:	2a47      	cmp	r2, #71	; 0x47
 8013454:	d1be      	bne.n	80133d4 <_printf_float+0x100>
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1bc      	bne.n	80133d4 <_printf_float+0x100>
 801345a:	2301      	movs	r3, #1
 801345c:	e7b9      	b.n	80133d2 <_printf_float+0xfe>
 801345e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013462:	d118      	bne.n	8013496 <_printf_float+0x1c2>
 8013464:	2900      	cmp	r1, #0
 8013466:	6863      	ldr	r3, [r4, #4]
 8013468:	dd0b      	ble.n	8013482 <_printf_float+0x1ae>
 801346a:	6121      	str	r1, [r4, #16]
 801346c:	b913      	cbnz	r3, 8013474 <_printf_float+0x1a0>
 801346e:	6822      	ldr	r2, [r4, #0]
 8013470:	07d0      	lsls	r0, r2, #31
 8013472:	d502      	bpl.n	801347a <_printf_float+0x1a6>
 8013474:	3301      	adds	r3, #1
 8013476:	440b      	add	r3, r1
 8013478:	6123      	str	r3, [r4, #16]
 801347a:	65a1      	str	r1, [r4, #88]	; 0x58
 801347c:	f04f 0900 	mov.w	r9, #0
 8013480:	e7de      	b.n	8013440 <_printf_float+0x16c>
 8013482:	b913      	cbnz	r3, 801348a <_printf_float+0x1b6>
 8013484:	6822      	ldr	r2, [r4, #0]
 8013486:	07d2      	lsls	r2, r2, #31
 8013488:	d501      	bpl.n	801348e <_printf_float+0x1ba>
 801348a:	3302      	adds	r3, #2
 801348c:	e7f4      	b.n	8013478 <_printf_float+0x1a4>
 801348e:	2301      	movs	r3, #1
 8013490:	e7f2      	b.n	8013478 <_printf_float+0x1a4>
 8013492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013498:	4299      	cmp	r1, r3
 801349a:	db05      	blt.n	80134a8 <_printf_float+0x1d4>
 801349c:	6823      	ldr	r3, [r4, #0]
 801349e:	6121      	str	r1, [r4, #16]
 80134a0:	07d8      	lsls	r0, r3, #31
 80134a2:	d5ea      	bpl.n	801347a <_printf_float+0x1a6>
 80134a4:	1c4b      	adds	r3, r1, #1
 80134a6:	e7e7      	b.n	8013478 <_printf_float+0x1a4>
 80134a8:	2900      	cmp	r1, #0
 80134aa:	bfd4      	ite	le
 80134ac:	f1c1 0202 	rsble	r2, r1, #2
 80134b0:	2201      	movgt	r2, #1
 80134b2:	4413      	add	r3, r2
 80134b4:	e7e0      	b.n	8013478 <_printf_float+0x1a4>
 80134b6:	6823      	ldr	r3, [r4, #0]
 80134b8:	055a      	lsls	r2, r3, #21
 80134ba:	d407      	bmi.n	80134cc <_printf_float+0x1f8>
 80134bc:	6923      	ldr	r3, [r4, #16]
 80134be:	4642      	mov	r2, r8
 80134c0:	4631      	mov	r1, r6
 80134c2:	4628      	mov	r0, r5
 80134c4:	47b8      	blx	r7
 80134c6:	3001      	adds	r0, #1
 80134c8:	d12c      	bne.n	8013524 <_printf_float+0x250>
 80134ca:	e764      	b.n	8013396 <_printf_float+0xc2>
 80134cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80134d0:	f240 80e0 	bls.w	8013694 <_printf_float+0x3c0>
 80134d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134d8:	2200      	movs	r2, #0
 80134da:	2300      	movs	r3, #0
 80134dc:	f7ed fb14 	bl	8000b08 <__aeabi_dcmpeq>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d034      	beq.n	801354e <_printf_float+0x27a>
 80134e4:	4a37      	ldr	r2, [pc, #220]	; (80135c4 <_printf_float+0x2f0>)
 80134e6:	2301      	movs	r3, #1
 80134e8:	4631      	mov	r1, r6
 80134ea:	4628      	mov	r0, r5
 80134ec:	47b8      	blx	r7
 80134ee:	3001      	adds	r0, #1
 80134f0:	f43f af51 	beq.w	8013396 <_printf_float+0xc2>
 80134f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134f8:	429a      	cmp	r2, r3
 80134fa:	db02      	blt.n	8013502 <_printf_float+0x22e>
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	07d8      	lsls	r0, r3, #31
 8013500:	d510      	bpl.n	8013524 <_printf_float+0x250>
 8013502:	ee18 3a10 	vmov	r3, s16
 8013506:	4652      	mov	r2, sl
 8013508:	4631      	mov	r1, r6
 801350a:	4628      	mov	r0, r5
 801350c:	47b8      	blx	r7
 801350e:	3001      	adds	r0, #1
 8013510:	f43f af41 	beq.w	8013396 <_printf_float+0xc2>
 8013514:	f04f 0800 	mov.w	r8, #0
 8013518:	f104 091a 	add.w	r9, r4, #26
 801351c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801351e:	3b01      	subs	r3, #1
 8013520:	4543      	cmp	r3, r8
 8013522:	dc09      	bgt.n	8013538 <_printf_float+0x264>
 8013524:	6823      	ldr	r3, [r4, #0]
 8013526:	079b      	lsls	r3, r3, #30
 8013528:	f100 8105 	bmi.w	8013736 <_printf_float+0x462>
 801352c:	68e0      	ldr	r0, [r4, #12]
 801352e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013530:	4298      	cmp	r0, r3
 8013532:	bfb8      	it	lt
 8013534:	4618      	movlt	r0, r3
 8013536:	e730      	b.n	801339a <_printf_float+0xc6>
 8013538:	2301      	movs	r3, #1
 801353a:	464a      	mov	r2, r9
 801353c:	4631      	mov	r1, r6
 801353e:	4628      	mov	r0, r5
 8013540:	47b8      	blx	r7
 8013542:	3001      	adds	r0, #1
 8013544:	f43f af27 	beq.w	8013396 <_printf_float+0xc2>
 8013548:	f108 0801 	add.w	r8, r8, #1
 801354c:	e7e6      	b.n	801351c <_printf_float+0x248>
 801354e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013550:	2b00      	cmp	r3, #0
 8013552:	dc39      	bgt.n	80135c8 <_printf_float+0x2f4>
 8013554:	4a1b      	ldr	r2, [pc, #108]	; (80135c4 <_printf_float+0x2f0>)
 8013556:	2301      	movs	r3, #1
 8013558:	4631      	mov	r1, r6
 801355a:	4628      	mov	r0, r5
 801355c:	47b8      	blx	r7
 801355e:	3001      	adds	r0, #1
 8013560:	f43f af19 	beq.w	8013396 <_printf_float+0xc2>
 8013564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013568:	4313      	orrs	r3, r2
 801356a:	d102      	bne.n	8013572 <_printf_float+0x29e>
 801356c:	6823      	ldr	r3, [r4, #0]
 801356e:	07d9      	lsls	r1, r3, #31
 8013570:	d5d8      	bpl.n	8013524 <_printf_float+0x250>
 8013572:	ee18 3a10 	vmov	r3, s16
 8013576:	4652      	mov	r2, sl
 8013578:	4631      	mov	r1, r6
 801357a:	4628      	mov	r0, r5
 801357c:	47b8      	blx	r7
 801357e:	3001      	adds	r0, #1
 8013580:	f43f af09 	beq.w	8013396 <_printf_float+0xc2>
 8013584:	f04f 0900 	mov.w	r9, #0
 8013588:	f104 0a1a 	add.w	sl, r4, #26
 801358c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801358e:	425b      	negs	r3, r3
 8013590:	454b      	cmp	r3, r9
 8013592:	dc01      	bgt.n	8013598 <_printf_float+0x2c4>
 8013594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013596:	e792      	b.n	80134be <_printf_float+0x1ea>
 8013598:	2301      	movs	r3, #1
 801359a:	4652      	mov	r2, sl
 801359c:	4631      	mov	r1, r6
 801359e:	4628      	mov	r0, r5
 80135a0:	47b8      	blx	r7
 80135a2:	3001      	adds	r0, #1
 80135a4:	f43f aef7 	beq.w	8013396 <_printf_float+0xc2>
 80135a8:	f109 0901 	add.w	r9, r9, #1
 80135ac:	e7ee      	b.n	801358c <_printf_float+0x2b8>
 80135ae:	bf00      	nop
 80135b0:	7fefffff 	.word	0x7fefffff
 80135b4:	08058765 	.word	0x08058765
 80135b8:	08058769 	.word	0x08058769
 80135bc:	08058771 	.word	0x08058771
 80135c0:	0805876d 	.word	0x0805876d
 80135c4:	08058c98 	.word	0x08058c98
 80135c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135cc:	429a      	cmp	r2, r3
 80135ce:	bfa8      	it	ge
 80135d0:	461a      	movge	r2, r3
 80135d2:	2a00      	cmp	r2, #0
 80135d4:	4691      	mov	r9, r2
 80135d6:	dc37      	bgt.n	8013648 <_printf_float+0x374>
 80135d8:	f04f 0b00 	mov.w	fp, #0
 80135dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135e0:	f104 021a 	add.w	r2, r4, #26
 80135e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135e6:	9305      	str	r3, [sp, #20]
 80135e8:	eba3 0309 	sub.w	r3, r3, r9
 80135ec:	455b      	cmp	r3, fp
 80135ee:	dc33      	bgt.n	8013658 <_printf_float+0x384>
 80135f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135f4:	429a      	cmp	r2, r3
 80135f6:	db3b      	blt.n	8013670 <_printf_float+0x39c>
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	07da      	lsls	r2, r3, #31
 80135fc:	d438      	bmi.n	8013670 <_printf_float+0x39c>
 80135fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013600:	9a05      	ldr	r2, [sp, #20]
 8013602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013604:	1a9a      	subs	r2, r3, r2
 8013606:	eba3 0901 	sub.w	r9, r3, r1
 801360a:	4591      	cmp	r9, r2
 801360c:	bfa8      	it	ge
 801360e:	4691      	movge	r9, r2
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	dc35      	bgt.n	8013682 <_printf_float+0x3ae>
 8013616:	f04f 0800 	mov.w	r8, #0
 801361a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801361e:	f104 0a1a 	add.w	sl, r4, #26
 8013622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013626:	1a9b      	subs	r3, r3, r2
 8013628:	eba3 0309 	sub.w	r3, r3, r9
 801362c:	4543      	cmp	r3, r8
 801362e:	f77f af79 	ble.w	8013524 <_printf_float+0x250>
 8013632:	2301      	movs	r3, #1
 8013634:	4652      	mov	r2, sl
 8013636:	4631      	mov	r1, r6
 8013638:	4628      	mov	r0, r5
 801363a:	47b8      	blx	r7
 801363c:	3001      	adds	r0, #1
 801363e:	f43f aeaa 	beq.w	8013396 <_printf_float+0xc2>
 8013642:	f108 0801 	add.w	r8, r8, #1
 8013646:	e7ec      	b.n	8013622 <_printf_float+0x34e>
 8013648:	4613      	mov	r3, r2
 801364a:	4631      	mov	r1, r6
 801364c:	4642      	mov	r2, r8
 801364e:	4628      	mov	r0, r5
 8013650:	47b8      	blx	r7
 8013652:	3001      	adds	r0, #1
 8013654:	d1c0      	bne.n	80135d8 <_printf_float+0x304>
 8013656:	e69e      	b.n	8013396 <_printf_float+0xc2>
 8013658:	2301      	movs	r3, #1
 801365a:	4631      	mov	r1, r6
 801365c:	4628      	mov	r0, r5
 801365e:	9205      	str	r2, [sp, #20]
 8013660:	47b8      	blx	r7
 8013662:	3001      	adds	r0, #1
 8013664:	f43f ae97 	beq.w	8013396 <_printf_float+0xc2>
 8013668:	9a05      	ldr	r2, [sp, #20]
 801366a:	f10b 0b01 	add.w	fp, fp, #1
 801366e:	e7b9      	b.n	80135e4 <_printf_float+0x310>
 8013670:	ee18 3a10 	vmov	r3, s16
 8013674:	4652      	mov	r2, sl
 8013676:	4631      	mov	r1, r6
 8013678:	4628      	mov	r0, r5
 801367a:	47b8      	blx	r7
 801367c:	3001      	adds	r0, #1
 801367e:	d1be      	bne.n	80135fe <_printf_float+0x32a>
 8013680:	e689      	b.n	8013396 <_printf_float+0xc2>
 8013682:	9a05      	ldr	r2, [sp, #20]
 8013684:	464b      	mov	r3, r9
 8013686:	4442      	add	r2, r8
 8013688:	4631      	mov	r1, r6
 801368a:	4628      	mov	r0, r5
 801368c:	47b8      	blx	r7
 801368e:	3001      	adds	r0, #1
 8013690:	d1c1      	bne.n	8013616 <_printf_float+0x342>
 8013692:	e680      	b.n	8013396 <_printf_float+0xc2>
 8013694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013696:	2a01      	cmp	r2, #1
 8013698:	dc01      	bgt.n	801369e <_printf_float+0x3ca>
 801369a:	07db      	lsls	r3, r3, #31
 801369c:	d538      	bpl.n	8013710 <_printf_float+0x43c>
 801369e:	2301      	movs	r3, #1
 80136a0:	4642      	mov	r2, r8
 80136a2:	4631      	mov	r1, r6
 80136a4:	4628      	mov	r0, r5
 80136a6:	47b8      	blx	r7
 80136a8:	3001      	adds	r0, #1
 80136aa:	f43f ae74 	beq.w	8013396 <_printf_float+0xc2>
 80136ae:	ee18 3a10 	vmov	r3, s16
 80136b2:	4652      	mov	r2, sl
 80136b4:	4631      	mov	r1, r6
 80136b6:	4628      	mov	r0, r5
 80136b8:	47b8      	blx	r7
 80136ba:	3001      	adds	r0, #1
 80136bc:	f43f ae6b 	beq.w	8013396 <_printf_float+0xc2>
 80136c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136c4:	2200      	movs	r2, #0
 80136c6:	2300      	movs	r3, #0
 80136c8:	f7ed fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 80136cc:	b9d8      	cbnz	r0, 8013706 <_printf_float+0x432>
 80136ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d0:	f108 0201 	add.w	r2, r8, #1
 80136d4:	3b01      	subs	r3, #1
 80136d6:	4631      	mov	r1, r6
 80136d8:	4628      	mov	r0, r5
 80136da:	47b8      	blx	r7
 80136dc:	3001      	adds	r0, #1
 80136de:	d10e      	bne.n	80136fe <_printf_float+0x42a>
 80136e0:	e659      	b.n	8013396 <_printf_float+0xc2>
 80136e2:	2301      	movs	r3, #1
 80136e4:	4652      	mov	r2, sl
 80136e6:	4631      	mov	r1, r6
 80136e8:	4628      	mov	r0, r5
 80136ea:	47b8      	blx	r7
 80136ec:	3001      	adds	r0, #1
 80136ee:	f43f ae52 	beq.w	8013396 <_printf_float+0xc2>
 80136f2:	f108 0801 	add.w	r8, r8, #1
 80136f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136f8:	3b01      	subs	r3, #1
 80136fa:	4543      	cmp	r3, r8
 80136fc:	dcf1      	bgt.n	80136e2 <_printf_float+0x40e>
 80136fe:	464b      	mov	r3, r9
 8013700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013704:	e6dc      	b.n	80134c0 <_printf_float+0x1ec>
 8013706:	f04f 0800 	mov.w	r8, #0
 801370a:	f104 0a1a 	add.w	sl, r4, #26
 801370e:	e7f2      	b.n	80136f6 <_printf_float+0x422>
 8013710:	2301      	movs	r3, #1
 8013712:	4642      	mov	r2, r8
 8013714:	e7df      	b.n	80136d6 <_printf_float+0x402>
 8013716:	2301      	movs	r3, #1
 8013718:	464a      	mov	r2, r9
 801371a:	4631      	mov	r1, r6
 801371c:	4628      	mov	r0, r5
 801371e:	47b8      	blx	r7
 8013720:	3001      	adds	r0, #1
 8013722:	f43f ae38 	beq.w	8013396 <_printf_float+0xc2>
 8013726:	f108 0801 	add.w	r8, r8, #1
 801372a:	68e3      	ldr	r3, [r4, #12]
 801372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801372e:	1a5b      	subs	r3, r3, r1
 8013730:	4543      	cmp	r3, r8
 8013732:	dcf0      	bgt.n	8013716 <_printf_float+0x442>
 8013734:	e6fa      	b.n	801352c <_printf_float+0x258>
 8013736:	f04f 0800 	mov.w	r8, #0
 801373a:	f104 0919 	add.w	r9, r4, #25
 801373e:	e7f4      	b.n	801372a <_printf_float+0x456>

08013740 <_printf_common>:
 8013740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013744:	4616      	mov	r6, r2
 8013746:	4699      	mov	r9, r3
 8013748:	688a      	ldr	r2, [r1, #8]
 801374a:	690b      	ldr	r3, [r1, #16]
 801374c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013750:	4293      	cmp	r3, r2
 8013752:	bfb8      	it	lt
 8013754:	4613      	movlt	r3, r2
 8013756:	6033      	str	r3, [r6, #0]
 8013758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801375c:	4607      	mov	r7, r0
 801375e:	460c      	mov	r4, r1
 8013760:	b10a      	cbz	r2, 8013766 <_printf_common+0x26>
 8013762:	3301      	adds	r3, #1
 8013764:	6033      	str	r3, [r6, #0]
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	0699      	lsls	r1, r3, #26
 801376a:	bf42      	ittt	mi
 801376c:	6833      	ldrmi	r3, [r6, #0]
 801376e:	3302      	addmi	r3, #2
 8013770:	6033      	strmi	r3, [r6, #0]
 8013772:	6825      	ldr	r5, [r4, #0]
 8013774:	f015 0506 	ands.w	r5, r5, #6
 8013778:	d106      	bne.n	8013788 <_printf_common+0x48>
 801377a:	f104 0a19 	add.w	sl, r4, #25
 801377e:	68e3      	ldr	r3, [r4, #12]
 8013780:	6832      	ldr	r2, [r6, #0]
 8013782:	1a9b      	subs	r3, r3, r2
 8013784:	42ab      	cmp	r3, r5
 8013786:	dc26      	bgt.n	80137d6 <_printf_common+0x96>
 8013788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801378c:	1e13      	subs	r3, r2, #0
 801378e:	6822      	ldr	r2, [r4, #0]
 8013790:	bf18      	it	ne
 8013792:	2301      	movne	r3, #1
 8013794:	0692      	lsls	r2, r2, #26
 8013796:	d42b      	bmi.n	80137f0 <_printf_common+0xb0>
 8013798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801379c:	4649      	mov	r1, r9
 801379e:	4638      	mov	r0, r7
 80137a0:	47c0      	blx	r8
 80137a2:	3001      	adds	r0, #1
 80137a4:	d01e      	beq.n	80137e4 <_printf_common+0xa4>
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	68e5      	ldr	r5, [r4, #12]
 80137aa:	6832      	ldr	r2, [r6, #0]
 80137ac:	f003 0306 	and.w	r3, r3, #6
 80137b0:	2b04      	cmp	r3, #4
 80137b2:	bf08      	it	eq
 80137b4:	1aad      	subeq	r5, r5, r2
 80137b6:	68a3      	ldr	r3, [r4, #8]
 80137b8:	6922      	ldr	r2, [r4, #16]
 80137ba:	bf0c      	ite	eq
 80137bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137c0:	2500      	movne	r5, #0
 80137c2:	4293      	cmp	r3, r2
 80137c4:	bfc4      	itt	gt
 80137c6:	1a9b      	subgt	r3, r3, r2
 80137c8:	18ed      	addgt	r5, r5, r3
 80137ca:	2600      	movs	r6, #0
 80137cc:	341a      	adds	r4, #26
 80137ce:	42b5      	cmp	r5, r6
 80137d0:	d11a      	bne.n	8013808 <_printf_common+0xc8>
 80137d2:	2000      	movs	r0, #0
 80137d4:	e008      	b.n	80137e8 <_printf_common+0xa8>
 80137d6:	2301      	movs	r3, #1
 80137d8:	4652      	mov	r2, sl
 80137da:	4649      	mov	r1, r9
 80137dc:	4638      	mov	r0, r7
 80137de:	47c0      	blx	r8
 80137e0:	3001      	adds	r0, #1
 80137e2:	d103      	bne.n	80137ec <_printf_common+0xac>
 80137e4:	f04f 30ff 	mov.w	r0, #4294967295
 80137e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ec:	3501      	adds	r5, #1
 80137ee:	e7c6      	b.n	801377e <_printf_common+0x3e>
 80137f0:	18e1      	adds	r1, r4, r3
 80137f2:	1c5a      	adds	r2, r3, #1
 80137f4:	2030      	movs	r0, #48	; 0x30
 80137f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137fa:	4422      	add	r2, r4
 80137fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013804:	3302      	adds	r3, #2
 8013806:	e7c7      	b.n	8013798 <_printf_common+0x58>
 8013808:	2301      	movs	r3, #1
 801380a:	4622      	mov	r2, r4
 801380c:	4649      	mov	r1, r9
 801380e:	4638      	mov	r0, r7
 8013810:	47c0      	blx	r8
 8013812:	3001      	adds	r0, #1
 8013814:	d0e6      	beq.n	80137e4 <_printf_common+0xa4>
 8013816:	3601      	adds	r6, #1
 8013818:	e7d9      	b.n	80137ce <_printf_common+0x8e>
	...

0801381c <_printf_i>:
 801381c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013820:	7e0f      	ldrb	r7, [r1, #24]
 8013822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013824:	2f78      	cmp	r7, #120	; 0x78
 8013826:	4691      	mov	r9, r2
 8013828:	4680      	mov	r8, r0
 801382a:	460c      	mov	r4, r1
 801382c:	469a      	mov	sl, r3
 801382e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013832:	d807      	bhi.n	8013844 <_printf_i+0x28>
 8013834:	2f62      	cmp	r7, #98	; 0x62
 8013836:	d80a      	bhi.n	801384e <_printf_i+0x32>
 8013838:	2f00      	cmp	r7, #0
 801383a:	f000 80d8 	beq.w	80139ee <_printf_i+0x1d2>
 801383e:	2f58      	cmp	r7, #88	; 0x58
 8013840:	f000 80a3 	beq.w	801398a <_printf_i+0x16e>
 8013844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801384c:	e03a      	b.n	80138c4 <_printf_i+0xa8>
 801384e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013852:	2b15      	cmp	r3, #21
 8013854:	d8f6      	bhi.n	8013844 <_printf_i+0x28>
 8013856:	a101      	add	r1, pc, #4	; (adr r1, 801385c <_printf_i+0x40>)
 8013858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801385c:	080138b5 	.word	0x080138b5
 8013860:	080138c9 	.word	0x080138c9
 8013864:	08013845 	.word	0x08013845
 8013868:	08013845 	.word	0x08013845
 801386c:	08013845 	.word	0x08013845
 8013870:	08013845 	.word	0x08013845
 8013874:	080138c9 	.word	0x080138c9
 8013878:	08013845 	.word	0x08013845
 801387c:	08013845 	.word	0x08013845
 8013880:	08013845 	.word	0x08013845
 8013884:	08013845 	.word	0x08013845
 8013888:	080139d5 	.word	0x080139d5
 801388c:	080138f9 	.word	0x080138f9
 8013890:	080139b7 	.word	0x080139b7
 8013894:	08013845 	.word	0x08013845
 8013898:	08013845 	.word	0x08013845
 801389c:	080139f7 	.word	0x080139f7
 80138a0:	08013845 	.word	0x08013845
 80138a4:	080138f9 	.word	0x080138f9
 80138a8:	08013845 	.word	0x08013845
 80138ac:	08013845 	.word	0x08013845
 80138b0:	080139bf 	.word	0x080139bf
 80138b4:	682b      	ldr	r3, [r5, #0]
 80138b6:	1d1a      	adds	r2, r3, #4
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	602a      	str	r2, [r5, #0]
 80138bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138c4:	2301      	movs	r3, #1
 80138c6:	e0a3      	b.n	8013a10 <_printf_i+0x1f4>
 80138c8:	6820      	ldr	r0, [r4, #0]
 80138ca:	6829      	ldr	r1, [r5, #0]
 80138cc:	0606      	lsls	r6, r0, #24
 80138ce:	f101 0304 	add.w	r3, r1, #4
 80138d2:	d50a      	bpl.n	80138ea <_printf_i+0xce>
 80138d4:	680e      	ldr	r6, [r1, #0]
 80138d6:	602b      	str	r3, [r5, #0]
 80138d8:	2e00      	cmp	r6, #0
 80138da:	da03      	bge.n	80138e4 <_printf_i+0xc8>
 80138dc:	232d      	movs	r3, #45	; 0x2d
 80138de:	4276      	negs	r6, r6
 80138e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138e4:	485e      	ldr	r0, [pc, #376]	; (8013a60 <_printf_i+0x244>)
 80138e6:	230a      	movs	r3, #10
 80138e8:	e019      	b.n	801391e <_printf_i+0x102>
 80138ea:	680e      	ldr	r6, [r1, #0]
 80138ec:	602b      	str	r3, [r5, #0]
 80138ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80138f2:	bf18      	it	ne
 80138f4:	b236      	sxthne	r6, r6
 80138f6:	e7ef      	b.n	80138d8 <_printf_i+0xbc>
 80138f8:	682b      	ldr	r3, [r5, #0]
 80138fa:	6820      	ldr	r0, [r4, #0]
 80138fc:	1d19      	adds	r1, r3, #4
 80138fe:	6029      	str	r1, [r5, #0]
 8013900:	0601      	lsls	r1, r0, #24
 8013902:	d501      	bpl.n	8013908 <_printf_i+0xec>
 8013904:	681e      	ldr	r6, [r3, #0]
 8013906:	e002      	b.n	801390e <_printf_i+0xf2>
 8013908:	0646      	lsls	r6, r0, #25
 801390a:	d5fb      	bpl.n	8013904 <_printf_i+0xe8>
 801390c:	881e      	ldrh	r6, [r3, #0]
 801390e:	4854      	ldr	r0, [pc, #336]	; (8013a60 <_printf_i+0x244>)
 8013910:	2f6f      	cmp	r7, #111	; 0x6f
 8013912:	bf0c      	ite	eq
 8013914:	2308      	moveq	r3, #8
 8013916:	230a      	movne	r3, #10
 8013918:	2100      	movs	r1, #0
 801391a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801391e:	6865      	ldr	r5, [r4, #4]
 8013920:	60a5      	str	r5, [r4, #8]
 8013922:	2d00      	cmp	r5, #0
 8013924:	bfa2      	ittt	ge
 8013926:	6821      	ldrge	r1, [r4, #0]
 8013928:	f021 0104 	bicge.w	r1, r1, #4
 801392c:	6021      	strge	r1, [r4, #0]
 801392e:	b90e      	cbnz	r6, 8013934 <_printf_i+0x118>
 8013930:	2d00      	cmp	r5, #0
 8013932:	d04d      	beq.n	80139d0 <_printf_i+0x1b4>
 8013934:	4615      	mov	r5, r2
 8013936:	fbb6 f1f3 	udiv	r1, r6, r3
 801393a:	fb03 6711 	mls	r7, r3, r1, r6
 801393e:	5dc7      	ldrb	r7, [r0, r7]
 8013940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013944:	4637      	mov	r7, r6
 8013946:	42bb      	cmp	r3, r7
 8013948:	460e      	mov	r6, r1
 801394a:	d9f4      	bls.n	8013936 <_printf_i+0x11a>
 801394c:	2b08      	cmp	r3, #8
 801394e:	d10b      	bne.n	8013968 <_printf_i+0x14c>
 8013950:	6823      	ldr	r3, [r4, #0]
 8013952:	07de      	lsls	r6, r3, #31
 8013954:	d508      	bpl.n	8013968 <_printf_i+0x14c>
 8013956:	6923      	ldr	r3, [r4, #16]
 8013958:	6861      	ldr	r1, [r4, #4]
 801395a:	4299      	cmp	r1, r3
 801395c:	bfde      	ittt	le
 801395e:	2330      	movle	r3, #48	; 0x30
 8013960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013968:	1b52      	subs	r2, r2, r5
 801396a:	6122      	str	r2, [r4, #16]
 801396c:	f8cd a000 	str.w	sl, [sp]
 8013970:	464b      	mov	r3, r9
 8013972:	aa03      	add	r2, sp, #12
 8013974:	4621      	mov	r1, r4
 8013976:	4640      	mov	r0, r8
 8013978:	f7ff fee2 	bl	8013740 <_printf_common>
 801397c:	3001      	adds	r0, #1
 801397e:	d14c      	bne.n	8013a1a <_printf_i+0x1fe>
 8013980:	f04f 30ff 	mov.w	r0, #4294967295
 8013984:	b004      	add	sp, #16
 8013986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801398a:	4835      	ldr	r0, [pc, #212]	; (8013a60 <_printf_i+0x244>)
 801398c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013990:	6829      	ldr	r1, [r5, #0]
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	f851 6b04 	ldr.w	r6, [r1], #4
 8013998:	6029      	str	r1, [r5, #0]
 801399a:	061d      	lsls	r5, r3, #24
 801399c:	d514      	bpl.n	80139c8 <_printf_i+0x1ac>
 801399e:	07df      	lsls	r7, r3, #31
 80139a0:	bf44      	itt	mi
 80139a2:	f043 0320 	orrmi.w	r3, r3, #32
 80139a6:	6023      	strmi	r3, [r4, #0]
 80139a8:	b91e      	cbnz	r6, 80139b2 <_printf_i+0x196>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	f023 0320 	bic.w	r3, r3, #32
 80139b0:	6023      	str	r3, [r4, #0]
 80139b2:	2310      	movs	r3, #16
 80139b4:	e7b0      	b.n	8013918 <_printf_i+0xfc>
 80139b6:	6823      	ldr	r3, [r4, #0]
 80139b8:	f043 0320 	orr.w	r3, r3, #32
 80139bc:	6023      	str	r3, [r4, #0]
 80139be:	2378      	movs	r3, #120	; 0x78
 80139c0:	4828      	ldr	r0, [pc, #160]	; (8013a64 <_printf_i+0x248>)
 80139c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80139c6:	e7e3      	b.n	8013990 <_printf_i+0x174>
 80139c8:	0659      	lsls	r1, r3, #25
 80139ca:	bf48      	it	mi
 80139cc:	b2b6      	uxthmi	r6, r6
 80139ce:	e7e6      	b.n	801399e <_printf_i+0x182>
 80139d0:	4615      	mov	r5, r2
 80139d2:	e7bb      	b.n	801394c <_printf_i+0x130>
 80139d4:	682b      	ldr	r3, [r5, #0]
 80139d6:	6826      	ldr	r6, [r4, #0]
 80139d8:	6961      	ldr	r1, [r4, #20]
 80139da:	1d18      	adds	r0, r3, #4
 80139dc:	6028      	str	r0, [r5, #0]
 80139de:	0635      	lsls	r5, r6, #24
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	d501      	bpl.n	80139e8 <_printf_i+0x1cc>
 80139e4:	6019      	str	r1, [r3, #0]
 80139e6:	e002      	b.n	80139ee <_printf_i+0x1d2>
 80139e8:	0670      	lsls	r0, r6, #25
 80139ea:	d5fb      	bpl.n	80139e4 <_printf_i+0x1c8>
 80139ec:	8019      	strh	r1, [r3, #0]
 80139ee:	2300      	movs	r3, #0
 80139f0:	6123      	str	r3, [r4, #16]
 80139f2:	4615      	mov	r5, r2
 80139f4:	e7ba      	b.n	801396c <_printf_i+0x150>
 80139f6:	682b      	ldr	r3, [r5, #0]
 80139f8:	1d1a      	adds	r2, r3, #4
 80139fa:	602a      	str	r2, [r5, #0]
 80139fc:	681d      	ldr	r5, [r3, #0]
 80139fe:	6862      	ldr	r2, [r4, #4]
 8013a00:	2100      	movs	r1, #0
 8013a02:	4628      	mov	r0, r5
 8013a04:	f7ec fc0c 	bl	8000220 <memchr>
 8013a08:	b108      	cbz	r0, 8013a0e <_printf_i+0x1f2>
 8013a0a:	1b40      	subs	r0, r0, r5
 8013a0c:	6060      	str	r0, [r4, #4]
 8013a0e:	6863      	ldr	r3, [r4, #4]
 8013a10:	6123      	str	r3, [r4, #16]
 8013a12:	2300      	movs	r3, #0
 8013a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a18:	e7a8      	b.n	801396c <_printf_i+0x150>
 8013a1a:	6923      	ldr	r3, [r4, #16]
 8013a1c:	462a      	mov	r2, r5
 8013a1e:	4649      	mov	r1, r9
 8013a20:	4640      	mov	r0, r8
 8013a22:	47d0      	blx	sl
 8013a24:	3001      	adds	r0, #1
 8013a26:	d0ab      	beq.n	8013980 <_printf_i+0x164>
 8013a28:	6823      	ldr	r3, [r4, #0]
 8013a2a:	079b      	lsls	r3, r3, #30
 8013a2c:	d413      	bmi.n	8013a56 <_printf_i+0x23a>
 8013a2e:	68e0      	ldr	r0, [r4, #12]
 8013a30:	9b03      	ldr	r3, [sp, #12]
 8013a32:	4298      	cmp	r0, r3
 8013a34:	bfb8      	it	lt
 8013a36:	4618      	movlt	r0, r3
 8013a38:	e7a4      	b.n	8013984 <_printf_i+0x168>
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4649      	mov	r1, r9
 8013a40:	4640      	mov	r0, r8
 8013a42:	47d0      	blx	sl
 8013a44:	3001      	adds	r0, #1
 8013a46:	d09b      	beq.n	8013980 <_printf_i+0x164>
 8013a48:	3501      	adds	r5, #1
 8013a4a:	68e3      	ldr	r3, [r4, #12]
 8013a4c:	9903      	ldr	r1, [sp, #12]
 8013a4e:	1a5b      	subs	r3, r3, r1
 8013a50:	42ab      	cmp	r3, r5
 8013a52:	dcf2      	bgt.n	8013a3a <_printf_i+0x21e>
 8013a54:	e7eb      	b.n	8013a2e <_printf_i+0x212>
 8013a56:	2500      	movs	r5, #0
 8013a58:	f104 0619 	add.w	r6, r4, #25
 8013a5c:	e7f5      	b.n	8013a4a <_printf_i+0x22e>
 8013a5e:	bf00      	nop
 8013a60:	08058775 	.word	0x08058775
 8013a64:	08058786 	.word	0x08058786

08013a68 <_sbrk_r>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4d06      	ldr	r5, [pc, #24]	; (8013a84 <_sbrk_r+0x1c>)
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	4604      	mov	r4, r0
 8013a70:	4608      	mov	r0, r1
 8013a72:	602b      	str	r3, [r5, #0]
 8013a74:	f7f0 fe0c 	bl	8004690 <_sbrk>
 8013a78:	1c43      	adds	r3, r0, #1
 8013a7a:	d102      	bne.n	8013a82 <_sbrk_r+0x1a>
 8013a7c:	682b      	ldr	r3, [r5, #0]
 8013a7e:	b103      	cbz	r3, 8013a82 <_sbrk_r+0x1a>
 8013a80:	6023      	str	r3, [r4, #0]
 8013a82:	bd38      	pop	{r3, r4, r5, pc}
 8013a84:	20005e04 	.word	0x20005e04

08013a88 <siprintf>:
 8013a88:	b40e      	push	{r1, r2, r3}
 8013a8a:	b500      	push	{lr}
 8013a8c:	b09c      	sub	sp, #112	; 0x70
 8013a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8013a90:	9002      	str	r0, [sp, #8]
 8013a92:	9006      	str	r0, [sp, #24]
 8013a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a98:	4809      	ldr	r0, [pc, #36]	; (8013ac0 <siprintf+0x38>)
 8013a9a:	9107      	str	r1, [sp, #28]
 8013a9c:	9104      	str	r1, [sp, #16]
 8013a9e:	4909      	ldr	r1, [pc, #36]	; (8013ac4 <siprintf+0x3c>)
 8013aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013aa4:	9105      	str	r1, [sp, #20]
 8013aa6:	6800      	ldr	r0, [r0, #0]
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	a902      	add	r1, sp, #8
 8013aac:	f003 fd20 	bl	80174f0 <_svfiprintf_r>
 8013ab0:	9b02      	ldr	r3, [sp, #8]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	701a      	strb	r2, [r3, #0]
 8013ab6:	b01c      	add	sp, #112	; 0x70
 8013ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013abc:	b003      	add	sp, #12
 8013abe:	4770      	bx	lr
 8013ac0:	20000320 	.word	0x20000320
 8013ac4:	ffff0208 	.word	0xffff0208

08013ac8 <siscanf>:
 8013ac8:	b40e      	push	{r1, r2, r3}
 8013aca:	b510      	push	{r4, lr}
 8013acc:	b09f      	sub	sp, #124	; 0x7c
 8013ace:	ac21      	add	r4, sp, #132	; 0x84
 8013ad0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013ad4:	f854 2b04 	ldr.w	r2, [r4], #4
 8013ad8:	9201      	str	r2, [sp, #4]
 8013ada:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013ade:	9004      	str	r0, [sp, #16]
 8013ae0:	9008      	str	r0, [sp, #32]
 8013ae2:	f7ec fb8f 	bl	8000204 <strlen>
 8013ae6:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <siscanf+0x50>)
 8013ae8:	9005      	str	r0, [sp, #20]
 8013aea:	9009      	str	r0, [sp, #36]	; 0x24
 8013aec:	930d      	str	r3, [sp, #52]	; 0x34
 8013aee:	480b      	ldr	r0, [pc, #44]	; (8013b1c <siscanf+0x54>)
 8013af0:	9a01      	ldr	r2, [sp, #4]
 8013af2:	6800      	ldr	r0, [r0, #0]
 8013af4:	9403      	str	r4, [sp, #12]
 8013af6:	2300      	movs	r3, #0
 8013af8:	9311      	str	r3, [sp, #68]	; 0x44
 8013afa:	9316      	str	r3, [sp, #88]	; 0x58
 8013afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b04:	a904      	add	r1, sp, #16
 8013b06:	4623      	mov	r3, r4
 8013b08:	f003 fe4c 	bl	80177a4 <__ssvfiscanf_r>
 8013b0c:	b01f      	add	sp, #124	; 0x7c
 8013b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b12:	b003      	add	sp, #12
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop
 8013b18:	08013b43 	.word	0x08013b43
 8013b1c:	20000320 	.word	0x20000320

08013b20 <__sread>:
 8013b20:	b510      	push	{r4, lr}
 8013b22:	460c      	mov	r4, r1
 8013b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b28:	f004 f906 	bl	8017d38 <_read_r>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	bfab      	itete	ge
 8013b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b32:	89a3      	ldrhlt	r3, [r4, #12]
 8013b34:	181b      	addge	r3, r3, r0
 8013b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b3a:	bfac      	ite	ge
 8013b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b3e:	81a3      	strhlt	r3, [r4, #12]
 8013b40:	bd10      	pop	{r4, pc}

08013b42 <__seofread>:
 8013b42:	2000      	movs	r0, #0
 8013b44:	4770      	bx	lr

08013b46 <__swrite>:
 8013b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4a:	461f      	mov	r7, r3
 8013b4c:	898b      	ldrh	r3, [r1, #12]
 8013b4e:	05db      	lsls	r3, r3, #23
 8013b50:	4605      	mov	r5, r0
 8013b52:	460c      	mov	r4, r1
 8013b54:	4616      	mov	r6, r2
 8013b56:	d505      	bpl.n	8013b64 <__swrite+0x1e>
 8013b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b5c:	2302      	movs	r3, #2
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f002 feb4 	bl	80168cc <_lseek_r>
 8013b64:	89a3      	ldrh	r3, [r4, #12]
 8013b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b6e:	81a3      	strh	r3, [r4, #12]
 8013b70:	4632      	mov	r2, r6
 8013b72:	463b      	mov	r3, r7
 8013b74:	4628      	mov	r0, r5
 8013b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7a:	f001 ba07 	b.w	8014f8c <_write_r>

08013b7e <__sseek>:
 8013b7e:	b510      	push	{r4, lr}
 8013b80:	460c      	mov	r4, r1
 8013b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b86:	f002 fea1 	bl	80168cc <_lseek_r>
 8013b8a:	1c43      	adds	r3, r0, #1
 8013b8c:	89a3      	ldrh	r3, [r4, #12]
 8013b8e:	bf15      	itete	ne
 8013b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b9a:	81a3      	strheq	r3, [r4, #12]
 8013b9c:	bf18      	it	ne
 8013b9e:	81a3      	strhne	r3, [r4, #12]
 8013ba0:	bd10      	pop	{r4, pc}

08013ba2 <__sclose>:
 8013ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ba6:	f001 ba79 	b.w	801509c <_close_r>

08013baa <strcpy>:
 8013baa:	4603      	mov	r3, r0
 8013bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013bb0:	f803 2b01 	strb.w	r2, [r3], #1
 8013bb4:	2a00      	cmp	r2, #0
 8013bb6:	d1f9      	bne.n	8013bac <strcpy+0x2>
 8013bb8:	4770      	bx	lr

08013bba <strncpy>:
 8013bba:	b510      	push	{r4, lr}
 8013bbc:	3901      	subs	r1, #1
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	b132      	cbz	r2, 8013bd0 <strncpy+0x16>
 8013bc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013bc6:	f803 4b01 	strb.w	r4, [r3], #1
 8013bca:	3a01      	subs	r2, #1
 8013bcc:	2c00      	cmp	r4, #0
 8013bce:	d1f7      	bne.n	8013bc0 <strncpy+0x6>
 8013bd0:	441a      	add	r2, r3
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	d100      	bne.n	8013bda <strncpy+0x20>
 8013bd8:	bd10      	pop	{r4, pc}
 8013bda:	f803 1b01 	strb.w	r1, [r3], #1
 8013bde:	e7f9      	b.n	8013bd4 <strncpy+0x1a>

08013be0 <strpbrk>:
 8013be0:	b570      	push	{r4, r5, r6, lr}
 8013be2:	7803      	ldrb	r3, [r0, #0]
 8013be4:	b1a3      	cbz	r3, 8013c10 <strpbrk+0x30>
 8013be6:	4603      	mov	r3, r0
 8013be8:	460c      	mov	r4, r1
 8013bea:	4618      	mov	r0, r3
 8013bec:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013bf0:	b14d      	cbz	r5, 8013c06 <strpbrk+0x26>
 8013bf2:	460a      	mov	r2, r1
 8013bf4:	e001      	b.n	8013bfa <strpbrk+0x1a>
 8013bf6:	42ae      	cmp	r6, r5
 8013bf8:	d009      	beq.n	8013c0e <strpbrk+0x2e>
 8013bfa:	4614      	mov	r4, r2
 8013bfc:	f812 6b01 	ldrb.w	r6, [r2], #1
 8013c00:	2e00      	cmp	r6, #0
 8013c02:	d1f8      	bne.n	8013bf6 <strpbrk+0x16>
 8013c04:	e7f1      	b.n	8013bea <strpbrk+0xa>
 8013c06:	7823      	ldrb	r3, [r4, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	bf08      	it	eq
 8013c0c:	2000      	moveq	r0, #0
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}
 8013c10:	4618      	mov	r0, r3
 8013c12:	e7fc      	b.n	8013c0e <strpbrk+0x2e>

08013c14 <strstr>:
 8013c14:	780a      	ldrb	r2, [r1, #0]
 8013c16:	b570      	push	{r4, r5, r6, lr}
 8013c18:	b96a      	cbnz	r2, 8013c36 <strstr+0x22>
 8013c1a:	bd70      	pop	{r4, r5, r6, pc}
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d109      	bne.n	8013c34 <strstr+0x20>
 8013c20:	460c      	mov	r4, r1
 8013c22:	4605      	mov	r5, r0
 8013c24:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d0f6      	beq.n	8013c1a <strstr+0x6>
 8013c2c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013c30:	429e      	cmp	r6, r3
 8013c32:	d0f7      	beq.n	8013c24 <strstr+0x10>
 8013c34:	3001      	adds	r0, #1
 8013c36:	7803      	ldrb	r3, [r0, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1ef      	bne.n	8013c1c <strstr+0x8>
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	e7ec      	b.n	8013c1a <strstr+0x6>

08013c40 <sulp>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4604      	mov	r4, r0
 8013c44:	460d      	mov	r5, r1
 8013c46:	ec45 4b10 	vmov	d0, r4, r5
 8013c4a:	4616      	mov	r6, r2
 8013c4c:	f003 fa60 	bl	8017110 <__ulp>
 8013c50:	ec51 0b10 	vmov	r0, r1, d0
 8013c54:	b17e      	cbz	r6, 8013c76 <sulp+0x36>
 8013c56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013c5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	dd09      	ble.n	8013c76 <sulp+0x36>
 8013c62:	051b      	lsls	r3, r3, #20
 8013c64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013c68:	2400      	movs	r4, #0
 8013c6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013c6e:	4622      	mov	r2, r4
 8013c70:	462b      	mov	r3, r5
 8013c72:	f7ec fce1 	bl	8000638 <__aeabi_dmul>
 8013c76:	bd70      	pop	{r4, r5, r6, pc}

08013c78 <_strtod_l>:
 8013c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c7c:	ed2d 8b02 	vpush	{d8}
 8013c80:	b09d      	sub	sp, #116	; 0x74
 8013c82:	461f      	mov	r7, r3
 8013c84:	2300      	movs	r3, #0
 8013c86:	9318      	str	r3, [sp, #96]	; 0x60
 8013c88:	4ba2      	ldr	r3, [pc, #648]	; (8013f14 <_strtod_l+0x29c>)
 8013c8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	9305      	str	r3, [sp, #20]
 8013c90:	4604      	mov	r4, r0
 8013c92:	4618      	mov	r0, r3
 8013c94:	4688      	mov	r8, r1
 8013c96:	f7ec fab5 	bl	8000204 <strlen>
 8013c9a:	f04f 0a00 	mov.w	sl, #0
 8013c9e:	4605      	mov	r5, r0
 8013ca0:	f04f 0b00 	mov.w	fp, #0
 8013ca4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013caa:	781a      	ldrb	r2, [r3, #0]
 8013cac:	2a2b      	cmp	r2, #43	; 0x2b
 8013cae:	d04e      	beq.n	8013d4e <_strtod_l+0xd6>
 8013cb0:	d83b      	bhi.n	8013d2a <_strtod_l+0xb2>
 8013cb2:	2a0d      	cmp	r2, #13
 8013cb4:	d834      	bhi.n	8013d20 <_strtod_l+0xa8>
 8013cb6:	2a08      	cmp	r2, #8
 8013cb8:	d834      	bhi.n	8013d24 <_strtod_l+0xac>
 8013cba:	2a00      	cmp	r2, #0
 8013cbc:	d03e      	beq.n	8013d3c <_strtod_l+0xc4>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8013cc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013cc4:	7833      	ldrb	r3, [r6, #0]
 8013cc6:	2b30      	cmp	r3, #48	; 0x30
 8013cc8:	f040 80b0 	bne.w	8013e2c <_strtod_l+0x1b4>
 8013ccc:	7873      	ldrb	r3, [r6, #1]
 8013cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013cd2:	2b58      	cmp	r3, #88	; 0x58
 8013cd4:	d168      	bne.n	8013da8 <_strtod_l+0x130>
 8013cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd8:	9301      	str	r3, [sp, #4]
 8013cda:	ab18      	add	r3, sp, #96	; 0x60
 8013cdc:	9702      	str	r7, [sp, #8]
 8013cde:	9300      	str	r3, [sp, #0]
 8013ce0:	4a8d      	ldr	r2, [pc, #564]	; (8013f18 <_strtod_l+0x2a0>)
 8013ce2:	ab19      	add	r3, sp, #100	; 0x64
 8013ce4:	a917      	add	r1, sp, #92	; 0x5c
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f002 fa96 	bl	8016218 <__gethex>
 8013cec:	f010 0707 	ands.w	r7, r0, #7
 8013cf0:	4605      	mov	r5, r0
 8013cf2:	d005      	beq.n	8013d00 <_strtod_l+0x88>
 8013cf4:	2f06      	cmp	r7, #6
 8013cf6:	d12c      	bne.n	8013d52 <_strtod_l+0xda>
 8013cf8:	3601      	adds	r6, #1
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	9617      	str	r6, [sp, #92]	; 0x5c
 8013cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8013d00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f040 8590 	bne.w	8014828 <_strtod_l+0xbb0>
 8013d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0a:	b1eb      	cbz	r3, 8013d48 <_strtod_l+0xd0>
 8013d0c:	4652      	mov	r2, sl
 8013d0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013d12:	ec43 2b10 	vmov	d0, r2, r3
 8013d16:	b01d      	add	sp, #116	; 0x74
 8013d18:	ecbd 8b02 	vpop	{d8}
 8013d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d20:	2a20      	cmp	r2, #32
 8013d22:	d1cc      	bne.n	8013cbe <_strtod_l+0x46>
 8013d24:	3301      	adds	r3, #1
 8013d26:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d28:	e7be      	b.n	8013ca8 <_strtod_l+0x30>
 8013d2a:	2a2d      	cmp	r2, #45	; 0x2d
 8013d2c:	d1c7      	bne.n	8013cbe <_strtod_l+0x46>
 8013d2e:	2201      	movs	r2, #1
 8013d30:	920a      	str	r2, [sp, #40]	; 0x28
 8013d32:	1c5a      	adds	r2, r3, #1
 8013d34:	9217      	str	r2, [sp, #92]	; 0x5c
 8013d36:	785b      	ldrb	r3, [r3, #1]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d1c2      	bne.n	8013cc2 <_strtod_l+0x4a>
 8013d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f040 856e 	bne.w	8014824 <_strtod_l+0xbac>
 8013d48:	4652      	mov	r2, sl
 8013d4a:	465b      	mov	r3, fp
 8013d4c:	e7e1      	b.n	8013d12 <_strtod_l+0x9a>
 8013d4e:	2200      	movs	r2, #0
 8013d50:	e7ee      	b.n	8013d30 <_strtod_l+0xb8>
 8013d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d54:	b13a      	cbz	r2, 8013d66 <_strtod_l+0xee>
 8013d56:	2135      	movs	r1, #53	; 0x35
 8013d58:	a81a      	add	r0, sp, #104	; 0x68
 8013d5a:	f003 fae4 	bl	8017326 <__copybits>
 8013d5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d60:	4620      	mov	r0, r4
 8013d62:	f002 fea3 	bl	8016aac <_Bfree>
 8013d66:	3f01      	subs	r7, #1
 8013d68:	2f04      	cmp	r7, #4
 8013d6a:	d806      	bhi.n	8013d7a <_strtod_l+0x102>
 8013d6c:	e8df f007 	tbb	[pc, r7]
 8013d70:	1714030a 	.word	0x1714030a
 8013d74:	0a          	.byte	0x0a
 8013d75:	00          	.byte	0x00
 8013d76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013d7a:	0728      	lsls	r0, r5, #28
 8013d7c:	d5c0      	bpl.n	8013d00 <_strtod_l+0x88>
 8013d7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013d82:	e7bd      	b.n	8013d00 <_strtod_l+0x88>
 8013d84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013d88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013d8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013d8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013d92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013d96:	e7f0      	b.n	8013d7a <_strtod_l+0x102>
 8013d98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013f1c <_strtod_l+0x2a4>
 8013d9c:	e7ed      	b.n	8013d7a <_strtod_l+0x102>
 8013d9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013da2:	f04f 3aff 	mov.w	sl, #4294967295
 8013da6:	e7e8      	b.n	8013d7a <_strtod_l+0x102>
 8013da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013daa:	1c5a      	adds	r2, r3, #1
 8013dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8013dae:	785b      	ldrb	r3, [r3, #1]
 8013db0:	2b30      	cmp	r3, #48	; 0x30
 8013db2:	d0f9      	beq.n	8013da8 <_strtod_l+0x130>
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d0a3      	beq.n	8013d00 <_strtod_l+0x88>
 8013db8:	2301      	movs	r3, #1
 8013dba:	f04f 0900 	mov.w	r9, #0
 8013dbe:	9304      	str	r3, [sp, #16]
 8013dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013dc2:	9308      	str	r3, [sp, #32]
 8013dc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8013dc8:	464f      	mov	r7, r9
 8013dca:	220a      	movs	r2, #10
 8013dcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013dce:	7806      	ldrb	r6, [r0, #0]
 8013dd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013dd4:	b2d9      	uxtb	r1, r3
 8013dd6:	2909      	cmp	r1, #9
 8013dd8:	d92a      	bls.n	8013e30 <_strtod_l+0x1b8>
 8013dda:	9905      	ldr	r1, [sp, #20]
 8013ddc:	462a      	mov	r2, r5
 8013dde:	f004 f843 	bl	8017e68 <strncmp>
 8013de2:	b398      	cbz	r0, 8013e4c <_strtod_l+0x1d4>
 8013de4:	2000      	movs	r0, #0
 8013de6:	4632      	mov	r2, r6
 8013de8:	463d      	mov	r5, r7
 8013dea:	9005      	str	r0, [sp, #20]
 8013dec:	4603      	mov	r3, r0
 8013dee:	2a65      	cmp	r2, #101	; 0x65
 8013df0:	d001      	beq.n	8013df6 <_strtod_l+0x17e>
 8013df2:	2a45      	cmp	r2, #69	; 0x45
 8013df4:	d118      	bne.n	8013e28 <_strtod_l+0x1b0>
 8013df6:	b91d      	cbnz	r5, 8013e00 <_strtod_l+0x188>
 8013df8:	9a04      	ldr	r2, [sp, #16]
 8013dfa:	4302      	orrs	r2, r0
 8013dfc:	d09e      	beq.n	8013d3c <_strtod_l+0xc4>
 8013dfe:	2500      	movs	r5, #0
 8013e00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013e04:	f108 0201 	add.w	r2, r8, #1
 8013e08:	9217      	str	r2, [sp, #92]	; 0x5c
 8013e0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013e0e:	2a2b      	cmp	r2, #43	; 0x2b
 8013e10:	d075      	beq.n	8013efe <_strtod_l+0x286>
 8013e12:	2a2d      	cmp	r2, #45	; 0x2d
 8013e14:	d07b      	beq.n	8013f0e <_strtod_l+0x296>
 8013e16:	f04f 0c00 	mov.w	ip, #0
 8013e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013e1e:	2909      	cmp	r1, #9
 8013e20:	f240 8082 	bls.w	8013f28 <_strtod_l+0x2b0>
 8013e24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013e28:	2600      	movs	r6, #0
 8013e2a:	e09d      	b.n	8013f68 <_strtod_l+0x2f0>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	e7c4      	b.n	8013dba <_strtod_l+0x142>
 8013e30:	2f08      	cmp	r7, #8
 8013e32:	bfd8      	it	le
 8013e34:	9907      	ldrle	r1, [sp, #28]
 8013e36:	f100 0001 	add.w	r0, r0, #1
 8013e3a:	bfda      	itte	le
 8013e3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013e40:	9307      	strle	r3, [sp, #28]
 8013e42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013e46:	3701      	adds	r7, #1
 8013e48:	9017      	str	r0, [sp, #92]	; 0x5c
 8013e4a:	e7bf      	b.n	8013dcc <_strtod_l+0x154>
 8013e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e4e:	195a      	adds	r2, r3, r5
 8013e50:	9217      	str	r2, [sp, #92]	; 0x5c
 8013e52:	5d5a      	ldrb	r2, [r3, r5]
 8013e54:	2f00      	cmp	r7, #0
 8013e56:	d037      	beq.n	8013ec8 <_strtod_l+0x250>
 8013e58:	9005      	str	r0, [sp, #20]
 8013e5a:	463d      	mov	r5, r7
 8013e5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013e60:	2b09      	cmp	r3, #9
 8013e62:	d912      	bls.n	8013e8a <_strtod_l+0x212>
 8013e64:	2301      	movs	r3, #1
 8013e66:	e7c2      	b.n	8013dee <_strtod_l+0x176>
 8013e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e6a:	1c5a      	adds	r2, r3, #1
 8013e6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8013e6e:	785a      	ldrb	r2, [r3, #1]
 8013e70:	3001      	adds	r0, #1
 8013e72:	2a30      	cmp	r2, #48	; 0x30
 8013e74:	d0f8      	beq.n	8013e68 <_strtod_l+0x1f0>
 8013e76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013e7a:	2b08      	cmp	r3, #8
 8013e7c:	f200 84d9 	bhi.w	8014832 <_strtod_l+0xbba>
 8013e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e82:	9005      	str	r0, [sp, #20]
 8013e84:	2000      	movs	r0, #0
 8013e86:	9308      	str	r3, [sp, #32]
 8013e88:	4605      	mov	r5, r0
 8013e8a:	3a30      	subs	r2, #48	; 0x30
 8013e8c:	f100 0301 	add.w	r3, r0, #1
 8013e90:	d014      	beq.n	8013ebc <_strtod_l+0x244>
 8013e92:	9905      	ldr	r1, [sp, #20]
 8013e94:	4419      	add	r1, r3
 8013e96:	9105      	str	r1, [sp, #20]
 8013e98:	462b      	mov	r3, r5
 8013e9a:	eb00 0e05 	add.w	lr, r0, r5
 8013e9e:	210a      	movs	r1, #10
 8013ea0:	4573      	cmp	r3, lr
 8013ea2:	d113      	bne.n	8013ecc <_strtod_l+0x254>
 8013ea4:	182b      	adds	r3, r5, r0
 8013ea6:	2b08      	cmp	r3, #8
 8013ea8:	f105 0501 	add.w	r5, r5, #1
 8013eac:	4405      	add	r5, r0
 8013eae:	dc1c      	bgt.n	8013eea <_strtod_l+0x272>
 8013eb0:	9907      	ldr	r1, [sp, #28]
 8013eb2:	230a      	movs	r3, #10
 8013eb4:	fb03 2301 	mla	r3, r3, r1, r2
 8013eb8:	9307      	str	r3, [sp, #28]
 8013eba:	2300      	movs	r3, #0
 8013ebc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013ebe:	1c51      	adds	r1, r2, #1
 8013ec0:	9117      	str	r1, [sp, #92]	; 0x5c
 8013ec2:	7852      	ldrb	r2, [r2, #1]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	e7c9      	b.n	8013e5c <_strtod_l+0x1e4>
 8013ec8:	4638      	mov	r0, r7
 8013eca:	e7d2      	b.n	8013e72 <_strtod_l+0x1fa>
 8013ecc:	2b08      	cmp	r3, #8
 8013ece:	dc04      	bgt.n	8013eda <_strtod_l+0x262>
 8013ed0:	9e07      	ldr	r6, [sp, #28]
 8013ed2:	434e      	muls	r6, r1
 8013ed4:	9607      	str	r6, [sp, #28]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	e7e2      	b.n	8013ea0 <_strtod_l+0x228>
 8013eda:	f103 0c01 	add.w	ip, r3, #1
 8013ede:	f1bc 0f10 	cmp.w	ip, #16
 8013ee2:	bfd8      	it	le
 8013ee4:	fb01 f909 	mulle.w	r9, r1, r9
 8013ee8:	e7f5      	b.n	8013ed6 <_strtod_l+0x25e>
 8013eea:	2d10      	cmp	r5, #16
 8013eec:	bfdc      	itt	le
 8013eee:	230a      	movle	r3, #10
 8013ef0:	fb03 2909 	mlale	r9, r3, r9, r2
 8013ef4:	e7e1      	b.n	8013eba <_strtod_l+0x242>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	9305      	str	r3, [sp, #20]
 8013efa:	2301      	movs	r3, #1
 8013efc:	e77c      	b.n	8013df8 <_strtod_l+0x180>
 8013efe:	f04f 0c00 	mov.w	ip, #0
 8013f02:	f108 0202 	add.w	r2, r8, #2
 8013f06:	9217      	str	r2, [sp, #92]	; 0x5c
 8013f08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013f0c:	e785      	b.n	8013e1a <_strtod_l+0x1a2>
 8013f0e:	f04f 0c01 	mov.w	ip, #1
 8013f12:	e7f6      	b.n	8013f02 <_strtod_l+0x28a>
 8013f14:	08058ac4 	.word	0x08058ac4
 8013f18:	08058798 	.word	0x08058798
 8013f1c:	7ff00000 	.word	0x7ff00000
 8013f20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013f22:	1c51      	adds	r1, r2, #1
 8013f24:	9117      	str	r1, [sp, #92]	; 0x5c
 8013f26:	7852      	ldrb	r2, [r2, #1]
 8013f28:	2a30      	cmp	r2, #48	; 0x30
 8013f2a:	d0f9      	beq.n	8013f20 <_strtod_l+0x2a8>
 8013f2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013f30:	2908      	cmp	r1, #8
 8013f32:	f63f af79 	bhi.w	8013e28 <_strtod_l+0x1b0>
 8013f36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013f3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013f3c:	9206      	str	r2, [sp, #24]
 8013f3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013f40:	1c51      	adds	r1, r2, #1
 8013f42:	9117      	str	r1, [sp, #92]	; 0x5c
 8013f44:	7852      	ldrb	r2, [r2, #1]
 8013f46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013f4a:	2e09      	cmp	r6, #9
 8013f4c:	d937      	bls.n	8013fbe <_strtod_l+0x346>
 8013f4e:	9e06      	ldr	r6, [sp, #24]
 8013f50:	1b89      	subs	r1, r1, r6
 8013f52:	2908      	cmp	r1, #8
 8013f54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013f58:	dc02      	bgt.n	8013f60 <_strtod_l+0x2e8>
 8013f5a:	4576      	cmp	r6, lr
 8013f5c:	bfa8      	it	ge
 8013f5e:	4676      	movge	r6, lr
 8013f60:	f1bc 0f00 	cmp.w	ip, #0
 8013f64:	d000      	beq.n	8013f68 <_strtod_l+0x2f0>
 8013f66:	4276      	negs	r6, r6
 8013f68:	2d00      	cmp	r5, #0
 8013f6a:	d14d      	bne.n	8014008 <_strtod_l+0x390>
 8013f6c:	9904      	ldr	r1, [sp, #16]
 8013f6e:	4301      	orrs	r1, r0
 8013f70:	f47f aec6 	bne.w	8013d00 <_strtod_l+0x88>
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f47f aee1 	bne.w	8013d3c <_strtod_l+0xc4>
 8013f7a:	2a69      	cmp	r2, #105	; 0x69
 8013f7c:	d027      	beq.n	8013fce <_strtod_l+0x356>
 8013f7e:	dc24      	bgt.n	8013fca <_strtod_l+0x352>
 8013f80:	2a49      	cmp	r2, #73	; 0x49
 8013f82:	d024      	beq.n	8013fce <_strtod_l+0x356>
 8013f84:	2a4e      	cmp	r2, #78	; 0x4e
 8013f86:	f47f aed9 	bne.w	8013d3c <_strtod_l+0xc4>
 8013f8a:	499f      	ldr	r1, [pc, #636]	; (8014208 <_strtod_l+0x590>)
 8013f8c:	a817      	add	r0, sp, #92	; 0x5c
 8013f8e:	f002 fb9b 	bl	80166c8 <__match>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	f43f aed2 	beq.w	8013d3c <_strtod_l+0xc4>
 8013f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	2b28      	cmp	r3, #40	; 0x28
 8013f9e:	d12d      	bne.n	8013ffc <_strtod_l+0x384>
 8013fa0:	499a      	ldr	r1, [pc, #616]	; (801420c <_strtod_l+0x594>)
 8013fa2:	aa1a      	add	r2, sp, #104	; 0x68
 8013fa4:	a817      	add	r0, sp, #92	; 0x5c
 8013fa6:	f002 fba3 	bl	80166f0 <__hexnan>
 8013faa:	2805      	cmp	r0, #5
 8013fac:	d126      	bne.n	8013ffc <_strtod_l+0x384>
 8013fae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013fb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013fb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013fbc:	e6a0      	b.n	8013d00 <_strtod_l+0x88>
 8013fbe:	210a      	movs	r1, #10
 8013fc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013fc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013fc8:	e7b9      	b.n	8013f3e <_strtod_l+0x2c6>
 8013fca:	2a6e      	cmp	r2, #110	; 0x6e
 8013fcc:	e7db      	b.n	8013f86 <_strtod_l+0x30e>
 8013fce:	4990      	ldr	r1, [pc, #576]	; (8014210 <_strtod_l+0x598>)
 8013fd0:	a817      	add	r0, sp, #92	; 0x5c
 8013fd2:	f002 fb79 	bl	80166c8 <__match>
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f43f aeb0 	beq.w	8013d3c <_strtod_l+0xc4>
 8013fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fde:	498d      	ldr	r1, [pc, #564]	; (8014214 <_strtod_l+0x59c>)
 8013fe0:	3b01      	subs	r3, #1
 8013fe2:	a817      	add	r0, sp, #92	; 0x5c
 8013fe4:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fe6:	f002 fb6f 	bl	80166c8 <__match>
 8013fea:	b910      	cbnz	r0, 8013ff2 <_strtod_l+0x37a>
 8013fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fee:	3301      	adds	r3, #1
 8013ff0:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ff2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014224 <_strtod_l+0x5ac>
 8013ff6:	f04f 0a00 	mov.w	sl, #0
 8013ffa:	e681      	b.n	8013d00 <_strtod_l+0x88>
 8013ffc:	4886      	ldr	r0, [pc, #536]	; (8014218 <_strtod_l+0x5a0>)
 8013ffe:	f003 feaf 	bl	8017d60 <nan>
 8014002:	ec5b ab10 	vmov	sl, fp, d0
 8014006:	e67b      	b.n	8013d00 <_strtod_l+0x88>
 8014008:	9b05      	ldr	r3, [sp, #20]
 801400a:	9807      	ldr	r0, [sp, #28]
 801400c:	1af3      	subs	r3, r6, r3
 801400e:	2f00      	cmp	r7, #0
 8014010:	bf08      	it	eq
 8014012:	462f      	moveq	r7, r5
 8014014:	2d10      	cmp	r5, #16
 8014016:	9306      	str	r3, [sp, #24]
 8014018:	46a8      	mov	r8, r5
 801401a:	bfa8      	it	ge
 801401c:	f04f 0810 	movge.w	r8, #16
 8014020:	f7ec fa90 	bl	8000544 <__aeabi_ui2d>
 8014024:	2d09      	cmp	r5, #9
 8014026:	4682      	mov	sl, r0
 8014028:	468b      	mov	fp, r1
 801402a:	dd13      	ble.n	8014054 <_strtod_l+0x3dc>
 801402c:	4b7b      	ldr	r3, [pc, #492]	; (801421c <_strtod_l+0x5a4>)
 801402e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014032:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014036:	f7ec faff 	bl	8000638 <__aeabi_dmul>
 801403a:	4682      	mov	sl, r0
 801403c:	4648      	mov	r0, r9
 801403e:	468b      	mov	fp, r1
 8014040:	f7ec fa80 	bl	8000544 <__aeabi_ui2d>
 8014044:	4602      	mov	r2, r0
 8014046:	460b      	mov	r3, r1
 8014048:	4650      	mov	r0, sl
 801404a:	4659      	mov	r1, fp
 801404c:	f7ec f93e 	bl	80002cc <__adddf3>
 8014050:	4682      	mov	sl, r0
 8014052:	468b      	mov	fp, r1
 8014054:	2d0f      	cmp	r5, #15
 8014056:	dc38      	bgt.n	80140ca <_strtod_l+0x452>
 8014058:	9b06      	ldr	r3, [sp, #24]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f43f ae50 	beq.w	8013d00 <_strtod_l+0x88>
 8014060:	dd24      	ble.n	80140ac <_strtod_l+0x434>
 8014062:	2b16      	cmp	r3, #22
 8014064:	dc0b      	bgt.n	801407e <_strtod_l+0x406>
 8014066:	496d      	ldr	r1, [pc, #436]	; (801421c <_strtod_l+0x5a4>)
 8014068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801406c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014070:	4652      	mov	r2, sl
 8014072:	465b      	mov	r3, fp
 8014074:	f7ec fae0 	bl	8000638 <__aeabi_dmul>
 8014078:	4682      	mov	sl, r0
 801407a:	468b      	mov	fp, r1
 801407c:	e640      	b.n	8013d00 <_strtod_l+0x88>
 801407e:	9a06      	ldr	r2, [sp, #24]
 8014080:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014084:	4293      	cmp	r3, r2
 8014086:	db20      	blt.n	80140ca <_strtod_l+0x452>
 8014088:	4c64      	ldr	r4, [pc, #400]	; (801421c <_strtod_l+0x5a4>)
 801408a:	f1c5 050f 	rsb	r5, r5, #15
 801408e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014092:	4652      	mov	r2, sl
 8014094:	465b      	mov	r3, fp
 8014096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801409a:	f7ec facd 	bl	8000638 <__aeabi_dmul>
 801409e:	9b06      	ldr	r3, [sp, #24]
 80140a0:	1b5d      	subs	r5, r3, r5
 80140a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80140a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80140aa:	e7e3      	b.n	8014074 <_strtod_l+0x3fc>
 80140ac:	9b06      	ldr	r3, [sp, #24]
 80140ae:	3316      	adds	r3, #22
 80140b0:	db0b      	blt.n	80140ca <_strtod_l+0x452>
 80140b2:	9b05      	ldr	r3, [sp, #20]
 80140b4:	1b9e      	subs	r6, r3, r6
 80140b6:	4b59      	ldr	r3, [pc, #356]	; (801421c <_strtod_l+0x5a4>)
 80140b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80140bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80140c0:	4650      	mov	r0, sl
 80140c2:	4659      	mov	r1, fp
 80140c4:	f7ec fbe2 	bl	800088c <__aeabi_ddiv>
 80140c8:	e7d6      	b.n	8014078 <_strtod_l+0x400>
 80140ca:	9b06      	ldr	r3, [sp, #24]
 80140cc:	eba5 0808 	sub.w	r8, r5, r8
 80140d0:	4498      	add	r8, r3
 80140d2:	f1b8 0f00 	cmp.w	r8, #0
 80140d6:	dd74      	ble.n	80141c2 <_strtod_l+0x54a>
 80140d8:	f018 030f 	ands.w	r3, r8, #15
 80140dc:	d00a      	beq.n	80140f4 <_strtod_l+0x47c>
 80140de:	494f      	ldr	r1, [pc, #316]	; (801421c <_strtod_l+0x5a4>)
 80140e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80140e4:	4652      	mov	r2, sl
 80140e6:	465b      	mov	r3, fp
 80140e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140ec:	f7ec faa4 	bl	8000638 <__aeabi_dmul>
 80140f0:	4682      	mov	sl, r0
 80140f2:	468b      	mov	fp, r1
 80140f4:	f038 080f 	bics.w	r8, r8, #15
 80140f8:	d04f      	beq.n	801419a <_strtod_l+0x522>
 80140fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80140fe:	dd22      	ble.n	8014146 <_strtod_l+0x4ce>
 8014100:	2500      	movs	r5, #0
 8014102:	462e      	mov	r6, r5
 8014104:	9507      	str	r5, [sp, #28]
 8014106:	9505      	str	r5, [sp, #20]
 8014108:	2322      	movs	r3, #34	; 0x22
 801410a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014224 <_strtod_l+0x5ac>
 801410e:	6023      	str	r3, [r4, #0]
 8014110:	f04f 0a00 	mov.w	sl, #0
 8014114:	9b07      	ldr	r3, [sp, #28]
 8014116:	2b00      	cmp	r3, #0
 8014118:	f43f adf2 	beq.w	8013d00 <_strtod_l+0x88>
 801411c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801411e:	4620      	mov	r0, r4
 8014120:	f002 fcc4 	bl	8016aac <_Bfree>
 8014124:	9905      	ldr	r1, [sp, #20]
 8014126:	4620      	mov	r0, r4
 8014128:	f002 fcc0 	bl	8016aac <_Bfree>
 801412c:	4631      	mov	r1, r6
 801412e:	4620      	mov	r0, r4
 8014130:	f002 fcbc 	bl	8016aac <_Bfree>
 8014134:	9907      	ldr	r1, [sp, #28]
 8014136:	4620      	mov	r0, r4
 8014138:	f002 fcb8 	bl	8016aac <_Bfree>
 801413c:	4629      	mov	r1, r5
 801413e:	4620      	mov	r0, r4
 8014140:	f002 fcb4 	bl	8016aac <_Bfree>
 8014144:	e5dc      	b.n	8013d00 <_strtod_l+0x88>
 8014146:	4b36      	ldr	r3, [pc, #216]	; (8014220 <_strtod_l+0x5a8>)
 8014148:	9304      	str	r3, [sp, #16]
 801414a:	2300      	movs	r3, #0
 801414c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014150:	4650      	mov	r0, sl
 8014152:	4659      	mov	r1, fp
 8014154:	4699      	mov	r9, r3
 8014156:	f1b8 0f01 	cmp.w	r8, #1
 801415a:	dc21      	bgt.n	80141a0 <_strtod_l+0x528>
 801415c:	b10b      	cbz	r3, 8014162 <_strtod_l+0x4ea>
 801415e:	4682      	mov	sl, r0
 8014160:	468b      	mov	fp, r1
 8014162:	4b2f      	ldr	r3, [pc, #188]	; (8014220 <_strtod_l+0x5a8>)
 8014164:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014168:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801416c:	4652      	mov	r2, sl
 801416e:	465b      	mov	r3, fp
 8014170:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014174:	f7ec fa60 	bl	8000638 <__aeabi_dmul>
 8014178:	4b2a      	ldr	r3, [pc, #168]	; (8014224 <_strtod_l+0x5ac>)
 801417a:	460a      	mov	r2, r1
 801417c:	400b      	ands	r3, r1
 801417e:	492a      	ldr	r1, [pc, #168]	; (8014228 <_strtod_l+0x5b0>)
 8014180:	428b      	cmp	r3, r1
 8014182:	4682      	mov	sl, r0
 8014184:	d8bc      	bhi.n	8014100 <_strtod_l+0x488>
 8014186:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801418a:	428b      	cmp	r3, r1
 801418c:	bf86      	itte	hi
 801418e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801422c <_strtod_l+0x5b4>
 8014192:	f04f 3aff 	movhi.w	sl, #4294967295
 8014196:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801419a:	2300      	movs	r3, #0
 801419c:	9304      	str	r3, [sp, #16]
 801419e:	e084      	b.n	80142aa <_strtod_l+0x632>
 80141a0:	f018 0f01 	tst.w	r8, #1
 80141a4:	d005      	beq.n	80141b2 <_strtod_l+0x53a>
 80141a6:	9b04      	ldr	r3, [sp, #16]
 80141a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ac:	f7ec fa44 	bl	8000638 <__aeabi_dmul>
 80141b0:	2301      	movs	r3, #1
 80141b2:	9a04      	ldr	r2, [sp, #16]
 80141b4:	3208      	adds	r2, #8
 80141b6:	f109 0901 	add.w	r9, r9, #1
 80141ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80141be:	9204      	str	r2, [sp, #16]
 80141c0:	e7c9      	b.n	8014156 <_strtod_l+0x4de>
 80141c2:	d0ea      	beq.n	801419a <_strtod_l+0x522>
 80141c4:	f1c8 0800 	rsb	r8, r8, #0
 80141c8:	f018 020f 	ands.w	r2, r8, #15
 80141cc:	d00a      	beq.n	80141e4 <_strtod_l+0x56c>
 80141ce:	4b13      	ldr	r3, [pc, #76]	; (801421c <_strtod_l+0x5a4>)
 80141d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141d4:	4650      	mov	r0, sl
 80141d6:	4659      	mov	r1, fp
 80141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141dc:	f7ec fb56 	bl	800088c <__aeabi_ddiv>
 80141e0:	4682      	mov	sl, r0
 80141e2:	468b      	mov	fp, r1
 80141e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80141e8:	d0d7      	beq.n	801419a <_strtod_l+0x522>
 80141ea:	f1b8 0f1f 	cmp.w	r8, #31
 80141ee:	dd1f      	ble.n	8014230 <_strtod_l+0x5b8>
 80141f0:	2500      	movs	r5, #0
 80141f2:	462e      	mov	r6, r5
 80141f4:	9507      	str	r5, [sp, #28]
 80141f6:	9505      	str	r5, [sp, #20]
 80141f8:	2322      	movs	r3, #34	; 0x22
 80141fa:	f04f 0a00 	mov.w	sl, #0
 80141fe:	f04f 0b00 	mov.w	fp, #0
 8014202:	6023      	str	r3, [r4, #0]
 8014204:	e786      	b.n	8014114 <_strtod_l+0x49c>
 8014206:	bf00      	nop
 8014208:	08058772 	.word	0x08058772
 801420c:	080587ac 	.word	0x080587ac
 8014210:	0805876a 	.word	0x0805876a
 8014214:	08058985 	.word	0x08058985
 8014218:	0805867a 	.word	0x0805867a
 801421c:	08058bc0 	.word	0x08058bc0
 8014220:	08058b98 	.word	0x08058b98
 8014224:	7ff00000 	.word	0x7ff00000
 8014228:	7ca00000 	.word	0x7ca00000
 801422c:	7fefffff 	.word	0x7fefffff
 8014230:	f018 0310 	ands.w	r3, r8, #16
 8014234:	bf18      	it	ne
 8014236:	236a      	movne	r3, #106	; 0x6a
 8014238:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80145e8 <_strtod_l+0x970>
 801423c:	9304      	str	r3, [sp, #16]
 801423e:	4650      	mov	r0, sl
 8014240:	4659      	mov	r1, fp
 8014242:	2300      	movs	r3, #0
 8014244:	f018 0f01 	tst.w	r8, #1
 8014248:	d004      	beq.n	8014254 <_strtod_l+0x5dc>
 801424a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801424e:	f7ec f9f3 	bl	8000638 <__aeabi_dmul>
 8014252:	2301      	movs	r3, #1
 8014254:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014258:	f109 0908 	add.w	r9, r9, #8
 801425c:	d1f2      	bne.n	8014244 <_strtod_l+0x5cc>
 801425e:	b10b      	cbz	r3, 8014264 <_strtod_l+0x5ec>
 8014260:	4682      	mov	sl, r0
 8014262:	468b      	mov	fp, r1
 8014264:	9b04      	ldr	r3, [sp, #16]
 8014266:	b1c3      	cbz	r3, 801429a <_strtod_l+0x622>
 8014268:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801426c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014270:	2b00      	cmp	r3, #0
 8014272:	4659      	mov	r1, fp
 8014274:	dd11      	ble.n	801429a <_strtod_l+0x622>
 8014276:	2b1f      	cmp	r3, #31
 8014278:	f340 8124 	ble.w	80144c4 <_strtod_l+0x84c>
 801427c:	2b34      	cmp	r3, #52	; 0x34
 801427e:	bfde      	ittt	le
 8014280:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014284:	f04f 33ff 	movle.w	r3, #4294967295
 8014288:	fa03 f202 	lslle.w	r2, r3, r2
 801428c:	f04f 0a00 	mov.w	sl, #0
 8014290:	bfcc      	ite	gt
 8014292:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014296:	ea02 0b01 	andle.w	fp, r2, r1
 801429a:	2200      	movs	r2, #0
 801429c:	2300      	movs	r3, #0
 801429e:	4650      	mov	r0, sl
 80142a0:	4659      	mov	r1, fp
 80142a2:	f7ec fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d1a2      	bne.n	80141f0 <_strtod_l+0x578>
 80142aa:	9b07      	ldr	r3, [sp, #28]
 80142ac:	9300      	str	r3, [sp, #0]
 80142ae:	9908      	ldr	r1, [sp, #32]
 80142b0:	462b      	mov	r3, r5
 80142b2:	463a      	mov	r2, r7
 80142b4:	4620      	mov	r0, r4
 80142b6:	f002 fc61 	bl	8016b7c <__s2b>
 80142ba:	9007      	str	r0, [sp, #28]
 80142bc:	2800      	cmp	r0, #0
 80142be:	f43f af1f 	beq.w	8014100 <_strtod_l+0x488>
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	1b9e      	subs	r6, r3, r6
 80142c6:	9b06      	ldr	r3, [sp, #24]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	bfb4      	ite	lt
 80142cc:	4633      	movlt	r3, r6
 80142ce:	2300      	movge	r3, #0
 80142d0:	930c      	str	r3, [sp, #48]	; 0x30
 80142d2:	9b06      	ldr	r3, [sp, #24]
 80142d4:	2500      	movs	r5, #0
 80142d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142da:	9312      	str	r3, [sp, #72]	; 0x48
 80142dc:	462e      	mov	r6, r5
 80142de:	9b07      	ldr	r3, [sp, #28]
 80142e0:	4620      	mov	r0, r4
 80142e2:	6859      	ldr	r1, [r3, #4]
 80142e4:	f002 fba2 	bl	8016a2c <_Balloc>
 80142e8:	9005      	str	r0, [sp, #20]
 80142ea:	2800      	cmp	r0, #0
 80142ec:	f43f af0c 	beq.w	8014108 <_strtod_l+0x490>
 80142f0:	9b07      	ldr	r3, [sp, #28]
 80142f2:	691a      	ldr	r2, [r3, #16]
 80142f4:	3202      	adds	r2, #2
 80142f6:	f103 010c 	add.w	r1, r3, #12
 80142fa:	0092      	lsls	r2, r2, #2
 80142fc:	300c      	adds	r0, #12
 80142fe:	f7fe fa87 	bl	8012810 <memcpy>
 8014302:	ec4b ab10 	vmov	d0, sl, fp
 8014306:	aa1a      	add	r2, sp, #104	; 0x68
 8014308:	a919      	add	r1, sp, #100	; 0x64
 801430a:	4620      	mov	r0, r4
 801430c:	f002 ff7c 	bl	8017208 <__d2b>
 8014310:	ec4b ab18 	vmov	d8, sl, fp
 8014314:	9018      	str	r0, [sp, #96]	; 0x60
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f aef6 	beq.w	8014108 <_strtod_l+0x490>
 801431c:	2101      	movs	r1, #1
 801431e:	4620      	mov	r0, r4
 8014320:	f002 fcc6 	bl	8016cb0 <__i2b>
 8014324:	4606      	mov	r6, r0
 8014326:	2800      	cmp	r0, #0
 8014328:	f43f aeee 	beq.w	8014108 <_strtod_l+0x490>
 801432c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801432e:	9904      	ldr	r1, [sp, #16]
 8014330:	2b00      	cmp	r3, #0
 8014332:	bfab      	itete	ge
 8014334:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014336:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014338:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801433a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801433e:	bfac      	ite	ge
 8014340:	eb03 0902 	addge.w	r9, r3, r2
 8014344:	1ad7      	sublt	r7, r2, r3
 8014346:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014348:	eba3 0801 	sub.w	r8, r3, r1
 801434c:	4490      	add	r8, r2
 801434e:	4ba1      	ldr	r3, [pc, #644]	; (80145d4 <_strtod_l+0x95c>)
 8014350:	f108 38ff 	add.w	r8, r8, #4294967295
 8014354:	4598      	cmp	r8, r3
 8014356:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801435a:	f280 80c7 	bge.w	80144ec <_strtod_l+0x874>
 801435e:	eba3 0308 	sub.w	r3, r3, r8
 8014362:	2b1f      	cmp	r3, #31
 8014364:	eba2 0203 	sub.w	r2, r2, r3
 8014368:	f04f 0101 	mov.w	r1, #1
 801436c:	f300 80b1 	bgt.w	80144d2 <_strtod_l+0x85a>
 8014370:	fa01 f303 	lsl.w	r3, r1, r3
 8014374:	930d      	str	r3, [sp, #52]	; 0x34
 8014376:	2300      	movs	r3, #0
 8014378:	9308      	str	r3, [sp, #32]
 801437a:	eb09 0802 	add.w	r8, r9, r2
 801437e:	9b04      	ldr	r3, [sp, #16]
 8014380:	45c1      	cmp	r9, r8
 8014382:	4417      	add	r7, r2
 8014384:	441f      	add	r7, r3
 8014386:	464b      	mov	r3, r9
 8014388:	bfa8      	it	ge
 801438a:	4643      	movge	r3, r8
 801438c:	42bb      	cmp	r3, r7
 801438e:	bfa8      	it	ge
 8014390:	463b      	movge	r3, r7
 8014392:	2b00      	cmp	r3, #0
 8014394:	bfc2      	ittt	gt
 8014396:	eba8 0803 	subgt.w	r8, r8, r3
 801439a:	1aff      	subgt	r7, r7, r3
 801439c:	eba9 0903 	subgt.w	r9, r9, r3
 80143a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	dd17      	ble.n	80143d6 <_strtod_l+0x75e>
 80143a6:	4631      	mov	r1, r6
 80143a8:	461a      	mov	r2, r3
 80143aa:	4620      	mov	r0, r4
 80143ac:	f002 fd40 	bl	8016e30 <__pow5mult>
 80143b0:	4606      	mov	r6, r0
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f43f aea8 	beq.w	8014108 <_strtod_l+0x490>
 80143b8:	4601      	mov	r1, r0
 80143ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143bc:	4620      	mov	r0, r4
 80143be:	f002 fc8d 	bl	8016cdc <__multiply>
 80143c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f43f ae9f 	beq.w	8014108 <_strtod_l+0x490>
 80143ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143cc:	4620      	mov	r0, r4
 80143ce:	f002 fb6d 	bl	8016aac <_Bfree>
 80143d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143d4:	9318      	str	r3, [sp, #96]	; 0x60
 80143d6:	f1b8 0f00 	cmp.w	r8, #0
 80143da:	f300 808c 	bgt.w	80144f6 <_strtod_l+0x87e>
 80143de:	9b06      	ldr	r3, [sp, #24]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	dd08      	ble.n	80143f6 <_strtod_l+0x77e>
 80143e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143e6:	9905      	ldr	r1, [sp, #20]
 80143e8:	4620      	mov	r0, r4
 80143ea:	f002 fd21 	bl	8016e30 <__pow5mult>
 80143ee:	9005      	str	r0, [sp, #20]
 80143f0:	2800      	cmp	r0, #0
 80143f2:	f43f ae89 	beq.w	8014108 <_strtod_l+0x490>
 80143f6:	2f00      	cmp	r7, #0
 80143f8:	dd08      	ble.n	801440c <_strtod_l+0x794>
 80143fa:	9905      	ldr	r1, [sp, #20]
 80143fc:	463a      	mov	r2, r7
 80143fe:	4620      	mov	r0, r4
 8014400:	f002 fd70 	bl	8016ee4 <__lshift>
 8014404:	9005      	str	r0, [sp, #20]
 8014406:	2800      	cmp	r0, #0
 8014408:	f43f ae7e 	beq.w	8014108 <_strtod_l+0x490>
 801440c:	f1b9 0f00 	cmp.w	r9, #0
 8014410:	dd08      	ble.n	8014424 <_strtod_l+0x7ac>
 8014412:	4631      	mov	r1, r6
 8014414:	464a      	mov	r2, r9
 8014416:	4620      	mov	r0, r4
 8014418:	f002 fd64 	bl	8016ee4 <__lshift>
 801441c:	4606      	mov	r6, r0
 801441e:	2800      	cmp	r0, #0
 8014420:	f43f ae72 	beq.w	8014108 <_strtod_l+0x490>
 8014424:	9a05      	ldr	r2, [sp, #20]
 8014426:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014428:	4620      	mov	r0, r4
 801442a:	f002 fde7 	bl	8016ffc <__mdiff>
 801442e:	4605      	mov	r5, r0
 8014430:	2800      	cmp	r0, #0
 8014432:	f43f ae69 	beq.w	8014108 <_strtod_l+0x490>
 8014436:	68c3      	ldr	r3, [r0, #12]
 8014438:	930b      	str	r3, [sp, #44]	; 0x2c
 801443a:	2300      	movs	r3, #0
 801443c:	60c3      	str	r3, [r0, #12]
 801443e:	4631      	mov	r1, r6
 8014440:	f002 fdc0 	bl	8016fc4 <__mcmp>
 8014444:	2800      	cmp	r0, #0
 8014446:	da60      	bge.n	801450a <_strtod_l+0x892>
 8014448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801444a:	ea53 030a 	orrs.w	r3, r3, sl
 801444e:	f040 8082 	bne.w	8014556 <_strtod_l+0x8de>
 8014452:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014456:	2b00      	cmp	r3, #0
 8014458:	d17d      	bne.n	8014556 <_strtod_l+0x8de>
 801445a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801445e:	0d1b      	lsrs	r3, r3, #20
 8014460:	051b      	lsls	r3, r3, #20
 8014462:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014466:	d976      	bls.n	8014556 <_strtod_l+0x8de>
 8014468:	696b      	ldr	r3, [r5, #20]
 801446a:	b913      	cbnz	r3, 8014472 <_strtod_l+0x7fa>
 801446c:	692b      	ldr	r3, [r5, #16]
 801446e:	2b01      	cmp	r3, #1
 8014470:	dd71      	ble.n	8014556 <_strtod_l+0x8de>
 8014472:	4629      	mov	r1, r5
 8014474:	2201      	movs	r2, #1
 8014476:	4620      	mov	r0, r4
 8014478:	f002 fd34 	bl	8016ee4 <__lshift>
 801447c:	4631      	mov	r1, r6
 801447e:	4605      	mov	r5, r0
 8014480:	f002 fda0 	bl	8016fc4 <__mcmp>
 8014484:	2800      	cmp	r0, #0
 8014486:	dd66      	ble.n	8014556 <_strtod_l+0x8de>
 8014488:	9904      	ldr	r1, [sp, #16]
 801448a:	4a53      	ldr	r2, [pc, #332]	; (80145d8 <_strtod_l+0x960>)
 801448c:	465b      	mov	r3, fp
 801448e:	2900      	cmp	r1, #0
 8014490:	f000 8081 	beq.w	8014596 <_strtod_l+0x91e>
 8014494:	ea02 010b 	and.w	r1, r2, fp
 8014498:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801449c:	dc7b      	bgt.n	8014596 <_strtod_l+0x91e>
 801449e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80144a2:	f77f aea9 	ble.w	80141f8 <_strtod_l+0x580>
 80144a6:	4b4d      	ldr	r3, [pc, #308]	; (80145dc <_strtod_l+0x964>)
 80144a8:	4650      	mov	r0, sl
 80144aa:	4659      	mov	r1, fp
 80144ac:	2200      	movs	r2, #0
 80144ae:	f7ec f8c3 	bl	8000638 <__aeabi_dmul>
 80144b2:	460b      	mov	r3, r1
 80144b4:	4303      	orrs	r3, r0
 80144b6:	bf08      	it	eq
 80144b8:	2322      	moveq	r3, #34	; 0x22
 80144ba:	4682      	mov	sl, r0
 80144bc:	468b      	mov	fp, r1
 80144be:	bf08      	it	eq
 80144c0:	6023      	streq	r3, [r4, #0]
 80144c2:	e62b      	b.n	801411c <_strtod_l+0x4a4>
 80144c4:	f04f 32ff 	mov.w	r2, #4294967295
 80144c8:	fa02 f303 	lsl.w	r3, r2, r3
 80144cc:	ea03 0a0a 	and.w	sl, r3, sl
 80144d0:	e6e3      	b.n	801429a <_strtod_l+0x622>
 80144d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80144d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80144da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80144de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80144e2:	fa01 f308 	lsl.w	r3, r1, r8
 80144e6:	9308      	str	r3, [sp, #32]
 80144e8:	910d      	str	r1, [sp, #52]	; 0x34
 80144ea:	e746      	b.n	801437a <_strtod_l+0x702>
 80144ec:	2300      	movs	r3, #0
 80144ee:	9308      	str	r3, [sp, #32]
 80144f0:	2301      	movs	r3, #1
 80144f2:	930d      	str	r3, [sp, #52]	; 0x34
 80144f4:	e741      	b.n	801437a <_strtod_l+0x702>
 80144f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80144f8:	4642      	mov	r2, r8
 80144fa:	4620      	mov	r0, r4
 80144fc:	f002 fcf2 	bl	8016ee4 <__lshift>
 8014500:	9018      	str	r0, [sp, #96]	; 0x60
 8014502:	2800      	cmp	r0, #0
 8014504:	f47f af6b 	bne.w	80143de <_strtod_l+0x766>
 8014508:	e5fe      	b.n	8014108 <_strtod_l+0x490>
 801450a:	465f      	mov	r7, fp
 801450c:	d16e      	bne.n	80145ec <_strtod_l+0x974>
 801450e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014514:	b342      	cbz	r2, 8014568 <_strtod_l+0x8f0>
 8014516:	4a32      	ldr	r2, [pc, #200]	; (80145e0 <_strtod_l+0x968>)
 8014518:	4293      	cmp	r3, r2
 801451a:	d128      	bne.n	801456e <_strtod_l+0x8f6>
 801451c:	9b04      	ldr	r3, [sp, #16]
 801451e:	4651      	mov	r1, sl
 8014520:	b1eb      	cbz	r3, 801455e <_strtod_l+0x8e6>
 8014522:	4b2d      	ldr	r3, [pc, #180]	; (80145d8 <_strtod_l+0x960>)
 8014524:	403b      	ands	r3, r7
 8014526:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801452a:	f04f 32ff 	mov.w	r2, #4294967295
 801452e:	d819      	bhi.n	8014564 <_strtod_l+0x8ec>
 8014530:	0d1b      	lsrs	r3, r3, #20
 8014532:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014536:	fa02 f303 	lsl.w	r3, r2, r3
 801453a:	4299      	cmp	r1, r3
 801453c:	d117      	bne.n	801456e <_strtod_l+0x8f6>
 801453e:	4b29      	ldr	r3, [pc, #164]	; (80145e4 <_strtod_l+0x96c>)
 8014540:	429f      	cmp	r7, r3
 8014542:	d102      	bne.n	801454a <_strtod_l+0x8d2>
 8014544:	3101      	adds	r1, #1
 8014546:	f43f addf 	beq.w	8014108 <_strtod_l+0x490>
 801454a:	4b23      	ldr	r3, [pc, #140]	; (80145d8 <_strtod_l+0x960>)
 801454c:	403b      	ands	r3, r7
 801454e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014552:	f04f 0a00 	mov.w	sl, #0
 8014556:	9b04      	ldr	r3, [sp, #16]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1a4      	bne.n	80144a6 <_strtod_l+0x82e>
 801455c:	e5de      	b.n	801411c <_strtod_l+0x4a4>
 801455e:	f04f 33ff 	mov.w	r3, #4294967295
 8014562:	e7ea      	b.n	801453a <_strtod_l+0x8c2>
 8014564:	4613      	mov	r3, r2
 8014566:	e7e8      	b.n	801453a <_strtod_l+0x8c2>
 8014568:	ea53 030a 	orrs.w	r3, r3, sl
 801456c:	d08c      	beq.n	8014488 <_strtod_l+0x810>
 801456e:	9b08      	ldr	r3, [sp, #32]
 8014570:	b1db      	cbz	r3, 80145aa <_strtod_l+0x932>
 8014572:	423b      	tst	r3, r7
 8014574:	d0ef      	beq.n	8014556 <_strtod_l+0x8de>
 8014576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014578:	9a04      	ldr	r2, [sp, #16]
 801457a:	4650      	mov	r0, sl
 801457c:	4659      	mov	r1, fp
 801457e:	b1c3      	cbz	r3, 80145b2 <_strtod_l+0x93a>
 8014580:	f7ff fb5e 	bl	8013c40 <sulp>
 8014584:	4602      	mov	r2, r0
 8014586:	460b      	mov	r3, r1
 8014588:	ec51 0b18 	vmov	r0, r1, d8
 801458c:	f7eb fe9e 	bl	80002cc <__adddf3>
 8014590:	4682      	mov	sl, r0
 8014592:	468b      	mov	fp, r1
 8014594:	e7df      	b.n	8014556 <_strtod_l+0x8de>
 8014596:	4013      	ands	r3, r2
 8014598:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801459c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80145a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80145a4:	f04f 3aff 	mov.w	sl, #4294967295
 80145a8:	e7d5      	b.n	8014556 <_strtod_l+0x8de>
 80145aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ac:	ea13 0f0a 	tst.w	r3, sl
 80145b0:	e7e0      	b.n	8014574 <_strtod_l+0x8fc>
 80145b2:	f7ff fb45 	bl	8013c40 <sulp>
 80145b6:	4602      	mov	r2, r0
 80145b8:	460b      	mov	r3, r1
 80145ba:	ec51 0b18 	vmov	r0, r1, d8
 80145be:	f7eb fe83 	bl	80002c8 <__aeabi_dsub>
 80145c2:	2200      	movs	r2, #0
 80145c4:	2300      	movs	r3, #0
 80145c6:	4682      	mov	sl, r0
 80145c8:	468b      	mov	fp, r1
 80145ca:	f7ec fa9d 	bl	8000b08 <__aeabi_dcmpeq>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0c1      	beq.n	8014556 <_strtod_l+0x8de>
 80145d2:	e611      	b.n	80141f8 <_strtod_l+0x580>
 80145d4:	fffffc02 	.word	0xfffffc02
 80145d8:	7ff00000 	.word	0x7ff00000
 80145dc:	39500000 	.word	0x39500000
 80145e0:	000fffff 	.word	0x000fffff
 80145e4:	7fefffff 	.word	0x7fefffff
 80145e8:	080587c0 	.word	0x080587c0
 80145ec:	4631      	mov	r1, r6
 80145ee:	4628      	mov	r0, r5
 80145f0:	f002 fe66 	bl	80172c0 <__ratio>
 80145f4:	ec59 8b10 	vmov	r8, r9, d0
 80145f8:	ee10 0a10 	vmov	r0, s0
 80145fc:	2200      	movs	r2, #0
 80145fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014602:	4649      	mov	r1, r9
 8014604:	f7ec fa94 	bl	8000b30 <__aeabi_dcmple>
 8014608:	2800      	cmp	r0, #0
 801460a:	d07a      	beq.n	8014702 <_strtod_l+0xa8a>
 801460c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801460e:	2b00      	cmp	r3, #0
 8014610:	d04a      	beq.n	80146a8 <_strtod_l+0xa30>
 8014612:	4b95      	ldr	r3, [pc, #596]	; (8014868 <_strtod_l+0xbf0>)
 8014614:	2200      	movs	r2, #0
 8014616:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801461a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014868 <_strtod_l+0xbf0>
 801461e:	f04f 0800 	mov.w	r8, #0
 8014622:	4b92      	ldr	r3, [pc, #584]	; (801486c <_strtod_l+0xbf4>)
 8014624:	403b      	ands	r3, r7
 8014626:	930d      	str	r3, [sp, #52]	; 0x34
 8014628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801462a:	4b91      	ldr	r3, [pc, #580]	; (8014870 <_strtod_l+0xbf8>)
 801462c:	429a      	cmp	r2, r3
 801462e:	f040 80b0 	bne.w	8014792 <_strtod_l+0xb1a>
 8014632:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014636:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801463a:	ec4b ab10 	vmov	d0, sl, fp
 801463e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014642:	f002 fd65 	bl	8017110 <__ulp>
 8014646:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801464a:	ec53 2b10 	vmov	r2, r3, d0
 801464e:	f7eb fff3 	bl	8000638 <__aeabi_dmul>
 8014652:	4652      	mov	r2, sl
 8014654:	465b      	mov	r3, fp
 8014656:	f7eb fe39 	bl	80002cc <__adddf3>
 801465a:	460b      	mov	r3, r1
 801465c:	4983      	ldr	r1, [pc, #524]	; (801486c <_strtod_l+0xbf4>)
 801465e:	4a85      	ldr	r2, [pc, #532]	; (8014874 <_strtod_l+0xbfc>)
 8014660:	4019      	ands	r1, r3
 8014662:	4291      	cmp	r1, r2
 8014664:	4682      	mov	sl, r0
 8014666:	d960      	bls.n	801472a <_strtod_l+0xab2>
 8014668:	ee18 3a90 	vmov	r3, s17
 801466c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014670:	4293      	cmp	r3, r2
 8014672:	d104      	bne.n	801467e <_strtod_l+0xa06>
 8014674:	ee18 3a10 	vmov	r3, s16
 8014678:	3301      	adds	r3, #1
 801467a:	f43f ad45 	beq.w	8014108 <_strtod_l+0x490>
 801467e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014880 <_strtod_l+0xc08>
 8014682:	f04f 3aff 	mov.w	sl, #4294967295
 8014686:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014688:	4620      	mov	r0, r4
 801468a:	f002 fa0f 	bl	8016aac <_Bfree>
 801468e:	9905      	ldr	r1, [sp, #20]
 8014690:	4620      	mov	r0, r4
 8014692:	f002 fa0b 	bl	8016aac <_Bfree>
 8014696:	4631      	mov	r1, r6
 8014698:	4620      	mov	r0, r4
 801469a:	f002 fa07 	bl	8016aac <_Bfree>
 801469e:	4629      	mov	r1, r5
 80146a0:	4620      	mov	r0, r4
 80146a2:	f002 fa03 	bl	8016aac <_Bfree>
 80146a6:	e61a      	b.n	80142de <_strtod_l+0x666>
 80146a8:	f1ba 0f00 	cmp.w	sl, #0
 80146ac:	d11b      	bne.n	80146e6 <_strtod_l+0xa6e>
 80146ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146b2:	b9f3      	cbnz	r3, 80146f2 <_strtod_l+0xa7a>
 80146b4:	4b6c      	ldr	r3, [pc, #432]	; (8014868 <_strtod_l+0xbf0>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	4640      	mov	r0, r8
 80146ba:	4649      	mov	r1, r9
 80146bc:	f7ec fa2e 	bl	8000b1c <__aeabi_dcmplt>
 80146c0:	b9d0      	cbnz	r0, 80146f8 <_strtod_l+0xa80>
 80146c2:	4640      	mov	r0, r8
 80146c4:	4649      	mov	r1, r9
 80146c6:	4b6c      	ldr	r3, [pc, #432]	; (8014878 <_strtod_l+0xc00>)
 80146c8:	2200      	movs	r2, #0
 80146ca:	f7eb ffb5 	bl	8000638 <__aeabi_dmul>
 80146ce:	4680      	mov	r8, r0
 80146d0:	4689      	mov	r9, r1
 80146d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80146d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80146da:	9315      	str	r3, [sp, #84]	; 0x54
 80146dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80146e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80146e4:	e79d      	b.n	8014622 <_strtod_l+0x9aa>
 80146e6:	f1ba 0f01 	cmp.w	sl, #1
 80146ea:	d102      	bne.n	80146f2 <_strtod_l+0xa7a>
 80146ec:	2f00      	cmp	r7, #0
 80146ee:	f43f ad83 	beq.w	80141f8 <_strtod_l+0x580>
 80146f2:	4b62      	ldr	r3, [pc, #392]	; (801487c <_strtod_l+0xc04>)
 80146f4:	2200      	movs	r2, #0
 80146f6:	e78e      	b.n	8014616 <_strtod_l+0x99e>
 80146f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014878 <_strtod_l+0xc00>
 80146fc:	f04f 0800 	mov.w	r8, #0
 8014700:	e7e7      	b.n	80146d2 <_strtod_l+0xa5a>
 8014702:	4b5d      	ldr	r3, [pc, #372]	; (8014878 <_strtod_l+0xc00>)
 8014704:	4640      	mov	r0, r8
 8014706:	4649      	mov	r1, r9
 8014708:	2200      	movs	r2, #0
 801470a:	f7eb ff95 	bl	8000638 <__aeabi_dmul>
 801470e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014710:	4680      	mov	r8, r0
 8014712:	4689      	mov	r9, r1
 8014714:	b933      	cbnz	r3, 8014724 <_strtod_l+0xaac>
 8014716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801471a:	900e      	str	r0, [sp, #56]	; 0x38
 801471c:	930f      	str	r3, [sp, #60]	; 0x3c
 801471e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014722:	e7dd      	b.n	80146e0 <_strtod_l+0xa68>
 8014724:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014728:	e7f9      	b.n	801471e <_strtod_l+0xaa6>
 801472a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801472e:	9b04      	ldr	r3, [sp, #16]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d1a8      	bne.n	8014686 <_strtod_l+0xa0e>
 8014734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801473a:	0d1b      	lsrs	r3, r3, #20
 801473c:	051b      	lsls	r3, r3, #20
 801473e:	429a      	cmp	r2, r3
 8014740:	d1a1      	bne.n	8014686 <_strtod_l+0xa0e>
 8014742:	4640      	mov	r0, r8
 8014744:	4649      	mov	r1, r9
 8014746:	f7ec fad7 	bl	8000cf8 <__aeabi_d2lz>
 801474a:	f7eb ff47 	bl	80005dc <__aeabi_l2d>
 801474e:	4602      	mov	r2, r0
 8014750:	460b      	mov	r3, r1
 8014752:	4640      	mov	r0, r8
 8014754:	4649      	mov	r1, r9
 8014756:	f7eb fdb7 	bl	80002c8 <__aeabi_dsub>
 801475a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801475c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014760:	ea43 030a 	orr.w	r3, r3, sl
 8014764:	4313      	orrs	r3, r2
 8014766:	4680      	mov	r8, r0
 8014768:	4689      	mov	r9, r1
 801476a:	d055      	beq.n	8014818 <_strtod_l+0xba0>
 801476c:	a336      	add	r3, pc, #216	; (adr r3, 8014848 <_strtod_l+0xbd0>)
 801476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014772:	f7ec f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8014776:	2800      	cmp	r0, #0
 8014778:	f47f acd0 	bne.w	801411c <_strtod_l+0x4a4>
 801477c:	a334      	add	r3, pc, #208	; (adr r3, 8014850 <_strtod_l+0xbd8>)
 801477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014782:	4640      	mov	r0, r8
 8014784:	4649      	mov	r1, r9
 8014786:	f7ec f9e7 	bl	8000b58 <__aeabi_dcmpgt>
 801478a:	2800      	cmp	r0, #0
 801478c:	f43f af7b 	beq.w	8014686 <_strtod_l+0xa0e>
 8014790:	e4c4      	b.n	801411c <_strtod_l+0x4a4>
 8014792:	9b04      	ldr	r3, [sp, #16]
 8014794:	b333      	cbz	r3, 80147e4 <_strtod_l+0xb6c>
 8014796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014798:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801479c:	d822      	bhi.n	80147e4 <_strtod_l+0xb6c>
 801479e:	a32e      	add	r3, pc, #184	; (adr r3, 8014858 <_strtod_l+0xbe0>)
 80147a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a4:	4640      	mov	r0, r8
 80147a6:	4649      	mov	r1, r9
 80147a8:	f7ec f9c2 	bl	8000b30 <__aeabi_dcmple>
 80147ac:	b1a0      	cbz	r0, 80147d8 <_strtod_l+0xb60>
 80147ae:	4649      	mov	r1, r9
 80147b0:	4640      	mov	r0, r8
 80147b2:	f7ec fa19 	bl	8000be8 <__aeabi_d2uiz>
 80147b6:	2801      	cmp	r0, #1
 80147b8:	bf38      	it	cc
 80147ba:	2001      	movcc	r0, #1
 80147bc:	f7eb fec2 	bl	8000544 <__aeabi_ui2d>
 80147c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147c2:	4680      	mov	r8, r0
 80147c4:	4689      	mov	r9, r1
 80147c6:	bb23      	cbnz	r3, 8014812 <_strtod_l+0xb9a>
 80147c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147cc:	9010      	str	r0, [sp, #64]	; 0x40
 80147ce:	9311      	str	r3, [sp, #68]	; 0x44
 80147d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80147d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80147d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80147e0:	1a9b      	subs	r3, r3, r2
 80147e2:	9309      	str	r3, [sp, #36]	; 0x24
 80147e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80147e8:	eeb0 0a48 	vmov.f32	s0, s16
 80147ec:	eef0 0a68 	vmov.f32	s1, s17
 80147f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80147f4:	f002 fc8c 	bl	8017110 <__ulp>
 80147f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80147fc:	ec53 2b10 	vmov	r2, r3, d0
 8014800:	f7eb ff1a 	bl	8000638 <__aeabi_dmul>
 8014804:	ec53 2b18 	vmov	r2, r3, d8
 8014808:	f7eb fd60 	bl	80002cc <__adddf3>
 801480c:	4682      	mov	sl, r0
 801480e:	468b      	mov	fp, r1
 8014810:	e78d      	b.n	801472e <_strtod_l+0xab6>
 8014812:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014816:	e7db      	b.n	80147d0 <_strtod_l+0xb58>
 8014818:	a311      	add	r3, pc, #68	; (adr r3, 8014860 <_strtod_l+0xbe8>)
 801481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801481e:	f7ec f97d 	bl	8000b1c <__aeabi_dcmplt>
 8014822:	e7b2      	b.n	801478a <_strtod_l+0xb12>
 8014824:	2300      	movs	r3, #0
 8014826:	930a      	str	r3, [sp, #40]	; 0x28
 8014828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801482a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801482c:	6013      	str	r3, [r2, #0]
 801482e:	f7ff ba6b 	b.w	8013d08 <_strtod_l+0x90>
 8014832:	2a65      	cmp	r2, #101	; 0x65
 8014834:	f43f ab5f 	beq.w	8013ef6 <_strtod_l+0x27e>
 8014838:	2a45      	cmp	r2, #69	; 0x45
 801483a:	f43f ab5c 	beq.w	8013ef6 <_strtod_l+0x27e>
 801483e:	2301      	movs	r3, #1
 8014840:	f7ff bb94 	b.w	8013f6c <_strtod_l+0x2f4>
 8014844:	f3af 8000 	nop.w
 8014848:	94a03595 	.word	0x94a03595
 801484c:	3fdfffff 	.word	0x3fdfffff
 8014850:	35afe535 	.word	0x35afe535
 8014854:	3fe00000 	.word	0x3fe00000
 8014858:	ffc00000 	.word	0xffc00000
 801485c:	41dfffff 	.word	0x41dfffff
 8014860:	94a03595 	.word	0x94a03595
 8014864:	3fcfffff 	.word	0x3fcfffff
 8014868:	3ff00000 	.word	0x3ff00000
 801486c:	7ff00000 	.word	0x7ff00000
 8014870:	7fe00000 	.word	0x7fe00000
 8014874:	7c9fffff 	.word	0x7c9fffff
 8014878:	3fe00000 	.word	0x3fe00000
 801487c:	bff00000 	.word	0xbff00000
 8014880:	7fefffff 	.word	0x7fefffff

08014884 <strtod>:
 8014884:	460a      	mov	r2, r1
 8014886:	4601      	mov	r1, r0
 8014888:	4802      	ldr	r0, [pc, #8]	; (8014894 <strtod+0x10>)
 801488a:	4b03      	ldr	r3, [pc, #12]	; (8014898 <strtod+0x14>)
 801488c:	6800      	ldr	r0, [r0, #0]
 801488e:	f7ff b9f3 	b.w	8013c78 <_strtod_l>
 8014892:	bf00      	nop
 8014894:	20000320 	.word	0x20000320
 8014898:	200003ec 	.word	0x200003ec

0801489c <strtok>:
 801489c:	4b16      	ldr	r3, [pc, #88]	; (80148f8 <strtok+0x5c>)
 801489e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80148a0:	681e      	ldr	r6, [r3, #0]
 80148a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80148a4:	4605      	mov	r5, r0
 80148a6:	b9fc      	cbnz	r4, 80148e8 <strtok+0x4c>
 80148a8:	2050      	movs	r0, #80	; 0x50
 80148aa:	9101      	str	r1, [sp, #4]
 80148ac:	f7fd ffa0 	bl	80127f0 <malloc>
 80148b0:	9901      	ldr	r1, [sp, #4]
 80148b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80148b4:	4602      	mov	r2, r0
 80148b6:	b920      	cbnz	r0, 80148c2 <strtok+0x26>
 80148b8:	4b10      	ldr	r3, [pc, #64]	; (80148fc <strtok+0x60>)
 80148ba:	4811      	ldr	r0, [pc, #68]	; (8014900 <strtok+0x64>)
 80148bc:	2157      	movs	r1, #87	; 0x57
 80148be:	f7fd ff35 	bl	801272c <__assert_func>
 80148c2:	e9c0 4400 	strd	r4, r4, [r0]
 80148c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80148ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80148ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80148d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80148d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80148da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80148de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80148e2:	6184      	str	r4, [r0, #24]
 80148e4:	7704      	strb	r4, [r0, #28]
 80148e6:	6244      	str	r4, [r0, #36]	; 0x24
 80148e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80148ea:	2301      	movs	r3, #1
 80148ec:	4628      	mov	r0, r5
 80148ee:	b002      	add	sp, #8
 80148f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148f4:	f000 b806 	b.w	8014904 <__strtok_r>
 80148f8:	20000320 	.word	0x20000320
 80148fc:	080585e8 	.word	0x080585e8
 8014900:	080587e8 	.word	0x080587e8

08014904 <__strtok_r>:
 8014904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014906:	b908      	cbnz	r0, 801490c <__strtok_r+0x8>
 8014908:	6810      	ldr	r0, [r2, #0]
 801490a:	b188      	cbz	r0, 8014930 <__strtok_r+0x2c>
 801490c:	4604      	mov	r4, r0
 801490e:	4620      	mov	r0, r4
 8014910:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014914:	460f      	mov	r7, r1
 8014916:	f817 6b01 	ldrb.w	r6, [r7], #1
 801491a:	b91e      	cbnz	r6, 8014924 <__strtok_r+0x20>
 801491c:	b965      	cbnz	r5, 8014938 <__strtok_r+0x34>
 801491e:	6015      	str	r5, [r2, #0]
 8014920:	4628      	mov	r0, r5
 8014922:	e005      	b.n	8014930 <__strtok_r+0x2c>
 8014924:	42b5      	cmp	r5, r6
 8014926:	d1f6      	bne.n	8014916 <__strtok_r+0x12>
 8014928:	2b00      	cmp	r3, #0
 801492a:	d1f0      	bne.n	801490e <__strtok_r+0xa>
 801492c:	6014      	str	r4, [r2, #0]
 801492e:	7003      	strb	r3, [r0, #0]
 8014930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014932:	461c      	mov	r4, r3
 8014934:	e00c      	b.n	8014950 <__strtok_r+0x4c>
 8014936:	b915      	cbnz	r5, 801493e <__strtok_r+0x3a>
 8014938:	f814 3b01 	ldrb.w	r3, [r4], #1
 801493c:	460e      	mov	r6, r1
 801493e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014942:	42ab      	cmp	r3, r5
 8014944:	d1f7      	bne.n	8014936 <__strtok_r+0x32>
 8014946:	2b00      	cmp	r3, #0
 8014948:	d0f3      	beq.n	8014932 <__strtok_r+0x2e>
 801494a:	2300      	movs	r3, #0
 801494c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014950:	6014      	str	r4, [r2, #0]
 8014952:	e7ed      	b.n	8014930 <__strtok_r+0x2c>

08014954 <_strtol_l.constprop.0>:
 8014954:	2b01      	cmp	r3, #1
 8014956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801495a:	d001      	beq.n	8014960 <_strtol_l.constprop.0+0xc>
 801495c:	2b24      	cmp	r3, #36	; 0x24
 801495e:	d906      	bls.n	801496e <_strtol_l.constprop.0+0x1a>
 8014960:	f7fd ff0a 	bl	8012778 <__errno>
 8014964:	2316      	movs	r3, #22
 8014966:	6003      	str	r3, [r0, #0]
 8014968:	2000      	movs	r0, #0
 801496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801496e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014a54 <_strtol_l.constprop.0+0x100>
 8014972:	460d      	mov	r5, r1
 8014974:	462e      	mov	r6, r5
 8014976:	f815 4b01 	ldrb.w	r4, [r5], #1
 801497a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801497e:	f017 0708 	ands.w	r7, r7, #8
 8014982:	d1f7      	bne.n	8014974 <_strtol_l.constprop.0+0x20>
 8014984:	2c2d      	cmp	r4, #45	; 0x2d
 8014986:	d132      	bne.n	80149ee <_strtol_l.constprop.0+0x9a>
 8014988:	782c      	ldrb	r4, [r5, #0]
 801498a:	2701      	movs	r7, #1
 801498c:	1cb5      	adds	r5, r6, #2
 801498e:	2b00      	cmp	r3, #0
 8014990:	d05b      	beq.n	8014a4a <_strtol_l.constprop.0+0xf6>
 8014992:	2b10      	cmp	r3, #16
 8014994:	d109      	bne.n	80149aa <_strtol_l.constprop.0+0x56>
 8014996:	2c30      	cmp	r4, #48	; 0x30
 8014998:	d107      	bne.n	80149aa <_strtol_l.constprop.0+0x56>
 801499a:	782c      	ldrb	r4, [r5, #0]
 801499c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80149a0:	2c58      	cmp	r4, #88	; 0x58
 80149a2:	d14d      	bne.n	8014a40 <_strtol_l.constprop.0+0xec>
 80149a4:	786c      	ldrb	r4, [r5, #1]
 80149a6:	2310      	movs	r3, #16
 80149a8:	3502      	adds	r5, #2
 80149aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80149ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80149b2:	f04f 0c00 	mov.w	ip, #0
 80149b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80149ba:	4666      	mov	r6, ip
 80149bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80149c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80149c4:	f1be 0f09 	cmp.w	lr, #9
 80149c8:	d816      	bhi.n	80149f8 <_strtol_l.constprop.0+0xa4>
 80149ca:	4674      	mov	r4, lr
 80149cc:	42a3      	cmp	r3, r4
 80149ce:	dd24      	ble.n	8014a1a <_strtol_l.constprop.0+0xc6>
 80149d0:	f1bc 0f00 	cmp.w	ip, #0
 80149d4:	db1e      	blt.n	8014a14 <_strtol_l.constprop.0+0xc0>
 80149d6:	45b1      	cmp	r9, r6
 80149d8:	d31c      	bcc.n	8014a14 <_strtol_l.constprop.0+0xc0>
 80149da:	d101      	bne.n	80149e0 <_strtol_l.constprop.0+0x8c>
 80149dc:	45a2      	cmp	sl, r4
 80149de:	db19      	blt.n	8014a14 <_strtol_l.constprop.0+0xc0>
 80149e0:	fb06 4603 	mla	r6, r6, r3, r4
 80149e4:	f04f 0c01 	mov.w	ip, #1
 80149e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149ec:	e7e8      	b.n	80149c0 <_strtol_l.constprop.0+0x6c>
 80149ee:	2c2b      	cmp	r4, #43	; 0x2b
 80149f0:	bf04      	itt	eq
 80149f2:	782c      	ldrbeq	r4, [r5, #0]
 80149f4:	1cb5      	addeq	r5, r6, #2
 80149f6:	e7ca      	b.n	801498e <_strtol_l.constprop.0+0x3a>
 80149f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80149fc:	f1be 0f19 	cmp.w	lr, #25
 8014a00:	d801      	bhi.n	8014a06 <_strtol_l.constprop.0+0xb2>
 8014a02:	3c37      	subs	r4, #55	; 0x37
 8014a04:	e7e2      	b.n	80149cc <_strtol_l.constprop.0+0x78>
 8014a06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014a0a:	f1be 0f19 	cmp.w	lr, #25
 8014a0e:	d804      	bhi.n	8014a1a <_strtol_l.constprop.0+0xc6>
 8014a10:	3c57      	subs	r4, #87	; 0x57
 8014a12:	e7db      	b.n	80149cc <_strtol_l.constprop.0+0x78>
 8014a14:	f04f 3cff 	mov.w	ip, #4294967295
 8014a18:	e7e6      	b.n	80149e8 <_strtol_l.constprop.0+0x94>
 8014a1a:	f1bc 0f00 	cmp.w	ip, #0
 8014a1e:	da05      	bge.n	8014a2c <_strtol_l.constprop.0+0xd8>
 8014a20:	2322      	movs	r3, #34	; 0x22
 8014a22:	6003      	str	r3, [r0, #0]
 8014a24:	4646      	mov	r6, r8
 8014a26:	b942      	cbnz	r2, 8014a3a <_strtol_l.constprop.0+0xe6>
 8014a28:	4630      	mov	r0, r6
 8014a2a:	e79e      	b.n	801496a <_strtol_l.constprop.0+0x16>
 8014a2c:	b107      	cbz	r7, 8014a30 <_strtol_l.constprop.0+0xdc>
 8014a2e:	4276      	negs	r6, r6
 8014a30:	2a00      	cmp	r2, #0
 8014a32:	d0f9      	beq.n	8014a28 <_strtol_l.constprop.0+0xd4>
 8014a34:	f1bc 0f00 	cmp.w	ip, #0
 8014a38:	d000      	beq.n	8014a3c <_strtol_l.constprop.0+0xe8>
 8014a3a:	1e69      	subs	r1, r5, #1
 8014a3c:	6011      	str	r1, [r2, #0]
 8014a3e:	e7f3      	b.n	8014a28 <_strtol_l.constprop.0+0xd4>
 8014a40:	2430      	movs	r4, #48	; 0x30
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d1b1      	bne.n	80149aa <_strtol_l.constprop.0+0x56>
 8014a46:	2308      	movs	r3, #8
 8014a48:	e7af      	b.n	80149aa <_strtol_l.constprop.0+0x56>
 8014a4a:	2c30      	cmp	r4, #48	; 0x30
 8014a4c:	d0a5      	beq.n	801499a <_strtol_l.constprop.0+0x46>
 8014a4e:	230a      	movs	r3, #10
 8014a50:	e7ab      	b.n	80149aa <_strtol_l.constprop.0+0x56>
 8014a52:	bf00      	nop
 8014a54:	08058882 	.word	0x08058882

08014a58 <_strtol_r>:
 8014a58:	f7ff bf7c 	b.w	8014954 <_strtol_l.constprop.0>

08014a5c <strtol>:
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	460a      	mov	r2, r1
 8014a60:	4601      	mov	r1, r0
 8014a62:	4802      	ldr	r0, [pc, #8]	; (8014a6c <strtol+0x10>)
 8014a64:	6800      	ldr	r0, [r0, #0]
 8014a66:	f7ff bf75 	b.w	8014954 <_strtol_l.constprop.0>
 8014a6a:	bf00      	nop
 8014a6c:	20000320 	.word	0x20000320

08014a70 <__tzcalc_limits>:
 8014a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	4605      	mov	r5, r0
 8014a76:	f001 ff1b 	bl	80168b0 <__gettzinfo>
 8014a7a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8014a7e:	429d      	cmp	r5, r3
 8014a80:	f340 8099 	ble.w	8014bb6 <__tzcalc_limits+0x146>
 8014a84:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8014a88:	18ac      	adds	r4, r5, r2
 8014a8a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8014a8e:	f240 126d 	movw	r2, #365	; 0x16d
 8014a92:	10a4      	asrs	r4, r4, #2
 8014a94:	fb02 4403 	mla	r4, r2, r3, r4
 8014a98:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014a9c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8014aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014aa4:	441c      	add	r4, r3
 8014aa6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014aaa:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8014aae:	fb95 fcf3 	sdiv	ip, r5, r3
 8014ab2:	fb03 5c1c 	mls	ip, r3, ip, r5
 8014ab6:	186a      	adds	r2, r5, r1
 8014ab8:	fabc f68c 	clz	r6, ip
 8014abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8014ac0:	f005 0303 	and.w	r3, r5, #3
 8014ac4:	4414      	add	r4, r2
 8014ac6:	2264      	movs	r2, #100	; 0x64
 8014ac8:	6045      	str	r5, [r0, #4]
 8014aca:	fb95 f7f2 	sdiv	r7, r5, r2
 8014ace:	0976      	lsrs	r6, r6, #5
 8014ad0:	fb02 5717 	mls	r7, r2, r7, r5
 8014ad4:	4601      	mov	r1, r0
 8014ad6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8014ada:	9300      	str	r3, [sp, #0]
 8014adc:	f04f 0a07 	mov.w	sl, #7
 8014ae0:	7a0d      	ldrb	r5, [r1, #8]
 8014ae2:	694b      	ldr	r3, [r1, #20]
 8014ae4:	2d4a      	cmp	r5, #74	; 0x4a
 8014ae6:	d12d      	bne.n	8014b44 <__tzcalc_limits+0xd4>
 8014ae8:	9a00      	ldr	r2, [sp, #0]
 8014aea:	eb04 0e03 	add.w	lr, r4, r3
 8014aee:	b902      	cbnz	r2, 8014af2 <__tzcalc_limits+0x82>
 8014af0:	b917      	cbnz	r7, 8014af8 <__tzcalc_limits+0x88>
 8014af2:	f1bc 0f00 	cmp.w	ip, #0
 8014af6:	d123      	bne.n	8014b40 <__tzcalc_limits+0xd0>
 8014af8:	2b3b      	cmp	r3, #59	; 0x3b
 8014afa:	bfd4      	ite	le
 8014afc:	2300      	movle	r3, #0
 8014afe:	2301      	movgt	r3, #1
 8014b00:	4473      	add	r3, lr
 8014b02:	3b01      	subs	r3, #1
 8014b04:	698d      	ldr	r5, [r1, #24]
 8014b06:	4a2d      	ldr	r2, [pc, #180]	; (8014bbc <__tzcalc_limits+0x14c>)
 8014b08:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8014b0c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014b10:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014b12:	18ed      	adds	r5, r5, r3
 8014b14:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8014b18:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8014b1c:	3128      	adds	r1, #40	; 0x28
 8014b1e:	458b      	cmp	fp, r1
 8014b20:	d1de      	bne.n	8014ae0 <__tzcalc_limits+0x70>
 8014b22:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8014b26:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8014b2a:	428c      	cmp	r4, r1
 8014b2c:	eb72 0303 	sbcs.w	r3, r2, r3
 8014b30:	bfb4      	ite	lt
 8014b32:	2301      	movlt	r3, #1
 8014b34:	2300      	movge	r3, #0
 8014b36:	6003      	str	r3, [r0, #0]
 8014b38:	2001      	movs	r0, #1
 8014b3a:	b003      	add	sp, #12
 8014b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b40:	2300      	movs	r3, #0
 8014b42:	e7dd      	b.n	8014b00 <__tzcalc_limits+0x90>
 8014b44:	2d44      	cmp	r5, #68	; 0x44
 8014b46:	d101      	bne.n	8014b4c <__tzcalc_limits+0xdc>
 8014b48:	4423      	add	r3, r4
 8014b4a:	e7db      	b.n	8014b04 <__tzcalc_limits+0x94>
 8014b4c:	9a00      	ldr	r2, [sp, #0]
 8014b4e:	bb62      	cbnz	r2, 8014baa <__tzcalc_limits+0x13a>
 8014b50:	2f00      	cmp	r7, #0
 8014b52:	bf0c      	ite	eq
 8014b54:	4635      	moveq	r5, r6
 8014b56:	2501      	movne	r5, #1
 8014b58:	68ca      	ldr	r2, [r1, #12]
 8014b5a:	9201      	str	r2, [sp, #4]
 8014b5c:	4a18      	ldr	r2, [pc, #96]	; (8014bc0 <__tzcalc_limits+0x150>)
 8014b5e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8014b62:	fb09 2505 	mla	r5, r9, r5, r2
 8014b66:	46a6      	mov	lr, r4
 8014b68:	f04f 0800 	mov.w	r8, #0
 8014b6c:	3d04      	subs	r5, #4
 8014b6e:	9a01      	ldr	r2, [sp, #4]
 8014b70:	f108 0801 	add.w	r8, r8, #1
 8014b74:	4542      	cmp	r2, r8
 8014b76:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8014b7a:	dc18      	bgt.n	8014bae <__tzcalc_limits+0x13e>
 8014b7c:	f10e 0504 	add.w	r5, lr, #4
 8014b80:	fb95 f8fa 	sdiv	r8, r5, sl
 8014b84:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8014b88:	eba5 0808 	sub.w	r8, r5, r8
 8014b8c:	ebb3 0808 	subs.w	r8, r3, r8
 8014b90:	690b      	ldr	r3, [r1, #16]
 8014b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b96:	bf48      	it	mi
 8014b98:	f108 0807 	addmi.w	r8, r8, #7
 8014b9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014ba0:	4443      	add	r3, r8
 8014ba2:	454b      	cmp	r3, r9
 8014ba4:	da05      	bge.n	8014bb2 <__tzcalc_limits+0x142>
 8014ba6:	4473      	add	r3, lr
 8014ba8:	e7ac      	b.n	8014b04 <__tzcalc_limits+0x94>
 8014baa:	4635      	mov	r5, r6
 8014bac:	e7d4      	b.n	8014b58 <__tzcalc_limits+0xe8>
 8014bae:	44ce      	add	lr, r9
 8014bb0:	e7dd      	b.n	8014b6e <__tzcalc_limits+0xfe>
 8014bb2:	3b07      	subs	r3, #7
 8014bb4:	e7f5      	b.n	8014ba2 <__tzcalc_limits+0x132>
 8014bb6:	2000      	movs	r0, #0
 8014bb8:	e7bf      	b.n	8014b3a <__tzcalc_limits+0xca>
 8014bba:	bf00      	nop
 8014bbc:	00015180 	.word	0x00015180
 8014bc0:	08058ad8 	.word	0x08058ad8

08014bc4 <__tz_lock>:
 8014bc4:	4801      	ldr	r0, [pc, #4]	; (8014bcc <__tz_lock+0x8>)
 8014bc6:	f001 be7c 	b.w	80168c2 <__retarget_lock_acquire>
 8014bca:	bf00      	nop
 8014bcc:	20005e00 	.word	0x20005e00

08014bd0 <__tz_unlock>:
 8014bd0:	4801      	ldr	r0, [pc, #4]	; (8014bd8 <__tz_unlock+0x8>)
 8014bd2:	f001 be78 	b.w	80168c6 <__retarget_lock_release>
 8014bd6:	bf00      	nop
 8014bd8:	20005e00 	.word	0x20005e00

08014bdc <_tzset_unlocked>:
 8014bdc:	4b01      	ldr	r3, [pc, #4]	; (8014be4 <_tzset_unlocked+0x8>)
 8014bde:	6818      	ldr	r0, [r3, #0]
 8014be0:	f000 b802 	b.w	8014be8 <_tzset_unlocked_r>
 8014be4:	20000320 	.word	0x20000320

08014be8 <_tzset_unlocked_r>:
 8014be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bec:	b08d      	sub	sp, #52	; 0x34
 8014bee:	4607      	mov	r7, r0
 8014bf0:	f001 fe5e 	bl	80168b0 <__gettzinfo>
 8014bf4:	49b0      	ldr	r1, [pc, #704]	; (8014eb8 <_tzset_unlocked_r+0x2d0>)
 8014bf6:	4eb1      	ldr	r6, [pc, #708]	; (8014ebc <_tzset_unlocked_r+0x2d4>)
 8014bf8:	4605      	mov	r5, r0
 8014bfa:	4638      	mov	r0, r7
 8014bfc:	f001 fe50 	bl	80168a0 <_getenv_r>
 8014c00:	4604      	mov	r4, r0
 8014c02:	b970      	cbnz	r0, 8014c22 <_tzset_unlocked_r+0x3a>
 8014c04:	4bae      	ldr	r3, [pc, #696]	; (8014ec0 <_tzset_unlocked_r+0x2d8>)
 8014c06:	4aaf      	ldr	r2, [pc, #700]	; (8014ec4 <_tzset_unlocked_r+0x2dc>)
 8014c08:	6018      	str	r0, [r3, #0]
 8014c0a:	4baf      	ldr	r3, [pc, #700]	; (8014ec8 <_tzset_unlocked_r+0x2e0>)
 8014c0c:	6018      	str	r0, [r3, #0]
 8014c0e:	4baf      	ldr	r3, [pc, #700]	; (8014ecc <_tzset_unlocked_r+0x2e4>)
 8014c10:	6830      	ldr	r0, [r6, #0]
 8014c12:	e9c3 2200 	strd	r2, r2, [r3]
 8014c16:	f7fd fdf3 	bl	8012800 <free>
 8014c1a:	6034      	str	r4, [r6, #0]
 8014c1c:	b00d      	add	sp, #52	; 0x34
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c22:	6831      	ldr	r1, [r6, #0]
 8014c24:	2900      	cmp	r1, #0
 8014c26:	d162      	bne.n	8014cee <_tzset_unlocked_r+0x106>
 8014c28:	6830      	ldr	r0, [r6, #0]
 8014c2a:	f7fd fde9 	bl	8012800 <free>
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f7eb fae8 	bl	8000204 <strlen>
 8014c34:	1c41      	adds	r1, r0, #1
 8014c36:	4638      	mov	r0, r7
 8014c38:	f7fe f8de 	bl	8012df8 <_malloc_r>
 8014c3c:	6030      	str	r0, [r6, #0]
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d15a      	bne.n	8014cf8 <_tzset_unlocked_r+0x110>
 8014c42:	7823      	ldrb	r3, [r4, #0]
 8014c44:	4aa2      	ldr	r2, [pc, #648]	; (8014ed0 <_tzset_unlocked_r+0x2e8>)
 8014c46:	49a3      	ldr	r1, [pc, #652]	; (8014ed4 <_tzset_unlocked_r+0x2ec>)
 8014c48:	2b3a      	cmp	r3, #58	; 0x3a
 8014c4a:	bf08      	it	eq
 8014c4c:	3401      	addeq	r4, #1
 8014c4e:	ae0a      	add	r6, sp, #40	; 0x28
 8014c50:	4633      	mov	r3, r6
 8014c52:	4620      	mov	r0, r4
 8014c54:	f7fe ff38 	bl	8013ac8 <siscanf>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	dddf      	ble.n	8014c1c <_tzset_unlocked_r+0x34>
 8014c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c5e:	18e7      	adds	r7, r4, r3
 8014c60:	5ce3      	ldrb	r3, [r4, r3]
 8014c62:	2b2d      	cmp	r3, #45	; 0x2d
 8014c64:	d14c      	bne.n	8014d00 <_tzset_unlocked_r+0x118>
 8014c66:	3701      	adds	r7, #1
 8014c68:	f04f 38ff 	mov.w	r8, #4294967295
 8014c6c:	f10d 0a20 	add.w	sl, sp, #32
 8014c70:	f10d 0b1e 	add.w	fp, sp, #30
 8014c74:	2400      	movs	r4, #0
 8014c76:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8014c7a:	4997      	ldr	r1, [pc, #604]	; (8014ed8 <_tzset_unlocked_r+0x2f0>)
 8014c7c:	9603      	str	r6, [sp, #12]
 8014c7e:	f8cd b000 	str.w	fp, [sp]
 8014c82:	4633      	mov	r3, r6
 8014c84:	aa07      	add	r2, sp, #28
 8014c86:	4638      	mov	r0, r7
 8014c88:	f8ad 401e 	strh.w	r4, [sp, #30]
 8014c8c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014c90:	f7fe ff1a 	bl	8013ac8 <siscanf>
 8014c94:	42a0      	cmp	r0, r4
 8014c96:	ddc1      	ble.n	8014c1c <_tzset_unlocked_r+0x34>
 8014c98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014c9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014ca0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014ee4 <_tzset_unlocked_r+0x2fc>
 8014ca4:	213c      	movs	r1, #60	; 0x3c
 8014ca6:	fb01 3302 	mla	r3, r1, r2, r3
 8014caa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014cae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014cb2:	fb01 3302 	mla	r3, r1, r2, r3
 8014cb6:	fb08 f303 	mul.w	r3, r8, r3
 8014cba:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8014ecc <_tzset_unlocked_r+0x2e4>
 8014cbe:	62ab      	str	r3, [r5, #40]	; 0x28
 8014cc0:	4b83      	ldr	r3, [pc, #524]	; (8014ed0 <_tzset_unlocked_r+0x2e8>)
 8014cc2:	f8c8 3000 	str.w	r3, [r8]
 8014cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc8:	4982      	ldr	r1, [pc, #520]	; (8014ed4 <_tzset_unlocked_r+0x2ec>)
 8014cca:	441f      	add	r7, r3
 8014ccc:	464a      	mov	r2, r9
 8014cce:	4633      	mov	r3, r6
 8014cd0:	4638      	mov	r0, r7
 8014cd2:	f7fe fef9 	bl	8013ac8 <siscanf>
 8014cd6:	42a0      	cmp	r0, r4
 8014cd8:	dc18      	bgt.n	8014d0c <_tzset_unlocked_r+0x124>
 8014cda:	f8d8 3000 	ldr.w	r3, [r8]
 8014cde:	f8c8 3004 	str.w	r3, [r8, #4]
 8014ce2:	4b77      	ldr	r3, [pc, #476]	; (8014ec0 <_tzset_unlocked_r+0x2d8>)
 8014ce4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014ce6:	601a      	str	r2, [r3, #0]
 8014ce8:	4b77      	ldr	r3, [pc, #476]	; (8014ec8 <_tzset_unlocked_r+0x2e0>)
 8014cea:	601c      	str	r4, [r3, #0]
 8014cec:	e796      	b.n	8014c1c <_tzset_unlocked_r+0x34>
 8014cee:	f7eb fa7f 	bl	80001f0 <strcmp>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d198      	bne.n	8014c28 <_tzset_unlocked_r+0x40>
 8014cf6:	e791      	b.n	8014c1c <_tzset_unlocked_r+0x34>
 8014cf8:	4621      	mov	r1, r4
 8014cfa:	f7fe ff56 	bl	8013baa <strcpy>
 8014cfe:	e7a0      	b.n	8014c42 <_tzset_unlocked_r+0x5a>
 8014d00:	2b2b      	cmp	r3, #43	; 0x2b
 8014d02:	bf08      	it	eq
 8014d04:	3701      	addeq	r7, #1
 8014d06:	f04f 0801 	mov.w	r8, #1
 8014d0a:	e7af      	b.n	8014c6c <_tzset_unlocked_r+0x84>
 8014d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d0e:	f8c8 9004 	str.w	r9, [r8, #4]
 8014d12:	18fc      	adds	r4, r7, r3
 8014d14:	5cfb      	ldrb	r3, [r7, r3]
 8014d16:	2b2d      	cmp	r3, #45	; 0x2d
 8014d18:	f040 808b 	bne.w	8014e32 <_tzset_unlocked_r+0x24a>
 8014d1c:	3401      	adds	r4, #1
 8014d1e:	f04f 37ff 	mov.w	r7, #4294967295
 8014d22:	2300      	movs	r3, #0
 8014d24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014d2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014d30:	930a      	str	r3, [sp, #40]	; 0x28
 8014d32:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014d36:	e9cd b600 	strd	fp, r6, [sp]
 8014d3a:	4967      	ldr	r1, [pc, #412]	; (8014ed8 <_tzset_unlocked_r+0x2f0>)
 8014d3c:	4633      	mov	r3, r6
 8014d3e:	aa07      	add	r2, sp, #28
 8014d40:	4620      	mov	r0, r4
 8014d42:	f7fe fec1 	bl	8013ac8 <siscanf>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	dc78      	bgt.n	8014e3c <_tzset_unlocked_r+0x254>
 8014d4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014d4c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8014d50:	652b      	str	r3, [r5, #80]	; 0x50
 8014d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d54:	462f      	mov	r7, r5
 8014d56:	441c      	add	r4, r3
 8014d58:	f04f 0900 	mov.w	r9, #0
 8014d5c:	7823      	ldrb	r3, [r4, #0]
 8014d5e:	2b2c      	cmp	r3, #44	; 0x2c
 8014d60:	bf08      	it	eq
 8014d62:	3401      	addeq	r4, #1
 8014d64:	f894 8000 	ldrb.w	r8, [r4]
 8014d68:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8014d6c:	d178      	bne.n	8014e60 <_tzset_unlocked_r+0x278>
 8014d6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8014d72:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014d76:	ab09      	add	r3, sp, #36	; 0x24
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	4958      	ldr	r1, [pc, #352]	; (8014edc <_tzset_unlocked_r+0x2f4>)
 8014d7c:	9603      	str	r6, [sp, #12]
 8014d7e:	4633      	mov	r3, r6
 8014d80:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8014d84:	4620      	mov	r0, r4
 8014d86:	f7fe fe9f 	bl	8013ac8 <siscanf>
 8014d8a:	2803      	cmp	r0, #3
 8014d8c:	f47f af46 	bne.w	8014c1c <_tzset_unlocked_r+0x34>
 8014d90:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014d94:	1e4b      	subs	r3, r1, #1
 8014d96:	2b0b      	cmp	r3, #11
 8014d98:	f63f af40 	bhi.w	8014c1c <_tzset_unlocked_r+0x34>
 8014d9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014da0:	1e53      	subs	r3, r2, #1
 8014da2:	2b04      	cmp	r3, #4
 8014da4:	f63f af3a 	bhi.w	8014c1c <_tzset_unlocked_r+0x34>
 8014da8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014dac:	2b06      	cmp	r3, #6
 8014dae:	f63f af35 	bhi.w	8014c1c <_tzset_unlocked_r+0x34>
 8014db2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014db6:	f887 8008 	strb.w	r8, [r7, #8]
 8014dba:	617b      	str	r3, [r7, #20]
 8014dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dbe:	eb04 0803 	add.w	r8, r4, r3
 8014dc2:	2302      	movs	r3, #2
 8014dc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014dc8:	2300      	movs	r3, #0
 8014dca:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014dce:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8014dd4:	f898 3000 	ldrb.w	r3, [r8]
 8014dd8:	2b2f      	cmp	r3, #47	; 0x2f
 8014dda:	d109      	bne.n	8014df0 <_tzset_unlocked_r+0x208>
 8014ddc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014de0:	e9cd b600 	strd	fp, r6, [sp]
 8014de4:	493e      	ldr	r1, [pc, #248]	; (8014ee0 <_tzset_unlocked_r+0x2f8>)
 8014de6:	4633      	mov	r3, r6
 8014de8:	aa07      	add	r2, sp, #28
 8014dea:	4640      	mov	r0, r8
 8014dec:	f7fe fe6c 	bl	8013ac8 <siscanf>
 8014df0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014df4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014df8:	213c      	movs	r1, #60	; 0x3c
 8014dfa:	fb01 3302 	mla	r3, r1, r2, r3
 8014dfe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014e02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014e06:	fb01 3302 	mla	r3, r1, r2, r3
 8014e0a:	61bb      	str	r3, [r7, #24]
 8014e0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e0e:	3728      	adds	r7, #40	; 0x28
 8014e10:	4444      	add	r4, r8
 8014e12:	f1b9 0f00 	cmp.w	r9, #0
 8014e16:	d020      	beq.n	8014e5a <_tzset_unlocked_r+0x272>
 8014e18:	6868      	ldr	r0, [r5, #4]
 8014e1a:	f7ff fe29 	bl	8014a70 <__tzcalc_limits>
 8014e1e:	4b28      	ldr	r3, [pc, #160]	; (8014ec0 <_tzset_unlocked_r+0x2d8>)
 8014e20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014e22:	601a      	str	r2, [r3, #0]
 8014e24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014e26:	1a9b      	subs	r3, r3, r2
 8014e28:	4a27      	ldr	r2, [pc, #156]	; (8014ec8 <_tzset_unlocked_r+0x2e0>)
 8014e2a:	bf18      	it	ne
 8014e2c:	2301      	movne	r3, #1
 8014e2e:	6013      	str	r3, [r2, #0]
 8014e30:	e6f4      	b.n	8014c1c <_tzset_unlocked_r+0x34>
 8014e32:	2b2b      	cmp	r3, #43	; 0x2b
 8014e34:	bf08      	it	eq
 8014e36:	3401      	addeq	r4, #1
 8014e38:	2701      	movs	r7, #1
 8014e3a:	e772      	b.n	8014d22 <_tzset_unlocked_r+0x13a>
 8014e3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014e40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014e44:	213c      	movs	r1, #60	; 0x3c
 8014e46:	fb01 3302 	mla	r3, r1, r2, r3
 8014e4a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014e4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014e52:	fb01 3302 	mla	r3, r1, r2, r3
 8014e56:	437b      	muls	r3, r7
 8014e58:	e77a      	b.n	8014d50 <_tzset_unlocked_r+0x168>
 8014e5a:	f04f 0901 	mov.w	r9, #1
 8014e5e:	e77d      	b.n	8014d5c <_tzset_unlocked_r+0x174>
 8014e60:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014e64:	bf06      	itte	eq
 8014e66:	3401      	addeq	r4, #1
 8014e68:	4643      	moveq	r3, r8
 8014e6a:	2344      	movne	r3, #68	; 0x44
 8014e6c:	220a      	movs	r2, #10
 8014e6e:	a90b      	add	r1, sp, #44	; 0x2c
 8014e70:	4620      	mov	r0, r4
 8014e72:	9305      	str	r3, [sp, #20]
 8014e74:	f003 f880 	bl	8017f78 <strtoul>
 8014e78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014e7c:	9b05      	ldr	r3, [sp, #20]
 8014e7e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8014e82:	45a0      	cmp	r8, r4
 8014e84:	d114      	bne.n	8014eb0 <_tzset_unlocked_r+0x2c8>
 8014e86:	234d      	movs	r3, #77	; 0x4d
 8014e88:	f1b9 0f00 	cmp.w	r9, #0
 8014e8c:	d107      	bne.n	8014e9e <_tzset_unlocked_r+0x2b6>
 8014e8e:	722b      	strb	r3, [r5, #8]
 8014e90:	2103      	movs	r1, #3
 8014e92:	2302      	movs	r3, #2
 8014e94:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8014e98:	f8c5 9014 	str.w	r9, [r5, #20]
 8014e9c:	e791      	b.n	8014dc2 <_tzset_unlocked_r+0x1da>
 8014e9e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8014ea2:	220b      	movs	r2, #11
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014eaa:	2300      	movs	r3, #0
 8014eac:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014eae:	e788      	b.n	8014dc2 <_tzset_unlocked_r+0x1da>
 8014eb0:	b280      	uxth	r0, r0
 8014eb2:	723b      	strb	r3, [r7, #8]
 8014eb4:	6178      	str	r0, [r7, #20]
 8014eb6:	e784      	b.n	8014dc2 <_tzset_unlocked_r+0x1da>
 8014eb8:	08058845 	.word	0x08058845
 8014ebc:	20005df0 	.word	0x20005df0
 8014ec0:	20005df8 	.word	0x20005df8
 8014ec4:	08058848 	.word	0x08058848
 8014ec8:	20005df4 	.word	0x20005df4
 8014ecc:	20000384 	.word	0x20000384
 8014ed0:	20005de3 	.word	0x20005de3
 8014ed4:	0805884c 	.word	0x0805884c
 8014ed8:	0805886f 	.word	0x0805886f
 8014edc:	0805885b 	.word	0x0805885b
 8014ee0:	0805886e 	.word	0x0805886e
 8014ee4:	20005dd8 	.word	0x20005dd8

08014ee8 <__swbuf_r>:
 8014ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eea:	460e      	mov	r6, r1
 8014eec:	4614      	mov	r4, r2
 8014eee:	4605      	mov	r5, r0
 8014ef0:	b118      	cbz	r0, 8014efa <__swbuf_r+0x12>
 8014ef2:	6983      	ldr	r3, [r0, #24]
 8014ef4:	b90b      	cbnz	r3, 8014efa <__swbuf_r+0x12>
 8014ef6:	f001 f88b 	bl	8016010 <__sinit>
 8014efa:	4b21      	ldr	r3, [pc, #132]	; (8014f80 <__swbuf_r+0x98>)
 8014efc:	429c      	cmp	r4, r3
 8014efe:	d12b      	bne.n	8014f58 <__swbuf_r+0x70>
 8014f00:	686c      	ldr	r4, [r5, #4]
 8014f02:	69a3      	ldr	r3, [r4, #24]
 8014f04:	60a3      	str	r3, [r4, #8]
 8014f06:	89a3      	ldrh	r3, [r4, #12]
 8014f08:	071a      	lsls	r2, r3, #28
 8014f0a:	d52f      	bpl.n	8014f6c <__swbuf_r+0x84>
 8014f0c:	6923      	ldr	r3, [r4, #16]
 8014f0e:	b36b      	cbz	r3, 8014f6c <__swbuf_r+0x84>
 8014f10:	6923      	ldr	r3, [r4, #16]
 8014f12:	6820      	ldr	r0, [r4, #0]
 8014f14:	1ac0      	subs	r0, r0, r3
 8014f16:	6963      	ldr	r3, [r4, #20]
 8014f18:	b2f6      	uxtb	r6, r6
 8014f1a:	4283      	cmp	r3, r0
 8014f1c:	4637      	mov	r7, r6
 8014f1e:	dc04      	bgt.n	8014f2a <__swbuf_r+0x42>
 8014f20:	4621      	mov	r1, r4
 8014f22:	4628      	mov	r0, r5
 8014f24:	f000 ffe0 	bl	8015ee8 <_fflush_r>
 8014f28:	bb30      	cbnz	r0, 8014f78 <__swbuf_r+0x90>
 8014f2a:	68a3      	ldr	r3, [r4, #8]
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	60a3      	str	r3, [r4, #8]
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	1c5a      	adds	r2, r3, #1
 8014f34:	6022      	str	r2, [r4, #0]
 8014f36:	701e      	strb	r6, [r3, #0]
 8014f38:	6963      	ldr	r3, [r4, #20]
 8014f3a:	3001      	adds	r0, #1
 8014f3c:	4283      	cmp	r3, r0
 8014f3e:	d004      	beq.n	8014f4a <__swbuf_r+0x62>
 8014f40:	89a3      	ldrh	r3, [r4, #12]
 8014f42:	07db      	lsls	r3, r3, #31
 8014f44:	d506      	bpl.n	8014f54 <__swbuf_r+0x6c>
 8014f46:	2e0a      	cmp	r6, #10
 8014f48:	d104      	bne.n	8014f54 <__swbuf_r+0x6c>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f000 ffcb 	bl	8015ee8 <_fflush_r>
 8014f52:	b988      	cbnz	r0, 8014f78 <__swbuf_r+0x90>
 8014f54:	4638      	mov	r0, r7
 8014f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f58:	4b0a      	ldr	r3, [pc, #40]	; (8014f84 <__swbuf_r+0x9c>)
 8014f5a:	429c      	cmp	r4, r3
 8014f5c:	d101      	bne.n	8014f62 <__swbuf_r+0x7a>
 8014f5e:	68ac      	ldr	r4, [r5, #8]
 8014f60:	e7cf      	b.n	8014f02 <__swbuf_r+0x1a>
 8014f62:	4b09      	ldr	r3, [pc, #36]	; (8014f88 <__swbuf_r+0xa0>)
 8014f64:	429c      	cmp	r4, r3
 8014f66:	bf08      	it	eq
 8014f68:	68ec      	ldreq	r4, [r5, #12]
 8014f6a:	e7ca      	b.n	8014f02 <__swbuf_r+0x1a>
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	4628      	mov	r0, r5
 8014f70:	f000 f81e 	bl	8014fb0 <__swsetup_r>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d0cb      	beq.n	8014f10 <__swbuf_r+0x28>
 8014f78:	f04f 37ff 	mov.w	r7, #4294967295
 8014f7c:	e7ea      	b.n	8014f54 <__swbuf_r+0x6c>
 8014f7e:	bf00      	nop
 8014f80:	08058a1c 	.word	0x08058a1c
 8014f84:	08058a3c 	.word	0x08058a3c
 8014f88:	080589fc 	.word	0x080589fc

08014f8c <_write_r>:
 8014f8c:	b538      	push	{r3, r4, r5, lr}
 8014f8e:	4d07      	ldr	r5, [pc, #28]	; (8014fac <_write_r+0x20>)
 8014f90:	4604      	mov	r4, r0
 8014f92:	4608      	mov	r0, r1
 8014f94:	4611      	mov	r1, r2
 8014f96:	2200      	movs	r2, #0
 8014f98:	602a      	str	r2, [r5, #0]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	f7ef fb27 	bl	80045ee <_write>
 8014fa0:	1c43      	adds	r3, r0, #1
 8014fa2:	d102      	bne.n	8014faa <_write_r+0x1e>
 8014fa4:	682b      	ldr	r3, [r5, #0]
 8014fa6:	b103      	cbz	r3, 8014faa <_write_r+0x1e>
 8014fa8:	6023      	str	r3, [r4, #0]
 8014faa:	bd38      	pop	{r3, r4, r5, pc}
 8014fac:	20005e04 	.word	0x20005e04

08014fb0 <__swsetup_r>:
 8014fb0:	4b32      	ldr	r3, [pc, #200]	; (801507c <__swsetup_r+0xcc>)
 8014fb2:	b570      	push	{r4, r5, r6, lr}
 8014fb4:	681d      	ldr	r5, [r3, #0]
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	460c      	mov	r4, r1
 8014fba:	b125      	cbz	r5, 8014fc6 <__swsetup_r+0x16>
 8014fbc:	69ab      	ldr	r3, [r5, #24]
 8014fbe:	b913      	cbnz	r3, 8014fc6 <__swsetup_r+0x16>
 8014fc0:	4628      	mov	r0, r5
 8014fc2:	f001 f825 	bl	8016010 <__sinit>
 8014fc6:	4b2e      	ldr	r3, [pc, #184]	; (8015080 <__swsetup_r+0xd0>)
 8014fc8:	429c      	cmp	r4, r3
 8014fca:	d10f      	bne.n	8014fec <__swsetup_r+0x3c>
 8014fcc:	686c      	ldr	r4, [r5, #4]
 8014fce:	89a3      	ldrh	r3, [r4, #12]
 8014fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014fd4:	0719      	lsls	r1, r3, #28
 8014fd6:	d42c      	bmi.n	8015032 <__swsetup_r+0x82>
 8014fd8:	06dd      	lsls	r5, r3, #27
 8014fda:	d411      	bmi.n	8015000 <__swsetup_r+0x50>
 8014fdc:	2309      	movs	r3, #9
 8014fde:	6033      	str	r3, [r6, #0]
 8014fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014fe4:	81a3      	strh	r3, [r4, #12]
 8014fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8014fea:	e03e      	b.n	801506a <__swsetup_r+0xba>
 8014fec:	4b25      	ldr	r3, [pc, #148]	; (8015084 <__swsetup_r+0xd4>)
 8014fee:	429c      	cmp	r4, r3
 8014ff0:	d101      	bne.n	8014ff6 <__swsetup_r+0x46>
 8014ff2:	68ac      	ldr	r4, [r5, #8]
 8014ff4:	e7eb      	b.n	8014fce <__swsetup_r+0x1e>
 8014ff6:	4b24      	ldr	r3, [pc, #144]	; (8015088 <__swsetup_r+0xd8>)
 8014ff8:	429c      	cmp	r4, r3
 8014ffa:	bf08      	it	eq
 8014ffc:	68ec      	ldreq	r4, [r5, #12]
 8014ffe:	e7e6      	b.n	8014fce <__swsetup_r+0x1e>
 8015000:	0758      	lsls	r0, r3, #29
 8015002:	d512      	bpl.n	801502a <__swsetup_r+0x7a>
 8015004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015006:	b141      	cbz	r1, 801501a <__swsetup_r+0x6a>
 8015008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801500c:	4299      	cmp	r1, r3
 801500e:	d002      	beq.n	8015016 <__swsetup_r+0x66>
 8015010:	4630      	mov	r0, r6
 8015012:	f7fd fe85 	bl	8012d20 <_free_r>
 8015016:	2300      	movs	r3, #0
 8015018:	6363      	str	r3, [r4, #52]	; 0x34
 801501a:	89a3      	ldrh	r3, [r4, #12]
 801501c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015020:	81a3      	strh	r3, [r4, #12]
 8015022:	2300      	movs	r3, #0
 8015024:	6063      	str	r3, [r4, #4]
 8015026:	6923      	ldr	r3, [r4, #16]
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	89a3      	ldrh	r3, [r4, #12]
 801502c:	f043 0308 	orr.w	r3, r3, #8
 8015030:	81a3      	strh	r3, [r4, #12]
 8015032:	6923      	ldr	r3, [r4, #16]
 8015034:	b94b      	cbnz	r3, 801504a <__swsetup_r+0x9a>
 8015036:	89a3      	ldrh	r3, [r4, #12]
 8015038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015040:	d003      	beq.n	801504a <__swsetup_r+0x9a>
 8015042:	4621      	mov	r1, r4
 8015044:	4630      	mov	r0, r6
 8015046:	f001 fc79 	bl	801693c <__smakebuf_r>
 801504a:	89a0      	ldrh	r0, [r4, #12]
 801504c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015050:	f010 0301 	ands.w	r3, r0, #1
 8015054:	d00a      	beq.n	801506c <__swsetup_r+0xbc>
 8015056:	2300      	movs	r3, #0
 8015058:	60a3      	str	r3, [r4, #8]
 801505a:	6963      	ldr	r3, [r4, #20]
 801505c:	425b      	negs	r3, r3
 801505e:	61a3      	str	r3, [r4, #24]
 8015060:	6923      	ldr	r3, [r4, #16]
 8015062:	b943      	cbnz	r3, 8015076 <__swsetup_r+0xc6>
 8015064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015068:	d1ba      	bne.n	8014fe0 <__swsetup_r+0x30>
 801506a:	bd70      	pop	{r4, r5, r6, pc}
 801506c:	0781      	lsls	r1, r0, #30
 801506e:	bf58      	it	pl
 8015070:	6963      	ldrpl	r3, [r4, #20]
 8015072:	60a3      	str	r3, [r4, #8]
 8015074:	e7f4      	b.n	8015060 <__swsetup_r+0xb0>
 8015076:	2000      	movs	r0, #0
 8015078:	e7f7      	b.n	801506a <__swsetup_r+0xba>
 801507a:	bf00      	nop
 801507c:	20000320 	.word	0x20000320
 8015080:	08058a1c 	.word	0x08058a1c
 8015084:	08058a3c 	.word	0x08058a3c
 8015088:	080589fc 	.word	0x080589fc

0801508c <abort>:
 801508c:	b508      	push	{r3, lr}
 801508e:	2006      	movs	r0, #6
 8015090:	f002 fece 	bl	8017e30 <raise>
 8015094:	2001      	movs	r0, #1
 8015096:	f7ef fa83 	bl	80045a0 <_exit>
	...

0801509c <_close_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4d06      	ldr	r5, [pc, #24]	; (80150b8 <_close_r+0x1c>)
 80150a0:	2300      	movs	r3, #0
 80150a2:	4604      	mov	r4, r0
 80150a4:	4608      	mov	r0, r1
 80150a6:	602b      	str	r3, [r5, #0]
 80150a8:	f7ef fabd 	bl	8004626 <_close>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_close_r+0x1a>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_close_r+0x1a>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	20005e04 	.word	0x20005e04

080150bc <div>:
 80150bc:	2900      	cmp	r1, #0
 80150be:	b510      	push	{r4, lr}
 80150c0:	fb91 f4f2 	sdiv	r4, r1, r2
 80150c4:	fb02 1314 	mls	r3, r2, r4, r1
 80150c8:	db06      	blt.n	80150d8 <div+0x1c>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	da01      	bge.n	80150d2 <div+0x16>
 80150ce:	3401      	adds	r4, #1
 80150d0:	1a9b      	subs	r3, r3, r2
 80150d2:	e9c0 4300 	strd	r4, r3, [r0]
 80150d6:	bd10      	pop	{r4, pc}
 80150d8:	2b00      	cmp	r3, #0
 80150da:	bfc4      	itt	gt
 80150dc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80150e0:	189b      	addgt	r3, r3, r2
 80150e2:	e7f6      	b.n	80150d2 <div+0x16>

080150e4 <quorem>:
 80150e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e8:	6903      	ldr	r3, [r0, #16]
 80150ea:	690c      	ldr	r4, [r1, #16]
 80150ec:	42a3      	cmp	r3, r4
 80150ee:	4607      	mov	r7, r0
 80150f0:	f2c0 8081 	blt.w	80151f6 <quorem+0x112>
 80150f4:	3c01      	subs	r4, #1
 80150f6:	f101 0814 	add.w	r8, r1, #20
 80150fa:	f100 0514 	add.w	r5, r0, #20
 80150fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015102:	9301      	str	r3, [sp, #4]
 8015104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801510c:	3301      	adds	r3, #1
 801510e:	429a      	cmp	r2, r3
 8015110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015118:	fbb2 f6f3 	udiv	r6, r2, r3
 801511c:	d331      	bcc.n	8015182 <quorem+0x9e>
 801511e:	f04f 0e00 	mov.w	lr, #0
 8015122:	4640      	mov	r0, r8
 8015124:	46ac      	mov	ip, r5
 8015126:	46f2      	mov	sl, lr
 8015128:	f850 2b04 	ldr.w	r2, [r0], #4
 801512c:	b293      	uxth	r3, r2
 801512e:	fb06 e303 	mla	r3, r6, r3, lr
 8015132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015136:	b29b      	uxth	r3, r3
 8015138:	ebaa 0303 	sub.w	r3, sl, r3
 801513c:	f8dc a000 	ldr.w	sl, [ip]
 8015140:	0c12      	lsrs	r2, r2, #16
 8015142:	fa13 f38a 	uxtah	r3, r3, sl
 8015146:	fb06 e202 	mla	r2, r6, r2, lr
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	9b00      	ldr	r3, [sp, #0]
 801514e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015152:	b292      	uxth	r2, r2
 8015154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801515c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015160:	4581      	cmp	r9, r0
 8015162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015166:	f84c 3b04 	str.w	r3, [ip], #4
 801516a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801516e:	d2db      	bcs.n	8015128 <quorem+0x44>
 8015170:	f855 300b 	ldr.w	r3, [r5, fp]
 8015174:	b92b      	cbnz	r3, 8015182 <quorem+0x9e>
 8015176:	9b01      	ldr	r3, [sp, #4]
 8015178:	3b04      	subs	r3, #4
 801517a:	429d      	cmp	r5, r3
 801517c:	461a      	mov	r2, r3
 801517e:	d32e      	bcc.n	80151de <quorem+0xfa>
 8015180:	613c      	str	r4, [r7, #16]
 8015182:	4638      	mov	r0, r7
 8015184:	f001 ff1e 	bl	8016fc4 <__mcmp>
 8015188:	2800      	cmp	r0, #0
 801518a:	db24      	blt.n	80151d6 <quorem+0xf2>
 801518c:	3601      	adds	r6, #1
 801518e:	4628      	mov	r0, r5
 8015190:	f04f 0c00 	mov.w	ip, #0
 8015194:	f858 2b04 	ldr.w	r2, [r8], #4
 8015198:	f8d0 e000 	ldr.w	lr, [r0]
 801519c:	b293      	uxth	r3, r2
 801519e:	ebac 0303 	sub.w	r3, ip, r3
 80151a2:	0c12      	lsrs	r2, r2, #16
 80151a4:	fa13 f38e 	uxtah	r3, r3, lr
 80151a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151b6:	45c1      	cmp	r9, r8
 80151b8:	f840 3b04 	str.w	r3, [r0], #4
 80151bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151c0:	d2e8      	bcs.n	8015194 <quorem+0xb0>
 80151c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151ca:	b922      	cbnz	r2, 80151d6 <quorem+0xf2>
 80151cc:	3b04      	subs	r3, #4
 80151ce:	429d      	cmp	r5, r3
 80151d0:	461a      	mov	r2, r3
 80151d2:	d30a      	bcc.n	80151ea <quorem+0x106>
 80151d4:	613c      	str	r4, [r7, #16]
 80151d6:	4630      	mov	r0, r6
 80151d8:	b003      	add	sp, #12
 80151da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151de:	6812      	ldr	r2, [r2, #0]
 80151e0:	3b04      	subs	r3, #4
 80151e2:	2a00      	cmp	r2, #0
 80151e4:	d1cc      	bne.n	8015180 <quorem+0x9c>
 80151e6:	3c01      	subs	r4, #1
 80151e8:	e7c7      	b.n	801517a <quorem+0x96>
 80151ea:	6812      	ldr	r2, [r2, #0]
 80151ec:	3b04      	subs	r3, #4
 80151ee:	2a00      	cmp	r2, #0
 80151f0:	d1f0      	bne.n	80151d4 <quorem+0xf0>
 80151f2:	3c01      	subs	r4, #1
 80151f4:	e7eb      	b.n	80151ce <quorem+0xea>
 80151f6:	2000      	movs	r0, #0
 80151f8:	e7ee      	b.n	80151d8 <quorem+0xf4>
 80151fa:	0000      	movs	r0, r0
 80151fc:	0000      	movs	r0, r0
	...

08015200 <_dtoa_r>:
 8015200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015204:	ed2d 8b04 	vpush	{d8-d9}
 8015208:	ec57 6b10 	vmov	r6, r7, d0
 801520c:	b093      	sub	sp, #76	; 0x4c
 801520e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015214:	9106      	str	r1, [sp, #24]
 8015216:	ee10 aa10 	vmov	sl, s0
 801521a:	4604      	mov	r4, r0
 801521c:	9209      	str	r2, [sp, #36]	; 0x24
 801521e:	930c      	str	r3, [sp, #48]	; 0x30
 8015220:	46bb      	mov	fp, r7
 8015222:	b975      	cbnz	r5, 8015242 <_dtoa_r+0x42>
 8015224:	2010      	movs	r0, #16
 8015226:	f7fd fae3 	bl	80127f0 <malloc>
 801522a:	4602      	mov	r2, r0
 801522c:	6260      	str	r0, [r4, #36]	; 0x24
 801522e:	b920      	cbnz	r0, 801523a <_dtoa_r+0x3a>
 8015230:	4ba7      	ldr	r3, [pc, #668]	; (80154d0 <_dtoa_r+0x2d0>)
 8015232:	21ea      	movs	r1, #234	; 0xea
 8015234:	48a7      	ldr	r0, [pc, #668]	; (80154d4 <_dtoa_r+0x2d4>)
 8015236:	f7fd fa79 	bl	801272c <__assert_func>
 801523a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801523e:	6005      	str	r5, [r0, #0]
 8015240:	60c5      	str	r5, [r0, #12]
 8015242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015244:	6819      	ldr	r1, [r3, #0]
 8015246:	b151      	cbz	r1, 801525e <_dtoa_r+0x5e>
 8015248:	685a      	ldr	r2, [r3, #4]
 801524a:	604a      	str	r2, [r1, #4]
 801524c:	2301      	movs	r3, #1
 801524e:	4093      	lsls	r3, r2
 8015250:	608b      	str	r3, [r1, #8]
 8015252:	4620      	mov	r0, r4
 8015254:	f001 fc2a 	bl	8016aac <_Bfree>
 8015258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801525a:	2200      	movs	r2, #0
 801525c:	601a      	str	r2, [r3, #0]
 801525e:	1e3b      	subs	r3, r7, #0
 8015260:	bfaa      	itet	ge
 8015262:	2300      	movge	r3, #0
 8015264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015268:	f8c8 3000 	strge.w	r3, [r8]
 801526c:	4b9a      	ldr	r3, [pc, #616]	; (80154d8 <_dtoa_r+0x2d8>)
 801526e:	bfbc      	itt	lt
 8015270:	2201      	movlt	r2, #1
 8015272:	f8c8 2000 	strlt.w	r2, [r8]
 8015276:	ea33 030b 	bics.w	r3, r3, fp
 801527a:	d11b      	bne.n	80152b4 <_dtoa_r+0xb4>
 801527c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801527e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015282:	6013      	str	r3, [r2, #0]
 8015284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015288:	4333      	orrs	r3, r6
 801528a:	f000 8592 	beq.w	8015db2 <_dtoa_r+0xbb2>
 801528e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015290:	b963      	cbnz	r3, 80152ac <_dtoa_r+0xac>
 8015292:	4b92      	ldr	r3, [pc, #584]	; (80154dc <_dtoa_r+0x2dc>)
 8015294:	e022      	b.n	80152dc <_dtoa_r+0xdc>
 8015296:	4b92      	ldr	r3, [pc, #584]	; (80154e0 <_dtoa_r+0x2e0>)
 8015298:	9301      	str	r3, [sp, #4]
 801529a:	3308      	adds	r3, #8
 801529c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801529e:	6013      	str	r3, [r2, #0]
 80152a0:	9801      	ldr	r0, [sp, #4]
 80152a2:	b013      	add	sp, #76	; 0x4c
 80152a4:	ecbd 8b04 	vpop	{d8-d9}
 80152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ac:	4b8b      	ldr	r3, [pc, #556]	; (80154dc <_dtoa_r+0x2dc>)
 80152ae:	9301      	str	r3, [sp, #4]
 80152b0:	3303      	adds	r3, #3
 80152b2:	e7f3      	b.n	801529c <_dtoa_r+0x9c>
 80152b4:	2200      	movs	r2, #0
 80152b6:	2300      	movs	r3, #0
 80152b8:	4650      	mov	r0, sl
 80152ba:	4659      	mov	r1, fp
 80152bc:	f7eb fc24 	bl	8000b08 <__aeabi_dcmpeq>
 80152c0:	ec4b ab19 	vmov	d9, sl, fp
 80152c4:	4680      	mov	r8, r0
 80152c6:	b158      	cbz	r0, 80152e0 <_dtoa_r+0xe0>
 80152c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152ca:	2301      	movs	r3, #1
 80152cc:	6013      	str	r3, [r2, #0]
 80152ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f000 856b 	beq.w	8015dac <_dtoa_r+0xbac>
 80152d6:	4883      	ldr	r0, [pc, #524]	; (80154e4 <_dtoa_r+0x2e4>)
 80152d8:	6018      	str	r0, [r3, #0]
 80152da:	1e43      	subs	r3, r0, #1
 80152dc:	9301      	str	r3, [sp, #4]
 80152de:	e7df      	b.n	80152a0 <_dtoa_r+0xa0>
 80152e0:	ec4b ab10 	vmov	d0, sl, fp
 80152e4:	aa10      	add	r2, sp, #64	; 0x40
 80152e6:	a911      	add	r1, sp, #68	; 0x44
 80152e8:	4620      	mov	r0, r4
 80152ea:	f001 ff8d 	bl	8017208 <__d2b>
 80152ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80152f2:	ee08 0a10 	vmov	s16, r0
 80152f6:	2d00      	cmp	r5, #0
 80152f8:	f000 8084 	beq.w	8015404 <_dtoa_r+0x204>
 80152fc:	ee19 3a90 	vmov	r3, s19
 8015300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015308:	4656      	mov	r6, sl
 801530a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801530e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015316:	4b74      	ldr	r3, [pc, #464]	; (80154e8 <_dtoa_r+0x2e8>)
 8015318:	2200      	movs	r2, #0
 801531a:	4630      	mov	r0, r6
 801531c:	4639      	mov	r1, r7
 801531e:	f7ea ffd3 	bl	80002c8 <__aeabi_dsub>
 8015322:	a365      	add	r3, pc, #404	; (adr r3, 80154b8 <_dtoa_r+0x2b8>)
 8015324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015328:	f7eb f986 	bl	8000638 <__aeabi_dmul>
 801532c:	a364      	add	r3, pc, #400	; (adr r3, 80154c0 <_dtoa_r+0x2c0>)
 801532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015332:	f7ea ffcb 	bl	80002cc <__adddf3>
 8015336:	4606      	mov	r6, r0
 8015338:	4628      	mov	r0, r5
 801533a:	460f      	mov	r7, r1
 801533c:	f7eb f912 	bl	8000564 <__aeabi_i2d>
 8015340:	a361      	add	r3, pc, #388	; (adr r3, 80154c8 <_dtoa_r+0x2c8>)
 8015342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015346:	f7eb f977 	bl	8000638 <__aeabi_dmul>
 801534a:	4602      	mov	r2, r0
 801534c:	460b      	mov	r3, r1
 801534e:	4630      	mov	r0, r6
 8015350:	4639      	mov	r1, r7
 8015352:	f7ea ffbb 	bl	80002cc <__adddf3>
 8015356:	4606      	mov	r6, r0
 8015358:	460f      	mov	r7, r1
 801535a:	f7eb fc1d 	bl	8000b98 <__aeabi_d2iz>
 801535e:	2200      	movs	r2, #0
 8015360:	9000      	str	r0, [sp, #0]
 8015362:	2300      	movs	r3, #0
 8015364:	4630      	mov	r0, r6
 8015366:	4639      	mov	r1, r7
 8015368:	f7eb fbd8 	bl	8000b1c <__aeabi_dcmplt>
 801536c:	b150      	cbz	r0, 8015384 <_dtoa_r+0x184>
 801536e:	9800      	ldr	r0, [sp, #0]
 8015370:	f7eb f8f8 	bl	8000564 <__aeabi_i2d>
 8015374:	4632      	mov	r2, r6
 8015376:	463b      	mov	r3, r7
 8015378:	f7eb fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 801537c:	b910      	cbnz	r0, 8015384 <_dtoa_r+0x184>
 801537e:	9b00      	ldr	r3, [sp, #0]
 8015380:	3b01      	subs	r3, #1
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	9b00      	ldr	r3, [sp, #0]
 8015386:	2b16      	cmp	r3, #22
 8015388:	d85a      	bhi.n	8015440 <_dtoa_r+0x240>
 801538a:	9a00      	ldr	r2, [sp, #0]
 801538c:	4b57      	ldr	r3, [pc, #348]	; (80154ec <_dtoa_r+0x2ec>)
 801538e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015396:	ec51 0b19 	vmov	r0, r1, d9
 801539a:	f7eb fbbf 	bl	8000b1c <__aeabi_dcmplt>
 801539e:	2800      	cmp	r0, #0
 80153a0:	d050      	beq.n	8015444 <_dtoa_r+0x244>
 80153a2:	9b00      	ldr	r3, [sp, #0]
 80153a4:	3b01      	subs	r3, #1
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	2300      	movs	r3, #0
 80153aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80153ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153ae:	1b5d      	subs	r5, r3, r5
 80153b0:	1e6b      	subs	r3, r5, #1
 80153b2:	9305      	str	r3, [sp, #20]
 80153b4:	bf45      	ittet	mi
 80153b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80153ba:	9304      	strmi	r3, [sp, #16]
 80153bc:	2300      	movpl	r3, #0
 80153be:	2300      	movmi	r3, #0
 80153c0:	bf4c      	ite	mi
 80153c2:	9305      	strmi	r3, [sp, #20]
 80153c4:	9304      	strpl	r3, [sp, #16]
 80153c6:	9b00      	ldr	r3, [sp, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	db3d      	blt.n	8015448 <_dtoa_r+0x248>
 80153cc:	9b05      	ldr	r3, [sp, #20]
 80153ce:	9a00      	ldr	r2, [sp, #0]
 80153d0:	920a      	str	r2, [sp, #40]	; 0x28
 80153d2:	4413      	add	r3, r2
 80153d4:	9305      	str	r3, [sp, #20]
 80153d6:	2300      	movs	r3, #0
 80153d8:	9307      	str	r3, [sp, #28]
 80153da:	9b06      	ldr	r3, [sp, #24]
 80153dc:	2b09      	cmp	r3, #9
 80153de:	f200 8089 	bhi.w	80154f4 <_dtoa_r+0x2f4>
 80153e2:	2b05      	cmp	r3, #5
 80153e4:	bfc4      	itt	gt
 80153e6:	3b04      	subgt	r3, #4
 80153e8:	9306      	strgt	r3, [sp, #24]
 80153ea:	9b06      	ldr	r3, [sp, #24]
 80153ec:	f1a3 0302 	sub.w	r3, r3, #2
 80153f0:	bfcc      	ite	gt
 80153f2:	2500      	movgt	r5, #0
 80153f4:	2501      	movle	r5, #1
 80153f6:	2b03      	cmp	r3, #3
 80153f8:	f200 8087 	bhi.w	801550a <_dtoa_r+0x30a>
 80153fc:	e8df f003 	tbb	[pc, r3]
 8015400:	59383a2d 	.word	0x59383a2d
 8015404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015408:	441d      	add	r5, r3
 801540a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801540e:	2b20      	cmp	r3, #32
 8015410:	bfc1      	itttt	gt
 8015412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801541a:	fa0b f303 	lslgt.w	r3, fp, r3
 801541e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015422:	bfda      	itte	le
 8015424:	f1c3 0320 	rsble	r3, r3, #32
 8015428:	fa06 f003 	lslle.w	r0, r6, r3
 801542c:	4318      	orrgt	r0, r3
 801542e:	f7eb f889 	bl	8000544 <__aeabi_ui2d>
 8015432:	2301      	movs	r3, #1
 8015434:	4606      	mov	r6, r0
 8015436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801543a:	3d01      	subs	r5, #1
 801543c:	930e      	str	r3, [sp, #56]	; 0x38
 801543e:	e76a      	b.n	8015316 <_dtoa_r+0x116>
 8015440:	2301      	movs	r3, #1
 8015442:	e7b2      	b.n	80153aa <_dtoa_r+0x1aa>
 8015444:	900b      	str	r0, [sp, #44]	; 0x2c
 8015446:	e7b1      	b.n	80153ac <_dtoa_r+0x1ac>
 8015448:	9b04      	ldr	r3, [sp, #16]
 801544a:	9a00      	ldr	r2, [sp, #0]
 801544c:	1a9b      	subs	r3, r3, r2
 801544e:	9304      	str	r3, [sp, #16]
 8015450:	4253      	negs	r3, r2
 8015452:	9307      	str	r3, [sp, #28]
 8015454:	2300      	movs	r3, #0
 8015456:	930a      	str	r3, [sp, #40]	; 0x28
 8015458:	e7bf      	b.n	80153da <_dtoa_r+0x1da>
 801545a:	2300      	movs	r3, #0
 801545c:	9308      	str	r3, [sp, #32]
 801545e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015460:	2b00      	cmp	r3, #0
 8015462:	dc55      	bgt.n	8015510 <_dtoa_r+0x310>
 8015464:	2301      	movs	r3, #1
 8015466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801546a:	461a      	mov	r2, r3
 801546c:	9209      	str	r2, [sp, #36]	; 0x24
 801546e:	e00c      	b.n	801548a <_dtoa_r+0x28a>
 8015470:	2301      	movs	r3, #1
 8015472:	e7f3      	b.n	801545c <_dtoa_r+0x25c>
 8015474:	2300      	movs	r3, #0
 8015476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015478:	9308      	str	r3, [sp, #32]
 801547a:	9b00      	ldr	r3, [sp, #0]
 801547c:	4413      	add	r3, r2
 801547e:	9302      	str	r3, [sp, #8]
 8015480:	3301      	adds	r3, #1
 8015482:	2b01      	cmp	r3, #1
 8015484:	9303      	str	r3, [sp, #12]
 8015486:	bfb8      	it	lt
 8015488:	2301      	movlt	r3, #1
 801548a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801548c:	2200      	movs	r2, #0
 801548e:	6042      	str	r2, [r0, #4]
 8015490:	2204      	movs	r2, #4
 8015492:	f102 0614 	add.w	r6, r2, #20
 8015496:	429e      	cmp	r6, r3
 8015498:	6841      	ldr	r1, [r0, #4]
 801549a:	d93d      	bls.n	8015518 <_dtoa_r+0x318>
 801549c:	4620      	mov	r0, r4
 801549e:	f001 fac5 	bl	8016a2c <_Balloc>
 80154a2:	9001      	str	r0, [sp, #4]
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d13b      	bne.n	8015520 <_dtoa_r+0x320>
 80154a8:	4b11      	ldr	r3, [pc, #68]	; (80154f0 <_dtoa_r+0x2f0>)
 80154aa:	4602      	mov	r2, r0
 80154ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80154b0:	e6c0      	b.n	8015234 <_dtoa_r+0x34>
 80154b2:	2301      	movs	r3, #1
 80154b4:	e7df      	b.n	8015476 <_dtoa_r+0x276>
 80154b6:	bf00      	nop
 80154b8:	636f4361 	.word	0x636f4361
 80154bc:	3fd287a7 	.word	0x3fd287a7
 80154c0:	8b60c8b3 	.word	0x8b60c8b3
 80154c4:	3fc68a28 	.word	0x3fc68a28
 80154c8:	509f79fb 	.word	0x509f79fb
 80154cc:	3fd34413 	.word	0x3fd34413
 80154d0:	080585e8 	.word	0x080585e8
 80154d4:	0805898f 	.word	0x0805898f
 80154d8:	7ff00000 	.word	0x7ff00000
 80154dc:	0805898b 	.word	0x0805898b
 80154e0:	08058982 	.word	0x08058982
 80154e4:	08058c99 	.word	0x08058c99
 80154e8:	3ff80000 	.word	0x3ff80000
 80154ec:	08058bc0 	.word	0x08058bc0
 80154f0:	080589ea 	.word	0x080589ea
 80154f4:	2501      	movs	r5, #1
 80154f6:	2300      	movs	r3, #0
 80154f8:	9306      	str	r3, [sp, #24]
 80154fa:	9508      	str	r5, [sp, #32]
 80154fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015504:	2200      	movs	r2, #0
 8015506:	2312      	movs	r3, #18
 8015508:	e7b0      	b.n	801546c <_dtoa_r+0x26c>
 801550a:	2301      	movs	r3, #1
 801550c:	9308      	str	r3, [sp, #32]
 801550e:	e7f5      	b.n	80154fc <_dtoa_r+0x2fc>
 8015510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015516:	e7b8      	b.n	801548a <_dtoa_r+0x28a>
 8015518:	3101      	adds	r1, #1
 801551a:	6041      	str	r1, [r0, #4]
 801551c:	0052      	lsls	r2, r2, #1
 801551e:	e7b8      	b.n	8015492 <_dtoa_r+0x292>
 8015520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015522:	9a01      	ldr	r2, [sp, #4]
 8015524:	601a      	str	r2, [r3, #0]
 8015526:	9b03      	ldr	r3, [sp, #12]
 8015528:	2b0e      	cmp	r3, #14
 801552a:	f200 809d 	bhi.w	8015668 <_dtoa_r+0x468>
 801552e:	2d00      	cmp	r5, #0
 8015530:	f000 809a 	beq.w	8015668 <_dtoa_r+0x468>
 8015534:	9b00      	ldr	r3, [sp, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	dd32      	ble.n	80155a0 <_dtoa_r+0x3a0>
 801553a:	4ab7      	ldr	r2, [pc, #732]	; (8015818 <_dtoa_r+0x618>)
 801553c:	f003 030f 	and.w	r3, r3, #15
 8015540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015548:	9b00      	ldr	r3, [sp, #0]
 801554a:	05d8      	lsls	r0, r3, #23
 801554c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015550:	d516      	bpl.n	8015580 <_dtoa_r+0x380>
 8015552:	4bb2      	ldr	r3, [pc, #712]	; (801581c <_dtoa_r+0x61c>)
 8015554:	ec51 0b19 	vmov	r0, r1, d9
 8015558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801555c:	f7eb f996 	bl	800088c <__aeabi_ddiv>
 8015560:	f007 070f 	and.w	r7, r7, #15
 8015564:	4682      	mov	sl, r0
 8015566:	468b      	mov	fp, r1
 8015568:	2503      	movs	r5, #3
 801556a:	4eac      	ldr	r6, [pc, #688]	; (801581c <_dtoa_r+0x61c>)
 801556c:	b957      	cbnz	r7, 8015584 <_dtoa_r+0x384>
 801556e:	4642      	mov	r2, r8
 8015570:	464b      	mov	r3, r9
 8015572:	4650      	mov	r0, sl
 8015574:	4659      	mov	r1, fp
 8015576:	f7eb f989 	bl	800088c <__aeabi_ddiv>
 801557a:	4682      	mov	sl, r0
 801557c:	468b      	mov	fp, r1
 801557e:	e028      	b.n	80155d2 <_dtoa_r+0x3d2>
 8015580:	2502      	movs	r5, #2
 8015582:	e7f2      	b.n	801556a <_dtoa_r+0x36a>
 8015584:	07f9      	lsls	r1, r7, #31
 8015586:	d508      	bpl.n	801559a <_dtoa_r+0x39a>
 8015588:	4640      	mov	r0, r8
 801558a:	4649      	mov	r1, r9
 801558c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015590:	f7eb f852 	bl	8000638 <__aeabi_dmul>
 8015594:	3501      	adds	r5, #1
 8015596:	4680      	mov	r8, r0
 8015598:	4689      	mov	r9, r1
 801559a:	107f      	asrs	r7, r7, #1
 801559c:	3608      	adds	r6, #8
 801559e:	e7e5      	b.n	801556c <_dtoa_r+0x36c>
 80155a0:	f000 809b 	beq.w	80156da <_dtoa_r+0x4da>
 80155a4:	9b00      	ldr	r3, [sp, #0]
 80155a6:	4f9d      	ldr	r7, [pc, #628]	; (801581c <_dtoa_r+0x61c>)
 80155a8:	425e      	negs	r6, r3
 80155aa:	4b9b      	ldr	r3, [pc, #620]	; (8015818 <_dtoa_r+0x618>)
 80155ac:	f006 020f 	and.w	r2, r6, #15
 80155b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b8:	ec51 0b19 	vmov	r0, r1, d9
 80155bc:	f7eb f83c 	bl	8000638 <__aeabi_dmul>
 80155c0:	1136      	asrs	r6, r6, #4
 80155c2:	4682      	mov	sl, r0
 80155c4:	468b      	mov	fp, r1
 80155c6:	2300      	movs	r3, #0
 80155c8:	2502      	movs	r5, #2
 80155ca:	2e00      	cmp	r6, #0
 80155cc:	d17a      	bne.n	80156c4 <_dtoa_r+0x4c4>
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d1d3      	bne.n	801557a <_dtoa_r+0x37a>
 80155d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	f000 8082 	beq.w	80156de <_dtoa_r+0x4de>
 80155da:	4b91      	ldr	r3, [pc, #580]	; (8015820 <_dtoa_r+0x620>)
 80155dc:	2200      	movs	r2, #0
 80155de:	4650      	mov	r0, sl
 80155e0:	4659      	mov	r1, fp
 80155e2:	f7eb fa9b 	bl	8000b1c <__aeabi_dcmplt>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d079      	beq.n	80156de <_dtoa_r+0x4de>
 80155ea:	9b03      	ldr	r3, [sp, #12]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d076      	beq.n	80156de <_dtoa_r+0x4de>
 80155f0:	9b02      	ldr	r3, [sp, #8]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dd36      	ble.n	8015664 <_dtoa_r+0x464>
 80155f6:	9b00      	ldr	r3, [sp, #0]
 80155f8:	4650      	mov	r0, sl
 80155fa:	4659      	mov	r1, fp
 80155fc:	1e5f      	subs	r7, r3, #1
 80155fe:	2200      	movs	r2, #0
 8015600:	4b88      	ldr	r3, [pc, #544]	; (8015824 <_dtoa_r+0x624>)
 8015602:	f7eb f819 	bl	8000638 <__aeabi_dmul>
 8015606:	9e02      	ldr	r6, [sp, #8]
 8015608:	4682      	mov	sl, r0
 801560a:	468b      	mov	fp, r1
 801560c:	3501      	adds	r5, #1
 801560e:	4628      	mov	r0, r5
 8015610:	f7ea ffa8 	bl	8000564 <__aeabi_i2d>
 8015614:	4652      	mov	r2, sl
 8015616:	465b      	mov	r3, fp
 8015618:	f7eb f80e 	bl	8000638 <__aeabi_dmul>
 801561c:	4b82      	ldr	r3, [pc, #520]	; (8015828 <_dtoa_r+0x628>)
 801561e:	2200      	movs	r2, #0
 8015620:	f7ea fe54 	bl	80002cc <__adddf3>
 8015624:	46d0      	mov	r8, sl
 8015626:	46d9      	mov	r9, fp
 8015628:	4682      	mov	sl, r0
 801562a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801562e:	2e00      	cmp	r6, #0
 8015630:	d158      	bne.n	80156e4 <_dtoa_r+0x4e4>
 8015632:	4b7e      	ldr	r3, [pc, #504]	; (801582c <_dtoa_r+0x62c>)
 8015634:	2200      	movs	r2, #0
 8015636:	4640      	mov	r0, r8
 8015638:	4649      	mov	r1, r9
 801563a:	f7ea fe45 	bl	80002c8 <__aeabi_dsub>
 801563e:	4652      	mov	r2, sl
 8015640:	465b      	mov	r3, fp
 8015642:	4680      	mov	r8, r0
 8015644:	4689      	mov	r9, r1
 8015646:	f7eb fa87 	bl	8000b58 <__aeabi_dcmpgt>
 801564a:	2800      	cmp	r0, #0
 801564c:	f040 8295 	bne.w	8015b7a <_dtoa_r+0x97a>
 8015650:	4652      	mov	r2, sl
 8015652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015656:	4640      	mov	r0, r8
 8015658:	4649      	mov	r1, r9
 801565a:	f7eb fa5f 	bl	8000b1c <__aeabi_dcmplt>
 801565e:	2800      	cmp	r0, #0
 8015660:	f040 8289 	bne.w	8015b76 <_dtoa_r+0x976>
 8015664:	ec5b ab19 	vmov	sl, fp, d9
 8015668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801566a:	2b00      	cmp	r3, #0
 801566c:	f2c0 8148 	blt.w	8015900 <_dtoa_r+0x700>
 8015670:	9a00      	ldr	r2, [sp, #0]
 8015672:	2a0e      	cmp	r2, #14
 8015674:	f300 8144 	bgt.w	8015900 <_dtoa_r+0x700>
 8015678:	4b67      	ldr	r3, [pc, #412]	; (8015818 <_dtoa_r+0x618>)
 801567a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801567e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015684:	2b00      	cmp	r3, #0
 8015686:	f280 80d5 	bge.w	8015834 <_dtoa_r+0x634>
 801568a:	9b03      	ldr	r3, [sp, #12]
 801568c:	2b00      	cmp	r3, #0
 801568e:	f300 80d1 	bgt.w	8015834 <_dtoa_r+0x634>
 8015692:	f040 826f 	bne.w	8015b74 <_dtoa_r+0x974>
 8015696:	4b65      	ldr	r3, [pc, #404]	; (801582c <_dtoa_r+0x62c>)
 8015698:	2200      	movs	r2, #0
 801569a:	4640      	mov	r0, r8
 801569c:	4649      	mov	r1, r9
 801569e:	f7ea ffcb 	bl	8000638 <__aeabi_dmul>
 80156a2:	4652      	mov	r2, sl
 80156a4:	465b      	mov	r3, fp
 80156a6:	f7eb fa4d 	bl	8000b44 <__aeabi_dcmpge>
 80156aa:	9e03      	ldr	r6, [sp, #12]
 80156ac:	4637      	mov	r7, r6
 80156ae:	2800      	cmp	r0, #0
 80156b0:	f040 8245 	bne.w	8015b3e <_dtoa_r+0x93e>
 80156b4:	9d01      	ldr	r5, [sp, #4]
 80156b6:	2331      	movs	r3, #49	; 0x31
 80156b8:	f805 3b01 	strb.w	r3, [r5], #1
 80156bc:	9b00      	ldr	r3, [sp, #0]
 80156be:	3301      	adds	r3, #1
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	e240      	b.n	8015b46 <_dtoa_r+0x946>
 80156c4:	07f2      	lsls	r2, r6, #31
 80156c6:	d505      	bpl.n	80156d4 <_dtoa_r+0x4d4>
 80156c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156cc:	f7ea ffb4 	bl	8000638 <__aeabi_dmul>
 80156d0:	3501      	adds	r5, #1
 80156d2:	2301      	movs	r3, #1
 80156d4:	1076      	asrs	r6, r6, #1
 80156d6:	3708      	adds	r7, #8
 80156d8:	e777      	b.n	80155ca <_dtoa_r+0x3ca>
 80156da:	2502      	movs	r5, #2
 80156dc:	e779      	b.n	80155d2 <_dtoa_r+0x3d2>
 80156de:	9f00      	ldr	r7, [sp, #0]
 80156e0:	9e03      	ldr	r6, [sp, #12]
 80156e2:	e794      	b.n	801560e <_dtoa_r+0x40e>
 80156e4:	9901      	ldr	r1, [sp, #4]
 80156e6:	4b4c      	ldr	r3, [pc, #304]	; (8015818 <_dtoa_r+0x618>)
 80156e8:	4431      	add	r1, r6
 80156ea:	910d      	str	r1, [sp, #52]	; 0x34
 80156ec:	9908      	ldr	r1, [sp, #32]
 80156ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80156f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156f6:	2900      	cmp	r1, #0
 80156f8:	d043      	beq.n	8015782 <_dtoa_r+0x582>
 80156fa:	494d      	ldr	r1, [pc, #308]	; (8015830 <_dtoa_r+0x630>)
 80156fc:	2000      	movs	r0, #0
 80156fe:	f7eb f8c5 	bl	800088c <__aeabi_ddiv>
 8015702:	4652      	mov	r2, sl
 8015704:	465b      	mov	r3, fp
 8015706:	f7ea fddf 	bl	80002c8 <__aeabi_dsub>
 801570a:	9d01      	ldr	r5, [sp, #4]
 801570c:	4682      	mov	sl, r0
 801570e:	468b      	mov	fp, r1
 8015710:	4649      	mov	r1, r9
 8015712:	4640      	mov	r0, r8
 8015714:	f7eb fa40 	bl	8000b98 <__aeabi_d2iz>
 8015718:	4606      	mov	r6, r0
 801571a:	f7ea ff23 	bl	8000564 <__aeabi_i2d>
 801571e:	4602      	mov	r2, r0
 8015720:	460b      	mov	r3, r1
 8015722:	4640      	mov	r0, r8
 8015724:	4649      	mov	r1, r9
 8015726:	f7ea fdcf 	bl	80002c8 <__aeabi_dsub>
 801572a:	3630      	adds	r6, #48	; 0x30
 801572c:	f805 6b01 	strb.w	r6, [r5], #1
 8015730:	4652      	mov	r2, sl
 8015732:	465b      	mov	r3, fp
 8015734:	4680      	mov	r8, r0
 8015736:	4689      	mov	r9, r1
 8015738:	f7eb f9f0 	bl	8000b1c <__aeabi_dcmplt>
 801573c:	2800      	cmp	r0, #0
 801573e:	d163      	bne.n	8015808 <_dtoa_r+0x608>
 8015740:	4642      	mov	r2, r8
 8015742:	464b      	mov	r3, r9
 8015744:	4936      	ldr	r1, [pc, #216]	; (8015820 <_dtoa_r+0x620>)
 8015746:	2000      	movs	r0, #0
 8015748:	f7ea fdbe 	bl	80002c8 <__aeabi_dsub>
 801574c:	4652      	mov	r2, sl
 801574e:	465b      	mov	r3, fp
 8015750:	f7eb f9e4 	bl	8000b1c <__aeabi_dcmplt>
 8015754:	2800      	cmp	r0, #0
 8015756:	f040 80b5 	bne.w	80158c4 <_dtoa_r+0x6c4>
 801575a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801575c:	429d      	cmp	r5, r3
 801575e:	d081      	beq.n	8015664 <_dtoa_r+0x464>
 8015760:	4b30      	ldr	r3, [pc, #192]	; (8015824 <_dtoa_r+0x624>)
 8015762:	2200      	movs	r2, #0
 8015764:	4650      	mov	r0, sl
 8015766:	4659      	mov	r1, fp
 8015768:	f7ea ff66 	bl	8000638 <__aeabi_dmul>
 801576c:	4b2d      	ldr	r3, [pc, #180]	; (8015824 <_dtoa_r+0x624>)
 801576e:	4682      	mov	sl, r0
 8015770:	468b      	mov	fp, r1
 8015772:	4640      	mov	r0, r8
 8015774:	4649      	mov	r1, r9
 8015776:	2200      	movs	r2, #0
 8015778:	f7ea ff5e 	bl	8000638 <__aeabi_dmul>
 801577c:	4680      	mov	r8, r0
 801577e:	4689      	mov	r9, r1
 8015780:	e7c6      	b.n	8015710 <_dtoa_r+0x510>
 8015782:	4650      	mov	r0, sl
 8015784:	4659      	mov	r1, fp
 8015786:	f7ea ff57 	bl	8000638 <__aeabi_dmul>
 801578a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801578c:	9d01      	ldr	r5, [sp, #4]
 801578e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015790:	4682      	mov	sl, r0
 8015792:	468b      	mov	fp, r1
 8015794:	4649      	mov	r1, r9
 8015796:	4640      	mov	r0, r8
 8015798:	f7eb f9fe 	bl	8000b98 <__aeabi_d2iz>
 801579c:	4606      	mov	r6, r0
 801579e:	f7ea fee1 	bl	8000564 <__aeabi_i2d>
 80157a2:	3630      	adds	r6, #48	; 0x30
 80157a4:	4602      	mov	r2, r0
 80157a6:	460b      	mov	r3, r1
 80157a8:	4640      	mov	r0, r8
 80157aa:	4649      	mov	r1, r9
 80157ac:	f7ea fd8c 	bl	80002c8 <__aeabi_dsub>
 80157b0:	f805 6b01 	strb.w	r6, [r5], #1
 80157b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b6:	429d      	cmp	r5, r3
 80157b8:	4680      	mov	r8, r0
 80157ba:	4689      	mov	r9, r1
 80157bc:	f04f 0200 	mov.w	r2, #0
 80157c0:	d124      	bne.n	801580c <_dtoa_r+0x60c>
 80157c2:	4b1b      	ldr	r3, [pc, #108]	; (8015830 <_dtoa_r+0x630>)
 80157c4:	4650      	mov	r0, sl
 80157c6:	4659      	mov	r1, fp
 80157c8:	f7ea fd80 	bl	80002cc <__adddf3>
 80157cc:	4602      	mov	r2, r0
 80157ce:	460b      	mov	r3, r1
 80157d0:	4640      	mov	r0, r8
 80157d2:	4649      	mov	r1, r9
 80157d4:	f7eb f9c0 	bl	8000b58 <__aeabi_dcmpgt>
 80157d8:	2800      	cmp	r0, #0
 80157da:	d173      	bne.n	80158c4 <_dtoa_r+0x6c4>
 80157dc:	4652      	mov	r2, sl
 80157de:	465b      	mov	r3, fp
 80157e0:	4913      	ldr	r1, [pc, #76]	; (8015830 <_dtoa_r+0x630>)
 80157e2:	2000      	movs	r0, #0
 80157e4:	f7ea fd70 	bl	80002c8 <__aeabi_dsub>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4640      	mov	r0, r8
 80157ee:	4649      	mov	r1, r9
 80157f0:	f7eb f994 	bl	8000b1c <__aeabi_dcmplt>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	f43f af35 	beq.w	8015664 <_dtoa_r+0x464>
 80157fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80157fc:	1e6b      	subs	r3, r5, #1
 80157fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8015800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015804:	2b30      	cmp	r3, #48	; 0x30
 8015806:	d0f8      	beq.n	80157fa <_dtoa_r+0x5fa>
 8015808:	9700      	str	r7, [sp, #0]
 801580a:	e049      	b.n	80158a0 <_dtoa_r+0x6a0>
 801580c:	4b05      	ldr	r3, [pc, #20]	; (8015824 <_dtoa_r+0x624>)
 801580e:	f7ea ff13 	bl	8000638 <__aeabi_dmul>
 8015812:	4680      	mov	r8, r0
 8015814:	4689      	mov	r9, r1
 8015816:	e7bd      	b.n	8015794 <_dtoa_r+0x594>
 8015818:	08058bc0 	.word	0x08058bc0
 801581c:	08058b98 	.word	0x08058b98
 8015820:	3ff00000 	.word	0x3ff00000
 8015824:	40240000 	.word	0x40240000
 8015828:	401c0000 	.word	0x401c0000
 801582c:	40140000 	.word	0x40140000
 8015830:	3fe00000 	.word	0x3fe00000
 8015834:	9d01      	ldr	r5, [sp, #4]
 8015836:	4656      	mov	r6, sl
 8015838:	465f      	mov	r7, fp
 801583a:	4642      	mov	r2, r8
 801583c:	464b      	mov	r3, r9
 801583e:	4630      	mov	r0, r6
 8015840:	4639      	mov	r1, r7
 8015842:	f7eb f823 	bl	800088c <__aeabi_ddiv>
 8015846:	f7eb f9a7 	bl	8000b98 <__aeabi_d2iz>
 801584a:	4682      	mov	sl, r0
 801584c:	f7ea fe8a 	bl	8000564 <__aeabi_i2d>
 8015850:	4642      	mov	r2, r8
 8015852:	464b      	mov	r3, r9
 8015854:	f7ea fef0 	bl	8000638 <__aeabi_dmul>
 8015858:	4602      	mov	r2, r0
 801585a:	460b      	mov	r3, r1
 801585c:	4630      	mov	r0, r6
 801585e:	4639      	mov	r1, r7
 8015860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015864:	f7ea fd30 	bl	80002c8 <__aeabi_dsub>
 8015868:	f805 6b01 	strb.w	r6, [r5], #1
 801586c:	9e01      	ldr	r6, [sp, #4]
 801586e:	9f03      	ldr	r7, [sp, #12]
 8015870:	1bae      	subs	r6, r5, r6
 8015872:	42b7      	cmp	r7, r6
 8015874:	4602      	mov	r2, r0
 8015876:	460b      	mov	r3, r1
 8015878:	d135      	bne.n	80158e6 <_dtoa_r+0x6e6>
 801587a:	f7ea fd27 	bl	80002cc <__adddf3>
 801587e:	4642      	mov	r2, r8
 8015880:	464b      	mov	r3, r9
 8015882:	4606      	mov	r6, r0
 8015884:	460f      	mov	r7, r1
 8015886:	f7eb f967 	bl	8000b58 <__aeabi_dcmpgt>
 801588a:	b9d0      	cbnz	r0, 80158c2 <_dtoa_r+0x6c2>
 801588c:	4642      	mov	r2, r8
 801588e:	464b      	mov	r3, r9
 8015890:	4630      	mov	r0, r6
 8015892:	4639      	mov	r1, r7
 8015894:	f7eb f938 	bl	8000b08 <__aeabi_dcmpeq>
 8015898:	b110      	cbz	r0, 80158a0 <_dtoa_r+0x6a0>
 801589a:	f01a 0f01 	tst.w	sl, #1
 801589e:	d110      	bne.n	80158c2 <_dtoa_r+0x6c2>
 80158a0:	4620      	mov	r0, r4
 80158a2:	ee18 1a10 	vmov	r1, s16
 80158a6:	f001 f901 	bl	8016aac <_Bfree>
 80158aa:	2300      	movs	r3, #0
 80158ac:	9800      	ldr	r0, [sp, #0]
 80158ae:	702b      	strb	r3, [r5, #0]
 80158b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158b2:	3001      	adds	r0, #1
 80158b4:	6018      	str	r0, [r3, #0]
 80158b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	f43f acf1 	beq.w	80152a0 <_dtoa_r+0xa0>
 80158be:	601d      	str	r5, [r3, #0]
 80158c0:	e4ee      	b.n	80152a0 <_dtoa_r+0xa0>
 80158c2:	9f00      	ldr	r7, [sp, #0]
 80158c4:	462b      	mov	r3, r5
 80158c6:	461d      	mov	r5, r3
 80158c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158cc:	2a39      	cmp	r2, #57	; 0x39
 80158ce:	d106      	bne.n	80158de <_dtoa_r+0x6de>
 80158d0:	9a01      	ldr	r2, [sp, #4]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d1f7      	bne.n	80158c6 <_dtoa_r+0x6c6>
 80158d6:	9901      	ldr	r1, [sp, #4]
 80158d8:	2230      	movs	r2, #48	; 0x30
 80158da:	3701      	adds	r7, #1
 80158dc:	700a      	strb	r2, [r1, #0]
 80158de:	781a      	ldrb	r2, [r3, #0]
 80158e0:	3201      	adds	r2, #1
 80158e2:	701a      	strb	r2, [r3, #0]
 80158e4:	e790      	b.n	8015808 <_dtoa_r+0x608>
 80158e6:	4ba6      	ldr	r3, [pc, #664]	; (8015b80 <_dtoa_r+0x980>)
 80158e8:	2200      	movs	r2, #0
 80158ea:	f7ea fea5 	bl	8000638 <__aeabi_dmul>
 80158ee:	2200      	movs	r2, #0
 80158f0:	2300      	movs	r3, #0
 80158f2:	4606      	mov	r6, r0
 80158f4:	460f      	mov	r7, r1
 80158f6:	f7eb f907 	bl	8000b08 <__aeabi_dcmpeq>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d09d      	beq.n	801583a <_dtoa_r+0x63a>
 80158fe:	e7cf      	b.n	80158a0 <_dtoa_r+0x6a0>
 8015900:	9a08      	ldr	r2, [sp, #32]
 8015902:	2a00      	cmp	r2, #0
 8015904:	f000 80d7 	beq.w	8015ab6 <_dtoa_r+0x8b6>
 8015908:	9a06      	ldr	r2, [sp, #24]
 801590a:	2a01      	cmp	r2, #1
 801590c:	f300 80ba 	bgt.w	8015a84 <_dtoa_r+0x884>
 8015910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015912:	2a00      	cmp	r2, #0
 8015914:	f000 80b2 	beq.w	8015a7c <_dtoa_r+0x87c>
 8015918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801591c:	9e07      	ldr	r6, [sp, #28]
 801591e:	9d04      	ldr	r5, [sp, #16]
 8015920:	9a04      	ldr	r2, [sp, #16]
 8015922:	441a      	add	r2, r3
 8015924:	9204      	str	r2, [sp, #16]
 8015926:	9a05      	ldr	r2, [sp, #20]
 8015928:	2101      	movs	r1, #1
 801592a:	441a      	add	r2, r3
 801592c:	4620      	mov	r0, r4
 801592e:	9205      	str	r2, [sp, #20]
 8015930:	f001 f9be 	bl	8016cb0 <__i2b>
 8015934:	4607      	mov	r7, r0
 8015936:	2d00      	cmp	r5, #0
 8015938:	dd0c      	ble.n	8015954 <_dtoa_r+0x754>
 801593a:	9b05      	ldr	r3, [sp, #20]
 801593c:	2b00      	cmp	r3, #0
 801593e:	dd09      	ble.n	8015954 <_dtoa_r+0x754>
 8015940:	42ab      	cmp	r3, r5
 8015942:	9a04      	ldr	r2, [sp, #16]
 8015944:	bfa8      	it	ge
 8015946:	462b      	movge	r3, r5
 8015948:	1ad2      	subs	r2, r2, r3
 801594a:	9204      	str	r2, [sp, #16]
 801594c:	9a05      	ldr	r2, [sp, #20]
 801594e:	1aed      	subs	r5, r5, r3
 8015950:	1ad3      	subs	r3, r2, r3
 8015952:	9305      	str	r3, [sp, #20]
 8015954:	9b07      	ldr	r3, [sp, #28]
 8015956:	b31b      	cbz	r3, 80159a0 <_dtoa_r+0x7a0>
 8015958:	9b08      	ldr	r3, [sp, #32]
 801595a:	2b00      	cmp	r3, #0
 801595c:	f000 80af 	beq.w	8015abe <_dtoa_r+0x8be>
 8015960:	2e00      	cmp	r6, #0
 8015962:	dd13      	ble.n	801598c <_dtoa_r+0x78c>
 8015964:	4639      	mov	r1, r7
 8015966:	4632      	mov	r2, r6
 8015968:	4620      	mov	r0, r4
 801596a:	f001 fa61 	bl	8016e30 <__pow5mult>
 801596e:	ee18 2a10 	vmov	r2, s16
 8015972:	4601      	mov	r1, r0
 8015974:	4607      	mov	r7, r0
 8015976:	4620      	mov	r0, r4
 8015978:	f001 f9b0 	bl	8016cdc <__multiply>
 801597c:	ee18 1a10 	vmov	r1, s16
 8015980:	4680      	mov	r8, r0
 8015982:	4620      	mov	r0, r4
 8015984:	f001 f892 	bl	8016aac <_Bfree>
 8015988:	ee08 8a10 	vmov	s16, r8
 801598c:	9b07      	ldr	r3, [sp, #28]
 801598e:	1b9a      	subs	r2, r3, r6
 8015990:	d006      	beq.n	80159a0 <_dtoa_r+0x7a0>
 8015992:	ee18 1a10 	vmov	r1, s16
 8015996:	4620      	mov	r0, r4
 8015998:	f001 fa4a 	bl	8016e30 <__pow5mult>
 801599c:	ee08 0a10 	vmov	s16, r0
 80159a0:	2101      	movs	r1, #1
 80159a2:	4620      	mov	r0, r4
 80159a4:	f001 f984 	bl	8016cb0 <__i2b>
 80159a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	4606      	mov	r6, r0
 80159ae:	f340 8088 	ble.w	8015ac2 <_dtoa_r+0x8c2>
 80159b2:	461a      	mov	r2, r3
 80159b4:	4601      	mov	r1, r0
 80159b6:	4620      	mov	r0, r4
 80159b8:	f001 fa3a 	bl	8016e30 <__pow5mult>
 80159bc:	9b06      	ldr	r3, [sp, #24]
 80159be:	2b01      	cmp	r3, #1
 80159c0:	4606      	mov	r6, r0
 80159c2:	f340 8081 	ble.w	8015ac8 <_dtoa_r+0x8c8>
 80159c6:	f04f 0800 	mov.w	r8, #0
 80159ca:	6933      	ldr	r3, [r6, #16]
 80159cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80159d0:	6918      	ldr	r0, [r3, #16]
 80159d2:	f001 f91d 	bl	8016c10 <__hi0bits>
 80159d6:	f1c0 0020 	rsb	r0, r0, #32
 80159da:	9b05      	ldr	r3, [sp, #20]
 80159dc:	4418      	add	r0, r3
 80159de:	f010 001f 	ands.w	r0, r0, #31
 80159e2:	f000 8092 	beq.w	8015b0a <_dtoa_r+0x90a>
 80159e6:	f1c0 0320 	rsb	r3, r0, #32
 80159ea:	2b04      	cmp	r3, #4
 80159ec:	f340 808a 	ble.w	8015b04 <_dtoa_r+0x904>
 80159f0:	f1c0 001c 	rsb	r0, r0, #28
 80159f4:	9b04      	ldr	r3, [sp, #16]
 80159f6:	4403      	add	r3, r0
 80159f8:	9304      	str	r3, [sp, #16]
 80159fa:	9b05      	ldr	r3, [sp, #20]
 80159fc:	4403      	add	r3, r0
 80159fe:	4405      	add	r5, r0
 8015a00:	9305      	str	r3, [sp, #20]
 8015a02:	9b04      	ldr	r3, [sp, #16]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	dd07      	ble.n	8015a18 <_dtoa_r+0x818>
 8015a08:	ee18 1a10 	vmov	r1, s16
 8015a0c:	461a      	mov	r2, r3
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f001 fa68 	bl	8016ee4 <__lshift>
 8015a14:	ee08 0a10 	vmov	s16, r0
 8015a18:	9b05      	ldr	r3, [sp, #20]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	dd05      	ble.n	8015a2a <_dtoa_r+0x82a>
 8015a1e:	4631      	mov	r1, r6
 8015a20:	461a      	mov	r2, r3
 8015a22:	4620      	mov	r0, r4
 8015a24:	f001 fa5e 	bl	8016ee4 <__lshift>
 8015a28:	4606      	mov	r6, r0
 8015a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d06e      	beq.n	8015b0e <_dtoa_r+0x90e>
 8015a30:	ee18 0a10 	vmov	r0, s16
 8015a34:	4631      	mov	r1, r6
 8015a36:	f001 fac5 	bl	8016fc4 <__mcmp>
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	da67      	bge.n	8015b0e <_dtoa_r+0x90e>
 8015a3e:	9b00      	ldr	r3, [sp, #0]
 8015a40:	3b01      	subs	r3, #1
 8015a42:	ee18 1a10 	vmov	r1, s16
 8015a46:	9300      	str	r3, [sp, #0]
 8015a48:	220a      	movs	r2, #10
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	f001 f84f 	bl	8016af0 <__multadd>
 8015a52:	9b08      	ldr	r3, [sp, #32]
 8015a54:	ee08 0a10 	vmov	s16, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f000 81b1 	beq.w	8015dc0 <_dtoa_r+0xbc0>
 8015a5e:	2300      	movs	r3, #0
 8015a60:	4639      	mov	r1, r7
 8015a62:	220a      	movs	r2, #10
 8015a64:	4620      	mov	r0, r4
 8015a66:	f001 f843 	bl	8016af0 <__multadd>
 8015a6a:	9b02      	ldr	r3, [sp, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	4607      	mov	r7, r0
 8015a70:	f300 808e 	bgt.w	8015b90 <_dtoa_r+0x990>
 8015a74:	9b06      	ldr	r3, [sp, #24]
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	dc51      	bgt.n	8015b1e <_dtoa_r+0x91e>
 8015a7a:	e089      	b.n	8015b90 <_dtoa_r+0x990>
 8015a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a82:	e74b      	b.n	801591c <_dtoa_r+0x71c>
 8015a84:	9b03      	ldr	r3, [sp, #12]
 8015a86:	1e5e      	subs	r6, r3, #1
 8015a88:	9b07      	ldr	r3, [sp, #28]
 8015a8a:	42b3      	cmp	r3, r6
 8015a8c:	bfbf      	itttt	lt
 8015a8e:	9b07      	ldrlt	r3, [sp, #28]
 8015a90:	9607      	strlt	r6, [sp, #28]
 8015a92:	1af2      	sublt	r2, r6, r3
 8015a94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015a96:	bfb6      	itet	lt
 8015a98:	189b      	addlt	r3, r3, r2
 8015a9a:	1b9e      	subge	r6, r3, r6
 8015a9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015a9e:	9b03      	ldr	r3, [sp, #12]
 8015aa0:	bfb8      	it	lt
 8015aa2:	2600      	movlt	r6, #0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	bfb7      	itett	lt
 8015aa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015aac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015ab0:	1a9d      	sublt	r5, r3, r2
 8015ab2:	2300      	movlt	r3, #0
 8015ab4:	e734      	b.n	8015920 <_dtoa_r+0x720>
 8015ab6:	9e07      	ldr	r6, [sp, #28]
 8015ab8:	9d04      	ldr	r5, [sp, #16]
 8015aba:	9f08      	ldr	r7, [sp, #32]
 8015abc:	e73b      	b.n	8015936 <_dtoa_r+0x736>
 8015abe:	9a07      	ldr	r2, [sp, #28]
 8015ac0:	e767      	b.n	8015992 <_dtoa_r+0x792>
 8015ac2:	9b06      	ldr	r3, [sp, #24]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	dc18      	bgt.n	8015afa <_dtoa_r+0x8fa>
 8015ac8:	f1ba 0f00 	cmp.w	sl, #0
 8015acc:	d115      	bne.n	8015afa <_dtoa_r+0x8fa>
 8015ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ad2:	b993      	cbnz	r3, 8015afa <_dtoa_r+0x8fa>
 8015ad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ad8:	0d1b      	lsrs	r3, r3, #20
 8015ada:	051b      	lsls	r3, r3, #20
 8015adc:	b183      	cbz	r3, 8015b00 <_dtoa_r+0x900>
 8015ade:	9b04      	ldr	r3, [sp, #16]
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	9304      	str	r3, [sp, #16]
 8015ae4:	9b05      	ldr	r3, [sp, #20]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	9305      	str	r3, [sp, #20]
 8015aea:	f04f 0801 	mov.w	r8, #1
 8015aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f47f af6a 	bne.w	80159ca <_dtoa_r+0x7ca>
 8015af6:	2001      	movs	r0, #1
 8015af8:	e76f      	b.n	80159da <_dtoa_r+0x7da>
 8015afa:	f04f 0800 	mov.w	r8, #0
 8015afe:	e7f6      	b.n	8015aee <_dtoa_r+0x8ee>
 8015b00:	4698      	mov	r8, r3
 8015b02:	e7f4      	b.n	8015aee <_dtoa_r+0x8ee>
 8015b04:	f43f af7d 	beq.w	8015a02 <_dtoa_r+0x802>
 8015b08:	4618      	mov	r0, r3
 8015b0a:	301c      	adds	r0, #28
 8015b0c:	e772      	b.n	80159f4 <_dtoa_r+0x7f4>
 8015b0e:	9b03      	ldr	r3, [sp, #12]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dc37      	bgt.n	8015b84 <_dtoa_r+0x984>
 8015b14:	9b06      	ldr	r3, [sp, #24]
 8015b16:	2b02      	cmp	r3, #2
 8015b18:	dd34      	ble.n	8015b84 <_dtoa_r+0x984>
 8015b1a:	9b03      	ldr	r3, [sp, #12]
 8015b1c:	9302      	str	r3, [sp, #8]
 8015b1e:	9b02      	ldr	r3, [sp, #8]
 8015b20:	b96b      	cbnz	r3, 8015b3e <_dtoa_r+0x93e>
 8015b22:	4631      	mov	r1, r6
 8015b24:	2205      	movs	r2, #5
 8015b26:	4620      	mov	r0, r4
 8015b28:	f000 ffe2 	bl	8016af0 <__multadd>
 8015b2c:	4601      	mov	r1, r0
 8015b2e:	4606      	mov	r6, r0
 8015b30:	ee18 0a10 	vmov	r0, s16
 8015b34:	f001 fa46 	bl	8016fc4 <__mcmp>
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	f73f adbb 	bgt.w	80156b4 <_dtoa_r+0x4b4>
 8015b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b40:	9d01      	ldr	r5, [sp, #4]
 8015b42:	43db      	mvns	r3, r3
 8015b44:	9300      	str	r3, [sp, #0]
 8015b46:	f04f 0800 	mov.w	r8, #0
 8015b4a:	4631      	mov	r1, r6
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f000 ffad 	bl	8016aac <_Bfree>
 8015b52:	2f00      	cmp	r7, #0
 8015b54:	f43f aea4 	beq.w	80158a0 <_dtoa_r+0x6a0>
 8015b58:	f1b8 0f00 	cmp.w	r8, #0
 8015b5c:	d005      	beq.n	8015b6a <_dtoa_r+0x96a>
 8015b5e:	45b8      	cmp	r8, r7
 8015b60:	d003      	beq.n	8015b6a <_dtoa_r+0x96a>
 8015b62:	4641      	mov	r1, r8
 8015b64:	4620      	mov	r0, r4
 8015b66:	f000 ffa1 	bl	8016aac <_Bfree>
 8015b6a:	4639      	mov	r1, r7
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	f000 ff9d 	bl	8016aac <_Bfree>
 8015b72:	e695      	b.n	80158a0 <_dtoa_r+0x6a0>
 8015b74:	2600      	movs	r6, #0
 8015b76:	4637      	mov	r7, r6
 8015b78:	e7e1      	b.n	8015b3e <_dtoa_r+0x93e>
 8015b7a:	9700      	str	r7, [sp, #0]
 8015b7c:	4637      	mov	r7, r6
 8015b7e:	e599      	b.n	80156b4 <_dtoa_r+0x4b4>
 8015b80:	40240000 	.word	0x40240000
 8015b84:	9b08      	ldr	r3, [sp, #32]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f000 80ca 	beq.w	8015d20 <_dtoa_r+0xb20>
 8015b8c:	9b03      	ldr	r3, [sp, #12]
 8015b8e:	9302      	str	r3, [sp, #8]
 8015b90:	2d00      	cmp	r5, #0
 8015b92:	dd05      	ble.n	8015ba0 <_dtoa_r+0x9a0>
 8015b94:	4639      	mov	r1, r7
 8015b96:	462a      	mov	r2, r5
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f001 f9a3 	bl	8016ee4 <__lshift>
 8015b9e:	4607      	mov	r7, r0
 8015ba0:	f1b8 0f00 	cmp.w	r8, #0
 8015ba4:	d05b      	beq.n	8015c5e <_dtoa_r+0xa5e>
 8015ba6:	6879      	ldr	r1, [r7, #4]
 8015ba8:	4620      	mov	r0, r4
 8015baa:	f000 ff3f 	bl	8016a2c <_Balloc>
 8015bae:	4605      	mov	r5, r0
 8015bb0:	b928      	cbnz	r0, 8015bbe <_dtoa_r+0x9be>
 8015bb2:	4b87      	ldr	r3, [pc, #540]	; (8015dd0 <_dtoa_r+0xbd0>)
 8015bb4:	4602      	mov	r2, r0
 8015bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015bba:	f7ff bb3b 	b.w	8015234 <_dtoa_r+0x34>
 8015bbe:	693a      	ldr	r2, [r7, #16]
 8015bc0:	3202      	adds	r2, #2
 8015bc2:	0092      	lsls	r2, r2, #2
 8015bc4:	f107 010c 	add.w	r1, r7, #12
 8015bc8:	300c      	adds	r0, #12
 8015bca:	f7fc fe21 	bl	8012810 <memcpy>
 8015bce:	2201      	movs	r2, #1
 8015bd0:	4629      	mov	r1, r5
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f001 f986 	bl	8016ee4 <__lshift>
 8015bd8:	9b01      	ldr	r3, [sp, #4]
 8015bda:	f103 0901 	add.w	r9, r3, #1
 8015bde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015be2:	4413      	add	r3, r2
 8015be4:	9305      	str	r3, [sp, #20]
 8015be6:	f00a 0301 	and.w	r3, sl, #1
 8015bea:	46b8      	mov	r8, r7
 8015bec:	9304      	str	r3, [sp, #16]
 8015bee:	4607      	mov	r7, r0
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	ee18 0a10 	vmov	r0, s16
 8015bf6:	f7ff fa75 	bl	80150e4 <quorem>
 8015bfa:	4641      	mov	r1, r8
 8015bfc:	9002      	str	r0, [sp, #8]
 8015bfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015c02:	ee18 0a10 	vmov	r0, s16
 8015c06:	f001 f9dd 	bl	8016fc4 <__mcmp>
 8015c0a:	463a      	mov	r2, r7
 8015c0c:	9003      	str	r0, [sp, #12]
 8015c0e:	4631      	mov	r1, r6
 8015c10:	4620      	mov	r0, r4
 8015c12:	f001 f9f3 	bl	8016ffc <__mdiff>
 8015c16:	68c2      	ldr	r2, [r0, #12]
 8015c18:	f109 3bff 	add.w	fp, r9, #4294967295
 8015c1c:	4605      	mov	r5, r0
 8015c1e:	bb02      	cbnz	r2, 8015c62 <_dtoa_r+0xa62>
 8015c20:	4601      	mov	r1, r0
 8015c22:	ee18 0a10 	vmov	r0, s16
 8015c26:	f001 f9cd 	bl	8016fc4 <__mcmp>
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	4629      	mov	r1, r5
 8015c2e:	4620      	mov	r0, r4
 8015c30:	9207      	str	r2, [sp, #28]
 8015c32:	f000 ff3b 	bl	8016aac <_Bfree>
 8015c36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015c3a:	ea43 0102 	orr.w	r1, r3, r2
 8015c3e:	9b04      	ldr	r3, [sp, #16]
 8015c40:	430b      	orrs	r3, r1
 8015c42:	464d      	mov	r5, r9
 8015c44:	d10f      	bne.n	8015c66 <_dtoa_r+0xa66>
 8015c46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c4a:	d02a      	beq.n	8015ca2 <_dtoa_r+0xaa2>
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	dd02      	ble.n	8015c58 <_dtoa_r+0xa58>
 8015c52:	9b02      	ldr	r3, [sp, #8]
 8015c54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015c58:	f88b a000 	strb.w	sl, [fp]
 8015c5c:	e775      	b.n	8015b4a <_dtoa_r+0x94a>
 8015c5e:	4638      	mov	r0, r7
 8015c60:	e7ba      	b.n	8015bd8 <_dtoa_r+0x9d8>
 8015c62:	2201      	movs	r2, #1
 8015c64:	e7e2      	b.n	8015c2c <_dtoa_r+0xa2c>
 8015c66:	9b03      	ldr	r3, [sp, #12]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	db04      	blt.n	8015c76 <_dtoa_r+0xa76>
 8015c6c:	9906      	ldr	r1, [sp, #24]
 8015c6e:	430b      	orrs	r3, r1
 8015c70:	9904      	ldr	r1, [sp, #16]
 8015c72:	430b      	orrs	r3, r1
 8015c74:	d122      	bne.n	8015cbc <_dtoa_r+0xabc>
 8015c76:	2a00      	cmp	r2, #0
 8015c78:	ddee      	ble.n	8015c58 <_dtoa_r+0xa58>
 8015c7a:	ee18 1a10 	vmov	r1, s16
 8015c7e:	2201      	movs	r2, #1
 8015c80:	4620      	mov	r0, r4
 8015c82:	f001 f92f 	bl	8016ee4 <__lshift>
 8015c86:	4631      	mov	r1, r6
 8015c88:	ee08 0a10 	vmov	s16, r0
 8015c8c:	f001 f99a 	bl	8016fc4 <__mcmp>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	dc03      	bgt.n	8015c9c <_dtoa_r+0xa9c>
 8015c94:	d1e0      	bne.n	8015c58 <_dtoa_r+0xa58>
 8015c96:	f01a 0f01 	tst.w	sl, #1
 8015c9a:	d0dd      	beq.n	8015c58 <_dtoa_r+0xa58>
 8015c9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015ca0:	d1d7      	bne.n	8015c52 <_dtoa_r+0xa52>
 8015ca2:	2339      	movs	r3, #57	; 0x39
 8015ca4:	f88b 3000 	strb.w	r3, [fp]
 8015ca8:	462b      	mov	r3, r5
 8015caa:	461d      	mov	r5, r3
 8015cac:	3b01      	subs	r3, #1
 8015cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015cb2:	2a39      	cmp	r2, #57	; 0x39
 8015cb4:	d071      	beq.n	8015d9a <_dtoa_r+0xb9a>
 8015cb6:	3201      	adds	r2, #1
 8015cb8:	701a      	strb	r2, [r3, #0]
 8015cba:	e746      	b.n	8015b4a <_dtoa_r+0x94a>
 8015cbc:	2a00      	cmp	r2, #0
 8015cbe:	dd07      	ble.n	8015cd0 <_dtoa_r+0xad0>
 8015cc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015cc4:	d0ed      	beq.n	8015ca2 <_dtoa_r+0xaa2>
 8015cc6:	f10a 0301 	add.w	r3, sl, #1
 8015cca:	f88b 3000 	strb.w	r3, [fp]
 8015cce:	e73c      	b.n	8015b4a <_dtoa_r+0x94a>
 8015cd0:	9b05      	ldr	r3, [sp, #20]
 8015cd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015cd6:	4599      	cmp	r9, r3
 8015cd8:	d047      	beq.n	8015d6a <_dtoa_r+0xb6a>
 8015cda:	ee18 1a10 	vmov	r1, s16
 8015cde:	2300      	movs	r3, #0
 8015ce0:	220a      	movs	r2, #10
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f000 ff04 	bl	8016af0 <__multadd>
 8015ce8:	45b8      	cmp	r8, r7
 8015cea:	ee08 0a10 	vmov	s16, r0
 8015cee:	f04f 0300 	mov.w	r3, #0
 8015cf2:	f04f 020a 	mov.w	r2, #10
 8015cf6:	4641      	mov	r1, r8
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	d106      	bne.n	8015d0a <_dtoa_r+0xb0a>
 8015cfc:	f000 fef8 	bl	8016af0 <__multadd>
 8015d00:	4680      	mov	r8, r0
 8015d02:	4607      	mov	r7, r0
 8015d04:	f109 0901 	add.w	r9, r9, #1
 8015d08:	e772      	b.n	8015bf0 <_dtoa_r+0x9f0>
 8015d0a:	f000 fef1 	bl	8016af0 <__multadd>
 8015d0e:	4639      	mov	r1, r7
 8015d10:	4680      	mov	r8, r0
 8015d12:	2300      	movs	r3, #0
 8015d14:	220a      	movs	r2, #10
 8015d16:	4620      	mov	r0, r4
 8015d18:	f000 feea 	bl	8016af0 <__multadd>
 8015d1c:	4607      	mov	r7, r0
 8015d1e:	e7f1      	b.n	8015d04 <_dtoa_r+0xb04>
 8015d20:	9b03      	ldr	r3, [sp, #12]
 8015d22:	9302      	str	r3, [sp, #8]
 8015d24:	9d01      	ldr	r5, [sp, #4]
 8015d26:	ee18 0a10 	vmov	r0, s16
 8015d2a:	4631      	mov	r1, r6
 8015d2c:	f7ff f9da 	bl	80150e4 <quorem>
 8015d30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d34:	9b01      	ldr	r3, [sp, #4]
 8015d36:	f805 ab01 	strb.w	sl, [r5], #1
 8015d3a:	1aea      	subs	r2, r5, r3
 8015d3c:	9b02      	ldr	r3, [sp, #8]
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	dd09      	ble.n	8015d56 <_dtoa_r+0xb56>
 8015d42:	ee18 1a10 	vmov	r1, s16
 8015d46:	2300      	movs	r3, #0
 8015d48:	220a      	movs	r2, #10
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f000 fed0 	bl	8016af0 <__multadd>
 8015d50:	ee08 0a10 	vmov	s16, r0
 8015d54:	e7e7      	b.n	8015d26 <_dtoa_r+0xb26>
 8015d56:	9b02      	ldr	r3, [sp, #8]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	bfc8      	it	gt
 8015d5c:	461d      	movgt	r5, r3
 8015d5e:	9b01      	ldr	r3, [sp, #4]
 8015d60:	bfd8      	it	le
 8015d62:	2501      	movle	r5, #1
 8015d64:	441d      	add	r5, r3
 8015d66:	f04f 0800 	mov.w	r8, #0
 8015d6a:	ee18 1a10 	vmov	r1, s16
 8015d6e:	2201      	movs	r2, #1
 8015d70:	4620      	mov	r0, r4
 8015d72:	f001 f8b7 	bl	8016ee4 <__lshift>
 8015d76:	4631      	mov	r1, r6
 8015d78:	ee08 0a10 	vmov	s16, r0
 8015d7c:	f001 f922 	bl	8016fc4 <__mcmp>
 8015d80:	2800      	cmp	r0, #0
 8015d82:	dc91      	bgt.n	8015ca8 <_dtoa_r+0xaa8>
 8015d84:	d102      	bne.n	8015d8c <_dtoa_r+0xb8c>
 8015d86:	f01a 0f01 	tst.w	sl, #1
 8015d8a:	d18d      	bne.n	8015ca8 <_dtoa_r+0xaa8>
 8015d8c:	462b      	mov	r3, r5
 8015d8e:	461d      	mov	r5, r3
 8015d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d94:	2a30      	cmp	r2, #48	; 0x30
 8015d96:	d0fa      	beq.n	8015d8e <_dtoa_r+0xb8e>
 8015d98:	e6d7      	b.n	8015b4a <_dtoa_r+0x94a>
 8015d9a:	9a01      	ldr	r2, [sp, #4]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d184      	bne.n	8015caa <_dtoa_r+0xaaa>
 8015da0:	9b00      	ldr	r3, [sp, #0]
 8015da2:	3301      	adds	r3, #1
 8015da4:	9300      	str	r3, [sp, #0]
 8015da6:	2331      	movs	r3, #49	; 0x31
 8015da8:	7013      	strb	r3, [r2, #0]
 8015daa:	e6ce      	b.n	8015b4a <_dtoa_r+0x94a>
 8015dac:	4b09      	ldr	r3, [pc, #36]	; (8015dd4 <_dtoa_r+0xbd4>)
 8015dae:	f7ff ba95 	b.w	80152dc <_dtoa_r+0xdc>
 8015db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	f47f aa6e 	bne.w	8015296 <_dtoa_r+0x96>
 8015dba:	4b07      	ldr	r3, [pc, #28]	; (8015dd8 <_dtoa_r+0xbd8>)
 8015dbc:	f7ff ba8e 	b.w	80152dc <_dtoa_r+0xdc>
 8015dc0:	9b02      	ldr	r3, [sp, #8]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	dcae      	bgt.n	8015d24 <_dtoa_r+0xb24>
 8015dc6:	9b06      	ldr	r3, [sp, #24]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	f73f aea8 	bgt.w	8015b1e <_dtoa_r+0x91e>
 8015dce:	e7a9      	b.n	8015d24 <_dtoa_r+0xb24>
 8015dd0:	080589ea 	.word	0x080589ea
 8015dd4:	08058c98 	.word	0x08058c98
 8015dd8:	08058982 	.word	0x08058982

08015ddc <__sflush_r>:
 8015ddc:	898a      	ldrh	r2, [r1, #12]
 8015dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015de2:	4605      	mov	r5, r0
 8015de4:	0710      	lsls	r0, r2, #28
 8015de6:	460c      	mov	r4, r1
 8015de8:	d458      	bmi.n	8015e9c <__sflush_r+0xc0>
 8015dea:	684b      	ldr	r3, [r1, #4]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	dc05      	bgt.n	8015dfc <__sflush_r+0x20>
 8015df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	dc02      	bgt.n	8015dfc <__sflush_r+0x20>
 8015df6:	2000      	movs	r0, #0
 8015df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dfe:	2e00      	cmp	r6, #0
 8015e00:	d0f9      	beq.n	8015df6 <__sflush_r+0x1a>
 8015e02:	2300      	movs	r3, #0
 8015e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e08:	682f      	ldr	r7, [r5, #0]
 8015e0a:	602b      	str	r3, [r5, #0]
 8015e0c:	d032      	beq.n	8015e74 <__sflush_r+0x98>
 8015e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e10:	89a3      	ldrh	r3, [r4, #12]
 8015e12:	075a      	lsls	r2, r3, #29
 8015e14:	d505      	bpl.n	8015e22 <__sflush_r+0x46>
 8015e16:	6863      	ldr	r3, [r4, #4]
 8015e18:	1ac0      	subs	r0, r0, r3
 8015e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e1c:	b10b      	cbz	r3, 8015e22 <__sflush_r+0x46>
 8015e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e20:	1ac0      	subs	r0, r0, r3
 8015e22:	2300      	movs	r3, #0
 8015e24:	4602      	mov	r2, r0
 8015e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e28:	6a21      	ldr	r1, [r4, #32]
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	47b0      	blx	r6
 8015e2e:	1c43      	adds	r3, r0, #1
 8015e30:	89a3      	ldrh	r3, [r4, #12]
 8015e32:	d106      	bne.n	8015e42 <__sflush_r+0x66>
 8015e34:	6829      	ldr	r1, [r5, #0]
 8015e36:	291d      	cmp	r1, #29
 8015e38:	d82c      	bhi.n	8015e94 <__sflush_r+0xb8>
 8015e3a:	4a2a      	ldr	r2, [pc, #168]	; (8015ee4 <__sflush_r+0x108>)
 8015e3c:	40ca      	lsrs	r2, r1
 8015e3e:	07d6      	lsls	r6, r2, #31
 8015e40:	d528      	bpl.n	8015e94 <__sflush_r+0xb8>
 8015e42:	2200      	movs	r2, #0
 8015e44:	6062      	str	r2, [r4, #4]
 8015e46:	04d9      	lsls	r1, r3, #19
 8015e48:	6922      	ldr	r2, [r4, #16]
 8015e4a:	6022      	str	r2, [r4, #0]
 8015e4c:	d504      	bpl.n	8015e58 <__sflush_r+0x7c>
 8015e4e:	1c42      	adds	r2, r0, #1
 8015e50:	d101      	bne.n	8015e56 <__sflush_r+0x7a>
 8015e52:	682b      	ldr	r3, [r5, #0]
 8015e54:	b903      	cbnz	r3, 8015e58 <__sflush_r+0x7c>
 8015e56:	6560      	str	r0, [r4, #84]	; 0x54
 8015e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e5a:	602f      	str	r7, [r5, #0]
 8015e5c:	2900      	cmp	r1, #0
 8015e5e:	d0ca      	beq.n	8015df6 <__sflush_r+0x1a>
 8015e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e64:	4299      	cmp	r1, r3
 8015e66:	d002      	beq.n	8015e6e <__sflush_r+0x92>
 8015e68:	4628      	mov	r0, r5
 8015e6a:	f7fc ff59 	bl	8012d20 <_free_r>
 8015e6e:	2000      	movs	r0, #0
 8015e70:	6360      	str	r0, [r4, #52]	; 0x34
 8015e72:	e7c1      	b.n	8015df8 <__sflush_r+0x1c>
 8015e74:	6a21      	ldr	r1, [r4, #32]
 8015e76:	2301      	movs	r3, #1
 8015e78:	4628      	mov	r0, r5
 8015e7a:	47b0      	blx	r6
 8015e7c:	1c41      	adds	r1, r0, #1
 8015e7e:	d1c7      	bne.n	8015e10 <__sflush_r+0x34>
 8015e80:	682b      	ldr	r3, [r5, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d0c4      	beq.n	8015e10 <__sflush_r+0x34>
 8015e86:	2b1d      	cmp	r3, #29
 8015e88:	d001      	beq.n	8015e8e <__sflush_r+0xb2>
 8015e8a:	2b16      	cmp	r3, #22
 8015e8c:	d101      	bne.n	8015e92 <__sflush_r+0xb6>
 8015e8e:	602f      	str	r7, [r5, #0]
 8015e90:	e7b1      	b.n	8015df6 <__sflush_r+0x1a>
 8015e92:	89a3      	ldrh	r3, [r4, #12]
 8015e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e98:	81a3      	strh	r3, [r4, #12]
 8015e9a:	e7ad      	b.n	8015df8 <__sflush_r+0x1c>
 8015e9c:	690f      	ldr	r7, [r1, #16]
 8015e9e:	2f00      	cmp	r7, #0
 8015ea0:	d0a9      	beq.n	8015df6 <__sflush_r+0x1a>
 8015ea2:	0793      	lsls	r3, r2, #30
 8015ea4:	680e      	ldr	r6, [r1, #0]
 8015ea6:	bf08      	it	eq
 8015ea8:	694b      	ldreq	r3, [r1, #20]
 8015eaa:	600f      	str	r7, [r1, #0]
 8015eac:	bf18      	it	ne
 8015eae:	2300      	movne	r3, #0
 8015eb0:	eba6 0807 	sub.w	r8, r6, r7
 8015eb4:	608b      	str	r3, [r1, #8]
 8015eb6:	f1b8 0f00 	cmp.w	r8, #0
 8015eba:	dd9c      	ble.n	8015df6 <__sflush_r+0x1a>
 8015ebc:	6a21      	ldr	r1, [r4, #32]
 8015ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ec0:	4643      	mov	r3, r8
 8015ec2:	463a      	mov	r2, r7
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	47b0      	blx	r6
 8015ec8:	2800      	cmp	r0, #0
 8015eca:	dc06      	bgt.n	8015eda <__sflush_r+0xfe>
 8015ecc:	89a3      	ldrh	r3, [r4, #12]
 8015ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ed2:	81a3      	strh	r3, [r4, #12]
 8015ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8015ed8:	e78e      	b.n	8015df8 <__sflush_r+0x1c>
 8015eda:	4407      	add	r7, r0
 8015edc:	eba8 0800 	sub.w	r8, r8, r0
 8015ee0:	e7e9      	b.n	8015eb6 <__sflush_r+0xda>
 8015ee2:	bf00      	nop
 8015ee4:	20400001 	.word	0x20400001

08015ee8 <_fflush_r>:
 8015ee8:	b538      	push	{r3, r4, r5, lr}
 8015eea:	690b      	ldr	r3, [r1, #16]
 8015eec:	4605      	mov	r5, r0
 8015eee:	460c      	mov	r4, r1
 8015ef0:	b913      	cbnz	r3, 8015ef8 <_fflush_r+0x10>
 8015ef2:	2500      	movs	r5, #0
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	bd38      	pop	{r3, r4, r5, pc}
 8015ef8:	b118      	cbz	r0, 8015f02 <_fflush_r+0x1a>
 8015efa:	6983      	ldr	r3, [r0, #24]
 8015efc:	b90b      	cbnz	r3, 8015f02 <_fflush_r+0x1a>
 8015efe:	f000 f887 	bl	8016010 <__sinit>
 8015f02:	4b14      	ldr	r3, [pc, #80]	; (8015f54 <_fflush_r+0x6c>)
 8015f04:	429c      	cmp	r4, r3
 8015f06:	d11b      	bne.n	8015f40 <_fflush_r+0x58>
 8015f08:	686c      	ldr	r4, [r5, #4]
 8015f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d0ef      	beq.n	8015ef2 <_fflush_r+0xa>
 8015f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015f14:	07d0      	lsls	r0, r2, #31
 8015f16:	d404      	bmi.n	8015f22 <_fflush_r+0x3a>
 8015f18:	0599      	lsls	r1, r3, #22
 8015f1a:	d402      	bmi.n	8015f22 <_fflush_r+0x3a>
 8015f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f1e:	f000 fcd1 	bl	80168c4 <__retarget_lock_acquire_recursive>
 8015f22:	4628      	mov	r0, r5
 8015f24:	4621      	mov	r1, r4
 8015f26:	f7ff ff59 	bl	8015ddc <__sflush_r>
 8015f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f2c:	07da      	lsls	r2, r3, #31
 8015f2e:	4605      	mov	r5, r0
 8015f30:	d4e0      	bmi.n	8015ef4 <_fflush_r+0xc>
 8015f32:	89a3      	ldrh	r3, [r4, #12]
 8015f34:	059b      	lsls	r3, r3, #22
 8015f36:	d4dd      	bmi.n	8015ef4 <_fflush_r+0xc>
 8015f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f3a:	f000 fcc5 	bl	80168c8 <__retarget_lock_release_recursive>
 8015f3e:	e7d9      	b.n	8015ef4 <_fflush_r+0xc>
 8015f40:	4b05      	ldr	r3, [pc, #20]	; (8015f58 <_fflush_r+0x70>)
 8015f42:	429c      	cmp	r4, r3
 8015f44:	d101      	bne.n	8015f4a <_fflush_r+0x62>
 8015f46:	68ac      	ldr	r4, [r5, #8]
 8015f48:	e7df      	b.n	8015f0a <_fflush_r+0x22>
 8015f4a:	4b04      	ldr	r3, [pc, #16]	; (8015f5c <_fflush_r+0x74>)
 8015f4c:	429c      	cmp	r4, r3
 8015f4e:	bf08      	it	eq
 8015f50:	68ec      	ldreq	r4, [r5, #12]
 8015f52:	e7da      	b.n	8015f0a <_fflush_r+0x22>
 8015f54:	08058a1c 	.word	0x08058a1c
 8015f58:	08058a3c 	.word	0x08058a3c
 8015f5c:	080589fc 	.word	0x080589fc

08015f60 <std>:
 8015f60:	2300      	movs	r3, #0
 8015f62:	b510      	push	{r4, lr}
 8015f64:	4604      	mov	r4, r0
 8015f66:	e9c0 3300 	strd	r3, r3, [r0]
 8015f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f6e:	6083      	str	r3, [r0, #8]
 8015f70:	8181      	strh	r1, [r0, #12]
 8015f72:	6643      	str	r3, [r0, #100]	; 0x64
 8015f74:	81c2      	strh	r2, [r0, #14]
 8015f76:	6183      	str	r3, [r0, #24]
 8015f78:	4619      	mov	r1, r3
 8015f7a:	2208      	movs	r2, #8
 8015f7c:	305c      	adds	r0, #92	; 0x5c
 8015f7e:	f7fc fc55 	bl	801282c <memset>
 8015f82:	4b05      	ldr	r3, [pc, #20]	; (8015f98 <std+0x38>)
 8015f84:	6263      	str	r3, [r4, #36]	; 0x24
 8015f86:	4b05      	ldr	r3, [pc, #20]	; (8015f9c <std+0x3c>)
 8015f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f8a:	4b05      	ldr	r3, [pc, #20]	; (8015fa0 <std+0x40>)
 8015f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f8e:	4b05      	ldr	r3, [pc, #20]	; (8015fa4 <std+0x44>)
 8015f90:	6224      	str	r4, [r4, #32]
 8015f92:	6323      	str	r3, [r4, #48]	; 0x30
 8015f94:	bd10      	pop	{r4, pc}
 8015f96:	bf00      	nop
 8015f98:	08013b21 	.word	0x08013b21
 8015f9c:	08013b47 	.word	0x08013b47
 8015fa0:	08013b7f 	.word	0x08013b7f
 8015fa4:	08013ba3 	.word	0x08013ba3

08015fa8 <_cleanup_r>:
 8015fa8:	4901      	ldr	r1, [pc, #4]	; (8015fb0 <_cleanup_r+0x8>)
 8015faa:	f000 b8af 	b.w	801610c <_fwalk_reent>
 8015fae:	bf00      	nop
 8015fb0:	08015ee9 	.word	0x08015ee9

08015fb4 <__sfmoreglue>:
 8015fb4:	b570      	push	{r4, r5, r6, lr}
 8015fb6:	2268      	movs	r2, #104	; 0x68
 8015fb8:	1e4d      	subs	r5, r1, #1
 8015fba:	4355      	muls	r5, r2
 8015fbc:	460e      	mov	r6, r1
 8015fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015fc2:	f7fc ff19 	bl	8012df8 <_malloc_r>
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	b140      	cbz	r0, 8015fdc <__sfmoreglue+0x28>
 8015fca:	2100      	movs	r1, #0
 8015fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8015fd0:	300c      	adds	r0, #12
 8015fd2:	60a0      	str	r0, [r4, #8]
 8015fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015fd8:	f7fc fc28 	bl	801282c <memset>
 8015fdc:	4620      	mov	r0, r4
 8015fde:	bd70      	pop	{r4, r5, r6, pc}

08015fe0 <__sfp_lock_acquire>:
 8015fe0:	4801      	ldr	r0, [pc, #4]	; (8015fe8 <__sfp_lock_acquire+0x8>)
 8015fe2:	f000 bc6f 	b.w	80168c4 <__retarget_lock_acquire_recursive>
 8015fe6:	bf00      	nop
 8015fe8:	20005dfe 	.word	0x20005dfe

08015fec <__sfp_lock_release>:
 8015fec:	4801      	ldr	r0, [pc, #4]	; (8015ff4 <__sfp_lock_release+0x8>)
 8015fee:	f000 bc6b 	b.w	80168c8 <__retarget_lock_release_recursive>
 8015ff2:	bf00      	nop
 8015ff4:	20005dfe 	.word	0x20005dfe

08015ff8 <__sinit_lock_acquire>:
 8015ff8:	4801      	ldr	r0, [pc, #4]	; (8016000 <__sinit_lock_acquire+0x8>)
 8015ffa:	f000 bc63 	b.w	80168c4 <__retarget_lock_acquire_recursive>
 8015ffe:	bf00      	nop
 8016000:	20005dff 	.word	0x20005dff

08016004 <__sinit_lock_release>:
 8016004:	4801      	ldr	r0, [pc, #4]	; (801600c <__sinit_lock_release+0x8>)
 8016006:	f000 bc5f 	b.w	80168c8 <__retarget_lock_release_recursive>
 801600a:	bf00      	nop
 801600c:	20005dff 	.word	0x20005dff

08016010 <__sinit>:
 8016010:	b510      	push	{r4, lr}
 8016012:	4604      	mov	r4, r0
 8016014:	f7ff fff0 	bl	8015ff8 <__sinit_lock_acquire>
 8016018:	69a3      	ldr	r3, [r4, #24]
 801601a:	b11b      	cbz	r3, 8016024 <__sinit+0x14>
 801601c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016020:	f7ff bff0 	b.w	8016004 <__sinit_lock_release>
 8016024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016028:	6523      	str	r3, [r4, #80]	; 0x50
 801602a:	4b13      	ldr	r3, [pc, #76]	; (8016078 <__sinit+0x68>)
 801602c:	4a13      	ldr	r2, [pc, #76]	; (801607c <__sinit+0x6c>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	62a2      	str	r2, [r4, #40]	; 0x28
 8016032:	42a3      	cmp	r3, r4
 8016034:	bf04      	itt	eq
 8016036:	2301      	moveq	r3, #1
 8016038:	61a3      	streq	r3, [r4, #24]
 801603a:	4620      	mov	r0, r4
 801603c:	f000 f820 	bl	8016080 <__sfp>
 8016040:	6060      	str	r0, [r4, #4]
 8016042:	4620      	mov	r0, r4
 8016044:	f000 f81c 	bl	8016080 <__sfp>
 8016048:	60a0      	str	r0, [r4, #8]
 801604a:	4620      	mov	r0, r4
 801604c:	f000 f818 	bl	8016080 <__sfp>
 8016050:	2200      	movs	r2, #0
 8016052:	60e0      	str	r0, [r4, #12]
 8016054:	2104      	movs	r1, #4
 8016056:	6860      	ldr	r0, [r4, #4]
 8016058:	f7ff ff82 	bl	8015f60 <std>
 801605c:	68a0      	ldr	r0, [r4, #8]
 801605e:	2201      	movs	r2, #1
 8016060:	2109      	movs	r1, #9
 8016062:	f7ff ff7d 	bl	8015f60 <std>
 8016066:	68e0      	ldr	r0, [r4, #12]
 8016068:	2202      	movs	r2, #2
 801606a:	2112      	movs	r1, #18
 801606c:	f7ff ff78 	bl	8015f60 <std>
 8016070:	2301      	movs	r3, #1
 8016072:	61a3      	str	r3, [r4, #24]
 8016074:	e7d2      	b.n	801601c <__sinit+0xc>
 8016076:	bf00      	nop
 8016078:	080586f0 	.word	0x080586f0
 801607c:	08015fa9 	.word	0x08015fa9

08016080 <__sfp>:
 8016080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016082:	4607      	mov	r7, r0
 8016084:	f7ff ffac 	bl	8015fe0 <__sfp_lock_acquire>
 8016088:	4b1e      	ldr	r3, [pc, #120]	; (8016104 <__sfp+0x84>)
 801608a:	681e      	ldr	r6, [r3, #0]
 801608c:	69b3      	ldr	r3, [r6, #24]
 801608e:	b913      	cbnz	r3, 8016096 <__sfp+0x16>
 8016090:	4630      	mov	r0, r6
 8016092:	f7ff ffbd 	bl	8016010 <__sinit>
 8016096:	3648      	adds	r6, #72	; 0x48
 8016098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801609c:	3b01      	subs	r3, #1
 801609e:	d503      	bpl.n	80160a8 <__sfp+0x28>
 80160a0:	6833      	ldr	r3, [r6, #0]
 80160a2:	b30b      	cbz	r3, 80160e8 <__sfp+0x68>
 80160a4:	6836      	ldr	r6, [r6, #0]
 80160a6:	e7f7      	b.n	8016098 <__sfp+0x18>
 80160a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80160ac:	b9d5      	cbnz	r5, 80160e4 <__sfp+0x64>
 80160ae:	4b16      	ldr	r3, [pc, #88]	; (8016108 <__sfp+0x88>)
 80160b0:	60e3      	str	r3, [r4, #12]
 80160b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80160b6:	6665      	str	r5, [r4, #100]	; 0x64
 80160b8:	f000 fc02 	bl	80168c0 <__retarget_lock_init_recursive>
 80160bc:	f7ff ff96 	bl	8015fec <__sfp_lock_release>
 80160c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80160c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80160c8:	6025      	str	r5, [r4, #0]
 80160ca:	61a5      	str	r5, [r4, #24]
 80160cc:	2208      	movs	r2, #8
 80160ce:	4629      	mov	r1, r5
 80160d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160d4:	f7fc fbaa 	bl	801282c <memset>
 80160d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160e0:	4620      	mov	r0, r4
 80160e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160e4:	3468      	adds	r4, #104	; 0x68
 80160e6:	e7d9      	b.n	801609c <__sfp+0x1c>
 80160e8:	2104      	movs	r1, #4
 80160ea:	4638      	mov	r0, r7
 80160ec:	f7ff ff62 	bl	8015fb4 <__sfmoreglue>
 80160f0:	4604      	mov	r4, r0
 80160f2:	6030      	str	r0, [r6, #0]
 80160f4:	2800      	cmp	r0, #0
 80160f6:	d1d5      	bne.n	80160a4 <__sfp+0x24>
 80160f8:	f7ff ff78 	bl	8015fec <__sfp_lock_release>
 80160fc:	230c      	movs	r3, #12
 80160fe:	603b      	str	r3, [r7, #0]
 8016100:	e7ee      	b.n	80160e0 <__sfp+0x60>
 8016102:	bf00      	nop
 8016104:	080586f0 	.word	0x080586f0
 8016108:	ffff0001 	.word	0xffff0001

0801610c <_fwalk_reent>:
 801610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016110:	4606      	mov	r6, r0
 8016112:	4688      	mov	r8, r1
 8016114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016118:	2700      	movs	r7, #0
 801611a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801611e:	f1b9 0901 	subs.w	r9, r9, #1
 8016122:	d505      	bpl.n	8016130 <_fwalk_reent+0x24>
 8016124:	6824      	ldr	r4, [r4, #0]
 8016126:	2c00      	cmp	r4, #0
 8016128:	d1f7      	bne.n	801611a <_fwalk_reent+0xe>
 801612a:	4638      	mov	r0, r7
 801612c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016130:	89ab      	ldrh	r3, [r5, #12]
 8016132:	2b01      	cmp	r3, #1
 8016134:	d907      	bls.n	8016146 <_fwalk_reent+0x3a>
 8016136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801613a:	3301      	adds	r3, #1
 801613c:	d003      	beq.n	8016146 <_fwalk_reent+0x3a>
 801613e:	4629      	mov	r1, r5
 8016140:	4630      	mov	r0, r6
 8016142:	47c0      	blx	r8
 8016144:	4307      	orrs	r7, r0
 8016146:	3568      	adds	r5, #104	; 0x68
 8016148:	e7e9      	b.n	801611e <_fwalk_reent+0x12>

0801614a <rshift>:
 801614a:	6903      	ldr	r3, [r0, #16]
 801614c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016154:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016158:	f100 0414 	add.w	r4, r0, #20
 801615c:	dd45      	ble.n	80161ea <rshift+0xa0>
 801615e:	f011 011f 	ands.w	r1, r1, #31
 8016162:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016166:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801616a:	d10c      	bne.n	8016186 <rshift+0x3c>
 801616c:	f100 0710 	add.w	r7, r0, #16
 8016170:	4629      	mov	r1, r5
 8016172:	42b1      	cmp	r1, r6
 8016174:	d334      	bcc.n	80161e0 <rshift+0x96>
 8016176:	1a9b      	subs	r3, r3, r2
 8016178:	009b      	lsls	r3, r3, #2
 801617a:	1eea      	subs	r2, r5, #3
 801617c:	4296      	cmp	r6, r2
 801617e:	bf38      	it	cc
 8016180:	2300      	movcc	r3, #0
 8016182:	4423      	add	r3, r4
 8016184:	e015      	b.n	80161b2 <rshift+0x68>
 8016186:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801618a:	f1c1 0820 	rsb	r8, r1, #32
 801618e:	40cf      	lsrs	r7, r1
 8016190:	f105 0e04 	add.w	lr, r5, #4
 8016194:	46a1      	mov	r9, r4
 8016196:	4576      	cmp	r6, lr
 8016198:	46f4      	mov	ip, lr
 801619a:	d815      	bhi.n	80161c8 <rshift+0x7e>
 801619c:	1a9a      	subs	r2, r3, r2
 801619e:	0092      	lsls	r2, r2, #2
 80161a0:	3a04      	subs	r2, #4
 80161a2:	3501      	adds	r5, #1
 80161a4:	42ae      	cmp	r6, r5
 80161a6:	bf38      	it	cc
 80161a8:	2200      	movcc	r2, #0
 80161aa:	18a3      	adds	r3, r4, r2
 80161ac:	50a7      	str	r7, [r4, r2]
 80161ae:	b107      	cbz	r7, 80161b2 <rshift+0x68>
 80161b0:	3304      	adds	r3, #4
 80161b2:	1b1a      	subs	r2, r3, r4
 80161b4:	42a3      	cmp	r3, r4
 80161b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80161ba:	bf08      	it	eq
 80161bc:	2300      	moveq	r3, #0
 80161be:	6102      	str	r2, [r0, #16]
 80161c0:	bf08      	it	eq
 80161c2:	6143      	streq	r3, [r0, #20]
 80161c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c8:	f8dc c000 	ldr.w	ip, [ip]
 80161cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80161d0:	ea4c 0707 	orr.w	r7, ip, r7
 80161d4:	f849 7b04 	str.w	r7, [r9], #4
 80161d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80161dc:	40cf      	lsrs	r7, r1
 80161de:	e7da      	b.n	8016196 <rshift+0x4c>
 80161e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80161e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80161e8:	e7c3      	b.n	8016172 <rshift+0x28>
 80161ea:	4623      	mov	r3, r4
 80161ec:	e7e1      	b.n	80161b2 <rshift+0x68>

080161ee <__hexdig_fun>:
 80161ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80161f2:	2b09      	cmp	r3, #9
 80161f4:	d802      	bhi.n	80161fc <__hexdig_fun+0xe>
 80161f6:	3820      	subs	r0, #32
 80161f8:	b2c0      	uxtb	r0, r0
 80161fa:	4770      	bx	lr
 80161fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016200:	2b05      	cmp	r3, #5
 8016202:	d801      	bhi.n	8016208 <__hexdig_fun+0x1a>
 8016204:	3847      	subs	r0, #71	; 0x47
 8016206:	e7f7      	b.n	80161f8 <__hexdig_fun+0xa>
 8016208:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801620c:	2b05      	cmp	r3, #5
 801620e:	d801      	bhi.n	8016214 <__hexdig_fun+0x26>
 8016210:	3827      	subs	r0, #39	; 0x27
 8016212:	e7f1      	b.n	80161f8 <__hexdig_fun+0xa>
 8016214:	2000      	movs	r0, #0
 8016216:	4770      	bx	lr

08016218 <__gethex>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	ed2d 8b02 	vpush	{d8}
 8016220:	b089      	sub	sp, #36	; 0x24
 8016222:	ee08 0a10 	vmov	s16, r0
 8016226:	9304      	str	r3, [sp, #16]
 8016228:	4bb4      	ldr	r3, [pc, #720]	; (80164fc <__gethex+0x2e4>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	9301      	str	r3, [sp, #4]
 801622e:	4618      	mov	r0, r3
 8016230:	468b      	mov	fp, r1
 8016232:	4690      	mov	r8, r2
 8016234:	f7e9 ffe6 	bl	8000204 <strlen>
 8016238:	9b01      	ldr	r3, [sp, #4]
 801623a:	f8db 2000 	ldr.w	r2, [fp]
 801623e:	4403      	add	r3, r0
 8016240:	4682      	mov	sl, r0
 8016242:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016246:	9305      	str	r3, [sp, #20]
 8016248:	1c93      	adds	r3, r2, #2
 801624a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801624e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016252:	32fe      	adds	r2, #254	; 0xfe
 8016254:	18d1      	adds	r1, r2, r3
 8016256:	461f      	mov	r7, r3
 8016258:	f813 0b01 	ldrb.w	r0, [r3], #1
 801625c:	9100      	str	r1, [sp, #0]
 801625e:	2830      	cmp	r0, #48	; 0x30
 8016260:	d0f8      	beq.n	8016254 <__gethex+0x3c>
 8016262:	f7ff ffc4 	bl	80161ee <__hexdig_fun>
 8016266:	4604      	mov	r4, r0
 8016268:	2800      	cmp	r0, #0
 801626a:	d13a      	bne.n	80162e2 <__gethex+0xca>
 801626c:	9901      	ldr	r1, [sp, #4]
 801626e:	4652      	mov	r2, sl
 8016270:	4638      	mov	r0, r7
 8016272:	f001 fdf9 	bl	8017e68 <strncmp>
 8016276:	4605      	mov	r5, r0
 8016278:	2800      	cmp	r0, #0
 801627a:	d168      	bne.n	801634e <__gethex+0x136>
 801627c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016280:	eb07 060a 	add.w	r6, r7, sl
 8016284:	f7ff ffb3 	bl	80161ee <__hexdig_fun>
 8016288:	2800      	cmp	r0, #0
 801628a:	d062      	beq.n	8016352 <__gethex+0x13a>
 801628c:	4633      	mov	r3, r6
 801628e:	7818      	ldrb	r0, [r3, #0]
 8016290:	2830      	cmp	r0, #48	; 0x30
 8016292:	461f      	mov	r7, r3
 8016294:	f103 0301 	add.w	r3, r3, #1
 8016298:	d0f9      	beq.n	801628e <__gethex+0x76>
 801629a:	f7ff ffa8 	bl	80161ee <__hexdig_fun>
 801629e:	2301      	movs	r3, #1
 80162a0:	fab0 f480 	clz	r4, r0
 80162a4:	0964      	lsrs	r4, r4, #5
 80162a6:	4635      	mov	r5, r6
 80162a8:	9300      	str	r3, [sp, #0]
 80162aa:	463a      	mov	r2, r7
 80162ac:	4616      	mov	r6, r2
 80162ae:	3201      	adds	r2, #1
 80162b0:	7830      	ldrb	r0, [r6, #0]
 80162b2:	f7ff ff9c 	bl	80161ee <__hexdig_fun>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	d1f8      	bne.n	80162ac <__gethex+0x94>
 80162ba:	9901      	ldr	r1, [sp, #4]
 80162bc:	4652      	mov	r2, sl
 80162be:	4630      	mov	r0, r6
 80162c0:	f001 fdd2 	bl	8017e68 <strncmp>
 80162c4:	b980      	cbnz	r0, 80162e8 <__gethex+0xd0>
 80162c6:	b94d      	cbnz	r5, 80162dc <__gethex+0xc4>
 80162c8:	eb06 050a 	add.w	r5, r6, sl
 80162cc:	462a      	mov	r2, r5
 80162ce:	4616      	mov	r6, r2
 80162d0:	3201      	adds	r2, #1
 80162d2:	7830      	ldrb	r0, [r6, #0]
 80162d4:	f7ff ff8b 	bl	80161ee <__hexdig_fun>
 80162d8:	2800      	cmp	r0, #0
 80162da:	d1f8      	bne.n	80162ce <__gethex+0xb6>
 80162dc:	1bad      	subs	r5, r5, r6
 80162de:	00ad      	lsls	r5, r5, #2
 80162e0:	e004      	b.n	80162ec <__gethex+0xd4>
 80162e2:	2400      	movs	r4, #0
 80162e4:	4625      	mov	r5, r4
 80162e6:	e7e0      	b.n	80162aa <__gethex+0x92>
 80162e8:	2d00      	cmp	r5, #0
 80162ea:	d1f7      	bne.n	80162dc <__gethex+0xc4>
 80162ec:	7833      	ldrb	r3, [r6, #0]
 80162ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80162f2:	2b50      	cmp	r3, #80	; 0x50
 80162f4:	d13b      	bne.n	801636e <__gethex+0x156>
 80162f6:	7873      	ldrb	r3, [r6, #1]
 80162f8:	2b2b      	cmp	r3, #43	; 0x2b
 80162fa:	d02c      	beq.n	8016356 <__gethex+0x13e>
 80162fc:	2b2d      	cmp	r3, #45	; 0x2d
 80162fe:	d02e      	beq.n	801635e <__gethex+0x146>
 8016300:	1c71      	adds	r1, r6, #1
 8016302:	f04f 0900 	mov.w	r9, #0
 8016306:	7808      	ldrb	r0, [r1, #0]
 8016308:	f7ff ff71 	bl	80161ee <__hexdig_fun>
 801630c:	1e43      	subs	r3, r0, #1
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b18      	cmp	r3, #24
 8016312:	d82c      	bhi.n	801636e <__gethex+0x156>
 8016314:	f1a0 0210 	sub.w	r2, r0, #16
 8016318:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801631c:	f7ff ff67 	bl	80161ee <__hexdig_fun>
 8016320:	1e43      	subs	r3, r0, #1
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b18      	cmp	r3, #24
 8016326:	d91d      	bls.n	8016364 <__gethex+0x14c>
 8016328:	f1b9 0f00 	cmp.w	r9, #0
 801632c:	d000      	beq.n	8016330 <__gethex+0x118>
 801632e:	4252      	negs	r2, r2
 8016330:	4415      	add	r5, r2
 8016332:	f8cb 1000 	str.w	r1, [fp]
 8016336:	b1e4      	cbz	r4, 8016372 <__gethex+0x15a>
 8016338:	9b00      	ldr	r3, [sp, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	bf14      	ite	ne
 801633e:	2700      	movne	r7, #0
 8016340:	2706      	moveq	r7, #6
 8016342:	4638      	mov	r0, r7
 8016344:	b009      	add	sp, #36	; 0x24
 8016346:	ecbd 8b02 	vpop	{d8}
 801634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634e:	463e      	mov	r6, r7
 8016350:	4625      	mov	r5, r4
 8016352:	2401      	movs	r4, #1
 8016354:	e7ca      	b.n	80162ec <__gethex+0xd4>
 8016356:	f04f 0900 	mov.w	r9, #0
 801635a:	1cb1      	adds	r1, r6, #2
 801635c:	e7d3      	b.n	8016306 <__gethex+0xee>
 801635e:	f04f 0901 	mov.w	r9, #1
 8016362:	e7fa      	b.n	801635a <__gethex+0x142>
 8016364:	230a      	movs	r3, #10
 8016366:	fb03 0202 	mla	r2, r3, r2, r0
 801636a:	3a10      	subs	r2, #16
 801636c:	e7d4      	b.n	8016318 <__gethex+0x100>
 801636e:	4631      	mov	r1, r6
 8016370:	e7df      	b.n	8016332 <__gethex+0x11a>
 8016372:	1bf3      	subs	r3, r6, r7
 8016374:	3b01      	subs	r3, #1
 8016376:	4621      	mov	r1, r4
 8016378:	2b07      	cmp	r3, #7
 801637a:	dc0b      	bgt.n	8016394 <__gethex+0x17c>
 801637c:	ee18 0a10 	vmov	r0, s16
 8016380:	f000 fb54 	bl	8016a2c <_Balloc>
 8016384:	4604      	mov	r4, r0
 8016386:	b940      	cbnz	r0, 801639a <__gethex+0x182>
 8016388:	4b5d      	ldr	r3, [pc, #372]	; (8016500 <__gethex+0x2e8>)
 801638a:	4602      	mov	r2, r0
 801638c:	21de      	movs	r1, #222	; 0xde
 801638e:	485d      	ldr	r0, [pc, #372]	; (8016504 <__gethex+0x2ec>)
 8016390:	f7fc f9cc 	bl	801272c <__assert_func>
 8016394:	3101      	adds	r1, #1
 8016396:	105b      	asrs	r3, r3, #1
 8016398:	e7ee      	b.n	8016378 <__gethex+0x160>
 801639a:	f100 0914 	add.w	r9, r0, #20
 801639e:	f04f 0b00 	mov.w	fp, #0
 80163a2:	f1ca 0301 	rsb	r3, sl, #1
 80163a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80163aa:	f8cd b000 	str.w	fp, [sp]
 80163ae:	9306      	str	r3, [sp, #24]
 80163b0:	42b7      	cmp	r7, r6
 80163b2:	d340      	bcc.n	8016436 <__gethex+0x21e>
 80163b4:	9802      	ldr	r0, [sp, #8]
 80163b6:	9b00      	ldr	r3, [sp, #0]
 80163b8:	f840 3b04 	str.w	r3, [r0], #4
 80163bc:	eba0 0009 	sub.w	r0, r0, r9
 80163c0:	1080      	asrs	r0, r0, #2
 80163c2:	0146      	lsls	r6, r0, #5
 80163c4:	6120      	str	r0, [r4, #16]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 fc22 	bl	8016c10 <__hi0bits>
 80163cc:	1a30      	subs	r0, r6, r0
 80163ce:	f8d8 6000 	ldr.w	r6, [r8]
 80163d2:	42b0      	cmp	r0, r6
 80163d4:	dd63      	ble.n	801649e <__gethex+0x286>
 80163d6:	1b87      	subs	r7, r0, r6
 80163d8:	4639      	mov	r1, r7
 80163da:	4620      	mov	r0, r4
 80163dc:	f000 ffc6 	bl	801736c <__any_on>
 80163e0:	4682      	mov	sl, r0
 80163e2:	b1a8      	cbz	r0, 8016410 <__gethex+0x1f8>
 80163e4:	1e7b      	subs	r3, r7, #1
 80163e6:	1159      	asrs	r1, r3, #5
 80163e8:	f003 021f 	and.w	r2, r3, #31
 80163ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80163f0:	f04f 0a01 	mov.w	sl, #1
 80163f4:	fa0a f202 	lsl.w	r2, sl, r2
 80163f8:	420a      	tst	r2, r1
 80163fa:	d009      	beq.n	8016410 <__gethex+0x1f8>
 80163fc:	4553      	cmp	r3, sl
 80163fe:	dd05      	ble.n	801640c <__gethex+0x1f4>
 8016400:	1eb9      	subs	r1, r7, #2
 8016402:	4620      	mov	r0, r4
 8016404:	f000 ffb2 	bl	801736c <__any_on>
 8016408:	2800      	cmp	r0, #0
 801640a:	d145      	bne.n	8016498 <__gethex+0x280>
 801640c:	f04f 0a02 	mov.w	sl, #2
 8016410:	4639      	mov	r1, r7
 8016412:	4620      	mov	r0, r4
 8016414:	f7ff fe99 	bl	801614a <rshift>
 8016418:	443d      	add	r5, r7
 801641a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801641e:	42ab      	cmp	r3, r5
 8016420:	da4c      	bge.n	80164bc <__gethex+0x2a4>
 8016422:	ee18 0a10 	vmov	r0, s16
 8016426:	4621      	mov	r1, r4
 8016428:	f000 fb40 	bl	8016aac <_Bfree>
 801642c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801642e:	2300      	movs	r3, #0
 8016430:	6013      	str	r3, [r2, #0]
 8016432:	27a3      	movs	r7, #163	; 0xa3
 8016434:	e785      	b.n	8016342 <__gethex+0x12a>
 8016436:	1e73      	subs	r3, r6, #1
 8016438:	9a05      	ldr	r2, [sp, #20]
 801643a:	9303      	str	r3, [sp, #12]
 801643c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016440:	4293      	cmp	r3, r2
 8016442:	d019      	beq.n	8016478 <__gethex+0x260>
 8016444:	f1bb 0f20 	cmp.w	fp, #32
 8016448:	d107      	bne.n	801645a <__gethex+0x242>
 801644a:	9b02      	ldr	r3, [sp, #8]
 801644c:	9a00      	ldr	r2, [sp, #0]
 801644e:	f843 2b04 	str.w	r2, [r3], #4
 8016452:	9302      	str	r3, [sp, #8]
 8016454:	2300      	movs	r3, #0
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	469b      	mov	fp, r3
 801645a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801645e:	f7ff fec6 	bl	80161ee <__hexdig_fun>
 8016462:	9b00      	ldr	r3, [sp, #0]
 8016464:	f000 000f 	and.w	r0, r0, #15
 8016468:	fa00 f00b 	lsl.w	r0, r0, fp
 801646c:	4303      	orrs	r3, r0
 801646e:	9300      	str	r3, [sp, #0]
 8016470:	f10b 0b04 	add.w	fp, fp, #4
 8016474:	9b03      	ldr	r3, [sp, #12]
 8016476:	e00d      	b.n	8016494 <__gethex+0x27c>
 8016478:	9b03      	ldr	r3, [sp, #12]
 801647a:	9a06      	ldr	r2, [sp, #24]
 801647c:	4413      	add	r3, r2
 801647e:	42bb      	cmp	r3, r7
 8016480:	d3e0      	bcc.n	8016444 <__gethex+0x22c>
 8016482:	4618      	mov	r0, r3
 8016484:	9901      	ldr	r1, [sp, #4]
 8016486:	9307      	str	r3, [sp, #28]
 8016488:	4652      	mov	r2, sl
 801648a:	f001 fced 	bl	8017e68 <strncmp>
 801648e:	9b07      	ldr	r3, [sp, #28]
 8016490:	2800      	cmp	r0, #0
 8016492:	d1d7      	bne.n	8016444 <__gethex+0x22c>
 8016494:	461e      	mov	r6, r3
 8016496:	e78b      	b.n	80163b0 <__gethex+0x198>
 8016498:	f04f 0a03 	mov.w	sl, #3
 801649c:	e7b8      	b.n	8016410 <__gethex+0x1f8>
 801649e:	da0a      	bge.n	80164b6 <__gethex+0x29e>
 80164a0:	1a37      	subs	r7, r6, r0
 80164a2:	4621      	mov	r1, r4
 80164a4:	ee18 0a10 	vmov	r0, s16
 80164a8:	463a      	mov	r2, r7
 80164aa:	f000 fd1b 	bl	8016ee4 <__lshift>
 80164ae:	1bed      	subs	r5, r5, r7
 80164b0:	4604      	mov	r4, r0
 80164b2:	f100 0914 	add.w	r9, r0, #20
 80164b6:	f04f 0a00 	mov.w	sl, #0
 80164ba:	e7ae      	b.n	801641a <__gethex+0x202>
 80164bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80164c0:	42a8      	cmp	r0, r5
 80164c2:	dd72      	ble.n	80165aa <__gethex+0x392>
 80164c4:	1b45      	subs	r5, r0, r5
 80164c6:	42ae      	cmp	r6, r5
 80164c8:	dc36      	bgt.n	8016538 <__gethex+0x320>
 80164ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	d02a      	beq.n	8016528 <__gethex+0x310>
 80164d2:	2b03      	cmp	r3, #3
 80164d4:	d02c      	beq.n	8016530 <__gethex+0x318>
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d11c      	bne.n	8016514 <__gethex+0x2fc>
 80164da:	42ae      	cmp	r6, r5
 80164dc:	d11a      	bne.n	8016514 <__gethex+0x2fc>
 80164de:	2e01      	cmp	r6, #1
 80164e0:	d112      	bne.n	8016508 <__gethex+0x2f0>
 80164e2:	9a04      	ldr	r2, [sp, #16]
 80164e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80164e8:	6013      	str	r3, [r2, #0]
 80164ea:	2301      	movs	r3, #1
 80164ec:	6123      	str	r3, [r4, #16]
 80164ee:	f8c9 3000 	str.w	r3, [r9]
 80164f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80164f4:	2762      	movs	r7, #98	; 0x62
 80164f6:	601c      	str	r4, [r3, #0]
 80164f8:	e723      	b.n	8016342 <__gethex+0x12a>
 80164fa:	bf00      	nop
 80164fc:	08058ac4 	.word	0x08058ac4
 8016500:	080589ea 	.word	0x080589ea
 8016504:	08058a5c 	.word	0x08058a5c
 8016508:	1e71      	subs	r1, r6, #1
 801650a:	4620      	mov	r0, r4
 801650c:	f000 ff2e 	bl	801736c <__any_on>
 8016510:	2800      	cmp	r0, #0
 8016512:	d1e6      	bne.n	80164e2 <__gethex+0x2ca>
 8016514:	ee18 0a10 	vmov	r0, s16
 8016518:	4621      	mov	r1, r4
 801651a:	f000 fac7 	bl	8016aac <_Bfree>
 801651e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016520:	2300      	movs	r3, #0
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	2750      	movs	r7, #80	; 0x50
 8016526:	e70c      	b.n	8016342 <__gethex+0x12a>
 8016528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801652a:	2b00      	cmp	r3, #0
 801652c:	d1f2      	bne.n	8016514 <__gethex+0x2fc>
 801652e:	e7d8      	b.n	80164e2 <__gethex+0x2ca>
 8016530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016532:	2b00      	cmp	r3, #0
 8016534:	d1d5      	bne.n	80164e2 <__gethex+0x2ca>
 8016536:	e7ed      	b.n	8016514 <__gethex+0x2fc>
 8016538:	1e6f      	subs	r7, r5, #1
 801653a:	f1ba 0f00 	cmp.w	sl, #0
 801653e:	d131      	bne.n	80165a4 <__gethex+0x38c>
 8016540:	b127      	cbz	r7, 801654c <__gethex+0x334>
 8016542:	4639      	mov	r1, r7
 8016544:	4620      	mov	r0, r4
 8016546:	f000 ff11 	bl	801736c <__any_on>
 801654a:	4682      	mov	sl, r0
 801654c:	117b      	asrs	r3, r7, #5
 801654e:	2101      	movs	r1, #1
 8016550:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016554:	f007 071f 	and.w	r7, r7, #31
 8016558:	fa01 f707 	lsl.w	r7, r1, r7
 801655c:	421f      	tst	r7, r3
 801655e:	4629      	mov	r1, r5
 8016560:	4620      	mov	r0, r4
 8016562:	bf18      	it	ne
 8016564:	f04a 0a02 	orrne.w	sl, sl, #2
 8016568:	1b76      	subs	r6, r6, r5
 801656a:	f7ff fdee 	bl	801614a <rshift>
 801656e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016572:	2702      	movs	r7, #2
 8016574:	f1ba 0f00 	cmp.w	sl, #0
 8016578:	d048      	beq.n	801660c <__gethex+0x3f4>
 801657a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d015      	beq.n	80165ae <__gethex+0x396>
 8016582:	2b03      	cmp	r3, #3
 8016584:	d017      	beq.n	80165b6 <__gethex+0x39e>
 8016586:	2b01      	cmp	r3, #1
 8016588:	d109      	bne.n	801659e <__gethex+0x386>
 801658a:	f01a 0f02 	tst.w	sl, #2
 801658e:	d006      	beq.n	801659e <__gethex+0x386>
 8016590:	f8d9 0000 	ldr.w	r0, [r9]
 8016594:	ea4a 0a00 	orr.w	sl, sl, r0
 8016598:	f01a 0f01 	tst.w	sl, #1
 801659c:	d10e      	bne.n	80165bc <__gethex+0x3a4>
 801659e:	f047 0710 	orr.w	r7, r7, #16
 80165a2:	e033      	b.n	801660c <__gethex+0x3f4>
 80165a4:	f04f 0a01 	mov.w	sl, #1
 80165a8:	e7d0      	b.n	801654c <__gethex+0x334>
 80165aa:	2701      	movs	r7, #1
 80165ac:	e7e2      	b.n	8016574 <__gethex+0x35c>
 80165ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165b0:	f1c3 0301 	rsb	r3, r3, #1
 80165b4:	9315      	str	r3, [sp, #84]	; 0x54
 80165b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d0f0      	beq.n	801659e <__gethex+0x386>
 80165bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80165c0:	f104 0314 	add.w	r3, r4, #20
 80165c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80165c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80165cc:	f04f 0c00 	mov.w	ip, #0
 80165d0:	4618      	mov	r0, r3
 80165d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80165d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80165da:	d01c      	beq.n	8016616 <__gethex+0x3fe>
 80165dc:	3201      	adds	r2, #1
 80165de:	6002      	str	r2, [r0, #0]
 80165e0:	2f02      	cmp	r7, #2
 80165e2:	f104 0314 	add.w	r3, r4, #20
 80165e6:	d13f      	bne.n	8016668 <__gethex+0x450>
 80165e8:	f8d8 2000 	ldr.w	r2, [r8]
 80165ec:	3a01      	subs	r2, #1
 80165ee:	42b2      	cmp	r2, r6
 80165f0:	d10a      	bne.n	8016608 <__gethex+0x3f0>
 80165f2:	1171      	asrs	r1, r6, #5
 80165f4:	2201      	movs	r2, #1
 80165f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80165fa:	f006 061f 	and.w	r6, r6, #31
 80165fe:	fa02 f606 	lsl.w	r6, r2, r6
 8016602:	421e      	tst	r6, r3
 8016604:	bf18      	it	ne
 8016606:	4617      	movne	r7, r2
 8016608:	f047 0720 	orr.w	r7, r7, #32
 801660c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801660e:	601c      	str	r4, [r3, #0]
 8016610:	9b04      	ldr	r3, [sp, #16]
 8016612:	601d      	str	r5, [r3, #0]
 8016614:	e695      	b.n	8016342 <__gethex+0x12a>
 8016616:	4299      	cmp	r1, r3
 8016618:	f843 cc04 	str.w	ip, [r3, #-4]
 801661c:	d8d8      	bhi.n	80165d0 <__gethex+0x3b8>
 801661e:	68a3      	ldr	r3, [r4, #8]
 8016620:	459b      	cmp	fp, r3
 8016622:	db19      	blt.n	8016658 <__gethex+0x440>
 8016624:	6861      	ldr	r1, [r4, #4]
 8016626:	ee18 0a10 	vmov	r0, s16
 801662a:	3101      	adds	r1, #1
 801662c:	f000 f9fe 	bl	8016a2c <_Balloc>
 8016630:	4681      	mov	r9, r0
 8016632:	b918      	cbnz	r0, 801663c <__gethex+0x424>
 8016634:	4b1a      	ldr	r3, [pc, #104]	; (80166a0 <__gethex+0x488>)
 8016636:	4602      	mov	r2, r0
 8016638:	2184      	movs	r1, #132	; 0x84
 801663a:	e6a8      	b.n	801638e <__gethex+0x176>
 801663c:	6922      	ldr	r2, [r4, #16]
 801663e:	3202      	adds	r2, #2
 8016640:	f104 010c 	add.w	r1, r4, #12
 8016644:	0092      	lsls	r2, r2, #2
 8016646:	300c      	adds	r0, #12
 8016648:	f7fc f8e2 	bl	8012810 <memcpy>
 801664c:	4621      	mov	r1, r4
 801664e:	ee18 0a10 	vmov	r0, s16
 8016652:	f000 fa2b 	bl	8016aac <_Bfree>
 8016656:	464c      	mov	r4, r9
 8016658:	6923      	ldr	r3, [r4, #16]
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016660:	6122      	str	r2, [r4, #16]
 8016662:	2201      	movs	r2, #1
 8016664:	615a      	str	r2, [r3, #20]
 8016666:	e7bb      	b.n	80165e0 <__gethex+0x3c8>
 8016668:	6922      	ldr	r2, [r4, #16]
 801666a:	455a      	cmp	r2, fp
 801666c:	dd0b      	ble.n	8016686 <__gethex+0x46e>
 801666e:	2101      	movs	r1, #1
 8016670:	4620      	mov	r0, r4
 8016672:	f7ff fd6a 	bl	801614a <rshift>
 8016676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801667a:	3501      	adds	r5, #1
 801667c:	42ab      	cmp	r3, r5
 801667e:	f6ff aed0 	blt.w	8016422 <__gethex+0x20a>
 8016682:	2701      	movs	r7, #1
 8016684:	e7c0      	b.n	8016608 <__gethex+0x3f0>
 8016686:	f016 061f 	ands.w	r6, r6, #31
 801668a:	d0fa      	beq.n	8016682 <__gethex+0x46a>
 801668c:	4453      	add	r3, sl
 801668e:	f1c6 0620 	rsb	r6, r6, #32
 8016692:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016696:	f000 fabb 	bl	8016c10 <__hi0bits>
 801669a:	42b0      	cmp	r0, r6
 801669c:	dbe7      	blt.n	801666e <__gethex+0x456>
 801669e:	e7f0      	b.n	8016682 <__gethex+0x46a>
 80166a0:	080589ea 	.word	0x080589ea

080166a4 <L_shift>:
 80166a4:	f1c2 0208 	rsb	r2, r2, #8
 80166a8:	0092      	lsls	r2, r2, #2
 80166aa:	b570      	push	{r4, r5, r6, lr}
 80166ac:	f1c2 0620 	rsb	r6, r2, #32
 80166b0:	6843      	ldr	r3, [r0, #4]
 80166b2:	6804      	ldr	r4, [r0, #0]
 80166b4:	fa03 f506 	lsl.w	r5, r3, r6
 80166b8:	432c      	orrs	r4, r5
 80166ba:	40d3      	lsrs	r3, r2
 80166bc:	6004      	str	r4, [r0, #0]
 80166be:	f840 3f04 	str.w	r3, [r0, #4]!
 80166c2:	4288      	cmp	r0, r1
 80166c4:	d3f4      	bcc.n	80166b0 <L_shift+0xc>
 80166c6:	bd70      	pop	{r4, r5, r6, pc}

080166c8 <__match>:
 80166c8:	b530      	push	{r4, r5, lr}
 80166ca:	6803      	ldr	r3, [r0, #0]
 80166cc:	3301      	adds	r3, #1
 80166ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166d2:	b914      	cbnz	r4, 80166da <__match+0x12>
 80166d4:	6003      	str	r3, [r0, #0]
 80166d6:	2001      	movs	r0, #1
 80166d8:	bd30      	pop	{r4, r5, pc}
 80166da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80166e2:	2d19      	cmp	r5, #25
 80166e4:	bf98      	it	ls
 80166e6:	3220      	addls	r2, #32
 80166e8:	42a2      	cmp	r2, r4
 80166ea:	d0f0      	beq.n	80166ce <__match+0x6>
 80166ec:	2000      	movs	r0, #0
 80166ee:	e7f3      	b.n	80166d8 <__match+0x10>

080166f0 <__hexnan>:
 80166f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f4:	680b      	ldr	r3, [r1, #0]
 80166f6:	115e      	asrs	r6, r3, #5
 80166f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80166fc:	f013 031f 	ands.w	r3, r3, #31
 8016700:	b087      	sub	sp, #28
 8016702:	bf18      	it	ne
 8016704:	3604      	addne	r6, #4
 8016706:	2500      	movs	r5, #0
 8016708:	1f37      	subs	r7, r6, #4
 801670a:	4690      	mov	r8, r2
 801670c:	6802      	ldr	r2, [r0, #0]
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	4682      	mov	sl, r0
 8016712:	f846 5c04 	str.w	r5, [r6, #-4]
 8016716:	46b9      	mov	r9, r7
 8016718:	463c      	mov	r4, r7
 801671a:	9502      	str	r5, [sp, #8]
 801671c:	46ab      	mov	fp, r5
 801671e:	7851      	ldrb	r1, [r2, #1]
 8016720:	1c53      	adds	r3, r2, #1
 8016722:	9303      	str	r3, [sp, #12]
 8016724:	b341      	cbz	r1, 8016778 <__hexnan+0x88>
 8016726:	4608      	mov	r0, r1
 8016728:	9205      	str	r2, [sp, #20]
 801672a:	9104      	str	r1, [sp, #16]
 801672c:	f7ff fd5f 	bl	80161ee <__hexdig_fun>
 8016730:	2800      	cmp	r0, #0
 8016732:	d14f      	bne.n	80167d4 <__hexnan+0xe4>
 8016734:	9904      	ldr	r1, [sp, #16]
 8016736:	9a05      	ldr	r2, [sp, #20]
 8016738:	2920      	cmp	r1, #32
 801673a:	d818      	bhi.n	801676e <__hexnan+0x7e>
 801673c:	9b02      	ldr	r3, [sp, #8]
 801673e:	459b      	cmp	fp, r3
 8016740:	dd13      	ble.n	801676a <__hexnan+0x7a>
 8016742:	454c      	cmp	r4, r9
 8016744:	d206      	bcs.n	8016754 <__hexnan+0x64>
 8016746:	2d07      	cmp	r5, #7
 8016748:	dc04      	bgt.n	8016754 <__hexnan+0x64>
 801674a:	462a      	mov	r2, r5
 801674c:	4649      	mov	r1, r9
 801674e:	4620      	mov	r0, r4
 8016750:	f7ff ffa8 	bl	80166a4 <L_shift>
 8016754:	4544      	cmp	r4, r8
 8016756:	d950      	bls.n	80167fa <__hexnan+0x10a>
 8016758:	2300      	movs	r3, #0
 801675a:	f1a4 0904 	sub.w	r9, r4, #4
 801675e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016762:	f8cd b008 	str.w	fp, [sp, #8]
 8016766:	464c      	mov	r4, r9
 8016768:	461d      	mov	r5, r3
 801676a:	9a03      	ldr	r2, [sp, #12]
 801676c:	e7d7      	b.n	801671e <__hexnan+0x2e>
 801676e:	2929      	cmp	r1, #41	; 0x29
 8016770:	d156      	bne.n	8016820 <__hexnan+0x130>
 8016772:	3202      	adds	r2, #2
 8016774:	f8ca 2000 	str.w	r2, [sl]
 8016778:	f1bb 0f00 	cmp.w	fp, #0
 801677c:	d050      	beq.n	8016820 <__hexnan+0x130>
 801677e:	454c      	cmp	r4, r9
 8016780:	d206      	bcs.n	8016790 <__hexnan+0xa0>
 8016782:	2d07      	cmp	r5, #7
 8016784:	dc04      	bgt.n	8016790 <__hexnan+0xa0>
 8016786:	462a      	mov	r2, r5
 8016788:	4649      	mov	r1, r9
 801678a:	4620      	mov	r0, r4
 801678c:	f7ff ff8a 	bl	80166a4 <L_shift>
 8016790:	4544      	cmp	r4, r8
 8016792:	d934      	bls.n	80167fe <__hexnan+0x10e>
 8016794:	f1a8 0204 	sub.w	r2, r8, #4
 8016798:	4623      	mov	r3, r4
 801679a:	f853 1b04 	ldr.w	r1, [r3], #4
 801679e:	f842 1f04 	str.w	r1, [r2, #4]!
 80167a2:	429f      	cmp	r7, r3
 80167a4:	d2f9      	bcs.n	801679a <__hexnan+0xaa>
 80167a6:	1b3b      	subs	r3, r7, r4
 80167a8:	f023 0303 	bic.w	r3, r3, #3
 80167ac:	3304      	adds	r3, #4
 80167ae:	3401      	adds	r4, #1
 80167b0:	3e03      	subs	r6, #3
 80167b2:	42b4      	cmp	r4, r6
 80167b4:	bf88      	it	hi
 80167b6:	2304      	movhi	r3, #4
 80167b8:	4443      	add	r3, r8
 80167ba:	2200      	movs	r2, #0
 80167bc:	f843 2b04 	str.w	r2, [r3], #4
 80167c0:	429f      	cmp	r7, r3
 80167c2:	d2fb      	bcs.n	80167bc <__hexnan+0xcc>
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	b91b      	cbnz	r3, 80167d0 <__hexnan+0xe0>
 80167c8:	4547      	cmp	r7, r8
 80167ca:	d127      	bne.n	801681c <__hexnan+0x12c>
 80167cc:	2301      	movs	r3, #1
 80167ce:	603b      	str	r3, [r7, #0]
 80167d0:	2005      	movs	r0, #5
 80167d2:	e026      	b.n	8016822 <__hexnan+0x132>
 80167d4:	3501      	adds	r5, #1
 80167d6:	2d08      	cmp	r5, #8
 80167d8:	f10b 0b01 	add.w	fp, fp, #1
 80167dc:	dd06      	ble.n	80167ec <__hexnan+0xfc>
 80167de:	4544      	cmp	r4, r8
 80167e0:	d9c3      	bls.n	801676a <__hexnan+0x7a>
 80167e2:	2300      	movs	r3, #0
 80167e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80167e8:	2501      	movs	r5, #1
 80167ea:	3c04      	subs	r4, #4
 80167ec:	6822      	ldr	r2, [r4, #0]
 80167ee:	f000 000f 	and.w	r0, r0, #15
 80167f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80167f6:	6022      	str	r2, [r4, #0]
 80167f8:	e7b7      	b.n	801676a <__hexnan+0x7a>
 80167fa:	2508      	movs	r5, #8
 80167fc:	e7b5      	b.n	801676a <__hexnan+0x7a>
 80167fe:	9b01      	ldr	r3, [sp, #4]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d0df      	beq.n	80167c4 <__hexnan+0xd4>
 8016804:	f04f 32ff 	mov.w	r2, #4294967295
 8016808:	f1c3 0320 	rsb	r3, r3, #32
 801680c:	fa22 f303 	lsr.w	r3, r2, r3
 8016810:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016814:	401a      	ands	r2, r3
 8016816:	f846 2c04 	str.w	r2, [r6, #-4]
 801681a:	e7d3      	b.n	80167c4 <__hexnan+0xd4>
 801681c:	3f04      	subs	r7, #4
 801681e:	e7d1      	b.n	80167c4 <__hexnan+0xd4>
 8016820:	2004      	movs	r0, #4
 8016822:	b007      	add	sp, #28
 8016824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016828 <_findenv_r>:
 8016828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801682c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801689c <_findenv_r+0x74>
 8016830:	4607      	mov	r7, r0
 8016832:	4689      	mov	r9, r1
 8016834:	4616      	mov	r6, r2
 8016836:	f001 fbf1 	bl	801801c <__env_lock>
 801683a:	f8da 4000 	ldr.w	r4, [sl]
 801683e:	b134      	cbz	r4, 801684e <_findenv_r+0x26>
 8016840:	464b      	mov	r3, r9
 8016842:	4698      	mov	r8, r3
 8016844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016848:	b13a      	cbz	r2, 801685a <_findenv_r+0x32>
 801684a:	2a3d      	cmp	r2, #61	; 0x3d
 801684c:	d1f9      	bne.n	8016842 <_findenv_r+0x1a>
 801684e:	4638      	mov	r0, r7
 8016850:	f001 fbea 	bl	8018028 <__env_unlock>
 8016854:	2000      	movs	r0, #0
 8016856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801685a:	eba8 0809 	sub.w	r8, r8, r9
 801685e:	46a3      	mov	fp, r4
 8016860:	f854 0b04 	ldr.w	r0, [r4], #4
 8016864:	2800      	cmp	r0, #0
 8016866:	d0f2      	beq.n	801684e <_findenv_r+0x26>
 8016868:	4642      	mov	r2, r8
 801686a:	4649      	mov	r1, r9
 801686c:	f001 fafc 	bl	8017e68 <strncmp>
 8016870:	2800      	cmp	r0, #0
 8016872:	d1f4      	bne.n	801685e <_findenv_r+0x36>
 8016874:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016878:	eb03 0508 	add.w	r5, r3, r8
 801687c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016880:	2b3d      	cmp	r3, #61	; 0x3d
 8016882:	d1ec      	bne.n	801685e <_findenv_r+0x36>
 8016884:	f8da 3000 	ldr.w	r3, [sl]
 8016888:	ebab 0303 	sub.w	r3, fp, r3
 801688c:	109b      	asrs	r3, r3, #2
 801688e:	4638      	mov	r0, r7
 8016890:	6033      	str	r3, [r6, #0]
 8016892:	f001 fbc9 	bl	8018028 <__env_unlock>
 8016896:	1c68      	adds	r0, r5, #1
 8016898:	e7dd      	b.n	8016856 <_findenv_r+0x2e>
 801689a:	bf00      	nop
 801689c:	200001d8 	.word	0x200001d8

080168a0 <_getenv_r>:
 80168a0:	b507      	push	{r0, r1, r2, lr}
 80168a2:	aa01      	add	r2, sp, #4
 80168a4:	f7ff ffc0 	bl	8016828 <_findenv_r>
 80168a8:	b003      	add	sp, #12
 80168aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080168b0 <__gettzinfo>:
 80168b0:	4800      	ldr	r0, [pc, #0]	; (80168b4 <__gettzinfo+0x4>)
 80168b2:	4770      	bx	lr
 80168b4:	20000390 	.word	0x20000390

080168b8 <_localeconv_r>:
 80168b8:	4800      	ldr	r0, [pc, #0]	; (80168bc <_localeconv_r+0x4>)
 80168ba:	4770      	bx	lr
 80168bc:	200004dc 	.word	0x200004dc

080168c0 <__retarget_lock_init_recursive>:
 80168c0:	4770      	bx	lr

080168c2 <__retarget_lock_acquire>:
 80168c2:	4770      	bx	lr

080168c4 <__retarget_lock_acquire_recursive>:
 80168c4:	4770      	bx	lr

080168c6 <__retarget_lock_release>:
 80168c6:	4770      	bx	lr

080168c8 <__retarget_lock_release_recursive>:
 80168c8:	4770      	bx	lr
	...

080168cc <_lseek_r>:
 80168cc:	b538      	push	{r3, r4, r5, lr}
 80168ce:	4d07      	ldr	r5, [pc, #28]	; (80168ec <_lseek_r+0x20>)
 80168d0:	4604      	mov	r4, r0
 80168d2:	4608      	mov	r0, r1
 80168d4:	4611      	mov	r1, r2
 80168d6:	2200      	movs	r2, #0
 80168d8:	602a      	str	r2, [r5, #0]
 80168da:	461a      	mov	r2, r3
 80168dc:	f7ed feca 	bl	8004674 <_lseek>
 80168e0:	1c43      	adds	r3, r0, #1
 80168e2:	d102      	bne.n	80168ea <_lseek_r+0x1e>
 80168e4:	682b      	ldr	r3, [r5, #0]
 80168e6:	b103      	cbz	r3, 80168ea <_lseek_r+0x1e>
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	bd38      	pop	{r3, r4, r5, pc}
 80168ec:	20005e04 	.word	0x20005e04

080168f0 <__swhatbuf_r>:
 80168f0:	b570      	push	{r4, r5, r6, lr}
 80168f2:	460e      	mov	r6, r1
 80168f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168f8:	2900      	cmp	r1, #0
 80168fa:	b096      	sub	sp, #88	; 0x58
 80168fc:	4614      	mov	r4, r2
 80168fe:	461d      	mov	r5, r3
 8016900:	da08      	bge.n	8016914 <__swhatbuf_r+0x24>
 8016902:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016906:	2200      	movs	r2, #0
 8016908:	602a      	str	r2, [r5, #0]
 801690a:	061a      	lsls	r2, r3, #24
 801690c:	d410      	bmi.n	8016930 <__swhatbuf_r+0x40>
 801690e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016912:	e00e      	b.n	8016932 <__swhatbuf_r+0x42>
 8016914:	466a      	mov	r2, sp
 8016916:	f001 fb8d 	bl	8018034 <_fstat_r>
 801691a:	2800      	cmp	r0, #0
 801691c:	dbf1      	blt.n	8016902 <__swhatbuf_r+0x12>
 801691e:	9a01      	ldr	r2, [sp, #4]
 8016920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016928:	425a      	negs	r2, r3
 801692a:	415a      	adcs	r2, r3
 801692c:	602a      	str	r2, [r5, #0]
 801692e:	e7ee      	b.n	801690e <__swhatbuf_r+0x1e>
 8016930:	2340      	movs	r3, #64	; 0x40
 8016932:	2000      	movs	r0, #0
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	b016      	add	sp, #88	; 0x58
 8016938:	bd70      	pop	{r4, r5, r6, pc}
	...

0801693c <__smakebuf_r>:
 801693c:	898b      	ldrh	r3, [r1, #12]
 801693e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016940:	079d      	lsls	r5, r3, #30
 8016942:	4606      	mov	r6, r0
 8016944:	460c      	mov	r4, r1
 8016946:	d507      	bpl.n	8016958 <__smakebuf_r+0x1c>
 8016948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801694c:	6023      	str	r3, [r4, #0]
 801694e:	6123      	str	r3, [r4, #16]
 8016950:	2301      	movs	r3, #1
 8016952:	6163      	str	r3, [r4, #20]
 8016954:	b002      	add	sp, #8
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	ab01      	add	r3, sp, #4
 801695a:	466a      	mov	r2, sp
 801695c:	f7ff ffc8 	bl	80168f0 <__swhatbuf_r>
 8016960:	9900      	ldr	r1, [sp, #0]
 8016962:	4605      	mov	r5, r0
 8016964:	4630      	mov	r0, r6
 8016966:	f7fc fa47 	bl	8012df8 <_malloc_r>
 801696a:	b948      	cbnz	r0, 8016980 <__smakebuf_r+0x44>
 801696c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016970:	059a      	lsls	r2, r3, #22
 8016972:	d4ef      	bmi.n	8016954 <__smakebuf_r+0x18>
 8016974:	f023 0303 	bic.w	r3, r3, #3
 8016978:	f043 0302 	orr.w	r3, r3, #2
 801697c:	81a3      	strh	r3, [r4, #12]
 801697e:	e7e3      	b.n	8016948 <__smakebuf_r+0xc>
 8016980:	4b0d      	ldr	r3, [pc, #52]	; (80169b8 <__smakebuf_r+0x7c>)
 8016982:	62b3      	str	r3, [r6, #40]	; 0x28
 8016984:	89a3      	ldrh	r3, [r4, #12]
 8016986:	6020      	str	r0, [r4, #0]
 8016988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801698c:	81a3      	strh	r3, [r4, #12]
 801698e:	9b00      	ldr	r3, [sp, #0]
 8016990:	6163      	str	r3, [r4, #20]
 8016992:	9b01      	ldr	r3, [sp, #4]
 8016994:	6120      	str	r0, [r4, #16]
 8016996:	b15b      	cbz	r3, 80169b0 <__smakebuf_r+0x74>
 8016998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801699c:	4630      	mov	r0, r6
 801699e:	f001 fb5b 	bl	8018058 <_isatty_r>
 80169a2:	b128      	cbz	r0, 80169b0 <__smakebuf_r+0x74>
 80169a4:	89a3      	ldrh	r3, [r4, #12]
 80169a6:	f023 0303 	bic.w	r3, r3, #3
 80169aa:	f043 0301 	orr.w	r3, r3, #1
 80169ae:	81a3      	strh	r3, [r4, #12]
 80169b0:	89a0      	ldrh	r0, [r4, #12]
 80169b2:	4305      	orrs	r5, r0
 80169b4:	81a5      	strh	r5, [r4, #12]
 80169b6:	e7cd      	b.n	8016954 <__smakebuf_r+0x18>
 80169b8:	08015fa9 	.word	0x08015fa9

080169bc <__ascii_mbtowc>:
 80169bc:	b082      	sub	sp, #8
 80169be:	b901      	cbnz	r1, 80169c2 <__ascii_mbtowc+0x6>
 80169c0:	a901      	add	r1, sp, #4
 80169c2:	b142      	cbz	r2, 80169d6 <__ascii_mbtowc+0x1a>
 80169c4:	b14b      	cbz	r3, 80169da <__ascii_mbtowc+0x1e>
 80169c6:	7813      	ldrb	r3, [r2, #0]
 80169c8:	600b      	str	r3, [r1, #0]
 80169ca:	7812      	ldrb	r2, [r2, #0]
 80169cc:	1e10      	subs	r0, r2, #0
 80169ce:	bf18      	it	ne
 80169d0:	2001      	movne	r0, #1
 80169d2:	b002      	add	sp, #8
 80169d4:	4770      	bx	lr
 80169d6:	4610      	mov	r0, r2
 80169d8:	e7fb      	b.n	80169d2 <__ascii_mbtowc+0x16>
 80169da:	f06f 0001 	mvn.w	r0, #1
 80169de:	e7f8      	b.n	80169d2 <__ascii_mbtowc+0x16>

080169e0 <memmove>:
 80169e0:	4288      	cmp	r0, r1
 80169e2:	b510      	push	{r4, lr}
 80169e4:	eb01 0402 	add.w	r4, r1, r2
 80169e8:	d902      	bls.n	80169f0 <memmove+0x10>
 80169ea:	4284      	cmp	r4, r0
 80169ec:	4623      	mov	r3, r4
 80169ee:	d807      	bhi.n	8016a00 <memmove+0x20>
 80169f0:	1e43      	subs	r3, r0, #1
 80169f2:	42a1      	cmp	r1, r4
 80169f4:	d008      	beq.n	8016a08 <memmove+0x28>
 80169f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80169fe:	e7f8      	b.n	80169f2 <memmove+0x12>
 8016a00:	4402      	add	r2, r0
 8016a02:	4601      	mov	r1, r0
 8016a04:	428a      	cmp	r2, r1
 8016a06:	d100      	bne.n	8016a0a <memmove+0x2a>
 8016a08:	bd10      	pop	{r4, pc}
 8016a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a12:	e7f7      	b.n	8016a04 <memmove+0x24>

08016a14 <__malloc_lock>:
 8016a14:	4801      	ldr	r0, [pc, #4]	; (8016a1c <__malloc_lock+0x8>)
 8016a16:	f7ff bf55 	b.w	80168c4 <__retarget_lock_acquire_recursive>
 8016a1a:	bf00      	nop
 8016a1c:	20005dfd 	.word	0x20005dfd

08016a20 <__malloc_unlock>:
 8016a20:	4801      	ldr	r0, [pc, #4]	; (8016a28 <__malloc_unlock+0x8>)
 8016a22:	f7ff bf51 	b.w	80168c8 <__retarget_lock_release_recursive>
 8016a26:	bf00      	nop
 8016a28:	20005dfd 	.word	0x20005dfd

08016a2c <_Balloc>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016a30:	4604      	mov	r4, r0
 8016a32:	460d      	mov	r5, r1
 8016a34:	b976      	cbnz	r6, 8016a54 <_Balloc+0x28>
 8016a36:	2010      	movs	r0, #16
 8016a38:	f7fb feda 	bl	80127f0 <malloc>
 8016a3c:	4602      	mov	r2, r0
 8016a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8016a40:	b920      	cbnz	r0, 8016a4c <_Balloc+0x20>
 8016a42:	4b18      	ldr	r3, [pc, #96]	; (8016aa4 <_Balloc+0x78>)
 8016a44:	4818      	ldr	r0, [pc, #96]	; (8016aa8 <_Balloc+0x7c>)
 8016a46:	2166      	movs	r1, #102	; 0x66
 8016a48:	f7fb fe70 	bl	801272c <__assert_func>
 8016a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a50:	6006      	str	r6, [r0, #0]
 8016a52:	60c6      	str	r6, [r0, #12]
 8016a54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016a56:	68f3      	ldr	r3, [r6, #12]
 8016a58:	b183      	cbz	r3, 8016a7c <_Balloc+0x50>
 8016a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016a62:	b9b8      	cbnz	r0, 8016a94 <_Balloc+0x68>
 8016a64:	2101      	movs	r1, #1
 8016a66:	fa01 f605 	lsl.w	r6, r1, r5
 8016a6a:	1d72      	adds	r2, r6, #5
 8016a6c:	0092      	lsls	r2, r2, #2
 8016a6e:	4620      	mov	r0, r4
 8016a70:	f000 fc9d 	bl	80173ae <_calloc_r>
 8016a74:	b160      	cbz	r0, 8016a90 <_Balloc+0x64>
 8016a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016a7a:	e00e      	b.n	8016a9a <_Balloc+0x6e>
 8016a7c:	2221      	movs	r2, #33	; 0x21
 8016a7e:	2104      	movs	r1, #4
 8016a80:	4620      	mov	r0, r4
 8016a82:	f000 fc94 	bl	80173ae <_calloc_r>
 8016a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a88:	60f0      	str	r0, [r6, #12]
 8016a8a:	68db      	ldr	r3, [r3, #12]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d1e4      	bne.n	8016a5a <_Balloc+0x2e>
 8016a90:	2000      	movs	r0, #0
 8016a92:	bd70      	pop	{r4, r5, r6, pc}
 8016a94:	6802      	ldr	r2, [r0, #0]
 8016a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016aa0:	e7f7      	b.n	8016a92 <_Balloc+0x66>
 8016aa2:	bf00      	nop
 8016aa4:	080585e8 	.word	0x080585e8
 8016aa8:	08058b38 	.word	0x08058b38

08016aac <_Bfree>:
 8016aac:	b570      	push	{r4, r5, r6, lr}
 8016aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016ab0:	4605      	mov	r5, r0
 8016ab2:	460c      	mov	r4, r1
 8016ab4:	b976      	cbnz	r6, 8016ad4 <_Bfree+0x28>
 8016ab6:	2010      	movs	r0, #16
 8016ab8:	f7fb fe9a 	bl	80127f0 <malloc>
 8016abc:	4602      	mov	r2, r0
 8016abe:	6268      	str	r0, [r5, #36]	; 0x24
 8016ac0:	b920      	cbnz	r0, 8016acc <_Bfree+0x20>
 8016ac2:	4b09      	ldr	r3, [pc, #36]	; (8016ae8 <_Bfree+0x3c>)
 8016ac4:	4809      	ldr	r0, [pc, #36]	; (8016aec <_Bfree+0x40>)
 8016ac6:	218a      	movs	r1, #138	; 0x8a
 8016ac8:	f7fb fe30 	bl	801272c <__assert_func>
 8016acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ad0:	6006      	str	r6, [r0, #0]
 8016ad2:	60c6      	str	r6, [r0, #12]
 8016ad4:	b13c      	cbz	r4, 8016ae6 <_Bfree+0x3a>
 8016ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016ad8:	6862      	ldr	r2, [r4, #4]
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ae0:	6021      	str	r1, [r4, #0]
 8016ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016ae6:	bd70      	pop	{r4, r5, r6, pc}
 8016ae8:	080585e8 	.word	0x080585e8
 8016aec:	08058b38 	.word	0x08058b38

08016af0 <__multadd>:
 8016af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af4:	690d      	ldr	r5, [r1, #16]
 8016af6:	4607      	mov	r7, r0
 8016af8:	460c      	mov	r4, r1
 8016afa:	461e      	mov	r6, r3
 8016afc:	f101 0c14 	add.w	ip, r1, #20
 8016b00:	2000      	movs	r0, #0
 8016b02:	f8dc 3000 	ldr.w	r3, [ip]
 8016b06:	b299      	uxth	r1, r3
 8016b08:	fb02 6101 	mla	r1, r2, r1, r6
 8016b0c:	0c1e      	lsrs	r6, r3, #16
 8016b0e:	0c0b      	lsrs	r3, r1, #16
 8016b10:	fb02 3306 	mla	r3, r2, r6, r3
 8016b14:	b289      	uxth	r1, r1
 8016b16:	3001      	adds	r0, #1
 8016b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016b1c:	4285      	cmp	r5, r0
 8016b1e:	f84c 1b04 	str.w	r1, [ip], #4
 8016b22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016b26:	dcec      	bgt.n	8016b02 <__multadd+0x12>
 8016b28:	b30e      	cbz	r6, 8016b6e <__multadd+0x7e>
 8016b2a:	68a3      	ldr	r3, [r4, #8]
 8016b2c:	42ab      	cmp	r3, r5
 8016b2e:	dc19      	bgt.n	8016b64 <__multadd+0x74>
 8016b30:	6861      	ldr	r1, [r4, #4]
 8016b32:	4638      	mov	r0, r7
 8016b34:	3101      	adds	r1, #1
 8016b36:	f7ff ff79 	bl	8016a2c <_Balloc>
 8016b3a:	4680      	mov	r8, r0
 8016b3c:	b928      	cbnz	r0, 8016b4a <__multadd+0x5a>
 8016b3e:	4602      	mov	r2, r0
 8016b40:	4b0c      	ldr	r3, [pc, #48]	; (8016b74 <__multadd+0x84>)
 8016b42:	480d      	ldr	r0, [pc, #52]	; (8016b78 <__multadd+0x88>)
 8016b44:	21b5      	movs	r1, #181	; 0xb5
 8016b46:	f7fb fdf1 	bl	801272c <__assert_func>
 8016b4a:	6922      	ldr	r2, [r4, #16]
 8016b4c:	3202      	adds	r2, #2
 8016b4e:	f104 010c 	add.w	r1, r4, #12
 8016b52:	0092      	lsls	r2, r2, #2
 8016b54:	300c      	adds	r0, #12
 8016b56:	f7fb fe5b 	bl	8012810 <memcpy>
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	f7ff ffa5 	bl	8016aac <_Bfree>
 8016b62:	4644      	mov	r4, r8
 8016b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016b68:	3501      	adds	r5, #1
 8016b6a:	615e      	str	r6, [r3, #20]
 8016b6c:	6125      	str	r5, [r4, #16]
 8016b6e:	4620      	mov	r0, r4
 8016b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b74:	080589ea 	.word	0x080589ea
 8016b78:	08058b38 	.word	0x08058b38

08016b7c <__s2b>:
 8016b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b80:	460c      	mov	r4, r1
 8016b82:	4615      	mov	r5, r2
 8016b84:	461f      	mov	r7, r3
 8016b86:	2209      	movs	r2, #9
 8016b88:	3308      	adds	r3, #8
 8016b8a:	4606      	mov	r6, r0
 8016b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b90:	2100      	movs	r1, #0
 8016b92:	2201      	movs	r2, #1
 8016b94:	429a      	cmp	r2, r3
 8016b96:	db09      	blt.n	8016bac <__s2b+0x30>
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f7ff ff47 	bl	8016a2c <_Balloc>
 8016b9e:	b940      	cbnz	r0, 8016bb2 <__s2b+0x36>
 8016ba0:	4602      	mov	r2, r0
 8016ba2:	4b19      	ldr	r3, [pc, #100]	; (8016c08 <__s2b+0x8c>)
 8016ba4:	4819      	ldr	r0, [pc, #100]	; (8016c0c <__s2b+0x90>)
 8016ba6:	21ce      	movs	r1, #206	; 0xce
 8016ba8:	f7fb fdc0 	bl	801272c <__assert_func>
 8016bac:	0052      	lsls	r2, r2, #1
 8016bae:	3101      	adds	r1, #1
 8016bb0:	e7f0      	b.n	8016b94 <__s2b+0x18>
 8016bb2:	9b08      	ldr	r3, [sp, #32]
 8016bb4:	6143      	str	r3, [r0, #20]
 8016bb6:	2d09      	cmp	r5, #9
 8016bb8:	f04f 0301 	mov.w	r3, #1
 8016bbc:	6103      	str	r3, [r0, #16]
 8016bbe:	dd16      	ble.n	8016bee <__s2b+0x72>
 8016bc0:	f104 0909 	add.w	r9, r4, #9
 8016bc4:	46c8      	mov	r8, r9
 8016bc6:	442c      	add	r4, r5
 8016bc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016bcc:	4601      	mov	r1, r0
 8016bce:	3b30      	subs	r3, #48	; 0x30
 8016bd0:	220a      	movs	r2, #10
 8016bd2:	4630      	mov	r0, r6
 8016bd4:	f7ff ff8c 	bl	8016af0 <__multadd>
 8016bd8:	45a0      	cmp	r8, r4
 8016bda:	d1f5      	bne.n	8016bc8 <__s2b+0x4c>
 8016bdc:	f1a5 0408 	sub.w	r4, r5, #8
 8016be0:	444c      	add	r4, r9
 8016be2:	1b2d      	subs	r5, r5, r4
 8016be4:	1963      	adds	r3, r4, r5
 8016be6:	42bb      	cmp	r3, r7
 8016be8:	db04      	blt.n	8016bf4 <__s2b+0x78>
 8016bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bee:	340a      	adds	r4, #10
 8016bf0:	2509      	movs	r5, #9
 8016bf2:	e7f6      	b.n	8016be2 <__s2b+0x66>
 8016bf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016bf8:	4601      	mov	r1, r0
 8016bfa:	3b30      	subs	r3, #48	; 0x30
 8016bfc:	220a      	movs	r2, #10
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f7ff ff76 	bl	8016af0 <__multadd>
 8016c04:	e7ee      	b.n	8016be4 <__s2b+0x68>
 8016c06:	bf00      	nop
 8016c08:	080589ea 	.word	0x080589ea
 8016c0c:	08058b38 	.word	0x08058b38

08016c10 <__hi0bits>:
 8016c10:	0c03      	lsrs	r3, r0, #16
 8016c12:	041b      	lsls	r3, r3, #16
 8016c14:	b9d3      	cbnz	r3, 8016c4c <__hi0bits+0x3c>
 8016c16:	0400      	lsls	r0, r0, #16
 8016c18:	2310      	movs	r3, #16
 8016c1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016c1e:	bf04      	itt	eq
 8016c20:	0200      	lsleq	r0, r0, #8
 8016c22:	3308      	addeq	r3, #8
 8016c24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016c28:	bf04      	itt	eq
 8016c2a:	0100      	lsleq	r0, r0, #4
 8016c2c:	3304      	addeq	r3, #4
 8016c2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016c32:	bf04      	itt	eq
 8016c34:	0080      	lsleq	r0, r0, #2
 8016c36:	3302      	addeq	r3, #2
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	db05      	blt.n	8016c48 <__hi0bits+0x38>
 8016c3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016c40:	f103 0301 	add.w	r3, r3, #1
 8016c44:	bf08      	it	eq
 8016c46:	2320      	moveq	r3, #32
 8016c48:	4618      	mov	r0, r3
 8016c4a:	4770      	bx	lr
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	e7e4      	b.n	8016c1a <__hi0bits+0xa>

08016c50 <__lo0bits>:
 8016c50:	6803      	ldr	r3, [r0, #0]
 8016c52:	f013 0207 	ands.w	r2, r3, #7
 8016c56:	4601      	mov	r1, r0
 8016c58:	d00b      	beq.n	8016c72 <__lo0bits+0x22>
 8016c5a:	07da      	lsls	r2, r3, #31
 8016c5c:	d423      	bmi.n	8016ca6 <__lo0bits+0x56>
 8016c5e:	0798      	lsls	r0, r3, #30
 8016c60:	bf49      	itett	mi
 8016c62:	085b      	lsrmi	r3, r3, #1
 8016c64:	089b      	lsrpl	r3, r3, #2
 8016c66:	2001      	movmi	r0, #1
 8016c68:	600b      	strmi	r3, [r1, #0]
 8016c6a:	bf5c      	itt	pl
 8016c6c:	600b      	strpl	r3, [r1, #0]
 8016c6e:	2002      	movpl	r0, #2
 8016c70:	4770      	bx	lr
 8016c72:	b298      	uxth	r0, r3
 8016c74:	b9a8      	cbnz	r0, 8016ca2 <__lo0bits+0x52>
 8016c76:	0c1b      	lsrs	r3, r3, #16
 8016c78:	2010      	movs	r0, #16
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	b90a      	cbnz	r2, 8016c82 <__lo0bits+0x32>
 8016c7e:	3008      	adds	r0, #8
 8016c80:	0a1b      	lsrs	r3, r3, #8
 8016c82:	071a      	lsls	r2, r3, #28
 8016c84:	bf04      	itt	eq
 8016c86:	091b      	lsreq	r3, r3, #4
 8016c88:	3004      	addeq	r0, #4
 8016c8a:	079a      	lsls	r2, r3, #30
 8016c8c:	bf04      	itt	eq
 8016c8e:	089b      	lsreq	r3, r3, #2
 8016c90:	3002      	addeq	r0, #2
 8016c92:	07da      	lsls	r2, r3, #31
 8016c94:	d403      	bmi.n	8016c9e <__lo0bits+0x4e>
 8016c96:	085b      	lsrs	r3, r3, #1
 8016c98:	f100 0001 	add.w	r0, r0, #1
 8016c9c:	d005      	beq.n	8016caa <__lo0bits+0x5a>
 8016c9e:	600b      	str	r3, [r1, #0]
 8016ca0:	4770      	bx	lr
 8016ca2:	4610      	mov	r0, r2
 8016ca4:	e7e9      	b.n	8016c7a <__lo0bits+0x2a>
 8016ca6:	2000      	movs	r0, #0
 8016ca8:	4770      	bx	lr
 8016caa:	2020      	movs	r0, #32
 8016cac:	4770      	bx	lr
	...

08016cb0 <__i2b>:
 8016cb0:	b510      	push	{r4, lr}
 8016cb2:	460c      	mov	r4, r1
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	f7ff feb9 	bl	8016a2c <_Balloc>
 8016cba:	4602      	mov	r2, r0
 8016cbc:	b928      	cbnz	r0, 8016cca <__i2b+0x1a>
 8016cbe:	4b05      	ldr	r3, [pc, #20]	; (8016cd4 <__i2b+0x24>)
 8016cc0:	4805      	ldr	r0, [pc, #20]	; (8016cd8 <__i2b+0x28>)
 8016cc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016cc6:	f7fb fd31 	bl	801272c <__assert_func>
 8016cca:	2301      	movs	r3, #1
 8016ccc:	6144      	str	r4, [r0, #20]
 8016cce:	6103      	str	r3, [r0, #16]
 8016cd0:	bd10      	pop	{r4, pc}
 8016cd2:	bf00      	nop
 8016cd4:	080589ea 	.word	0x080589ea
 8016cd8:	08058b38 	.word	0x08058b38

08016cdc <__multiply>:
 8016cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce0:	4691      	mov	r9, r2
 8016ce2:	690a      	ldr	r2, [r1, #16]
 8016ce4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	bfb8      	it	lt
 8016cec:	460b      	movlt	r3, r1
 8016cee:	460c      	mov	r4, r1
 8016cf0:	bfbc      	itt	lt
 8016cf2:	464c      	movlt	r4, r9
 8016cf4:	4699      	movlt	r9, r3
 8016cf6:	6927      	ldr	r7, [r4, #16]
 8016cf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016cfc:	68a3      	ldr	r3, [r4, #8]
 8016cfe:	6861      	ldr	r1, [r4, #4]
 8016d00:	eb07 060a 	add.w	r6, r7, sl
 8016d04:	42b3      	cmp	r3, r6
 8016d06:	b085      	sub	sp, #20
 8016d08:	bfb8      	it	lt
 8016d0a:	3101      	addlt	r1, #1
 8016d0c:	f7ff fe8e 	bl	8016a2c <_Balloc>
 8016d10:	b930      	cbnz	r0, 8016d20 <__multiply+0x44>
 8016d12:	4602      	mov	r2, r0
 8016d14:	4b44      	ldr	r3, [pc, #272]	; (8016e28 <__multiply+0x14c>)
 8016d16:	4845      	ldr	r0, [pc, #276]	; (8016e2c <__multiply+0x150>)
 8016d18:	f240 115d 	movw	r1, #349	; 0x15d
 8016d1c:	f7fb fd06 	bl	801272c <__assert_func>
 8016d20:	f100 0514 	add.w	r5, r0, #20
 8016d24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016d28:	462b      	mov	r3, r5
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	4543      	cmp	r3, r8
 8016d2e:	d321      	bcc.n	8016d74 <__multiply+0x98>
 8016d30:	f104 0314 	add.w	r3, r4, #20
 8016d34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016d38:	f109 0314 	add.w	r3, r9, #20
 8016d3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016d40:	9202      	str	r2, [sp, #8]
 8016d42:	1b3a      	subs	r2, r7, r4
 8016d44:	3a15      	subs	r2, #21
 8016d46:	f022 0203 	bic.w	r2, r2, #3
 8016d4a:	3204      	adds	r2, #4
 8016d4c:	f104 0115 	add.w	r1, r4, #21
 8016d50:	428f      	cmp	r7, r1
 8016d52:	bf38      	it	cc
 8016d54:	2204      	movcc	r2, #4
 8016d56:	9201      	str	r2, [sp, #4]
 8016d58:	9a02      	ldr	r2, [sp, #8]
 8016d5a:	9303      	str	r3, [sp, #12]
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d80c      	bhi.n	8016d7a <__multiply+0x9e>
 8016d60:	2e00      	cmp	r6, #0
 8016d62:	dd03      	ble.n	8016d6c <__multiply+0x90>
 8016d64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d05a      	beq.n	8016e22 <__multiply+0x146>
 8016d6c:	6106      	str	r6, [r0, #16]
 8016d6e:	b005      	add	sp, #20
 8016d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d74:	f843 2b04 	str.w	r2, [r3], #4
 8016d78:	e7d8      	b.n	8016d2c <__multiply+0x50>
 8016d7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8016d7e:	f1ba 0f00 	cmp.w	sl, #0
 8016d82:	d024      	beq.n	8016dce <__multiply+0xf2>
 8016d84:	f104 0e14 	add.w	lr, r4, #20
 8016d88:	46a9      	mov	r9, r5
 8016d8a:	f04f 0c00 	mov.w	ip, #0
 8016d8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016d92:	f8d9 1000 	ldr.w	r1, [r9]
 8016d96:	fa1f fb82 	uxth.w	fp, r2
 8016d9a:	b289      	uxth	r1, r1
 8016d9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8016da0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016da4:	f8d9 2000 	ldr.w	r2, [r9]
 8016da8:	4461      	add	r1, ip
 8016daa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016dae:	fb0a c20b 	mla	r2, sl, fp, ip
 8016db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016db6:	b289      	uxth	r1, r1
 8016db8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016dbc:	4577      	cmp	r7, lr
 8016dbe:	f849 1b04 	str.w	r1, [r9], #4
 8016dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016dc6:	d8e2      	bhi.n	8016d8e <__multiply+0xb2>
 8016dc8:	9a01      	ldr	r2, [sp, #4]
 8016dca:	f845 c002 	str.w	ip, [r5, r2]
 8016dce:	9a03      	ldr	r2, [sp, #12]
 8016dd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016dd4:	3304      	adds	r3, #4
 8016dd6:	f1b9 0f00 	cmp.w	r9, #0
 8016dda:	d020      	beq.n	8016e1e <__multiply+0x142>
 8016ddc:	6829      	ldr	r1, [r5, #0]
 8016dde:	f104 0c14 	add.w	ip, r4, #20
 8016de2:	46ae      	mov	lr, r5
 8016de4:	f04f 0a00 	mov.w	sl, #0
 8016de8:	f8bc b000 	ldrh.w	fp, [ip]
 8016dec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016df0:	fb09 220b 	mla	r2, r9, fp, r2
 8016df4:	4492      	add	sl, r2
 8016df6:	b289      	uxth	r1, r1
 8016df8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016dfc:	f84e 1b04 	str.w	r1, [lr], #4
 8016e00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016e04:	f8be 1000 	ldrh.w	r1, [lr]
 8016e08:	0c12      	lsrs	r2, r2, #16
 8016e0a:	fb09 1102 	mla	r1, r9, r2, r1
 8016e0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016e12:	4567      	cmp	r7, ip
 8016e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016e18:	d8e6      	bhi.n	8016de8 <__multiply+0x10c>
 8016e1a:	9a01      	ldr	r2, [sp, #4]
 8016e1c:	50a9      	str	r1, [r5, r2]
 8016e1e:	3504      	adds	r5, #4
 8016e20:	e79a      	b.n	8016d58 <__multiply+0x7c>
 8016e22:	3e01      	subs	r6, #1
 8016e24:	e79c      	b.n	8016d60 <__multiply+0x84>
 8016e26:	bf00      	nop
 8016e28:	080589ea 	.word	0x080589ea
 8016e2c:	08058b38 	.word	0x08058b38

08016e30 <__pow5mult>:
 8016e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e34:	4615      	mov	r5, r2
 8016e36:	f012 0203 	ands.w	r2, r2, #3
 8016e3a:	4606      	mov	r6, r0
 8016e3c:	460f      	mov	r7, r1
 8016e3e:	d007      	beq.n	8016e50 <__pow5mult+0x20>
 8016e40:	4c25      	ldr	r4, [pc, #148]	; (8016ed8 <__pow5mult+0xa8>)
 8016e42:	3a01      	subs	r2, #1
 8016e44:	2300      	movs	r3, #0
 8016e46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016e4a:	f7ff fe51 	bl	8016af0 <__multadd>
 8016e4e:	4607      	mov	r7, r0
 8016e50:	10ad      	asrs	r5, r5, #2
 8016e52:	d03d      	beq.n	8016ed0 <__pow5mult+0xa0>
 8016e54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016e56:	b97c      	cbnz	r4, 8016e78 <__pow5mult+0x48>
 8016e58:	2010      	movs	r0, #16
 8016e5a:	f7fb fcc9 	bl	80127f0 <malloc>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	6270      	str	r0, [r6, #36]	; 0x24
 8016e62:	b928      	cbnz	r0, 8016e70 <__pow5mult+0x40>
 8016e64:	4b1d      	ldr	r3, [pc, #116]	; (8016edc <__pow5mult+0xac>)
 8016e66:	481e      	ldr	r0, [pc, #120]	; (8016ee0 <__pow5mult+0xb0>)
 8016e68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016e6c:	f7fb fc5e 	bl	801272c <__assert_func>
 8016e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016e74:	6004      	str	r4, [r0, #0]
 8016e76:	60c4      	str	r4, [r0, #12]
 8016e78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016e80:	b94c      	cbnz	r4, 8016e96 <__pow5mult+0x66>
 8016e82:	f240 2171 	movw	r1, #625	; 0x271
 8016e86:	4630      	mov	r0, r6
 8016e88:	f7ff ff12 	bl	8016cb0 <__i2b>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016e92:	4604      	mov	r4, r0
 8016e94:	6003      	str	r3, [r0, #0]
 8016e96:	f04f 0900 	mov.w	r9, #0
 8016e9a:	07eb      	lsls	r3, r5, #31
 8016e9c:	d50a      	bpl.n	8016eb4 <__pow5mult+0x84>
 8016e9e:	4639      	mov	r1, r7
 8016ea0:	4622      	mov	r2, r4
 8016ea2:	4630      	mov	r0, r6
 8016ea4:	f7ff ff1a 	bl	8016cdc <__multiply>
 8016ea8:	4639      	mov	r1, r7
 8016eaa:	4680      	mov	r8, r0
 8016eac:	4630      	mov	r0, r6
 8016eae:	f7ff fdfd 	bl	8016aac <_Bfree>
 8016eb2:	4647      	mov	r7, r8
 8016eb4:	106d      	asrs	r5, r5, #1
 8016eb6:	d00b      	beq.n	8016ed0 <__pow5mult+0xa0>
 8016eb8:	6820      	ldr	r0, [r4, #0]
 8016eba:	b938      	cbnz	r0, 8016ecc <__pow5mult+0x9c>
 8016ebc:	4622      	mov	r2, r4
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7ff ff0b 	bl	8016cdc <__multiply>
 8016ec6:	6020      	str	r0, [r4, #0]
 8016ec8:	f8c0 9000 	str.w	r9, [r0]
 8016ecc:	4604      	mov	r4, r0
 8016ece:	e7e4      	b.n	8016e9a <__pow5mult+0x6a>
 8016ed0:	4638      	mov	r0, r7
 8016ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ed6:	bf00      	nop
 8016ed8:	08058c88 	.word	0x08058c88
 8016edc:	080585e8 	.word	0x080585e8
 8016ee0:	08058b38 	.word	0x08058b38

08016ee4 <__lshift>:
 8016ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ee8:	460c      	mov	r4, r1
 8016eea:	6849      	ldr	r1, [r1, #4]
 8016eec:	6923      	ldr	r3, [r4, #16]
 8016eee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016ef2:	68a3      	ldr	r3, [r4, #8]
 8016ef4:	4607      	mov	r7, r0
 8016ef6:	4691      	mov	r9, r2
 8016ef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016efc:	f108 0601 	add.w	r6, r8, #1
 8016f00:	42b3      	cmp	r3, r6
 8016f02:	db0b      	blt.n	8016f1c <__lshift+0x38>
 8016f04:	4638      	mov	r0, r7
 8016f06:	f7ff fd91 	bl	8016a2c <_Balloc>
 8016f0a:	4605      	mov	r5, r0
 8016f0c:	b948      	cbnz	r0, 8016f22 <__lshift+0x3e>
 8016f0e:	4602      	mov	r2, r0
 8016f10:	4b2a      	ldr	r3, [pc, #168]	; (8016fbc <__lshift+0xd8>)
 8016f12:	482b      	ldr	r0, [pc, #172]	; (8016fc0 <__lshift+0xdc>)
 8016f14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016f18:	f7fb fc08 	bl	801272c <__assert_func>
 8016f1c:	3101      	adds	r1, #1
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	e7ee      	b.n	8016f00 <__lshift+0x1c>
 8016f22:	2300      	movs	r3, #0
 8016f24:	f100 0114 	add.w	r1, r0, #20
 8016f28:	f100 0210 	add.w	r2, r0, #16
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	4553      	cmp	r3, sl
 8016f30:	db37      	blt.n	8016fa2 <__lshift+0xbe>
 8016f32:	6920      	ldr	r0, [r4, #16]
 8016f34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016f38:	f104 0314 	add.w	r3, r4, #20
 8016f3c:	f019 091f 	ands.w	r9, r9, #31
 8016f40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016f48:	d02f      	beq.n	8016faa <__lshift+0xc6>
 8016f4a:	f1c9 0e20 	rsb	lr, r9, #32
 8016f4e:	468a      	mov	sl, r1
 8016f50:	f04f 0c00 	mov.w	ip, #0
 8016f54:	681a      	ldr	r2, [r3, #0]
 8016f56:	fa02 f209 	lsl.w	r2, r2, r9
 8016f5a:	ea42 020c 	orr.w	r2, r2, ip
 8016f5e:	f84a 2b04 	str.w	r2, [sl], #4
 8016f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f66:	4298      	cmp	r0, r3
 8016f68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016f6c:	d8f2      	bhi.n	8016f54 <__lshift+0x70>
 8016f6e:	1b03      	subs	r3, r0, r4
 8016f70:	3b15      	subs	r3, #21
 8016f72:	f023 0303 	bic.w	r3, r3, #3
 8016f76:	3304      	adds	r3, #4
 8016f78:	f104 0215 	add.w	r2, r4, #21
 8016f7c:	4290      	cmp	r0, r2
 8016f7e:	bf38      	it	cc
 8016f80:	2304      	movcc	r3, #4
 8016f82:	f841 c003 	str.w	ip, [r1, r3]
 8016f86:	f1bc 0f00 	cmp.w	ip, #0
 8016f8a:	d001      	beq.n	8016f90 <__lshift+0xac>
 8016f8c:	f108 0602 	add.w	r6, r8, #2
 8016f90:	3e01      	subs	r6, #1
 8016f92:	4638      	mov	r0, r7
 8016f94:	612e      	str	r6, [r5, #16]
 8016f96:	4621      	mov	r1, r4
 8016f98:	f7ff fd88 	bl	8016aac <_Bfree>
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	e7c1      	b.n	8016f2e <__lshift+0x4a>
 8016faa:	3904      	subs	r1, #4
 8016fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016fb4:	4298      	cmp	r0, r3
 8016fb6:	d8f9      	bhi.n	8016fac <__lshift+0xc8>
 8016fb8:	e7ea      	b.n	8016f90 <__lshift+0xac>
 8016fba:	bf00      	nop
 8016fbc:	080589ea 	.word	0x080589ea
 8016fc0:	08058b38 	.word	0x08058b38

08016fc4 <__mcmp>:
 8016fc4:	b530      	push	{r4, r5, lr}
 8016fc6:	6902      	ldr	r2, [r0, #16]
 8016fc8:	690c      	ldr	r4, [r1, #16]
 8016fca:	1b12      	subs	r2, r2, r4
 8016fcc:	d10e      	bne.n	8016fec <__mcmp+0x28>
 8016fce:	f100 0314 	add.w	r3, r0, #20
 8016fd2:	3114      	adds	r1, #20
 8016fd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016fd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016fdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016fe0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016fe4:	42a5      	cmp	r5, r4
 8016fe6:	d003      	beq.n	8016ff0 <__mcmp+0x2c>
 8016fe8:	d305      	bcc.n	8016ff6 <__mcmp+0x32>
 8016fea:	2201      	movs	r2, #1
 8016fec:	4610      	mov	r0, r2
 8016fee:	bd30      	pop	{r4, r5, pc}
 8016ff0:	4283      	cmp	r3, r0
 8016ff2:	d3f3      	bcc.n	8016fdc <__mcmp+0x18>
 8016ff4:	e7fa      	b.n	8016fec <__mcmp+0x28>
 8016ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffa:	e7f7      	b.n	8016fec <__mcmp+0x28>

08016ffc <__mdiff>:
 8016ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017000:	460c      	mov	r4, r1
 8017002:	4606      	mov	r6, r0
 8017004:	4611      	mov	r1, r2
 8017006:	4620      	mov	r0, r4
 8017008:	4690      	mov	r8, r2
 801700a:	f7ff ffdb 	bl	8016fc4 <__mcmp>
 801700e:	1e05      	subs	r5, r0, #0
 8017010:	d110      	bne.n	8017034 <__mdiff+0x38>
 8017012:	4629      	mov	r1, r5
 8017014:	4630      	mov	r0, r6
 8017016:	f7ff fd09 	bl	8016a2c <_Balloc>
 801701a:	b930      	cbnz	r0, 801702a <__mdiff+0x2e>
 801701c:	4b3a      	ldr	r3, [pc, #232]	; (8017108 <__mdiff+0x10c>)
 801701e:	4602      	mov	r2, r0
 8017020:	f240 2132 	movw	r1, #562	; 0x232
 8017024:	4839      	ldr	r0, [pc, #228]	; (801710c <__mdiff+0x110>)
 8017026:	f7fb fb81 	bl	801272c <__assert_func>
 801702a:	2301      	movs	r3, #1
 801702c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017034:	bfa4      	itt	ge
 8017036:	4643      	movge	r3, r8
 8017038:	46a0      	movge	r8, r4
 801703a:	4630      	mov	r0, r6
 801703c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017040:	bfa6      	itte	ge
 8017042:	461c      	movge	r4, r3
 8017044:	2500      	movge	r5, #0
 8017046:	2501      	movlt	r5, #1
 8017048:	f7ff fcf0 	bl	8016a2c <_Balloc>
 801704c:	b920      	cbnz	r0, 8017058 <__mdiff+0x5c>
 801704e:	4b2e      	ldr	r3, [pc, #184]	; (8017108 <__mdiff+0x10c>)
 8017050:	4602      	mov	r2, r0
 8017052:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017056:	e7e5      	b.n	8017024 <__mdiff+0x28>
 8017058:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801705c:	6926      	ldr	r6, [r4, #16]
 801705e:	60c5      	str	r5, [r0, #12]
 8017060:	f104 0914 	add.w	r9, r4, #20
 8017064:	f108 0514 	add.w	r5, r8, #20
 8017068:	f100 0e14 	add.w	lr, r0, #20
 801706c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017070:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017074:	f108 0210 	add.w	r2, r8, #16
 8017078:	46f2      	mov	sl, lr
 801707a:	2100      	movs	r1, #0
 801707c:	f859 3b04 	ldr.w	r3, [r9], #4
 8017080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017084:	fa1f f883 	uxth.w	r8, r3
 8017088:	fa11 f18b 	uxtah	r1, r1, fp
 801708c:	0c1b      	lsrs	r3, r3, #16
 801708e:	eba1 0808 	sub.w	r8, r1, r8
 8017092:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017096:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801709a:	fa1f f888 	uxth.w	r8, r8
 801709e:	1419      	asrs	r1, r3, #16
 80170a0:	454e      	cmp	r6, r9
 80170a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80170a6:	f84a 3b04 	str.w	r3, [sl], #4
 80170aa:	d8e7      	bhi.n	801707c <__mdiff+0x80>
 80170ac:	1b33      	subs	r3, r6, r4
 80170ae:	3b15      	subs	r3, #21
 80170b0:	f023 0303 	bic.w	r3, r3, #3
 80170b4:	3304      	adds	r3, #4
 80170b6:	3415      	adds	r4, #21
 80170b8:	42a6      	cmp	r6, r4
 80170ba:	bf38      	it	cc
 80170bc:	2304      	movcc	r3, #4
 80170be:	441d      	add	r5, r3
 80170c0:	4473      	add	r3, lr
 80170c2:	469e      	mov	lr, r3
 80170c4:	462e      	mov	r6, r5
 80170c6:	4566      	cmp	r6, ip
 80170c8:	d30e      	bcc.n	80170e8 <__mdiff+0xec>
 80170ca:	f10c 0203 	add.w	r2, ip, #3
 80170ce:	1b52      	subs	r2, r2, r5
 80170d0:	f022 0203 	bic.w	r2, r2, #3
 80170d4:	3d03      	subs	r5, #3
 80170d6:	45ac      	cmp	ip, r5
 80170d8:	bf38      	it	cc
 80170da:	2200      	movcc	r2, #0
 80170dc:	441a      	add	r2, r3
 80170de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80170e2:	b17b      	cbz	r3, 8017104 <__mdiff+0x108>
 80170e4:	6107      	str	r7, [r0, #16]
 80170e6:	e7a3      	b.n	8017030 <__mdiff+0x34>
 80170e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80170ec:	fa11 f288 	uxtah	r2, r1, r8
 80170f0:	1414      	asrs	r4, r2, #16
 80170f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80170f6:	b292      	uxth	r2, r2
 80170f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80170fc:	f84e 2b04 	str.w	r2, [lr], #4
 8017100:	1421      	asrs	r1, r4, #16
 8017102:	e7e0      	b.n	80170c6 <__mdiff+0xca>
 8017104:	3f01      	subs	r7, #1
 8017106:	e7ea      	b.n	80170de <__mdiff+0xe2>
 8017108:	080589ea 	.word	0x080589ea
 801710c:	08058b38 	.word	0x08058b38

08017110 <__ulp>:
 8017110:	b082      	sub	sp, #8
 8017112:	ed8d 0b00 	vstr	d0, [sp]
 8017116:	9b01      	ldr	r3, [sp, #4]
 8017118:	4912      	ldr	r1, [pc, #72]	; (8017164 <__ulp+0x54>)
 801711a:	4019      	ands	r1, r3
 801711c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017120:	2900      	cmp	r1, #0
 8017122:	dd05      	ble.n	8017130 <__ulp+0x20>
 8017124:	2200      	movs	r2, #0
 8017126:	460b      	mov	r3, r1
 8017128:	ec43 2b10 	vmov	d0, r2, r3
 801712c:	b002      	add	sp, #8
 801712e:	4770      	bx	lr
 8017130:	4249      	negs	r1, r1
 8017132:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017136:	ea4f 5021 	mov.w	r0, r1, asr #20
 801713a:	f04f 0200 	mov.w	r2, #0
 801713e:	f04f 0300 	mov.w	r3, #0
 8017142:	da04      	bge.n	801714e <__ulp+0x3e>
 8017144:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017148:	fa41 f300 	asr.w	r3, r1, r0
 801714c:	e7ec      	b.n	8017128 <__ulp+0x18>
 801714e:	f1a0 0114 	sub.w	r1, r0, #20
 8017152:	291e      	cmp	r1, #30
 8017154:	bfda      	itte	le
 8017156:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801715a:	fa20 f101 	lsrle.w	r1, r0, r1
 801715e:	2101      	movgt	r1, #1
 8017160:	460a      	mov	r2, r1
 8017162:	e7e1      	b.n	8017128 <__ulp+0x18>
 8017164:	7ff00000 	.word	0x7ff00000

08017168 <__b2d>:
 8017168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716a:	6905      	ldr	r5, [r0, #16]
 801716c:	f100 0714 	add.w	r7, r0, #20
 8017170:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017174:	1f2e      	subs	r6, r5, #4
 8017176:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801717a:	4620      	mov	r0, r4
 801717c:	f7ff fd48 	bl	8016c10 <__hi0bits>
 8017180:	f1c0 0320 	rsb	r3, r0, #32
 8017184:	280a      	cmp	r0, #10
 8017186:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017204 <__b2d+0x9c>
 801718a:	600b      	str	r3, [r1, #0]
 801718c:	dc14      	bgt.n	80171b8 <__b2d+0x50>
 801718e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017192:	fa24 f10e 	lsr.w	r1, r4, lr
 8017196:	42b7      	cmp	r7, r6
 8017198:	ea41 030c 	orr.w	r3, r1, ip
 801719c:	bf34      	ite	cc
 801719e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80171a2:	2100      	movcs	r1, #0
 80171a4:	3015      	adds	r0, #21
 80171a6:	fa04 f000 	lsl.w	r0, r4, r0
 80171aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80171ae:	ea40 0201 	orr.w	r2, r0, r1
 80171b2:	ec43 2b10 	vmov	d0, r2, r3
 80171b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b8:	42b7      	cmp	r7, r6
 80171ba:	bf3a      	itte	cc
 80171bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80171c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80171c4:	2100      	movcs	r1, #0
 80171c6:	380b      	subs	r0, #11
 80171c8:	d017      	beq.n	80171fa <__b2d+0x92>
 80171ca:	f1c0 0c20 	rsb	ip, r0, #32
 80171ce:	fa04 f500 	lsl.w	r5, r4, r0
 80171d2:	42be      	cmp	r6, r7
 80171d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80171d8:	ea45 0504 	orr.w	r5, r5, r4
 80171dc:	bf8c      	ite	hi
 80171de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80171e2:	2400      	movls	r4, #0
 80171e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80171e8:	fa01 f000 	lsl.w	r0, r1, r0
 80171ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80171f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80171f4:	ea40 0204 	orr.w	r2, r0, r4
 80171f8:	e7db      	b.n	80171b2 <__b2d+0x4a>
 80171fa:	ea44 030c 	orr.w	r3, r4, ip
 80171fe:	460a      	mov	r2, r1
 8017200:	e7d7      	b.n	80171b2 <__b2d+0x4a>
 8017202:	bf00      	nop
 8017204:	3ff00000 	.word	0x3ff00000

08017208 <__d2b>:
 8017208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801720c:	4689      	mov	r9, r1
 801720e:	2101      	movs	r1, #1
 8017210:	ec57 6b10 	vmov	r6, r7, d0
 8017214:	4690      	mov	r8, r2
 8017216:	f7ff fc09 	bl	8016a2c <_Balloc>
 801721a:	4604      	mov	r4, r0
 801721c:	b930      	cbnz	r0, 801722c <__d2b+0x24>
 801721e:	4602      	mov	r2, r0
 8017220:	4b25      	ldr	r3, [pc, #148]	; (80172b8 <__d2b+0xb0>)
 8017222:	4826      	ldr	r0, [pc, #152]	; (80172bc <__d2b+0xb4>)
 8017224:	f240 310a 	movw	r1, #778	; 0x30a
 8017228:	f7fb fa80 	bl	801272c <__assert_func>
 801722c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017234:	bb35      	cbnz	r5, 8017284 <__d2b+0x7c>
 8017236:	2e00      	cmp	r6, #0
 8017238:	9301      	str	r3, [sp, #4]
 801723a:	d028      	beq.n	801728e <__d2b+0x86>
 801723c:	4668      	mov	r0, sp
 801723e:	9600      	str	r6, [sp, #0]
 8017240:	f7ff fd06 	bl	8016c50 <__lo0bits>
 8017244:	9900      	ldr	r1, [sp, #0]
 8017246:	b300      	cbz	r0, 801728a <__d2b+0x82>
 8017248:	9a01      	ldr	r2, [sp, #4]
 801724a:	f1c0 0320 	rsb	r3, r0, #32
 801724e:	fa02 f303 	lsl.w	r3, r2, r3
 8017252:	430b      	orrs	r3, r1
 8017254:	40c2      	lsrs	r2, r0
 8017256:	6163      	str	r3, [r4, #20]
 8017258:	9201      	str	r2, [sp, #4]
 801725a:	9b01      	ldr	r3, [sp, #4]
 801725c:	61a3      	str	r3, [r4, #24]
 801725e:	2b00      	cmp	r3, #0
 8017260:	bf14      	ite	ne
 8017262:	2202      	movne	r2, #2
 8017264:	2201      	moveq	r2, #1
 8017266:	6122      	str	r2, [r4, #16]
 8017268:	b1d5      	cbz	r5, 80172a0 <__d2b+0x98>
 801726a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801726e:	4405      	add	r5, r0
 8017270:	f8c9 5000 	str.w	r5, [r9]
 8017274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017278:	f8c8 0000 	str.w	r0, [r8]
 801727c:	4620      	mov	r0, r4
 801727e:	b003      	add	sp, #12
 8017280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017288:	e7d5      	b.n	8017236 <__d2b+0x2e>
 801728a:	6161      	str	r1, [r4, #20]
 801728c:	e7e5      	b.n	801725a <__d2b+0x52>
 801728e:	a801      	add	r0, sp, #4
 8017290:	f7ff fcde 	bl	8016c50 <__lo0bits>
 8017294:	9b01      	ldr	r3, [sp, #4]
 8017296:	6163      	str	r3, [r4, #20]
 8017298:	2201      	movs	r2, #1
 801729a:	6122      	str	r2, [r4, #16]
 801729c:	3020      	adds	r0, #32
 801729e:	e7e3      	b.n	8017268 <__d2b+0x60>
 80172a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80172a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80172a8:	f8c9 0000 	str.w	r0, [r9]
 80172ac:	6918      	ldr	r0, [r3, #16]
 80172ae:	f7ff fcaf 	bl	8016c10 <__hi0bits>
 80172b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80172b6:	e7df      	b.n	8017278 <__d2b+0x70>
 80172b8:	080589ea 	.word	0x080589ea
 80172bc:	08058b38 	.word	0x08058b38

080172c0 <__ratio>:
 80172c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c4:	4688      	mov	r8, r1
 80172c6:	4669      	mov	r1, sp
 80172c8:	4681      	mov	r9, r0
 80172ca:	f7ff ff4d 	bl	8017168 <__b2d>
 80172ce:	a901      	add	r1, sp, #4
 80172d0:	4640      	mov	r0, r8
 80172d2:	ec55 4b10 	vmov	r4, r5, d0
 80172d6:	f7ff ff47 	bl	8017168 <__b2d>
 80172da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80172de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80172e2:	eba3 0c02 	sub.w	ip, r3, r2
 80172e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80172ea:	1a9b      	subs	r3, r3, r2
 80172ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80172f0:	ec51 0b10 	vmov	r0, r1, d0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	bfd6      	itet	le
 80172f8:	460a      	movle	r2, r1
 80172fa:	462a      	movgt	r2, r5
 80172fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017300:	468b      	mov	fp, r1
 8017302:	462f      	mov	r7, r5
 8017304:	bfd4      	ite	le
 8017306:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801730a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801730e:	4620      	mov	r0, r4
 8017310:	ee10 2a10 	vmov	r2, s0
 8017314:	465b      	mov	r3, fp
 8017316:	4639      	mov	r1, r7
 8017318:	f7e9 fab8 	bl	800088c <__aeabi_ddiv>
 801731c:	ec41 0b10 	vmov	d0, r0, r1
 8017320:	b003      	add	sp, #12
 8017322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017326 <__copybits>:
 8017326:	3901      	subs	r1, #1
 8017328:	b570      	push	{r4, r5, r6, lr}
 801732a:	1149      	asrs	r1, r1, #5
 801732c:	6914      	ldr	r4, [r2, #16]
 801732e:	3101      	adds	r1, #1
 8017330:	f102 0314 	add.w	r3, r2, #20
 8017334:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017338:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801733c:	1f05      	subs	r5, r0, #4
 801733e:	42a3      	cmp	r3, r4
 8017340:	d30c      	bcc.n	801735c <__copybits+0x36>
 8017342:	1aa3      	subs	r3, r4, r2
 8017344:	3b11      	subs	r3, #17
 8017346:	f023 0303 	bic.w	r3, r3, #3
 801734a:	3211      	adds	r2, #17
 801734c:	42a2      	cmp	r2, r4
 801734e:	bf88      	it	hi
 8017350:	2300      	movhi	r3, #0
 8017352:	4418      	add	r0, r3
 8017354:	2300      	movs	r3, #0
 8017356:	4288      	cmp	r0, r1
 8017358:	d305      	bcc.n	8017366 <__copybits+0x40>
 801735a:	bd70      	pop	{r4, r5, r6, pc}
 801735c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017360:	f845 6f04 	str.w	r6, [r5, #4]!
 8017364:	e7eb      	b.n	801733e <__copybits+0x18>
 8017366:	f840 3b04 	str.w	r3, [r0], #4
 801736a:	e7f4      	b.n	8017356 <__copybits+0x30>

0801736c <__any_on>:
 801736c:	f100 0214 	add.w	r2, r0, #20
 8017370:	6900      	ldr	r0, [r0, #16]
 8017372:	114b      	asrs	r3, r1, #5
 8017374:	4298      	cmp	r0, r3
 8017376:	b510      	push	{r4, lr}
 8017378:	db11      	blt.n	801739e <__any_on+0x32>
 801737a:	dd0a      	ble.n	8017392 <__any_on+0x26>
 801737c:	f011 011f 	ands.w	r1, r1, #31
 8017380:	d007      	beq.n	8017392 <__any_on+0x26>
 8017382:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017386:	fa24 f001 	lsr.w	r0, r4, r1
 801738a:	fa00 f101 	lsl.w	r1, r0, r1
 801738e:	428c      	cmp	r4, r1
 8017390:	d10b      	bne.n	80173aa <__any_on+0x3e>
 8017392:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017396:	4293      	cmp	r3, r2
 8017398:	d803      	bhi.n	80173a2 <__any_on+0x36>
 801739a:	2000      	movs	r0, #0
 801739c:	bd10      	pop	{r4, pc}
 801739e:	4603      	mov	r3, r0
 80173a0:	e7f7      	b.n	8017392 <__any_on+0x26>
 80173a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80173a6:	2900      	cmp	r1, #0
 80173a8:	d0f5      	beq.n	8017396 <__any_on+0x2a>
 80173aa:	2001      	movs	r0, #1
 80173ac:	e7f6      	b.n	801739c <__any_on+0x30>

080173ae <_calloc_r>:
 80173ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173b0:	fba1 2402 	umull	r2, r4, r1, r2
 80173b4:	b94c      	cbnz	r4, 80173ca <_calloc_r+0x1c>
 80173b6:	4611      	mov	r1, r2
 80173b8:	9201      	str	r2, [sp, #4]
 80173ba:	f7fb fd1d 	bl	8012df8 <_malloc_r>
 80173be:	9a01      	ldr	r2, [sp, #4]
 80173c0:	4605      	mov	r5, r0
 80173c2:	b930      	cbnz	r0, 80173d2 <_calloc_r+0x24>
 80173c4:	4628      	mov	r0, r5
 80173c6:	b003      	add	sp, #12
 80173c8:	bd30      	pop	{r4, r5, pc}
 80173ca:	220c      	movs	r2, #12
 80173cc:	6002      	str	r2, [r0, #0]
 80173ce:	2500      	movs	r5, #0
 80173d0:	e7f8      	b.n	80173c4 <_calloc_r+0x16>
 80173d2:	4621      	mov	r1, r4
 80173d4:	f7fb fa2a 	bl	801282c <memset>
 80173d8:	e7f4      	b.n	80173c4 <_calloc_r+0x16>

080173da <_realloc_r>:
 80173da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173de:	4680      	mov	r8, r0
 80173e0:	4614      	mov	r4, r2
 80173e2:	460e      	mov	r6, r1
 80173e4:	b921      	cbnz	r1, 80173f0 <_realloc_r+0x16>
 80173e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173ea:	4611      	mov	r1, r2
 80173ec:	f7fb bd04 	b.w	8012df8 <_malloc_r>
 80173f0:	b92a      	cbnz	r2, 80173fe <_realloc_r+0x24>
 80173f2:	f7fb fc95 	bl	8012d20 <_free_r>
 80173f6:	4625      	mov	r5, r4
 80173f8:	4628      	mov	r0, r5
 80173fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173fe:	f000 fe3b 	bl	8018078 <_malloc_usable_size_r>
 8017402:	4284      	cmp	r4, r0
 8017404:	4607      	mov	r7, r0
 8017406:	d802      	bhi.n	801740e <_realloc_r+0x34>
 8017408:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801740c:	d812      	bhi.n	8017434 <_realloc_r+0x5a>
 801740e:	4621      	mov	r1, r4
 8017410:	4640      	mov	r0, r8
 8017412:	f7fb fcf1 	bl	8012df8 <_malloc_r>
 8017416:	4605      	mov	r5, r0
 8017418:	2800      	cmp	r0, #0
 801741a:	d0ed      	beq.n	80173f8 <_realloc_r+0x1e>
 801741c:	42bc      	cmp	r4, r7
 801741e:	4622      	mov	r2, r4
 8017420:	4631      	mov	r1, r6
 8017422:	bf28      	it	cs
 8017424:	463a      	movcs	r2, r7
 8017426:	f7fb f9f3 	bl	8012810 <memcpy>
 801742a:	4631      	mov	r1, r6
 801742c:	4640      	mov	r0, r8
 801742e:	f7fb fc77 	bl	8012d20 <_free_r>
 8017432:	e7e1      	b.n	80173f8 <_realloc_r+0x1e>
 8017434:	4635      	mov	r5, r6
 8017436:	e7df      	b.n	80173f8 <_realloc_r+0x1e>

08017438 <__ssputs_r>:
 8017438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801743c:	688e      	ldr	r6, [r1, #8]
 801743e:	429e      	cmp	r6, r3
 8017440:	4682      	mov	sl, r0
 8017442:	460c      	mov	r4, r1
 8017444:	4690      	mov	r8, r2
 8017446:	461f      	mov	r7, r3
 8017448:	d838      	bhi.n	80174bc <__ssputs_r+0x84>
 801744a:	898a      	ldrh	r2, [r1, #12]
 801744c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017450:	d032      	beq.n	80174b8 <__ssputs_r+0x80>
 8017452:	6825      	ldr	r5, [r4, #0]
 8017454:	6909      	ldr	r1, [r1, #16]
 8017456:	eba5 0901 	sub.w	r9, r5, r1
 801745a:	6965      	ldr	r5, [r4, #20]
 801745c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017464:	3301      	adds	r3, #1
 8017466:	444b      	add	r3, r9
 8017468:	106d      	asrs	r5, r5, #1
 801746a:	429d      	cmp	r5, r3
 801746c:	bf38      	it	cc
 801746e:	461d      	movcc	r5, r3
 8017470:	0553      	lsls	r3, r2, #21
 8017472:	d531      	bpl.n	80174d8 <__ssputs_r+0xa0>
 8017474:	4629      	mov	r1, r5
 8017476:	f7fb fcbf 	bl	8012df8 <_malloc_r>
 801747a:	4606      	mov	r6, r0
 801747c:	b950      	cbnz	r0, 8017494 <__ssputs_r+0x5c>
 801747e:	230c      	movs	r3, #12
 8017480:	f8ca 3000 	str.w	r3, [sl]
 8017484:	89a3      	ldrh	r3, [r4, #12]
 8017486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801748a:	81a3      	strh	r3, [r4, #12]
 801748c:	f04f 30ff 	mov.w	r0, #4294967295
 8017490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017494:	6921      	ldr	r1, [r4, #16]
 8017496:	464a      	mov	r2, r9
 8017498:	f7fb f9ba 	bl	8012810 <memcpy>
 801749c:	89a3      	ldrh	r3, [r4, #12]
 801749e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80174a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174a6:	81a3      	strh	r3, [r4, #12]
 80174a8:	6126      	str	r6, [r4, #16]
 80174aa:	6165      	str	r5, [r4, #20]
 80174ac:	444e      	add	r6, r9
 80174ae:	eba5 0509 	sub.w	r5, r5, r9
 80174b2:	6026      	str	r6, [r4, #0]
 80174b4:	60a5      	str	r5, [r4, #8]
 80174b6:	463e      	mov	r6, r7
 80174b8:	42be      	cmp	r6, r7
 80174ba:	d900      	bls.n	80174be <__ssputs_r+0x86>
 80174bc:	463e      	mov	r6, r7
 80174be:	6820      	ldr	r0, [r4, #0]
 80174c0:	4632      	mov	r2, r6
 80174c2:	4641      	mov	r1, r8
 80174c4:	f7ff fa8c 	bl	80169e0 <memmove>
 80174c8:	68a3      	ldr	r3, [r4, #8]
 80174ca:	1b9b      	subs	r3, r3, r6
 80174cc:	60a3      	str	r3, [r4, #8]
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	4433      	add	r3, r6
 80174d2:	6023      	str	r3, [r4, #0]
 80174d4:	2000      	movs	r0, #0
 80174d6:	e7db      	b.n	8017490 <__ssputs_r+0x58>
 80174d8:	462a      	mov	r2, r5
 80174da:	f7ff ff7e 	bl	80173da <_realloc_r>
 80174de:	4606      	mov	r6, r0
 80174e0:	2800      	cmp	r0, #0
 80174e2:	d1e1      	bne.n	80174a8 <__ssputs_r+0x70>
 80174e4:	6921      	ldr	r1, [r4, #16]
 80174e6:	4650      	mov	r0, sl
 80174e8:	f7fb fc1a 	bl	8012d20 <_free_r>
 80174ec:	e7c7      	b.n	801747e <__ssputs_r+0x46>
	...

080174f0 <_svfiprintf_r>:
 80174f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f4:	4698      	mov	r8, r3
 80174f6:	898b      	ldrh	r3, [r1, #12]
 80174f8:	061b      	lsls	r3, r3, #24
 80174fa:	b09d      	sub	sp, #116	; 0x74
 80174fc:	4607      	mov	r7, r0
 80174fe:	460d      	mov	r5, r1
 8017500:	4614      	mov	r4, r2
 8017502:	d50e      	bpl.n	8017522 <_svfiprintf_r+0x32>
 8017504:	690b      	ldr	r3, [r1, #16]
 8017506:	b963      	cbnz	r3, 8017522 <_svfiprintf_r+0x32>
 8017508:	2140      	movs	r1, #64	; 0x40
 801750a:	f7fb fc75 	bl	8012df8 <_malloc_r>
 801750e:	6028      	str	r0, [r5, #0]
 8017510:	6128      	str	r0, [r5, #16]
 8017512:	b920      	cbnz	r0, 801751e <_svfiprintf_r+0x2e>
 8017514:	230c      	movs	r3, #12
 8017516:	603b      	str	r3, [r7, #0]
 8017518:	f04f 30ff 	mov.w	r0, #4294967295
 801751c:	e0d1      	b.n	80176c2 <_svfiprintf_r+0x1d2>
 801751e:	2340      	movs	r3, #64	; 0x40
 8017520:	616b      	str	r3, [r5, #20]
 8017522:	2300      	movs	r3, #0
 8017524:	9309      	str	r3, [sp, #36]	; 0x24
 8017526:	2320      	movs	r3, #32
 8017528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801752c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017530:	2330      	movs	r3, #48	; 0x30
 8017532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80176dc <_svfiprintf_r+0x1ec>
 8017536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801753a:	f04f 0901 	mov.w	r9, #1
 801753e:	4623      	mov	r3, r4
 8017540:	469a      	mov	sl, r3
 8017542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017546:	b10a      	cbz	r2, 801754c <_svfiprintf_r+0x5c>
 8017548:	2a25      	cmp	r2, #37	; 0x25
 801754a:	d1f9      	bne.n	8017540 <_svfiprintf_r+0x50>
 801754c:	ebba 0b04 	subs.w	fp, sl, r4
 8017550:	d00b      	beq.n	801756a <_svfiprintf_r+0x7a>
 8017552:	465b      	mov	r3, fp
 8017554:	4622      	mov	r2, r4
 8017556:	4629      	mov	r1, r5
 8017558:	4638      	mov	r0, r7
 801755a:	f7ff ff6d 	bl	8017438 <__ssputs_r>
 801755e:	3001      	adds	r0, #1
 8017560:	f000 80aa 	beq.w	80176b8 <_svfiprintf_r+0x1c8>
 8017564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017566:	445a      	add	r2, fp
 8017568:	9209      	str	r2, [sp, #36]	; 0x24
 801756a:	f89a 3000 	ldrb.w	r3, [sl]
 801756e:	2b00      	cmp	r3, #0
 8017570:	f000 80a2 	beq.w	80176b8 <_svfiprintf_r+0x1c8>
 8017574:	2300      	movs	r3, #0
 8017576:	f04f 32ff 	mov.w	r2, #4294967295
 801757a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801757e:	f10a 0a01 	add.w	sl, sl, #1
 8017582:	9304      	str	r3, [sp, #16]
 8017584:	9307      	str	r3, [sp, #28]
 8017586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801758a:	931a      	str	r3, [sp, #104]	; 0x68
 801758c:	4654      	mov	r4, sl
 801758e:	2205      	movs	r2, #5
 8017590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017594:	4851      	ldr	r0, [pc, #324]	; (80176dc <_svfiprintf_r+0x1ec>)
 8017596:	f7e8 fe43 	bl	8000220 <memchr>
 801759a:	9a04      	ldr	r2, [sp, #16]
 801759c:	b9d8      	cbnz	r0, 80175d6 <_svfiprintf_r+0xe6>
 801759e:	06d0      	lsls	r0, r2, #27
 80175a0:	bf44      	itt	mi
 80175a2:	2320      	movmi	r3, #32
 80175a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175a8:	0711      	lsls	r1, r2, #28
 80175aa:	bf44      	itt	mi
 80175ac:	232b      	movmi	r3, #43	; 0x2b
 80175ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175b2:	f89a 3000 	ldrb.w	r3, [sl]
 80175b6:	2b2a      	cmp	r3, #42	; 0x2a
 80175b8:	d015      	beq.n	80175e6 <_svfiprintf_r+0xf6>
 80175ba:	9a07      	ldr	r2, [sp, #28]
 80175bc:	4654      	mov	r4, sl
 80175be:	2000      	movs	r0, #0
 80175c0:	f04f 0c0a 	mov.w	ip, #10
 80175c4:	4621      	mov	r1, r4
 80175c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175ca:	3b30      	subs	r3, #48	; 0x30
 80175cc:	2b09      	cmp	r3, #9
 80175ce:	d94e      	bls.n	801766e <_svfiprintf_r+0x17e>
 80175d0:	b1b0      	cbz	r0, 8017600 <_svfiprintf_r+0x110>
 80175d2:	9207      	str	r2, [sp, #28]
 80175d4:	e014      	b.n	8017600 <_svfiprintf_r+0x110>
 80175d6:	eba0 0308 	sub.w	r3, r0, r8
 80175da:	fa09 f303 	lsl.w	r3, r9, r3
 80175de:	4313      	orrs	r3, r2
 80175e0:	9304      	str	r3, [sp, #16]
 80175e2:	46a2      	mov	sl, r4
 80175e4:	e7d2      	b.n	801758c <_svfiprintf_r+0x9c>
 80175e6:	9b03      	ldr	r3, [sp, #12]
 80175e8:	1d19      	adds	r1, r3, #4
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	9103      	str	r1, [sp, #12]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	bfbb      	ittet	lt
 80175f2:	425b      	neglt	r3, r3
 80175f4:	f042 0202 	orrlt.w	r2, r2, #2
 80175f8:	9307      	strge	r3, [sp, #28]
 80175fa:	9307      	strlt	r3, [sp, #28]
 80175fc:	bfb8      	it	lt
 80175fe:	9204      	strlt	r2, [sp, #16]
 8017600:	7823      	ldrb	r3, [r4, #0]
 8017602:	2b2e      	cmp	r3, #46	; 0x2e
 8017604:	d10c      	bne.n	8017620 <_svfiprintf_r+0x130>
 8017606:	7863      	ldrb	r3, [r4, #1]
 8017608:	2b2a      	cmp	r3, #42	; 0x2a
 801760a:	d135      	bne.n	8017678 <_svfiprintf_r+0x188>
 801760c:	9b03      	ldr	r3, [sp, #12]
 801760e:	1d1a      	adds	r2, r3, #4
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	9203      	str	r2, [sp, #12]
 8017614:	2b00      	cmp	r3, #0
 8017616:	bfb8      	it	lt
 8017618:	f04f 33ff 	movlt.w	r3, #4294967295
 801761c:	3402      	adds	r4, #2
 801761e:	9305      	str	r3, [sp, #20]
 8017620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80176ec <_svfiprintf_r+0x1fc>
 8017624:	7821      	ldrb	r1, [r4, #0]
 8017626:	2203      	movs	r2, #3
 8017628:	4650      	mov	r0, sl
 801762a:	f7e8 fdf9 	bl	8000220 <memchr>
 801762e:	b140      	cbz	r0, 8017642 <_svfiprintf_r+0x152>
 8017630:	2340      	movs	r3, #64	; 0x40
 8017632:	eba0 000a 	sub.w	r0, r0, sl
 8017636:	fa03 f000 	lsl.w	r0, r3, r0
 801763a:	9b04      	ldr	r3, [sp, #16]
 801763c:	4303      	orrs	r3, r0
 801763e:	3401      	adds	r4, #1
 8017640:	9304      	str	r3, [sp, #16]
 8017642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017646:	4826      	ldr	r0, [pc, #152]	; (80176e0 <_svfiprintf_r+0x1f0>)
 8017648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801764c:	2206      	movs	r2, #6
 801764e:	f7e8 fde7 	bl	8000220 <memchr>
 8017652:	2800      	cmp	r0, #0
 8017654:	d038      	beq.n	80176c8 <_svfiprintf_r+0x1d8>
 8017656:	4b23      	ldr	r3, [pc, #140]	; (80176e4 <_svfiprintf_r+0x1f4>)
 8017658:	bb1b      	cbnz	r3, 80176a2 <_svfiprintf_r+0x1b2>
 801765a:	9b03      	ldr	r3, [sp, #12]
 801765c:	3307      	adds	r3, #7
 801765e:	f023 0307 	bic.w	r3, r3, #7
 8017662:	3308      	adds	r3, #8
 8017664:	9303      	str	r3, [sp, #12]
 8017666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017668:	4433      	add	r3, r6
 801766a:	9309      	str	r3, [sp, #36]	; 0x24
 801766c:	e767      	b.n	801753e <_svfiprintf_r+0x4e>
 801766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017672:	460c      	mov	r4, r1
 8017674:	2001      	movs	r0, #1
 8017676:	e7a5      	b.n	80175c4 <_svfiprintf_r+0xd4>
 8017678:	2300      	movs	r3, #0
 801767a:	3401      	adds	r4, #1
 801767c:	9305      	str	r3, [sp, #20]
 801767e:	4619      	mov	r1, r3
 8017680:	f04f 0c0a 	mov.w	ip, #10
 8017684:	4620      	mov	r0, r4
 8017686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801768a:	3a30      	subs	r2, #48	; 0x30
 801768c:	2a09      	cmp	r2, #9
 801768e:	d903      	bls.n	8017698 <_svfiprintf_r+0x1a8>
 8017690:	2b00      	cmp	r3, #0
 8017692:	d0c5      	beq.n	8017620 <_svfiprintf_r+0x130>
 8017694:	9105      	str	r1, [sp, #20]
 8017696:	e7c3      	b.n	8017620 <_svfiprintf_r+0x130>
 8017698:	fb0c 2101 	mla	r1, ip, r1, r2
 801769c:	4604      	mov	r4, r0
 801769e:	2301      	movs	r3, #1
 80176a0:	e7f0      	b.n	8017684 <_svfiprintf_r+0x194>
 80176a2:	ab03      	add	r3, sp, #12
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	462a      	mov	r2, r5
 80176a8:	4b0f      	ldr	r3, [pc, #60]	; (80176e8 <_svfiprintf_r+0x1f8>)
 80176aa:	a904      	add	r1, sp, #16
 80176ac:	4638      	mov	r0, r7
 80176ae:	f7fb fe11 	bl	80132d4 <_printf_float>
 80176b2:	1c42      	adds	r2, r0, #1
 80176b4:	4606      	mov	r6, r0
 80176b6:	d1d6      	bne.n	8017666 <_svfiprintf_r+0x176>
 80176b8:	89ab      	ldrh	r3, [r5, #12]
 80176ba:	065b      	lsls	r3, r3, #25
 80176bc:	f53f af2c 	bmi.w	8017518 <_svfiprintf_r+0x28>
 80176c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176c2:	b01d      	add	sp, #116	; 0x74
 80176c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c8:	ab03      	add	r3, sp, #12
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	462a      	mov	r2, r5
 80176ce:	4b06      	ldr	r3, [pc, #24]	; (80176e8 <_svfiprintf_r+0x1f8>)
 80176d0:	a904      	add	r1, sp, #16
 80176d2:	4638      	mov	r0, r7
 80176d4:	f7fc f8a2 	bl	801381c <_printf_i>
 80176d8:	e7eb      	b.n	80176b2 <_svfiprintf_r+0x1c2>
 80176da:	bf00      	nop
 80176dc:	08058754 	.word	0x08058754
 80176e0:	0805875e 	.word	0x0805875e
 80176e4:	080132d5 	.word	0x080132d5
 80176e8:	08017439 	.word	0x08017439
 80176ec:	0805875a 	.word	0x0805875a

080176f0 <_sungetc_r>:
 80176f0:	b538      	push	{r3, r4, r5, lr}
 80176f2:	1c4b      	adds	r3, r1, #1
 80176f4:	4614      	mov	r4, r2
 80176f6:	d103      	bne.n	8017700 <_sungetc_r+0x10>
 80176f8:	f04f 35ff 	mov.w	r5, #4294967295
 80176fc:	4628      	mov	r0, r5
 80176fe:	bd38      	pop	{r3, r4, r5, pc}
 8017700:	8993      	ldrh	r3, [r2, #12]
 8017702:	f023 0320 	bic.w	r3, r3, #32
 8017706:	8193      	strh	r3, [r2, #12]
 8017708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801770a:	6852      	ldr	r2, [r2, #4]
 801770c:	b2cd      	uxtb	r5, r1
 801770e:	b18b      	cbz	r3, 8017734 <_sungetc_r+0x44>
 8017710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017712:	4293      	cmp	r3, r2
 8017714:	dd08      	ble.n	8017728 <_sungetc_r+0x38>
 8017716:	6823      	ldr	r3, [r4, #0]
 8017718:	1e5a      	subs	r2, r3, #1
 801771a:	6022      	str	r2, [r4, #0]
 801771c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017720:	6863      	ldr	r3, [r4, #4]
 8017722:	3301      	adds	r3, #1
 8017724:	6063      	str	r3, [r4, #4]
 8017726:	e7e9      	b.n	80176fc <_sungetc_r+0xc>
 8017728:	4621      	mov	r1, r4
 801772a:	f000 fc2f 	bl	8017f8c <__submore>
 801772e:	2800      	cmp	r0, #0
 8017730:	d0f1      	beq.n	8017716 <_sungetc_r+0x26>
 8017732:	e7e1      	b.n	80176f8 <_sungetc_r+0x8>
 8017734:	6921      	ldr	r1, [r4, #16]
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	b151      	cbz	r1, 8017750 <_sungetc_r+0x60>
 801773a:	4299      	cmp	r1, r3
 801773c:	d208      	bcs.n	8017750 <_sungetc_r+0x60>
 801773e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017742:	42a9      	cmp	r1, r5
 8017744:	d104      	bne.n	8017750 <_sungetc_r+0x60>
 8017746:	3b01      	subs	r3, #1
 8017748:	3201      	adds	r2, #1
 801774a:	6023      	str	r3, [r4, #0]
 801774c:	6062      	str	r2, [r4, #4]
 801774e:	e7d5      	b.n	80176fc <_sungetc_r+0xc>
 8017750:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017758:	6363      	str	r3, [r4, #52]	; 0x34
 801775a:	2303      	movs	r3, #3
 801775c:	63a3      	str	r3, [r4, #56]	; 0x38
 801775e:	4623      	mov	r3, r4
 8017760:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017764:	6023      	str	r3, [r4, #0]
 8017766:	2301      	movs	r3, #1
 8017768:	e7dc      	b.n	8017724 <_sungetc_r+0x34>

0801776a <__ssrefill_r>:
 801776a:	b510      	push	{r4, lr}
 801776c:	460c      	mov	r4, r1
 801776e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017770:	b169      	cbz	r1, 801778e <__ssrefill_r+0x24>
 8017772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017776:	4299      	cmp	r1, r3
 8017778:	d001      	beq.n	801777e <__ssrefill_r+0x14>
 801777a:	f7fb fad1 	bl	8012d20 <_free_r>
 801777e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017780:	6063      	str	r3, [r4, #4]
 8017782:	2000      	movs	r0, #0
 8017784:	6360      	str	r0, [r4, #52]	; 0x34
 8017786:	b113      	cbz	r3, 801778e <__ssrefill_r+0x24>
 8017788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801778a:	6023      	str	r3, [r4, #0]
 801778c:	bd10      	pop	{r4, pc}
 801778e:	6923      	ldr	r3, [r4, #16]
 8017790:	6023      	str	r3, [r4, #0]
 8017792:	2300      	movs	r3, #0
 8017794:	6063      	str	r3, [r4, #4]
 8017796:	89a3      	ldrh	r3, [r4, #12]
 8017798:	f043 0320 	orr.w	r3, r3, #32
 801779c:	81a3      	strh	r3, [r4, #12]
 801779e:	f04f 30ff 	mov.w	r0, #4294967295
 80177a2:	e7f3      	b.n	801778c <__ssrefill_r+0x22>

080177a4 <__ssvfiscanf_r>:
 80177a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177a8:	460c      	mov	r4, r1
 80177aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80177ae:	2100      	movs	r1, #0
 80177b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80177b4:	49a6      	ldr	r1, [pc, #664]	; (8017a50 <__ssvfiscanf_r+0x2ac>)
 80177b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80177b8:	f10d 0804 	add.w	r8, sp, #4
 80177bc:	49a5      	ldr	r1, [pc, #660]	; (8017a54 <__ssvfiscanf_r+0x2b0>)
 80177be:	4fa6      	ldr	r7, [pc, #664]	; (8017a58 <__ssvfiscanf_r+0x2b4>)
 80177c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017a5c <__ssvfiscanf_r+0x2b8>
 80177c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80177c8:	4606      	mov	r6, r0
 80177ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80177cc:	9300      	str	r3, [sp, #0]
 80177ce:	7813      	ldrb	r3, [r2, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	f000 815a 	beq.w	8017a8a <__ssvfiscanf_r+0x2e6>
 80177d6:	5dd9      	ldrb	r1, [r3, r7]
 80177d8:	f011 0108 	ands.w	r1, r1, #8
 80177dc:	f102 0501 	add.w	r5, r2, #1
 80177e0:	d019      	beq.n	8017816 <__ssvfiscanf_r+0x72>
 80177e2:	6863      	ldr	r3, [r4, #4]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	dd0f      	ble.n	8017808 <__ssvfiscanf_r+0x64>
 80177e8:	6823      	ldr	r3, [r4, #0]
 80177ea:	781a      	ldrb	r2, [r3, #0]
 80177ec:	5cba      	ldrb	r2, [r7, r2]
 80177ee:	0712      	lsls	r2, r2, #28
 80177f0:	d401      	bmi.n	80177f6 <__ssvfiscanf_r+0x52>
 80177f2:	462a      	mov	r2, r5
 80177f4:	e7eb      	b.n	80177ce <__ssvfiscanf_r+0x2a>
 80177f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177f8:	3201      	adds	r2, #1
 80177fa:	9245      	str	r2, [sp, #276]	; 0x114
 80177fc:	6862      	ldr	r2, [r4, #4]
 80177fe:	3301      	adds	r3, #1
 8017800:	3a01      	subs	r2, #1
 8017802:	6062      	str	r2, [r4, #4]
 8017804:	6023      	str	r3, [r4, #0]
 8017806:	e7ec      	b.n	80177e2 <__ssvfiscanf_r+0x3e>
 8017808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801780a:	4621      	mov	r1, r4
 801780c:	4630      	mov	r0, r6
 801780e:	4798      	blx	r3
 8017810:	2800      	cmp	r0, #0
 8017812:	d0e9      	beq.n	80177e8 <__ssvfiscanf_r+0x44>
 8017814:	e7ed      	b.n	80177f2 <__ssvfiscanf_r+0x4e>
 8017816:	2b25      	cmp	r3, #37	; 0x25
 8017818:	d012      	beq.n	8017840 <__ssvfiscanf_r+0x9c>
 801781a:	469a      	mov	sl, r3
 801781c:	6863      	ldr	r3, [r4, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	f340 8091 	ble.w	8017946 <__ssvfiscanf_r+0x1a2>
 8017824:	6822      	ldr	r2, [r4, #0]
 8017826:	7813      	ldrb	r3, [r2, #0]
 8017828:	4553      	cmp	r3, sl
 801782a:	f040 812e 	bne.w	8017a8a <__ssvfiscanf_r+0x2e6>
 801782e:	6863      	ldr	r3, [r4, #4]
 8017830:	3b01      	subs	r3, #1
 8017832:	6063      	str	r3, [r4, #4]
 8017834:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017836:	3201      	adds	r2, #1
 8017838:	3301      	adds	r3, #1
 801783a:	6022      	str	r2, [r4, #0]
 801783c:	9345      	str	r3, [sp, #276]	; 0x114
 801783e:	e7d8      	b.n	80177f2 <__ssvfiscanf_r+0x4e>
 8017840:	9141      	str	r1, [sp, #260]	; 0x104
 8017842:	9143      	str	r1, [sp, #268]	; 0x10c
 8017844:	7853      	ldrb	r3, [r2, #1]
 8017846:	2b2a      	cmp	r3, #42	; 0x2a
 8017848:	bf02      	ittt	eq
 801784a:	2310      	moveq	r3, #16
 801784c:	1c95      	addeq	r5, r2, #2
 801784e:	9341      	streq	r3, [sp, #260]	; 0x104
 8017850:	220a      	movs	r2, #10
 8017852:	46aa      	mov	sl, r5
 8017854:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017858:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801785c:	2b09      	cmp	r3, #9
 801785e:	d91d      	bls.n	801789c <__ssvfiscanf_r+0xf8>
 8017860:	487e      	ldr	r0, [pc, #504]	; (8017a5c <__ssvfiscanf_r+0x2b8>)
 8017862:	2203      	movs	r2, #3
 8017864:	f7e8 fcdc 	bl	8000220 <memchr>
 8017868:	b140      	cbz	r0, 801787c <__ssvfiscanf_r+0xd8>
 801786a:	2301      	movs	r3, #1
 801786c:	eba0 0009 	sub.w	r0, r0, r9
 8017870:	fa03 f000 	lsl.w	r0, r3, r0
 8017874:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017876:	4318      	orrs	r0, r3
 8017878:	9041      	str	r0, [sp, #260]	; 0x104
 801787a:	4655      	mov	r5, sl
 801787c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017880:	2b78      	cmp	r3, #120	; 0x78
 8017882:	d806      	bhi.n	8017892 <__ssvfiscanf_r+0xee>
 8017884:	2b57      	cmp	r3, #87	; 0x57
 8017886:	d810      	bhi.n	80178aa <__ssvfiscanf_r+0x106>
 8017888:	2b25      	cmp	r3, #37	; 0x25
 801788a:	d0c6      	beq.n	801781a <__ssvfiscanf_r+0x76>
 801788c:	d856      	bhi.n	801793c <__ssvfiscanf_r+0x198>
 801788e:	2b00      	cmp	r3, #0
 8017890:	d064      	beq.n	801795c <__ssvfiscanf_r+0x1b8>
 8017892:	2303      	movs	r3, #3
 8017894:	9347      	str	r3, [sp, #284]	; 0x11c
 8017896:	230a      	movs	r3, #10
 8017898:	9342      	str	r3, [sp, #264]	; 0x108
 801789a:	e071      	b.n	8017980 <__ssvfiscanf_r+0x1dc>
 801789c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801789e:	fb02 1103 	mla	r1, r2, r3, r1
 80178a2:	3930      	subs	r1, #48	; 0x30
 80178a4:	9143      	str	r1, [sp, #268]	; 0x10c
 80178a6:	4655      	mov	r5, sl
 80178a8:	e7d3      	b.n	8017852 <__ssvfiscanf_r+0xae>
 80178aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80178ae:	2a20      	cmp	r2, #32
 80178b0:	d8ef      	bhi.n	8017892 <__ssvfiscanf_r+0xee>
 80178b2:	a101      	add	r1, pc, #4	; (adr r1, 80178b8 <__ssvfiscanf_r+0x114>)
 80178b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80178b8:	0801796b 	.word	0x0801796b
 80178bc:	08017893 	.word	0x08017893
 80178c0:	08017893 	.word	0x08017893
 80178c4:	080179c9 	.word	0x080179c9
 80178c8:	08017893 	.word	0x08017893
 80178cc:	08017893 	.word	0x08017893
 80178d0:	08017893 	.word	0x08017893
 80178d4:	08017893 	.word	0x08017893
 80178d8:	08017893 	.word	0x08017893
 80178dc:	08017893 	.word	0x08017893
 80178e0:	08017893 	.word	0x08017893
 80178e4:	080179df 	.word	0x080179df
 80178e8:	080179b5 	.word	0x080179b5
 80178ec:	08017943 	.word	0x08017943
 80178f0:	08017943 	.word	0x08017943
 80178f4:	08017943 	.word	0x08017943
 80178f8:	08017893 	.word	0x08017893
 80178fc:	080179b9 	.word	0x080179b9
 8017900:	08017893 	.word	0x08017893
 8017904:	08017893 	.word	0x08017893
 8017908:	08017893 	.word	0x08017893
 801790c:	08017893 	.word	0x08017893
 8017910:	080179ef 	.word	0x080179ef
 8017914:	080179c1 	.word	0x080179c1
 8017918:	08017963 	.word	0x08017963
 801791c:	08017893 	.word	0x08017893
 8017920:	08017893 	.word	0x08017893
 8017924:	080179eb 	.word	0x080179eb
 8017928:	08017893 	.word	0x08017893
 801792c:	080179b5 	.word	0x080179b5
 8017930:	08017893 	.word	0x08017893
 8017934:	08017893 	.word	0x08017893
 8017938:	0801796b 	.word	0x0801796b
 801793c:	3b45      	subs	r3, #69	; 0x45
 801793e:	2b02      	cmp	r3, #2
 8017940:	d8a7      	bhi.n	8017892 <__ssvfiscanf_r+0xee>
 8017942:	2305      	movs	r3, #5
 8017944:	e01b      	b.n	801797e <__ssvfiscanf_r+0x1da>
 8017946:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017948:	4621      	mov	r1, r4
 801794a:	4630      	mov	r0, r6
 801794c:	4798      	blx	r3
 801794e:	2800      	cmp	r0, #0
 8017950:	f43f af68 	beq.w	8017824 <__ssvfiscanf_r+0x80>
 8017954:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017956:	2800      	cmp	r0, #0
 8017958:	f040 808d 	bne.w	8017a76 <__ssvfiscanf_r+0x2d2>
 801795c:	f04f 30ff 	mov.w	r0, #4294967295
 8017960:	e08f      	b.n	8017a82 <__ssvfiscanf_r+0x2de>
 8017962:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017964:	f042 0220 	orr.w	r2, r2, #32
 8017968:	9241      	str	r2, [sp, #260]	; 0x104
 801796a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801796c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017970:	9241      	str	r2, [sp, #260]	; 0x104
 8017972:	2210      	movs	r2, #16
 8017974:	2b6f      	cmp	r3, #111	; 0x6f
 8017976:	9242      	str	r2, [sp, #264]	; 0x108
 8017978:	bf34      	ite	cc
 801797a:	2303      	movcc	r3, #3
 801797c:	2304      	movcs	r3, #4
 801797e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017980:	6863      	ldr	r3, [r4, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	dd42      	ble.n	8017a0c <__ssvfiscanf_r+0x268>
 8017986:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017988:	0659      	lsls	r1, r3, #25
 801798a:	d404      	bmi.n	8017996 <__ssvfiscanf_r+0x1f2>
 801798c:	6823      	ldr	r3, [r4, #0]
 801798e:	781a      	ldrb	r2, [r3, #0]
 8017990:	5cba      	ldrb	r2, [r7, r2]
 8017992:	0712      	lsls	r2, r2, #28
 8017994:	d441      	bmi.n	8017a1a <__ssvfiscanf_r+0x276>
 8017996:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017998:	2b02      	cmp	r3, #2
 801799a:	dc50      	bgt.n	8017a3e <__ssvfiscanf_r+0x29a>
 801799c:	466b      	mov	r3, sp
 801799e:	4622      	mov	r2, r4
 80179a0:	a941      	add	r1, sp, #260	; 0x104
 80179a2:	4630      	mov	r0, r6
 80179a4:	f000 f876 	bl	8017a94 <_scanf_chars>
 80179a8:	2801      	cmp	r0, #1
 80179aa:	d06e      	beq.n	8017a8a <__ssvfiscanf_r+0x2e6>
 80179ac:	2802      	cmp	r0, #2
 80179ae:	f47f af20 	bne.w	80177f2 <__ssvfiscanf_r+0x4e>
 80179b2:	e7cf      	b.n	8017954 <__ssvfiscanf_r+0x1b0>
 80179b4:	220a      	movs	r2, #10
 80179b6:	e7dd      	b.n	8017974 <__ssvfiscanf_r+0x1d0>
 80179b8:	2300      	movs	r3, #0
 80179ba:	9342      	str	r3, [sp, #264]	; 0x108
 80179bc:	2303      	movs	r3, #3
 80179be:	e7de      	b.n	801797e <__ssvfiscanf_r+0x1da>
 80179c0:	2308      	movs	r3, #8
 80179c2:	9342      	str	r3, [sp, #264]	; 0x108
 80179c4:	2304      	movs	r3, #4
 80179c6:	e7da      	b.n	801797e <__ssvfiscanf_r+0x1da>
 80179c8:	4629      	mov	r1, r5
 80179ca:	4640      	mov	r0, r8
 80179cc:	f000 f9d0 	bl	8017d70 <__sccl>
 80179d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179d6:	9341      	str	r3, [sp, #260]	; 0x104
 80179d8:	4605      	mov	r5, r0
 80179da:	2301      	movs	r3, #1
 80179dc:	e7cf      	b.n	801797e <__ssvfiscanf_r+0x1da>
 80179de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179e4:	9341      	str	r3, [sp, #260]	; 0x104
 80179e6:	2300      	movs	r3, #0
 80179e8:	e7c9      	b.n	801797e <__ssvfiscanf_r+0x1da>
 80179ea:	2302      	movs	r3, #2
 80179ec:	e7c7      	b.n	801797e <__ssvfiscanf_r+0x1da>
 80179ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80179f0:	06c3      	lsls	r3, r0, #27
 80179f2:	f53f aefe 	bmi.w	80177f2 <__ssvfiscanf_r+0x4e>
 80179f6:	9b00      	ldr	r3, [sp, #0]
 80179f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179fa:	1d19      	adds	r1, r3, #4
 80179fc:	9100      	str	r1, [sp, #0]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	f010 0f01 	tst.w	r0, #1
 8017a04:	bf14      	ite	ne
 8017a06:	801a      	strhne	r2, [r3, #0]
 8017a08:	601a      	streq	r2, [r3, #0]
 8017a0a:	e6f2      	b.n	80177f2 <__ssvfiscanf_r+0x4e>
 8017a0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a0e:	4621      	mov	r1, r4
 8017a10:	4630      	mov	r0, r6
 8017a12:	4798      	blx	r3
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d0b6      	beq.n	8017986 <__ssvfiscanf_r+0x1e2>
 8017a18:	e79c      	b.n	8017954 <__ssvfiscanf_r+0x1b0>
 8017a1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a1c:	3201      	adds	r2, #1
 8017a1e:	9245      	str	r2, [sp, #276]	; 0x114
 8017a20:	6862      	ldr	r2, [r4, #4]
 8017a22:	3a01      	subs	r2, #1
 8017a24:	2a00      	cmp	r2, #0
 8017a26:	6062      	str	r2, [r4, #4]
 8017a28:	dd02      	ble.n	8017a30 <__ssvfiscanf_r+0x28c>
 8017a2a:	3301      	adds	r3, #1
 8017a2c:	6023      	str	r3, [r4, #0]
 8017a2e:	e7ad      	b.n	801798c <__ssvfiscanf_r+0x1e8>
 8017a30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a32:	4621      	mov	r1, r4
 8017a34:	4630      	mov	r0, r6
 8017a36:	4798      	blx	r3
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	d0a7      	beq.n	801798c <__ssvfiscanf_r+0x1e8>
 8017a3c:	e78a      	b.n	8017954 <__ssvfiscanf_r+0x1b0>
 8017a3e:	2b04      	cmp	r3, #4
 8017a40:	dc0e      	bgt.n	8017a60 <__ssvfiscanf_r+0x2bc>
 8017a42:	466b      	mov	r3, sp
 8017a44:	4622      	mov	r2, r4
 8017a46:	a941      	add	r1, sp, #260	; 0x104
 8017a48:	4630      	mov	r0, r6
 8017a4a:	f000 f87d 	bl	8017b48 <_scanf_i>
 8017a4e:	e7ab      	b.n	80179a8 <__ssvfiscanf_r+0x204>
 8017a50:	080176f1 	.word	0x080176f1
 8017a54:	0801776b 	.word	0x0801776b
 8017a58:	08058882 	.word	0x08058882
 8017a5c:	0805875a 	.word	0x0805875a
 8017a60:	4b0b      	ldr	r3, [pc, #44]	; (8017a90 <__ssvfiscanf_r+0x2ec>)
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	f43f aec5 	beq.w	80177f2 <__ssvfiscanf_r+0x4e>
 8017a68:	466b      	mov	r3, sp
 8017a6a:	4622      	mov	r2, r4
 8017a6c:	a941      	add	r1, sp, #260	; 0x104
 8017a6e:	4630      	mov	r0, r6
 8017a70:	f3af 8000 	nop.w
 8017a74:	e798      	b.n	80179a8 <__ssvfiscanf_r+0x204>
 8017a76:	89a3      	ldrh	r3, [r4, #12]
 8017a78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017a7c:	bf18      	it	ne
 8017a7e:	f04f 30ff 	movne.w	r0, #4294967295
 8017a82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a8c:	e7f9      	b.n	8017a82 <__ssvfiscanf_r+0x2de>
 8017a8e:	bf00      	nop
 8017a90:	00000000 	.word	0x00000000

08017a94 <_scanf_chars>:
 8017a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a98:	4615      	mov	r5, r2
 8017a9a:	688a      	ldr	r2, [r1, #8]
 8017a9c:	4680      	mov	r8, r0
 8017a9e:	460c      	mov	r4, r1
 8017aa0:	b932      	cbnz	r2, 8017ab0 <_scanf_chars+0x1c>
 8017aa2:	698a      	ldr	r2, [r1, #24]
 8017aa4:	2a00      	cmp	r2, #0
 8017aa6:	bf0c      	ite	eq
 8017aa8:	2201      	moveq	r2, #1
 8017aaa:	f04f 32ff 	movne.w	r2, #4294967295
 8017aae:	608a      	str	r2, [r1, #8]
 8017ab0:	6822      	ldr	r2, [r4, #0]
 8017ab2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017b44 <_scanf_chars+0xb0>
 8017ab6:	06d1      	lsls	r1, r2, #27
 8017ab8:	bf5f      	itttt	pl
 8017aba:	681a      	ldrpl	r2, [r3, #0]
 8017abc:	1d11      	addpl	r1, r2, #4
 8017abe:	6019      	strpl	r1, [r3, #0]
 8017ac0:	6816      	ldrpl	r6, [r2, #0]
 8017ac2:	2700      	movs	r7, #0
 8017ac4:	69a0      	ldr	r0, [r4, #24]
 8017ac6:	b188      	cbz	r0, 8017aec <_scanf_chars+0x58>
 8017ac8:	2801      	cmp	r0, #1
 8017aca:	d107      	bne.n	8017adc <_scanf_chars+0x48>
 8017acc:	682a      	ldr	r2, [r5, #0]
 8017ace:	7811      	ldrb	r1, [r2, #0]
 8017ad0:	6962      	ldr	r2, [r4, #20]
 8017ad2:	5c52      	ldrb	r2, [r2, r1]
 8017ad4:	b952      	cbnz	r2, 8017aec <_scanf_chars+0x58>
 8017ad6:	2f00      	cmp	r7, #0
 8017ad8:	d031      	beq.n	8017b3e <_scanf_chars+0xaa>
 8017ada:	e022      	b.n	8017b22 <_scanf_chars+0x8e>
 8017adc:	2802      	cmp	r0, #2
 8017ade:	d120      	bne.n	8017b22 <_scanf_chars+0x8e>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017ae8:	071b      	lsls	r3, r3, #28
 8017aea:	d41a      	bmi.n	8017b22 <_scanf_chars+0x8e>
 8017aec:	6823      	ldr	r3, [r4, #0]
 8017aee:	06da      	lsls	r2, r3, #27
 8017af0:	bf5e      	ittt	pl
 8017af2:	682b      	ldrpl	r3, [r5, #0]
 8017af4:	781b      	ldrbpl	r3, [r3, #0]
 8017af6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017afa:	682a      	ldr	r2, [r5, #0]
 8017afc:	686b      	ldr	r3, [r5, #4]
 8017afe:	3201      	adds	r2, #1
 8017b00:	602a      	str	r2, [r5, #0]
 8017b02:	68a2      	ldr	r2, [r4, #8]
 8017b04:	3b01      	subs	r3, #1
 8017b06:	3a01      	subs	r2, #1
 8017b08:	606b      	str	r3, [r5, #4]
 8017b0a:	3701      	adds	r7, #1
 8017b0c:	60a2      	str	r2, [r4, #8]
 8017b0e:	b142      	cbz	r2, 8017b22 <_scanf_chars+0x8e>
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	dcd7      	bgt.n	8017ac4 <_scanf_chars+0x30>
 8017b14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b18:	4629      	mov	r1, r5
 8017b1a:	4640      	mov	r0, r8
 8017b1c:	4798      	blx	r3
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	d0d0      	beq.n	8017ac4 <_scanf_chars+0x30>
 8017b22:	6823      	ldr	r3, [r4, #0]
 8017b24:	f013 0310 	ands.w	r3, r3, #16
 8017b28:	d105      	bne.n	8017b36 <_scanf_chars+0xa2>
 8017b2a:	68e2      	ldr	r2, [r4, #12]
 8017b2c:	3201      	adds	r2, #1
 8017b2e:	60e2      	str	r2, [r4, #12]
 8017b30:	69a2      	ldr	r2, [r4, #24]
 8017b32:	b102      	cbz	r2, 8017b36 <_scanf_chars+0xa2>
 8017b34:	7033      	strb	r3, [r6, #0]
 8017b36:	6923      	ldr	r3, [r4, #16]
 8017b38:	443b      	add	r3, r7
 8017b3a:	6123      	str	r3, [r4, #16]
 8017b3c:	2000      	movs	r0, #0
 8017b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b42:	bf00      	nop
 8017b44:	08058882 	.word	0x08058882

08017b48 <_scanf_i>:
 8017b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b4c:	4698      	mov	r8, r3
 8017b4e:	4b76      	ldr	r3, [pc, #472]	; (8017d28 <_scanf_i+0x1e0>)
 8017b50:	460c      	mov	r4, r1
 8017b52:	4682      	mov	sl, r0
 8017b54:	4616      	mov	r6, r2
 8017b56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017b5a:	b087      	sub	sp, #28
 8017b5c:	ab03      	add	r3, sp, #12
 8017b5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017b62:	4b72      	ldr	r3, [pc, #456]	; (8017d2c <_scanf_i+0x1e4>)
 8017b64:	69a1      	ldr	r1, [r4, #24]
 8017b66:	4a72      	ldr	r2, [pc, #456]	; (8017d30 <_scanf_i+0x1e8>)
 8017b68:	2903      	cmp	r1, #3
 8017b6a:	bf18      	it	ne
 8017b6c:	461a      	movne	r2, r3
 8017b6e:	68a3      	ldr	r3, [r4, #8]
 8017b70:	9201      	str	r2, [sp, #4]
 8017b72:	1e5a      	subs	r2, r3, #1
 8017b74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017b78:	bf88      	it	hi
 8017b7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017b7e:	4627      	mov	r7, r4
 8017b80:	bf82      	ittt	hi
 8017b82:	eb03 0905 	addhi.w	r9, r3, r5
 8017b86:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017b8a:	60a3      	strhi	r3, [r4, #8]
 8017b8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017b90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017b94:	bf98      	it	ls
 8017b96:	f04f 0900 	movls.w	r9, #0
 8017b9a:	6023      	str	r3, [r4, #0]
 8017b9c:	463d      	mov	r5, r7
 8017b9e:	f04f 0b00 	mov.w	fp, #0
 8017ba2:	6831      	ldr	r1, [r6, #0]
 8017ba4:	ab03      	add	r3, sp, #12
 8017ba6:	7809      	ldrb	r1, [r1, #0]
 8017ba8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017bac:	2202      	movs	r2, #2
 8017bae:	f7e8 fb37 	bl	8000220 <memchr>
 8017bb2:	b328      	cbz	r0, 8017c00 <_scanf_i+0xb8>
 8017bb4:	f1bb 0f01 	cmp.w	fp, #1
 8017bb8:	d159      	bne.n	8017c6e <_scanf_i+0x126>
 8017bba:	6862      	ldr	r2, [r4, #4]
 8017bbc:	b92a      	cbnz	r2, 8017bca <_scanf_i+0x82>
 8017bbe:	6822      	ldr	r2, [r4, #0]
 8017bc0:	2308      	movs	r3, #8
 8017bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017bc6:	6063      	str	r3, [r4, #4]
 8017bc8:	6022      	str	r2, [r4, #0]
 8017bca:	6822      	ldr	r2, [r4, #0]
 8017bcc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017bd0:	6022      	str	r2, [r4, #0]
 8017bd2:	68a2      	ldr	r2, [r4, #8]
 8017bd4:	1e51      	subs	r1, r2, #1
 8017bd6:	60a1      	str	r1, [r4, #8]
 8017bd8:	b192      	cbz	r2, 8017c00 <_scanf_i+0xb8>
 8017bda:	6832      	ldr	r2, [r6, #0]
 8017bdc:	1c51      	adds	r1, r2, #1
 8017bde:	6031      	str	r1, [r6, #0]
 8017be0:	7812      	ldrb	r2, [r2, #0]
 8017be2:	f805 2b01 	strb.w	r2, [r5], #1
 8017be6:	6872      	ldr	r2, [r6, #4]
 8017be8:	3a01      	subs	r2, #1
 8017bea:	2a00      	cmp	r2, #0
 8017bec:	6072      	str	r2, [r6, #4]
 8017bee:	dc07      	bgt.n	8017c00 <_scanf_i+0xb8>
 8017bf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017bf4:	4631      	mov	r1, r6
 8017bf6:	4650      	mov	r0, sl
 8017bf8:	4790      	blx	r2
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	f040 8085 	bne.w	8017d0a <_scanf_i+0x1c2>
 8017c00:	f10b 0b01 	add.w	fp, fp, #1
 8017c04:	f1bb 0f03 	cmp.w	fp, #3
 8017c08:	d1cb      	bne.n	8017ba2 <_scanf_i+0x5a>
 8017c0a:	6863      	ldr	r3, [r4, #4]
 8017c0c:	b90b      	cbnz	r3, 8017c12 <_scanf_i+0xca>
 8017c0e:	230a      	movs	r3, #10
 8017c10:	6063      	str	r3, [r4, #4]
 8017c12:	6863      	ldr	r3, [r4, #4]
 8017c14:	4947      	ldr	r1, [pc, #284]	; (8017d34 <_scanf_i+0x1ec>)
 8017c16:	6960      	ldr	r0, [r4, #20]
 8017c18:	1ac9      	subs	r1, r1, r3
 8017c1a:	f000 f8a9 	bl	8017d70 <__sccl>
 8017c1e:	f04f 0b00 	mov.w	fp, #0
 8017c22:	68a3      	ldr	r3, [r4, #8]
 8017c24:	6822      	ldr	r2, [r4, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d03d      	beq.n	8017ca6 <_scanf_i+0x15e>
 8017c2a:	6831      	ldr	r1, [r6, #0]
 8017c2c:	6960      	ldr	r0, [r4, #20]
 8017c2e:	f891 c000 	ldrb.w	ip, [r1]
 8017c32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017c36:	2800      	cmp	r0, #0
 8017c38:	d035      	beq.n	8017ca6 <_scanf_i+0x15e>
 8017c3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017c3e:	d124      	bne.n	8017c8a <_scanf_i+0x142>
 8017c40:	0510      	lsls	r0, r2, #20
 8017c42:	d522      	bpl.n	8017c8a <_scanf_i+0x142>
 8017c44:	f10b 0b01 	add.w	fp, fp, #1
 8017c48:	f1b9 0f00 	cmp.w	r9, #0
 8017c4c:	d003      	beq.n	8017c56 <_scanf_i+0x10e>
 8017c4e:	3301      	adds	r3, #1
 8017c50:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c54:	60a3      	str	r3, [r4, #8]
 8017c56:	6873      	ldr	r3, [r6, #4]
 8017c58:	3b01      	subs	r3, #1
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	6073      	str	r3, [r6, #4]
 8017c5e:	dd1b      	ble.n	8017c98 <_scanf_i+0x150>
 8017c60:	6833      	ldr	r3, [r6, #0]
 8017c62:	3301      	adds	r3, #1
 8017c64:	6033      	str	r3, [r6, #0]
 8017c66:	68a3      	ldr	r3, [r4, #8]
 8017c68:	3b01      	subs	r3, #1
 8017c6a:	60a3      	str	r3, [r4, #8]
 8017c6c:	e7d9      	b.n	8017c22 <_scanf_i+0xda>
 8017c6e:	f1bb 0f02 	cmp.w	fp, #2
 8017c72:	d1ae      	bne.n	8017bd2 <_scanf_i+0x8a>
 8017c74:	6822      	ldr	r2, [r4, #0]
 8017c76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017c7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017c7e:	d1bf      	bne.n	8017c00 <_scanf_i+0xb8>
 8017c80:	2310      	movs	r3, #16
 8017c82:	6063      	str	r3, [r4, #4]
 8017c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c88:	e7a2      	b.n	8017bd0 <_scanf_i+0x88>
 8017c8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017c8e:	6022      	str	r2, [r4, #0]
 8017c90:	780b      	ldrb	r3, [r1, #0]
 8017c92:	f805 3b01 	strb.w	r3, [r5], #1
 8017c96:	e7de      	b.n	8017c56 <_scanf_i+0x10e>
 8017c98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c9c:	4631      	mov	r1, r6
 8017c9e:	4650      	mov	r0, sl
 8017ca0:	4798      	blx	r3
 8017ca2:	2800      	cmp	r0, #0
 8017ca4:	d0df      	beq.n	8017c66 <_scanf_i+0x11e>
 8017ca6:	6823      	ldr	r3, [r4, #0]
 8017ca8:	05db      	lsls	r3, r3, #23
 8017caa:	d50d      	bpl.n	8017cc8 <_scanf_i+0x180>
 8017cac:	42bd      	cmp	r5, r7
 8017cae:	d909      	bls.n	8017cc4 <_scanf_i+0x17c>
 8017cb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017cb8:	4632      	mov	r2, r6
 8017cba:	4650      	mov	r0, sl
 8017cbc:	4798      	blx	r3
 8017cbe:	f105 39ff 	add.w	r9, r5, #4294967295
 8017cc2:	464d      	mov	r5, r9
 8017cc4:	42bd      	cmp	r5, r7
 8017cc6:	d02d      	beq.n	8017d24 <_scanf_i+0x1dc>
 8017cc8:	6822      	ldr	r2, [r4, #0]
 8017cca:	f012 0210 	ands.w	r2, r2, #16
 8017cce:	d113      	bne.n	8017cf8 <_scanf_i+0x1b0>
 8017cd0:	702a      	strb	r2, [r5, #0]
 8017cd2:	6863      	ldr	r3, [r4, #4]
 8017cd4:	9e01      	ldr	r6, [sp, #4]
 8017cd6:	4639      	mov	r1, r7
 8017cd8:	4650      	mov	r0, sl
 8017cda:	47b0      	blx	r6
 8017cdc:	6821      	ldr	r1, [r4, #0]
 8017cde:	f8d8 3000 	ldr.w	r3, [r8]
 8017ce2:	f011 0f20 	tst.w	r1, #32
 8017ce6:	d013      	beq.n	8017d10 <_scanf_i+0x1c8>
 8017ce8:	1d1a      	adds	r2, r3, #4
 8017cea:	f8c8 2000 	str.w	r2, [r8]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	6018      	str	r0, [r3, #0]
 8017cf2:	68e3      	ldr	r3, [r4, #12]
 8017cf4:	3301      	adds	r3, #1
 8017cf6:	60e3      	str	r3, [r4, #12]
 8017cf8:	1bed      	subs	r5, r5, r7
 8017cfa:	44ab      	add	fp, r5
 8017cfc:	6925      	ldr	r5, [r4, #16]
 8017cfe:	445d      	add	r5, fp
 8017d00:	6125      	str	r5, [r4, #16]
 8017d02:	2000      	movs	r0, #0
 8017d04:	b007      	add	sp, #28
 8017d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d0a:	f04f 0b00 	mov.w	fp, #0
 8017d0e:	e7ca      	b.n	8017ca6 <_scanf_i+0x15e>
 8017d10:	1d1a      	adds	r2, r3, #4
 8017d12:	f8c8 2000 	str.w	r2, [r8]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	f011 0f01 	tst.w	r1, #1
 8017d1c:	bf14      	ite	ne
 8017d1e:	8018      	strhne	r0, [r3, #0]
 8017d20:	6018      	streq	r0, [r3, #0]
 8017d22:	e7e6      	b.n	8017cf2 <_scanf_i+0x1aa>
 8017d24:	2001      	movs	r0, #1
 8017d26:	e7ed      	b.n	8017d04 <_scanf_i+0x1bc>
 8017d28:	0801b980 	.word	0x0801b980
 8017d2c:	08017f75 	.word	0x08017f75
 8017d30:	08014a59 	.word	0x08014a59
 8017d34:	08058cad 	.word	0x08058cad

08017d38 <_read_r>:
 8017d38:	b538      	push	{r3, r4, r5, lr}
 8017d3a:	4d07      	ldr	r5, [pc, #28]	; (8017d58 <_read_r+0x20>)
 8017d3c:	4604      	mov	r4, r0
 8017d3e:	4608      	mov	r0, r1
 8017d40:	4611      	mov	r1, r2
 8017d42:	2200      	movs	r2, #0
 8017d44:	602a      	str	r2, [r5, #0]
 8017d46:	461a      	mov	r2, r3
 8017d48:	f7ec fc34 	bl	80045b4 <_read>
 8017d4c:	1c43      	adds	r3, r0, #1
 8017d4e:	d102      	bne.n	8017d56 <_read_r+0x1e>
 8017d50:	682b      	ldr	r3, [r5, #0]
 8017d52:	b103      	cbz	r3, 8017d56 <_read_r+0x1e>
 8017d54:	6023      	str	r3, [r4, #0]
 8017d56:	bd38      	pop	{r3, r4, r5, pc}
 8017d58:	20005e04 	.word	0x20005e04
 8017d5c:	00000000 	.word	0x00000000

08017d60 <nan>:
 8017d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017d68 <nan+0x8>
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	00000000 	.word	0x00000000
 8017d6c:	7ff80000 	.word	0x7ff80000

08017d70 <__sccl>:
 8017d70:	b570      	push	{r4, r5, r6, lr}
 8017d72:	780b      	ldrb	r3, [r1, #0]
 8017d74:	4604      	mov	r4, r0
 8017d76:	2b5e      	cmp	r3, #94	; 0x5e
 8017d78:	bf0b      	itete	eq
 8017d7a:	784b      	ldrbeq	r3, [r1, #1]
 8017d7c:	1c48      	addne	r0, r1, #1
 8017d7e:	1c88      	addeq	r0, r1, #2
 8017d80:	2200      	movne	r2, #0
 8017d82:	bf08      	it	eq
 8017d84:	2201      	moveq	r2, #1
 8017d86:	1e61      	subs	r1, r4, #1
 8017d88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017d8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017d90:	42a9      	cmp	r1, r5
 8017d92:	d1fb      	bne.n	8017d8c <__sccl+0x1c>
 8017d94:	b90b      	cbnz	r3, 8017d9a <__sccl+0x2a>
 8017d96:	3801      	subs	r0, #1
 8017d98:	bd70      	pop	{r4, r5, r6, pc}
 8017d9a:	f082 0201 	eor.w	r2, r2, #1
 8017d9e:	54e2      	strb	r2, [r4, r3]
 8017da0:	4605      	mov	r5, r0
 8017da2:	4628      	mov	r0, r5
 8017da4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017da8:	292d      	cmp	r1, #45	; 0x2d
 8017daa:	d006      	beq.n	8017dba <__sccl+0x4a>
 8017dac:	295d      	cmp	r1, #93	; 0x5d
 8017dae:	d0f3      	beq.n	8017d98 <__sccl+0x28>
 8017db0:	b909      	cbnz	r1, 8017db6 <__sccl+0x46>
 8017db2:	4628      	mov	r0, r5
 8017db4:	e7f0      	b.n	8017d98 <__sccl+0x28>
 8017db6:	460b      	mov	r3, r1
 8017db8:	e7f1      	b.n	8017d9e <__sccl+0x2e>
 8017dba:	786e      	ldrb	r6, [r5, #1]
 8017dbc:	2e5d      	cmp	r6, #93	; 0x5d
 8017dbe:	d0fa      	beq.n	8017db6 <__sccl+0x46>
 8017dc0:	42b3      	cmp	r3, r6
 8017dc2:	dcf8      	bgt.n	8017db6 <__sccl+0x46>
 8017dc4:	3502      	adds	r5, #2
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	3101      	adds	r1, #1
 8017dca:	428e      	cmp	r6, r1
 8017dcc:	5462      	strb	r2, [r4, r1]
 8017dce:	dcfb      	bgt.n	8017dc8 <__sccl+0x58>
 8017dd0:	1af1      	subs	r1, r6, r3
 8017dd2:	3901      	subs	r1, #1
 8017dd4:	1c58      	adds	r0, r3, #1
 8017dd6:	42b3      	cmp	r3, r6
 8017dd8:	bfa8      	it	ge
 8017dda:	2100      	movge	r1, #0
 8017ddc:	1843      	adds	r3, r0, r1
 8017dde:	e7e0      	b.n	8017da2 <__sccl+0x32>

08017de0 <_raise_r>:
 8017de0:	291f      	cmp	r1, #31
 8017de2:	b538      	push	{r3, r4, r5, lr}
 8017de4:	4604      	mov	r4, r0
 8017de6:	460d      	mov	r5, r1
 8017de8:	d904      	bls.n	8017df4 <_raise_r+0x14>
 8017dea:	2316      	movs	r3, #22
 8017dec:	6003      	str	r3, [r0, #0]
 8017dee:	f04f 30ff 	mov.w	r0, #4294967295
 8017df2:	bd38      	pop	{r3, r4, r5, pc}
 8017df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017df6:	b112      	cbz	r2, 8017dfe <_raise_r+0x1e>
 8017df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dfc:	b94b      	cbnz	r3, 8017e12 <_raise_r+0x32>
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f000 f830 	bl	8017e64 <_getpid_r>
 8017e04:	462a      	mov	r2, r5
 8017e06:	4601      	mov	r1, r0
 8017e08:	4620      	mov	r0, r4
 8017e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e0e:	f000 b817 	b.w	8017e40 <_kill_r>
 8017e12:	2b01      	cmp	r3, #1
 8017e14:	d00a      	beq.n	8017e2c <_raise_r+0x4c>
 8017e16:	1c59      	adds	r1, r3, #1
 8017e18:	d103      	bne.n	8017e22 <_raise_r+0x42>
 8017e1a:	2316      	movs	r3, #22
 8017e1c:	6003      	str	r3, [r0, #0]
 8017e1e:	2001      	movs	r0, #1
 8017e20:	e7e7      	b.n	8017df2 <_raise_r+0x12>
 8017e22:	2400      	movs	r4, #0
 8017e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e28:	4628      	mov	r0, r5
 8017e2a:	4798      	blx	r3
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	e7e0      	b.n	8017df2 <_raise_r+0x12>

08017e30 <raise>:
 8017e30:	4b02      	ldr	r3, [pc, #8]	; (8017e3c <raise+0xc>)
 8017e32:	4601      	mov	r1, r0
 8017e34:	6818      	ldr	r0, [r3, #0]
 8017e36:	f7ff bfd3 	b.w	8017de0 <_raise_r>
 8017e3a:	bf00      	nop
 8017e3c:	20000320 	.word	0x20000320

08017e40 <_kill_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	4d07      	ldr	r5, [pc, #28]	; (8017e60 <_kill_r+0x20>)
 8017e44:	2300      	movs	r3, #0
 8017e46:	4604      	mov	r4, r0
 8017e48:	4608      	mov	r0, r1
 8017e4a:	4611      	mov	r1, r2
 8017e4c:	602b      	str	r3, [r5, #0]
 8017e4e:	f7ec fb97 	bl	8004580 <_kill>
 8017e52:	1c43      	adds	r3, r0, #1
 8017e54:	d102      	bne.n	8017e5c <_kill_r+0x1c>
 8017e56:	682b      	ldr	r3, [r5, #0]
 8017e58:	b103      	cbz	r3, 8017e5c <_kill_r+0x1c>
 8017e5a:	6023      	str	r3, [r4, #0]
 8017e5c:	bd38      	pop	{r3, r4, r5, pc}
 8017e5e:	bf00      	nop
 8017e60:	20005e04 	.word	0x20005e04

08017e64 <_getpid_r>:
 8017e64:	f7ec bb84 	b.w	8004570 <_getpid>

08017e68 <strncmp>:
 8017e68:	b510      	push	{r4, lr}
 8017e6a:	b17a      	cbz	r2, 8017e8c <strncmp+0x24>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	3901      	subs	r1, #1
 8017e70:	1884      	adds	r4, r0, r2
 8017e72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017e76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017e7a:	4290      	cmp	r0, r2
 8017e7c:	d101      	bne.n	8017e82 <strncmp+0x1a>
 8017e7e:	42a3      	cmp	r3, r4
 8017e80:	d101      	bne.n	8017e86 <strncmp+0x1e>
 8017e82:	1a80      	subs	r0, r0, r2
 8017e84:	bd10      	pop	{r4, pc}
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d1f3      	bne.n	8017e72 <strncmp+0xa>
 8017e8a:	e7fa      	b.n	8017e82 <strncmp+0x1a>
 8017e8c:	4610      	mov	r0, r2
 8017e8e:	e7f9      	b.n	8017e84 <strncmp+0x1c>

08017e90 <_strtoul_l.constprop.0>:
 8017e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e94:	4f36      	ldr	r7, [pc, #216]	; (8017f70 <_strtoul_l.constprop.0+0xe0>)
 8017e96:	4686      	mov	lr, r0
 8017e98:	460d      	mov	r5, r1
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ea0:	5de6      	ldrb	r6, [r4, r7]
 8017ea2:	f016 0608 	ands.w	r6, r6, #8
 8017ea6:	d1f8      	bne.n	8017e9a <_strtoul_l.constprop.0+0xa>
 8017ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8017eaa:	d12f      	bne.n	8017f0c <_strtoul_l.constprop.0+0x7c>
 8017eac:	782c      	ldrb	r4, [r5, #0]
 8017eae:	2601      	movs	r6, #1
 8017eb0:	1c85      	adds	r5, r0, #2
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d057      	beq.n	8017f66 <_strtoul_l.constprop.0+0xd6>
 8017eb6:	2b10      	cmp	r3, #16
 8017eb8:	d109      	bne.n	8017ece <_strtoul_l.constprop.0+0x3e>
 8017eba:	2c30      	cmp	r4, #48	; 0x30
 8017ebc:	d107      	bne.n	8017ece <_strtoul_l.constprop.0+0x3e>
 8017ebe:	7828      	ldrb	r0, [r5, #0]
 8017ec0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017ec4:	2858      	cmp	r0, #88	; 0x58
 8017ec6:	d149      	bne.n	8017f5c <_strtoul_l.constprop.0+0xcc>
 8017ec8:	786c      	ldrb	r4, [r5, #1]
 8017eca:	2310      	movs	r3, #16
 8017ecc:	3502      	adds	r5, #2
 8017ece:	f04f 38ff 	mov.w	r8, #4294967295
 8017ed2:	2700      	movs	r7, #0
 8017ed4:	fbb8 f8f3 	udiv	r8, r8, r3
 8017ed8:	fb03 f908 	mul.w	r9, r3, r8
 8017edc:	ea6f 0909 	mvn.w	r9, r9
 8017ee0:	4638      	mov	r0, r7
 8017ee2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017ee6:	f1bc 0f09 	cmp.w	ip, #9
 8017eea:	d814      	bhi.n	8017f16 <_strtoul_l.constprop.0+0x86>
 8017eec:	4664      	mov	r4, ip
 8017eee:	42a3      	cmp	r3, r4
 8017ef0:	dd22      	ble.n	8017f38 <_strtoul_l.constprop.0+0xa8>
 8017ef2:	2f00      	cmp	r7, #0
 8017ef4:	db1d      	blt.n	8017f32 <_strtoul_l.constprop.0+0xa2>
 8017ef6:	4580      	cmp	r8, r0
 8017ef8:	d31b      	bcc.n	8017f32 <_strtoul_l.constprop.0+0xa2>
 8017efa:	d101      	bne.n	8017f00 <_strtoul_l.constprop.0+0x70>
 8017efc:	45a1      	cmp	r9, r4
 8017efe:	db18      	blt.n	8017f32 <_strtoul_l.constprop.0+0xa2>
 8017f00:	fb00 4003 	mla	r0, r0, r3, r4
 8017f04:	2701      	movs	r7, #1
 8017f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f0a:	e7ea      	b.n	8017ee2 <_strtoul_l.constprop.0+0x52>
 8017f0c:	2c2b      	cmp	r4, #43	; 0x2b
 8017f0e:	bf04      	itt	eq
 8017f10:	782c      	ldrbeq	r4, [r5, #0]
 8017f12:	1c85      	addeq	r5, r0, #2
 8017f14:	e7cd      	b.n	8017eb2 <_strtoul_l.constprop.0+0x22>
 8017f16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017f1a:	f1bc 0f19 	cmp.w	ip, #25
 8017f1e:	d801      	bhi.n	8017f24 <_strtoul_l.constprop.0+0x94>
 8017f20:	3c37      	subs	r4, #55	; 0x37
 8017f22:	e7e4      	b.n	8017eee <_strtoul_l.constprop.0+0x5e>
 8017f24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017f28:	f1bc 0f19 	cmp.w	ip, #25
 8017f2c:	d804      	bhi.n	8017f38 <_strtoul_l.constprop.0+0xa8>
 8017f2e:	3c57      	subs	r4, #87	; 0x57
 8017f30:	e7dd      	b.n	8017eee <_strtoul_l.constprop.0+0x5e>
 8017f32:	f04f 37ff 	mov.w	r7, #4294967295
 8017f36:	e7e6      	b.n	8017f06 <_strtoul_l.constprop.0+0x76>
 8017f38:	2f00      	cmp	r7, #0
 8017f3a:	da07      	bge.n	8017f4c <_strtoul_l.constprop.0+0xbc>
 8017f3c:	2322      	movs	r3, #34	; 0x22
 8017f3e:	f8ce 3000 	str.w	r3, [lr]
 8017f42:	f04f 30ff 	mov.w	r0, #4294967295
 8017f46:	b932      	cbnz	r2, 8017f56 <_strtoul_l.constprop.0+0xc6>
 8017f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f4c:	b106      	cbz	r6, 8017f50 <_strtoul_l.constprop.0+0xc0>
 8017f4e:	4240      	negs	r0, r0
 8017f50:	2a00      	cmp	r2, #0
 8017f52:	d0f9      	beq.n	8017f48 <_strtoul_l.constprop.0+0xb8>
 8017f54:	b107      	cbz	r7, 8017f58 <_strtoul_l.constprop.0+0xc8>
 8017f56:	1e69      	subs	r1, r5, #1
 8017f58:	6011      	str	r1, [r2, #0]
 8017f5a:	e7f5      	b.n	8017f48 <_strtoul_l.constprop.0+0xb8>
 8017f5c:	2430      	movs	r4, #48	; 0x30
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d1b5      	bne.n	8017ece <_strtoul_l.constprop.0+0x3e>
 8017f62:	2308      	movs	r3, #8
 8017f64:	e7b3      	b.n	8017ece <_strtoul_l.constprop.0+0x3e>
 8017f66:	2c30      	cmp	r4, #48	; 0x30
 8017f68:	d0a9      	beq.n	8017ebe <_strtoul_l.constprop.0+0x2e>
 8017f6a:	230a      	movs	r3, #10
 8017f6c:	e7af      	b.n	8017ece <_strtoul_l.constprop.0+0x3e>
 8017f6e:	bf00      	nop
 8017f70:	08058882 	.word	0x08058882

08017f74 <_strtoul_r>:
 8017f74:	f7ff bf8c 	b.w	8017e90 <_strtoul_l.constprop.0>

08017f78 <strtoul>:
 8017f78:	4613      	mov	r3, r2
 8017f7a:	460a      	mov	r2, r1
 8017f7c:	4601      	mov	r1, r0
 8017f7e:	4802      	ldr	r0, [pc, #8]	; (8017f88 <strtoul+0x10>)
 8017f80:	6800      	ldr	r0, [r0, #0]
 8017f82:	f7ff bf85 	b.w	8017e90 <_strtoul_l.constprop.0>
 8017f86:	bf00      	nop
 8017f88:	20000320 	.word	0x20000320

08017f8c <__submore>:
 8017f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f90:	460c      	mov	r4, r1
 8017f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f98:	4299      	cmp	r1, r3
 8017f9a:	d11d      	bne.n	8017fd8 <__submore+0x4c>
 8017f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017fa0:	f7fa ff2a 	bl	8012df8 <_malloc_r>
 8017fa4:	b918      	cbnz	r0, 8017fae <__submore+0x22>
 8017fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8017faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017fb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8017fba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017fbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017fc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017fc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017fca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017fce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017fd2:	6020      	str	r0, [r4, #0]
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	e7e8      	b.n	8017faa <__submore+0x1e>
 8017fd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017fda:	0077      	lsls	r7, r6, #1
 8017fdc:	463a      	mov	r2, r7
 8017fde:	f7ff f9fc 	bl	80173da <_realloc_r>
 8017fe2:	4605      	mov	r5, r0
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d0de      	beq.n	8017fa6 <__submore+0x1a>
 8017fe8:	eb00 0806 	add.w	r8, r0, r6
 8017fec:	4601      	mov	r1, r0
 8017fee:	4632      	mov	r2, r6
 8017ff0:	4640      	mov	r0, r8
 8017ff2:	f7fa fc0d 	bl	8012810 <memcpy>
 8017ff6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017ffa:	f8c4 8000 	str.w	r8, [r4]
 8017ffe:	e7e9      	b.n	8017fd4 <__submore+0x48>

08018000 <__ascii_wctomb>:
 8018000:	b149      	cbz	r1, 8018016 <__ascii_wctomb+0x16>
 8018002:	2aff      	cmp	r2, #255	; 0xff
 8018004:	bf85      	ittet	hi
 8018006:	238a      	movhi	r3, #138	; 0x8a
 8018008:	6003      	strhi	r3, [r0, #0]
 801800a:	700a      	strbls	r2, [r1, #0]
 801800c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018010:	bf98      	it	ls
 8018012:	2001      	movls	r0, #1
 8018014:	4770      	bx	lr
 8018016:	4608      	mov	r0, r1
 8018018:	4770      	bx	lr
	...

0801801c <__env_lock>:
 801801c:	4801      	ldr	r0, [pc, #4]	; (8018024 <__env_lock+0x8>)
 801801e:	f7fe bc51 	b.w	80168c4 <__retarget_lock_acquire_recursive>
 8018022:	bf00      	nop
 8018024:	20005dfc 	.word	0x20005dfc

08018028 <__env_unlock>:
 8018028:	4801      	ldr	r0, [pc, #4]	; (8018030 <__env_unlock+0x8>)
 801802a:	f7fe bc4d 	b.w	80168c8 <__retarget_lock_release_recursive>
 801802e:	bf00      	nop
 8018030:	20005dfc 	.word	0x20005dfc

08018034 <_fstat_r>:
 8018034:	b538      	push	{r3, r4, r5, lr}
 8018036:	4d07      	ldr	r5, [pc, #28]	; (8018054 <_fstat_r+0x20>)
 8018038:	2300      	movs	r3, #0
 801803a:	4604      	mov	r4, r0
 801803c:	4608      	mov	r0, r1
 801803e:	4611      	mov	r1, r2
 8018040:	602b      	str	r3, [r5, #0]
 8018042:	f7ec fafc 	bl	800463e <_fstat>
 8018046:	1c43      	adds	r3, r0, #1
 8018048:	d102      	bne.n	8018050 <_fstat_r+0x1c>
 801804a:	682b      	ldr	r3, [r5, #0]
 801804c:	b103      	cbz	r3, 8018050 <_fstat_r+0x1c>
 801804e:	6023      	str	r3, [r4, #0]
 8018050:	bd38      	pop	{r3, r4, r5, pc}
 8018052:	bf00      	nop
 8018054:	20005e04 	.word	0x20005e04

08018058 <_isatty_r>:
 8018058:	b538      	push	{r3, r4, r5, lr}
 801805a:	4d06      	ldr	r5, [pc, #24]	; (8018074 <_isatty_r+0x1c>)
 801805c:	2300      	movs	r3, #0
 801805e:	4604      	mov	r4, r0
 8018060:	4608      	mov	r0, r1
 8018062:	602b      	str	r3, [r5, #0]
 8018064:	f7ec fafb 	bl	800465e <_isatty>
 8018068:	1c43      	adds	r3, r0, #1
 801806a:	d102      	bne.n	8018072 <_isatty_r+0x1a>
 801806c:	682b      	ldr	r3, [r5, #0]
 801806e:	b103      	cbz	r3, 8018072 <_isatty_r+0x1a>
 8018070:	6023      	str	r3, [r4, #0]
 8018072:	bd38      	pop	{r3, r4, r5, pc}
 8018074:	20005e04 	.word	0x20005e04

08018078 <_malloc_usable_size_r>:
 8018078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801807c:	1f18      	subs	r0, r3, #4
 801807e:	2b00      	cmp	r3, #0
 8018080:	bfbc      	itt	lt
 8018082:	580b      	ldrlt	r3, [r1, r0]
 8018084:	18c0      	addlt	r0, r0, r3
 8018086:	4770      	bx	lr

08018088 <cos>:
 8018088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801808a:	ec53 2b10 	vmov	r2, r3, d0
 801808e:	4826      	ldr	r0, [pc, #152]	; (8018128 <cos+0xa0>)
 8018090:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018094:	4281      	cmp	r1, r0
 8018096:	dc06      	bgt.n	80180a6 <cos+0x1e>
 8018098:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8018120 <cos+0x98>
 801809c:	b005      	add	sp, #20
 801809e:	f85d eb04 	ldr.w	lr, [sp], #4
 80180a2:	f001 bbf1 	b.w	8019888 <__kernel_cos>
 80180a6:	4821      	ldr	r0, [pc, #132]	; (801812c <cos+0xa4>)
 80180a8:	4281      	cmp	r1, r0
 80180aa:	dd09      	ble.n	80180c0 <cos+0x38>
 80180ac:	ee10 0a10 	vmov	r0, s0
 80180b0:	4619      	mov	r1, r3
 80180b2:	f7e8 f909 	bl	80002c8 <__aeabi_dsub>
 80180b6:	ec41 0b10 	vmov	d0, r0, r1
 80180ba:	b005      	add	sp, #20
 80180bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80180c0:	4668      	mov	r0, sp
 80180c2:	f001 f921 	bl	8019308 <__ieee754_rem_pio2>
 80180c6:	f000 0003 	and.w	r0, r0, #3
 80180ca:	2801      	cmp	r0, #1
 80180cc:	d00b      	beq.n	80180e6 <cos+0x5e>
 80180ce:	2802      	cmp	r0, #2
 80180d0:	d016      	beq.n	8018100 <cos+0x78>
 80180d2:	b9e0      	cbnz	r0, 801810e <cos+0x86>
 80180d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80180d8:	ed9d 0b00 	vldr	d0, [sp]
 80180dc:	f001 fbd4 	bl	8019888 <__kernel_cos>
 80180e0:	ec51 0b10 	vmov	r0, r1, d0
 80180e4:	e7e7      	b.n	80180b6 <cos+0x2e>
 80180e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80180ea:	ed9d 0b00 	vldr	d0, [sp]
 80180ee:	f001 ffe3 	bl	801a0b8 <__kernel_sin>
 80180f2:	ec53 2b10 	vmov	r2, r3, d0
 80180f6:	ee10 0a10 	vmov	r0, s0
 80180fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80180fe:	e7da      	b.n	80180b6 <cos+0x2e>
 8018100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018104:	ed9d 0b00 	vldr	d0, [sp]
 8018108:	f001 fbbe 	bl	8019888 <__kernel_cos>
 801810c:	e7f1      	b.n	80180f2 <cos+0x6a>
 801810e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018112:	ed9d 0b00 	vldr	d0, [sp]
 8018116:	2001      	movs	r0, #1
 8018118:	f001 ffce 	bl	801a0b8 <__kernel_sin>
 801811c:	e7e0      	b.n	80180e0 <cos+0x58>
 801811e:	bf00      	nop
	...
 8018128:	3fe921fb 	.word	0x3fe921fb
 801812c:	7fefffff 	.word	0x7fefffff

08018130 <sin>:
 8018130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018132:	ec53 2b10 	vmov	r2, r3, d0
 8018136:	4828      	ldr	r0, [pc, #160]	; (80181d8 <sin+0xa8>)
 8018138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801813c:	4281      	cmp	r1, r0
 801813e:	dc07      	bgt.n	8018150 <sin+0x20>
 8018140:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80181d0 <sin+0xa0>
 8018144:	2000      	movs	r0, #0
 8018146:	b005      	add	sp, #20
 8018148:	f85d eb04 	ldr.w	lr, [sp], #4
 801814c:	f001 bfb4 	b.w	801a0b8 <__kernel_sin>
 8018150:	4822      	ldr	r0, [pc, #136]	; (80181dc <sin+0xac>)
 8018152:	4281      	cmp	r1, r0
 8018154:	dd09      	ble.n	801816a <sin+0x3a>
 8018156:	ee10 0a10 	vmov	r0, s0
 801815a:	4619      	mov	r1, r3
 801815c:	f7e8 f8b4 	bl	80002c8 <__aeabi_dsub>
 8018160:	ec41 0b10 	vmov	d0, r0, r1
 8018164:	b005      	add	sp, #20
 8018166:	f85d fb04 	ldr.w	pc, [sp], #4
 801816a:	4668      	mov	r0, sp
 801816c:	f001 f8cc 	bl	8019308 <__ieee754_rem_pio2>
 8018170:	f000 0003 	and.w	r0, r0, #3
 8018174:	2801      	cmp	r0, #1
 8018176:	d00c      	beq.n	8018192 <sin+0x62>
 8018178:	2802      	cmp	r0, #2
 801817a:	d011      	beq.n	80181a0 <sin+0x70>
 801817c:	b9f0      	cbnz	r0, 80181bc <sin+0x8c>
 801817e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018182:	ed9d 0b00 	vldr	d0, [sp]
 8018186:	2001      	movs	r0, #1
 8018188:	f001 ff96 	bl	801a0b8 <__kernel_sin>
 801818c:	ec51 0b10 	vmov	r0, r1, d0
 8018190:	e7e6      	b.n	8018160 <sin+0x30>
 8018192:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018196:	ed9d 0b00 	vldr	d0, [sp]
 801819a:	f001 fb75 	bl	8019888 <__kernel_cos>
 801819e:	e7f5      	b.n	801818c <sin+0x5c>
 80181a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80181a4:	ed9d 0b00 	vldr	d0, [sp]
 80181a8:	2001      	movs	r0, #1
 80181aa:	f001 ff85 	bl	801a0b8 <__kernel_sin>
 80181ae:	ec53 2b10 	vmov	r2, r3, d0
 80181b2:	ee10 0a10 	vmov	r0, s0
 80181b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80181ba:	e7d1      	b.n	8018160 <sin+0x30>
 80181bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80181c0:	ed9d 0b00 	vldr	d0, [sp]
 80181c4:	f001 fb60 	bl	8019888 <__kernel_cos>
 80181c8:	e7f1      	b.n	80181ae <sin+0x7e>
 80181ca:	bf00      	nop
 80181cc:	f3af 8000 	nop.w
	...
 80181d8:	3fe921fb 	.word	0x3fe921fb
 80181dc:	7fefffff 	.word	0x7fefffff

080181e0 <tan>:
 80181e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80181e2:	ec53 2b10 	vmov	r2, r3, d0
 80181e6:	4816      	ldr	r0, [pc, #88]	; (8018240 <tan+0x60>)
 80181e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80181ec:	4281      	cmp	r1, r0
 80181ee:	dc07      	bgt.n	8018200 <tan+0x20>
 80181f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8018238 <tan+0x58>
 80181f4:	2001      	movs	r0, #1
 80181f6:	b005      	add	sp, #20
 80181f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80181fc:	f002 b81c 	b.w	801a238 <__kernel_tan>
 8018200:	4810      	ldr	r0, [pc, #64]	; (8018244 <tan+0x64>)
 8018202:	4281      	cmp	r1, r0
 8018204:	dd09      	ble.n	801821a <tan+0x3a>
 8018206:	ee10 0a10 	vmov	r0, s0
 801820a:	4619      	mov	r1, r3
 801820c:	f7e8 f85c 	bl	80002c8 <__aeabi_dsub>
 8018210:	ec41 0b10 	vmov	d0, r0, r1
 8018214:	b005      	add	sp, #20
 8018216:	f85d fb04 	ldr.w	pc, [sp], #4
 801821a:	4668      	mov	r0, sp
 801821c:	f001 f874 	bl	8019308 <__ieee754_rem_pio2>
 8018220:	0040      	lsls	r0, r0, #1
 8018222:	f000 0002 	and.w	r0, r0, #2
 8018226:	ed9d 1b02 	vldr	d1, [sp, #8]
 801822a:	ed9d 0b00 	vldr	d0, [sp]
 801822e:	f1c0 0001 	rsb	r0, r0, #1
 8018232:	f002 f801 	bl	801a238 <__kernel_tan>
 8018236:	e7ed      	b.n	8018214 <tan+0x34>
	...
 8018240:	3fe921fb 	.word	0x3fe921fb
 8018244:	7fefffff 	.word	0x7fefffff

08018248 <acos>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	ed2d 8b02 	vpush	{d8}
 801824e:	ec55 4b10 	vmov	r4, r5, d0
 8018252:	f000 f8c9 	bl	80183e8 <__ieee754_acos>
 8018256:	4622      	mov	r2, r4
 8018258:	462b      	mov	r3, r5
 801825a:	4620      	mov	r0, r4
 801825c:	4629      	mov	r1, r5
 801825e:	eeb0 8a40 	vmov.f32	s16, s0
 8018262:	eef0 8a60 	vmov.f32	s17, s1
 8018266:	f7e8 fc81 	bl	8000b6c <__aeabi_dcmpun>
 801826a:	b9a8      	cbnz	r0, 8018298 <acos+0x50>
 801826c:	ec45 4b10 	vmov	d0, r4, r5
 8018270:	f002 fa1c 	bl	801a6ac <fabs>
 8018274:	4b0c      	ldr	r3, [pc, #48]	; (80182a8 <acos+0x60>)
 8018276:	ec51 0b10 	vmov	r0, r1, d0
 801827a:	2200      	movs	r2, #0
 801827c:	f7e8 fc6c 	bl	8000b58 <__aeabi_dcmpgt>
 8018280:	b150      	cbz	r0, 8018298 <acos+0x50>
 8018282:	f7fa fa79 	bl	8012778 <__errno>
 8018286:	ecbd 8b02 	vpop	{d8}
 801828a:	2321      	movs	r3, #33	; 0x21
 801828c:	6003      	str	r3, [r0, #0]
 801828e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018292:	4806      	ldr	r0, [pc, #24]	; (80182ac <acos+0x64>)
 8018294:	f7ff bd64 	b.w	8017d60 <nan>
 8018298:	eeb0 0a48 	vmov.f32	s0, s16
 801829c:	eef0 0a68 	vmov.f32	s1, s17
 80182a0:	ecbd 8b02 	vpop	{d8}
 80182a4:	bd38      	pop	{r3, r4, r5, pc}
 80182a6:	bf00      	nop
 80182a8:	3ff00000 	.word	0x3ff00000
 80182ac:	0805867a 	.word	0x0805867a

080182b0 <pow>:
 80182b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182b2:	ed2d 8b02 	vpush	{d8}
 80182b6:	eeb0 8a40 	vmov.f32	s16, s0
 80182ba:	eef0 8a60 	vmov.f32	s17, s1
 80182be:	ec55 4b11 	vmov	r4, r5, d1
 80182c2:	f000 faf1 	bl	80188a8 <__ieee754_pow>
 80182c6:	4622      	mov	r2, r4
 80182c8:	462b      	mov	r3, r5
 80182ca:	4620      	mov	r0, r4
 80182cc:	4629      	mov	r1, r5
 80182ce:	ec57 6b10 	vmov	r6, r7, d0
 80182d2:	f7e8 fc4b 	bl	8000b6c <__aeabi_dcmpun>
 80182d6:	2800      	cmp	r0, #0
 80182d8:	d13b      	bne.n	8018352 <pow+0xa2>
 80182da:	ec51 0b18 	vmov	r0, r1, d8
 80182de:	2200      	movs	r2, #0
 80182e0:	2300      	movs	r3, #0
 80182e2:	f7e8 fc11 	bl	8000b08 <__aeabi_dcmpeq>
 80182e6:	b1b8      	cbz	r0, 8018318 <pow+0x68>
 80182e8:	2200      	movs	r2, #0
 80182ea:	2300      	movs	r3, #0
 80182ec:	4620      	mov	r0, r4
 80182ee:	4629      	mov	r1, r5
 80182f0:	f7e8 fc0a 	bl	8000b08 <__aeabi_dcmpeq>
 80182f4:	2800      	cmp	r0, #0
 80182f6:	d146      	bne.n	8018386 <pow+0xd6>
 80182f8:	ec45 4b10 	vmov	d0, r4, r5
 80182fc:	f002 f9df 	bl	801a6be <finite>
 8018300:	b338      	cbz	r0, 8018352 <pow+0xa2>
 8018302:	2200      	movs	r2, #0
 8018304:	2300      	movs	r3, #0
 8018306:	4620      	mov	r0, r4
 8018308:	4629      	mov	r1, r5
 801830a:	f7e8 fc07 	bl	8000b1c <__aeabi_dcmplt>
 801830e:	b300      	cbz	r0, 8018352 <pow+0xa2>
 8018310:	f7fa fa32 	bl	8012778 <__errno>
 8018314:	2322      	movs	r3, #34	; 0x22
 8018316:	e01b      	b.n	8018350 <pow+0xa0>
 8018318:	ec47 6b10 	vmov	d0, r6, r7
 801831c:	f002 f9cf 	bl	801a6be <finite>
 8018320:	b9e0      	cbnz	r0, 801835c <pow+0xac>
 8018322:	eeb0 0a48 	vmov.f32	s0, s16
 8018326:	eef0 0a68 	vmov.f32	s1, s17
 801832a:	f002 f9c8 	bl	801a6be <finite>
 801832e:	b1a8      	cbz	r0, 801835c <pow+0xac>
 8018330:	ec45 4b10 	vmov	d0, r4, r5
 8018334:	f002 f9c3 	bl	801a6be <finite>
 8018338:	b180      	cbz	r0, 801835c <pow+0xac>
 801833a:	4632      	mov	r2, r6
 801833c:	463b      	mov	r3, r7
 801833e:	4630      	mov	r0, r6
 8018340:	4639      	mov	r1, r7
 8018342:	f7e8 fc13 	bl	8000b6c <__aeabi_dcmpun>
 8018346:	2800      	cmp	r0, #0
 8018348:	d0e2      	beq.n	8018310 <pow+0x60>
 801834a:	f7fa fa15 	bl	8012778 <__errno>
 801834e:	2321      	movs	r3, #33	; 0x21
 8018350:	6003      	str	r3, [r0, #0]
 8018352:	ecbd 8b02 	vpop	{d8}
 8018356:	ec47 6b10 	vmov	d0, r6, r7
 801835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801835c:	2200      	movs	r2, #0
 801835e:	2300      	movs	r3, #0
 8018360:	4630      	mov	r0, r6
 8018362:	4639      	mov	r1, r7
 8018364:	f7e8 fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 8018368:	2800      	cmp	r0, #0
 801836a:	d0f2      	beq.n	8018352 <pow+0xa2>
 801836c:	eeb0 0a48 	vmov.f32	s0, s16
 8018370:	eef0 0a68 	vmov.f32	s1, s17
 8018374:	f002 f9a3 	bl	801a6be <finite>
 8018378:	2800      	cmp	r0, #0
 801837a:	d0ea      	beq.n	8018352 <pow+0xa2>
 801837c:	ec45 4b10 	vmov	d0, r4, r5
 8018380:	f002 f99d 	bl	801a6be <finite>
 8018384:	e7c3      	b.n	801830e <pow+0x5e>
 8018386:	4f01      	ldr	r7, [pc, #4]	; (801838c <pow+0xdc>)
 8018388:	2600      	movs	r6, #0
 801838a:	e7e2      	b.n	8018352 <pow+0xa2>
 801838c:	3ff00000 	.word	0x3ff00000

08018390 <sqrt>:
 8018390:	b538      	push	{r3, r4, r5, lr}
 8018392:	ed2d 8b02 	vpush	{d8}
 8018396:	ec55 4b10 	vmov	r4, r5, d0
 801839a:	f001 f9c1 	bl	8019720 <__ieee754_sqrt>
 801839e:	4622      	mov	r2, r4
 80183a0:	462b      	mov	r3, r5
 80183a2:	4620      	mov	r0, r4
 80183a4:	4629      	mov	r1, r5
 80183a6:	eeb0 8a40 	vmov.f32	s16, s0
 80183aa:	eef0 8a60 	vmov.f32	s17, s1
 80183ae:	f7e8 fbdd 	bl	8000b6c <__aeabi_dcmpun>
 80183b2:	b990      	cbnz	r0, 80183da <sqrt+0x4a>
 80183b4:	2200      	movs	r2, #0
 80183b6:	2300      	movs	r3, #0
 80183b8:	4620      	mov	r0, r4
 80183ba:	4629      	mov	r1, r5
 80183bc:	f7e8 fbae 	bl	8000b1c <__aeabi_dcmplt>
 80183c0:	b158      	cbz	r0, 80183da <sqrt+0x4a>
 80183c2:	f7fa f9d9 	bl	8012778 <__errno>
 80183c6:	2321      	movs	r3, #33	; 0x21
 80183c8:	6003      	str	r3, [r0, #0]
 80183ca:	2200      	movs	r2, #0
 80183cc:	2300      	movs	r3, #0
 80183ce:	4610      	mov	r0, r2
 80183d0:	4619      	mov	r1, r3
 80183d2:	f7e8 fa5b 	bl	800088c <__aeabi_ddiv>
 80183d6:	ec41 0b18 	vmov	d8, r0, r1
 80183da:	eeb0 0a48 	vmov.f32	s0, s16
 80183de:	eef0 0a68 	vmov.f32	s1, s17
 80183e2:	ecbd 8b02 	vpop	{d8}
 80183e6:	bd38      	pop	{r3, r4, r5, pc}

080183e8 <__ieee754_acos>:
 80183e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ec:	ec55 4b10 	vmov	r4, r5, d0
 80183f0:	49b7      	ldr	r1, [pc, #732]	; (80186d0 <__ieee754_acos+0x2e8>)
 80183f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80183f6:	428b      	cmp	r3, r1
 80183f8:	dd1b      	ble.n	8018432 <__ieee754_acos+0x4a>
 80183fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80183fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018402:	4323      	orrs	r3, r4
 8018404:	d106      	bne.n	8018414 <__ieee754_acos+0x2c>
 8018406:	2d00      	cmp	r5, #0
 8018408:	f300 8211 	bgt.w	801882e <__ieee754_acos+0x446>
 801840c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8018668 <__ieee754_acos+0x280>
 8018410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018414:	ee10 2a10 	vmov	r2, s0
 8018418:	462b      	mov	r3, r5
 801841a:	ee10 0a10 	vmov	r0, s0
 801841e:	4629      	mov	r1, r5
 8018420:	f7e7 ff52 	bl	80002c8 <__aeabi_dsub>
 8018424:	4602      	mov	r2, r0
 8018426:	460b      	mov	r3, r1
 8018428:	f7e8 fa30 	bl	800088c <__aeabi_ddiv>
 801842c:	ec41 0b10 	vmov	d0, r0, r1
 8018430:	e7ee      	b.n	8018410 <__ieee754_acos+0x28>
 8018432:	49a8      	ldr	r1, [pc, #672]	; (80186d4 <__ieee754_acos+0x2ec>)
 8018434:	428b      	cmp	r3, r1
 8018436:	f300 8087 	bgt.w	8018548 <__ieee754_acos+0x160>
 801843a:	4aa7      	ldr	r2, [pc, #668]	; (80186d8 <__ieee754_acos+0x2f0>)
 801843c:	4293      	cmp	r3, r2
 801843e:	f340 81f9 	ble.w	8018834 <__ieee754_acos+0x44c>
 8018442:	ee10 2a10 	vmov	r2, s0
 8018446:	ee10 0a10 	vmov	r0, s0
 801844a:	462b      	mov	r3, r5
 801844c:	4629      	mov	r1, r5
 801844e:	f7e8 f8f3 	bl	8000638 <__aeabi_dmul>
 8018452:	a387      	add	r3, pc, #540	; (adr r3, 8018670 <__ieee754_acos+0x288>)
 8018454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018458:	4606      	mov	r6, r0
 801845a:	460f      	mov	r7, r1
 801845c:	f7e8 f8ec 	bl	8000638 <__aeabi_dmul>
 8018460:	a385      	add	r3, pc, #532	; (adr r3, 8018678 <__ieee754_acos+0x290>)
 8018462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018466:	f7e7 ff31 	bl	80002cc <__adddf3>
 801846a:	4632      	mov	r2, r6
 801846c:	463b      	mov	r3, r7
 801846e:	f7e8 f8e3 	bl	8000638 <__aeabi_dmul>
 8018472:	a383      	add	r3, pc, #524	; (adr r3, 8018680 <__ieee754_acos+0x298>)
 8018474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018478:	f7e7 ff26 	bl	80002c8 <__aeabi_dsub>
 801847c:	4632      	mov	r2, r6
 801847e:	463b      	mov	r3, r7
 8018480:	f7e8 f8da 	bl	8000638 <__aeabi_dmul>
 8018484:	a380      	add	r3, pc, #512	; (adr r3, 8018688 <__ieee754_acos+0x2a0>)
 8018486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848a:	f7e7 ff1f 	bl	80002cc <__adddf3>
 801848e:	4632      	mov	r2, r6
 8018490:	463b      	mov	r3, r7
 8018492:	f7e8 f8d1 	bl	8000638 <__aeabi_dmul>
 8018496:	a37e      	add	r3, pc, #504	; (adr r3, 8018690 <__ieee754_acos+0x2a8>)
 8018498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801849c:	f7e7 ff14 	bl	80002c8 <__aeabi_dsub>
 80184a0:	4632      	mov	r2, r6
 80184a2:	463b      	mov	r3, r7
 80184a4:	f7e8 f8c8 	bl	8000638 <__aeabi_dmul>
 80184a8:	a37b      	add	r3, pc, #492	; (adr r3, 8018698 <__ieee754_acos+0x2b0>)
 80184aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ae:	f7e7 ff0d 	bl	80002cc <__adddf3>
 80184b2:	4632      	mov	r2, r6
 80184b4:	463b      	mov	r3, r7
 80184b6:	f7e8 f8bf 	bl	8000638 <__aeabi_dmul>
 80184ba:	a379      	add	r3, pc, #484	; (adr r3, 80186a0 <__ieee754_acos+0x2b8>)
 80184bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184c0:	4680      	mov	r8, r0
 80184c2:	4689      	mov	r9, r1
 80184c4:	4630      	mov	r0, r6
 80184c6:	4639      	mov	r1, r7
 80184c8:	f7e8 f8b6 	bl	8000638 <__aeabi_dmul>
 80184cc:	a376      	add	r3, pc, #472	; (adr r3, 80186a8 <__ieee754_acos+0x2c0>)
 80184ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184d2:	f7e7 fef9 	bl	80002c8 <__aeabi_dsub>
 80184d6:	4632      	mov	r2, r6
 80184d8:	463b      	mov	r3, r7
 80184da:	f7e8 f8ad 	bl	8000638 <__aeabi_dmul>
 80184de:	a374      	add	r3, pc, #464	; (adr r3, 80186b0 <__ieee754_acos+0x2c8>)
 80184e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184e4:	f7e7 fef2 	bl	80002cc <__adddf3>
 80184e8:	4632      	mov	r2, r6
 80184ea:	463b      	mov	r3, r7
 80184ec:	f7e8 f8a4 	bl	8000638 <__aeabi_dmul>
 80184f0:	a371      	add	r3, pc, #452	; (adr r3, 80186b8 <__ieee754_acos+0x2d0>)
 80184f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184f6:	f7e7 fee7 	bl	80002c8 <__aeabi_dsub>
 80184fa:	4632      	mov	r2, r6
 80184fc:	463b      	mov	r3, r7
 80184fe:	f7e8 f89b 	bl	8000638 <__aeabi_dmul>
 8018502:	4b76      	ldr	r3, [pc, #472]	; (80186dc <__ieee754_acos+0x2f4>)
 8018504:	2200      	movs	r2, #0
 8018506:	f7e7 fee1 	bl	80002cc <__adddf3>
 801850a:	4602      	mov	r2, r0
 801850c:	460b      	mov	r3, r1
 801850e:	4640      	mov	r0, r8
 8018510:	4649      	mov	r1, r9
 8018512:	f7e8 f9bb 	bl	800088c <__aeabi_ddiv>
 8018516:	4622      	mov	r2, r4
 8018518:	462b      	mov	r3, r5
 801851a:	f7e8 f88d 	bl	8000638 <__aeabi_dmul>
 801851e:	4602      	mov	r2, r0
 8018520:	460b      	mov	r3, r1
 8018522:	a167      	add	r1, pc, #412	; (adr r1, 80186c0 <__ieee754_acos+0x2d8>)
 8018524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018528:	f7e7 fece 	bl	80002c8 <__aeabi_dsub>
 801852c:	4602      	mov	r2, r0
 801852e:	460b      	mov	r3, r1
 8018530:	4620      	mov	r0, r4
 8018532:	4629      	mov	r1, r5
 8018534:	f7e7 fec8 	bl	80002c8 <__aeabi_dsub>
 8018538:	4602      	mov	r2, r0
 801853a:	460b      	mov	r3, r1
 801853c:	a162      	add	r1, pc, #392	; (adr r1, 80186c8 <__ieee754_acos+0x2e0>)
 801853e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018542:	f7e7 fec1 	bl	80002c8 <__aeabi_dsub>
 8018546:	e771      	b.n	801842c <__ieee754_acos+0x44>
 8018548:	2d00      	cmp	r5, #0
 801854a:	f280 80cb 	bge.w	80186e4 <__ieee754_acos+0x2fc>
 801854e:	ee10 0a10 	vmov	r0, s0
 8018552:	4b62      	ldr	r3, [pc, #392]	; (80186dc <__ieee754_acos+0x2f4>)
 8018554:	2200      	movs	r2, #0
 8018556:	4629      	mov	r1, r5
 8018558:	f7e7 feb8 	bl	80002cc <__adddf3>
 801855c:	4b60      	ldr	r3, [pc, #384]	; (80186e0 <__ieee754_acos+0x2f8>)
 801855e:	2200      	movs	r2, #0
 8018560:	f7e8 f86a 	bl	8000638 <__aeabi_dmul>
 8018564:	a342      	add	r3, pc, #264	; (adr r3, 8018670 <__ieee754_acos+0x288>)
 8018566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856a:	4604      	mov	r4, r0
 801856c:	460d      	mov	r5, r1
 801856e:	f7e8 f863 	bl	8000638 <__aeabi_dmul>
 8018572:	a341      	add	r3, pc, #260	; (adr r3, 8018678 <__ieee754_acos+0x290>)
 8018574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018578:	f7e7 fea8 	bl	80002cc <__adddf3>
 801857c:	4622      	mov	r2, r4
 801857e:	462b      	mov	r3, r5
 8018580:	f7e8 f85a 	bl	8000638 <__aeabi_dmul>
 8018584:	a33e      	add	r3, pc, #248	; (adr r3, 8018680 <__ieee754_acos+0x298>)
 8018586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858a:	f7e7 fe9d 	bl	80002c8 <__aeabi_dsub>
 801858e:	4622      	mov	r2, r4
 8018590:	462b      	mov	r3, r5
 8018592:	f7e8 f851 	bl	8000638 <__aeabi_dmul>
 8018596:	a33c      	add	r3, pc, #240	; (adr r3, 8018688 <__ieee754_acos+0x2a0>)
 8018598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801859c:	f7e7 fe96 	bl	80002cc <__adddf3>
 80185a0:	4622      	mov	r2, r4
 80185a2:	462b      	mov	r3, r5
 80185a4:	f7e8 f848 	bl	8000638 <__aeabi_dmul>
 80185a8:	a339      	add	r3, pc, #228	; (adr r3, 8018690 <__ieee754_acos+0x2a8>)
 80185aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ae:	f7e7 fe8b 	bl	80002c8 <__aeabi_dsub>
 80185b2:	4622      	mov	r2, r4
 80185b4:	462b      	mov	r3, r5
 80185b6:	f7e8 f83f 	bl	8000638 <__aeabi_dmul>
 80185ba:	a337      	add	r3, pc, #220	; (adr r3, 8018698 <__ieee754_acos+0x2b0>)
 80185bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c0:	f7e7 fe84 	bl	80002cc <__adddf3>
 80185c4:	4622      	mov	r2, r4
 80185c6:	462b      	mov	r3, r5
 80185c8:	f7e8 f836 	bl	8000638 <__aeabi_dmul>
 80185cc:	ec45 4b10 	vmov	d0, r4, r5
 80185d0:	4680      	mov	r8, r0
 80185d2:	4689      	mov	r9, r1
 80185d4:	f001 f8a4 	bl	8019720 <__ieee754_sqrt>
 80185d8:	a331      	add	r3, pc, #196	; (adr r3, 80186a0 <__ieee754_acos+0x2b8>)
 80185da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185de:	4620      	mov	r0, r4
 80185e0:	4629      	mov	r1, r5
 80185e2:	ec57 6b10 	vmov	r6, r7, d0
 80185e6:	f7e8 f827 	bl	8000638 <__aeabi_dmul>
 80185ea:	a32f      	add	r3, pc, #188	; (adr r3, 80186a8 <__ieee754_acos+0x2c0>)
 80185ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f0:	f7e7 fe6a 	bl	80002c8 <__aeabi_dsub>
 80185f4:	4622      	mov	r2, r4
 80185f6:	462b      	mov	r3, r5
 80185f8:	f7e8 f81e 	bl	8000638 <__aeabi_dmul>
 80185fc:	a32c      	add	r3, pc, #176	; (adr r3, 80186b0 <__ieee754_acos+0x2c8>)
 80185fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018602:	f7e7 fe63 	bl	80002cc <__adddf3>
 8018606:	4622      	mov	r2, r4
 8018608:	462b      	mov	r3, r5
 801860a:	f7e8 f815 	bl	8000638 <__aeabi_dmul>
 801860e:	a32a      	add	r3, pc, #168	; (adr r3, 80186b8 <__ieee754_acos+0x2d0>)
 8018610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018614:	f7e7 fe58 	bl	80002c8 <__aeabi_dsub>
 8018618:	4622      	mov	r2, r4
 801861a:	462b      	mov	r3, r5
 801861c:	f7e8 f80c 	bl	8000638 <__aeabi_dmul>
 8018620:	4b2e      	ldr	r3, [pc, #184]	; (80186dc <__ieee754_acos+0x2f4>)
 8018622:	2200      	movs	r2, #0
 8018624:	f7e7 fe52 	bl	80002cc <__adddf3>
 8018628:	4602      	mov	r2, r0
 801862a:	460b      	mov	r3, r1
 801862c:	4640      	mov	r0, r8
 801862e:	4649      	mov	r1, r9
 8018630:	f7e8 f92c 	bl	800088c <__aeabi_ddiv>
 8018634:	4632      	mov	r2, r6
 8018636:	463b      	mov	r3, r7
 8018638:	f7e7 fffe 	bl	8000638 <__aeabi_dmul>
 801863c:	a320      	add	r3, pc, #128	; (adr r3, 80186c0 <__ieee754_acos+0x2d8>)
 801863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018642:	f7e7 fe41 	bl	80002c8 <__aeabi_dsub>
 8018646:	4632      	mov	r2, r6
 8018648:	463b      	mov	r3, r7
 801864a:	f7e7 fe3f 	bl	80002cc <__adddf3>
 801864e:	4602      	mov	r2, r0
 8018650:	460b      	mov	r3, r1
 8018652:	f7e7 fe3b 	bl	80002cc <__adddf3>
 8018656:	4602      	mov	r2, r0
 8018658:	460b      	mov	r3, r1
 801865a:	a103      	add	r1, pc, #12	; (adr r1, 8018668 <__ieee754_acos+0x280>)
 801865c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018660:	e76f      	b.n	8018542 <__ieee754_acos+0x15a>
 8018662:	bf00      	nop
 8018664:	f3af 8000 	nop.w
 8018668:	54442d18 	.word	0x54442d18
 801866c:	400921fb 	.word	0x400921fb
 8018670:	0dfdf709 	.word	0x0dfdf709
 8018674:	3f023de1 	.word	0x3f023de1
 8018678:	7501b288 	.word	0x7501b288
 801867c:	3f49efe0 	.word	0x3f49efe0
 8018680:	b5688f3b 	.word	0xb5688f3b
 8018684:	3fa48228 	.word	0x3fa48228
 8018688:	0e884455 	.word	0x0e884455
 801868c:	3fc9c155 	.word	0x3fc9c155
 8018690:	03eb6f7d 	.word	0x03eb6f7d
 8018694:	3fd4d612 	.word	0x3fd4d612
 8018698:	55555555 	.word	0x55555555
 801869c:	3fc55555 	.word	0x3fc55555
 80186a0:	b12e9282 	.word	0xb12e9282
 80186a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80186a8:	1b8d0159 	.word	0x1b8d0159
 80186ac:	3fe6066c 	.word	0x3fe6066c
 80186b0:	9c598ac8 	.word	0x9c598ac8
 80186b4:	40002ae5 	.word	0x40002ae5
 80186b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80186bc:	40033a27 	.word	0x40033a27
 80186c0:	33145c07 	.word	0x33145c07
 80186c4:	3c91a626 	.word	0x3c91a626
 80186c8:	54442d18 	.word	0x54442d18
 80186cc:	3ff921fb 	.word	0x3ff921fb
 80186d0:	3fefffff 	.word	0x3fefffff
 80186d4:	3fdfffff 	.word	0x3fdfffff
 80186d8:	3c600000 	.word	0x3c600000
 80186dc:	3ff00000 	.word	0x3ff00000
 80186e0:	3fe00000 	.word	0x3fe00000
 80186e4:	ee10 2a10 	vmov	r2, s0
 80186e8:	462b      	mov	r3, r5
 80186ea:	496d      	ldr	r1, [pc, #436]	; (80188a0 <__ieee754_acos+0x4b8>)
 80186ec:	2000      	movs	r0, #0
 80186ee:	f7e7 fdeb 	bl	80002c8 <__aeabi_dsub>
 80186f2:	4b6c      	ldr	r3, [pc, #432]	; (80188a4 <__ieee754_acos+0x4bc>)
 80186f4:	2200      	movs	r2, #0
 80186f6:	f7e7 ff9f 	bl	8000638 <__aeabi_dmul>
 80186fa:	4604      	mov	r4, r0
 80186fc:	460d      	mov	r5, r1
 80186fe:	ec45 4b10 	vmov	d0, r4, r5
 8018702:	f001 f80d 	bl	8019720 <__ieee754_sqrt>
 8018706:	a34e      	add	r3, pc, #312	; (adr r3, 8018840 <__ieee754_acos+0x458>)
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	4620      	mov	r0, r4
 801870e:	4629      	mov	r1, r5
 8018710:	ec59 8b10 	vmov	r8, r9, d0
 8018714:	f7e7 ff90 	bl	8000638 <__aeabi_dmul>
 8018718:	a34b      	add	r3, pc, #300	; (adr r3, 8018848 <__ieee754_acos+0x460>)
 801871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871e:	f7e7 fdd5 	bl	80002cc <__adddf3>
 8018722:	4622      	mov	r2, r4
 8018724:	462b      	mov	r3, r5
 8018726:	f7e7 ff87 	bl	8000638 <__aeabi_dmul>
 801872a:	a349      	add	r3, pc, #292	; (adr r3, 8018850 <__ieee754_acos+0x468>)
 801872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018730:	f7e7 fdca 	bl	80002c8 <__aeabi_dsub>
 8018734:	4622      	mov	r2, r4
 8018736:	462b      	mov	r3, r5
 8018738:	f7e7 ff7e 	bl	8000638 <__aeabi_dmul>
 801873c:	a346      	add	r3, pc, #280	; (adr r3, 8018858 <__ieee754_acos+0x470>)
 801873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018742:	f7e7 fdc3 	bl	80002cc <__adddf3>
 8018746:	4622      	mov	r2, r4
 8018748:	462b      	mov	r3, r5
 801874a:	f7e7 ff75 	bl	8000638 <__aeabi_dmul>
 801874e:	a344      	add	r3, pc, #272	; (adr r3, 8018860 <__ieee754_acos+0x478>)
 8018750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018754:	f7e7 fdb8 	bl	80002c8 <__aeabi_dsub>
 8018758:	4622      	mov	r2, r4
 801875a:	462b      	mov	r3, r5
 801875c:	f7e7 ff6c 	bl	8000638 <__aeabi_dmul>
 8018760:	a341      	add	r3, pc, #260	; (adr r3, 8018868 <__ieee754_acos+0x480>)
 8018762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018766:	f7e7 fdb1 	bl	80002cc <__adddf3>
 801876a:	4622      	mov	r2, r4
 801876c:	462b      	mov	r3, r5
 801876e:	f7e7 ff63 	bl	8000638 <__aeabi_dmul>
 8018772:	a33f      	add	r3, pc, #252	; (adr r3, 8018870 <__ieee754_acos+0x488>)
 8018774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018778:	4682      	mov	sl, r0
 801877a:	468b      	mov	fp, r1
 801877c:	4620      	mov	r0, r4
 801877e:	4629      	mov	r1, r5
 8018780:	f7e7 ff5a 	bl	8000638 <__aeabi_dmul>
 8018784:	a33c      	add	r3, pc, #240	; (adr r3, 8018878 <__ieee754_acos+0x490>)
 8018786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801878a:	f7e7 fd9d 	bl	80002c8 <__aeabi_dsub>
 801878e:	4622      	mov	r2, r4
 8018790:	462b      	mov	r3, r5
 8018792:	f7e7 ff51 	bl	8000638 <__aeabi_dmul>
 8018796:	a33a      	add	r3, pc, #232	; (adr r3, 8018880 <__ieee754_acos+0x498>)
 8018798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879c:	f7e7 fd96 	bl	80002cc <__adddf3>
 80187a0:	4622      	mov	r2, r4
 80187a2:	462b      	mov	r3, r5
 80187a4:	f7e7 ff48 	bl	8000638 <__aeabi_dmul>
 80187a8:	a337      	add	r3, pc, #220	; (adr r3, 8018888 <__ieee754_acos+0x4a0>)
 80187aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187ae:	f7e7 fd8b 	bl	80002c8 <__aeabi_dsub>
 80187b2:	4622      	mov	r2, r4
 80187b4:	462b      	mov	r3, r5
 80187b6:	f7e7 ff3f 	bl	8000638 <__aeabi_dmul>
 80187ba:	4b39      	ldr	r3, [pc, #228]	; (80188a0 <__ieee754_acos+0x4b8>)
 80187bc:	2200      	movs	r2, #0
 80187be:	f7e7 fd85 	bl	80002cc <__adddf3>
 80187c2:	4602      	mov	r2, r0
 80187c4:	460b      	mov	r3, r1
 80187c6:	4650      	mov	r0, sl
 80187c8:	4659      	mov	r1, fp
 80187ca:	f7e8 f85f 	bl	800088c <__aeabi_ddiv>
 80187ce:	4642      	mov	r2, r8
 80187d0:	464b      	mov	r3, r9
 80187d2:	f7e7 ff31 	bl	8000638 <__aeabi_dmul>
 80187d6:	2600      	movs	r6, #0
 80187d8:	4682      	mov	sl, r0
 80187da:	468b      	mov	fp, r1
 80187dc:	4632      	mov	r2, r6
 80187de:	464b      	mov	r3, r9
 80187e0:	4630      	mov	r0, r6
 80187e2:	4649      	mov	r1, r9
 80187e4:	f7e7 ff28 	bl	8000638 <__aeabi_dmul>
 80187e8:	4602      	mov	r2, r0
 80187ea:	460b      	mov	r3, r1
 80187ec:	4620      	mov	r0, r4
 80187ee:	4629      	mov	r1, r5
 80187f0:	f7e7 fd6a 	bl	80002c8 <__aeabi_dsub>
 80187f4:	4632      	mov	r2, r6
 80187f6:	4604      	mov	r4, r0
 80187f8:	460d      	mov	r5, r1
 80187fa:	464b      	mov	r3, r9
 80187fc:	4640      	mov	r0, r8
 80187fe:	4649      	mov	r1, r9
 8018800:	f7e7 fd64 	bl	80002cc <__adddf3>
 8018804:	4602      	mov	r2, r0
 8018806:	460b      	mov	r3, r1
 8018808:	4620      	mov	r0, r4
 801880a:	4629      	mov	r1, r5
 801880c:	f7e8 f83e 	bl	800088c <__aeabi_ddiv>
 8018810:	4602      	mov	r2, r0
 8018812:	460b      	mov	r3, r1
 8018814:	4650      	mov	r0, sl
 8018816:	4659      	mov	r1, fp
 8018818:	f7e7 fd58 	bl	80002cc <__adddf3>
 801881c:	4632      	mov	r2, r6
 801881e:	464b      	mov	r3, r9
 8018820:	f7e7 fd54 	bl	80002cc <__adddf3>
 8018824:	4602      	mov	r2, r0
 8018826:	460b      	mov	r3, r1
 8018828:	f7e7 fd50 	bl	80002cc <__adddf3>
 801882c:	e5fe      	b.n	801842c <__ieee754_acos+0x44>
 801882e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8018890 <__ieee754_acos+0x4a8>
 8018832:	e5ed      	b.n	8018410 <__ieee754_acos+0x28>
 8018834:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8018898 <__ieee754_acos+0x4b0>
 8018838:	e5ea      	b.n	8018410 <__ieee754_acos+0x28>
 801883a:	bf00      	nop
 801883c:	f3af 8000 	nop.w
 8018840:	0dfdf709 	.word	0x0dfdf709
 8018844:	3f023de1 	.word	0x3f023de1
 8018848:	7501b288 	.word	0x7501b288
 801884c:	3f49efe0 	.word	0x3f49efe0
 8018850:	b5688f3b 	.word	0xb5688f3b
 8018854:	3fa48228 	.word	0x3fa48228
 8018858:	0e884455 	.word	0x0e884455
 801885c:	3fc9c155 	.word	0x3fc9c155
 8018860:	03eb6f7d 	.word	0x03eb6f7d
 8018864:	3fd4d612 	.word	0x3fd4d612
 8018868:	55555555 	.word	0x55555555
 801886c:	3fc55555 	.word	0x3fc55555
 8018870:	b12e9282 	.word	0xb12e9282
 8018874:	3fb3b8c5 	.word	0x3fb3b8c5
 8018878:	1b8d0159 	.word	0x1b8d0159
 801887c:	3fe6066c 	.word	0x3fe6066c
 8018880:	9c598ac8 	.word	0x9c598ac8
 8018884:	40002ae5 	.word	0x40002ae5
 8018888:	1c8a2d4b 	.word	0x1c8a2d4b
 801888c:	40033a27 	.word	0x40033a27
	...
 8018898:	54442d18 	.word	0x54442d18
 801889c:	3ff921fb 	.word	0x3ff921fb
 80188a0:	3ff00000 	.word	0x3ff00000
 80188a4:	3fe00000 	.word	0x3fe00000

080188a8 <__ieee754_pow>:
 80188a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ac:	ed2d 8b06 	vpush	{d8-d10}
 80188b0:	b089      	sub	sp, #36	; 0x24
 80188b2:	ed8d 1b00 	vstr	d1, [sp]
 80188b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80188ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80188be:	ea58 0102 	orrs.w	r1, r8, r2
 80188c2:	ec57 6b10 	vmov	r6, r7, d0
 80188c6:	d115      	bne.n	80188f4 <__ieee754_pow+0x4c>
 80188c8:	19b3      	adds	r3, r6, r6
 80188ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80188ce:	4152      	adcs	r2, r2
 80188d0:	4299      	cmp	r1, r3
 80188d2:	4b89      	ldr	r3, [pc, #548]	; (8018af8 <__ieee754_pow+0x250>)
 80188d4:	4193      	sbcs	r3, r2
 80188d6:	f080 84d2 	bcs.w	801927e <__ieee754_pow+0x9d6>
 80188da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80188de:	4630      	mov	r0, r6
 80188e0:	4639      	mov	r1, r7
 80188e2:	f7e7 fcf3 	bl	80002cc <__adddf3>
 80188e6:	ec41 0b10 	vmov	d0, r0, r1
 80188ea:	b009      	add	sp, #36	; 0x24
 80188ec:	ecbd 8b06 	vpop	{d8-d10}
 80188f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f4:	4b81      	ldr	r3, [pc, #516]	; (8018afc <__ieee754_pow+0x254>)
 80188f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80188fa:	429c      	cmp	r4, r3
 80188fc:	ee10 aa10 	vmov	sl, s0
 8018900:	463d      	mov	r5, r7
 8018902:	dc06      	bgt.n	8018912 <__ieee754_pow+0x6a>
 8018904:	d101      	bne.n	801890a <__ieee754_pow+0x62>
 8018906:	2e00      	cmp	r6, #0
 8018908:	d1e7      	bne.n	80188da <__ieee754_pow+0x32>
 801890a:	4598      	cmp	r8, r3
 801890c:	dc01      	bgt.n	8018912 <__ieee754_pow+0x6a>
 801890e:	d10f      	bne.n	8018930 <__ieee754_pow+0x88>
 8018910:	b172      	cbz	r2, 8018930 <__ieee754_pow+0x88>
 8018912:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8018916:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801891a:	ea55 050a 	orrs.w	r5, r5, sl
 801891e:	d1dc      	bne.n	80188da <__ieee754_pow+0x32>
 8018920:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018924:	18db      	adds	r3, r3, r3
 8018926:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801892a:	4152      	adcs	r2, r2
 801892c:	429d      	cmp	r5, r3
 801892e:	e7d0      	b.n	80188d2 <__ieee754_pow+0x2a>
 8018930:	2d00      	cmp	r5, #0
 8018932:	da3b      	bge.n	80189ac <__ieee754_pow+0x104>
 8018934:	4b72      	ldr	r3, [pc, #456]	; (8018b00 <__ieee754_pow+0x258>)
 8018936:	4598      	cmp	r8, r3
 8018938:	dc51      	bgt.n	80189de <__ieee754_pow+0x136>
 801893a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801893e:	4598      	cmp	r8, r3
 8018940:	f340 84ac 	ble.w	801929c <__ieee754_pow+0x9f4>
 8018944:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018948:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801894c:	2b14      	cmp	r3, #20
 801894e:	dd0f      	ble.n	8018970 <__ieee754_pow+0xc8>
 8018950:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018954:	fa22 f103 	lsr.w	r1, r2, r3
 8018958:	fa01 f303 	lsl.w	r3, r1, r3
 801895c:	4293      	cmp	r3, r2
 801895e:	f040 849d 	bne.w	801929c <__ieee754_pow+0x9f4>
 8018962:	f001 0101 	and.w	r1, r1, #1
 8018966:	f1c1 0302 	rsb	r3, r1, #2
 801896a:	9304      	str	r3, [sp, #16]
 801896c:	b182      	cbz	r2, 8018990 <__ieee754_pow+0xe8>
 801896e:	e05f      	b.n	8018a30 <__ieee754_pow+0x188>
 8018970:	2a00      	cmp	r2, #0
 8018972:	d15b      	bne.n	8018a2c <__ieee754_pow+0x184>
 8018974:	f1c3 0314 	rsb	r3, r3, #20
 8018978:	fa48 f103 	asr.w	r1, r8, r3
 801897c:	fa01 f303 	lsl.w	r3, r1, r3
 8018980:	4543      	cmp	r3, r8
 8018982:	f040 8488 	bne.w	8019296 <__ieee754_pow+0x9ee>
 8018986:	f001 0101 	and.w	r1, r1, #1
 801898a:	f1c1 0302 	rsb	r3, r1, #2
 801898e:	9304      	str	r3, [sp, #16]
 8018990:	4b5c      	ldr	r3, [pc, #368]	; (8018b04 <__ieee754_pow+0x25c>)
 8018992:	4598      	cmp	r8, r3
 8018994:	d132      	bne.n	80189fc <__ieee754_pow+0x154>
 8018996:	f1b9 0f00 	cmp.w	r9, #0
 801899a:	f280 8478 	bge.w	801928e <__ieee754_pow+0x9e6>
 801899e:	4959      	ldr	r1, [pc, #356]	; (8018b04 <__ieee754_pow+0x25c>)
 80189a0:	4632      	mov	r2, r6
 80189a2:	463b      	mov	r3, r7
 80189a4:	2000      	movs	r0, #0
 80189a6:	f7e7 ff71 	bl	800088c <__aeabi_ddiv>
 80189aa:	e79c      	b.n	80188e6 <__ieee754_pow+0x3e>
 80189ac:	2300      	movs	r3, #0
 80189ae:	9304      	str	r3, [sp, #16]
 80189b0:	2a00      	cmp	r2, #0
 80189b2:	d13d      	bne.n	8018a30 <__ieee754_pow+0x188>
 80189b4:	4b51      	ldr	r3, [pc, #324]	; (8018afc <__ieee754_pow+0x254>)
 80189b6:	4598      	cmp	r8, r3
 80189b8:	d1ea      	bne.n	8018990 <__ieee754_pow+0xe8>
 80189ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80189be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80189c2:	ea53 030a 	orrs.w	r3, r3, sl
 80189c6:	f000 845a 	beq.w	801927e <__ieee754_pow+0x9d6>
 80189ca:	4b4f      	ldr	r3, [pc, #316]	; (8018b08 <__ieee754_pow+0x260>)
 80189cc:	429c      	cmp	r4, r3
 80189ce:	dd08      	ble.n	80189e2 <__ieee754_pow+0x13a>
 80189d0:	f1b9 0f00 	cmp.w	r9, #0
 80189d4:	f2c0 8457 	blt.w	8019286 <__ieee754_pow+0x9de>
 80189d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80189dc:	e783      	b.n	80188e6 <__ieee754_pow+0x3e>
 80189de:	2302      	movs	r3, #2
 80189e0:	e7e5      	b.n	80189ae <__ieee754_pow+0x106>
 80189e2:	f1b9 0f00 	cmp.w	r9, #0
 80189e6:	f04f 0000 	mov.w	r0, #0
 80189ea:	f04f 0100 	mov.w	r1, #0
 80189ee:	f6bf af7a 	bge.w	80188e6 <__ieee754_pow+0x3e>
 80189f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80189f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80189fa:	e774      	b.n	80188e6 <__ieee754_pow+0x3e>
 80189fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018a00:	d106      	bne.n	8018a10 <__ieee754_pow+0x168>
 8018a02:	4632      	mov	r2, r6
 8018a04:	463b      	mov	r3, r7
 8018a06:	4630      	mov	r0, r6
 8018a08:	4639      	mov	r1, r7
 8018a0a:	f7e7 fe15 	bl	8000638 <__aeabi_dmul>
 8018a0e:	e76a      	b.n	80188e6 <__ieee754_pow+0x3e>
 8018a10:	4b3e      	ldr	r3, [pc, #248]	; (8018b0c <__ieee754_pow+0x264>)
 8018a12:	4599      	cmp	r9, r3
 8018a14:	d10c      	bne.n	8018a30 <__ieee754_pow+0x188>
 8018a16:	2d00      	cmp	r5, #0
 8018a18:	db0a      	blt.n	8018a30 <__ieee754_pow+0x188>
 8018a1a:	ec47 6b10 	vmov	d0, r6, r7
 8018a1e:	b009      	add	sp, #36	; 0x24
 8018a20:	ecbd 8b06 	vpop	{d8-d10}
 8018a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	f000 be7a 	b.w	8019720 <__ieee754_sqrt>
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	9304      	str	r3, [sp, #16]
 8018a30:	ec47 6b10 	vmov	d0, r6, r7
 8018a34:	f001 fe3a 	bl	801a6ac <fabs>
 8018a38:	ec51 0b10 	vmov	r0, r1, d0
 8018a3c:	f1ba 0f00 	cmp.w	sl, #0
 8018a40:	d129      	bne.n	8018a96 <__ieee754_pow+0x1ee>
 8018a42:	b124      	cbz	r4, 8018a4e <__ieee754_pow+0x1a6>
 8018a44:	4b2f      	ldr	r3, [pc, #188]	; (8018b04 <__ieee754_pow+0x25c>)
 8018a46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d123      	bne.n	8018a96 <__ieee754_pow+0x1ee>
 8018a4e:	f1b9 0f00 	cmp.w	r9, #0
 8018a52:	da05      	bge.n	8018a60 <__ieee754_pow+0x1b8>
 8018a54:	4602      	mov	r2, r0
 8018a56:	460b      	mov	r3, r1
 8018a58:	2000      	movs	r0, #0
 8018a5a:	492a      	ldr	r1, [pc, #168]	; (8018b04 <__ieee754_pow+0x25c>)
 8018a5c:	f7e7 ff16 	bl	800088c <__aeabi_ddiv>
 8018a60:	2d00      	cmp	r5, #0
 8018a62:	f6bf af40 	bge.w	80188e6 <__ieee754_pow+0x3e>
 8018a66:	9b04      	ldr	r3, [sp, #16]
 8018a68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018a6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018a70:	4323      	orrs	r3, r4
 8018a72:	d108      	bne.n	8018a86 <__ieee754_pow+0x1de>
 8018a74:	4602      	mov	r2, r0
 8018a76:	460b      	mov	r3, r1
 8018a78:	4610      	mov	r0, r2
 8018a7a:	4619      	mov	r1, r3
 8018a7c:	f7e7 fc24 	bl	80002c8 <__aeabi_dsub>
 8018a80:	4602      	mov	r2, r0
 8018a82:	460b      	mov	r3, r1
 8018a84:	e78f      	b.n	80189a6 <__ieee754_pow+0xfe>
 8018a86:	9b04      	ldr	r3, [sp, #16]
 8018a88:	2b01      	cmp	r3, #1
 8018a8a:	f47f af2c 	bne.w	80188e6 <__ieee754_pow+0x3e>
 8018a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a92:	4619      	mov	r1, r3
 8018a94:	e727      	b.n	80188e6 <__ieee754_pow+0x3e>
 8018a96:	0feb      	lsrs	r3, r5, #31
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	9306      	str	r3, [sp, #24]
 8018a9c:	9a06      	ldr	r2, [sp, #24]
 8018a9e:	9b04      	ldr	r3, [sp, #16]
 8018aa0:	4313      	orrs	r3, r2
 8018aa2:	d102      	bne.n	8018aaa <__ieee754_pow+0x202>
 8018aa4:	4632      	mov	r2, r6
 8018aa6:	463b      	mov	r3, r7
 8018aa8:	e7e6      	b.n	8018a78 <__ieee754_pow+0x1d0>
 8018aaa:	4b19      	ldr	r3, [pc, #100]	; (8018b10 <__ieee754_pow+0x268>)
 8018aac:	4598      	cmp	r8, r3
 8018aae:	f340 80fb 	ble.w	8018ca8 <__ieee754_pow+0x400>
 8018ab2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018ab6:	4598      	cmp	r8, r3
 8018ab8:	4b13      	ldr	r3, [pc, #76]	; (8018b08 <__ieee754_pow+0x260>)
 8018aba:	dd0c      	ble.n	8018ad6 <__ieee754_pow+0x22e>
 8018abc:	429c      	cmp	r4, r3
 8018abe:	dc0f      	bgt.n	8018ae0 <__ieee754_pow+0x238>
 8018ac0:	f1b9 0f00 	cmp.w	r9, #0
 8018ac4:	da0f      	bge.n	8018ae6 <__ieee754_pow+0x23e>
 8018ac6:	2000      	movs	r0, #0
 8018ac8:	b009      	add	sp, #36	; 0x24
 8018aca:	ecbd 8b06 	vpop	{d8-d10}
 8018ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad2:	f001 bde2 	b.w	801a69a <__math_oflow>
 8018ad6:	429c      	cmp	r4, r3
 8018ad8:	dbf2      	blt.n	8018ac0 <__ieee754_pow+0x218>
 8018ada:	4b0a      	ldr	r3, [pc, #40]	; (8018b04 <__ieee754_pow+0x25c>)
 8018adc:	429c      	cmp	r4, r3
 8018ade:	dd19      	ble.n	8018b14 <__ieee754_pow+0x26c>
 8018ae0:	f1b9 0f00 	cmp.w	r9, #0
 8018ae4:	dcef      	bgt.n	8018ac6 <__ieee754_pow+0x21e>
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	b009      	add	sp, #36	; 0x24
 8018aea:	ecbd 8b06 	vpop	{d8-d10}
 8018aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af2:	f001 bdc9 	b.w	801a688 <__math_uflow>
 8018af6:	bf00      	nop
 8018af8:	fff00000 	.word	0xfff00000
 8018afc:	7ff00000 	.word	0x7ff00000
 8018b00:	433fffff 	.word	0x433fffff
 8018b04:	3ff00000 	.word	0x3ff00000
 8018b08:	3fefffff 	.word	0x3fefffff
 8018b0c:	3fe00000 	.word	0x3fe00000
 8018b10:	41e00000 	.word	0x41e00000
 8018b14:	4b60      	ldr	r3, [pc, #384]	; (8018c98 <__ieee754_pow+0x3f0>)
 8018b16:	2200      	movs	r2, #0
 8018b18:	f7e7 fbd6 	bl	80002c8 <__aeabi_dsub>
 8018b1c:	a354      	add	r3, pc, #336	; (adr r3, 8018c70 <__ieee754_pow+0x3c8>)
 8018b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b22:	4604      	mov	r4, r0
 8018b24:	460d      	mov	r5, r1
 8018b26:	f7e7 fd87 	bl	8000638 <__aeabi_dmul>
 8018b2a:	a353      	add	r3, pc, #332	; (adr r3, 8018c78 <__ieee754_pow+0x3d0>)
 8018b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b30:	4606      	mov	r6, r0
 8018b32:	460f      	mov	r7, r1
 8018b34:	4620      	mov	r0, r4
 8018b36:	4629      	mov	r1, r5
 8018b38:	f7e7 fd7e 	bl	8000638 <__aeabi_dmul>
 8018b3c:	4b57      	ldr	r3, [pc, #348]	; (8018c9c <__ieee754_pow+0x3f4>)
 8018b3e:	4682      	mov	sl, r0
 8018b40:	468b      	mov	fp, r1
 8018b42:	2200      	movs	r2, #0
 8018b44:	4620      	mov	r0, r4
 8018b46:	4629      	mov	r1, r5
 8018b48:	f7e7 fd76 	bl	8000638 <__aeabi_dmul>
 8018b4c:	4602      	mov	r2, r0
 8018b4e:	460b      	mov	r3, r1
 8018b50:	a14b      	add	r1, pc, #300	; (adr r1, 8018c80 <__ieee754_pow+0x3d8>)
 8018b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b56:	f7e7 fbb7 	bl	80002c8 <__aeabi_dsub>
 8018b5a:	4622      	mov	r2, r4
 8018b5c:	462b      	mov	r3, r5
 8018b5e:	f7e7 fd6b 	bl	8000638 <__aeabi_dmul>
 8018b62:	4602      	mov	r2, r0
 8018b64:	460b      	mov	r3, r1
 8018b66:	2000      	movs	r0, #0
 8018b68:	494d      	ldr	r1, [pc, #308]	; (8018ca0 <__ieee754_pow+0x3f8>)
 8018b6a:	f7e7 fbad 	bl	80002c8 <__aeabi_dsub>
 8018b6e:	4622      	mov	r2, r4
 8018b70:	4680      	mov	r8, r0
 8018b72:	4689      	mov	r9, r1
 8018b74:	462b      	mov	r3, r5
 8018b76:	4620      	mov	r0, r4
 8018b78:	4629      	mov	r1, r5
 8018b7a:	f7e7 fd5d 	bl	8000638 <__aeabi_dmul>
 8018b7e:	4602      	mov	r2, r0
 8018b80:	460b      	mov	r3, r1
 8018b82:	4640      	mov	r0, r8
 8018b84:	4649      	mov	r1, r9
 8018b86:	f7e7 fd57 	bl	8000638 <__aeabi_dmul>
 8018b8a:	a33f      	add	r3, pc, #252	; (adr r3, 8018c88 <__ieee754_pow+0x3e0>)
 8018b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b90:	f7e7 fd52 	bl	8000638 <__aeabi_dmul>
 8018b94:	4602      	mov	r2, r0
 8018b96:	460b      	mov	r3, r1
 8018b98:	4650      	mov	r0, sl
 8018b9a:	4659      	mov	r1, fp
 8018b9c:	f7e7 fb94 	bl	80002c8 <__aeabi_dsub>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	460b      	mov	r3, r1
 8018ba4:	4680      	mov	r8, r0
 8018ba6:	4689      	mov	r9, r1
 8018ba8:	4630      	mov	r0, r6
 8018baa:	4639      	mov	r1, r7
 8018bac:	f7e7 fb8e 	bl	80002cc <__adddf3>
 8018bb0:	2000      	movs	r0, #0
 8018bb2:	4632      	mov	r2, r6
 8018bb4:	463b      	mov	r3, r7
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	460d      	mov	r5, r1
 8018bba:	f7e7 fb85 	bl	80002c8 <__aeabi_dsub>
 8018bbe:	4602      	mov	r2, r0
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	4640      	mov	r0, r8
 8018bc4:	4649      	mov	r1, r9
 8018bc6:	f7e7 fb7f 	bl	80002c8 <__aeabi_dsub>
 8018bca:	9b04      	ldr	r3, [sp, #16]
 8018bcc:	9a06      	ldr	r2, [sp, #24]
 8018bce:	3b01      	subs	r3, #1
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	4682      	mov	sl, r0
 8018bd4:	468b      	mov	fp, r1
 8018bd6:	f040 81e7 	bne.w	8018fa8 <__ieee754_pow+0x700>
 8018bda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018c90 <__ieee754_pow+0x3e8>
 8018bde:	eeb0 8a47 	vmov.f32	s16, s14
 8018be2:	eef0 8a67 	vmov.f32	s17, s15
 8018be6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018bea:	2600      	movs	r6, #0
 8018bec:	4632      	mov	r2, r6
 8018bee:	463b      	mov	r3, r7
 8018bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018bf4:	f7e7 fb68 	bl	80002c8 <__aeabi_dsub>
 8018bf8:	4622      	mov	r2, r4
 8018bfa:	462b      	mov	r3, r5
 8018bfc:	f7e7 fd1c 	bl	8000638 <__aeabi_dmul>
 8018c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c04:	4680      	mov	r8, r0
 8018c06:	4689      	mov	r9, r1
 8018c08:	4650      	mov	r0, sl
 8018c0a:	4659      	mov	r1, fp
 8018c0c:	f7e7 fd14 	bl	8000638 <__aeabi_dmul>
 8018c10:	4602      	mov	r2, r0
 8018c12:	460b      	mov	r3, r1
 8018c14:	4640      	mov	r0, r8
 8018c16:	4649      	mov	r1, r9
 8018c18:	f7e7 fb58 	bl	80002cc <__adddf3>
 8018c1c:	4632      	mov	r2, r6
 8018c1e:	463b      	mov	r3, r7
 8018c20:	4680      	mov	r8, r0
 8018c22:	4689      	mov	r9, r1
 8018c24:	4620      	mov	r0, r4
 8018c26:	4629      	mov	r1, r5
 8018c28:	f7e7 fd06 	bl	8000638 <__aeabi_dmul>
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	4604      	mov	r4, r0
 8018c30:	460d      	mov	r5, r1
 8018c32:	4602      	mov	r2, r0
 8018c34:	4649      	mov	r1, r9
 8018c36:	4640      	mov	r0, r8
 8018c38:	f7e7 fb48 	bl	80002cc <__adddf3>
 8018c3c:	4b19      	ldr	r3, [pc, #100]	; (8018ca4 <__ieee754_pow+0x3fc>)
 8018c3e:	4299      	cmp	r1, r3
 8018c40:	ec45 4b19 	vmov	d9, r4, r5
 8018c44:	4606      	mov	r6, r0
 8018c46:	460f      	mov	r7, r1
 8018c48:	468b      	mov	fp, r1
 8018c4a:	f340 82f1 	ble.w	8019230 <__ieee754_pow+0x988>
 8018c4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018c52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018c56:	4303      	orrs	r3, r0
 8018c58:	f000 81e4 	beq.w	8019024 <__ieee754_pow+0x77c>
 8018c5c:	ec51 0b18 	vmov	r0, r1, d8
 8018c60:	2200      	movs	r2, #0
 8018c62:	2300      	movs	r3, #0
 8018c64:	f7e7 ff5a 	bl	8000b1c <__aeabi_dcmplt>
 8018c68:	3800      	subs	r0, #0
 8018c6a:	bf18      	it	ne
 8018c6c:	2001      	movne	r0, #1
 8018c6e:	e72b      	b.n	8018ac8 <__ieee754_pow+0x220>
 8018c70:	60000000 	.word	0x60000000
 8018c74:	3ff71547 	.word	0x3ff71547
 8018c78:	f85ddf44 	.word	0xf85ddf44
 8018c7c:	3e54ae0b 	.word	0x3e54ae0b
 8018c80:	55555555 	.word	0x55555555
 8018c84:	3fd55555 	.word	0x3fd55555
 8018c88:	652b82fe 	.word	0x652b82fe
 8018c8c:	3ff71547 	.word	0x3ff71547
 8018c90:	00000000 	.word	0x00000000
 8018c94:	bff00000 	.word	0xbff00000
 8018c98:	3ff00000 	.word	0x3ff00000
 8018c9c:	3fd00000 	.word	0x3fd00000
 8018ca0:	3fe00000 	.word	0x3fe00000
 8018ca4:	408fffff 	.word	0x408fffff
 8018ca8:	4bd5      	ldr	r3, [pc, #852]	; (8019000 <__ieee754_pow+0x758>)
 8018caa:	402b      	ands	r3, r5
 8018cac:	2200      	movs	r2, #0
 8018cae:	b92b      	cbnz	r3, 8018cbc <__ieee754_pow+0x414>
 8018cb0:	4bd4      	ldr	r3, [pc, #848]	; (8019004 <__ieee754_pow+0x75c>)
 8018cb2:	f7e7 fcc1 	bl	8000638 <__aeabi_dmul>
 8018cb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018cba:	460c      	mov	r4, r1
 8018cbc:	1523      	asrs	r3, r4, #20
 8018cbe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018cc2:	4413      	add	r3, r2
 8018cc4:	9305      	str	r3, [sp, #20]
 8018cc6:	4bd0      	ldr	r3, [pc, #832]	; (8019008 <__ieee754_pow+0x760>)
 8018cc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018ccc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018cd0:	429c      	cmp	r4, r3
 8018cd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018cd6:	dd08      	ble.n	8018cea <__ieee754_pow+0x442>
 8018cd8:	4bcc      	ldr	r3, [pc, #816]	; (801900c <__ieee754_pow+0x764>)
 8018cda:	429c      	cmp	r4, r3
 8018cdc:	f340 8162 	ble.w	8018fa4 <__ieee754_pow+0x6fc>
 8018ce0:	9b05      	ldr	r3, [sp, #20]
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	9305      	str	r3, [sp, #20]
 8018ce6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018cea:	2400      	movs	r4, #0
 8018cec:	00e3      	lsls	r3, r4, #3
 8018cee:	9307      	str	r3, [sp, #28]
 8018cf0:	4bc7      	ldr	r3, [pc, #796]	; (8019010 <__ieee754_pow+0x768>)
 8018cf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018cf6:	ed93 7b00 	vldr	d7, [r3]
 8018cfa:	4629      	mov	r1, r5
 8018cfc:	ec53 2b17 	vmov	r2, r3, d7
 8018d00:	eeb0 9a47 	vmov.f32	s18, s14
 8018d04:	eef0 9a67 	vmov.f32	s19, s15
 8018d08:	4682      	mov	sl, r0
 8018d0a:	f7e7 fadd 	bl	80002c8 <__aeabi_dsub>
 8018d0e:	4652      	mov	r2, sl
 8018d10:	4606      	mov	r6, r0
 8018d12:	460f      	mov	r7, r1
 8018d14:	462b      	mov	r3, r5
 8018d16:	ec51 0b19 	vmov	r0, r1, d9
 8018d1a:	f7e7 fad7 	bl	80002cc <__adddf3>
 8018d1e:	4602      	mov	r2, r0
 8018d20:	460b      	mov	r3, r1
 8018d22:	2000      	movs	r0, #0
 8018d24:	49bb      	ldr	r1, [pc, #748]	; (8019014 <__ieee754_pow+0x76c>)
 8018d26:	f7e7 fdb1 	bl	800088c <__aeabi_ddiv>
 8018d2a:	ec41 0b1a 	vmov	d10, r0, r1
 8018d2e:	4602      	mov	r2, r0
 8018d30:	460b      	mov	r3, r1
 8018d32:	4630      	mov	r0, r6
 8018d34:	4639      	mov	r1, r7
 8018d36:	f7e7 fc7f 	bl	8000638 <__aeabi_dmul>
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d40:	9302      	str	r3, [sp, #8]
 8018d42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018d46:	46ab      	mov	fp, r5
 8018d48:	106d      	asrs	r5, r5, #1
 8018d4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018d4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018d52:	ec41 0b18 	vmov	d8, r0, r1
 8018d56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	4640      	mov	r0, r8
 8018d5e:	4649      	mov	r1, r9
 8018d60:	4614      	mov	r4, r2
 8018d62:	461d      	mov	r5, r3
 8018d64:	f7e7 fc68 	bl	8000638 <__aeabi_dmul>
 8018d68:	4602      	mov	r2, r0
 8018d6a:	460b      	mov	r3, r1
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	4639      	mov	r1, r7
 8018d70:	f7e7 faaa 	bl	80002c8 <__aeabi_dsub>
 8018d74:	ec53 2b19 	vmov	r2, r3, d9
 8018d78:	4606      	mov	r6, r0
 8018d7a:	460f      	mov	r7, r1
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	4629      	mov	r1, r5
 8018d80:	f7e7 faa2 	bl	80002c8 <__aeabi_dsub>
 8018d84:	4602      	mov	r2, r0
 8018d86:	460b      	mov	r3, r1
 8018d88:	4650      	mov	r0, sl
 8018d8a:	4659      	mov	r1, fp
 8018d8c:	f7e7 fa9c 	bl	80002c8 <__aeabi_dsub>
 8018d90:	4642      	mov	r2, r8
 8018d92:	464b      	mov	r3, r9
 8018d94:	f7e7 fc50 	bl	8000638 <__aeabi_dmul>
 8018d98:	4602      	mov	r2, r0
 8018d9a:	460b      	mov	r3, r1
 8018d9c:	4630      	mov	r0, r6
 8018d9e:	4639      	mov	r1, r7
 8018da0:	f7e7 fa92 	bl	80002c8 <__aeabi_dsub>
 8018da4:	ec53 2b1a 	vmov	r2, r3, d10
 8018da8:	f7e7 fc46 	bl	8000638 <__aeabi_dmul>
 8018dac:	ec53 2b18 	vmov	r2, r3, d8
 8018db0:	ec41 0b19 	vmov	d9, r0, r1
 8018db4:	ec51 0b18 	vmov	r0, r1, d8
 8018db8:	f7e7 fc3e 	bl	8000638 <__aeabi_dmul>
 8018dbc:	a37c      	add	r3, pc, #496	; (adr r3, 8018fb0 <__ieee754_pow+0x708>)
 8018dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	460d      	mov	r5, r1
 8018dc6:	f7e7 fc37 	bl	8000638 <__aeabi_dmul>
 8018dca:	a37b      	add	r3, pc, #492	; (adr r3, 8018fb8 <__ieee754_pow+0x710>)
 8018dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd0:	f7e7 fa7c 	bl	80002cc <__adddf3>
 8018dd4:	4622      	mov	r2, r4
 8018dd6:	462b      	mov	r3, r5
 8018dd8:	f7e7 fc2e 	bl	8000638 <__aeabi_dmul>
 8018ddc:	a378      	add	r3, pc, #480	; (adr r3, 8018fc0 <__ieee754_pow+0x718>)
 8018dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de2:	f7e7 fa73 	bl	80002cc <__adddf3>
 8018de6:	4622      	mov	r2, r4
 8018de8:	462b      	mov	r3, r5
 8018dea:	f7e7 fc25 	bl	8000638 <__aeabi_dmul>
 8018dee:	a376      	add	r3, pc, #472	; (adr r3, 8018fc8 <__ieee754_pow+0x720>)
 8018df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df4:	f7e7 fa6a 	bl	80002cc <__adddf3>
 8018df8:	4622      	mov	r2, r4
 8018dfa:	462b      	mov	r3, r5
 8018dfc:	f7e7 fc1c 	bl	8000638 <__aeabi_dmul>
 8018e00:	a373      	add	r3, pc, #460	; (adr r3, 8018fd0 <__ieee754_pow+0x728>)
 8018e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e06:	f7e7 fa61 	bl	80002cc <__adddf3>
 8018e0a:	4622      	mov	r2, r4
 8018e0c:	462b      	mov	r3, r5
 8018e0e:	f7e7 fc13 	bl	8000638 <__aeabi_dmul>
 8018e12:	a371      	add	r3, pc, #452	; (adr r3, 8018fd8 <__ieee754_pow+0x730>)
 8018e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e18:	f7e7 fa58 	bl	80002cc <__adddf3>
 8018e1c:	4622      	mov	r2, r4
 8018e1e:	4606      	mov	r6, r0
 8018e20:	460f      	mov	r7, r1
 8018e22:	462b      	mov	r3, r5
 8018e24:	4620      	mov	r0, r4
 8018e26:	4629      	mov	r1, r5
 8018e28:	f7e7 fc06 	bl	8000638 <__aeabi_dmul>
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	460b      	mov	r3, r1
 8018e30:	4630      	mov	r0, r6
 8018e32:	4639      	mov	r1, r7
 8018e34:	f7e7 fc00 	bl	8000638 <__aeabi_dmul>
 8018e38:	4642      	mov	r2, r8
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	460d      	mov	r5, r1
 8018e3e:	464b      	mov	r3, r9
 8018e40:	ec51 0b18 	vmov	r0, r1, d8
 8018e44:	f7e7 fa42 	bl	80002cc <__adddf3>
 8018e48:	ec53 2b19 	vmov	r2, r3, d9
 8018e4c:	f7e7 fbf4 	bl	8000638 <__aeabi_dmul>
 8018e50:	4622      	mov	r2, r4
 8018e52:	462b      	mov	r3, r5
 8018e54:	f7e7 fa3a 	bl	80002cc <__adddf3>
 8018e58:	4642      	mov	r2, r8
 8018e5a:	4682      	mov	sl, r0
 8018e5c:	468b      	mov	fp, r1
 8018e5e:	464b      	mov	r3, r9
 8018e60:	4640      	mov	r0, r8
 8018e62:	4649      	mov	r1, r9
 8018e64:	f7e7 fbe8 	bl	8000638 <__aeabi_dmul>
 8018e68:	4b6b      	ldr	r3, [pc, #428]	; (8019018 <__ieee754_pow+0x770>)
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	4606      	mov	r6, r0
 8018e6e:	460f      	mov	r7, r1
 8018e70:	f7e7 fa2c 	bl	80002cc <__adddf3>
 8018e74:	4652      	mov	r2, sl
 8018e76:	465b      	mov	r3, fp
 8018e78:	f7e7 fa28 	bl	80002cc <__adddf3>
 8018e7c:	2000      	movs	r0, #0
 8018e7e:	4604      	mov	r4, r0
 8018e80:	460d      	mov	r5, r1
 8018e82:	4602      	mov	r2, r0
 8018e84:	460b      	mov	r3, r1
 8018e86:	4640      	mov	r0, r8
 8018e88:	4649      	mov	r1, r9
 8018e8a:	f7e7 fbd5 	bl	8000638 <__aeabi_dmul>
 8018e8e:	4b62      	ldr	r3, [pc, #392]	; (8019018 <__ieee754_pow+0x770>)
 8018e90:	4680      	mov	r8, r0
 8018e92:	4689      	mov	r9, r1
 8018e94:	2200      	movs	r2, #0
 8018e96:	4620      	mov	r0, r4
 8018e98:	4629      	mov	r1, r5
 8018e9a:	f7e7 fa15 	bl	80002c8 <__aeabi_dsub>
 8018e9e:	4632      	mov	r2, r6
 8018ea0:	463b      	mov	r3, r7
 8018ea2:	f7e7 fa11 	bl	80002c8 <__aeabi_dsub>
 8018ea6:	4602      	mov	r2, r0
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	4650      	mov	r0, sl
 8018eac:	4659      	mov	r1, fp
 8018eae:	f7e7 fa0b 	bl	80002c8 <__aeabi_dsub>
 8018eb2:	ec53 2b18 	vmov	r2, r3, d8
 8018eb6:	f7e7 fbbf 	bl	8000638 <__aeabi_dmul>
 8018eba:	4622      	mov	r2, r4
 8018ebc:	4606      	mov	r6, r0
 8018ebe:	460f      	mov	r7, r1
 8018ec0:	462b      	mov	r3, r5
 8018ec2:	ec51 0b19 	vmov	r0, r1, d9
 8018ec6:	f7e7 fbb7 	bl	8000638 <__aeabi_dmul>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4630      	mov	r0, r6
 8018ed0:	4639      	mov	r1, r7
 8018ed2:	f7e7 f9fb 	bl	80002cc <__adddf3>
 8018ed6:	4606      	mov	r6, r0
 8018ed8:	460f      	mov	r7, r1
 8018eda:	4602      	mov	r2, r0
 8018edc:	460b      	mov	r3, r1
 8018ede:	4640      	mov	r0, r8
 8018ee0:	4649      	mov	r1, r9
 8018ee2:	f7e7 f9f3 	bl	80002cc <__adddf3>
 8018ee6:	a33e      	add	r3, pc, #248	; (adr r3, 8018fe0 <__ieee754_pow+0x738>)
 8018ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eec:	2000      	movs	r0, #0
 8018eee:	4604      	mov	r4, r0
 8018ef0:	460d      	mov	r5, r1
 8018ef2:	f7e7 fba1 	bl	8000638 <__aeabi_dmul>
 8018ef6:	4642      	mov	r2, r8
 8018ef8:	ec41 0b18 	vmov	d8, r0, r1
 8018efc:	464b      	mov	r3, r9
 8018efe:	4620      	mov	r0, r4
 8018f00:	4629      	mov	r1, r5
 8018f02:	f7e7 f9e1 	bl	80002c8 <__aeabi_dsub>
 8018f06:	4602      	mov	r2, r0
 8018f08:	460b      	mov	r3, r1
 8018f0a:	4630      	mov	r0, r6
 8018f0c:	4639      	mov	r1, r7
 8018f0e:	f7e7 f9db 	bl	80002c8 <__aeabi_dsub>
 8018f12:	a335      	add	r3, pc, #212	; (adr r3, 8018fe8 <__ieee754_pow+0x740>)
 8018f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f18:	f7e7 fb8e 	bl	8000638 <__aeabi_dmul>
 8018f1c:	a334      	add	r3, pc, #208	; (adr r3, 8018ff0 <__ieee754_pow+0x748>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	4606      	mov	r6, r0
 8018f24:	460f      	mov	r7, r1
 8018f26:	4620      	mov	r0, r4
 8018f28:	4629      	mov	r1, r5
 8018f2a:	f7e7 fb85 	bl	8000638 <__aeabi_dmul>
 8018f2e:	4602      	mov	r2, r0
 8018f30:	460b      	mov	r3, r1
 8018f32:	4630      	mov	r0, r6
 8018f34:	4639      	mov	r1, r7
 8018f36:	f7e7 f9c9 	bl	80002cc <__adddf3>
 8018f3a:	9a07      	ldr	r2, [sp, #28]
 8018f3c:	4b37      	ldr	r3, [pc, #220]	; (801901c <__ieee754_pow+0x774>)
 8018f3e:	4413      	add	r3, r2
 8018f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f44:	f7e7 f9c2 	bl	80002cc <__adddf3>
 8018f48:	4682      	mov	sl, r0
 8018f4a:	9805      	ldr	r0, [sp, #20]
 8018f4c:	468b      	mov	fp, r1
 8018f4e:	f7e7 fb09 	bl	8000564 <__aeabi_i2d>
 8018f52:	9a07      	ldr	r2, [sp, #28]
 8018f54:	4b32      	ldr	r3, [pc, #200]	; (8019020 <__ieee754_pow+0x778>)
 8018f56:	4413      	add	r3, r2
 8018f58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f5c:	4606      	mov	r6, r0
 8018f5e:	460f      	mov	r7, r1
 8018f60:	4652      	mov	r2, sl
 8018f62:	465b      	mov	r3, fp
 8018f64:	ec51 0b18 	vmov	r0, r1, d8
 8018f68:	f7e7 f9b0 	bl	80002cc <__adddf3>
 8018f6c:	4642      	mov	r2, r8
 8018f6e:	464b      	mov	r3, r9
 8018f70:	f7e7 f9ac 	bl	80002cc <__adddf3>
 8018f74:	4632      	mov	r2, r6
 8018f76:	463b      	mov	r3, r7
 8018f78:	f7e7 f9a8 	bl	80002cc <__adddf3>
 8018f7c:	2000      	movs	r0, #0
 8018f7e:	4632      	mov	r2, r6
 8018f80:	463b      	mov	r3, r7
 8018f82:	4604      	mov	r4, r0
 8018f84:	460d      	mov	r5, r1
 8018f86:	f7e7 f99f 	bl	80002c8 <__aeabi_dsub>
 8018f8a:	4642      	mov	r2, r8
 8018f8c:	464b      	mov	r3, r9
 8018f8e:	f7e7 f99b 	bl	80002c8 <__aeabi_dsub>
 8018f92:	ec53 2b18 	vmov	r2, r3, d8
 8018f96:	f7e7 f997 	bl	80002c8 <__aeabi_dsub>
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	4650      	mov	r0, sl
 8018fa0:	4659      	mov	r1, fp
 8018fa2:	e610      	b.n	8018bc6 <__ieee754_pow+0x31e>
 8018fa4:	2401      	movs	r4, #1
 8018fa6:	e6a1      	b.n	8018cec <__ieee754_pow+0x444>
 8018fa8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018ff8 <__ieee754_pow+0x750>
 8018fac:	e617      	b.n	8018bde <__ieee754_pow+0x336>
 8018fae:	bf00      	nop
 8018fb0:	4a454eef 	.word	0x4a454eef
 8018fb4:	3fca7e28 	.word	0x3fca7e28
 8018fb8:	93c9db65 	.word	0x93c9db65
 8018fbc:	3fcd864a 	.word	0x3fcd864a
 8018fc0:	a91d4101 	.word	0xa91d4101
 8018fc4:	3fd17460 	.word	0x3fd17460
 8018fc8:	518f264d 	.word	0x518f264d
 8018fcc:	3fd55555 	.word	0x3fd55555
 8018fd0:	db6fabff 	.word	0xdb6fabff
 8018fd4:	3fdb6db6 	.word	0x3fdb6db6
 8018fd8:	33333303 	.word	0x33333303
 8018fdc:	3fe33333 	.word	0x3fe33333
 8018fe0:	e0000000 	.word	0xe0000000
 8018fe4:	3feec709 	.word	0x3feec709
 8018fe8:	dc3a03fd 	.word	0xdc3a03fd
 8018fec:	3feec709 	.word	0x3feec709
 8018ff0:	145b01f5 	.word	0x145b01f5
 8018ff4:	be3e2fe0 	.word	0xbe3e2fe0
 8018ff8:	00000000 	.word	0x00000000
 8018ffc:	3ff00000 	.word	0x3ff00000
 8019000:	7ff00000 	.word	0x7ff00000
 8019004:	43400000 	.word	0x43400000
 8019008:	0003988e 	.word	0x0003988e
 801900c:	000bb679 	.word	0x000bb679
 8019010:	08058cb0 	.word	0x08058cb0
 8019014:	3ff00000 	.word	0x3ff00000
 8019018:	40080000 	.word	0x40080000
 801901c:	08058cd0 	.word	0x08058cd0
 8019020:	08058cc0 	.word	0x08058cc0
 8019024:	a3b5      	add	r3, pc, #724	; (adr r3, 80192fc <__ieee754_pow+0xa54>)
 8019026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801902a:	4640      	mov	r0, r8
 801902c:	4649      	mov	r1, r9
 801902e:	f7e7 f94d 	bl	80002cc <__adddf3>
 8019032:	4622      	mov	r2, r4
 8019034:	ec41 0b1a 	vmov	d10, r0, r1
 8019038:	462b      	mov	r3, r5
 801903a:	4630      	mov	r0, r6
 801903c:	4639      	mov	r1, r7
 801903e:	f7e7 f943 	bl	80002c8 <__aeabi_dsub>
 8019042:	4602      	mov	r2, r0
 8019044:	460b      	mov	r3, r1
 8019046:	ec51 0b1a 	vmov	r0, r1, d10
 801904a:	f7e7 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 801904e:	2800      	cmp	r0, #0
 8019050:	f47f ae04 	bne.w	8018c5c <__ieee754_pow+0x3b4>
 8019054:	4aa4      	ldr	r2, [pc, #656]	; (80192e8 <__ieee754_pow+0xa40>)
 8019056:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801905a:	4293      	cmp	r3, r2
 801905c:	f340 8108 	ble.w	8019270 <__ieee754_pow+0x9c8>
 8019060:	151b      	asrs	r3, r3, #20
 8019062:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019066:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801906a:	fa4a f303 	asr.w	r3, sl, r3
 801906e:	445b      	add	r3, fp
 8019070:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019074:	4e9d      	ldr	r6, [pc, #628]	; (80192ec <__ieee754_pow+0xa44>)
 8019076:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801907a:	4116      	asrs	r6, r2
 801907c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019080:	2000      	movs	r0, #0
 8019082:	ea23 0106 	bic.w	r1, r3, r6
 8019086:	f1c2 0214 	rsb	r2, r2, #20
 801908a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801908e:	fa4a fa02 	asr.w	sl, sl, r2
 8019092:	f1bb 0f00 	cmp.w	fp, #0
 8019096:	4602      	mov	r2, r0
 8019098:	460b      	mov	r3, r1
 801909a:	4620      	mov	r0, r4
 801909c:	4629      	mov	r1, r5
 801909e:	bfb8      	it	lt
 80190a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80190a4:	f7e7 f910 	bl	80002c8 <__aeabi_dsub>
 80190a8:	ec41 0b19 	vmov	d9, r0, r1
 80190ac:	4642      	mov	r2, r8
 80190ae:	464b      	mov	r3, r9
 80190b0:	ec51 0b19 	vmov	r0, r1, d9
 80190b4:	f7e7 f90a 	bl	80002cc <__adddf3>
 80190b8:	a37b      	add	r3, pc, #492	; (adr r3, 80192a8 <__ieee754_pow+0xa00>)
 80190ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190be:	2000      	movs	r0, #0
 80190c0:	4604      	mov	r4, r0
 80190c2:	460d      	mov	r5, r1
 80190c4:	f7e7 fab8 	bl	8000638 <__aeabi_dmul>
 80190c8:	ec53 2b19 	vmov	r2, r3, d9
 80190cc:	4606      	mov	r6, r0
 80190ce:	460f      	mov	r7, r1
 80190d0:	4620      	mov	r0, r4
 80190d2:	4629      	mov	r1, r5
 80190d4:	f7e7 f8f8 	bl	80002c8 <__aeabi_dsub>
 80190d8:	4602      	mov	r2, r0
 80190da:	460b      	mov	r3, r1
 80190dc:	4640      	mov	r0, r8
 80190de:	4649      	mov	r1, r9
 80190e0:	f7e7 f8f2 	bl	80002c8 <__aeabi_dsub>
 80190e4:	a372      	add	r3, pc, #456	; (adr r3, 80192b0 <__ieee754_pow+0xa08>)
 80190e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ea:	f7e7 faa5 	bl	8000638 <__aeabi_dmul>
 80190ee:	a372      	add	r3, pc, #456	; (adr r3, 80192b8 <__ieee754_pow+0xa10>)
 80190f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f4:	4680      	mov	r8, r0
 80190f6:	4689      	mov	r9, r1
 80190f8:	4620      	mov	r0, r4
 80190fa:	4629      	mov	r1, r5
 80190fc:	f7e7 fa9c 	bl	8000638 <__aeabi_dmul>
 8019100:	4602      	mov	r2, r0
 8019102:	460b      	mov	r3, r1
 8019104:	4640      	mov	r0, r8
 8019106:	4649      	mov	r1, r9
 8019108:	f7e7 f8e0 	bl	80002cc <__adddf3>
 801910c:	4604      	mov	r4, r0
 801910e:	460d      	mov	r5, r1
 8019110:	4602      	mov	r2, r0
 8019112:	460b      	mov	r3, r1
 8019114:	4630      	mov	r0, r6
 8019116:	4639      	mov	r1, r7
 8019118:	f7e7 f8d8 	bl	80002cc <__adddf3>
 801911c:	4632      	mov	r2, r6
 801911e:	463b      	mov	r3, r7
 8019120:	4680      	mov	r8, r0
 8019122:	4689      	mov	r9, r1
 8019124:	f7e7 f8d0 	bl	80002c8 <__aeabi_dsub>
 8019128:	4602      	mov	r2, r0
 801912a:	460b      	mov	r3, r1
 801912c:	4620      	mov	r0, r4
 801912e:	4629      	mov	r1, r5
 8019130:	f7e7 f8ca 	bl	80002c8 <__aeabi_dsub>
 8019134:	4642      	mov	r2, r8
 8019136:	4606      	mov	r6, r0
 8019138:	460f      	mov	r7, r1
 801913a:	464b      	mov	r3, r9
 801913c:	4640      	mov	r0, r8
 801913e:	4649      	mov	r1, r9
 8019140:	f7e7 fa7a 	bl	8000638 <__aeabi_dmul>
 8019144:	a35e      	add	r3, pc, #376	; (adr r3, 80192c0 <__ieee754_pow+0xa18>)
 8019146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801914a:	4604      	mov	r4, r0
 801914c:	460d      	mov	r5, r1
 801914e:	f7e7 fa73 	bl	8000638 <__aeabi_dmul>
 8019152:	a35d      	add	r3, pc, #372	; (adr r3, 80192c8 <__ieee754_pow+0xa20>)
 8019154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019158:	f7e7 f8b6 	bl	80002c8 <__aeabi_dsub>
 801915c:	4622      	mov	r2, r4
 801915e:	462b      	mov	r3, r5
 8019160:	f7e7 fa6a 	bl	8000638 <__aeabi_dmul>
 8019164:	a35a      	add	r3, pc, #360	; (adr r3, 80192d0 <__ieee754_pow+0xa28>)
 8019166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801916a:	f7e7 f8af 	bl	80002cc <__adddf3>
 801916e:	4622      	mov	r2, r4
 8019170:	462b      	mov	r3, r5
 8019172:	f7e7 fa61 	bl	8000638 <__aeabi_dmul>
 8019176:	a358      	add	r3, pc, #352	; (adr r3, 80192d8 <__ieee754_pow+0xa30>)
 8019178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917c:	f7e7 f8a4 	bl	80002c8 <__aeabi_dsub>
 8019180:	4622      	mov	r2, r4
 8019182:	462b      	mov	r3, r5
 8019184:	f7e7 fa58 	bl	8000638 <__aeabi_dmul>
 8019188:	a355      	add	r3, pc, #340	; (adr r3, 80192e0 <__ieee754_pow+0xa38>)
 801918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918e:	f7e7 f89d 	bl	80002cc <__adddf3>
 8019192:	4622      	mov	r2, r4
 8019194:	462b      	mov	r3, r5
 8019196:	f7e7 fa4f 	bl	8000638 <__aeabi_dmul>
 801919a:	4602      	mov	r2, r0
 801919c:	460b      	mov	r3, r1
 801919e:	4640      	mov	r0, r8
 80191a0:	4649      	mov	r1, r9
 80191a2:	f7e7 f891 	bl	80002c8 <__aeabi_dsub>
 80191a6:	4604      	mov	r4, r0
 80191a8:	460d      	mov	r5, r1
 80191aa:	4602      	mov	r2, r0
 80191ac:	460b      	mov	r3, r1
 80191ae:	4640      	mov	r0, r8
 80191b0:	4649      	mov	r1, r9
 80191b2:	f7e7 fa41 	bl	8000638 <__aeabi_dmul>
 80191b6:	2200      	movs	r2, #0
 80191b8:	ec41 0b19 	vmov	d9, r0, r1
 80191bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80191c0:	4620      	mov	r0, r4
 80191c2:	4629      	mov	r1, r5
 80191c4:	f7e7 f880 	bl	80002c8 <__aeabi_dsub>
 80191c8:	4602      	mov	r2, r0
 80191ca:	460b      	mov	r3, r1
 80191cc:	ec51 0b19 	vmov	r0, r1, d9
 80191d0:	f7e7 fb5c 	bl	800088c <__aeabi_ddiv>
 80191d4:	4632      	mov	r2, r6
 80191d6:	4604      	mov	r4, r0
 80191d8:	460d      	mov	r5, r1
 80191da:	463b      	mov	r3, r7
 80191dc:	4640      	mov	r0, r8
 80191de:	4649      	mov	r1, r9
 80191e0:	f7e7 fa2a 	bl	8000638 <__aeabi_dmul>
 80191e4:	4632      	mov	r2, r6
 80191e6:	463b      	mov	r3, r7
 80191e8:	f7e7 f870 	bl	80002cc <__adddf3>
 80191ec:	4602      	mov	r2, r0
 80191ee:	460b      	mov	r3, r1
 80191f0:	4620      	mov	r0, r4
 80191f2:	4629      	mov	r1, r5
 80191f4:	f7e7 f868 	bl	80002c8 <__aeabi_dsub>
 80191f8:	4642      	mov	r2, r8
 80191fa:	464b      	mov	r3, r9
 80191fc:	f7e7 f864 	bl	80002c8 <__aeabi_dsub>
 8019200:	460b      	mov	r3, r1
 8019202:	4602      	mov	r2, r0
 8019204:	493a      	ldr	r1, [pc, #232]	; (80192f0 <__ieee754_pow+0xa48>)
 8019206:	2000      	movs	r0, #0
 8019208:	f7e7 f85e 	bl	80002c8 <__aeabi_dsub>
 801920c:	ec41 0b10 	vmov	d0, r0, r1
 8019210:	ee10 3a90 	vmov	r3, s1
 8019214:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801921c:	da2b      	bge.n	8019276 <__ieee754_pow+0x9ce>
 801921e:	4650      	mov	r0, sl
 8019220:	f001 fada 	bl	801a7d8 <scalbn>
 8019224:	ec51 0b10 	vmov	r0, r1, d0
 8019228:	ec53 2b18 	vmov	r2, r3, d8
 801922c:	f7ff bbed 	b.w	8018a0a <__ieee754_pow+0x162>
 8019230:	4b30      	ldr	r3, [pc, #192]	; (80192f4 <__ieee754_pow+0xa4c>)
 8019232:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019236:	429e      	cmp	r6, r3
 8019238:	f77f af0c 	ble.w	8019054 <__ieee754_pow+0x7ac>
 801923c:	4b2e      	ldr	r3, [pc, #184]	; (80192f8 <__ieee754_pow+0xa50>)
 801923e:	440b      	add	r3, r1
 8019240:	4303      	orrs	r3, r0
 8019242:	d009      	beq.n	8019258 <__ieee754_pow+0x9b0>
 8019244:	ec51 0b18 	vmov	r0, r1, d8
 8019248:	2200      	movs	r2, #0
 801924a:	2300      	movs	r3, #0
 801924c:	f7e7 fc66 	bl	8000b1c <__aeabi_dcmplt>
 8019250:	3800      	subs	r0, #0
 8019252:	bf18      	it	ne
 8019254:	2001      	movne	r0, #1
 8019256:	e447      	b.n	8018ae8 <__ieee754_pow+0x240>
 8019258:	4622      	mov	r2, r4
 801925a:	462b      	mov	r3, r5
 801925c:	f7e7 f834 	bl	80002c8 <__aeabi_dsub>
 8019260:	4642      	mov	r2, r8
 8019262:	464b      	mov	r3, r9
 8019264:	f7e7 fc6e 	bl	8000b44 <__aeabi_dcmpge>
 8019268:	2800      	cmp	r0, #0
 801926a:	f43f aef3 	beq.w	8019054 <__ieee754_pow+0x7ac>
 801926e:	e7e9      	b.n	8019244 <__ieee754_pow+0x99c>
 8019270:	f04f 0a00 	mov.w	sl, #0
 8019274:	e71a      	b.n	80190ac <__ieee754_pow+0x804>
 8019276:	ec51 0b10 	vmov	r0, r1, d0
 801927a:	4619      	mov	r1, r3
 801927c:	e7d4      	b.n	8019228 <__ieee754_pow+0x980>
 801927e:	491c      	ldr	r1, [pc, #112]	; (80192f0 <__ieee754_pow+0xa48>)
 8019280:	2000      	movs	r0, #0
 8019282:	f7ff bb30 	b.w	80188e6 <__ieee754_pow+0x3e>
 8019286:	2000      	movs	r0, #0
 8019288:	2100      	movs	r1, #0
 801928a:	f7ff bb2c 	b.w	80188e6 <__ieee754_pow+0x3e>
 801928e:	4630      	mov	r0, r6
 8019290:	4639      	mov	r1, r7
 8019292:	f7ff bb28 	b.w	80188e6 <__ieee754_pow+0x3e>
 8019296:	9204      	str	r2, [sp, #16]
 8019298:	f7ff bb7a 	b.w	8018990 <__ieee754_pow+0xe8>
 801929c:	2300      	movs	r3, #0
 801929e:	f7ff bb64 	b.w	801896a <__ieee754_pow+0xc2>
 80192a2:	bf00      	nop
 80192a4:	f3af 8000 	nop.w
 80192a8:	00000000 	.word	0x00000000
 80192ac:	3fe62e43 	.word	0x3fe62e43
 80192b0:	fefa39ef 	.word	0xfefa39ef
 80192b4:	3fe62e42 	.word	0x3fe62e42
 80192b8:	0ca86c39 	.word	0x0ca86c39
 80192bc:	be205c61 	.word	0xbe205c61
 80192c0:	72bea4d0 	.word	0x72bea4d0
 80192c4:	3e663769 	.word	0x3e663769
 80192c8:	c5d26bf1 	.word	0xc5d26bf1
 80192cc:	3ebbbd41 	.word	0x3ebbbd41
 80192d0:	af25de2c 	.word	0xaf25de2c
 80192d4:	3f11566a 	.word	0x3f11566a
 80192d8:	16bebd93 	.word	0x16bebd93
 80192dc:	3f66c16c 	.word	0x3f66c16c
 80192e0:	5555553e 	.word	0x5555553e
 80192e4:	3fc55555 	.word	0x3fc55555
 80192e8:	3fe00000 	.word	0x3fe00000
 80192ec:	000fffff 	.word	0x000fffff
 80192f0:	3ff00000 	.word	0x3ff00000
 80192f4:	4090cbff 	.word	0x4090cbff
 80192f8:	3f6f3400 	.word	0x3f6f3400
 80192fc:	652b82fe 	.word	0x652b82fe
 8019300:	3c971547 	.word	0x3c971547
 8019304:	00000000 	.word	0x00000000

08019308 <__ieee754_rem_pio2>:
 8019308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801930c:	ed2d 8b02 	vpush	{d8}
 8019310:	ec55 4b10 	vmov	r4, r5, d0
 8019314:	4bca      	ldr	r3, [pc, #808]	; (8019640 <__ieee754_rem_pio2+0x338>)
 8019316:	b08b      	sub	sp, #44	; 0x2c
 8019318:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801931c:	4598      	cmp	r8, r3
 801931e:	4682      	mov	sl, r0
 8019320:	9502      	str	r5, [sp, #8]
 8019322:	dc08      	bgt.n	8019336 <__ieee754_rem_pio2+0x2e>
 8019324:	2200      	movs	r2, #0
 8019326:	2300      	movs	r3, #0
 8019328:	ed80 0b00 	vstr	d0, [r0]
 801932c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019330:	f04f 0b00 	mov.w	fp, #0
 8019334:	e028      	b.n	8019388 <__ieee754_rem_pio2+0x80>
 8019336:	4bc3      	ldr	r3, [pc, #780]	; (8019644 <__ieee754_rem_pio2+0x33c>)
 8019338:	4598      	cmp	r8, r3
 801933a:	dc78      	bgt.n	801942e <__ieee754_rem_pio2+0x126>
 801933c:	9b02      	ldr	r3, [sp, #8]
 801933e:	4ec2      	ldr	r6, [pc, #776]	; (8019648 <__ieee754_rem_pio2+0x340>)
 8019340:	2b00      	cmp	r3, #0
 8019342:	ee10 0a10 	vmov	r0, s0
 8019346:	a3b0      	add	r3, pc, #704	; (adr r3, 8019608 <__ieee754_rem_pio2+0x300>)
 8019348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934c:	4629      	mov	r1, r5
 801934e:	dd39      	ble.n	80193c4 <__ieee754_rem_pio2+0xbc>
 8019350:	f7e6 ffba 	bl	80002c8 <__aeabi_dsub>
 8019354:	45b0      	cmp	r8, r6
 8019356:	4604      	mov	r4, r0
 8019358:	460d      	mov	r5, r1
 801935a:	d01b      	beq.n	8019394 <__ieee754_rem_pio2+0x8c>
 801935c:	a3ac      	add	r3, pc, #688	; (adr r3, 8019610 <__ieee754_rem_pio2+0x308>)
 801935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019362:	f7e6 ffb1 	bl	80002c8 <__aeabi_dsub>
 8019366:	4602      	mov	r2, r0
 8019368:	460b      	mov	r3, r1
 801936a:	e9ca 2300 	strd	r2, r3, [sl]
 801936e:	4620      	mov	r0, r4
 8019370:	4629      	mov	r1, r5
 8019372:	f7e6 ffa9 	bl	80002c8 <__aeabi_dsub>
 8019376:	a3a6      	add	r3, pc, #664	; (adr r3, 8019610 <__ieee754_rem_pio2+0x308>)
 8019378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801937c:	f7e6 ffa4 	bl	80002c8 <__aeabi_dsub>
 8019380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019384:	f04f 0b01 	mov.w	fp, #1
 8019388:	4658      	mov	r0, fp
 801938a:	b00b      	add	sp, #44	; 0x2c
 801938c:	ecbd 8b02 	vpop	{d8}
 8019390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019394:	a3a0      	add	r3, pc, #640	; (adr r3, 8019618 <__ieee754_rem_pio2+0x310>)
 8019396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801939a:	f7e6 ff95 	bl	80002c8 <__aeabi_dsub>
 801939e:	a3a0      	add	r3, pc, #640	; (adr r3, 8019620 <__ieee754_rem_pio2+0x318>)
 80193a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193a4:	4604      	mov	r4, r0
 80193a6:	460d      	mov	r5, r1
 80193a8:	f7e6 ff8e 	bl	80002c8 <__aeabi_dsub>
 80193ac:	4602      	mov	r2, r0
 80193ae:	460b      	mov	r3, r1
 80193b0:	e9ca 2300 	strd	r2, r3, [sl]
 80193b4:	4620      	mov	r0, r4
 80193b6:	4629      	mov	r1, r5
 80193b8:	f7e6 ff86 	bl	80002c8 <__aeabi_dsub>
 80193bc:	a398      	add	r3, pc, #608	; (adr r3, 8019620 <__ieee754_rem_pio2+0x318>)
 80193be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c2:	e7db      	b.n	801937c <__ieee754_rem_pio2+0x74>
 80193c4:	f7e6 ff82 	bl	80002cc <__adddf3>
 80193c8:	45b0      	cmp	r8, r6
 80193ca:	4604      	mov	r4, r0
 80193cc:	460d      	mov	r5, r1
 80193ce:	d016      	beq.n	80193fe <__ieee754_rem_pio2+0xf6>
 80193d0:	a38f      	add	r3, pc, #572	; (adr r3, 8019610 <__ieee754_rem_pio2+0x308>)
 80193d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d6:	f7e6 ff79 	bl	80002cc <__adddf3>
 80193da:	4602      	mov	r2, r0
 80193dc:	460b      	mov	r3, r1
 80193de:	e9ca 2300 	strd	r2, r3, [sl]
 80193e2:	4620      	mov	r0, r4
 80193e4:	4629      	mov	r1, r5
 80193e6:	f7e6 ff6f 	bl	80002c8 <__aeabi_dsub>
 80193ea:	a389      	add	r3, pc, #548	; (adr r3, 8019610 <__ieee754_rem_pio2+0x308>)
 80193ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f0:	f7e6 ff6c 	bl	80002cc <__adddf3>
 80193f4:	f04f 3bff 	mov.w	fp, #4294967295
 80193f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80193fc:	e7c4      	b.n	8019388 <__ieee754_rem_pio2+0x80>
 80193fe:	a386      	add	r3, pc, #536	; (adr r3, 8019618 <__ieee754_rem_pio2+0x310>)
 8019400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019404:	f7e6 ff62 	bl	80002cc <__adddf3>
 8019408:	a385      	add	r3, pc, #532	; (adr r3, 8019620 <__ieee754_rem_pio2+0x318>)
 801940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940e:	4604      	mov	r4, r0
 8019410:	460d      	mov	r5, r1
 8019412:	f7e6 ff5b 	bl	80002cc <__adddf3>
 8019416:	4602      	mov	r2, r0
 8019418:	460b      	mov	r3, r1
 801941a:	e9ca 2300 	strd	r2, r3, [sl]
 801941e:	4620      	mov	r0, r4
 8019420:	4629      	mov	r1, r5
 8019422:	f7e6 ff51 	bl	80002c8 <__aeabi_dsub>
 8019426:	a37e      	add	r3, pc, #504	; (adr r3, 8019620 <__ieee754_rem_pio2+0x318>)
 8019428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942c:	e7e0      	b.n	80193f0 <__ieee754_rem_pio2+0xe8>
 801942e:	4b87      	ldr	r3, [pc, #540]	; (801964c <__ieee754_rem_pio2+0x344>)
 8019430:	4598      	cmp	r8, r3
 8019432:	f300 80d9 	bgt.w	80195e8 <__ieee754_rem_pio2+0x2e0>
 8019436:	f001 f939 	bl	801a6ac <fabs>
 801943a:	ec55 4b10 	vmov	r4, r5, d0
 801943e:	ee10 0a10 	vmov	r0, s0
 8019442:	a379      	add	r3, pc, #484	; (adr r3, 8019628 <__ieee754_rem_pio2+0x320>)
 8019444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019448:	4629      	mov	r1, r5
 801944a:	f7e7 f8f5 	bl	8000638 <__aeabi_dmul>
 801944e:	4b80      	ldr	r3, [pc, #512]	; (8019650 <__ieee754_rem_pio2+0x348>)
 8019450:	2200      	movs	r2, #0
 8019452:	f7e6 ff3b 	bl	80002cc <__adddf3>
 8019456:	f7e7 fb9f 	bl	8000b98 <__aeabi_d2iz>
 801945a:	4683      	mov	fp, r0
 801945c:	f7e7 f882 	bl	8000564 <__aeabi_i2d>
 8019460:	4602      	mov	r2, r0
 8019462:	460b      	mov	r3, r1
 8019464:	ec43 2b18 	vmov	d8, r2, r3
 8019468:	a367      	add	r3, pc, #412	; (adr r3, 8019608 <__ieee754_rem_pio2+0x300>)
 801946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801946e:	f7e7 f8e3 	bl	8000638 <__aeabi_dmul>
 8019472:	4602      	mov	r2, r0
 8019474:	460b      	mov	r3, r1
 8019476:	4620      	mov	r0, r4
 8019478:	4629      	mov	r1, r5
 801947a:	f7e6 ff25 	bl	80002c8 <__aeabi_dsub>
 801947e:	a364      	add	r3, pc, #400	; (adr r3, 8019610 <__ieee754_rem_pio2+0x308>)
 8019480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019484:	4606      	mov	r6, r0
 8019486:	460f      	mov	r7, r1
 8019488:	ec51 0b18 	vmov	r0, r1, d8
 801948c:	f7e7 f8d4 	bl	8000638 <__aeabi_dmul>
 8019490:	f1bb 0f1f 	cmp.w	fp, #31
 8019494:	4604      	mov	r4, r0
 8019496:	460d      	mov	r5, r1
 8019498:	dc0d      	bgt.n	80194b6 <__ieee754_rem_pio2+0x1ae>
 801949a:	4b6e      	ldr	r3, [pc, #440]	; (8019654 <__ieee754_rem_pio2+0x34c>)
 801949c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80194a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194a4:	4543      	cmp	r3, r8
 80194a6:	d006      	beq.n	80194b6 <__ieee754_rem_pio2+0x1ae>
 80194a8:	4622      	mov	r2, r4
 80194aa:	462b      	mov	r3, r5
 80194ac:	4630      	mov	r0, r6
 80194ae:	4639      	mov	r1, r7
 80194b0:	f7e6 ff0a 	bl	80002c8 <__aeabi_dsub>
 80194b4:	e00f      	b.n	80194d6 <__ieee754_rem_pio2+0x1ce>
 80194b6:	462b      	mov	r3, r5
 80194b8:	4622      	mov	r2, r4
 80194ba:	4630      	mov	r0, r6
 80194bc:	4639      	mov	r1, r7
 80194be:	f7e6 ff03 	bl	80002c8 <__aeabi_dsub>
 80194c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80194c6:	9303      	str	r3, [sp, #12]
 80194c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80194cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80194d0:	f1b8 0f10 	cmp.w	r8, #16
 80194d4:	dc02      	bgt.n	80194dc <__ieee754_rem_pio2+0x1d4>
 80194d6:	e9ca 0100 	strd	r0, r1, [sl]
 80194da:	e039      	b.n	8019550 <__ieee754_rem_pio2+0x248>
 80194dc:	a34e      	add	r3, pc, #312	; (adr r3, 8019618 <__ieee754_rem_pio2+0x310>)
 80194de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e2:	ec51 0b18 	vmov	r0, r1, d8
 80194e6:	f7e7 f8a7 	bl	8000638 <__aeabi_dmul>
 80194ea:	4604      	mov	r4, r0
 80194ec:	460d      	mov	r5, r1
 80194ee:	4602      	mov	r2, r0
 80194f0:	460b      	mov	r3, r1
 80194f2:	4630      	mov	r0, r6
 80194f4:	4639      	mov	r1, r7
 80194f6:	f7e6 fee7 	bl	80002c8 <__aeabi_dsub>
 80194fa:	4602      	mov	r2, r0
 80194fc:	460b      	mov	r3, r1
 80194fe:	4680      	mov	r8, r0
 8019500:	4689      	mov	r9, r1
 8019502:	4630      	mov	r0, r6
 8019504:	4639      	mov	r1, r7
 8019506:	f7e6 fedf 	bl	80002c8 <__aeabi_dsub>
 801950a:	4622      	mov	r2, r4
 801950c:	462b      	mov	r3, r5
 801950e:	f7e6 fedb 	bl	80002c8 <__aeabi_dsub>
 8019512:	a343      	add	r3, pc, #268	; (adr r3, 8019620 <__ieee754_rem_pio2+0x318>)
 8019514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019518:	4604      	mov	r4, r0
 801951a:	460d      	mov	r5, r1
 801951c:	ec51 0b18 	vmov	r0, r1, d8
 8019520:	f7e7 f88a 	bl	8000638 <__aeabi_dmul>
 8019524:	4622      	mov	r2, r4
 8019526:	462b      	mov	r3, r5
 8019528:	f7e6 fece 	bl	80002c8 <__aeabi_dsub>
 801952c:	4602      	mov	r2, r0
 801952e:	460b      	mov	r3, r1
 8019530:	4604      	mov	r4, r0
 8019532:	460d      	mov	r5, r1
 8019534:	4640      	mov	r0, r8
 8019536:	4649      	mov	r1, r9
 8019538:	f7e6 fec6 	bl	80002c8 <__aeabi_dsub>
 801953c:	9a03      	ldr	r2, [sp, #12]
 801953e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019542:	1ad3      	subs	r3, r2, r3
 8019544:	2b31      	cmp	r3, #49	; 0x31
 8019546:	dc24      	bgt.n	8019592 <__ieee754_rem_pio2+0x28a>
 8019548:	e9ca 0100 	strd	r0, r1, [sl]
 801954c:	4646      	mov	r6, r8
 801954e:	464f      	mov	r7, r9
 8019550:	e9da 8900 	ldrd	r8, r9, [sl]
 8019554:	4630      	mov	r0, r6
 8019556:	4642      	mov	r2, r8
 8019558:	464b      	mov	r3, r9
 801955a:	4639      	mov	r1, r7
 801955c:	f7e6 feb4 	bl	80002c8 <__aeabi_dsub>
 8019560:	462b      	mov	r3, r5
 8019562:	4622      	mov	r2, r4
 8019564:	f7e6 feb0 	bl	80002c8 <__aeabi_dsub>
 8019568:	9b02      	ldr	r3, [sp, #8]
 801956a:	2b00      	cmp	r3, #0
 801956c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019570:	f6bf af0a 	bge.w	8019388 <__ieee754_rem_pio2+0x80>
 8019574:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019578:	f8ca 3004 	str.w	r3, [sl, #4]
 801957c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019580:	f8ca 8000 	str.w	r8, [sl]
 8019584:	f8ca 0008 	str.w	r0, [sl, #8]
 8019588:	f8ca 300c 	str.w	r3, [sl, #12]
 801958c:	f1cb 0b00 	rsb	fp, fp, #0
 8019590:	e6fa      	b.n	8019388 <__ieee754_rem_pio2+0x80>
 8019592:	a327      	add	r3, pc, #156	; (adr r3, 8019630 <__ieee754_rem_pio2+0x328>)
 8019594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019598:	ec51 0b18 	vmov	r0, r1, d8
 801959c:	f7e7 f84c 	bl	8000638 <__aeabi_dmul>
 80195a0:	4604      	mov	r4, r0
 80195a2:	460d      	mov	r5, r1
 80195a4:	4602      	mov	r2, r0
 80195a6:	460b      	mov	r3, r1
 80195a8:	4640      	mov	r0, r8
 80195aa:	4649      	mov	r1, r9
 80195ac:	f7e6 fe8c 	bl	80002c8 <__aeabi_dsub>
 80195b0:	4602      	mov	r2, r0
 80195b2:	460b      	mov	r3, r1
 80195b4:	4606      	mov	r6, r0
 80195b6:	460f      	mov	r7, r1
 80195b8:	4640      	mov	r0, r8
 80195ba:	4649      	mov	r1, r9
 80195bc:	f7e6 fe84 	bl	80002c8 <__aeabi_dsub>
 80195c0:	4622      	mov	r2, r4
 80195c2:	462b      	mov	r3, r5
 80195c4:	f7e6 fe80 	bl	80002c8 <__aeabi_dsub>
 80195c8:	a31b      	add	r3, pc, #108	; (adr r3, 8019638 <__ieee754_rem_pio2+0x330>)
 80195ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ce:	4604      	mov	r4, r0
 80195d0:	460d      	mov	r5, r1
 80195d2:	ec51 0b18 	vmov	r0, r1, d8
 80195d6:	f7e7 f82f 	bl	8000638 <__aeabi_dmul>
 80195da:	4622      	mov	r2, r4
 80195dc:	462b      	mov	r3, r5
 80195de:	f7e6 fe73 	bl	80002c8 <__aeabi_dsub>
 80195e2:	4604      	mov	r4, r0
 80195e4:	460d      	mov	r5, r1
 80195e6:	e75f      	b.n	80194a8 <__ieee754_rem_pio2+0x1a0>
 80195e8:	4b1b      	ldr	r3, [pc, #108]	; (8019658 <__ieee754_rem_pio2+0x350>)
 80195ea:	4598      	cmp	r8, r3
 80195ec:	dd36      	ble.n	801965c <__ieee754_rem_pio2+0x354>
 80195ee:	ee10 2a10 	vmov	r2, s0
 80195f2:	462b      	mov	r3, r5
 80195f4:	4620      	mov	r0, r4
 80195f6:	4629      	mov	r1, r5
 80195f8:	f7e6 fe66 	bl	80002c8 <__aeabi_dsub>
 80195fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019600:	e9ca 0100 	strd	r0, r1, [sl]
 8019604:	e694      	b.n	8019330 <__ieee754_rem_pio2+0x28>
 8019606:	bf00      	nop
 8019608:	54400000 	.word	0x54400000
 801960c:	3ff921fb 	.word	0x3ff921fb
 8019610:	1a626331 	.word	0x1a626331
 8019614:	3dd0b461 	.word	0x3dd0b461
 8019618:	1a600000 	.word	0x1a600000
 801961c:	3dd0b461 	.word	0x3dd0b461
 8019620:	2e037073 	.word	0x2e037073
 8019624:	3ba3198a 	.word	0x3ba3198a
 8019628:	6dc9c883 	.word	0x6dc9c883
 801962c:	3fe45f30 	.word	0x3fe45f30
 8019630:	2e000000 	.word	0x2e000000
 8019634:	3ba3198a 	.word	0x3ba3198a
 8019638:	252049c1 	.word	0x252049c1
 801963c:	397b839a 	.word	0x397b839a
 8019640:	3fe921fb 	.word	0x3fe921fb
 8019644:	4002d97b 	.word	0x4002d97b
 8019648:	3ff921fb 	.word	0x3ff921fb
 801964c:	413921fb 	.word	0x413921fb
 8019650:	3fe00000 	.word	0x3fe00000
 8019654:	08058ce0 	.word	0x08058ce0
 8019658:	7fefffff 	.word	0x7fefffff
 801965c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019660:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8019664:	ee10 0a10 	vmov	r0, s0
 8019668:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801966c:	ee10 6a10 	vmov	r6, s0
 8019670:	460f      	mov	r7, r1
 8019672:	f7e7 fa91 	bl	8000b98 <__aeabi_d2iz>
 8019676:	f7e6 ff75 	bl	8000564 <__aeabi_i2d>
 801967a:	4602      	mov	r2, r0
 801967c:	460b      	mov	r3, r1
 801967e:	4630      	mov	r0, r6
 8019680:	4639      	mov	r1, r7
 8019682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019686:	f7e6 fe1f 	bl	80002c8 <__aeabi_dsub>
 801968a:	4b23      	ldr	r3, [pc, #140]	; (8019718 <__ieee754_rem_pio2+0x410>)
 801968c:	2200      	movs	r2, #0
 801968e:	f7e6 ffd3 	bl	8000638 <__aeabi_dmul>
 8019692:	460f      	mov	r7, r1
 8019694:	4606      	mov	r6, r0
 8019696:	f7e7 fa7f 	bl	8000b98 <__aeabi_d2iz>
 801969a:	f7e6 ff63 	bl	8000564 <__aeabi_i2d>
 801969e:	4602      	mov	r2, r0
 80196a0:	460b      	mov	r3, r1
 80196a2:	4630      	mov	r0, r6
 80196a4:	4639      	mov	r1, r7
 80196a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80196aa:	f7e6 fe0d 	bl	80002c8 <__aeabi_dsub>
 80196ae:	4b1a      	ldr	r3, [pc, #104]	; (8019718 <__ieee754_rem_pio2+0x410>)
 80196b0:	2200      	movs	r2, #0
 80196b2:	f7e6 ffc1 	bl	8000638 <__aeabi_dmul>
 80196b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80196ba:	ad04      	add	r5, sp, #16
 80196bc:	f04f 0803 	mov.w	r8, #3
 80196c0:	46a9      	mov	r9, r5
 80196c2:	2600      	movs	r6, #0
 80196c4:	2700      	movs	r7, #0
 80196c6:	4632      	mov	r2, r6
 80196c8:	463b      	mov	r3, r7
 80196ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80196ce:	46c3      	mov	fp, r8
 80196d0:	3d08      	subs	r5, #8
 80196d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80196d6:	f7e7 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 80196da:	2800      	cmp	r0, #0
 80196dc:	d1f3      	bne.n	80196c6 <__ieee754_rem_pio2+0x3be>
 80196de:	4b0f      	ldr	r3, [pc, #60]	; (801971c <__ieee754_rem_pio2+0x414>)
 80196e0:	9301      	str	r3, [sp, #4]
 80196e2:	2302      	movs	r3, #2
 80196e4:	9300      	str	r3, [sp, #0]
 80196e6:	4622      	mov	r2, r4
 80196e8:	465b      	mov	r3, fp
 80196ea:	4651      	mov	r1, sl
 80196ec:	4648      	mov	r0, r9
 80196ee:	f000 f993 	bl	8019a18 <__kernel_rem_pio2>
 80196f2:	9b02      	ldr	r3, [sp, #8]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	4683      	mov	fp, r0
 80196f8:	f6bf ae46 	bge.w	8019388 <__ieee754_rem_pio2+0x80>
 80196fc:	e9da 2100 	ldrd	r2, r1, [sl]
 8019700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019704:	e9ca 2300 	strd	r2, r3, [sl]
 8019708:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801970c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019710:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019714:	e73a      	b.n	801958c <__ieee754_rem_pio2+0x284>
 8019716:	bf00      	nop
 8019718:	41700000 	.word	0x41700000
 801971c:	08058d60 	.word	0x08058d60

08019720 <__ieee754_sqrt>:
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	ec55 4b10 	vmov	r4, r5, d0
 8019728:	4e55      	ldr	r6, [pc, #340]	; (8019880 <__ieee754_sqrt+0x160>)
 801972a:	43ae      	bics	r6, r5
 801972c:	ee10 0a10 	vmov	r0, s0
 8019730:	ee10 3a10 	vmov	r3, s0
 8019734:	462a      	mov	r2, r5
 8019736:	4629      	mov	r1, r5
 8019738:	d110      	bne.n	801975c <__ieee754_sqrt+0x3c>
 801973a:	ee10 2a10 	vmov	r2, s0
 801973e:	462b      	mov	r3, r5
 8019740:	f7e6 ff7a 	bl	8000638 <__aeabi_dmul>
 8019744:	4602      	mov	r2, r0
 8019746:	460b      	mov	r3, r1
 8019748:	4620      	mov	r0, r4
 801974a:	4629      	mov	r1, r5
 801974c:	f7e6 fdbe 	bl	80002cc <__adddf3>
 8019750:	4604      	mov	r4, r0
 8019752:	460d      	mov	r5, r1
 8019754:	ec45 4b10 	vmov	d0, r4, r5
 8019758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801975c:	2d00      	cmp	r5, #0
 801975e:	dc10      	bgt.n	8019782 <__ieee754_sqrt+0x62>
 8019760:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019764:	4330      	orrs	r0, r6
 8019766:	d0f5      	beq.n	8019754 <__ieee754_sqrt+0x34>
 8019768:	b15d      	cbz	r5, 8019782 <__ieee754_sqrt+0x62>
 801976a:	ee10 2a10 	vmov	r2, s0
 801976e:	462b      	mov	r3, r5
 8019770:	ee10 0a10 	vmov	r0, s0
 8019774:	f7e6 fda8 	bl	80002c8 <__aeabi_dsub>
 8019778:	4602      	mov	r2, r0
 801977a:	460b      	mov	r3, r1
 801977c:	f7e7 f886 	bl	800088c <__aeabi_ddiv>
 8019780:	e7e6      	b.n	8019750 <__ieee754_sqrt+0x30>
 8019782:	1512      	asrs	r2, r2, #20
 8019784:	d074      	beq.n	8019870 <__ieee754_sqrt+0x150>
 8019786:	07d4      	lsls	r4, r2, #31
 8019788:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801978c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019794:	bf5e      	ittt	pl
 8019796:	0fda      	lsrpl	r2, r3, #31
 8019798:	005b      	lslpl	r3, r3, #1
 801979a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801979e:	2400      	movs	r4, #0
 80197a0:	0fda      	lsrs	r2, r3, #31
 80197a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80197a6:	107f      	asrs	r7, r7, #1
 80197a8:	005b      	lsls	r3, r3, #1
 80197aa:	2516      	movs	r5, #22
 80197ac:	4620      	mov	r0, r4
 80197ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80197b2:	1886      	adds	r6, r0, r2
 80197b4:	428e      	cmp	r6, r1
 80197b6:	bfde      	ittt	le
 80197b8:	1b89      	suble	r1, r1, r6
 80197ba:	18b0      	addle	r0, r6, r2
 80197bc:	18a4      	addle	r4, r4, r2
 80197be:	0049      	lsls	r1, r1, #1
 80197c0:	3d01      	subs	r5, #1
 80197c2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80197c6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80197ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197ce:	d1f0      	bne.n	80197b2 <__ieee754_sqrt+0x92>
 80197d0:	462a      	mov	r2, r5
 80197d2:	f04f 0e20 	mov.w	lr, #32
 80197d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80197da:	4281      	cmp	r1, r0
 80197dc:	eb06 0c05 	add.w	ip, r6, r5
 80197e0:	dc02      	bgt.n	80197e8 <__ieee754_sqrt+0xc8>
 80197e2:	d113      	bne.n	801980c <__ieee754_sqrt+0xec>
 80197e4:	459c      	cmp	ip, r3
 80197e6:	d811      	bhi.n	801980c <__ieee754_sqrt+0xec>
 80197e8:	f1bc 0f00 	cmp.w	ip, #0
 80197ec:	eb0c 0506 	add.w	r5, ip, r6
 80197f0:	da43      	bge.n	801987a <__ieee754_sqrt+0x15a>
 80197f2:	2d00      	cmp	r5, #0
 80197f4:	db41      	blt.n	801987a <__ieee754_sqrt+0x15a>
 80197f6:	f100 0801 	add.w	r8, r0, #1
 80197fa:	1a09      	subs	r1, r1, r0
 80197fc:	459c      	cmp	ip, r3
 80197fe:	bf88      	it	hi
 8019800:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019804:	eba3 030c 	sub.w	r3, r3, ip
 8019808:	4432      	add	r2, r6
 801980a:	4640      	mov	r0, r8
 801980c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019810:	f1be 0e01 	subs.w	lr, lr, #1
 8019814:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801981c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019820:	d1db      	bne.n	80197da <__ieee754_sqrt+0xba>
 8019822:	430b      	orrs	r3, r1
 8019824:	d006      	beq.n	8019834 <__ieee754_sqrt+0x114>
 8019826:	1c50      	adds	r0, r2, #1
 8019828:	bf13      	iteet	ne
 801982a:	3201      	addne	r2, #1
 801982c:	3401      	addeq	r4, #1
 801982e:	4672      	moveq	r2, lr
 8019830:	f022 0201 	bicne.w	r2, r2, #1
 8019834:	1063      	asrs	r3, r4, #1
 8019836:	0852      	lsrs	r2, r2, #1
 8019838:	07e1      	lsls	r1, r4, #31
 801983a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801983e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019842:	bf48      	it	mi
 8019844:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019848:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801984c:	4614      	mov	r4, r2
 801984e:	e781      	b.n	8019754 <__ieee754_sqrt+0x34>
 8019850:	0ad9      	lsrs	r1, r3, #11
 8019852:	3815      	subs	r0, #21
 8019854:	055b      	lsls	r3, r3, #21
 8019856:	2900      	cmp	r1, #0
 8019858:	d0fa      	beq.n	8019850 <__ieee754_sqrt+0x130>
 801985a:	02cd      	lsls	r5, r1, #11
 801985c:	d50a      	bpl.n	8019874 <__ieee754_sqrt+0x154>
 801985e:	f1c2 0420 	rsb	r4, r2, #32
 8019862:	fa23 f404 	lsr.w	r4, r3, r4
 8019866:	1e55      	subs	r5, r2, #1
 8019868:	4093      	lsls	r3, r2
 801986a:	4321      	orrs	r1, r4
 801986c:	1b42      	subs	r2, r0, r5
 801986e:	e78a      	b.n	8019786 <__ieee754_sqrt+0x66>
 8019870:	4610      	mov	r0, r2
 8019872:	e7f0      	b.n	8019856 <__ieee754_sqrt+0x136>
 8019874:	0049      	lsls	r1, r1, #1
 8019876:	3201      	adds	r2, #1
 8019878:	e7ef      	b.n	801985a <__ieee754_sqrt+0x13a>
 801987a:	4680      	mov	r8, r0
 801987c:	e7bd      	b.n	80197fa <__ieee754_sqrt+0xda>
 801987e:	bf00      	nop
 8019880:	7ff00000 	.word	0x7ff00000
 8019884:	00000000 	.word	0x00000000

08019888 <__kernel_cos>:
 8019888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801988c:	ec57 6b10 	vmov	r6, r7, d0
 8019890:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019894:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019898:	ed8d 1b00 	vstr	d1, [sp]
 801989c:	da07      	bge.n	80198ae <__kernel_cos+0x26>
 801989e:	ee10 0a10 	vmov	r0, s0
 80198a2:	4639      	mov	r1, r7
 80198a4:	f7e7 f978 	bl	8000b98 <__aeabi_d2iz>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	f000 8088 	beq.w	80199be <__kernel_cos+0x136>
 80198ae:	4632      	mov	r2, r6
 80198b0:	463b      	mov	r3, r7
 80198b2:	4630      	mov	r0, r6
 80198b4:	4639      	mov	r1, r7
 80198b6:	f7e6 febf 	bl	8000638 <__aeabi_dmul>
 80198ba:	4b51      	ldr	r3, [pc, #324]	; (8019a00 <__kernel_cos+0x178>)
 80198bc:	2200      	movs	r2, #0
 80198be:	4604      	mov	r4, r0
 80198c0:	460d      	mov	r5, r1
 80198c2:	f7e6 feb9 	bl	8000638 <__aeabi_dmul>
 80198c6:	a340      	add	r3, pc, #256	; (adr r3, 80199c8 <__kernel_cos+0x140>)
 80198c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198cc:	4682      	mov	sl, r0
 80198ce:	468b      	mov	fp, r1
 80198d0:	4620      	mov	r0, r4
 80198d2:	4629      	mov	r1, r5
 80198d4:	f7e6 feb0 	bl	8000638 <__aeabi_dmul>
 80198d8:	a33d      	add	r3, pc, #244	; (adr r3, 80199d0 <__kernel_cos+0x148>)
 80198da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198de:	f7e6 fcf5 	bl	80002cc <__adddf3>
 80198e2:	4622      	mov	r2, r4
 80198e4:	462b      	mov	r3, r5
 80198e6:	f7e6 fea7 	bl	8000638 <__aeabi_dmul>
 80198ea:	a33b      	add	r3, pc, #236	; (adr r3, 80199d8 <__kernel_cos+0x150>)
 80198ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f0:	f7e6 fcea 	bl	80002c8 <__aeabi_dsub>
 80198f4:	4622      	mov	r2, r4
 80198f6:	462b      	mov	r3, r5
 80198f8:	f7e6 fe9e 	bl	8000638 <__aeabi_dmul>
 80198fc:	a338      	add	r3, pc, #224	; (adr r3, 80199e0 <__kernel_cos+0x158>)
 80198fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019902:	f7e6 fce3 	bl	80002cc <__adddf3>
 8019906:	4622      	mov	r2, r4
 8019908:	462b      	mov	r3, r5
 801990a:	f7e6 fe95 	bl	8000638 <__aeabi_dmul>
 801990e:	a336      	add	r3, pc, #216	; (adr r3, 80199e8 <__kernel_cos+0x160>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	f7e6 fcd8 	bl	80002c8 <__aeabi_dsub>
 8019918:	4622      	mov	r2, r4
 801991a:	462b      	mov	r3, r5
 801991c:	f7e6 fe8c 	bl	8000638 <__aeabi_dmul>
 8019920:	a333      	add	r3, pc, #204	; (adr r3, 80199f0 <__kernel_cos+0x168>)
 8019922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019926:	f7e6 fcd1 	bl	80002cc <__adddf3>
 801992a:	4622      	mov	r2, r4
 801992c:	462b      	mov	r3, r5
 801992e:	f7e6 fe83 	bl	8000638 <__aeabi_dmul>
 8019932:	4622      	mov	r2, r4
 8019934:	462b      	mov	r3, r5
 8019936:	f7e6 fe7f 	bl	8000638 <__aeabi_dmul>
 801993a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801993e:	4604      	mov	r4, r0
 8019940:	460d      	mov	r5, r1
 8019942:	4630      	mov	r0, r6
 8019944:	4639      	mov	r1, r7
 8019946:	f7e6 fe77 	bl	8000638 <__aeabi_dmul>
 801994a:	460b      	mov	r3, r1
 801994c:	4602      	mov	r2, r0
 801994e:	4629      	mov	r1, r5
 8019950:	4620      	mov	r0, r4
 8019952:	f7e6 fcb9 	bl	80002c8 <__aeabi_dsub>
 8019956:	4b2b      	ldr	r3, [pc, #172]	; (8019a04 <__kernel_cos+0x17c>)
 8019958:	4598      	cmp	r8, r3
 801995a:	4606      	mov	r6, r0
 801995c:	460f      	mov	r7, r1
 801995e:	dc10      	bgt.n	8019982 <__kernel_cos+0xfa>
 8019960:	4602      	mov	r2, r0
 8019962:	460b      	mov	r3, r1
 8019964:	4650      	mov	r0, sl
 8019966:	4659      	mov	r1, fp
 8019968:	f7e6 fcae 	bl	80002c8 <__aeabi_dsub>
 801996c:	460b      	mov	r3, r1
 801996e:	4926      	ldr	r1, [pc, #152]	; (8019a08 <__kernel_cos+0x180>)
 8019970:	4602      	mov	r2, r0
 8019972:	2000      	movs	r0, #0
 8019974:	f7e6 fca8 	bl	80002c8 <__aeabi_dsub>
 8019978:	ec41 0b10 	vmov	d0, r0, r1
 801997c:	b003      	add	sp, #12
 801997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019982:	4b22      	ldr	r3, [pc, #136]	; (8019a0c <__kernel_cos+0x184>)
 8019984:	4920      	ldr	r1, [pc, #128]	; (8019a08 <__kernel_cos+0x180>)
 8019986:	4598      	cmp	r8, r3
 8019988:	bfcc      	ite	gt
 801998a:	4d21      	ldrgt	r5, [pc, #132]	; (8019a10 <__kernel_cos+0x188>)
 801998c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019990:	2400      	movs	r4, #0
 8019992:	4622      	mov	r2, r4
 8019994:	462b      	mov	r3, r5
 8019996:	2000      	movs	r0, #0
 8019998:	f7e6 fc96 	bl	80002c8 <__aeabi_dsub>
 801999c:	4622      	mov	r2, r4
 801999e:	4680      	mov	r8, r0
 80199a0:	4689      	mov	r9, r1
 80199a2:	462b      	mov	r3, r5
 80199a4:	4650      	mov	r0, sl
 80199a6:	4659      	mov	r1, fp
 80199a8:	f7e6 fc8e 	bl	80002c8 <__aeabi_dsub>
 80199ac:	4632      	mov	r2, r6
 80199ae:	463b      	mov	r3, r7
 80199b0:	f7e6 fc8a 	bl	80002c8 <__aeabi_dsub>
 80199b4:	4602      	mov	r2, r0
 80199b6:	460b      	mov	r3, r1
 80199b8:	4640      	mov	r0, r8
 80199ba:	4649      	mov	r1, r9
 80199bc:	e7da      	b.n	8019974 <__kernel_cos+0xec>
 80199be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80199f8 <__kernel_cos+0x170>
 80199c2:	e7db      	b.n	801997c <__kernel_cos+0xf4>
 80199c4:	f3af 8000 	nop.w
 80199c8:	be8838d4 	.word	0xbe8838d4
 80199cc:	bda8fae9 	.word	0xbda8fae9
 80199d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80199d4:	3e21ee9e 	.word	0x3e21ee9e
 80199d8:	809c52ad 	.word	0x809c52ad
 80199dc:	3e927e4f 	.word	0x3e927e4f
 80199e0:	19cb1590 	.word	0x19cb1590
 80199e4:	3efa01a0 	.word	0x3efa01a0
 80199e8:	16c15177 	.word	0x16c15177
 80199ec:	3f56c16c 	.word	0x3f56c16c
 80199f0:	5555554c 	.word	0x5555554c
 80199f4:	3fa55555 	.word	0x3fa55555
 80199f8:	00000000 	.word	0x00000000
 80199fc:	3ff00000 	.word	0x3ff00000
 8019a00:	3fe00000 	.word	0x3fe00000
 8019a04:	3fd33332 	.word	0x3fd33332
 8019a08:	3ff00000 	.word	0x3ff00000
 8019a0c:	3fe90000 	.word	0x3fe90000
 8019a10:	3fd20000 	.word	0x3fd20000
 8019a14:	00000000 	.word	0x00000000

08019a18 <__kernel_rem_pio2>:
 8019a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a1c:	ed2d 8b02 	vpush	{d8}
 8019a20:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019a24:	f112 0f14 	cmn.w	r2, #20
 8019a28:	9308      	str	r3, [sp, #32]
 8019a2a:	9101      	str	r1, [sp, #4]
 8019a2c:	4bc4      	ldr	r3, [pc, #784]	; (8019d40 <__kernel_rem_pio2+0x328>)
 8019a2e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019a30:	900b      	str	r0, [sp, #44]	; 0x2c
 8019a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019a36:	9302      	str	r3, [sp, #8]
 8019a38:	9b08      	ldr	r3, [sp, #32]
 8019a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a3e:	bfa8      	it	ge
 8019a40:	1ed4      	subge	r4, r2, #3
 8019a42:	9306      	str	r3, [sp, #24]
 8019a44:	bfb2      	itee	lt
 8019a46:	2400      	movlt	r4, #0
 8019a48:	2318      	movge	r3, #24
 8019a4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8019a4e:	f06f 0317 	mvn.w	r3, #23
 8019a52:	fb04 3303 	mla	r3, r4, r3, r3
 8019a56:	eb03 0a02 	add.w	sl, r3, r2
 8019a5a:	9b02      	ldr	r3, [sp, #8]
 8019a5c:	9a06      	ldr	r2, [sp, #24]
 8019a5e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8019d30 <__kernel_rem_pio2+0x318>
 8019a62:	eb03 0802 	add.w	r8, r3, r2
 8019a66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019a68:	1aa7      	subs	r7, r4, r2
 8019a6a:	ae22      	add	r6, sp, #136	; 0x88
 8019a6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019a70:	2500      	movs	r5, #0
 8019a72:	4545      	cmp	r5, r8
 8019a74:	dd13      	ble.n	8019a9e <__kernel_rem_pio2+0x86>
 8019a76:	9b08      	ldr	r3, [sp, #32]
 8019a78:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8019d30 <__kernel_rem_pio2+0x318>
 8019a7c:	aa22      	add	r2, sp, #136	; 0x88
 8019a7e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019a82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8019a86:	f04f 0800 	mov.w	r8, #0
 8019a8a:	9b02      	ldr	r3, [sp, #8]
 8019a8c:	4598      	cmp	r8, r3
 8019a8e:	dc2f      	bgt.n	8019af0 <__kernel_rem_pio2+0xd8>
 8019a90:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019a94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019a98:	462f      	mov	r7, r5
 8019a9a:	2600      	movs	r6, #0
 8019a9c:	e01b      	b.n	8019ad6 <__kernel_rem_pio2+0xbe>
 8019a9e:	42ef      	cmn	r7, r5
 8019aa0:	d407      	bmi.n	8019ab2 <__kernel_rem_pio2+0x9a>
 8019aa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019aa6:	f7e6 fd5d 	bl	8000564 <__aeabi_i2d>
 8019aaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019aae:	3501      	adds	r5, #1
 8019ab0:	e7df      	b.n	8019a72 <__kernel_rem_pio2+0x5a>
 8019ab2:	ec51 0b18 	vmov	r0, r1, d8
 8019ab6:	e7f8      	b.n	8019aaa <__kernel_rem_pio2+0x92>
 8019ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019abc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019ac0:	f7e6 fdba 	bl	8000638 <__aeabi_dmul>
 8019ac4:	4602      	mov	r2, r0
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019acc:	f7e6 fbfe 	bl	80002cc <__adddf3>
 8019ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ad4:	3601      	adds	r6, #1
 8019ad6:	9b06      	ldr	r3, [sp, #24]
 8019ad8:	429e      	cmp	r6, r3
 8019ada:	f1a7 0708 	sub.w	r7, r7, #8
 8019ade:	ddeb      	ble.n	8019ab8 <__kernel_rem_pio2+0xa0>
 8019ae0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019ae4:	f108 0801 	add.w	r8, r8, #1
 8019ae8:	ecab 7b02 	vstmia	fp!, {d7}
 8019aec:	3508      	adds	r5, #8
 8019aee:	e7cc      	b.n	8019a8a <__kernel_rem_pio2+0x72>
 8019af0:	9b02      	ldr	r3, [sp, #8]
 8019af2:	aa0e      	add	r2, sp, #56	; 0x38
 8019af4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019af8:	930d      	str	r3, [sp, #52]	; 0x34
 8019afa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019afc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019b00:	9c02      	ldr	r4, [sp, #8]
 8019b02:	930c      	str	r3, [sp, #48]	; 0x30
 8019b04:	00e3      	lsls	r3, r4, #3
 8019b06:	930a      	str	r3, [sp, #40]	; 0x28
 8019b08:	ab9a      	add	r3, sp, #616	; 0x268
 8019b0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019b0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019b12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019b16:	ab72      	add	r3, sp, #456	; 0x1c8
 8019b18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8019b1c:	46c3      	mov	fp, r8
 8019b1e:	46a1      	mov	r9, r4
 8019b20:	f1b9 0f00 	cmp.w	r9, #0
 8019b24:	f1a5 0508 	sub.w	r5, r5, #8
 8019b28:	dc77      	bgt.n	8019c1a <__kernel_rem_pio2+0x202>
 8019b2a:	ec47 6b10 	vmov	d0, r6, r7
 8019b2e:	4650      	mov	r0, sl
 8019b30:	f000 fe52 	bl	801a7d8 <scalbn>
 8019b34:	ec57 6b10 	vmov	r6, r7, d0
 8019b38:	2200      	movs	r2, #0
 8019b3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019b3e:	ee10 0a10 	vmov	r0, s0
 8019b42:	4639      	mov	r1, r7
 8019b44:	f7e6 fd78 	bl	8000638 <__aeabi_dmul>
 8019b48:	ec41 0b10 	vmov	d0, r0, r1
 8019b4c:	f000 fdc4 	bl	801a6d8 <floor>
 8019b50:	4b7c      	ldr	r3, [pc, #496]	; (8019d44 <__kernel_rem_pio2+0x32c>)
 8019b52:	ec51 0b10 	vmov	r0, r1, d0
 8019b56:	2200      	movs	r2, #0
 8019b58:	f7e6 fd6e 	bl	8000638 <__aeabi_dmul>
 8019b5c:	4602      	mov	r2, r0
 8019b5e:	460b      	mov	r3, r1
 8019b60:	4630      	mov	r0, r6
 8019b62:	4639      	mov	r1, r7
 8019b64:	f7e6 fbb0 	bl	80002c8 <__aeabi_dsub>
 8019b68:	460f      	mov	r7, r1
 8019b6a:	4606      	mov	r6, r0
 8019b6c:	f7e7 f814 	bl	8000b98 <__aeabi_d2iz>
 8019b70:	9004      	str	r0, [sp, #16]
 8019b72:	f7e6 fcf7 	bl	8000564 <__aeabi_i2d>
 8019b76:	4602      	mov	r2, r0
 8019b78:	460b      	mov	r3, r1
 8019b7a:	4630      	mov	r0, r6
 8019b7c:	4639      	mov	r1, r7
 8019b7e:	f7e6 fba3 	bl	80002c8 <__aeabi_dsub>
 8019b82:	f1ba 0f00 	cmp.w	sl, #0
 8019b86:	4606      	mov	r6, r0
 8019b88:	460f      	mov	r7, r1
 8019b8a:	dd6d      	ble.n	8019c68 <__kernel_rem_pio2+0x250>
 8019b8c:	1e62      	subs	r2, r4, #1
 8019b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8019b90:	9d04      	ldr	r5, [sp, #16]
 8019b92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019b96:	f1ca 0118 	rsb	r1, sl, #24
 8019b9a:	fa40 f301 	asr.w	r3, r0, r1
 8019b9e:	441d      	add	r5, r3
 8019ba0:	408b      	lsls	r3, r1
 8019ba2:	1ac0      	subs	r0, r0, r3
 8019ba4:	ab0e      	add	r3, sp, #56	; 0x38
 8019ba6:	9504      	str	r5, [sp, #16]
 8019ba8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019bac:	f1ca 0317 	rsb	r3, sl, #23
 8019bb0:	fa40 fb03 	asr.w	fp, r0, r3
 8019bb4:	f1bb 0f00 	cmp.w	fp, #0
 8019bb8:	dd65      	ble.n	8019c86 <__kernel_rem_pio2+0x26e>
 8019bba:	9b04      	ldr	r3, [sp, #16]
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	3301      	adds	r3, #1
 8019bc0:	9304      	str	r3, [sp, #16]
 8019bc2:	4615      	mov	r5, r2
 8019bc4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019bc8:	4294      	cmp	r4, r2
 8019bca:	f300 809c 	bgt.w	8019d06 <__kernel_rem_pio2+0x2ee>
 8019bce:	f1ba 0f00 	cmp.w	sl, #0
 8019bd2:	dd07      	ble.n	8019be4 <__kernel_rem_pio2+0x1cc>
 8019bd4:	f1ba 0f01 	cmp.w	sl, #1
 8019bd8:	f000 80c0 	beq.w	8019d5c <__kernel_rem_pio2+0x344>
 8019bdc:	f1ba 0f02 	cmp.w	sl, #2
 8019be0:	f000 80c6 	beq.w	8019d70 <__kernel_rem_pio2+0x358>
 8019be4:	f1bb 0f02 	cmp.w	fp, #2
 8019be8:	d14d      	bne.n	8019c86 <__kernel_rem_pio2+0x26e>
 8019bea:	4632      	mov	r2, r6
 8019bec:	463b      	mov	r3, r7
 8019bee:	4956      	ldr	r1, [pc, #344]	; (8019d48 <__kernel_rem_pio2+0x330>)
 8019bf0:	2000      	movs	r0, #0
 8019bf2:	f7e6 fb69 	bl	80002c8 <__aeabi_dsub>
 8019bf6:	4606      	mov	r6, r0
 8019bf8:	460f      	mov	r7, r1
 8019bfa:	2d00      	cmp	r5, #0
 8019bfc:	d043      	beq.n	8019c86 <__kernel_rem_pio2+0x26e>
 8019bfe:	4650      	mov	r0, sl
 8019c00:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8019d38 <__kernel_rem_pio2+0x320>
 8019c04:	f000 fde8 	bl	801a7d8 <scalbn>
 8019c08:	4630      	mov	r0, r6
 8019c0a:	4639      	mov	r1, r7
 8019c0c:	ec53 2b10 	vmov	r2, r3, d0
 8019c10:	f7e6 fb5a 	bl	80002c8 <__aeabi_dsub>
 8019c14:	4606      	mov	r6, r0
 8019c16:	460f      	mov	r7, r1
 8019c18:	e035      	b.n	8019c86 <__kernel_rem_pio2+0x26e>
 8019c1a:	4b4c      	ldr	r3, [pc, #304]	; (8019d4c <__kernel_rem_pio2+0x334>)
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	4630      	mov	r0, r6
 8019c20:	4639      	mov	r1, r7
 8019c22:	f7e6 fd09 	bl	8000638 <__aeabi_dmul>
 8019c26:	f7e6 ffb7 	bl	8000b98 <__aeabi_d2iz>
 8019c2a:	f7e6 fc9b 	bl	8000564 <__aeabi_i2d>
 8019c2e:	4602      	mov	r2, r0
 8019c30:	460b      	mov	r3, r1
 8019c32:	ec43 2b18 	vmov	d8, r2, r3
 8019c36:	4b46      	ldr	r3, [pc, #280]	; (8019d50 <__kernel_rem_pio2+0x338>)
 8019c38:	2200      	movs	r2, #0
 8019c3a:	f7e6 fcfd 	bl	8000638 <__aeabi_dmul>
 8019c3e:	4602      	mov	r2, r0
 8019c40:	460b      	mov	r3, r1
 8019c42:	4630      	mov	r0, r6
 8019c44:	4639      	mov	r1, r7
 8019c46:	f7e6 fb3f 	bl	80002c8 <__aeabi_dsub>
 8019c4a:	f7e6 ffa5 	bl	8000b98 <__aeabi_d2iz>
 8019c4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019c52:	f84b 0b04 	str.w	r0, [fp], #4
 8019c56:	ec51 0b18 	vmov	r0, r1, d8
 8019c5a:	f7e6 fb37 	bl	80002cc <__adddf3>
 8019c5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c62:	4606      	mov	r6, r0
 8019c64:	460f      	mov	r7, r1
 8019c66:	e75b      	b.n	8019b20 <__kernel_rem_pio2+0x108>
 8019c68:	d106      	bne.n	8019c78 <__kernel_rem_pio2+0x260>
 8019c6a:	1e63      	subs	r3, r4, #1
 8019c6c:	aa0e      	add	r2, sp, #56	; 0x38
 8019c6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019c72:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8019c76:	e79d      	b.n	8019bb4 <__kernel_rem_pio2+0x19c>
 8019c78:	4b36      	ldr	r3, [pc, #216]	; (8019d54 <__kernel_rem_pio2+0x33c>)
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	f7e6 ff62 	bl	8000b44 <__aeabi_dcmpge>
 8019c80:	2800      	cmp	r0, #0
 8019c82:	d13d      	bne.n	8019d00 <__kernel_rem_pio2+0x2e8>
 8019c84:	4683      	mov	fp, r0
 8019c86:	2200      	movs	r2, #0
 8019c88:	2300      	movs	r3, #0
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	4639      	mov	r1, r7
 8019c8e:	f7e6 ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 8019c92:	2800      	cmp	r0, #0
 8019c94:	f000 80c0 	beq.w	8019e18 <__kernel_rem_pio2+0x400>
 8019c98:	1e65      	subs	r5, r4, #1
 8019c9a:	462b      	mov	r3, r5
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	9902      	ldr	r1, [sp, #8]
 8019ca0:	428b      	cmp	r3, r1
 8019ca2:	da6c      	bge.n	8019d7e <__kernel_rem_pio2+0x366>
 8019ca4:	2a00      	cmp	r2, #0
 8019ca6:	f000 8089 	beq.w	8019dbc <__kernel_rem_pio2+0x3a4>
 8019caa:	ab0e      	add	r3, sp, #56	; 0x38
 8019cac:	f1aa 0a18 	sub.w	sl, sl, #24
 8019cb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	f000 80ad 	beq.w	8019e14 <__kernel_rem_pio2+0x3fc>
 8019cba:	4650      	mov	r0, sl
 8019cbc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8019d38 <__kernel_rem_pio2+0x320>
 8019cc0:	f000 fd8a 	bl	801a7d8 <scalbn>
 8019cc4:	ab9a      	add	r3, sp, #616	; 0x268
 8019cc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019cca:	ec57 6b10 	vmov	r6, r7, d0
 8019cce:	00ec      	lsls	r4, r5, #3
 8019cd0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8019cd4:	46aa      	mov	sl, r5
 8019cd6:	f1ba 0f00 	cmp.w	sl, #0
 8019cda:	f280 80d6 	bge.w	8019e8a <__kernel_rem_pio2+0x472>
 8019cde:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8019d30 <__kernel_rem_pio2+0x318>
 8019ce2:	462e      	mov	r6, r5
 8019ce4:	2e00      	cmp	r6, #0
 8019ce6:	f2c0 8104 	blt.w	8019ef2 <__kernel_rem_pio2+0x4da>
 8019cea:	ab72      	add	r3, sp, #456	; 0x1c8
 8019cec:	ed8d 8b06 	vstr	d8, [sp, #24]
 8019cf0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8019d58 <__kernel_rem_pio2+0x340>
 8019cf4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8019cf8:	f04f 0800 	mov.w	r8, #0
 8019cfc:	1baf      	subs	r7, r5, r6
 8019cfe:	e0ea      	b.n	8019ed6 <__kernel_rem_pio2+0x4be>
 8019d00:	f04f 0b02 	mov.w	fp, #2
 8019d04:	e759      	b.n	8019bba <__kernel_rem_pio2+0x1a2>
 8019d06:	f8d8 3000 	ldr.w	r3, [r8]
 8019d0a:	b955      	cbnz	r5, 8019d22 <__kernel_rem_pio2+0x30a>
 8019d0c:	b123      	cbz	r3, 8019d18 <__kernel_rem_pio2+0x300>
 8019d0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8019d12:	f8c8 3000 	str.w	r3, [r8]
 8019d16:	2301      	movs	r3, #1
 8019d18:	3201      	adds	r2, #1
 8019d1a:	f108 0804 	add.w	r8, r8, #4
 8019d1e:	461d      	mov	r5, r3
 8019d20:	e752      	b.n	8019bc8 <__kernel_rem_pio2+0x1b0>
 8019d22:	1acb      	subs	r3, r1, r3
 8019d24:	f8c8 3000 	str.w	r3, [r8]
 8019d28:	462b      	mov	r3, r5
 8019d2a:	e7f5      	b.n	8019d18 <__kernel_rem_pio2+0x300>
 8019d2c:	f3af 8000 	nop.w
	...
 8019d3c:	3ff00000 	.word	0x3ff00000
 8019d40:	08058ea8 	.word	0x08058ea8
 8019d44:	40200000 	.word	0x40200000
 8019d48:	3ff00000 	.word	0x3ff00000
 8019d4c:	3e700000 	.word	0x3e700000
 8019d50:	41700000 	.word	0x41700000
 8019d54:	3fe00000 	.word	0x3fe00000
 8019d58:	08058e68 	.word	0x08058e68
 8019d5c:	1e62      	subs	r2, r4, #1
 8019d5e:	ab0e      	add	r3, sp, #56	; 0x38
 8019d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019d68:	a90e      	add	r1, sp, #56	; 0x38
 8019d6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8019d6e:	e739      	b.n	8019be4 <__kernel_rem_pio2+0x1cc>
 8019d70:	1e62      	subs	r2, r4, #1
 8019d72:	ab0e      	add	r3, sp, #56	; 0x38
 8019d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019d7c:	e7f4      	b.n	8019d68 <__kernel_rem_pio2+0x350>
 8019d7e:	a90e      	add	r1, sp, #56	; 0x38
 8019d80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8019d84:	3b01      	subs	r3, #1
 8019d86:	430a      	orrs	r2, r1
 8019d88:	e789      	b.n	8019c9e <__kernel_rem_pio2+0x286>
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8019d90:	2900      	cmp	r1, #0
 8019d92:	d0fa      	beq.n	8019d8a <__kernel_rem_pio2+0x372>
 8019d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d96:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8019d9a:	446a      	add	r2, sp
 8019d9c:	3a98      	subs	r2, #152	; 0x98
 8019d9e:	920a      	str	r2, [sp, #40]	; 0x28
 8019da0:	9a08      	ldr	r2, [sp, #32]
 8019da2:	18e3      	adds	r3, r4, r3
 8019da4:	18a5      	adds	r5, r4, r2
 8019da6:	aa22      	add	r2, sp, #136	; 0x88
 8019da8:	f104 0801 	add.w	r8, r4, #1
 8019dac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019db0:	9304      	str	r3, [sp, #16]
 8019db2:	9b04      	ldr	r3, [sp, #16]
 8019db4:	4543      	cmp	r3, r8
 8019db6:	da04      	bge.n	8019dc2 <__kernel_rem_pio2+0x3aa>
 8019db8:	461c      	mov	r4, r3
 8019dba:	e6a3      	b.n	8019b04 <__kernel_rem_pio2+0xec>
 8019dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	e7e4      	b.n	8019d8c <__kernel_rem_pio2+0x374>
 8019dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019dc4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019dc8:	f7e6 fbcc 	bl	8000564 <__aeabi_i2d>
 8019dcc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8019dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019dd2:	46ab      	mov	fp, r5
 8019dd4:	461c      	mov	r4, r3
 8019dd6:	f04f 0900 	mov.w	r9, #0
 8019dda:	2600      	movs	r6, #0
 8019ddc:	2700      	movs	r7, #0
 8019dde:	9b06      	ldr	r3, [sp, #24]
 8019de0:	4599      	cmp	r9, r3
 8019de2:	dd06      	ble.n	8019df2 <__kernel_rem_pio2+0x3da>
 8019de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019de6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8019dea:	f108 0801 	add.w	r8, r8, #1
 8019dee:	930a      	str	r3, [sp, #40]	; 0x28
 8019df0:	e7df      	b.n	8019db2 <__kernel_rem_pio2+0x39a>
 8019df2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8019df6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019dfa:	f7e6 fc1d 	bl	8000638 <__aeabi_dmul>
 8019dfe:	4602      	mov	r2, r0
 8019e00:	460b      	mov	r3, r1
 8019e02:	4630      	mov	r0, r6
 8019e04:	4639      	mov	r1, r7
 8019e06:	f7e6 fa61 	bl	80002cc <__adddf3>
 8019e0a:	f109 0901 	add.w	r9, r9, #1
 8019e0e:	4606      	mov	r6, r0
 8019e10:	460f      	mov	r7, r1
 8019e12:	e7e4      	b.n	8019dde <__kernel_rem_pio2+0x3c6>
 8019e14:	3d01      	subs	r5, #1
 8019e16:	e748      	b.n	8019caa <__kernel_rem_pio2+0x292>
 8019e18:	ec47 6b10 	vmov	d0, r6, r7
 8019e1c:	f1ca 0000 	rsb	r0, sl, #0
 8019e20:	f000 fcda 	bl	801a7d8 <scalbn>
 8019e24:	ec57 6b10 	vmov	r6, r7, d0
 8019e28:	4ba0      	ldr	r3, [pc, #640]	; (801a0ac <__kernel_rem_pio2+0x694>)
 8019e2a:	ee10 0a10 	vmov	r0, s0
 8019e2e:	2200      	movs	r2, #0
 8019e30:	4639      	mov	r1, r7
 8019e32:	f7e6 fe87 	bl	8000b44 <__aeabi_dcmpge>
 8019e36:	b1f8      	cbz	r0, 8019e78 <__kernel_rem_pio2+0x460>
 8019e38:	4b9d      	ldr	r3, [pc, #628]	; (801a0b0 <__kernel_rem_pio2+0x698>)
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	4630      	mov	r0, r6
 8019e3e:	4639      	mov	r1, r7
 8019e40:	f7e6 fbfa 	bl	8000638 <__aeabi_dmul>
 8019e44:	f7e6 fea8 	bl	8000b98 <__aeabi_d2iz>
 8019e48:	4680      	mov	r8, r0
 8019e4a:	f7e6 fb8b 	bl	8000564 <__aeabi_i2d>
 8019e4e:	4b97      	ldr	r3, [pc, #604]	; (801a0ac <__kernel_rem_pio2+0x694>)
 8019e50:	2200      	movs	r2, #0
 8019e52:	f7e6 fbf1 	bl	8000638 <__aeabi_dmul>
 8019e56:	460b      	mov	r3, r1
 8019e58:	4602      	mov	r2, r0
 8019e5a:	4639      	mov	r1, r7
 8019e5c:	4630      	mov	r0, r6
 8019e5e:	f7e6 fa33 	bl	80002c8 <__aeabi_dsub>
 8019e62:	f7e6 fe99 	bl	8000b98 <__aeabi_d2iz>
 8019e66:	1c65      	adds	r5, r4, #1
 8019e68:	ab0e      	add	r3, sp, #56	; 0x38
 8019e6a:	f10a 0a18 	add.w	sl, sl, #24
 8019e6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019e72:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8019e76:	e720      	b.n	8019cba <__kernel_rem_pio2+0x2a2>
 8019e78:	4630      	mov	r0, r6
 8019e7a:	4639      	mov	r1, r7
 8019e7c:	f7e6 fe8c 	bl	8000b98 <__aeabi_d2iz>
 8019e80:	ab0e      	add	r3, sp, #56	; 0x38
 8019e82:	4625      	mov	r5, r4
 8019e84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019e88:	e717      	b.n	8019cba <__kernel_rem_pio2+0x2a2>
 8019e8a:	ab0e      	add	r3, sp, #56	; 0x38
 8019e8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8019e90:	f7e6 fb68 	bl	8000564 <__aeabi_i2d>
 8019e94:	4632      	mov	r2, r6
 8019e96:	463b      	mov	r3, r7
 8019e98:	f7e6 fbce 	bl	8000638 <__aeabi_dmul>
 8019e9c:	4b84      	ldr	r3, [pc, #528]	; (801a0b0 <__kernel_rem_pio2+0x698>)
 8019e9e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	4630      	mov	r0, r6
 8019ea6:	4639      	mov	r1, r7
 8019ea8:	f7e6 fbc6 	bl	8000638 <__aeabi_dmul>
 8019eac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019eb0:	4606      	mov	r6, r0
 8019eb2:	460f      	mov	r7, r1
 8019eb4:	e70f      	b.n	8019cd6 <__kernel_rem_pio2+0x2be>
 8019eb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019eba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019ebe:	f7e6 fbbb 	bl	8000638 <__aeabi_dmul>
 8019ec2:	4602      	mov	r2, r0
 8019ec4:	460b      	mov	r3, r1
 8019ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019eca:	f7e6 f9ff 	bl	80002cc <__adddf3>
 8019ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019ed2:	f108 0801 	add.w	r8, r8, #1
 8019ed6:	9b02      	ldr	r3, [sp, #8]
 8019ed8:	4598      	cmp	r8, r3
 8019eda:	dc01      	bgt.n	8019ee0 <__kernel_rem_pio2+0x4c8>
 8019edc:	45b8      	cmp	r8, r7
 8019ede:	ddea      	ble.n	8019eb6 <__kernel_rem_pio2+0x49e>
 8019ee0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8019ee4:	ab4a      	add	r3, sp, #296	; 0x128
 8019ee6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019eea:	ed87 7b00 	vstr	d7, [r7]
 8019eee:	3e01      	subs	r6, #1
 8019ef0:	e6f8      	b.n	8019ce4 <__kernel_rem_pio2+0x2cc>
 8019ef2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8019ef4:	2b02      	cmp	r3, #2
 8019ef6:	dc0b      	bgt.n	8019f10 <__kernel_rem_pio2+0x4f8>
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	dc35      	bgt.n	8019f68 <__kernel_rem_pio2+0x550>
 8019efc:	d059      	beq.n	8019fb2 <__kernel_rem_pio2+0x59a>
 8019efe:	9b04      	ldr	r3, [sp, #16]
 8019f00:	f003 0007 	and.w	r0, r3, #7
 8019f04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8019f08:	ecbd 8b02 	vpop	{d8}
 8019f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8019f12:	2b03      	cmp	r3, #3
 8019f14:	d1f3      	bne.n	8019efe <__kernel_rem_pio2+0x4e6>
 8019f16:	ab4a      	add	r3, sp, #296	; 0x128
 8019f18:	4423      	add	r3, r4
 8019f1a:	9306      	str	r3, [sp, #24]
 8019f1c:	461c      	mov	r4, r3
 8019f1e:	469a      	mov	sl, r3
 8019f20:	9502      	str	r5, [sp, #8]
 8019f22:	9b02      	ldr	r3, [sp, #8]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	f1aa 0a08 	sub.w	sl, sl, #8
 8019f2a:	dc6b      	bgt.n	801a004 <__kernel_rem_pio2+0x5ec>
 8019f2c:	46aa      	mov	sl, r5
 8019f2e:	f1ba 0f01 	cmp.w	sl, #1
 8019f32:	f1a4 0408 	sub.w	r4, r4, #8
 8019f36:	f300 8085 	bgt.w	801a044 <__kernel_rem_pio2+0x62c>
 8019f3a:	9c06      	ldr	r4, [sp, #24]
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	3408      	adds	r4, #8
 8019f40:	2100      	movs	r1, #0
 8019f42:	2d01      	cmp	r5, #1
 8019f44:	f300 809d 	bgt.w	801a082 <__kernel_rem_pio2+0x66a>
 8019f48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8019f4c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8019f50:	f1bb 0f00 	cmp.w	fp, #0
 8019f54:	f040 809b 	bne.w	801a08e <__kernel_rem_pio2+0x676>
 8019f58:	9b01      	ldr	r3, [sp, #4]
 8019f5a:	e9c3 5600 	strd	r5, r6, [r3]
 8019f5e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8019f62:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019f66:	e7ca      	b.n	8019efe <__kernel_rem_pio2+0x4e6>
 8019f68:	3408      	adds	r4, #8
 8019f6a:	ab4a      	add	r3, sp, #296	; 0x128
 8019f6c:	441c      	add	r4, r3
 8019f6e:	462e      	mov	r6, r5
 8019f70:	2000      	movs	r0, #0
 8019f72:	2100      	movs	r1, #0
 8019f74:	2e00      	cmp	r6, #0
 8019f76:	da36      	bge.n	8019fe6 <__kernel_rem_pio2+0x5ce>
 8019f78:	f1bb 0f00 	cmp.w	fp, #0
 8019f7c:	d039      	beq.n	8019ff2 <__kernel_rem_pio2+0x5da>
 8019f7e:	4602      	mov	r2, r0
 8019f80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f84:	9c01      	ldr	r4, [sp, #4]
 8019f86:	e9c4 2300 	strd	r2, r3, [r4]
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	460b      	mov	r3, r1
 8019f8e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8019f92:	f7e6 f999 	bl	80002c8 <__aeabi_dsub>
 8019f96:	ae4c      	add	r6, sp, #304	; 0x130
 8019f98:	2401      	movs	r4, #1
 8019f9a:	42a5      	cmp	r5, r4
 8019f9c:	da2c      	bge.n	8019ff8 <__kernel_rem_pio2+0x5e0>
 8019f9e:	f1bb 0f00 	cmp.w	fp, #0
 8019fa2:	d002      	beq.n	8019faa <__kernel_rem_pio2+0x592>
 8019fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019fa8:	4619      	mov	r1, r3
 8019faa:	9b01      	ldr	r3, [sp, #4]
 8019fac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019fb0:	e7a5      	b.n	8019efe <__kernel_rem_pio2+0x4e6>
 8019fb2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8019fb6:	eb0d 0403 	add.w	r4, sp, r3
 8019fba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8019fbe:	2000      	movs	r0, #0
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	2d00      	cmp	r5, #0
 8019fc4:	da09      	bge.n	8019fda <__kernel_rem_pio2+0x5c2>
 8019fc6:	f1bb 0f00 	cmp.w	fp, #0
 8019fca:	d002      	beq.n	8019fd2 <__kernel_rem_pio2+0x5ba>
 8019fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019fd0:	4619      	mov	r1, r3
 8019fd2:	9b01      	ldr	r3, [sp, #4]
 8019fd4:	e9c3 0100 	strd	r0, r1, [r3]
 8019fd8:	e791      	b.n	8019efe <__kernel_rem_pio2+0x4e6>
 8019fda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019fde:	f7e6 f975 	bl	80002cc <__adddf3>
 8019fe2:	3d01      	subs	r5, #1
 8019fe4:	e7ed      	b.n	8019fc2 <__kernel_rem_pio2+0x5aa>
 8019fe6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019fea:	f7e6 f96f 	bl	80002cc <__adddf3>
 8019fee:	3e01      	subs	r6, #1
 8019ff0:	e7c0      	b.n	8019f74 <__kernel_rem_pio2+0x55c>
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	e7c5      	b.n	8019f84 <__kernel_rem_pio2+0x56c>
 8019ff8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8019ffc:	f7e6 f966 	bl	80002cc <__adddf3>
 801a000:	3401      	adds	r4, #1
 801a002:	e7ca      	b.n	8019f9a <__kernel_rem_pio2+0x582>
 801a004:	e9da 8900 	ldrd	r8, r9, [sl]
 801a008:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a00c:	9b02      	ldr	r3, [sp, #8]
 801a00e:	3b01      	subs	r3, #1
 801a010:	9302      	str	r3, [sp, #8]
 801a012:	4632      	mov	r2, r6
 801a014:	463b      	mov	r3, r7
 801a016:	4640      	mov	r0, r8
 801a018:	4649      	mov	r1, r9
 801a01a:	f7e6 f957 	bl	80002cc <__adddf3>
 801a01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a022:	4602      	mov	r2, r0
 801a024:	460b      	mov	r3, r1
 801a026:	4640      	mov	r0, r8
 801a028:	4649      	mov	r1, r9
 801a02a:	f7e6 f94d 	bl	80002c8 <__aeabi_dsub>
 801a02e:	4632      	mov	r2, r6
 801a030:	463b      	mov	r3, r7
 801a032:	f7e6 f94b 	bl	80002cc <__adddf3>
 801a036:	ed9d 7b08 	vldr	d7, [sp, #32]
 801a03a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a03e:	ed8a 7b00 	vstr	d7, [sl]
 801a042:	e76e      	b.n	8019f22 <__kernel_rem_pio2+0x50a>
 801a044:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a048:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a04c:	4640      	mov	r0, r8
 801a04e:	4632      	mov	r2, r6
 801a050:	463b      	mov	r3, r7
 801a052:	4649      	mov	r1, r9
 801a054:	f7e6 f93a 	bl	80002cc <__adddf3>
 801a058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a05c:	4602      	mov	r2, r0
 801a05e:	460b      	mov	r3, r1
 801a060:	4640      	mov	r0, r8
 801a062:	4649      	mov	r1, r9
 801a064:	f7e6 f930 	bl	80002c8 <__aeabi_dsub>
 801a068:	4632      	mov	r2, r6
 801a06a:	463b      	mov	r3, r7
 801a06c:	f7e6 f92e 	bl	80002cc <__adddf3>
 801a070:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a074:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a078:	ed84 7b00 	vstr	d7, [r4]
 801a07c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a080:	e755      	b.n	8019f2e <__kernel_rem_pio2+0x516>
 801a082:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a086:	f7e6 f921 	bl	80002cc <__adddf3>
 801a08a:	3d01      	subs	r5, #1
 801a08c:	e759      	b.n	8019f42 <__kernel_rem_pio2+0x52a>
 801a08e:	9b01      	ldr	r3, [sp, #4]
 801a090:	9a01      	ldr	r2, [sp, #4]
 801a092:	601d      	str	r5, [r3, #0]
 801a094:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a098:	605c      	str	r4, [r3, #4]
 801a09a:	609f      	str	r7, [r3, #8]
 801a09c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a0a0:	60d3      	str	r3, [r2, #12]
 801a0a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a0a6:	6110      	str	r0, [r2, #16]
 801a0a8:	6153      	str	r3, [r2, #20]
 801a0aa:	e728      	b.n	8019efe <__kernel_rem_pio2+0x4e6>
 801a0ac:	41700000 	.word	0x41700000
 801a0b0:	3e700000 	.word	0x3e700000
 801a0b4:	00000000 	.word	0x00000000

0801a0b8 <__kernel_sin>:
 801a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0bc:	ed2d 8b04 	vpush	{d8-d9}
 801a0c0:	eeb0 8a41 	vmov.f32	s16, s2
 801a0c4:	eef0 8a61 	vmov.f32	s17, s3
 801a0c8:	ec55 4b10 	vmov	r4, r5, d0
 801a0cc:	b083      	sub	sp, #12
 801a0ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a0d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a0d6:	9001      	str	r0, [sp, #4]
 801a0d8:	da06      	bge.n	801a0e8 <__kernel_sin+0x30>
 801a0da:	ee10 0a10 	vmov	r0, s0
 801a0de:	4629      	mov	r1, r5
 801a0e0:	f7e6 fd5a 	bl	8000b98 <__aeabi_d2iz>
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	d051      	beq.n	801a18c <__kernel_sin+0xd4>
 801a0e8:	4622      	mov	r2, r4
 801a0ea:	462b      	mov	r3, r5
 801a0ec:	4620      	mov	r0, r4
 801a0ee:	4629      	mov	r1, r5
 801a0f0:	f7e6 faa2 	bl	8000638 <__aeabi_dmul>
 801a0f4:	4682      	mov	sl, r0
 801a0f6:	468b      	mov	fp, r1
 801a0f8:	4602      	mov	r2, r0
 801a0fa:	460b      	mov	r3, r1
 801a0fc:	4620      	mov	r0, r4
 801a0fe:	4629      	mov	r1, r5
 801a100:	f7e6 fa9a 	bl	8000638 <__aeabi_dmul>
 801a104:	a341      	add	r3, pc, #260	; (adr r3, 801a20c <__kernel_sin+0x154>)
 801a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a10a:	4680      	mov	r8, r0
 801a10c:	4689      	mov	r9, r1
 801a10e:	4650      	mov	r0, sl
 801a110:	4659      	mov	r1, fp
 801a112:	f7e6 fa91 	bl	8000638 <__aeabi_dmul>
 801a116:	a33f      	add	r3, pc, #252	; (adr r3, 801a214 <__kernel_sin+0x15c>)
 801a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a11c:	f7e6 f8d4 	bl	80002c8 <__aeabi_dsub>
 801a120:	4652      	mov	r2, sl
 801a122:	465b      	mov	r3, fp
 801a124:	f7e6 fa88 	bl	8000638 <__aeabi_dmul>
 801a128:	a33c      	add	r3, pc, #240	; (adr r3, 801a21c <__kernel_sin+0x164>)
 801a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a12e:	f7e6 f8cd 	bl	80002cc <__adddf3>
 801a132:	4652      	mov	r2, sl
 801a134:	465b      	mov	r3, fp
 801a136:	f7e6 fa7f 	bl	8000638 <__aeabi_dmul>
 801a13a:	a33a      	add	r3, pc, #232	; (adr r3, 801a224 <__kernel_sin+0x16c>)
 801a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a140:	f7e6 f8c2 	bl	80002c8 <__aeabi_dsub>
 801a144:	4652      	mov	r2, sl
 801a146:	465b      	mov	r3, fp
 801a148:	f7e6 fa76 	bl	8000638 <__aeabi_dmul>
 801a14c:	a337      	add	r3, pc, #220	; (adr r3, 801a22c <__kernel_sin+0x174>)
 801a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a152:	f7e6 f8bb 	bl	80002cc <__adddf3>
 801a156:	9b01      	ldr	r3, [sp, #4]
 801a158:	4606      	mov	r6, r0
 801a15a:	460f      	mov	r7, r1
 801a15c:	b9eb      	cbnz	r3, 801a19a <__kernel_sin+0xe2>
 801a15e:	4602      	mov	r2, r0
 801a160:	460b      	mov	r3, r1
 801a162:	4650      	mov	r0, sl
 801a164:	4659      	mov	r1, fp
 801a166:	f7e6 fa67 	bl	8000638 <__aeabi_dmul>
 801a16a:	a325      	add	r3, pc, #148	; (adr r3, 801a200 <__kernel_sin+0x148>)
 801a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a170:	f7e6 f8aa 	bl	80002c8 <__aeabi_dsub>
 801a174:	4642      	mov	r2, r8
 801a176:	464b      	mov	r3, r9
 801a178:	f7e6 fa5e 	bl	8000638 <__aeabi_dmul>
 801a17c:	4602      	mov	r2, r0
 801a17e:	460b      	mov	r3, r1
 801a180:	4620      	mov	r0, r4
 801a182:	4629      	mov	r1, r5
 801a184:	f7e6 f8a2 	bl	80002cc <__adddf3>
 801a188:	4604      	mov	r4, r0
 801a18a:	460d      	mov	r5, r1
 801a18c:	ec45 4b10 	vmov	d0, r4, r5
 801a190:	b003      	add	sp, #12
 801a192:	ecbd 8b04 	vpop	{d8-d9}
 801a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a19a:	4b1b      	ldr	r3, [pc, #108]	; (801a208 <__kernel_sin+0x150>)
 801a19c:	ec51 0b18 	vmov	r0, r1, d8
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	f7e6 fa49 	bl	8000638 <__aeabi_dmul>
 801a1a6:	4632      	mov	r2, r6
 801a1a8:	ec41 0b19 	vmov	d9, r0, r1
 801a1ac:	463b      	mov	r3, r7
 801a1ae:	4640      	mov	r0, r8
 801a1b0:	4649      	mov	r1, r9
 801a1b2:	f7e6 fa41 	bl	8000638 <__aeabi_dmul>
 801a1b6:	4602      	mov	r2, r0
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	ec51 0b19 	vmov	r0, r1, d9
 801a1be:	f7e6 f883 	bl	80002c8 <__aeabi_dsub>
 801a1c2:	4652      	mov	r2, sl
 801a1c4:	465b      	mov	r3, fp
 801a1c6:	f7e6 fa37 	bl	8000638 <__aeabi_dmul>
 801a1ca:	ec53 2b18 	vmov	r2, r3, d8
 801a1ce:	f7e6 f87b 	bl	80002c8 <__aeabi_dsub>
 801a1d2:	a30b      	add	r3, pc, #44	; (adr r3, 801a200 <__kernel_sin+0x148>)
 801a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d8:	4606      	mov	r6, r0
 801a1da:	460f      	mov	r7, r1
 801a1dc:	4640      	mov	r0, r8
 801a1de:	4649      	mov	r1, r9
 801a1e0:	f7e6 fa2a 	bl	8000638 <__aeabi_dmul>
 801a1e4:	4602      	mov	r2, r0
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	4630      	mov	r0, r6
 801a1ea:	4639      	mov	r1, r7
 801a1ec:	f7e6 f86e 	bl	80002cc <__adddf3>
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	4620      	mov	r0, r4
 801a1f6:	4629      	mov	r1, r5
 801a1f8:	f7e6 f866 	bl	80002c8 <__aeabi_dsub>
 801a1fc:	e7c4      	b.n	801a188 <__kernel_sin+0xd0>
 801a1fe:	bf00      	nop
 801a200:	55555549 	.word	0x55555549
 801a204:	3fc55555 	.word	0x3fc55555
 801a208:	3fe00000 	.word	0x3fe00000
 801a20c:	5acfd57c 	.word	0x5acfd57c
 801a210:	3de5d93a 	.word	0x3de5d93a
 801a214:	8a2b9ceb 	.word	0x8a2b9ceb
 801a218:	3e5ae5e6 	.word	0x3e5ae5e6
 801a21c:	57b1fe7d 	.word	0x57b1fe7d
 801a220:	3ec71de3 	.word	0x3ec71de3
 801a224:	19c161d5 	.word	0x19c161d5
 801a228:	3f2a01a0 	.word	0x3f2a01a0
 801a22c:	1110f8a6 	.word	0x1110f8a6
 801a230:	3f811111 	.word	0x3f811111
 801a234:	00000000 	.word	0x00000000

0801a238 <__kernel_tan>:
 801a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23c:	ed2d 8b06 	vpush	{d8-d10}
 801a240:	ec5b ab10 	vmov	sl, fp, d0
 801a244:	4be0      	ldr	r3, [pc, #896]	; (801a5c8 <__kernel_tan+0x390>)
 801a246:	b083      	sub	sp, #12
 801a248:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801a24c:	429f      	cmp	r7, r3
 801a24e:	ec59 8b11 	vmov	r8, r9, d1
 801a252:	4606      	mov	r6, r0
 801a254:	f8cd b000 	str.w	fp, [sp]
 801a258:	dc61      	bgt.n	801a31e <__kernel_tan+0xe6>
 801a25a:	ee10 0a10 	vmov	r0, s0
 801a25e:	4659      	mov	r1, fp
 801a260:	f7e6 fc9a 	bl	8000b98 <__aeabi_d2iz>
 801a264:	4605      	mov	r5, r0
 801a266:	2800      	cmp	r0, #0
 801a268:	f040 8083 	bne.w	801a372 <__kernel_tan+0x13a>
 801a26c:	1c73      	adds	r3, r6, #1
 801a26e:	4652      	mov	r2, sl
 801a270:	4313      	orrs	r3, r2
 801a272:	433b      	orrs	r3, r7
 801a274:	d112      	bne.n	801a29c <__kernel_tan+0x64>
 801a276:	ec4b ab10 	vmov	d0, sl, fp
 801a27a:	f000 fa17 	bl	801a6ac <fabs>
 801a27e:	49d3      	ldr	r1, [pc, #844]	; (801a5cc <__kernel_tan+0x394>)
 801a280:	ec53 2b10 	vmov	r2, r3, d0
 801a284:	2000      	movs	r0, #0
 801a286:	f7e6 fb01 	bl	800088c <__aeabi_ddiv>
 801a28a:	4682      	mov	sl, r0
 801a28c:	468b      	mov	fp, r1
 801a28e:	ec4b ab10 	vmov	d0, sl, fp
 801a292:	b003      	add	sp, #12
 801a294:	ecbd 8b06 	vpop	{d8-d10}
 801a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a29c:	2e01      	cmp	r6, #1
 801a29e:	d0f6      	beq.n	801a28e <__kernel_tan+0x56>
 801a2a0:	4642      	mov	r2, r8
 801a2a2:	464b      	mov	r3, r9
 801a2a4:	4650      	mov	r0, sl
 801a2a6:	4659      	mov	r1, fp
 801a2a8:	f7e6 f810 	bl	80002cc <__adddf3>
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	460b      	mov	r3, r1
 801a2b0:	460f      	mov	r7, r1
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	49c6      	ldr	r1, [pc, #792]	; (801a5d0 <__kernel_tan+0x398>)
 801a2b6:	f7e6 fae9 	bl	800088c <__aeabi_ddiv>
 801a2ba:	e9cd 0100 	strd	r0, r1, [sp]
 801a2be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a2c2:	462e      	mov	r6, r5
 801a2c4:	4652      	mov	r2, sl
 801a2c6:	462c      	mov	r4, r5
 801a2c8:	4630      	mov	r0, r6
 801a2ca:	461d      	mov	r5, r3
 801a2cc:	4639      	mov	r1, r7
 801a2ce:	465b      	mov	r3, fp
 801a2d0:	f7e5 fffa 	bl	80002c8 <__aeabi_dsub>
 801a2d4:	4602      	mov	r2, r0
 801a2d6:	460b      	mov	r3, r1
 801a2d8:	4640      	mov	r0, r8
 801a2da:	4649      	mov	r1, r9
 801a2dc:	f7e5 fff4 	bl	80002c8 <__aeabi_dsub>
 801a2e0:	4632      	mov	r2, r6
 801a2e2:	462b      	mov	r3, r5
 801a2e4:	f7e6 f9a8 	bl	8000638 <__aeabi_dmul>
 801a2e8:	4632      	mov	r2, r6
 801a2ea:	4680      	mov	r8, r0
 801a2ec:	4689      	mov	r9, r1
 801a2ee:	462b      	mov	r3, r5
 801a2f0:	4630      	mov	r0, r6
 801a2f2:	4639      	mov	r1, r7
 801a2f4:	f7e6 f9a0 	bl	8000638 <__aeabi_dmul>
 801a2f8:	4bb4      	ldr	r3, [pc, #720]	; (801a5cc <__kernel_tan+0x394>)
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f7e5 ffe6 	bl	80002cc <__adddf3>
 801a300:	4602      	mov	r2, r0
 801a302:	460b      	mov	r3, r1
 801a304:	4640      	mov	r0, r8
 801a306:	4649      	mov	r1, r9
 801a308:	f7e5 ffe0 	bl	80002cc <__adddf3>
 801a30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a310:	f7e6 f992 	bl	8000638 <__aeabi_dmul>
 801a314:	4622      	mov	r2, r4
 801a316:	462b      	mov	r3, r5
 801a318:	f7e5 ffd8 	bl	80002cc <__adddf3>
 801a31c:	e7b5      	b.n	801a28a <__kernel_tan+0x52>
 801a31e:	4bad      	ldr	r3, [pc, #692]	; (801a5d4 <__kernel_tan+0x39c>)
 801a320:	429f      	cmp	r7, r3
 801a322:	dd26      	ble.n	801a372 <__kernel_tan+0x13a>
 801a324:	9b00      	ldr	r3, [sp, #0]
 801a326:	2b00      	cmp	r3, #0
 801a328:	da09      	bge.n	801a33e <__kernel_tan+0x106>
 801a32a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a32e:	469b      	mov	fp, r3
 801a330:	ee10 aa10 	vmov	sl, s0
 801a334:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a338:	ee11 8a10 	vmov	r8, s2
 801a33c:	4699      	mov	r9, r3
 801a33e:	4652      	mov	r2, sl
 801a340:	465b      	mov	r3, fp
 801a342:	a183      	add	r1, pc, #524	; (adr r1, 801a550 <__kernel_tan+0x318>)
 801a344:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a348:	f7e5 ffbe 	bl	80002c8 <__aeabi_dsub>
 801a34c:	4642      	mov	r2, r8
 801a34e:	464b      	mov	r3, r9
 801a350:	4604      	mov	r4, r0
 801a352:	460d      	mov	r5, r1
 801a354:	a180      	add	r1, pc, #512	; (adr r1, 801a558 <__kernel_tan+0x320>)
 801a356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a35a:	f7e5 ffb5 	bl	80002c8 <__aeabi_dsub>
 801a35e:	4622      	mov	r2, r4
 801a360:	462b      	mov	r3, r5
 801a362:	f7e5 ffb3 	bl	80002cc <__adddf3>
 801a366:	f04f 0800 	mov.w	r8, #0
 801a36a:	4682      	mov	sl, r0
 801a36c:	468b      	mov	fp, r1
 801a36e:	f04f 0900 	mov.w	r9, #0
 801a372:	4652      	mov	r2, sl
 801a374:	465b      	mov	r3, fp
 801a376:	4650      	mov	r0, sl
 801a378:	4659      	mov	r1, fp
 801a37a:	f7e6 f95d 	bl	8000638 <__aeabi_dmul>
 801a37e:	4602      	mov	r2, r0
 801a380:	460b      	mov	r3, r1
 801a382:	ec43 2b18 	vmov	d8, r2, r3
 801a386:	f7e6 f957 	bl	8000638 <__aeabi_dmul>
 801a38a:	ec53 2b18 	vmov	r2, r3, d8
 801a38e:	4604      	mov	r4, r0
 801a390:	460d      	mov	r5, r1
 801a392:	4650      	mov	r0, sl
 801a394:	4659      	mov	r1, fp
 801a396:	f7e6 f94f 	bl	8000638 <__aeabi_dmul>
 801a39a:	a371      	add	r3, pc, #452	; (adr r3, 801a560 <__kernel_tan+0x328>)
 801a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a0:	ec41 0b19 	vmov	d9, r0, r1
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	4629      	mov	r1, r5
 801a3a8:	f7e6 f946 	bl	8000638 <__aeabi_dmul>
 801a3ac:	a36e      	add	r3, pc, #440	; (adr r3, 801a568 <__kernel_tan+0x330>)
 801a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b2:	f7e5 ff8b 	bl	80002cc <__adddf3>
 801a3b6:	4622      	mov	r2, r4
 801a3b8:	462b      	mov	r3, r5
 801a3ba:	f7e6 f93d 	bl	8000638 <__aeabi_dmul>
 801a3be:	a36c      	add	r3, pc, #432	; (adr r3, 801a570 <__kernel_tan+0x338>)
 801a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c4:	f7e5 ff82 	bl	80002cc <__adddf3>
 801a3c8:	4622      	mov	r2, r4
 801a3ca:	462b      	mov	r3, r5
 801a3cc:	f7e6 f934 	bl	8000638 <__aeabi_dmul>
 801a3d0:	a369      	add	r3, pc, #420	; (adr r3, 801a578 <__kernel_tan+0x340>)
 801a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d6:	f7e5 ff79 	bl	80002cc <__adddf3>
 801a3da:	4622      	mov	r2, r4
 801a3dc:	462b      	mov	r3, r5
 801a3de:	f7e6 f92b 	bl	8000638 <__aeabi_dmul>
 801a3e2:	a367      	add	r3, pc, #412	; (adr r3, 801a580 <__kernel_tan+0x348>)
 801a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e8:	f7e5 ff70 	bl	80002cc <__adddf3>
 801a3ec:	4622      	mov	r2, r4
 801a3ee:	462b      	mov	r3, r5
 801a3f0:	f7e6 f922 	bl	8000638 <__aeabi_dmul>
 801a3f4:	a364      	add	r3, pc, #400	; (adr r3, 801a588 <__kernel_tan+0x350>)
 801a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3fa:	f7e5 ff67 	bl	80002cc <__adddf3>
 801a3fe:	ec53 2b18 	vmov	r2, r3, d8
 801a402:	f7e6 f919 	bl	8000638 <__aeabi_dmul>
 801a406:	a362      	add	r3, pc, #392	; (adr r3, 801a590 <__kernel_tan+0x358>)
 801a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a40c:	ec41 0b1a 	vmov	d10, r0, r1
 801a410:	4620      	mov	r0, r4
 801a412:	4629      	mov	r1, r5
 801a414:	f7e6 f910 	bl	8000638 <__aeabi_dmul>
 801a418:	a35f      	add	r3, pc, #380	; (adr r3, 801a598 <__kernel_tan+0x360>)
 801a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a41e:	f7e5 ff55 	bl	80002cc <__adddf3>
 801a422:	4622      	mov	r2, r4
 801a424:	462b      	mov	r3, r5
 801a426:	f7e6 f907 	bl	8000638 <__aeabi_dmul>
 801a42a:	a35d      	add	r3, pc, #372	; (adr r3, 801a5a0 <__kernel_tan+0x368>)
 801a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a430:	f7e5 ff4c 	bl	80002cc <__adddf3>
 801a434:	4622      	mov	r2, r4
 801a436:	462b      	mov	r3, r5
 801a438:	f7e6 f8fe 	bl	8000638 <__aeabi_dmul>
 801a43c:	a35a      	add	r3, pc, #360	; (adr r3, 801a5a8 <__kernel_tan+0x370>)
 801a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a442:	f7e5 ff43 	bl	80002cc <__adddf3>
 801a446:	4622      	mov	r2, r4
 801a448:	462b      	mov	r3, r5
 801a44a:	f7e6 f8f5 	bl	8000638 <__aeabi_dmul>
 801a44e:	a358      	add	r3, pc, #352	; (adr r3, 801a5b0 <__kernel_tan+0x378>)
 801a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a454:	f7e5 ff3a 	bl	80002cc <__adddf3>
 801a458:	4622      	mov	r2, r4
 801a45a:	462b      	mov	r3, r5
 801a45c:	f7e6 f8ec 	bl	8000638 <__aeabi_dmul>
 801a460:	a355      	add	r3, pc, #340	; (adr r3, 801a5b8 <__kernel_tan+0x380>)
 801a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a466:	f7e5 ff31 	bl	80002cc <__adddf3>
 801a46a:	4602      	mov	r2, r0
 801a46c:	460b      	mov	r3, r1
 801a46e:	ec51 0b1a 	vmov	r0, r1, d10
 801a472:	f7e5 ff2b 	bl	80002cc <__adddf3>
 801a476:	ec53 2b19 	vmov	r2, r3, d9
 801a47a:	f7e6 f8dd 	bl	8000638 <__aeabi_dmul>
 801a47e:	4642      	mov	r2, r8
 801a480:	464b      	mov	r3, r9
 801a482:	f7e5 ff23 	bl	80002cc <__adddf3>
 801a486:	ec53 2b18 	vmov	r2, r3, d8
 801a48a:	f7e6 f8d5 	bl	8000638 <__aeabi_dmul>
 801a48e:	4642      	mov	r2, r8
 801a490:	464b      	mov	r3, r9
 801a492:	f7e5 ff1b 	bl	80002cc <__adddf3>
 801a496:	a34a      	add	r3, pc, #296	; (adr r3, 801a5c0 <__kernel_tan+0x388>)
 801a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a49c:	4604      	mov	r4, r0
 801a49e:	460d      	mov	r5, r1
 801a4a0:	ec51 0b19 	vmov	r0, r1, d9
 801a4a4:	f7e6 f8c8 	bl	8000638 <__aeabi_dmul>
 801a4a8:	4622      	mov	r2, r4
 801a4aa:	462b      	mov	r3, r5
 801a4ac:	f7e5 ff0e 	bl	80002cc <__adddf3>
 801a4b0:	460b      	mov	r3, r1
 801a4b2:	ec41 0b18 	vmov	d8, r0, r1
 801a4b6:	4602      	mov	r2, r0
 801a4b8:	4659      	mov	r1, fp
 801a4ba:	4650      	mov	r0, sl
 801a4bc:	f7e5 ff06 	bl	80002cc <__adddf3>
 801a4c0:	4b44      	ldr	r3, [pc, #272]	; (801a5d4 <__kernel_tan+0x39c>)
 801a4c2:	429f      	cmp	r7, r3
 801a4c4:	4604      	mov	r4, r0
 801a4c6:	460d      	mov	r5, r1
 801a4c8:	f340 8086 	ble.w	801a5d8 <__kernel_tan+0x3a0>
 801a4cc:	4630      	mov	r0, r6
 801a4ce:	f7e6 f849 	bl	8000564 <__aeabi_i2d>
 801a4d2:	4622      	mov	r2, r4
 801a4d4:	4680      	mov	r8, r0
 801a4d6:	4689      	mov	r9, r1
 801a4d8:	462b      	mov	r3, r5
 801a4da:	4620      	mov	r0, r4
 801a4dc:	4629      	mov	r1, r5
 801a4de:	f7e6 f8ab 	bl	8000638 <__aeabi_dmul>
 801a4e2:	4642      	mov	r2, r8
 801a4e4:	4606      	mov	r6, r0
 801a4e6:	460f      	mov	r7, r1
 801a4e8:	464b      	mov	r3, r9
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	4629      	mov	r1, r5
 801a4ee:	f7e5 feed 	bl	80002cc <__adddf3>
 801a4f2:	4602      	mov	r2, r0
 801a4f4:	460b      	mov	r3, r1
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	4639      	mov	r1, r7
 801a4fa:	f7e6 f9c7 	bl	800088c <__aeabi_ddiv>
 801a4fe:	ec53 2b18 	vmov	r2, r3, d8
 801a502:	f7e5 fee1 	bl	80002c8 <__aeabi_dsub>
 801a506:	4602      	mov	r2, r0
 801a508:	460b      	mov	r3, r1
 801a50a:	4650      	mov	r0, sl
 801a50c:	4659      	mov	r1, fp
 801a50e:	f7e5 fedb 	bl	80002c8 <__aeabi_dsub>
 801a512:	4602      	mov	r2, r0
 801a514:	460b      	mov	r3, r1
 801a516:	f7e5 fed9 	bl	80002cc <__adddf3>
 801a51a:	4602      	mov	r2, r0
 801a51c:	460b      	mov	r3, r1
 801a51e:	4640      	mov	r0, r8
 801a520:	4649      	mov	r1, r9
 801a522:	f7e5 fed1 	bl	80002c8 <__aeabi_dsub>
 801a526:	9b00      	ldr	r3, [sp, #0]
 801a528:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801a52c:	f00a 0a02 	and.w	sl, sl, #2
 801a530:	4604      	mov	r4, r0
 801a532:	f1ca 0001 	rsb	r0, sl, #1
 801a536:	460d      	mov	r5, r1
 801a538:	f7e6 f814 	bl	8000564 <__aeabi_i2d>
 801a53c:	4602      	mov	r2, r0
 801a53e:	460b      	mov	r3, r1
 801a540:	4620      	mov	r0, r4
 801a542:	4629      	mov	r1, r5
 801a544:	f7e6 f878 	bl	8000638 <__aeabi_dmul>
 801a548:	e69f      	b.n	801a28a <__kernel_tan+0x52>
 801a54a:	bf00      	nop
 801a54c:	f3af 8000 	nop.w
 801a550:	54442d18 	.word	0x54442d18
 801a554:	3fe921fb 	.word	0x3fe921fb
 801a558:	33145c07 	.word	0x33145c07
 801a55c:	3c81a626 	.word	0x3c81a626
 801a560:	74bf7ad4 	.word	0x74bf7ad4
 801a564:	3efb2a70 	.word	0x3efb2a70
 801a568:	32f0a7e9 	.word	0x32f0a7e9
 801a56c:	3f12b80f 	.word	0x3f12b80f
 801a570:	1a8d1068 	.word	0x1a8d1068
 801a574:	3f3026f7 	.word	0x3f3026f7
 801a578:	fee08315 	.word	0xfee08315
 801a57c:	3f57dbc8 	.word	0x3f57dbc8
 801a580:	e96e8493 	.word	0xe96e8493
 801a584:	3f8226e3 	.word	0x3f8226e3
 801a588:	1bb341fe 	.word	0x1bb341fe
 801a58c:	3faba1ba 	.word	0x3faba1ba
 801a590:	db605373 	.word	0xdb605373
 801a594:	bef375cb 	.word	0xbef375cb
 801a598:	a03792a6 	.word	0xa03792a6
 801a59c:	3f147e88 	.word	0x3f147e88
 801a5a0:	f2f26501 	.word	0xf2f26501
 801a5a4:	3f4344d8 	.word	0x3f4344d8
 801a5a8:	c9560328 	.word	0xc9560328
 801a5ac:	3f6d6d22 	.word	0x3f6d6d22
 801a5b0:	8406d637 	.word	0x8406d637
 801a5b4:	3f9664f4 	.word	0x3f9664f4
 801a5b8:	1110fe7a 	.word	0x1110fe7a
 801a5bc:	3fc11111 	.word	0x3fc11111
 801a5c0:	55555563 	.word	0x55555563
 801a5c4:	3fd55555 	.word	0x3fd55555
 801a5c8:	3e2fffff 	.word	0x3e2fffff
 801a5cc:	3ff00000 	.word	0x3ff00000
 801a5d0:	bff00000 	.word	0xbff00000
 801a5d4:	3fe59427 	.word	0x3fe59427
 801a5d8:	2e01      	cmp	r6, #1
 801a5da:	d02f      	beq.n	801a63c <__kernel_tan+0x404>
 801a5dc:	460f      	mov	r7, r1
 801a5de:	4602      	mov	r2, r0
 801a5e0:	460b      	mov	r3, r1
 801a5e2:	4689      	mov	r9, r1
 801a5e4:	2000      	movs	r0, #0
 801a5e6:	4917      	ldr	r1, [pc, #92]	; (801a644 <__kernel_tan+0x40c>)
 801a5e8:	f7e6 f950 	bl	800088c <__aeabi_ddiv>
 801a5ec:	2600      	movs	r6, #0
 801a5ee:	e9cd 0100 	strd	r0, r1, [sp]
 801a5f2:	4652      	mov	r2, sl
 801a5f4:	465b      	mov	r3, fp
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	f7e5 fe65 	bl	80002c8 <__aeabi_dsub>
 801a5fe:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a602:	4602      	mov	r2, r0
 801a604:	460b      	mov	r3, r1
 801a606:	ec51 0b18 	vmov	r0, r1, d8
 801a60a:	f7e5 fe5d 	bl	80002c8 <__aeabi_dsub>
 801a60e:	4632      	mov	r2, r6
 801a610:	462b      	mov	r3, r5
 801a612:	f7e6 f811 	bl	8000638 <__aeabi_dmul>
 801a616:	46b0      	mov	r8, r6
 801a618:	460f      	mov	r7, r1
 801a61a:	4642      	mov	r2, r8
 801a61c:	462b      	mov	r3, r5
 801a61e:	4634      	mov	r4, r6
 801a620:	4649      	mov	r1, r9
 801a622:	4606      	mov	r6, r0
 801a624:	4640      	mov	r0, r8
 801a626:	f7e6 f807 	bl	8000638 <__aeabi_dmul>
 801a62a:	4b07      	ldr	r3, [pc, #28]	; (801a648 <__kernel_tan+0x410>)
 801a62c:	2200      	movs	r2, #0
 801a62e:	f7e5 fe4d 	bl	80002cc <__adddf3>
 801a632:	4602      	mov	r2, r0
 801a634:	460b      	mov	r3, r1
 801a636:	4630      	mov	r0, r6
 801a638:	4639      	mov	r1, r7
 801a63a:	e665      	b.n	801a308 <__kernel_tan+0xd0>
 801a63c:	4682      	mov	sl, r0
 801a63e:	468b      	mov	fp, r1
 801a640:	e625      	b.n	801a28e <__kernel_tan+0x56>
 801a642:	bf00      	nop
 801a644:	bff00000 	.word	0xbff00000
 801a648:	3ff00000 	.word	0x3ff00000

0801a64c <with_errno>:
 801a64c:	b570      	push	{r4, r5, r6, lr}
 801a64e:	4604      	mov	r4, r0
 801a650:	460d      	mov	r5, r1
 801a652:	4616      	mov	r6, r2
 801a654:	f7f8 f890 	bl	8012778 <__errno>
 801a658:	4629      	mov	r1, r5
 801a65a:	6006      	str	r6, [r0, #0]
 801a65c:	4620      	mov	r0, r4
 801a65e:	bd70      	pop	{r4, r5, r6, pc}

0801a660 <xflow>:
 801a660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a662:	4614      	mov	r4, r2
 801a664:	461d      	mov	r5, r3
 801a666:	b108      	cbz	r0, 801a66c <xflow+0xc>
 801a668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a66c:	e9cd 2300 	strd	r2, r3, [sp]
 801a670:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a674:	4620      	mov	r0, r4
 801a676:	4629      	mov	r1, r5
 801a678:	f7e5 ffde 	bl	8000638 <__aeabi_dmul>
 801a67c:	2222      	movs	r2, #34	; 0x22
 801a67e:	b003      	add	sp, #12
 801a680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a684:	f7ff bfe2 	b.w	801a64c <with_errno>

0801a688 <__math_uflow>:
 801a688:	b508      	push	{r3, lr}
 801a68a:	2200      	movs	r2, #0
 801a68c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a690:	f7ff ffe6 	bl	801a660 <xflow>
 801a694:	ec41 0b10 	vmov	d0, r0, r1
 801a698:	bd08      	pop	{r3, pc}

0801a69a <__math_oflow>:
 801a69a:	b508      	push	{r3, lr}
 801a69c:	2200      	movs	r2, #0
 801a69e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a6a2:	f7ff ffdd 	bl	801a660 <xflow>
 801a6a6:	ec41 0b10 	vmov	d0, r0, r1
 801a6aa:	bd08      	pop	{r3, pc}

0801a6ac <fabs>:
 801a6ac:	ec51 0b10 	vmov	r0, r1, d0
 801a6b0:	ee10 2a10 	vmov	r2, s0
 801a6b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a6b8:	ec43 2b10 	vmov	d0, r2, r3
 801a6bc:	4770      	bx	lr

0801a6be <finite>:
 801a6be:	b082      	sub	sp, #8
 801a6c0:	ed8d 0b00 	vstr	d0, [sp]
 801a6c4:	9801      	ldr	r0, [sp, #4]
 801a6c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a6ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a6ce:	0fc0      	lsrs	r0, r0, #31
 801a6d0:	b002      	add	sp, #8
 801a6d2:	4770      	bx	lr
 801a6d4:	0000      	movs	r0, r0
	...

0801a6d8 <floor>:
 801a6d8:	ec51 0b10 	vmov	r0, r1, d0
 801a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a6e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a6e8:	2e13      	cmp	r6, #19
 801a6ea:	ee10 5a10 	vmov	r5, s0
 801a6ee:	ee10 8a10 	vmov	r8, s0
 801a6f2:	460c      	mov	r4, r1
 801a6f4:	dc32      	bgt.n	801a75c <floor+0x84>
 801a6f6:	2e00      	cmp	r6, #0
 801a6f8:	da14      	bge.n	801a724 <floor+0x4c>
 801a6fa:	a333      	add	r3, pc, #204	; (adr r3, 801a7c8 <floor+0xf0>)
 801a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a700:	f7e5 fde4 	bl	80002cc <__adddf3>
 801a704:	2200      	movs	r2, #0
 801a706:	2300      	movs	r3, #0
 801a708:	f7e6 fa26 	bl	8000b58 <__aeabi_dcmpgt>
 801a70c:	b138      	cbz	r0, 801a71e <floor+0x46>
 801a70e:	2c00      	cmp	r4, #0
 801a710:	da57      	bge.n	801a7c2 <floor+0xea>
 801a712:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a716:	431d      	orrs	r5, r3
 801a718:	d001      	beq.n	801a71e <floor+0x46>
 801a71a:	4c2d      	ldr	r4, [pc, #180]	; (801a7d0 <floor+0xf8>)
 801a71c:	2500      	movs	r5, #0
 801a71e:	4621      	mov	r1, r4
 801a720:	4628      	mov	r0, r5
 801a722:	e025      	b.n	801a770 <floor+0x98>
 801a724:	4f2b      	ldr	r7, [pc, #172]	; (801a7d4 <floor+0xfc>)
 801a726:	4137      	asrs	r7, r6
 801a728:	ea01 0307 	and.w	r3, r1, r7
 801a72c:	4303      	orrs	r3, r0
 801a72e:	d01f      	beq.n	801a770 <floor+0x98>
 801a730:	a325      	add	r3, pc, #148	; (adr r3, 801a7c8 <floor+0xf0>)
 801a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a736:	f7e5 fdc9 	bl	80002cc <__adddf3>
 801a73a:	2200      	movs	r2, #0
 801a73c:	2300      	movs	r3, #0
 801a73e:	f7e6 fa0b 	bl	8000b58 <__aeabi_dcmpgt>
 801a742:	2800      	cmp	r0, #0
 801a744:	d0eb      	beq.n	801a71e <floor+0x46>
 801a746:	2c00      	cmp	r4, #0
 801a748:	bfbe      	ittt	lt
 801a74a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a74e:	fa43 f606 	asrlt.w	r6, r3, r6
 801a752:	19a4      	addlt	r4, r4, r6
 801a754:	ea24 0407 	bic.w	r4, r4, r7
 801a758:	2500      	movs	r5, #0
 801a75a:	e7e0      	b.n	801a71e <floor+0x46>
 801a75c:	2e33      	cmp	r6, #51	; 0x33
 801a75e:	dd0b      	ble.n	801a778 <floor+0xa0>
 801a760:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a764:	d104      	bne.n	801a770 <floor+0x98>
 801a766:	ee10 2a10 	vmov	r2, s0
 801a76a:	460b      	mov	r3, r1
 801a76c:	f7e5 fdae 	bl	80002cc <__adddf3>
 801a770:	ec41 0b10 	vmov	d0, r0, r1
 801a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a778:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a77c:	f04f 33ff 	mov.w	r3, #4294967295
 801a780:	fa23 f707 	lsr.w	r7, r3, r7
 801a784:	4207      	tst	r7, r0
 801a786:	d0f3      	beq.n	801a770 <floor+0x98>
 801a788:	a30f      	add	r3, pc, #60	; (adr r3, 801a7c8 <floor+0xf0>)
 801a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a78e:	f7e5 fd9d 	bl	80002cc <__adddf3>
 801a792:	2200      	movs	r2, #0
 801a794:	2300      	movs	r3, #0
 801a796:	f7e6 f9df 	bl	8000b58 <__aeabi_dcmpgt>
 801a79a:	2800      	cmp	r0, #0
 801a79c:	d0bf      	beq.n	801a71e <floor+0x46>
 801a79e:	2c00      	cmp	r4, #0
 801a7a0:	da02      	bge.n	801a7a8 <floor+0xd0>
 801a7a2:	2e14      	cmp	r6, #20
 801a7a4:	d103      	bne.n	801a7ae <floor+0xd6>
 801a7a6:	3401      	adds	r4, #1
 801a7a8:	ea25 0507 	bic.w	r5, r5, r7
 801a7ac:	e7b7      	b.n	801a71e <floor+0x46>
 801a7ae:	2301      	movs	r3, #1
 801a7b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a7b4:	fa03 f606 	lsl.w	r6, r3, r6
 801a7b8:	4435      	add	r5, r6
 801a7ba:	4545      	cmp	r5, r8
 801a7bc:	bf38      	it	cc
 801a7be:	18e4      	addcc	r4, r4, r3
 801a7c0:	e7f2      	b.n	801a7a8 <floor+0xd0>
 801a7c2:	2500      	movs	r5, #0
 801a7c4:	462c      	mov	r4, r5
 801a7c6:	e7aa      	b.n	801a71e <floor+0x46>
 801a7c8:	8800759c 	.word	0x8800759c
 801a7cc:	7e37e43c 	.word	0x7e37e43c
 801a7d0:	bff00000 	.word	0xbff00000
 801a7d4:	000fffff 	.word	0x000fffff

0801a7d8 <scalbn>:
 801a7d8:	b570      	push	{r4, r5, r6, lr}
 801a7da:	ec55 4b10 	vmov	r4, r5, d0
 801a7de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a7e2:	4606      	mov	r6, r0
 801a7e4:	462b      	mov	r3, r5
 801a7e6:	b99a      	cbnz	r2, 801a810 <scalbn+0x38>
 801a7e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a7ec:	4323      	orrs	r3, r4
 801a7ee:	d036      	beq.n	801a85e <scalbn+0x86>
 801a7f0:	4b39      	ldr	r3, [pc, #228]	; (801a8d8 <scalbn+0x100>)
 801a7f2:	4629      	mov	r1, r5
 801a7f4:	ee10 0a10 	vmov	r0, s0
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	f7e5 ff1d 	bl	8000638 <__aeabi_dmul>
 801a7fe:	4b37      	ldr	r3, [pc, #220]	; (801a8dc <scalbn+0x104>)
 801a800:	429e      	cmp	r6, r3
 801a802:	4604      	mov	r4, r0
 801a804:	460d      	mov	r5, r1
 801a806:	da10      	bge.n	801a82a <scalbn+0x52>
 801a808:	a32b      	add	r3, pc, #172	; (adr r3, 801a8b8 <scalbn+0xe0>)
 801a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80e:	e03a      	b.n	801a886 <scalbn+0xae>
 801a810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a814:	428a      	cmp	r2, r1
 801a816:	d10c      	bne.n	801a832 <scalbn+0x5a>
 801a818:	ee10 2a10 	vmov	r2, s0
 801a81c:	4620      	mov	r0, r4
 801a81e:	4629      	mov	r1, r5
 801a820:	f7e5 fd54 	bl	80002cc <__adddf3>
 801a824:	4604      	mov	r4, r0
 801a826:	460d      	mov	r5, r1
 801a828:	e019      	b.n	801a85e <scalbn+0x86>
 801a82a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a82e:	460b      	mov	r3, r1
 801a830:	3a36      	subs	r2, #54	; 0x36
 801a832:	4432      	add	r2, r6
 801a834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a838:	428a      	cmp	r2, r1
 801a83a:	dd08      	ble.n	801a84e <scalbn+0x76>
 801a83c:	2d00      	cmp	r5, #0
 801a83e:	a120      	add	r1, pc, #128	; (adr r1, 801a8c0 <scalbn+0xe8>)
 801a840:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a844:	da1c      	bge.n	801a880 <scalbn+0xa8>
 801a846:	a120      	add	r1, pc, #128	; (adr r1, 801a8c8 <scalbn+0xf0>)
 801a848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a84c:	e018      	b.n	801a880 <scalbn+0xa8>
 801a84e:	2a00      	cmp	r2, #0
 801a850:	dd08      	ble.n	801a864 <scalbn+0x8c>
 801a852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a85a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a85e:	ec45 4b10 	vmov	d0, r4, r5
 801a862:	bd70      	pop	{r4, r5, r6, pc}
 801a864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a868:	da19      	bge.n	801a89e <scalbn+0xc6>
 801a86a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a86e:	429e      	cmp	r6, r3
 801a870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a874:	dd0a      	ble.n	801a88c <scalbn+0xb4>
 801a876:	a112      	add	r1, pc, #72	; (adr r1, 801a8c0 <scalbn+0xe8>)
 801a878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d1e2      	bne.n	801a846 <scalbn+0x6e>
 801a880:	a30f      	add	r3, pc, #60	; (adr r3, 801a8c0 <scalbn+0xe8>)
 801a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a886:	f7e5 fed7 	bl	8000638 <__aeabi_dmul>
 801a88a:	e7cb      	b.n	801a824 <scalbn+0x4c>
 801a88c:	a10a      	add	r1, pc, #40	; (adr r1, 801a8b8 <scalbn+0xe0>)
 801a88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d0b8      	beq.n	801a808 <scalbn+0x30>
 801a896:	a10e      	add	r1, pc, #56	; (adr r1, 801a8d0 <scalbn+0xf8>)
 801a898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a89c:	e7b4      	b.n	801a808 <scalbn+0x30>
 801a89e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a8a2:	3236      	adds	r2, #54	; 0x36
 801a8a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a8a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a8ac:	4620      	mov	r0, r4
 801a8ae:	4b0c      	ldr	r3, [pc, #48]	; (801a8e0 <scalbn+0x108>)
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	e7e8      	b.n	801a886 <scalbn+0xae>
 801a8b4:	f3af 8000 	nop.w
 801a8b8:	c2f8f359 	.word	0xc2f8f359
 801a8bc:	01a56e1f 	.word	0x01a56e1f
 801a8c0:	8800759c 	.word	0x8800759c
 801a8c4:	7e37e43c 	.word	0x7e37e43c
 801a8c8:	8800759c 	.word	0x8800759c
 801a8cc:	fe37e43c 	.word	0xfe37e43c
 801a8d0:	c2f8f359 	.word	0xc2f8f359
 801a8d4:	81a56e1f 	.word	0x81a56e1f
 801a8d8:	43500000 	.word	0x43500000
 801a8dc:	ffff3cb0 	.word	0xffff3cb0
 801a8e0:	3c900000 	.word	0x3c900000

0801a8e4 <_init>:
 801a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8e6:	bf00      	nop
 801a8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8ea:	bc08      	pop	{r3}
 801a8ec:	469e      	mov	lr, r3
 801a8ee:	4770      	bx	lr

0801a8f0 <_fini>:
 801a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8f2:	bf00      	nop
 801a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8f6:	bc08      	pop	{r3}
 801a8f8:	469e      	mov	lr, r3
 801a8fa:	4770      	bx	lr
