
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf0  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae4  08008ae4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aec  08008aec  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008af0  08008af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000032f0  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003394  20003394  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157a4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d82  00000000  00000000  00035878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  000396a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141f5  00000000  00000000  0005fca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc2b  00000000  00000000  00073e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151ac5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f98  00000000  00000000  00151b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ddc 	.word	0x08005ddc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	08005ddc 	.word	0x08005ddc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a5b      	ldr	r2, [pc, #364]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b59      	ldr	r3, [pc, #356]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	4b55      	ldr	r3, [pc, #340]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a54      	ldr	r2, [pc, #336]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b52      	ldr	r3, [pc, #328]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a4d      	ldr	r2, [pc, #308]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <MX_GPIO_Init+0x18c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b47      	ldr	r3, [pc, #284]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a46      	ldr	r2, [pc, #280]	; (8000724 <MX_GPIO_Init+0x18c>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a3f      	ldr	r2, [pc, #252]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <MX_GPIO_Init+0x18c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_GPIO_Init+0x18c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a31      	ldr	r2, [pc, #196]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	482c      	ldr	r0, [pc, #176]	; (8000728 <MX_GPIO_Init+0x190>)
 8000678:	f001 fbe6 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <MX_GPIO_Init+0x194>)
 8000684:	f001 fbe0 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4828      	ldr	r0, [pc, #160]	; (8000730 <MX_GPIO_Init+0x198>)
 800068e:	f001 fbdb 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4822      	ldr	r0, [pc, #136]	; (8000734 <MX_GPIO_Init+0x19c>)
 80006aa:	f001 fa21 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_GPIO_Init+0x190>)
 80006c6:	f001 fa13 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_GPIO_Init+0x194>)
 80006e4:	f001 fa04 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0x198>)
 8000700:	f001 f9f6 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_GPIO_Init+0x198>)
 8000718:	f001 f9ea 	bl	8001af0 <HAL_GPIO_Init>

}
 800071c:	bf00      	nop
 800071e:	3730      	adds	r7, #48	; 0x30
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400
 8000730:	40021800 	.word	0x40021800
 8000734:	40020800 	.word	0x40020800

08000738 <test>:
#include "gps.h"

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};

void test(char* buffer, gpsTime* time){
 8000738:	b580      	push	{r7, lr}
 800073a:	b0a8      	sub	sp, #160	; 0xa0
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	char code[] = "GNZDA";
 8000742:	4a82      	ldr	r2, [pc, #520]	; (800094c <test+0x214>)
 8000744:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074c:	6018      	str	r0, [r3, #0]
 800074e:	3304      	adds	r3, #4
 8000750:	8019      	strh	r1, [r3, #0]
	char term[] = ",";
 8000752:	232c      	movs	r3, #44	; 0x2c
 8000754:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	//	int diff = strncmp(loc+1, "GNZDA", sizeof(uint8_t)*5);
		char* pos = strstr(buffer, code);
 8000758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f004 fb06 	bl	8004d70 <strstr>
 8000764:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		char* end = strchr(pos, 13); // carriage return
 8000768:	210d      	movs	r1, #13
 800076a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800076e:	f004 fadf 	bl	8004d30 <strchr>
 8000772:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		uint8_t strl = end - pos;
 8000776:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800077a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		char myStr[84] = {0};
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2250      	movs	r2, #80	; 0x50
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fac5 	bl	8004d20 <memset>
		strncpy(myStr, pos, 83);
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2253      	movs	r2, #83	; 0x53
 800079c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fad2 	bl	8004d4a <strncpy>

//		Add checking of checksum
//		Add checking if data provided
//		$GNZDA,204235.000,31,03,2022,00,00*49 - every char xor

		char* timestr = strtok(myStr+6, ",");
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	3306      	adds	r3, #6
 80007ac:	4968      	ldr	r1, [pc, #416]	; (8000950 <test+0x218>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 faf6 	bl	8004da0 <strtok>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		char* day = strtok(NULL, term);
 80007ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007be:	4619      	mov	r1, r3
 80007c0:	2000      	movs	r0, #0
 80007c2:	f004 faed 	bl	8004da0 <strtok>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		char* mon = strtok(NULL, term);
 80007cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007d0:	4619      	mov	r1, r3
 80007d2:	2000      	movs	r0, #0
 80007d4:	f004 fae4 	bl	8004da0 <strtok>
 80007d8:	4603      	mov	r3, r0
 80007da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		char* year = strtok(NULL, term);
 80007de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007e2:	4619      	mov	r1, r3
 80007e4:	2000      	movs	r0, #0
 80007e6:	f004 fadb 	bl	8004da0 <strtok>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		strtok(NULL, "*");
 80007f0:	4958      	ldr	r1, [pc, #352]	; (8000954 <test+0x21c>)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f004 fad4 	bl	8004da0 <strtok>
		char* chks = strtok(NULL, 13);
 80007f8:	210d      	movs	r1, #13
 80007fa:	2000      	movs	r0, #0
 80007fc:	f004 fad0 	bl	8004da0 <strtok>
 8000800:	4603      	mov	r3, r0
 8000802:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		char result[9] = {0};
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	711a      	strb	r2, [r3, #4]
		strncpy(result, timestr, 2);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2202      	movs	r2, #2
 800081a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fa93 	bl	8004d4a <strncpy>
		strncpy(result+2, ":", 1);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	3302      	adds	r3, #2
 800082a:	223a      	movs	r2, #58	; 0x3a
 800082c:	701a      	strb	r2, [r3, #0]
		strncpy(result+3, timestr+2, 2);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	3303      	adds	r3, #3
 8000834:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000838:	1c91      	adds	r1, r2, #2
 800083a:	2202      	movs	r2, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fa84 	bl	8004d4a <strncpy>
		strncpy(result+5, ":", 1);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	3305      	adds	r3, #5
 8000848:	223a      	movs	r2, #58	; 0x3a
 800084a:	701a      	strb	r2, [r3, #0]
		strncpy(result+6, timestr+4, 2);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	3306      	adds	r3, #6
 8000852:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000856:	1d11      	adds	r1, r2, #4
 8000858:	2202      	movs	r2, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fa75 	bl	8004d4a <strncpy>

		char dateres[11] = {0};
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	f8c3 2003 	str.w	r2, [r3, #3]
		strncpy(dateres, day, 2);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2202      	movs	r2, #2
 8000876:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fa65 	bl	8004d4a <strncpy>
		strncpy(dateres+2, "-", 1);
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	3302      	adds	r3, #2
 8000886:	222d      	movs	r2, #45	; 0x2d
 8000888:	701a      	strb	r2, [r3, #0]
		strncpy(dateres+3, mon, 2);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	3303      	adds	r3, #3
 8000890:	2202      	movs	r2, #2
 8000892:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fa57 	bl	8004d4a <strncpy>
		strncpy(dateres+5, "-", 1);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	3305      	adds	r3, #5
 80008a2:	222d      	movs	r2, #45	; 0x2d
 80008a4:	701a      	strb	r2, [r3, #0]
		strncpy(dateres+6, year, 4);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	3306      	adds	r3, #6
 80008ac:	2204      	movs	r2, #4
 80008ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fa49 	bl	8004d4a <strncpy>

		if(pos != NULL){
 80008b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d040      	beq.n	8000942 <test+0x20a>
			memcpy(&time->hour, timestr, 2);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008c6:	8812      	ldrh	r2, [r2, #0]
 80008c8:	b292      	uxth	r2, r2
 80008ca:	801a      	strh	r2, [r3, #0]
			memcpy(&time->minute, timestr+2, 2);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3303      	adds	r3, #3
 80008d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008d4:	3202      	adds	r2, #2
 80008d6:	8812      	ldrh	r2, [r2, #0]
 80008d8:	b292      	uxth	r2, r2
 80008da:	801a      	strh	r2, [r3, #0]
			memcpy(&time->second, timestr+4, 2);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3306      	adds	r3, #6
 80008e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008e4:	3204      	adds	r2, #4
 80008e6:	8812      	ldrh	r2, [r2, #0]
 80008e8:	b292      	uxth	r2, r2
 80008ea:	801a      	strh	r2, [r3, #0]
			memcpy(&time->timestr, result, 8);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3309      	adds	r3, #9
 80008f0:	f107 0114 	add.w	r1, r7, #20
 80008f4:	2208      	movs	r2, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fa04 	bl	8004d04 <memcpy>
			memcpy(&time->day, day, 2);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3312      	adds	r3, #18
 8000900:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	b292      	uxth	r2, r2
 8000908:	801a      	strh	r2, [r3, #0]
			memcpy(&time->month, mon, 2);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	3315      	adds	r3, #21
 800090e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000912:	8812      	ldrh	r2, [r2, #0]
 8000914:	b292      	uxth	r2, r2
 8000916:	801a      	strh	r2, [r3, #0]
			memcpy(&time->year, year, 4);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3318      	adds	r3, #24
 800091c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	601a      	str	r2, [r3, #0]
			memcpy(&time->datestr, dateres, 10);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	331d      	adds	r3, #29
 8000928:	f107 0108 	add.w	r1, r7, #8
 800092c:	220a      	movs	r2, #10
 800092e:	4618      	mov	r0, r3
 8000930:	f004 f9e8 	bl	8004d04 <memcpy>
			memcpy(&time->chks, chks, 2);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	3328      	adds	r3, #40	; 0x28
 8000938:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800093c:	8812      	ldrh	r2, [r2, #0]
 800093e:	b292      	uxth	r2, r2
 8000940:	801a      	strh	r2, [r3, #0]
	}


}
 8000942:	bf00      	nop
 8000944:	37a0      	adds	r7, #160	; 0xa0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08005dfc 	.word	0x08005dfc
 8000950:	08005df4 	.word	0x08005df4
 8000954:	08005df8 	.word	0x08005df8

08000958 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8000962:	2307      	movs	r3, #7
 8000964:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8000972:	e010      	b.n	8000996 <reverse_uint8+0x3e>
		result = result << 1;
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8000988:	7bba      	ldrb	r2, [r7, #14]
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	4313      	orrs	r3, r2
 800098e:	73bb      	strb	r3, [r7, #14]
		times--;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	3b01      	subs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1eb      	bne.n	8000974 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 800099c:	7bbb      	ldrb	r3, [r7, #14]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	updateSetting(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f824 	bl	8000a00 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	e014      	b.n	80009e8 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 80009be:	2300      	movs	r3, #0
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	e00b      	b.n	80009dc <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2232      	movs	r2, #50	; 0x32
 80009c8:	fb02 f203 	mul.w	r2, r2, r3
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <lcdClearBuffer+0x50>)
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	3301      	adds	r3, #1
 80009da:	80bb      	strh	r3, [r7, #4]
 80009dc:	88bb      	ldrh	r3, [r7, #4]
 80009de:	2b31      	cmp	r3, #49	; 0x31
 80009e0:	d9f0      	bls.n	80009c4 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3301      	adds	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2bef      	cmp	r3, #239	; 0xef
 80009ec:	d9e7      	bls.n	80009be <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 f806 	bl	8000a00 <updateSetting>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000c4 	.word	0x200000c4

08000a00 <updateSetting>:

void updateSetting(uint8_t state){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <updateSetting+0x1c>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	7013      	strb	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000000 	.word	0x20000000

08000a20 <lcdPutChar>:
//		lcdBuffer[bufferLoc + 2] &= ~((dataBlock2 << (8 - offset)) | (dataBlock3 >> offset));
//		lcdBuffer[bufferLoc + 3] &= ~(dataBlock3 << (8 - offset));
//	}
//
//}
void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4603      	mov	r3, r0
 8000a2a:	80fb      	strh	r3, [r7, #6]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	717b      	strb	r3, [r7, #5]
 8000a30:	4613      	mov	r3, r2
 8000a32:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	793a      	ldrb	r2, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d304      	bcc.n	8000a48 <lcdPutChar+0x28>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	799b      	ldrb	r3, [r3, #6]
 8000a42:	793a      	ldrb	r2, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d902      	bls.n	8000a4e <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	79db      	ldrb	r3, [r3, #7]
 8000a4c:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	461a      	mov	r2, r3
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a6e:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000a70:	2300      	movs	r3, #0
 8000a72:	75fb      	strb	r3, [r7, #23]
 8000a74:	e09d      	b.n	8000bb2 <lcdPutChar+0x192>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8000a76:	797a      	ldrb	r2, [r7, #5]
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	0091      	lsls	r1, r2, #2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	7cfb      	ldrb	r3, [r7, #19]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8000a9a:	793b      	ldrb	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	7952      	ldrb	r2, [r2, #5]
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	8852      	ldrh	r2, [r2, #2]
 8000aa6:	fb02 f203 	mul.w	r2, r2, r3
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	7cb9      	ldrb	r1, [r7, #18]
 8000aae:	fb01 f303 	mul.w	r3, r1, r3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	3308      	adds	r3, #8
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	7d3b      	ldrb	r3, [r7, #20]
 8000ac4:	fa42 f303 	asr.w	r3, r2, r3
 8000ac8:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8000aca:	8a3b      	ldrh	r3, [r7, #16]
 8000acc:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <lcdPutChar+0x1ac>)
 8000ace:	5cd3      	ldrb	r3, [r2, r3]
 8000ad0:	b25a      	sxtb	r2, r3
 8000ad2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	8a3b      	ldrh	r3, [r7, #16]
 8000ae0:	b2d1      	uxtb	r1, r2
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <lcdPutChar+0x1ac>)
 8000ae4:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	3308      	adds	r3, #8
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	f1c3 0308 	rsb	r3, r3, #8
 8000af8:	21ff      	movs	r1, #255	; 0xff
 8000afa:	fa41 f303 	asr.w	r3, r1, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000b06:	2301      	movs	r3, #1
 8000b08:	757b      	strb	r3, [r7, #21]
 8000b0a:	e029      	b.n	8000b60 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8000b0c:	7d7a      	ldrb	r2, [r7, #21]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	7a1b      	ldrb	r3, [r3, #8]
 8000b18:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8000b1a:	8a3a      	ldrh	r2, [r7, #16]
 8000b1c:	7d7b      	ldrb	r3, [r7, #21]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <lcdPutChar+0x1ac>)
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	7db9      	ldrb	r1, [r7, #22]
 8000b28:	7d3b      	ldrb	r3, [r7, #20]
 8000b2a:	f1c3 0308 	rsb	r3, r3, #8
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	b259      	sxtb	r1, r3
 8000b34:	7af8      	ldrb	r0, [r7, #11]
 8000b36:	7d3b      	ldrb	r3, [r7, #20]
 8000b38:	fa40 f303 	asr.w	r3, r0, r3
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	4013      	ands	r3, r2
 8000b48:	b259      	sxtb	r1, r3
 8000b4a:	8a3a      	ldrh	r2, [r7, #16]
 8000b4c:	7d7b      	ldrb	r3, [r7, #21]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2c9      	uxtb	r1, r1
 8000b52:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <lcdPutChar+0x1ac>)
 8000b54:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8000b56:	7afb      	ldrb	r3, [r7, #11]
 8000b58:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000b5a:	7d7b      	ldrb	r3, [r7, #21]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	757b      	strb	r3, [r7, #21]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	7d7a      	ldrb	r2, [r7, #21]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d9ce      	bls.n	8000b0c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width)>>3) + 1] &= ~(dataBlock << (8-offset));
 8000b6e:	8a3b      	ldrh	r3, [r7, #16]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	08d2      	lsrs	r2, r2, #3
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	4413      	add	r3, r2
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <lcdPutChar+0x1ac>)
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	7db9      	ldrb	r1, [r7, #22]
 8000b84:	7d3b      	ldrb	r3, [r7, #20]
 8000b86:	f1c3 0308 	rsb	r3, r3, #8
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	b259      	sxtb	r1, r3
 8000b98:	8a3b      	ldrh	r3, [r7, #16]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	08d2      	lsrs	r2, r2, #3
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2c9      	uxtb	r1, r1
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <lcdPutChar+0x1ac>)
 8000baa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	7dfa      	ldrb	r2, [r7, #23]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f4ff af5c 	bcc.w	8000a76 <lcdPutChar+0x56>
	}

}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	200000c4 	.word	0x200000c4

08000bd0 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	81fb      	strh	r3, [r7, #14]
 8000bde:	460b      	mov	r3, r1
 8000be0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	75fb      	strb	r3, [r7, #23]
 8000be6:	e01a      	b.n	8000c1e <lcdPutStr+0x4e>
		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	fb12 f303 	smulbb	r3, r2, r3
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	7b7a      	ldrb	r2, [r7, #13]
 8000c04:	fb12 f303 	smulbb	r3, r2, r3
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f7ff ff04 	bl	8000a20 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
 8000c1e:	7dfc      	ldrb	r4, [r7, #23]
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f7ff fae5 	bl	80001f0 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	d3dd      	bcc.n	8000be8 <lcdPutStr+0x18>
//		  HAL_Delay(1);
		  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
	...

08000c38 <lcdRefresh>:
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;

}
void lcdRefresh(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <lcdRefresh+0x7c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d032      	beq.n	8000cac <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <lcdRefresh+0x80>)
 8000c4c:	f001 f8fc 	bl	8001e48 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000c50:	2301      	movs	r3, #1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	e01c      	b.n	8000c90 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe7d 	bl	8000958 <reverse_uint8>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <lcdRefresh+0x84>)
 8000c64:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8000c66:	2396      	movs	r3, #150	; 0x96
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4914      	ldr	r1, [pc, #80]	; (8000cbc <lcdRefresh+0x84>)
 8000c6c:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <lcdRefresh+0x88>)
 8000c6e:	f001 fe1c 	bl	80028aa <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	2232      	movs	r2, #50	; 0x32
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <lcdRefresh+0x8c>)
 8000c7e:	1899      	adds	r1, r3, r2
 8000c80:	2396      	movs	r3, #150	; 0x96
 8000c82:	2232      	movs	r2, #50	; 0x32
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <lcdRefresh+0x88>)
 8000c86:	f001 fe10 	bl	80028aa <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2bf1      	cmp	r3, #241	; 0xf1
 8000c94:	d9df      	bls.n	8000c56 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8000c96:	2396      	movs	r3, #150	; 0x96
 8000c98:	2202      	movs	r2, #2
 8000c9a:	490b      	ldr	r1, [pc, #44]	; (8000cc8 <lcdRefresh+0x90>)
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <lcdRefresh+0x88>)
 8000c9e:	f001 fe04 	bl	80028aa <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <lcdRefresh+0x80>)
 8000ca8:	f001 f8ce 	bl	8001e48 <HAL_GPIO_WritePin>
	}
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	20003210 	.word	0x20003210
 8000cc4:	200000c4 	.word	0x200000c4
 8000cc8:	200000c0 	.word	0x200000c0

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f000 fcf7 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f85b 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff fc5d 	bl	8000598 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cde:	f000 fbed 	bl	80014bc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000ce2:	f000 f8e5 	bl	8000eb0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000ce6:	f000 faa3 	bl	8001230 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000cea:	f000 fb43 	bl	8001374 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8000cee:	f000 fc0f 	bl	8001510 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8000cf2:	481d      	ldr	r0, [pc, #116]	; (8000d68 <main+0x9c>)
 8000cf4:	f001 ffe0 	bl	8002cb8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <main+0x9c>)
 8000cfa:	f002 f82d 	bl	8002d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <main+0x9c>)
 8000d02:	f002 f8f3 	bl	8002eec <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8000d06:	4819      	ldr	r0, [pc, #100]	; (8000d6c <main+0xa0>)
 8000d08:	f002 f826 	bl	8002d58 <HAL_TIM_Base_Start_IT>

  char text[] = "Pik!";
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <main+0xa4>)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d14:	6018      	str	r0, [r3, #0]
 8000d16:	3304      	adds	r3, #4
 8000d18:	7019      	strb	r1, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  lcdClearBuffer();
 8000d1a:	f7ff fe47 	bl	80009ac <lcdClearBuffer>
	  lcdRefresh();
 8000d1e:	f7ff ff8b 	bl	8000c38 <lcdRefresh>
  while (1)
  {


	  HAL_UART_Receive(&huart6, &buffer, 600, 1000);
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000d2a:	4912      	ldr	r1, [pc, #72]	; (8000d74 <main+0xa8>)
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <main+0xac>)
 8000d2e:	f003 f89e 	bl	8003e6e <HAL_UART_Receive>
	  test(&buffer, &now);
 8000d32:	4912      	ldr	r1, [pc, #72]	; (8000d7c <main+0xb0>)
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <main+0xa8>)
 8000d36:	f7ff fcff 	bl	8000738 <test>
//				  break;
//			  }
//		  }
//		index++;
//		}
	  lcdClearBuffer();
 8000d3a:	f7ff fe37 	bl	80009ac <lcdClearBuffer>
//	  lcdPutStr(0,0, ppp,dig5x9);
//	  lcdPutStr(0,1, qqq,dig5x9);
	  lcdPutStr(0,0, now.timestr ,dig5x9);
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <main+0xb4>)
 8000d40:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <main+0xb8>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff ff43 	bl	8000bd0 <lcdPutStr>
	  lcdPutStr(0,1, now.datestr ,dig5x9);
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <main+0xb4>)
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <main+0xbc>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ff3d 	bl	8000bd0 <lcdPutStr>
	  lcdPutStr(0,2, now.chks ,dig5x9);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <main+0xb4>)
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <main+0xc0>)
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff37 	bl	8000bd0 <lcdPutStr>
	  lcdRefresh();
 8000d62:	f7ff ff69 	bl	8000c38 <lcdRefresh>
  {
 8000d66:	e7dc      	b.n	8000d22 <main+0x56>
 8000d68:	200032b0 	.word	0x200032b0
 8000d6c:	20003268 	.word	0x20003268
 8000d70:	08005e04 	.word	0x08005e04
 8000d74:	20002fb4 	.word	0x20002fb4
 8000d78:	2000333c 	.word	0x2000333c
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	08005e0c 	.word	0x08005e0c
 8000d84:	20000011 	.word	0x20000011
 8000d88:	20000025 	.word	0x20000025
 8000d8c:	20000030 	.word	0x20000030

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 ffbe 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000df0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e04:	23a8      	movs	r3, #168	; 0xa8
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 f84b 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e20:	f000 f840 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2105      	movs	r1, #5
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 faac 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e4e:	f000 f829 	bl	8000ea4 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d103      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e76:	2101      	movs	r1, #1
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e7a:	f000 fffe 	bl	8001e7a <HAL_GPIO_TogglePin>
//		lcdRefresh();

	}
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40014400 	.word	0x40014400
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_UART_RxCpltCallback>:
char currChar, index;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
//		} else {
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//			HAL_UART_Receive_IT(&huart6, &znak,1);
//		}
	}
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <MX_SPI1_Init+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_SPI1_Init+0x64>)
 8000f02:	f001 fc49 	bl	8002798 <HAL_SPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f0c:	f7ff ffca 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20003210 	.word	0x20003210
 8000f18:	40013000 	.word	0x40013000

08000f1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_SPI_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f92:	f000 fdad 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013000 	.word	0x40013000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 fb8e 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001056:	f002 f811 	bl	800307c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800105c:	f002 f80e 	bl	800307c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200032b0 	.word	0x200032b0
 8001068:	20003268 	.word	0x20003268

0800106c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <USART6_IRQHandler+0x10>)
 8001072:	f002 ff9f 	bl	8003fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000333c 	.word	0x2000333c

08001080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return 1;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_kill>:

int _kill(int pid, int sig)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800109a:	f003 fe09 	bl	8004cb0 <__errno>
 800109e:	4603      	mov	r3, r0
 80010a0:	2216      	movs	r2, #22
 80010a2:	601a      	str	r2, [r3, #0]
	return -1;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_exit>:

void _exit (int status)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe7 	bl	8001090 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010c2:	e7fe      	b.n	80010c2 <_exit+0x12>

080010c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
	}

return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
	}
	return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f003 fd6e 	bl	8004cb0 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20030000 	.word	0x20030000
 8001200:	00000400 	.word	0x00000400
 8001204:	20002fa4 	.word	0x20002fa4
 8001208:	20003398 	.word	0x20003398

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b096      	sub	sp, #88	; 0x58
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2220      	movs	r2, #32
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fd59 	bl	8004d20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_TIM1_Init+0x13c>)
 8001270:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <MX_TIM1_Init+0x140>)
 8001272:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <MX_TIM1_Init+0x13c>)
 8001276:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800127a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <MX_TIM1_Init+0x13c>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_TIM1_Init+0x13c>)
 8001284:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <MX_TIM1_Init+0x13c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <MX_TIM1_Init+0x13c>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001296:	4b35      	ldr	r3, [pc, #212]	; (800136c <MX_TIM1_Init+0x13c>)
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129c:	4833      	ldr	r0, [pc, #204]	; (800136c <MX_TIM1_Init+0x13c>)
 800129e:	f001 fd0b 	bl	8002cb8 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f7ff fdfc 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b6:	4619      	mov	r1, r3
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <MX_TIM1_Init+0x13c>)
 80012ba:	f002 f8a9 	bl	8003410 <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012c4:	f7ff fdee 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c8:	4828      	ldr	r0, [pc, #160]	; (800136c <MX_TIM1_Init+0x13c>)
 80012ca:	f001 fdb5 	bl	8002e38 <HAL_TIM_PWM_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012d4:	f7ff fde6 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e4:	4619      	mov	r1, r3
 80012e6:	4821      	ldr	r0, [pc, #132]	; (800136c <MX_TIM1_Init+0x13c>)
 80012e8:	f002 fc92 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80012f2:	f7ff fdd7 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <MX_TIM1_Init+0x13c>)
 800131c:	f001 ffb6 	bl	800328c <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001326:	f7ff fdbd 	bl	8000ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001342:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM1_Init+0x13c>)
 800134e:	f002 fcdb 	bl	8003d08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001358:	f7ff fda4 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM1_Init+0x13c>)
 800135e:	f000 f873 	bl	8001448 <HAL_TIM_MspPostInit>

}
 8001362:	bf00      	nop
 8001364:	3758      	adds	r7, #88	; 0x58
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200032b0 	.word	0x200032b0
 8001370:	40010000 	.word	0x40010000

08001374 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_TIM10_Init+0x40>)
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <MX_TIM10_Init+0x44>)
 800137c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <MX_TIM10_Init+0x40>)
 8001380:	f244 129f 	movw	r2, #16799	; 0x419f
 8001384:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_TIM10_Init+0x40>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_TIM10_Init+0x40>)
 800138e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001392:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_TIM10_Init+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_TIM10_Init+0x40>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_TIM10_Init+0x40>)
 80013a2:	f001 fc89 	bl	8002cb8 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80013ac:	f7ff fd7a 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20003268 	.word	0x20003268
 80013b8:	40014400 	.word	0x40014400

080013bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_TIM_Base_MspInit+0x80>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d116      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2019      	movs	r0, #25
 80013f0:	f000 fab5 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013f4:	2019      	movs	r0, #25
 80013f6:	f000 face 	bl	8001996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80013fa:	e01a      	b.n	8001432 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_TIM_Base_MspInit+0x88>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d115      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x84>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2019      	movs	r0, #25
 8001428:	f000 fa99 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800142c:	2019      	movs	r0, #25
 800142e:	f000 fab2 	bl	8001996 <HAL_NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800
 8001444:	40014400 	.word	0x40014400

08001448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <HAL_TIM_MspPostInit+0x68>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11e      	bne.n	80014a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_TIM_MspPostInit+0x6c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_TIM_MspPostInit+0x70>)
 80014a4:	f000 fb24 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010000 	.word	0x40010000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART3_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART3_UART_Init+0x4c>)
 80014f4:	f002 fc6e 	bl	8003dd4 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f7ff fcd1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200032f8 	.word	0x200032f8
 800150c:	40004800 	.word	0x40004800

08001510 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_USART6_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART6_UART_Init+0x4c>)
 800151c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001520:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART6_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001536:	2204      	movs	r2, #4
 8001538:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART6_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART6_UART_Init+0x4c>)
 8001548:	f002 fc44 	bl	8003dd4 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f7ff fca7 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000333c 	.word	0x2000333c
 8001560:	40011400 	.word	0x40011400

08001564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a36      	ldr	r2, [pc, #216]	; (800165c <HAL_UART_MspInit+0xf8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12d      	bne.n	80015e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_UART_MspInit+0xfc>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_UART_MspInit+0xfc>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_UART_MspInit+0xfc>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d0:	2307      	movs	r3, #7
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <HAL_UART_MspInit+0x100>)
 80015dc:	f000 fa88 	bl	8001af0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80015e0:	e038      	b.n	8001654 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_UART_MspInit+0x104>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d133      	bne.n	8001654 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	6453      	str	r3, [r2, #68]	; 0x44
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_UART_MspInit+0xfc>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0xfc>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_UART_MspInit+0xfc>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0xfc>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001634:	2308      	movs	r3, #8
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_UART_MspInit+0x108>)
 8001640:	f000 fa56 	bl	8001af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2047      	movs	r0, #71	; 0x47
 800164a:	f000 f988 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800164e:	2047      	movs	r0, #71	; 0x47
 8001650:	f000 f9a1 	bl	8001996 <HAL_NVIC_EnableIRQ>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004800 	.word	0x40004800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40011400 	.word	0x40011400
 800166c:	40020800 	.word	0x40020800

08001670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001676:	490e      	ldr	r1, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800168c:	4c0b      	ldr	r4, [pc, #44]	; (80016bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169a:	f7ff fdb7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169e:	f003 fb0d 	bl	8004cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7ff fb13 	bl	8000ccc <main>
  bx  lr    
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016b4:	08008af4 	.word	0x08008af4
  ldr r2, =_sbss
 80016b8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016bc:	20003394 	.word	0x20003394

080016c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_Init+0x40>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_Init+0x40>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x40>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f92b 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fc58 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f943 	bl	80019b2 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f90b 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000034 	.word	0x20000034
 8001760:	2000003c 	.word	0x2000003c
 8001764:	20000038 	.word	0x20000038

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000003c 	.word	0x2000003c
 800178c:	20003380 	.word	0x20003380

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20003380 	.word	0x20003380

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff feda 	bl	8001790 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d008      	beq.n	80019fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e052      	b.n	8001aa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0216 	bic.w	r2, r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_DMA_Abort+0x62>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0208 	bic.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e013      	b.n	8001a76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fe9f 	bl	8001790 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d90c      	bls.n	8001a76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e015      	b.n	8001aa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e4      	bne.n	8001a4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	223f      	movs	r2, #63	; 0x3f
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e00c      	b.n	8001ae2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2205      	movs	r2, #5
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e177      	b.n	8001dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8166 	bne.w	8001df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80c0 	beq.w	8001df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a61      	ldr	r2, [pc, #388]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d037      	beq.n	8001d2e <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d031      	beq.n	8001d2a <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_GPIO_Init+0x338>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x33c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x340>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x22a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x344>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a51      	ldr	r2, [pc, #324]	; (8001e38 <HAL_GPIO_Init+0x348>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <HAL_GPIO_Init+0x34c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	; (8001e40 <HAL_GPIO_Init+0x350>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001d06:	2309      	movs	r3, #9
 8001d08:	e012      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	e010      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0e:	2308      	movs	r3, #8
 8001d10:	e00e      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d72:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f ae84 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40022400 	.word	0x40022400
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e264      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d075      	beq.n	8001fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	4ba3      	ldr	r3, [pc, #652]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4ba0      	ldr	r3, [pc, #640]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b9d      	ldr	r3, [pc, #628]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b99      	ldr	r3, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d05b      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d157      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e23f      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x74>
 8001f16:	4b91      	ldr	r3, [pc, #580]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a90      	ldr	r2, [pc, #576]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a8a      	ldr	r2, [pc, #552]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a87      	ldr	r2, [pc, #540]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f48:	4b84      	ldr	r3, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a83      	ldr	r2, [pc, #524]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a80      	ldr	r2, [pc, #512]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc12 	bl	8001790 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fc0e 	bl	8001790 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e204      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xc0>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fbfe 	bl	8001790 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fbfa 	bl	8001790 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1f0      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b6c      	ldr	r3, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0xe8>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c4      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4952      	ldr	r1, [pc, #328]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e03a      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_RCC_OscConfig+0x2b0>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fbb3 	bl	8001790 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fbaf 	bl	8001790 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1a5      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4940      	ldr	r1, [pc, #256]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_RCC_OscConfig+0x2b0>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fb92 	bl	8001790 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff fb8e 	bl	8001790 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e184      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff fb72 	bl	8001790 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff fb6e 	bl	8001790 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e164      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x200>
 80020ce:	e015      	b.n	80020fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fb5b 	bl	8001790 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7ff fb57 	bl	8001790 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e14d      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a0 	beq.w	800224a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d121      	bne.n	800218a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb1d 	bl	8001790 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e011      	b.n	800217e <HAL_RCC_OscConfig+0x2ce>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	42470000 	.word	0x42470000
 8002164:	42470e80 	.word	0x42470e80
 8002168:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff fb10 	bl	8001790 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e106      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_OscConfig+0x4e4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x32a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
 80021a8:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x32a>
 80021c2:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a74      	ldr	r2, [pc, #464]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff fad5 	bl	8001790 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fad1 	bl	8001790 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0c5      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x33a>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff fabf 	bl	8001790 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff fabb 	bl	8001790 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0af      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a55      	ldr	r2, [pc, #340]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 809b 	beq.w	800238a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d05c      	beq.n	800231a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d141      	bne.n	80022ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x4ec>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff fa8f 	bl	8001790 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff fa8b 	bl	8001790 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e081      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	019b      	lsls	r3, r3, #6
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	061b      	lsls	r3, r3, #24
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_OscConfig+0x4ec>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fa64 	bl	8001790 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fa60 	bl	8001790 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e056      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x41c>
 80022ea:	e04e      	b.n	800238a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7ff fa4d 	bl	8001790 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7ff fa49 	bl	8001790 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e03f      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x44a>
 8002318:	e037      	b.n	800238a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e032      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d028      	beq.n	8002386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d121      	bne.n	8002386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d11a      	bne.n	8002386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800235c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235e:	4293      	cmp	r3, r2
 8002360:	d111      	bne.n	8002386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40007000 	.word	0x40007000
 8002398:	40023800 	.word	0x40023800
 800239c:	42470060 	.word	0x42470060

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0cc      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d044      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d119      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d003      	beq.n	800245e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e067      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4934      	ldr	r1, [pc, #208]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7ff f97e 	bl	8001790 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7ff f97a 	bl	8001790 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04f      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d20c      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f8de 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00
 800255c:	40023800 	.word	0x40023800
 8002560:	08008980 	.word	0x08008980
 8002564:	20000034 	.word	0x20000034
 8002568:	20000038 	.word	0x20000038

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	2300      	movs	r3, #0
 800257e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002584:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d00d      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x40>
 8002590:	2b08      	cmp	r3, #8
 8002592:	f200 80bd 	bhi.w	8002710 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
 800259a:	2b04      	cmp	r3, #4
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800259e:	e0b7      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025a2:	60bb      	str	r3, [r7, #8]
       break;
 80025a4:	e0b7      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025a8:	60bb      	str	r3, [r7, #8]
      break;
 80025aa:	e0b4      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b6:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d04d      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b58      	ldr	r3, [pc, #352]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	461a      	mov	r2, r3
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	ea02 0800 	and.w	r8, r2, r0
 80025da:	ea03 0901 	and.w	r9, r3, r1
 80025de:	4640      	mov	r0, r8
 80025e0:	4649      	mov	r1, r9
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	014b      	lsls	r3, r1, #5
 80025ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025f0:	0142      	lsls	r2, r0, #5
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	ebb0 0008 	subs.w	r0, r0, r8
 80025fa:	eb61 0109 	sbc.w	r1, r1, r9
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	018b      	lsls	r3, r1, #6
 8002608:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800260c:	0182      	lsls	r2, r0, #6
 800260e:	1a12      	subs	r2, r2, r0
 8002610:	eb63 0301 	sbc.w	r3, r3, r1
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	00d9      	lsls	r1, r3, #3
 800261e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002622:	00d0      	lsls	r0, r2, #3
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	eb12 0208 	adds.w	r2, r2, r8
 800262c:	eb43 0309 	adc.w	r3, r3, r9
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	0259      	lsls	r1, r3, #9
 800263a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800263e:	0250      	lsls	r0, r2, #9
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	f7fd fe26 	bl	80002a0 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e04a      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	461a      	mov	r2, r3
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	ea02 0400 	and.w	r4, r2, r0
 8002676:	ea03 0501 	and.w	r5, r3, r1
 800267a:	4620      	mov	r0, r4
 800267c:	4629      	mov	r1, r5
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	014b      	lsls	r3, r1, #5
 8002688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800268c:	0142      	lsls	r2, r0, #5
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	1b00      	subs	r0, r0, r4
 8002694:	eb61 0105 	sbc.w	r1, r1, r5
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	018b      	lsls	r3, r1, #6
 80026a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026a6:	0182      	lsls	r2, r0, #6
 80026a8:	1a12      	subs	r2, r2, r0
 80026aa:	eb63 0301 	sbc.w	r3, r3, r1
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	00d9      	lsls	r1, r3, #3
 80026b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026bc:	00d0      	lsls	r0, r2, #3
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	1912      	adds	r2, r2, r4
 80026c4:	eb45 0303 	adc.w	r3, r5, r3
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	0299      	lsls	r1, r3, #10
 80026d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026d6:	0290      	lsls	r0, r2, #10
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	f7fd fdda 	bl	80002a0 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	60bb      	str	r3, [r7, #8]
      break;
 800270e:	e002      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002712:	60bb      	str	r3, [r7, #8]
      break;
 8002714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002716:	68bb      	ldr	r3, [r7, #8]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000034 	.word	0x20000034

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08008990 	.word	0x08008990

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffdc 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0b5b      	lsrs	r3, r3, #13
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	08008990 	.word	0x08008990

08002798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07b      	b.n	80028a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d009      	beq.n	80027d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
 80027c2:	e005      	b.n	80027d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fb96 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0104 	and.w	r1, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0210 	and.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_SPI_Transmit+0x22>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e126      	b.n	8002b1a <HAL_SPI_Transmit+0x270>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d4:	f7fe ff5c 	bl	8001790 <HAL_GetTick>
 80028d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ee:	e10b      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Transmit+0x52>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002900:	e102      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2203      	movs	r2, #3
 8002906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002948:	d10f      	bne.n	800296a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d007      	beq.n	8002988 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002990:	d14b      	bne.n	8002a2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0xf6>
 800299a:	8afb      	ldrh	r3, [r7, #22]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d13e      	bne.n	8002a1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c4:	e02b      	b.n	8002a1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d112      	bne.n	80029fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	1c9a      	adds	r2, r3, #2
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f8:	e011      	b.n	8002a1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fa:	f7fe fec9 	bl	8001790 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d803      	bhi.n	8002a12 <HAL_SPI_Transmit+0x168>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_Transmit+0x16e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a1c:	e074      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ce      	bne.n	80029c6 <HAL_SPI_Transmit+0x11c>
 8002a28:	e04c      	b.n	8002ac4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0x18e>
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d140      	bne.n	8002aba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a5e:	e02c      	b.n	8002aba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d113      	bne.n	8002a96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a94:	e011      	b.n	8002aba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a96:	f7fe fe7b 	bl	8001790 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_Transmit+0x204>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x20a>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab8:	e026      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1cd      	bne.n	8002a60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8b3 	bl	8002c34 <SPI_EndRxTxTransaction>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e000      	b.n	8002b08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b34:	f7fe fe2c 	bl	8001790 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b44:	f7fe fe24 	bl	8001790 <HAL_GetTick>
 8002b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b4a:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	015b      	lsls	r3, r3, #5
 8002b50:	0d1b      	lsrs	r3, r3, #20
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b5a:	e054      	b.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d050      	beq.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b64:	f7fe fe14 	bl	8001790 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d902      	bls.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d13d      	bne.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d111      	bne.n	8002bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	d004      	beq.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d107      	bne.n	8002bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc0:	d10f      	bne.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e017      	b.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d19b      	bne.n	8002b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000034 	.word	0x20000034

08002c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <SPI_EndRxTxTransaction+0x7c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <SPI_EndRxTxTransaction+0x80>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0d5b      	lsrs	r3, r3, #21
 8002c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d112      	bne.n	8002c86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ff5a 	bl	8002b24 <SPI_WaitFlagStateUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d0f2      	beq.n	8002c86 <SPI_EndRxTxTransaction+0x52>
 8002ca0:	e000      	b.n	8002ca4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ca2:	bf00      	nop
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000034 	.word	0x20000034
 8002cb4:	165e9f81 	.word	0x165e9f81

08002cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e041      	b.n	8002d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fb6c 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 fc7a 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d001      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04e      	b.n	8002e0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_TIM_Base_Start_IT+0xc4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_TIM_Base_Start_IT+0xc8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_TIM_Base_Start_IT+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_TIM_Base_Start_IT+0xd4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x80>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d111      	bne.n	8002dfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d010      	beq.n	8002e0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	e007      	b.n	8002e0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	40010400 	.word	0x40010400
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40001800 	.word	0x40001800

08002e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f839 	bl	8002ed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fbba 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_TIM_PWM_Start+0x24>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e022      	b.n	8002f56 <HAL_TIM_PWM_Start+0x6a>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d109      	bne.n	8002f2a <HAL_TIM_PWM_Start+0x3e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e015      	b.n	8002f56 <HAL_TIM_PWM_Start+0x6a>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d109      	bne.n	8002f44 <HAL_TIM_PWM_Start+0x58>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e008      	b.n	8002f56 <HAL_TIM_PWM_Start+0x6a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07c      	b.n	8003058 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x82>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f6c:	e013      	b.n	8002f96 <HAL_TIM_PWM_Start+0xaa>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start+0x92>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7c:	e00b      	b.n	8002f96 <HAL_TIM_PWM_Start+0xaa>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Start+0xa2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	e003      	b.n	8002f96 <HAL_TIM_PWM_Start+0xaa>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fe10 	bl	8003bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <HAL_TIM_PWM_Start+0x174>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_TIM_PWM_Start+0xcc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <HAL_TIM_PWM_Start+0x178>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_PWM_Start+0xd0>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_TIM_PWM_Start+0xd2>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_TIM_PWM_Start+0x174>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d01d      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_TIM_PWM_Start+0x17c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_TIM_PWM_Start+0x180>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_TIM_PWM_Start+0x184>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_TIM_PWM_Start+0x178>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_TIM_PWM_Start+0x188>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIM_PWM_Start+0x136>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_TIM_PWM_Start+0x18c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b06      	cmp	r3, #6
 8003032:	d010      	beq.n	8003056 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e007      	b.n	8003056 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40010000 	.word	0x40010000
 8003064:	40010400 	.word	0x40010400
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0202 	mvn.w	r2, #2
 80030a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa77 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa69 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fa7a 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0204 	mvn.w	r2, #4
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa4d 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa3f 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa50 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b08      	cmp	r3, #8
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b08      	cmp	r3, #8
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0208 	mvn.w	r2, #8
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa23 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa15 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa26 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b10      	cmp	r3, #16
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b10      	cmp	r3, #16
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0210 	mvn.w	r2, #16
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2208      	movs	r2, #8
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9f9 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9eb 	bl	800359e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f9fc 	bl	80035c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0201 	mvn.w	r2, #1
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fe32 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fdca 	bl	8003dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9c1 	bl	80035da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b20      	cmp	r3, #32
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b20      	cmp	r3, #32
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0220 	mvn.w	r2, #32
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fd94 	bl	8003dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e0ae      	b.n	8003408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	f200 809f 	bhi.w	80033f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ba:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080033f9 	.word	0x080033f9
 80032c8:	080033f9 	.word	0x080033f9
 80032cc:	080033f9 	.word	0x080033f9
 80032d0:	08003335 	.word	0x08003335
 80032d4:	080033f9 	.word	0x080033f9
 80032d8:	080033f9 	.word	0x080033f9
 80032dc:	080033f9 	.word	0x080033f9
 80032e0:	08003377 	.word	0x08003377
 80032e4:	080033f9 	.word	0x080033f9
 80032e8:	080033f9 	.word	0x080033f9
 80032ec:	080033f9 	.word	0x080033f9
 80032f0:	080033b7 	.word	0x080033b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa18 	bl	8003730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
      break;
 8003332:	e064      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa68 	bl	8003810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	021a      	lsls	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      break;
 8003374:	e043      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fabd 	bl	80038fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0208 	orr.w	r2, r2, #8
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
      break;
 80033b4:	e023      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb11 	bl	80039e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	61da      	str	r2, [r3, #28]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
      break;
 80033fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b4      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x186>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d03e      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	f200 8087 	bhi.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x172>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d87f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d01a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d87b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d050      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x11a>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d877      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d03c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xfa>
 8003490:	2b50      	cmp	r3, #80	; 0x50
 8003492:	d873      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d058      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x13a>
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d86f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d064      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d86b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d060      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d867      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d05a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b4:	e062      	b.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f000 fb5d 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04f      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f000 fb46 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 faba 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fb13 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003528:	e02c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fad9 	bl	8003aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fb03 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003548:	e01c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fa9a 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 faf3 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003568:	e00c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 faea 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 800357a:	e003      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e000      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d00f      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00b      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d027      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d023      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <TIM_Base_SetConfig+0x128>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <TIM_Base_SetConfig+0x12c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <TIM_Base_SetConfig+0x130>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <TIM_Base_SetConfig+0x134>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <TIM_Base_SetConfig+0x138>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <TIM_Base_SetConfig+0x13c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <TIM_Base_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <TIM_Base_SetConfig+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	40001800 	.word	0x40001800
 8003728:	40001c00 	.word	0x40001c00
 800372c:	40002000 	.word	0x40002000

08003730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0302 	bic.w	r3, r3, #2
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a20      	ldr	r2, [pc, #128]	; (8003808 <TIM_OC1_SetConfig+0xd8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC1_SetConfig+0x64>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1f      	ldr	r2, [pc, #124]	; (800380c <TIM_OC1_SetConfig+0xdc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10c      	bne.n	80037ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0308 	bic.w	r3, r3, #8
 800379a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <TIM_OC1_SetConfig+0xd8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_OC1_SetConfig+0x8e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <TIM_OC1_SetConfig+0xdc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	621a      	str	r2, [r3, #32]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40010000 	.word	0x40010000
 800380c:	40010400 	.word	0x40010400

08003810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f023 0210 	bic.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0320 	bic.w	r3, r3, #32
 800385a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x68>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10d      	bne.n	8003894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <TIM_OC2_SetConfig+0xe4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC2_SetConfig+0x94>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC2_SetConfig+0xe8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d113      	bne.n	80038cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40010400 	.word	0x40010400

080038fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a21      	ldr	r2, [pc, #132]	; (80039dc <TIM_OC3_SetConfig+0xe0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x66>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10d      	bne.n	800397e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <TIM_OC3_SetConfig+0xe0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC3_SetConfig+0x92>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <TIM_OC3_SetConfig+0xe4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d113      	bne.n	80039b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40010400 	.word	0x40010400

080039e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	031b      	lsls	r3, r3, #12
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <TIM_OC4_SetConfig+0xa4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC4_SetConfig+0x68>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <TIM_OC4_SetConfig+0xa8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e05a      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40001800 	.word	0x40001800

08003d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e03d      	b.n	8003da0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03f      	b.n	8003e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd fbb2 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fd81 	bl	8004920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	; 0x28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 808c 	bne.w	8003fa8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Receive+0x2e>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e084      	b.n	8003faa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive+0x40>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e07d      	b.n	8003faa <HAL_UART_Receive+0x13c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	; 0x22
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fc61 	bl	8001790 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_UART_Receive+0x8a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e003      	b.n	8003f00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f08:	e043      	b.n	8003f92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2120      	movs	r1, #32
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fafb 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e042      	b.n	8003faa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	3302      	adds	r3, #2
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e01f      	b.n	8003f84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d007      	beq.n	8003f5e <HAL_UART_Receive+0xf0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_UART_Receive+0xfe>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e008      	b.n	8003f7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1b6      	bne.n	8003f0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b0ba      	sub	sp, #232	; 0xe8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_UART_IRQHandler+0x66>
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fbc9 	bl	80047aa <UART_Receive_IT>
      return;
 8004018:	e256      	b.n	80044c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800401a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80de 	beq.w	80041e0 <HAL_UART_IRQHandler+0x22c>
 8004024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004034:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80d1 	beq.w	80041e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_UART_IRQHandler+0xae>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_UART_IRQHandler+0xd2>
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_UART_IRQHandler+0xf6>
 8004092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <HAL_UART_IRQHandler+0x126>
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f043 0208 	orr.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 81ed 	beq.w	80044be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_UART_IRQHandler+0x14e>
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fb54 	bl	80047aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <HAL_UART_IRQHandler+0x17a>
 8004126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04f      	beq.n	80041ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fa5c 	bl	80045ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d141      	bne.n	80041c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800415c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800416e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800417a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1d9      	bne.n	8004142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	d013      	beq.n	80041be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4a7d      	ldr	r2, [pc, #500]	; (8004390 <HAL_UART_IRQHandler+0x3dc>)
 800419c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd fc81 	bl	8001aaa <HAL_DMA_Abort_IT>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b8:	4610      	mov	r0, r2
 80041ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041bc:	e00e      	b.n	80041dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f990 	bl	80044e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e00a      	b.n	80041dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f98c 	bl	80044e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e006      	b.n	80041dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f988 	bl	80044e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041da:	e170      	b.n	80044be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	bf00      	nop
    return;
 80041de:	e16e      	b.n	80044be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	f040 814a 	bne.w	800447e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8143 	beq.w	800447e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 813c 	beq.w	800447e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	f040 80b4 	bne.w	8004394 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8140 	beq.w	80044c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800424a:	429a      	cmp	r2, r3
 800424c:	f080 8139 	bcs.w	80044c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004256:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	f000 8088 	beq.w	8004376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800427c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800429e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1d9      	bne.n	8004266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3314      	adds	r3, #20
 80042d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e1      	bne.n	80042b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3314      	adds	r3, #20
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004312:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004314:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e3      	bne.n	80042ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004346:	f023 0310 	bic.w	r3, r3, #16
 800434a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004358:	65ba      	str	r2, [r7, #88]	; 0x58
 800435a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800435e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e3      	bne.n	8004334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd fb2a 	bl	80019ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800437e:	b29b      	uxth	r3, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8b6 	bl	80044f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800438c:	e099      	b.n	80044c2 <HAL_UART_IRQHandler+0x50e>
 800438e:	bf00      	nop
 8004390:	080046b3 	.word	0x080046b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800439c:	b29b      	uxth	r3, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 808b 	beq.w	80044c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8086 	beq.w	80044c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043de:	647a      	str	r2, [r7, #68]	; 0x44
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3314      	adds	r3, #20
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	623b      	str	r3, [r7, #32]
   return(result);
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004416:	633a      	str	r2, [r7, #48]	; 0x30
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e3      	bne.n	80043f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	60fb      	str	r3, [r7, #12]
   return(result);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0310 	bic.w	r3, r3, #16
 800444e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800445c:	61fa      	str	r2, [r7, #28]
 800445e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	69b9      	ldr	r1, [r7, #24]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	617b      	str	r3, [r7, #20]
   return(result);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e3      	bne.n	8004438 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f83e 	bl	80044f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800447c:	e023      	b.n	80044c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_UART_IRQHandler+0x4ea>
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f91f 	bl	80046da <UART_Transmit_IT>
    return;
 800449c:	e014      	b.n	80044c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <HAL_UART_IRQHandler+0x514>
 80044aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f95f 	bl	800477a <UART_EndTransmit_IT>
    return;
 80044bc:	e004      	b.n	80044c8 <HAL_UART_IRQHandler+0x514>
    return;
 80044be:	bf00      	nop
 80044c0:	e002      	b.n	80044c8 <HAL_UART_IRQHandler+0x514>
      return;
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <HAL_UART_IRQHandler+0x514>
      return;
 80044c6:	bf00      	nop
  }
}
 80044c8:	37e8      	adds	r7, #232	; 0xe8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop

080044d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b090      	sub	sp, #64	; 0x40
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004520:	e050      	b.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d04c      	beq.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <UART_WaitOnFlagUntilTimeout+0x30>
 8004530:	f7fd f92e 	bl	8001790 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453c:	429a      	cmp	r2, r3
 800453e:	d241      	bcs.n	80045c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004560:	637a      	str	r2, [r7, #52]	; 0x34
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	613b      	str	r3, [r7, #16]
   return(result);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004594:	623a      	str	r2, [r7, #32]
 8004596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e00f      	b.n	80045e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d09f      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3740      	adds	r7, #64	; 0x40
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b095      	sub	sp, #84	; 0x54
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004614:	643a      	str	r2, [r7, #64]	; 0x40
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800461a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	61fb      	str	r3, [r7, #28]
   return(result);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	2b01      	cmp	r3, #1
 8004662:	d119      	bne.n	8004698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	60bb      	str	r3, [r7, #8]
   return(result);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 0310 	bic.w	r3, r3, #16
 800467a:	647b      	str	r3, [r7, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004684:	61ba      	str	r2, [r7, #24]
 8004686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	613b      	str	r3, [r7, #16]
   return(result);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e5      	bne.n	8004664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046a6:	bf00      	nop
 80046a8:	3754      	adds	r7, #84	; 0x54
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff ff09 	bl	80044e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d13e      	bne.n	800476c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d114      	bne.n	8004722 <UART_Transmit_IT+0x48>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d110      	bne.n	8004722 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]
 8004720:	e008      	b.n	8004734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6211      	str	r1, [r2, #32]
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29b      	uxth	r3, r3
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4619      	mov	r1, r3
 8004742:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fe98 	bl	80044d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08c      	sub	sp, #48	; 0x30
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	f040 80ab 	bne.w	8004916 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d117      	bne.n	80047fa <UART_Receive_IT+0x50>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d113      	bne.n	80047fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	1c9a      	adds	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
 80047f8:	e026      	b.n	8004848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d007      	beq.n	800481e <UART_Receive_IT+0x74>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <UART_Receive_IT+0x82>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e008      	b.n	800483e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	b2da      	uxtb	r2, r3
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4619      	mov	r1, r3
 8004856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004858:	2b00      	cmp	r3, #0
 800485a:	d15a      	bne.n	8004912 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0220 	bic.w	r2, r2, #32
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d135      	bne.n	8004908 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d10a      	bne.n	80048fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fdf9 	bl	80044f8 <HAL_UARTEx_RxEventCallback>
 8004906:	e002      	b.n	800490e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fc fac1 	bl	8000e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e002      	b.n	8004918 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	; 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	b09f      	sub	sp, #124	; 0x7c
 8004926:	af00      	add	r7, sp, #0
 8004928:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	ea40 0301 	orr.w	r3, r0, r1
 8004940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	431a      	orrs	r2, r3
 800494c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	431a      	orrs	r2, r3
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004964:	f021 010c 	bic.w	r1, r1, #12
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496e:	430b      	orrs	r3, r1
 8004970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	6999      	ldr	r1, [r3, #24]
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	ea40 0301 	orr.w	r3, r0, r1
 8004988:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4bc5      	ldr	r3, [pc, #788]	; (8004ca4 <UART_SetConfig+0x384>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d004      	beq.n	800499e <UART_SetConfig+0x7e>
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4bc3      	ldr	r3, [pc, #780]	; (8004ca8 <UART_SetConfig+0x388>)
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800499e:	f7fd fee7 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 80049a2:	6778      	str	r0, [r7, #116]	; 0x74
 80049a4:	e002      	b.n	80049ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049a6:	f7fd fecf 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80049aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b4:	f040 80b6 	bne.w	8004b24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ba:	461c      	mov	r4, r3
 80049bc:	f04f 0500 	mov.w	r5, #0
 80049c0:	4622      	mov	r2, r4
 80049c2:	462b      	mov	r3, r5
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	6439      	str	r1, [r7, #64]	; 0x40
 80049c8:	415b      	adcs	r3, r3
 80049ca:	647b      	str	r3, [r7, #68]	; 0x44
 80049cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d0:	1912      	adds	r2, r2, r4
 80049d2:	eb45 0303 	adc.w	r3, r5, r3
 80049d6:	f04f 0000 	mov.w	r0, #0
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	00d9      	lsls	r1, r3, #3
 80049e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e4:	00d0      	lsls	r0, r2, #3
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	1911      	adds	r1, r2, r4
 80049ec:	6639      	str	r1, [r7, #96]	; 0x60
 80049ee:	416b      	adcs	r3, r5
 80049f0:	667b      	str	r3, [r7, #100]	; 0x64
 80049f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a00:	415b      	adcs	r3, r3
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a0c:	f7fb fc48 	bl	80002a0 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4ba5      	ldr	r3, [pc, #660]	; (8004cac <UART_SetConfig+0x38c>)
 8004a16:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	011e      	lsls	r6, r3, #4
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a20:	461c      	mov	r4, r3
 8004a22:	f04f 0500 	mov.w	r5, #0
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	1891      	adds	r1, r2, r2
 8004a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a2e:	415b      	adcs	r3, r3
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a36:	1912      	adds	r2, r2, r4
 8004a38:	eb45 0303 	adc.w	r3, r5, r3
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	00d9      	lsls	r1, r3, #3
 8004a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a4a:	00d0      	lsls	r0, r2, #3
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	1911      	adds	r1, r2, r4
 8004a52:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a54:	416b      	adcs	r3, r5
 8004a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a66:	415b      	adcs	r3, r3
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a72:	f7fb fc15 	bl	80002a0 <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4b8c      	ldr	r3, [pc, #560]	; (8004cac <UART_SetConfig+0x38c>)
 8004a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	2164      	movs	r1, #100	; 0x64
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	3332      	adds	r3, #50	; 0x32
 8004a8e:	4a87      	ldr	r2, [pc, #540]	; (8004cac <UART_SetConfig+0x38c>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a9c:	441e      	add	r6, r3
 8004a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	1894      	adds	r4, r2, r2
 8004aac:	623c      	str	r4, [r7, #32]
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab6:	1812      	adds	r2, r2, r0
 8004ab8:	eb41 0303 	adc.w	r3, r1, r3
 8004abc:	f04f 0400 	mov.w	r4, #0
 8004ac0:	f04f 0500 	mov.w	r5, #0
 8004ac4:	00dd      	lsls	r5, r3, #3
 8004ac6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aca:	00d4      	lsls	r4, r2, #3
 8004acc:	4622      	mov	r2, r4
 8004ace:	462b      	mov	r3, r5
 8004ad0:	1814      	adds	r4, r2, r0
 8004ad2:	653c      	str	r4, [r7, #80]	; 0x50
 8004ad4:	414b      	adcs	r3, r1
 8004ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	1891      	adds	r1, r2, r2
 8004ae4:	61b9      	str	r1, [r7, #24]
 8004ae6:	415b      	adcs	r3, r3
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004af2:	f7fb fbd5 	bl	80002a0 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <UART_SetConfig+0x38c>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	; 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	3332      	adds	r3, #50	; 0x32
 8004b0e:	4a67      	ldr	r2, [pc, #412]	; (8004cac <UART_SetConfig+0x38c>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 0207 	and.w	r2, r3, #7
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4432      	add	r2, r6
 8004b20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b22:	e0b9      	b.n	8004c98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b26:	461c      	mov	r4, r3
 8004b28:	f04f 0500 	mov.w	r5, #0
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	462b      	mov	r3, r5
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	6139      	str	r1, [r7, #16]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b3c:	1912      	adds	r2, r2, r4
 8004b3e:	eb45 0303 	adc.w	r3, r5, r3
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	00d9      	lsls	r1, r3, #3
 8004b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b50:	00d0      	lsls	r0, r2, #3
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	eb12 0804 	adds.w	r8, r2, r4
 8004b5a:	eb43 0905 	adc.w	r9, r3, r5
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	008b      	lsls	r3, r1, #2
 8004b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b76:	0082      	lsls	r2, r0, #2
 8004b78:	4640      	mov	r0, r8
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb fb90 	bl	80002a0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b49      	ldr	r3, [pc, #292]	; (8004cac <UART_SetConfig+0x38c>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	011e      	lsls	r6, r3, #4
 8004b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b90:	4618      	mov	r0, r3
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	1894      	adds	r4, r2, r2
 8004b9c:	60bc      	str	r4, [r7, #8]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba6:	1812      	adds	r2, r2, r0
 8004ba8:	eb41 0303 	adc.w	r3, r1, r3
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	f04f 0500 	mov.w	r5, #0
 8004bb4:	00dd      	lsls	r5, r3, #3
 8004bb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bba:	00d4      	lsls	r4, r2, #3
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	1814      	adds	r4, r2, r0
 8004bc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bc4:	414b      	adcs	r3, r1
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	008b      	lsls	r3, r1, #2
 8004bdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004be0:	0082      	lsls	r2, r0, #2
 8004be2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004be6:	f7fb fb5b 	bl	80002a0 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <UART_SetConfig+0x38c>)
 8004bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	2164      	movs	r1, #100	; 0x64
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	3332      	adds	r3, #50	; 0x32
 8004c02:	4a2a      	ldr	r2, [pc, #168]	; (8004cac <UART_SetConfig+0x38c>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0e:	441e      	add	r6, r3
 8004c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c12:	4618      	mov	r0, r3
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	1894      	adds	r4, r2, r2
 8004c1e:	603c      	str	r4, [r7, #0]
 8004c20:	415b      	adcs	r3, r3
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c28:	1812      	adds	r2, r2, r0
 8004c2a:	eb41 0303 	adc.w	r3, r1, r3
 8004c2e:	f04f 0400 	mov.w	r4, #0
 8004c32:	f04f 0500 	mov.w	r5, #0
 8004c36:	00dd      	lsls	r5, r3, #3
 8004c38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c3c:	00d4      	lsls	r4, r2, #3
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	eb12 0a00 	adds.w	sl, r2, r0
 8004c46:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f04f 0100 	mov.w	r1, #0
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	008b      	lsls	r3, r1, #2
 8004c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c62:	0082      	lsls	r2, r0, #2
 8004c64:	4650      	mov	r0, sl
 8004c66:	4659      	mov	r1, fp
 8004c68:	f7fb fb1a 	bl	80002a0 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <UART_SetConfig+0x38c>)
 8004c72:	fba3 1302 	umull	r1, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2164      	movs	r1, #100	; 0x64
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	3332      	adds	r3, #50	; 0x32
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <UART_SetConfig+0x38c>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4432      	add	r2, r6
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	377c      	adds	r7, #124	; 0x7c
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	51eb851f 	.word	0x51eb851f

08004cb0 <__errno>:
 8004cb0:	4b01      	ldr	r3, [pc, #4]	; (8004cb8 <__errno+0x8>)
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000040 	.word	0x20000040

08004cbc <__libc_init_array>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4d0d      	ldr	r5, [pc, #52]	; (8004cf4 <__libc_init_array+0x38>)
 8004cc0:	4c0d      	ldr	r4, [pc, #52]	; (8004cf8 <__libc_init_array+0x3c>)
 8004cc2:	1b64      	subs	r4, r4, r5
 8004cc4:	10a4      	asrs	r4, r4, #2
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	42a6      	cmp	r6, r4
 8004cca:	d109      	bne.n	8004ce0 <__libc_init_array+0x24>
 8004ccc:	4d0b      	ldr	r5, [pc, #44]	; (8004cfc <__libc_init_array+0x40>)
 8004cce:	4c0c      	ldr	r4, [pc, #48]	; (8004d00 <__libc_init_array+0x44>)
 8004cd0:	f001 f884 	bl	8005ddc <_init>
 8004cd4:	1b64      	subs	r4, r4, r5
 8004cd6:	10a4      	asrs	r4, r4, #2
 8004cd8:	2600      	movs	r6, #0
 8004cda:	42a6      	cmp	r6, r4
 8004cdc:	d105      	bne.n	8004cea <__libc_init_array+0x2e>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce4:	4798      	blx	r3
 8004ce6:	3601      	adds	r6, #1
 8004ce8:	e7ee      	b.n	8004cc8 <__libc_init_array+0xc>
 8004cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cee:	4798      	blx	r3
 8004cf0:	3601      	adds	r6, #1
 8004cf2:	e7f2      	b.n	8004cda <__libc_init_array+0x1e>
 8004cf4:	08008aec 	.word	0x08008aec
 8004cf8:	08008aec 	.word	0x08008aec
 8004cfc:	08008aec 	.word	0x08008aec
 8004d00:	08008af0 	.word	0x08008af0

08004d04 <memcpy>:
 8004d04:	440a      	add	r2, r1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	4770      	bx	lr
 8004d10:	b510      	push	{r4, lr}
 8004d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d1f9      	bne.n	8004d12 <memcpy+0xe>
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <memset>:
 8004d20:	4402      	add	r2, r0
 8004d22:	4603      	mov	r3, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <strchr>:
 8004d30:	b2c9      	uxtb	r1, r1
 8004d32:	4603      	mov	r3, r0
 8004d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d38:	b11a      	cbz	r2, 8004d42 <strchr+0x12>
 8004d3a:	428a      	cmp	r2, r1
 8004d3c:	d1f9      	bne.n	8004d32 <strchr+0x2>
 8004d3e:	4618      	mov	r0, r3
 8004d40:	4770      	bx	lr
 8004d42:	2900      	cmp	r1, #0
 8004d44:	bf18      	it	ne
 8004d46:	2300      	movne	r3, #0
 8004d48:	e7f9      	b.n	8004d3e <strchr+0xe>

08004d4a <strncpy>:
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	3901      	subs	r1, #1
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b132      	cbz	r2, 8004d60 <strncpy+0x16>
 8004d52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d56:	f803 4b01 	strb.w	r4, [r3], #1
 8004d5a:	3a01      	subs	r2, #1
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	d1f7      	bne.n	8004d50 <strncpy+0x6>
 8004d60:	441a      	add	r2, r3
 8004d62:	2100      	movs	r1, #0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <strncpy+0x20>
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <strncpy+0x1a>

08004d70 <strstr>:
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	780c      	ldrb	r4, [r1, #0]
 8004d74:	b164      	cbz	r4, 8004d90 <strstr+0x20>
 8004d76:	4603      	mov	r3, r0
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	1c5e      	adds	r6, r3, #1
 8004d7e:	b90a      	cbnz	r2, 8004d84 <strstr+0x14>
 8004d80:	4610      	mov	r0, r2
 8004d82:	e005      	b.n	8004d90 <strstr+0x20>
 8004d84:	4294      	cmp	r4, r2
 8004d86:	d108      	bne.n	8004d9a <strstr+0x2a>
 8004d88:	460d      	mov	r5, r1
 8004d8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004d8e:	b902      	cbnz	r2, 8004d92 <strstr+0x22>
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004d96:	4297      	cmp	r7, r2
 8004d98:	d0f7      	beq.n	8004d8a <strstr+0x1a>
 8004d9a:	4633      	mov	r3, r6
 8004d9c:	e7ec      	b.n	8004d78 <strstr+0x8>
	...

08004da0 <strtok>:
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <strtok+0x5c>)
 8004da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004da4:	681e      	ldr	r6, [r3, #0]
 8004da6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004da8:	4605      	mov	r5, r0
 8004daa:	b9fc      	cbnz	r4, 8004dec <strtok+0x4c>
 8004dac:	2050      	movs	r0, #80	; 0x50
 8004dae:	9101      	str	r1, [sp, #4]
 8004db0:	f000 f882 	bl	8004eb8 <malloc>
 8004db4:	9901      	ldr	r1, [sp, #4]
 8004db6:	65b0      	str	r0, [r6, #88]	; 0x58
 8004db8:	4602      	mov	r2, r0
 8004dba:	b920      	cbnz	r0, 8004dc6 <strtok+0x26>
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <strtok+0x60>)
 8004dbe:	4811      	ldr	r0, [pc, #68]	; (8004e04 <strtok+0x64>)
 8004dc0:	2157      	movs	r1, #87	; 0x57
 8004dc2:	f000 f849 	bl	8004e58 <__assert_func>
 8004dc6:	e9c0 4400 	strd	r4, r4, [r0]
 8004dca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004dce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004dd2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004dd6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004dda:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004dde:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004de2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004de6:	6184      	str	r4, [r0, #24]
 8004de8:	7704      	strb	r4, [r0, #28]
 8004dea:	6244      	str	r4, [r0, #36]	; 0x24
 8004dec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004dee:	2301      	movs	r3, #1
 8004df0:	4628      	mov	r0, r5
 8004df2:	b002      	add	sp, #8
 8004df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004df8:	f000 b806 	b.w	8004e08 <__strtok_r>
 8004dfc:	20000040 	.word	0x20000040
 8004e00:	0800899c 	.word	0x0800899c
 8004e04:	080089b3 	.word	0x080089b3

08004e08 <__strtok_r>:
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b908      	cbnz	r0, 8004e10 <__strtok_r+0x8>
 8004e0c:	6810      	ldr	r0, [r2, #0]
 8004e0e:	b188      	cbz	r0, 8004e34 <__strtok_r+0x2c>
 8004e10:	4604      	mov	r4, r0
 8004e12:	4620      	mov	r0, r4
 8004e14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e18:	460f      	mov	r7, r1
 8004e1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e1e:	b91e      	cbnz	r6, 8004e28 <__strtok_r+0x20>
 8004e20:	b965      	cbnz	r5, 8004e3c <__strtok_r+0x34>
 8004e22:	6015      	str	r5, [r2, #0]
 8004e24:	4628      	mov	r0, r5
 8004e26:	e005      	b.n	8004e34 <__strtok_r+0x2c>
 8004e28:	42b5      	cmp	r5, r6
 8004e2a:	d1f6      	bne.n	8004e1a <__strtok_r+0x12>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <__strtok_r+0xa>
 8004e30:	6014      	str	r4, [r2, #0]
 8004e32:	7003      	strb	r3, [r0, #0]
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	461c      	mov	r4, r3
 8004e38:	e00c      	b.n	8004e54 <__strtok_r+0x4c>
 8004e3a:	b915      	cbnz	r5, 8004e42 <__strtok_r+0x3a>
 8004e3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e40:	460e      	mov	r6, r1
 8004e42:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004e46:	42ab      	cmp	r3, r5
 8004e48:	d1f7      	bne.n	8004e3a <__strtok_r+0x32>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f3      	beq.n	8004e36 <__strtok_r+0x2e>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004e54:	6014      	str	r4, [r2, #0]
 8004e56:	e7ed      	b.n	8004e34 <__strtok_r+0x2c>

08004e58 <__assert_func>:
 8004e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <__assert_func+0x2c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4605      	mov	r5, r0
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	b14c      	cbz	r4, 8004e7c <__assert_func+0x24>
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <__assert_func+0x30>)
 8004e6a:	9100      	str	r1, [sp, #0]
 8004e6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <__assert_func+0x34>)
 8004e72:	462b      	mov	r3, r5
 8004e74:	f000 f80e 	bl	8004e94 <fiprintf>
 8004e78:	f000 fc8e 	bl	8005798 <abort>
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__assert_func+0x38>)
 8004e7e:	461c      	mov	r4, r3
 8004e80:	e7f3      	b.n	8004e6a <__assert_func+0x12>
 8004e82:	bf00      	nop
 8004e84:	20000040 	.word	0x20000040
 8004e88:	08008a14 	.word	0x08008a14
 8004e8c:	08008a21 	.word	0x08008a21
 8004e90:	08008a4f 	.word	0x08008a4f

08004e94 <fiprintf>:
 8004e94:	b40e      	push	{r1, r2, r3}
 8004e96:	b503      	push	{r0, r1, lr}
 8004e98:	4601      	mov	r1, r0
 8004e9a:	ab03      	add	r3, sp, #12
 8004e9c:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <fiprintf+0x20>)
 8004e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ea2:	6800      	ldr	r0, [r0, #0]
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	f000 f8e3 	bl	8005070 <_vfiprintf_r>
 8004eaa:	b002      	add	sp, #8
 8004eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb0:	b003      	add	sp, #12
 8004eb2:	4770      	bx	lr
 8004eb4:	20000040 	.word	0x20000040

08004eb8 <malloc>:
 8004eb8:	4b02      	ldr	r3, [pc, #8]	; (8004ec4 <malloc+0xc>)
 8004eba:	4601      	mov	r1, r0
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f000 b853 	b.w	8004f68 <_malloc_r>
 8004ec2:	bf00      	nop
 8004ec4:	20000040 	.word	0x20000040

08004ec8 <_free_r>:
 8004ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eca:	2900      	cmp	r1, #0
 8004ecc:	d048      	beq.n	8004f60 <_free_r+0x98>
 8004ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed2:	9001      	str	r0, [sp, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8004eda:	bfb8      	it	lt
 8004edc:	18e4      	addlt	r4, r4, r3
 8004ede:	f000 fe81 	bl	8005be4 <__malloc_lock>
 8004ee2:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <_free_r+0x9c>)
 8004ee4:	9801      	ldr	r0, [sp, #4]
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	4615      	mov	r5, r2
 8004eea:	b933      	cbnz	r3, 8004efa <_free_r+0x32>
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	6014      	str	r4, [r2, #0]
 8004ef0:	b003      	add	sp, #12
 8004ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ef6:	f000 be7b 	b.w	8005bf0 <__malloc_unlock>
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	d90b      	bls.n	8004f16 <_free_r+0x4e>
 8004efe:	6821      	ldr	r1, [r4, #0]
 8004f00:	1862      	adds	r2, r4, r1
 8004f02:	4293      	cmp	r3, r2
 8004f04:	bf04      	itt	eq
 8004f06:	681a      	ldreq	r2, [r3, #0]
 8004f08:	685b      	ldreq	r3, [r3, #4]
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	bf04      	itt	eq
 8004f0e:	1852      	addeq	r2, r2, r1
 8004f10:	6022      	streq	r2, [r4, #0]
 8004f12:	602c      	str	r4, [r5, #0]
 8004f14:	e7ec      	b.n	8004ef0 <_free_r+0x28>
 8004f16:	461a      	mov	r2, r3
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b10b      	cbz	r3, 8004f20 <_free_r+0x58>
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	d9fa      	bls.n	8004f16 <_free_r+0x4e>
 8004f20:	6811      	ldr	r1, [r2, #0]
 8004f22:	1855      	adds	r5, r2, r1
 8004f24:	42a5      	cmp	r5, r4
 8004f26:	d10b      	bne.n	8004f40 <_free_r+0x78>
 8004f28:	6824      	ldr	r4, [r4, #0]
 8004f2a:	4421      	add	r1, r4
 8004f2c:	1854      	adds	r4, r2, r1
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	d1dd      	bne.n	8004ef0 <_free_r+0x28>
 8004f34:	681c      	ldr	r4, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	4421      	add	r1, r4
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	e7d7      	b.n	8004ef0 <_free_r+0x28>
 8004f40:	d902      	bls.n	8004f48 <_free_r+0x80>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6003      	str	r3, [r0, #0]
 8004f46:	e7d3      	b.n	8004ef0 <_free_r+0x28>
 8004f48:	6825      	ldr	r5, [r4, #0]
 8004f4a:	1961      	adds	r1, r4, r5
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf04      	itt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	bf04      	itt	eq
 8004f58:	1949      	addeq	r1, r1, r5
 8004f5a:	6021      	streq	r1, [r4, #0]
 8004f5c:	6054      	str	r4, [r2, #4]
 8004f5e:	e7c7      	b.n	8004ef0 <_free_r+0x28>
 8004f60:	b003      	add	sp, #12
 8004f62:	bd30      	pop	{r4, r5, pc}
 8004f64:	20002fa8 	.word	0x20002fa8

08004f68 <_malloc_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	1ccd      	adds	r5, r1, #3
 8004f6c:	f025 0503 	bic.w	r5, r5, #3
 8004f70:	3508      	adds	r5, #8
 8004f72:	2d0c      	cmp	r5, #12
 8004f74:	bf38      	it	cc
 8004f76:	250c      	movcc	r5, #12
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	db01      	blt.n	8004f82 <_malloc_r+0x1a>
 8004f7e:	42a9      	cmp	r1, r5
 8004f80:	d903      	bls.n	8004f8a <_malloc_r+0x22>
 8004f82:	230c      	movs	r3, #12
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	2000      	movs	r0, #0
 8004f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f8a:	f000 fe2b 	bl	8005be4 <__malloc_lock>
 8004f8e:	4921      	ldr	r1, [pc, #132]	; (8005014 <_malloc_r+0xac>)
 8004f90:	680a      	ldr	r2, [r1, #0]
 8004f92:	4614      	mov	r4, r2
 8004f94:	b99c      	cbnz	r4, 8004fbe <_malloc_r+0x56>
 8004f96:	4f20      	ldr	r7, [pc, #128]	; (8005018 <_malloc_r+0xb0>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b923      	cbnz	r3, 8004fa6 <_malloc_r+0x3e>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f000 fb2a 	bl	80055f8 <_sbrk_r>
 8004fa4:	6038      	str	r0, [r7, #0]
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f000 fb25 	bl	80055f8 <_sbrk_r>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	d123      	bne.n	8004ffa <_malloc_r+0x92>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 fe1a 	bl	8005bf0 <__malloc_unlock>
 8004fbc:	e7e3      	b.n	8004f86 <_malloc_r+0x1e>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	1b5b      	subs	r3, r3, r5
 8004fc2:	d417      	bmi.n	8004ff4 <_malloc_r+0x8c>
 8004fc4:	2b0b      	cmp	r3, #11
 8004fc6:	d903      	bls.n	8004fd0 <_malloc_r+0x68>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	441c      	add	r4, r3
 8004fcc:	6025      	str	r5, [r4, #0]
 8004fce:	e004      	b.n	8004fda <_malloc_r+0x72>
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	42a2      	cmp	r2, r4
 8004fd4:	bf0c      	ite	eq
 8004fd6:	600b      	streq	r3, [r1, #0]
 8004fd8:	6053      	strne	r3, [r2, #4]
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f000 fe08 	bl	8005bf0 <__malloc_unlock>
 8004fe0:	f104 000b 	add.w	r0, r4, #11
 8004fe4:	1d23      	adds	r3, r4, #4
 8004fe6:	f020 0007 	bic.w	r0, r0, #7
 8004fea:	1ac2      	subs	r2, r0, r3
 8004fec:	d0cc      	beq.n	8004f88 <_malloc_r+0x20>
 8004fee:	1a1b      	subs	r3, r3, r0
 8004ff0:	50a3      	str	r3, [r4, r2]
 8004ff2:	e7c9      	b.n	8004f88 <_malloc_r+0x20>
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	6864      	ldr	r4, [r4, #4]
 8004ff8:	e7cc      	b.n	8004f94 <_malloc_r+0x2c>
 8004ffa:	1cc4      	adds	r4, r0, #3
 8004ffc:	f024 0403 	bic.w	r4, r4, #3
 8005000:	42a0      	cmp	r0, r4
 8005002:	d0e3      	beq.n	8004fcc <_malloc_r+0x64>
 8005004:	1a21      	subs	r1, r4, r0
 8005006:	4630      	mov	r0, r6
 8005008:	f000 faf6 	bl	80055f8 <_sbrk_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d1dd      	bne.n	8004fcc <_malloc_r+0x64>
 8005010:	e7cf      	b.n	8004fb2 <_malloc_r+0x4a>
 8005012:	bf00      	nop
 8005014:	20002fa8 	.word	0x20002fa8
 8005018:	20002fac 	.word	0x20002fac

0800501c <__sfputc_r>:
 800501c:	6893      	ldr	r3, [r2, #8]
 800501e:	3b01      	subs	r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	b410      	push	{r4}
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	da08      	bge.n	800503a <__sfputc_r+0x1e>
 8005028:	6994      	ldr	r4, [r2, #24]
 800502a:	42a3      	cmp	r3, r4
 800502c:	db01      	blt.n	8005032 <__sfputc_r+0x16>
 800502e:	290a      	cmp	r1, #10
 8005030:	d103      	bne.n	800503a <__sfputc_r+0x1e>
 8005032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005036:	f000 baef 	b.w	8005618 <__swbuf_r>
 800503a:	6813      	ldr	r3, [r2, #0]
 800503c:	1c58      	adds	r0, r3, #1
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	7019      	strb	r1, [r3, #0]
 8005042:	4608      	mov	r0, r1
 8005044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005048:	4770      	bx	lr

0800504a <__sfputs_r>:
 800504a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	4614      	mov	r4, r2
 8005052:	18d5      	adds	r5, r2, r3
 8005054:	42ac      	cmp	r4, r5
 8005056:	d101      	bne.n	800505c <__sfputs_r+0x12>
 8005058:	2000      	movs	r0, #0
 800505a:	e007      	b.n	800506c <__sfputs_r+0x22>
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	463a      	mov	r2, r7
 8005062:	4630      	mov	r0, r6
 8005064:	f7ff ffda 	bl	800501c <__sfputc_r>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d1f3      	bne.n	8005054 <__sfputs_r+0xa>
 800506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005070 <_vfiprintf_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	460d      	mov	r5, r1
 8005076:	b09d      	sub	sp, #116	; 0x74
 8005078:	4614      	mov	r4, r2
 800507a:	4698      	mov	r8, r3
 800507c:	4606      	mov	r6, r0
 800507e:	b118      	cbz	r0, 8005088 <_vfiprintf_r+0x18>
 8005080:	6983      	ldr	r3, [r0, #24]
 8005082:	b90b      	cbnz	r3, 8005088 <_vfiprintf_r+0x18>
 8005084:	f000 fcaa 	bl	80059dc <__sinit>
 8005088:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <_vfiprintf_r+0x240>)
 800508a:	429d      	cmp	r5, r3
 800508c:	d11b      	bne.n	80050c6 <_vfiprintf_r+0x56>
 800508e:	6875      	ldr	r5, [r6, #4]
 8005090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005092:	07d9      	lsls	r1, r3, #31
 8005094:	d405      	bmi.n	80050a2 <_vfiprintf_r+0x32>
 8005096:	89ab      	ldrh	r3, [r5, #12]
 8005098:	059a      	lsls	r2, r3, #22
 800509a:	d402      	bmi.n	80050a2 <_vfiprintf_r+0x32>
 800509c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800509e:	f000 fd3b 	bl	8005b18 <__retarget_lock_acquire_recursive>
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	d501      	bpl.n	80050ac <_vfiprintf_r+0x3c>
 80050a8:	692b      	ldr	r3, [r5, #16]
 80050aa:	b9eb      	cbnz	r3, 80050e8 <_vfiprintf_r+0x78>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 fb04 	bl	80056bc <__swsetup_r>
 80050b4:	b1c0      	cbz	r0, 80050e8 <_vfiprintf_r+0x78>
 80050b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050b8:	07dc      	lsls	r4, r3, #31
 80050ba:	d50e      	bpl.n	80050da <_vfiprintf_r+0x6a>
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	b01d      	add	sp, #116	; 0x74
 80050c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c6:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <_vfiprintf_r+0x244>)
 80050c8:	429d      	cmp	r5, r3
 80050ca:	d101      	bne.n	80050d0 <_vfiprintf_r+0x60>
 80050cc:	68b5      	ldr	r5, [r6, #8]
 80050ce:	e7df      	b.n	8005090 <_vfiprintf_r+0x20>
 80050d0:	4b79      	ldr	r3, [pc, #484]	; (80052b8 <_vfiprintf_r+0x248>)
 80050d2:	429d      	cmp	r5, r3
 80050d4:	bf08      	it	eq
 80050d6:	68f5      	ldreq	r5, [r6, #12]
 80050d8:	e7da      	b.n	8005090 <_vfiprintf_r+0x20>
 80050da:	89ab      	ldrh	r3, [r5, #12]
 80050dc:	0598      	lsls	r0, r3, #22
 80050de:	d4ed      	bmi.n	80050bc <_vfiprintf_r+0x4c>
 80050e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e2:	f000 fd1a 	bl	8005b1a <__retarget_lock_release_recursive>
 80050e6:	e7e9      	b.n	80050bc <_vfiprintf_r+0x4c>
 80050e8:	2300      	movs	r3, #0
 80050ea:	9309      	str	r3, [sp, #36]	; 0x24
 80050ec:	2320      	movs	r3, #32
 80050ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f6:	2330      	movs	r3, #48	; 0x30
 80050f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052bc <_vfiprintf_r+0x24c>
 80050fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005100:	f04f 0901 	mov.w	r9, #1
 8005104:	4623      	mov	r3, r4
 8005106:	469a      	mov	sl, r3
 8005108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800510c:	b10a      	cbz	r2, 8005112 <_vfiprintf_r+0xa2>
 800510e:	2a25      	cmp	r2, #37	; 0x25
 8005110:	d1f9      	bne.n	8005106 <_vfiprintf_r+0x96>
 8005112:	ebba 0b04 	subs.w	fp, sl, r4
 8005116:	d00b      	beq.n	8005130 <_vfiprintf_r+0xc0>
 8005118:	465b      	mov	r3, fp
 800511a:	4622      	mov	r2, r4
 800511c:	4629      	mov	r1, r5
 800511e:	4630      	mov	r0, r6
 8005120:	f7ff ff93 	bl	800504a <__sfputs_r>
 8005124:	3001      	adds	r0, #1
 8005126:	f000 80aa 	beq.w	800527e <_vfiprintf_r+0x20e>
 800512a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800512c:	445a      	add	r2, fp
 800512e:	9209      	str	r2, [sp, #36]	; 0x24
 8005130:	f89a 3000 	ldrb.w	r3, [sl]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80a2 	beq.w	800527e <_vfiprintf_r+0x20e>
 800513a:	2300      	movs	r3, #0
 800513c:	f04f 32ff 	mov.w	r2, #4294967295
 8005140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005144:	f10a 0a01 	add.w	sl, sl, #1
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005150:	931a      	str	r3, [sp, #104]	; 0x68
 8005152:	4654      	mov	r4, sl
 8005154:	2205      	movs	r2, #5
 8005156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515a:	4858      	ldr	r0, [pc, #352]	; (80052bc <_vfiprintf_r+0x24c>)
 800515c:	f7fb f850 	bl	8000200 <memchr>
 8005160:	9a04      	ldr	r2, [sp, #16]
 8005162:	b9d8      	cbnz	r0, 800519c <_vfiprintf_r+0x12c>
 8005164:	06d1      	lsls	r1, r2, #27
 8005166:	bf44      	itt	mi
 8005168:	2320      	movmi	r3, #32
 800516a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800516e:	0713      	lsls	r3, r2, #28
 8005170:	bf44      	itt	mi
 8005172:	232b      	movmi	r3, #43	; 0x2b
 8005174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005178:	f89a 3000 	ldrb.w	r3, [sl]
 800517c:	2b2a      	cmp	r3, #42	; 0x2a
 800517e:	d015      	beq.n	80051ac <_vfiprintf_r+0x13c>
 8005180:	9a07      	ldr	r2, [sp, #28]
 8005182:	4654      	mov	r4, sl
 8005184:	2000      	movs	r0, #0
 8005186:	f04f 0c0a 	mov.w	ip, #10
 800518a:	4621      	mov	r1, r4
 800518c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005190:	3b30      	subs	r3, #48	; 0x30
 8005192:	2b09      	cmp	r3, #9
 8005194:	d94e      	bls.n	8005234 <_vfiprintf_r+0x1c4>
 8005196:	b1b0      	cbz	r0, 80051c6 <_vfiprintf_r+0x156>
 8005198:	9207      	str	r2, [sp, #28]
 800519a:	e014      	b.n	80051c6 <_vfiprintf_r+0x156>
 800519c:	eba0 0308 	sub.w	r3, r0, r8
 80051a0:	fa09 f303 	lsl.w	r3, r9, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	9304      	str	r3, [sp, #16]
 80051a8:	46a2      	mov	sl, r4
 80051aa:	e7d2      	b.n	8005152 <_vfiprintf_r+0xe2>
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	1d19      	adds	r1, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	9103      	str	r1, [sp, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bfbb      	ittet	lt
 80051b8:	425b      	neglt	r3, r3
 80051ba:	f042 0202 	orrlt.w	r2, r2, #2
 80051be:	9307      	strge	r3, [sp, #28]
 80051c0:	9307      	strlt	r3, [sp, #28]
 80051c2:	bfb8      	it	lt
 80051c4:	9204      	strlt	r2, [sp, #16]
 80051c6:	7823      	ldrb	r3, [r4, #0]
 80051c8:	2b2e      	cmp	r3, #46	; 0x2e
 80051ca:	d10c      	bne.n	80051e6 <_vfiprintf_r+0x176>
 80051cc:	7863      	ldrb	r3, [r4, #1]
 80051ce:	2b2a      	cmp	r3, #42	; 0x2a
 80051d0:	d135      	bne.n	800523e <_vfiprintf_r+0x1ce>
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	1d1a      	adds	r2, r3, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	9203      	str	r2, [sp, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bfb8      	it	lt
 80051de:	f04f 33ff 	movlt.w	r3, #4294967295
 80051e2:	3402      	adds	r4, #2
 80051e4:	9305      	str	r3, [sp, #20]
 80051e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052cc <_vfiprintf_r+0x25c>
 80051ea:	7821      	ldrb	r1, [r4, #0]
 80051ec:	2203      	movs	r2, #3
 80051ee:	4650      	mov	r0, sl
 80051f0:	f7fb f806 	bl	8000200 <memchr>
 80051f4:	b140      	cbz	r0, 8005208 <_vfiprintf_r+0x198>
 80051f6:	2340      	movs	r3, #64	; 0x40
 80051f8:	eba0 000a 	sub.w	r0, r0, sl
 80051fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005200:	9b04      	ldr	r3, [sp, #16]
 8005202:	4303      	orrs	r3, r0
 8005204:	3401      	adds	r4, #1
 8005206:	9304      	str	r3, [sp, #16]
 8005208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520c:	482c      	ldr	r0, [pc, #176]	; (80052c0 <_vfiprintf_r+0x250>)
 800520e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005212:	2206      	movs	r2, #6
 8005214:	f7fa fff4 	bl	8000200 <memchr>
 8005218:	2800      	cmp	r0, #0
 800521a:	d03f      	beq.n	800529c <_vfiprintf_r+0x22c>
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <_vfiprintf_r+0x254>)
 800521e:	bb1b      	cbnz	r3, 8005268 <_vfiprintf_r+0x1f8>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	3307      	adds	r3, #7
 8005224:	f023 0307 	bic.w	r3, r3, #7
 8005228:	3308      	adds	r3, #8
 800522a:	9303      	str	r3, [sp, #12]
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	443b      	add	r3, r7
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	e767      	b.n	8005104 <_vfiprintf_r+0x94>
 8005234:	fb0c 3202 	mla	r2, ip, r2, r3
 8005238:	460c      	mov	r4, r1
 800523a:	2001      	movs	r0, #1
 800523c:	e7a5      	b.n	800518a <_vfiprintf_r+0x11a>
 800523e:	2300      	movs	r3, #0
 8005240:	3401      	adds	r4, #1
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0c0a 	mov.w	ip, #10
 800524a:	4620      	mov	r0, r4
 800524c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005250:	3a30      	subs	r2, #48	; 0x30
 8005252:	2a09      	cmp	r2, #9
 8005254:	d903      	bls.n	800525e <_vfiprintf_r+0x1ee>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c5      	beq.n	80051e6 <_vfiprintf_r+0x176>
 800525a:	9105      	str	r1, [sp, #20]
 800525c:	e7c3      	b.n	80051e6 <_vfiprintf_r+0x176>
 800525e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005262:	4604      	mov	r4, r0
 8005264:	2301      	movs	r3, #1
 8005266:	e7f0      	b.n	800524a <_vfiprintf_r+0x1da>
 8005268:	ab03      	add	r3, sp, #12
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	462a      	mov	r2, r5
 800526e:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <_vfiprintf_r+0x258>)
 8005270:	a904      	add	r1, sp, #16
 8005272:	4630      	mov	r0, r6
 8005274:	f3af 8000 	nop.w
 8005278:	4607      	mov	r7, r0
 800527a:	1c78      	adds	r0, r7, #1
 800527c:	d1d6      	bne.n	800522c <_vfiprintf_r+0x1bc>
 800527e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005280:	07d9      	lsls	r1, r3, #31
 8005282:	d405      	bmi.n	8005290 <_vfiprintf_r+0x220>
 8005284:	89ab      	ldrh	r3, [r5, #12]
 8005286:	059a      	lsls	r2, r3, #22
 8005288:	d402      	bmi.n	8005290 <_vfiprintf_r+0x220>
 800528a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800528c:	f000 fc45 	bl	8005b1a <__retarget_lock_release_recursive>
 8005290:	89ab      	ldrh	r3, [r5, #12]
 8005292:	065b      	lsls	r3, r3, #25
 8005294:	f53f af12 	bmi.w	80050bc <_vfiprintf_r+0x4c>
 8005298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800529a:	e711      	b.n	80050c0 <_vfiprintf_r+0x50>
 800529c:	ab03      	add	r3, sp, #12
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <_vfiprintf_r+0x258>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 f880 	bl	80053ac <_printf_i>
 80052ac:	e7e4      	b.n	8005278 <_vfiprintf_r+0x208>
 80052ae:	bf00      	nop
 80052b0:	08008aa4 	.word	0x08008aa4
 80052b4:	08008ac4 	.word	0x08008ac4
 80052b8:	08008a84 	.word	0x08008a84
 80052bc:	08008a50 	.word	0x08008a50
 80052c0:	08008a5a 	.word	0x08008a5a
 80052c4:	00000000 	.word	0x00000000
 80052c8:	0800504b 	.word	0x0800504b
 80052cc:	08008a56 	.word	0x08008a56

080052d0 <_printf_common>:
 80052d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d4:	4616      	mov	r6, r2
 80052d6:	4699      	mov	r9, r3
 80052d8:	688a      	ldr	r2, [r1, #8]
 80052da:	690b      	ldr	r3, [r1, #16]
 80052dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	bfb8      	it	lt
 80052e4:	4613      	movlt	r3, r2
 80052e6:	6033      	str	r3, [r6, #0]
 80052e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052ec:	4607      	mov	r7, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	b10a      	cbz	r2, 80052f6 <_printf_common+0x26>
 80052f2:	3301      	adds	r3, #1
 80052f4:	6033      	str	r3, [r6, #0]
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	0699      	lsls	r1, r3, #26
 80052fa:	bf42      	ittt	mi
 80052fc:	6833      	ldrmi	r3, [r6, #0]
 80052fe:	3302      	addmi	r3, #2
 8005300:	6033      	strmi	r3, [r6, #0]
 8005302:	6825      	ldr	r5, [r4, #0]
 8005304:	f015 0506 	ands.w	r5, r5, #6
 8005308:	d106      	bne.n	8005318 <_printf_common+0x48>
 800530a:	f104 0a19 	add.w	sl, r4, #25
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	6832      	ldr	r2, [r6, #0]
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	42ab      	cmp	r3, r5
 8005316:	dc26      	bgt.n	8005366 <_printf_common+0x96>
 8005318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800531c:	1e13      	subs	r3, r2, #0
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	bf18      	it	ne
 8005322:	2301      	movne	r3, #1
 8005324:	0692      	lsls	r2, r2, #26
 8005326:	d42b      	bmi.n	8005380 <_printf_common+0xb0>
 8005328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d01e      	beq.n	8005374 <_printf_common+0xa4>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	68e5      	ldr	r5, [r4, #12]
 800533a:	6832      	ldr	r2, [r6, #0]
 800533c:	f003 0306 	and.w	r3, r3, #6
 8005340:	2b04      	cmp	r3, #4
 8005342:	bf08      	it	eq
 8005344:	1aad      	subeq	r5, r5, r2
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	bf0c      	ite	eq
 800534c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005350:	2500      	movne	r5, #0
 8005352:	4293      	cmp	r3, r2
 8005354:	bfc4      	itt	gt
 8005356:	1a9b      	subgt	r3, r3, r2
 8005358:	18ed      	addgt	r5, r5, r3
 800535a:	2600      	movs	r6, #0
 800535c:	341a      	adds	r4, #26
 800535e:	42b5      	cmp	r5, r6
 8005360:	d11a      	bne.n	8005398 <_printf_common+0xc8>
 8005362:	2000      	movs	r0, #0
 8005364:	e008      	b.n	8005378 <_printf_common+0xa8>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4649      	mov	r1, r9
 800536c:	4638      	mov	r0, r7
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d103      	bne.n	800537c <_printf_common+0xac>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	3501      	adds	r5, #1
 800537e:	e7c6      	b.n	800530e <_printf_common+0x3e>
 8005380:	18e1      	adds	r1, r4, r3
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	2030      	movs	r0, #48	; 0x30
 8005386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800538a:	4422      	add	r2, r4
 800538c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005394:	3302      	adds	r3, #2
 8005396:	e7c7      	b.n	8005328 <_printf_common+0x58>
 8005398:	2301      	movs	r3, #1
 800539a:	4622      	mov	r2, r4
 800539c:	4649      	mov	r1, r9
 800539e:	4638      	mov	r0, r7
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d0e6      	beq.n	8005374 <_printf_common+0xa4>
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7d9      	b.n	800535e <_printf_common+0x8e>
	...

080053ac <_printf_i>:
 80053ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	4691      	mov	r9, r2
 80053b4:	7e27      	ldrb	r7, [r4, #24]
 80053b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053b8:	2f78      	cmp	r7, #120	; 0x78
 80053ba:	4680      	mov	r8, r0
 80053bc:	469a      	mov	sl, r3
 80053be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c2:	d807      	bhi.n	80053d4 <_printf_i+0x28>
 80053c4:	2f62      	cmp	r7, #98	; 0x62
 80053c6:	d80a      	bhi.n	80053de <_printf_i+0x32>
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	f000 80d8 	beq.w	800557e <_printf_i+0x1d2>
 80053ce:	2f58      	cmp	r7, #88	; 0x58
 80053d0:	f000 80a3 	beq.w	800551a <_printf_i+0x16e>
 80053d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053dc:	e03a      	b.n	8005454 <_printf_i+0xa8>
 80053de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053e2:	2b15      	cmp	r3, #21
 80053e4:	d8f6      	bhi.n	80053d4 <_printf_i+0x28>
 80053e6:	a001      	add	r0, pc, #4	; (adr r0, 80053ec <_printf_i+0x40>)
 80053e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005459 	.word	0x08005459
 80053f4:	080053d5 	.word	0x080053d5
 80053f8:	080053d5 	.word	0x080053d5
 80053fc:	080053d5 	.word	0x080053d5
 8005400:	080053d5 	.word	0x080053d5
 8005404:	08005459 	.word	0x08005459
 8005408:	080053d5 	.word	0x080053d5
 800540c:	080053d5 	.word	0x080053d5
 8005410:	080053d5 	.word	0x080053d5
 8005414:	080053d5 	.word	0x080053d5
 8005418:	08005565 	.word	0x08005565
 800541c:	08005489 	.word	0x08005489
 8005420:	08005547 	.word	0x08005547
 8005424:	080053d5 	.word	0x080053d5
 8005428:	080053d5 	.word	0x080053d5
 800542c:	08005587 	.word	0x08005587
 8005430:	080053d5 	.word	0x080053d5
 8005434:	08005489 	.word	0x08005489
 8005438:	080053d5 	.word	0x080053d5
 800543c:	080053d5 	.word	0x080053d5
 8005440:	0800554f 	.word	0x0800554f
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	600a      	str	r2, [r1, #0]
 800544c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005454:	2301      	movs	r3, #1
 8005456:	e0a3      	b.n	80055a0 <_printf_i+0x1f4>
 8005458:	6825      	ldr	r5, [r4, #0]
 800545a:	6808      	ldr	r0, [r1, #0]
 800545c:	062e      	lsls	r6, r5, #24
 800545e:	f100 0304 	add.w	r3, r0, #4
 8005462:	d50a      	bpl.n	800547a <_printf_i+0xce>
 8005464:	6805      	ldr	r5, [r0, #0]
 8005466:	600b      	str	r3, [r1, #0]
 8005468:	2d00      	cmp	r5, #0
 800546a:	da03      	bge.n	8005474 <_printf_i+0xc8>
 800546c:	232d      	movs	r3, #45	; 0x2d
 800546e:	426d      	negs	r5, r5
 8005470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005474:	485e      	ldr	r0, [pc, #376]	; (80055f0 <_printf_i+0x244>)
 8005476:	230a      	movs	r3, #10
 8005478:	e019      	b.n	80054ae <_printf_i+0x102>
 800547a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800547e:	6805      	ldr	r5, [r0, #0]
 8005480:	600b      	str	r3, [r1, #0]
 8005482:	bf18      	it	ne
 8005484:	b22d      	sxthne	r5, r5
 8005486:	e7ef      	b.n	8005468 <_printf_i+0xbc>
 8005488:	680b      	ldr	r3, [r1, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	1d18      	adds	r0, r3, #4
 800548e:	6008      	str	r0, [r1, #0]
 8005490:	0628      	lsls	r0, r5, #24
 8005492:	d501      	bpl.n	8005498 <_printf_i+0xec>
 8005494:	681d      	ldr	r5, [r3, #0]
 8005496:	e002      	b.n	800549e <_printf_i+0xf2>
 8005498:	0669      	lsls	r1, r5, #25
 800549a:	d5fb      	bpl.n	8005494 <_printf_i+0xe8>
 800549c:	881d      	ldrh	r5, [r3, #0]
 800549e:	4854      	ldr	r0, [pc, #336]	; (80055f0 <_printf_i+0x244>)
 80054a0:	2f6f      	cmp	r7, #111	; 0x6f
 80054a2:	bf0c      	ite	eq
 80054a4:	2308      	moveq	r3, #8
 80054a6:	230a      	movne	r3, #10
 80054a8:	2100      	movs	r1, #0
 80054aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ae:	6866      	ldr	r6, [r4, #4]
 80054b0:	60a6      	str	r6, [r4, #8]
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	bfa2      	ittt	ge
 80054b6:	6821      	ldrge	r1, [r4, #0]
 80054b8:	f021 0104 	bicge.w	r1, r1, #4
 80054bc:	6021      	strge	r1, [r4, #0]
 80054be:	b90d      	cbnz	r5, 80054c4 <_printf_i+0x118>
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	d04d      	beq.n	8005560 <_printf_i+0x1b4>
 80054c4:	4616      	mov	r6, r2
 80054c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054ca:	fb03 5711 	mls	r7, r3, r1, r5
 80054ce:	5dc7      	ldrb	r7, [r0, r7]
 80054d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d4:	462f      	mov	r7, r5
 80054d6:	42bb      	cmp	r3, r7
 80054d8:	460d      	mov	r5, r1
 80054da:	d9f4      	bls.n	80054c6 <_printf_i+0x11a>
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d10b      	bne.n	80054f8 <_printf_i+0x14c>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	07df      	lsls	r7, r3, #31
 80054e4:	d508      	bpl.n	80054f8 <_printf_i+0x14c>
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	6861      	ldr	r1, [r4, #4]
 80054ea:	4299      	cmp	r1, r3
 80054ec:	bfde      	ittt	le
 80054ee:	2330      	movle	r3, #48	; 0x30
 80054f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054f8:	1b92      	subs	r2, r2, r6
 80054fa:	6122      	str	r2, [r4, #16]
 80054fc:	f8cd a000 	str.w	sl, [sp]
 8005500:	464b      	mov	r3, r9
 8005502:	aa03      	add	r2, sp, #12
 8005504:	4621      	mov	r1, r4
 8005506:	4640      	mov	r0, r8
 8005508:	f7ff fee2 	bl	80052d0 <_printf_common>
 800550c:	3001      	adds	r0, #1
 800550e:	d14c      	bne.n	80055aa <_printf_i+0x1fe>
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	b004      	add	sp, #16
 8005516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551a:	4835      	ldr	r0, [pc, #212]	; (80055f0 <_printf_i+0x244>)
 800551c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	680e      	ldr	r6, [r1, #0]
 8005524:	061f      	lsls	r7, r3, #24
 8005526:	f856 5b04 	ldr.w	r5, [r6], #4
 800552a:	600e      	str	r6, [r1, #0]
 800552c:	d514      	bpl.n	8005558 <_printf_i+0x1ac>
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	bf44      	itt	mi
 8005532:	f043 0320 	orrmi.w	r3, r3, #32
 8005536:	6023      	strmi	r3, [r4, #0]
 8005538:	b91d      	cbnz	r5, 8005542 <_printf_i+0x196>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f023 0320 	bic.w	r3, r3, #32
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	2310      	movs	r3, #16
 8005544:	e7b0      	b.n	80054a8 <_printf_i+0xfc>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	f043 0320 	orr.w	r3, r3, #32
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	2378      	movs	r3, #120	; 0x78
 8005550:	4828      	ldr	r0, [pc, #160]	; (80055f4 <_printf_i+0x248>)
 8005552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005556:	e7e3      	b.n	8005520 <_printf_i+0x174>
 8005558:	065e      	lsls	r6, r3, #25
 800555a:	bf48      	it	mi
 800555c:	b2ad      	uxthmi	r5, r5
 800555e:	e7e6      	b.n	800552e <_printf_i+0x182>
 8005560:	4616      	mov	r6, r2
 8005562:	e7bb      	b.n	80054dc <_printf_i+0x130>
 8005564:	680b      	ldr	r3, [r1, #0]
 8005566:	6826      	ldr	r6, [r4, #0]
 8005568:	6960      	ldr	r0, [r4, #20]
 800556a:	1d1d      	adds	r5, r3, #4
 800556c:	600d      	str	r5, [r1, #0]
 800556e:	0635      	lsls	r5, r6, #24
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	d501      	bpl.n	8005578 <_printf_i+0x1cc>
 8005574:	6018      	str	r0, [r3, #0]
 8005576:	e002      	b.n	800557e <_printf_i+0x1d2>
 8005578:	0671      	lsls	r1, r6, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0x1c8>
 800557c:	8018      	strh	r0, [r3, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	4616      	mov	r6, r2
 8005584:	e7ba      	b.n	80054fc <_printf_i+0x150>
 8005586:	680b      	ldr	r3, [r1, #0]
 8005588:	1d1a      	adds	r2, r3, #4
 800558a:	600a      	str	r2, [r1, #0]
 800558c:	681e      	ldr	r6, [r3, #0]
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	2100      	movs	r1, #0
 8005592:	4630      	mov	r0, r6
 8005594:	f7fa fe34 	bl	8000200 <memchr>
 8005598:	b108      	cbz	r0, 800559e <_printf_i+0x1f2>
 800559a:	1b80      	subs	r0, r0, r6
 800559c:	6060      	str	r0, [r4, #4]
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	2300      	movs	r3, #0
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	e7a8      	b.n	80054fc <_printf_i+0x150>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	4632      	mov	r2, r6
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	47d0      	blx	sl
 80055b4:	3001      	adds	r0, #1
 80055b6:	d0ab      	beq.n	8005510 <_printf_i+0x164>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	079b      	lsls	r3, r3, #30
 80055bc:	d413      	bmi.n	80055e6 <_printf_i+0x23a>
 80055be:	68e0      	ldr	r0, [r4, #12]
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	4298      	cmp	r0, r3
 80055c4:	bfb8      	it	lt
 80055c6:	4618      	movlt	r0, r3
 80055c8:	e7a4      	b.n	8005514 <_printf_i+0x168>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4632      	mov	r2, r6
 80055ce:	4649      	mov	r1, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	47d0      	blx	sl
 80055d4:	3001      	adds	r0, #1
 80055d6:	d09b      	beq.n	8005510 <_printf_i+0x164>
 80055d8:	3501      	adds	r5, #1
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	9903      	ldr	r1, [sp, #12]
 80055de:	1a5b      	subs	r3, r3, r1
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dcf2      	bgt.n	80055ca <_printf_i+0x21e>
 80055e4:	e7eb      	b.n	80055be <_printf_i+0x212>
 80055e6:	2500      	movs	r5, #0
 80055e8:	f104 0619 	add.w	r6, r4, #25
 80055ec:	e7f5      	b.n	80055da <_printf_i+0x22e>
 80055ee:	bf00      	nop
 80055f0:	08008a61 	.word	0x08008a61
 80055f4:	08008a72 	.word	0x08008a72

080055f8 <_sbrk_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	; (8005614 <_sbrk_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fb fdcc 	bl	80011a0 <_sbrk>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_sbrk_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_sbrk_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20003390 	.word	0x20003390

08005618 <__swbuf_r>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	460e      	mov	r6, r1
 800561c:	4614      	mov	r4, r2
 800561e:	4605      	mov	r5, r0
 8005620:	b118      	cbz	r0, 800562a <__swbuf_r+0x12>
 8005622:	6983      	ldr	r3, [r0, #24]
 8005624:	b90b      	cbnz	r3, 800562a <__swbuf_r+0x12>
 8005626:	f000 f9d9 	bl	80059dc <__sinit>
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <__swbuf_r+0x98>)
 800562c:	429c      	cmp	r4, r3
 800562e:	d12b      	bne.n	8005688 <__swbuf_r+0x70>
 8005630:	686c      	ldr	r4, [r5, #4]
 8005632:	69a3      	ldr	r3, [r4, #24]
 8005634:	60a3      	str	r3, [r4, #8]
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	071a      	lsls	r2, r3, #28
 800563a:	d52f      	bpl.n	800569c <__swbuf_r+0x84>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	b36b      	cbz	r3, 800569c <__swbuf_r+0x84>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1ac0      	subs	r0, r0, r3
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	b2f6      	uxtb	r6, r6
 800564a:	4283      	cmp	r3, r0
 800564c:	4637      	mov	r7, r6
 800564e:	dc04      	bgt.n	800565a <__swbuf_r+0x42>
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	f000 f92e 	bl	80058b4 <_fflush_r>
 8005658:	bb30      	cbnz	r0, 80056a8 <__swbuf_r+0x90>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	3b01      	subs	r3, #1
 800565e:	60a3      	str	r3, [r4, #8]
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	6022      	str	r2, [r4, #0]
 8005666:	701e      	strb	r6, [r3, #0]
 8005668:	6963      	ldr	r3, [r4, #20]
 800566a:	3001      	adds	r0, #1
 800566c:	4283      	cmp	r3, r0
 800566e:	d004      	beq.n	800567a <__swbuf_r+0x62>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d506      	bpl.n	8005684 <__swbuf_r+0x6c>
 8005676:	2e0a      	cmp	r6, #10
 8005678:	d104      	bne.n	8005684 <__swbuf_r+0x6c>
 800567a:	4621      	mov	r1, r4
 800567c:	4628      	mov	r0, r5
 800567e:	f000 f919 	bl	80058b4 <_fflush_r>
 8005682:	b988      	cbnz	r0, 80056a8 <__swbuf_r+0x90>
 8005684:	4638      	mov	r0, r7
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <__swbuf_r+0x9c>)
 800568a:	429c      	cmp	r4, r3
 800568c:	d101      	bne.n	8005692 <__swbuf_r+0x7a>
 800568e:	68ac      	ldr	r4, [r5, #8]
 8005690:	e7cf      	b.n	8005632 <__swbuf_r+0x1a>
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <__swbuf_r+0xa0>)
 8005694:	429c      	cmp	r4, r3
 8005696:	bf08      	it	eq
 8005698:	68ec      	ldreq	r4, [r5, #12]
 800569a:	e7ca      	b.n	8005632 <__swbuf_r+0x1a>
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f80c 	bl	80056bc <__swsetup_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d0cb      	beq.n	8005640 <__swbuf_r+0x28>
 80056a8:	f04f 37ff 	mov.w	r7, #4294967295
 80056ac:	e7ea      	b.n	8005684 <__swbuf_r+0x6c>
 80056ae:	bf00      	nop
 80056b0:	08008aa4 	.word	0x08008aa4
 80056b4:	08008ac4 	.word	0x08008ac4
 80056b8:	08008a84 	.word	0x08008a84

080056bc <__swsetup_r>:
 80056bc:	4b32      	ldr	r3, [pc, #200]	; (8005788 <__swsetup_r+0xcc>)
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	b125      	cbz	r5, 80056d2 <__swsetup_r+0x16>
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__swsetup_r+0x16>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f985 	bl	80059dc <__sinit>
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <__swsetup_r+0xd0>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d10f      	bne.n	80056f8 <__swsetup_r+0x3c>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e0:	0719      	lsls	r1, r3, #28
 80056e2:	d42c      	bmi.n	800573e <__swsetup_r+0x82>
 80056e4:	06dd      	lsls	r5, r3, #27
 80056e6:	d411      	bmi.n	800570c <__swsetup_r+0x50>
 80056e8:	2309      	movs	r3, #9
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	e03e      	b.n	8005776 <__swsetup_r+0xba>
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <__swsetup_r+0xd4>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d101      	bne.n	8005702 <__swsetup_r+0x46>
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	e7eb      	b.n	80056da <__swsetup_r+0x1e>
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <__swsetup_r+0xd8>)
 8005704:	429c      	cmp	r4, r3
 8005706:	bf08      	it	eq
 8005708:	68ec      	ldreq	r4, [r5, #12]
 800570a:	e7e6      	b.n	80056da <__swsetup_r+0x1e>
 800570c:	0758      	lsls	r0, r3, #29
 800570e:	d512      	bpl.n	8005736 <__swsetup_r+0x7a>
 8005710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005712:	b141      	cbz	r1, 8005726 <__swsetup_r+0x6a>
 8005714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <__swsetup_r+0x66>
 800571c:	4630      	mov	r0, r6
 800571e:	f7ff fbd3 	bl	8004ec8 <_free_r>
 8005722:	2300      	movs	r3, #0
 8005724:	6363      	str	r3, [r4, #52]	; 0x34
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	2300      	movs	r3, #0
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b94b      	cbnz	r3, 8005756 <__swsetup_r+0x9a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d003      	beq.n	8005756 <__swsetup_r+0x9a>
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fa07 	bl	8005b64 <__smakebuf_r>
 8005756:	89a0      	ldrh	r0, [r4, #12]
 8005758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575c:	f010 0301 	ands.w	r3, r0, #1
 8005760:	d00a      	beq.n	8005778 <__swsetup_r+0xbc>
 8005762:	2300      	movs	r3, #0
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6963      	ldr	r3, [r4, #20]
 8005768:	425b      	negs	r3, r3
 800576a:	61a3      	str	r3, [r4, #24]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b943      	cbnz	r3, 8005782 <__swsetup_r+0xc6>
 8005770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005774:	d1ba      	bne.n	80056ec <__swsetup_r+0x30>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	0781      	lsls	r1, r0, #30
 800577a:	bf58      	it	pl
 800577c:	6963      	ldrpl	r3, [r4, #20]
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	e7f4      	b.n	800576c <__swsetup_r+0xb0>
 8005782:	2000      	movs	r0, #0
 8005784:	e7f7      	b.n	8005776 <__swsetup_r+0xba>
 8005786:	bf00      	nop
 8005788:	20000040 	.word	0x20000040
 800578c:	08008aa4 	.word	0x08008aa4
 8005790:	08008ac4 	.word	0x08008ac4
 8005794:	08008a84 	.word	0x08008a84

08005798 <abort>:
 8005798:	b508      	push	{r3, lr}
 800579a:	2006      	movs	r0, #6
 800579c:	f000 fa56 	bl	8005c4c <raise>
 80057a0:	2001      	movs	r0, #1
 80057a2:	f7fb fc85 	bl	80010b0 <_exit>
	...

080057a8 <__sflush_r>:
 80057a8:	898a      	ldrh	r2, [r1, #12]
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	4605      	mov	r5, r0
 80057b0:	0710      	lsls	r0, r2, #28
 80057b2:	460c      	mov	r4, r1
 80057b4:	d458      	bmi.n	8005868 <__sflush_r+0xc0>
 80057b6:	684b      	ldr	r3, [r1, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc05      	bgt.n	80057c8 <__sflush_r+0x20>
 80057bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc02      	bgt.n	80057c8 <__sflush_r+0x20>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	d0f9      	beq.n	80057c2 <__sflush_r+0x1a>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057d4:	682f      	ldr	r7, [r5, #0]
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	d032      	beq.n	8005840 <__sflush_r+0x98>
 80057da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	075a      	lsls	r2, r3, #29
 80057e0:	d505      	bpl.n	80057ee <__sflush_r+0x46>
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e8:	b10b      	cbz	r3, 80057ee <__sflush_r+0x46>
 80057ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ec:	1ac0      	subs	r0, r0, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	4602      	mov	r2, r0
 80057f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f4:	6a21      	ldr	r1, [r4, #32]
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b0      	blx	r6
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	d106      	bne.n	800580e <__sflush_r+0x66>
 8005800:	6829      	ldr	r1, [r5, #0]
 8005802:	291d      	cmp	r1, #29
 8005804:	d82c      	bhi.n	8005860 <__sflush_r+0xb8>
 8005806:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <__sflush_r+0x108>)
 8005808:	40ca      	lsrs	r2, r1
 800580a:	07d6      	lsls	r6, r2, #31
 800580c:	d528      	bpl.n	8005860 <__sflush_r+0xb8>
 800580e:	2200      	movs	r2, #0
 8005810:	6062      	str	r2, [r4, #4]
 8005812:	04d9      	lsls	r1, r3, #19
 8005814:	6922      	ldr	r2, [r4, #16]
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	d504      	bpl.n	8005824 <__sflush_r+0x7c>
 800581a:	1c42      	adds	r2, r0, #1
 800581c:	d101      	bne.n	8005822 <__sflush_r+0x7a>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	b903      	cbnz	r3, 8005824 <__sflush_r+0x7c>
 8005822:	6560      	str	r0, [r4, #84]	; 0x54
 8005824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005826:	602f      	str	r7, [r5, #0]
 8005828:	2900      	cmp	r1, #0
 800582a:	d0ca      	beq.n	80057c2 <__sflush_r+0x1a>
 800582c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005830:	4299      	cmp	r1, r3
 8005832:	d002      	beq.n	800583a <__sflush_r+0x92>
 8005834:	4628      	mov	r0, r5
 8005836:	f7ff fb47 	bl	8004ec8 <_free_r>
 800583a:	2000      	movs	r0, #0
 800583c:	6360      	str	r0, [r4, #52]	; 0x34
 800583e:	e7c1      	b.n	80057c4 <__sflush_r+0x1c>
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	2301      	movs	r3, #1
 8005844:	4628      	mov	r0, r5
 8005846:	47b0      	blx	r6
 8005848:	1c41      	adds	r1, r0, #1
 800584a:	d1c7      	bne.n	80057dc <__sflush_r+0x34>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0c4      	beq.n	80057dc <__sflush_r+0x34>
 8005852:	2b1d      	cmp	r3, #29
 8005854:	d001      	beq.n	800585a <__sflush_r+0xb2>
 8005856:	2b16      	cmp	r3, #22
 8005858:	d101      	bne.n	800585e <__sflush_r+0xb6>
 800585a:	602f      	str	r7, [r5, #0]
 800585c:	e7b1      	b.n	80057c2 <__sflush_r+0x1a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	e7ad      	b.n	80057c4 <__sflush_r+0x1c>
 8005868:	690f      	ldr	r7, [r1, #16]
 800586a:	2f00      	cmp	r7, #0
 800586c:	d0a9      	beq.n	80057c2 <__sflush_r+0x1a>
 800586e:	0793      	lsls	r3, r2, #30
 8005870:	680e      	ldr	r6, [r1, #0]
 8005872:	bf08      	it	eq
 8005874:	694b      	ldreq	r3, [r1, #20]
 8005876:	600f      	str	r7, [r1, #0]
 8005878:	bf18      	it	ne
 800587a:	2300      	movne	r3, #0
 800587c:	eba6 0807 	sub.w	r8, r6, r7
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	f1b8 0f00 	cmp.w	r8, #0
 8005886:	dd9c      	ble.n	80057c2 <__sflush_r+0x1a>
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800588c:	4643      	mov	r3, r8
 800588e:	463a      	mov	r2, r7
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	2800      	cmp	r0, #0
 8005896:	dc06      	bgt.n	80058a6 <__sflush_r+0xfe>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	e78e      	b.n	80057c4 <__sflush_r+0x1c>
 80058a6:	4407      	add	r7, r0
 80058a8:	eba8 0800 	sub.w	r8, r8, r0
 80058ac:	e7e9      	b.n	8005882 <__sflush_r+0xda>
 80058ae:	bf00      	nop
 80058b0:	20400001 	.word	0x20400001

080058b4 <_fflush_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	b913      	cbnz	r3, 80058c4 <_fflush_r+0x10>
 80058be:	2500      	movs	r5, #0
 80058c0:	4628      	mov	r0, r5
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	b118      	cbz	r0, 80058ce <_fflush_r+0x1a>
 80058c6:	6983      	ldr	r3, [r0, #24]
 80058c8:	b90b      	cbnz	r3, 80058ce <_fflush_r+0x1a>
 80058ca:	f000 f887 	bl	80059dc <__sinit>
 80058ce:	4b14      	ldr	r3, [pc, #80]	; (8005920 <_fflush_r+0x6c>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d11b      	bne.n	800590c <_fflush_r+0x58>
 80058d4:	686c      	ldr	r4, [r5, #4]
 80058d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <_fflush_r+0xa>
 80058de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058e0:	07d0      	lsls	r0, r2, #31
 80058e2:	d404      	bmi.n	80058ee <_fflush_r+0x3a>
 80058e4:	0599      	lsls	r1, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_fflush_r+0x3a>
 80058e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ea:	f000 f915 	bl	8005b18 <__retarget_lock_acquire_recursive>
 80058ee:	4628      	mov	r0, r5
 80058f0:	4621      	mov	r1, r4
 80058f2:	f7ff ff59 	bl	80057a8 <__sflush_r>
 80058f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058f8:	07da      	lsls	r2, r3, #31
 80058fa:	4605      	mov	r5, r0
 80058fc:	d4e0      	bmi.n	80058c0 <_fflush_r+0xc>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	d4dd      	bmi.n	80058c0 <_fflush_r+0xc>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 f908 	bl	8005b1a <__retarget_lock_release_recursive>
 800590a:	e7d9      	b.n	80058c0 <_fflush_r+0xc>
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <_fflush_r+0x70>)
 800590e:	429c      	cmp	r4, r3
 8005910:	d101      	bne.n	8005916 <_fflush_r+0x62>
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	e7df      	b.n	80058d6 <_fflush_r+0x22>
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <_fflush_r+0x74>)
 8005918:	429c      	cmp	r4, r3
 800591a:	bf08      	it	eq
 800591c:	68ec      	ldreq	r4, [r5, #12]
 800591e:	e7da      	b.n	80058d6 <_fflush_r+0x22>
 8005920:	08008aa4 	.word	0x08008aa4
 8005924:	08008ac4 	.word	0x08008ac4
 8005928:	08008a84 	.word	0x08008a84

0800592c <std>:
 800592c:	2300      	movs	r3, #0
 800592e:	b510      	push	{r4, lr}
 8005930:	4604      	mov	r4, r0
 8005932:	e9c0 3300 	strd	r3, r3, [r0]
 8005936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800593a:	6083      	str	r3, [r0, #8]
 800593c:	8181      	strh	r1, [r0, #12]
 800593e:	6643      	str	r3, [r0, #100]	; 0x64
 8005940:	81c2      	strh	r2, [r0, #14]
 8005942:	6183      	str	r3, [r0, #24]
 8005944:	4619      	mov	r1, r3
 8005946:	2208      	movs	r2, #8
 8005948:	305c      	adds	r0, #92	; 0x5c
 800594a:	f7ff f9e9 	bl	8004d20 <memset>
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x38>)
 8005950:	6263      	str	r3, [r4, #36]	; 0x24
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <std+0x3c>)
 8005954:	62a3      	str	r3, [r4, #40]	; 0x28
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <std+0x40>)
 8005958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <std+0x44>)
 800595c:	6224      	str	r4, [r4, #32]
 800595e:	6323      	str	r3, [r4, #48]	; 0x30
 8005960:	bd10      	pop	{r4, pc}
 8005962:	bf00      	nop
 8005964:	08005c85 	.word	0x08005c85
 8005968:	08005ca7 	.word	0x08005ca7
 800596c:	08005cdf 	.word	0x08005cdf
 8005970:	08005d03 	.word	0x08005d03

08005974 <_cleanup_r>:
 8005974:	4901      	ldr	r1, [pc, #4]	; (800597c <_cleanup_r+0x8>)
 8005976:	f000 b8af 	b.w	8005ad8 <_fwalk_reent>
 800597a:	bf00      	nop
 800597c:	080058b5 	.word	0x080058b5

08005980 <__sfmoreglue>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	1e4a      	subs	r2, r1, #1
 8005984:	2568      	movs	r5, #104	; 0x68
 8005986:	4355      	muls	r5, r2
 8005988:	460e      	mov	r6, r1
 800598a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800598e:	f7ff faeb 	bl	8004f68 <_malloc_r>
 8005992:	4604      	mov	r4, r0
 8005994:	b140      	cbz	r0, 80059a8 <__sfmoreglue+0x28>
 8005996:	2100      	movs	r1, #0
 8005998:	e9c0 1600 	strd	r1, r6, [r0]
 800599c:	300c      	adds	r0, #12
 800599e:	60a0      	str	r0, [r4, #8]
 80059a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059a4:	f7ff f9bc 	bl	8004d20 <memset>
 80059a8:	4620      	mov	r0, r4
 80059aa:	bd70      	pop	{r4, r5, r6, pc}

080059ac <__sfp_lock_acquire>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__sfp_lock_acquire+0x8>)
 80059ae:	f000 b8b3 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 80059b2:	bf00      	nop
 80059b4:	2000338c 	.word	0x2000338c

080059b8 <__sfp_lock_release>:
 80059b8:	4801      	ldr	r0, [pc, #4]	; (80059c0 <__sfp_lock_release+0x8>)
 80059ba:	f000 b8ae 	b.w	8005b1a <__retarget_lock_release_recursive>
 80059be:	bf00      	nop
 80059c0:	2000338c 	.word	0x2000338c

080059c4 <__sinit_lock_acquire>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__sinit_lock_acquire+0x8>)
 80059c6:	f000 b8a7 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	20003387 	.word	0x20003387

080059d0 <__sinit_lock_release>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sinit_lock_release+0x8>)
 80059d2:	f000 b8a2 	b.w	8005b1a <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	20003387 	.word	0x20003387

080059dc <__sinit>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	f7ff fff0 	bl	80059c4 <__sinit_lock_acquire>
 80059e4:	69a3      	ldr	r3, [r4, #24]
 80059e6:	b11b      	cbz	r3, 80059f0 <__sinit+0x14>
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f7ff bff0 	b.w	80059d0 <__sinit_lock_release>
 80059f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059f4:	6523      	str	r3, [r4, #80]	; 0x50
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <__sinit+0x68>)
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <__sinit+0x6c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	bf04      	itt	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	61a3      	streq	r3, [r4, #24]
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f820 	bl	8005a4c <__sfp>
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f81c 	bl	8005a4c <__sfp>
 8005a14:	60a0      	str	r0, [r4, #8]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f818 	bl	8005a4c <__sfp>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60e0      	str	r0, [r4, #12]
 8005a20:	2104      	movs	r1, #4
 8005a22:	6860      	ldr	r0, [r4, #4]
 8005a24:	f7ff ff82 	bl	800592c <std>
 8005a28:	68a0      	ldr	r0, [r4, #8]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2109      	movs	r1, #9
 8005a2e:	f7ff ff7d 	bl	800592c <std>
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	2202      	movs	r2, #2
 8005a36:	2112      	movs	r1, #18
 8005a38:	f7ff ff78 	bl	800592c <std>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61a3      	str	r3, [r4, #24]
 8005a40:	e7d2      	b.n	80059e8 <__sinit+0xc>
 8005a42:	bf00      	nop
 8005a44:	08008998 	.word	0x08008998
 8005a48:	08005975 	.word	0x08005975

08005a4c <__sfp>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	4607      	mov	r7, r0
 8005a50:	f7ff ffac 	bl	80059ac <__sfp_lock_acquire>
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <__sfp+0x84>)
 8005a56:	681e      	ldr	r6, [r3, #0]
 8005a58:	69b3      	ldr	r3, [r6, #24]
 8005a5a:	b913      	cbnz	r3, 8005a62 <__sfp+0x16>
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffbd 	bl	80059dc <__sinit>
 8005a62:	3648      	adds	r6, #72	; 0x48
 8005a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	d503      	bpl.n	8005a74 <__sfp+0x28>
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	b30b      	cbz	r3, 8005ab4 <__sfp+0x68>
 8005a70:	6836      	ldr	r6, [r6, #0]
 8005a72:	e7f7      	b.n	8005a64 <__sfp+0x18>
 8005a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a78:	b9d5      	cbnz	r5, 8005ab0 <__sfp+0x64>
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <__sfp+0x88>)
 8005a7c:	60e3      	str	r3, [r4, #12]
 8005a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a82:	6665      	str	r5, [r4, #100]	; 0x64
 8005a84:	f000 f847 	bl	8005b16 <__retarget_lock_init_recursive>
 8005a88:	f7ff ff96 	bl	80059b8 <__sfp_lock_release>
 8005a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a94:	6025      	str	r5, [r4, #0]
 8005a96:	61a5      	str	r5, [r4, #24]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aa0:	f7ff f93e 	bl	8004d20 <memset>
 8005aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005aac:	4620      	mov	r0, r4
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	3468      	adds	r4, #104	; 0x68
 8005ab2:	e7d9      	b.n	8005a68 <__sfp+0x1c>
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff ff62 	bl	8005980 <__sfmoreglue>
 8005abc:	4604      	mov	r4, r0
 8005abe:	6030      	str	r0, [r6, #0]
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1d5      	bne.n	8005a70 <__sfp+0x24>
 8005ac4:	f7ff ff78 	bl	80059b8 <__sfp_lock_release>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	e7ee      	b.n	8005aac <__sfp+0x60>
 8005ace:	bf00      	nop
 8005ad0:	08008998 	.word	0x08008998
 8005ad4:	ffff0001 	.word	0xffff0001

08005ad8 <_fwalk_reent>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4606      	mov	r6, r0
 8005ade:	4688      	mov	r8, r1
 8005ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ae4:	2700      	movs	r7, #0
 8005ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aea:	f1b9 0901 	subs.w	r9, r9, #1
 8005aee:	d505      	bpl.n	8005afc <_fwalk_reent+0x24>
 8005af0:	6824      	ldr	r4, [r4, #0]
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	d1f7      	bne.n	8005ae6 <_fwalk_reent+0xe>
 8005af6:	4638      	mov	r0, r7
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afc:	89ab      	ldrh	r3, [r5, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d907      	bls.n	8005b12 <_fwalk_reent+0x3a>
 8005b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b06:	3301      	adds	r3, #1
 8005b08:	d003      	beq.n	8005b12 <_fwalk_reent+0x3a>
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	47c0      	blx	r8
 8005b10:	4307      	orrs	r7, r0
 8005b12:	3568      	adds	r5, #104	; 0x68
 8005b14:	e7e9      	b.n	8005aea <_fwalk_reent+0x12>

08005b16 <__retarget_lock_init_recursive>:
 8005b16:	4770      	bx	lr

08005b18 <__retarget_lock_acquire_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_release_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__swhatbuf_r>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	460e      	mov	r6, r1
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	b096      	sub	sp, #88	; 0x58
 8005b28:	4614      	mov	r4, r2
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	da07      	bge.n	8005b3e <__swhatbuf_r+0x22>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	89b3      	ldrh	r3, [r6, #12]
 8005b34:	061a      	lsls	r2, r3, #24
 8005b36:	d410      	bmi.n	8005b5a <__swhatbuf_r+0x3e>
 8005b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3c:	e00e      	b.n	8005b5c <__swhatbuf_r+0x40>
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f000 f906 	bl	8005d50 <_fstat_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	dbf2      	blt.n	8005b2e <__swhatbuf_r+0x12>
 8005b48:	9a01      	ldr	r2, [sp, #4]
 8005b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b52:	425a      	negs	r2, r3
 8005b54:	415a      	adcs	r2, r3
 8005b56:	602a      	str	r2, [r5, #0]
 8005b58:	e7ee      	b.n	8005b38 <__swhatbuf_r+0x1c>
 8005b5a:	2340      	movs	r3, #64	; 0x40
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	b016      	add	sp, #88	; 0x58
 8005b62:	bd70      	pop	{r4, r5, r6, pc}

08005b64 <__smakebuf_r>:
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b68:	079d      	lsls	r5, r3, #30
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d507      	bpl.n	8005b80 <__smakebuf_r+0x1c>
 8005b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6163      	str	r3, [r4, #20]
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	ab01      	add	r3, sp, #4
 8005b82:	466a      	mov	r2, sp
 8005b84:	f7ff ffca 	bl	8005b1c <__swhatbuf_r>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff f9eb 	bl	8004f68 <_malloc_r>
 8005b92:	b948      	cbnz	r0, 8005ba8 <__smakebuf_r+0x44>
 8005b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b98:	059a      	lsls	r2, r3, #22
 8005b9a:	d4ef      	bmi.n	8005b7c <__smakebuf_r+0x18>
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	e7e3      	b.n	8005b70 <__smakebuf_r+0xc>
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <__smakebuf_r+0x7c>)
 8005baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	6020      	str	r0, [r4, #0]
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	6163      	str	r3, [r4, #20]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	6120      	str	r0, [r4, #16]
 8005bbe:	b15b      	cbz	r3, 8005bd8 <__smakebuf_r+0x74>
 8005bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 f8d5 	bl	8005d74 <_isatty_r>
 8005bca:	b128      	cbz	r0, 8005bd8 <__smakebuf_r+0x74>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	89a0      	ldrh	r0, [r4, #12]
 8005bda:	4305      	orrs	r5, r0
 8005bdc:	81a5      	strh	r5, [r4, #12]
 8005bde:	e7cd      	b.n	8005b7c <__smakebuf_r+0x18>
 8005be0:	08005975 	.word	0x08005975

08005be4 <__malloc_lock>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__malloc_lock+0x8>)
 8005be6:	f7ff bf97 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20003388 	.word	0x20003388

08005bf0 <__malloc_unlock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_unlock+0x8>)
 8005bf2:	f7ff bf92 	b.w	8005b1a <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20003388 	.word	0x20003388

08005bfc <_raise_r>:
 8005bfc:	291f      	cmp	r1, #31
 8005bfe:	b538      	push	{r3, r4, r5, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	d904      	bls.n	8005c10 <_raise_r+0x14>
 8005c06:	2316      	movs	r3, #22
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c12:	b112      	cbz	r2, 8005c1a <_raise_r+0x1e>
 8005c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c18:	b94b      	cbnz	r3, 8005c2e <_raise_r+0x32>
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 f830 	bl	8005c80 <_getpid_r>
 8005c20:	462a      	mov	r2, r5
 8005c22:	4601      	mov	r1, r0
 8005c24:	4620      	mov	r0, r4
 8005c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c2a:	f000 b817 	b.w	8005c5c <_kill_r>
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d00a      	beq.n	8005c48 <_raise_r+0x4c>
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	d103      	bne.n	8005c3e <_raise_r+0x42>
 8005c36:	2316      	movs	r3, #22
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e7e7      	b.n	8005c0e <_raise_r+0x12>
 8005c3e:	2400      	movs	r4, #0
 8005c40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c44:	4628      	mov	r0, r5
 8005c46:	4798      	blx	r3
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7e0      	b.n	8005c0e <_raise_r+0x12>

08005c4c <raise>:
 8005c4c:	4b02      	ldr	r3, [pc, #8]	; (8005c58 <raise+0xc>)
 8005c4e:	4601      	mov	r1, r0
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f7ff bfd3 	b.w	8005bfc <_raise_r>
 8005c56:	bf00      	nop
 8005c58:	20000040 	.word	0x20000040

08005c5c <_kill_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d07      	ldr	r5, [pc, #28]	; (8005c7c <_kill_r+0x20>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	f7fb fa11 	bl	8001090 <_kill>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d102      	bne.n	8005c78 <_kill_r+0x1c>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	b103      	cbz	r3, 8005c78 <_kill_r+0x1c>
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	bd38      	pop	{r3, r4, r5, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20003390 	.word	0x20003390

08005c80 <_getpid_r>:
 8005c80:	f7fb b9fe 	b.w	8001080 <_getpid>

08005c84 <__sread>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	f000 f894 	bl	8005db8 <_read_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bfab      	itete	ge
 8005c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c96:	89a3      	ldrhlt	r3, [r4, #12]
 8005c98:	181b      	addge	r3, r3, r0
 8005c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9e:	bfac      	ite	ge
 8005ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ca2:	81a3      	strhlt	r3, [r4, #12]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__swrite>:
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	d505      	bpl.n	8005cc4 <__swrite+0x1e>
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f868 	bl	8005d94 <_lseek_r>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	f000 b817 	b.w	8005d0c <_write_r>

08005cde <__sseek>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 f855 	bl	8005d94 <_lseek_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	bf15      	itete	ne
 8005cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strheq	r3, [r4, #12]
 8005cfc:	bf18      	it	ne
 8005cfe:	81a3      	strhne	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__sclose>:
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 b813 	b.w	8005d30 <_close_r>
	...

08005d0c <_write_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	; (8005d2c <_write_r+0x20>)
 8005d10:	4604      	mov	r4, r0
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fb f9ef 	bl	80010fe <_write>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_write_r+0x1e>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_write_r+0x1e>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20003390 	.word	0x20003390

08005d30 <_close_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	; (8005d4c <_close_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7fb f9fb 	bl	8001136 <_close>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_close_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_close_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20003390 	.word	0x20003390

08005d50 <_fstat_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	; (8005d70 <_fstat_r+0x20>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	f7fb f9f6 	bl	800114e <_fstat>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d102      	bne.n	8005d6c <_fstat_r+0x1c>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	b103      	cbz	r3, 8005d6c <_fstat_r+0x1c>
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	20003390 	.word	0x20003390

08005d74 <_isatty_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d06      	ldr	r5, [pc, #24]	; (8005d90 <_isatty_r+0x1c>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fb f9f5 	bl	800116e <_isatty>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_isatty_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_isatty_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20003390 	.word	0x20003390

08005d94 <_lseek_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	; (8005db4 <_lseek_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fb f9ee 	bl	8001184 <_lseek>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_lseek_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_lseek_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20003390 	.word	0x20003390

08005db8 <_read_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	; (8005dd8 <_read_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fb f97c 	bl	80010c4 <_read>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_read_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_read_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20003390 	.word	0x20003390

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
