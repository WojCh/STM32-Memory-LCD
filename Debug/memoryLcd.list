
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bce0  08011a90  08011a90  00021a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d770  0801d770  00030294  2**0
                  CONTENTS
  4 .ARM          00000008  0801d770  0801d770  0002d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d778  0801d778  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d778  0801d778  0002d778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d77c  0801d77c  0002d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0801d780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030294  2**0
                  CONTENTS
 10 .bss          000057e0  20000294  20000294  00030294  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005a74  20005a74  00030294  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002734b  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006116  00000000  00000000  0005760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002028  00000000  00000000  0005d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001da0  00000000  00000000  0005f750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d1d0  00000000  00000000  000614f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dbd9  00000000  00000000  0008e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efb54  00000000  00000000  000bc299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001abded  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009788  00000000  00000000  001abe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000294 	.word	0x20000294
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011a74 	.word	0x08011a74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000298 	.word	0x20000298
 80001ec:	08011a74 	.word	0x08011a74

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <SD_logger+0x24>)
 8000f76:	f000 fa1d 	bl	80013b4 <Create_Dir>
	Create_File("logs/LOG.TXT");
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <SD_logger+0x28>)
 8000f7c:	f000 f8da 	bl	8001134 <Create_File>
	Update_File("logs/LOG.TXT", msg);
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <SD_logger+0x28>)
 8000f84:	f000 f962 	bl	800124c <Update_File>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08011a90 	.word	0x08011a90
 8000f94:	08011a98 	.word	0x08011a98

08000f98 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <Mount_SD+0x30>)
 8000fa6:	f00b ffcb 	bl	800cf40 <f_mount>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <Mount_SD+0x34>)
 8000fb0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <Mount_SD+0x34>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <Mount_SD+0x26>
		return SD_ERROR;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 8000fbe:	2301      	movs	r3, #1
	}
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200002b0 	.word	0x200002b0
 8000fcc:	2000232c 	.word	0x2000232c

08000fd0 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000fda:	494d      	ldr	r1, [pc, #308]	; (8001110 <Read_File+0x140>)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f00c fd5c 	bl	800da9a <f_stat>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <Read_File+0x144>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000fea:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <Read_File+0x144>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00f      	beq.n	8001012 <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8000ff2:	2064      	movs	r0, #100	; 0x64
 8000ff4:	f00c ff4e 	bl	800de94 <malloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4946      	ldr	r1, [pc, #280]	; (8001118 <Read_File+0x148>)
 8001000:	68b8      	ldr	r0, [r7, #8]
 8001002:	f00d fe21 	bl	800ec48 <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001006:	68b8      	ldr	r0, [r7, #8]
 8001008:	f00c ff4c 	bl	800dea4 <free>
	    return fresult;
 800100c:	4b41      	ldr	r3, [pc, #260]	; (8001114 <Read_File+0x144>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	e07a      	b.n	8001108 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8001012:	2201      	movs	r2, #1
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4841      	ldr	r0, [pc, #260]	; (800111c <Read_File+0x14c>)
 8001018:	f00b ffd8 	bl	800cfcc <f_open>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <Read_File+0x144>)
 8001022:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <Read_File+0x144>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d012      	beq.n	8001052 <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f00c ff31 	bl	800de94 <malloc>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <Read_File+0x144>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4938      	ldr	r1, [pc, #224]	; (8001120 <Read_File+0x150>)
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f00d fe01 	bl	800ec48 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f00c ff2c 	bl	800dea4 <free>
		    return fresult;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <Read_File+0x144>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	e05a      	b.n	8001108 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8001052:	2004      	movs	r0, #4
 8001054:	f00c ff1e 	bl	800de94 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <Read_File+0x14c>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	4b30      	ldr	r3, [pc, #192]	; (8001124 <Read_File+0x154>)
 8001062:	69f9      	ldr	r1, [r7, #28]
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <Read_File+0x14c>)
 8001066:	f00c f97d 	bl	800d364 <f_read>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Read_File+0x144>)
 8001070:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <Read_File+0x144>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d013      	beq.n	80010a2 <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800107a:	2064      	movs	r0, #100	; 0x64
 800107c:	f00c ff0a 	bl	800de94 <malloc>
 8001080:	4603      	mov	r3, r0
 8001082:	613b      	str	r3, [r7, #16]
			free(buffer);
 8001084:	69f8      	ldr	r0, [r7, #28]
 8001086:	f00c ff0d 	bl	800dea4 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <Read_File+0x144>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4925      	ldr	r1, [pc, #148]	; (8001128 <Read_File+0x158>)
 8001094:	6938      	ldr	r0, [r7, #16]
 8001096:	f00d fdd7 	bl	800ec48 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 800109a:	6938      	ldr	r0, [r7, #16]
 800109c:	f00c ff02 	bl	800dea4 <free>
 80010a0:	e030      	b.n	8001104 <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80010a2:	2231      	movs	r2, #49	; 0x31
 80010a4:	69f9      	ldr	r1, [r7, #28]
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f00d fe31 	bl	800ed0e <strncpy>
			free(buffer);
 80010ac:	69f8      	ldr	r0, [r7, #28]
 80010ae:	f00c fef9 	bl	800dea4 <free>

			/* Close file */
			fresult = f_close(&fil);
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <Read_File+0x14c>)
 80010b4:	f00c fcc7 	bl	800da46 <f_close>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <Read_File+0x144>)
 80010be:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <Read_File+0x144>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d010      	beq.n	80010ea <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f00c fee3 	bl	800de94 <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <Read_File+0x144>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4914      	ldr	r1, [pc, #80]	; (800112c <Read_File+0x15c>)
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f00d fdb3 	bl	800ec48 <siprintf>
//				Send_Uart(buf);
				free(buf);
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f00c fede 	bl	800dea4 <free>
 80010e8:	e00c      	b.n	8001104 <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f00c fed2 	bl	800de94 <malloc>
 80010f0:	4603      	mov	r3, r0
 80010f2:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <Read_File+0x160>)
 80010f8:	69b8      	ldr	r0, [r7, #24]
 80010fa:	f00d fda5 	bl	800ec48 <siprintf>
//				Send_Uart(buf);
				free(buf);
 80010fe:	69b8      	ldr	r0, [r7, #24]
 8001100:	f00c fed0 	bl	800dea4 <free>
			}
		}
	    return fresult;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <Read_File+0x144>)
 8001106:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001108:	4618      	mov	r0, r3
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20002314 	.word	0x20002314
 8001114:	2000232c 	.word	0x2000232c
 8001118:	08011bcc 	.word	0x08011bcc
 800111c:	200012e4 	.word	0x200012e4
 8001120:	08011b08 	.word	0x08011b08
 8001124:	20002330 	.word	0x20002330
 8001128:	08011bf0 	.word	0x08011bf0
 800112c:	08011c18 	.word	0x08011c18
 8001130:	08011c40 	.word	0x08011c40

08001134 <Create_File>:

FRESULT Create_File (char *name)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800113c:	493b      	ldr	r1, [pc, #236]	; (800122c <Create_File+0xf8>)
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f00c fcab 	bl	800da9a <f_stat>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b39      	ldr	r3, [pc, #228]	; (8001230 <Create_File+0xfc>)
 800114a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <Create_File+0xfc>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10f      	bne.n	8001174 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f00c fe9d 	bl	800de94 <malloc>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4934      	ldr	r1, [pc, #208]	; (8001234 <Create_File+0x100>)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f00d fd70 	bl	800ec48 <siprintf>
//		Send_Uart(buf);
		free(buf);
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f00c fe9b 	bl	800dea4 <free>
	    return fresult;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <Create_File+0xfc>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	e057      	b.n	8001224 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001174:	220b      	movs	r2, #11
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	482f      	ldr	r0, [pc, #188]	; (8001238 <Create_File+0x104>)
 800117a:	f00b ff27 	bl	800cfcc <f_open>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <Create_File+0xfc>)
 8001184:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <Create_File+0xfc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f00c fe80 	bl	800de94 <malloc>
 8001194:	4603      	mov	r3, r0
 8001196:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <Create_File+0xfc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4926      	ldr	r1, [pc, #152]	; (800123c <Create_File+0x108>)
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f00d fd50 	bl	800ec48 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011a8:	6938      	ldr	r0, [r7, #16]
 80011aa:	f00c fe7b 	bl	800dea4 <free>
		    return fresult;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <Create_File+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e037      	b.n	8001224 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f00c fe6d 	bl	800de94 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	491f      	ldr	r1, [pc, #124]	; (8001240 <Create_File+0x10c>)
 80011c2:	69f8      	ldr	r0, [r7, #28]
 80011c4:	f00d fd40 	bl	800ec48 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011c8:	69f8      	ldr	r0, [r7, #28]
 80011ca:	f00c fe6b 	bl	800dea4 <free>
		}

		fresult = f_close(&fil);
 80011ce:	481a      	ldr	r0, [pc, #104]	; (8001238 <Create_File+0x104>)
 80011d0:	f00c fc39 	bl	800da46 <f_close>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <Create_File+0xfc>)
 80011da:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <Create_File+0xfc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d010      	beq.n	8001206 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011e4:	2064      	movs	r0, #100	; 0x64
 80011e6:	f00c fe55 	bl	800de94 <malloc>
 80011ea:	4603      	mov	r3, r0
 80011ec:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <Create_File+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4913      	ldr	r1, [pc, #76]	; (8001244 <Create_File+0x110>)
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f00d fd25 	bl	800ec48 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f00c fe50 	bl	800dea4 <free>
 8001204:	e00c      	b.n	8001220 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f00c fe44 	bl	800de94 <malloc>
 800120c:	4603      	mov	r3, r0
 800120e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <Create_File+0x114>)
 8001214:	69b8      	ldr	r0, [r7, #24]
 8001216:	f00d fd17 	bl	800ec48 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800121a:	69b8      	ldr	r0, [r7, #24]
 800121c:	f00c fe42 	bl	800dea4 <free>
		}
	}
    return fresult;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <Create_File+0xfc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20002314 	.word	0x20002314
 8001230:	2000232c 	.word	0x2000232c
 8001234:	08011c60 	.word	0x08011c60
 8001238:	200012e4 	.word	0x200012e4
 800123c:	08011c98 	.word	0x08011c98
 8001240:	08011cc0 	.word	0x08011cc0
 8001244:	08011d00 	.word	0x08011d00
 8001248:	08011c40 	.word	0x08011c40

0800124c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001256:	494d      	ldr	r1, [pc, #308]	; (800138c <Update_File+0x140>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f00c fc1e 	bl	800da9a <f_stat>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <Update_File+0x144>)
 8001264:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <Update_File+0x144>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00f      	beq.n	800128e <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800126e:	2064      	movs	r0, #100	; 0x64
 8001270:	f00c fe10 	bl	800de94 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4946      	ldr	r1, [pc, #280]	; (8001394 <Update_File+0x148>)
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00d fce3 	bl	800ec48 <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f00c fe0e 	bl	800dea4 <free>
	    return fresult;
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <Update_File+0x144>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	e079      	b.n	8001382 <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800128e:	2232      	movs	r2, #50	; 0x32
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4841      	ldr	r0, [pc, #260]	; (8001398 <Update_File+0x14c>)
 8001294:	f00b fe9a 	bl	800cfcc <f_open>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <Update_File+0x144>)
 800129e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012a0:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <Update_File+0x144>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d012      	beq.n	80012ce <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f00c fdf3 	bl	800de94 <malloc>
 80012ae:	4603      	mov	r3, r0
 80012b0:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <Update_File+0x144>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4938      	ldr	r1, [pc, #224]	; (800139c <Update_File+0x150>)
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f00d fcc3 	bl	800ec48 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f00c fdee 	bl	800dea4 <free>
	        return fresult;
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <Update_File+0x144>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e059      	b.n	8001382 <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7fe ff8e 	bl	80001f0 <strlen>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <Update_File+0x154>)
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	482f      	ldr	r0, [pc, #188]	; (8001398 <Update_File+0x14c>)
 80012dc:	f00c f9a1 	bl	800d622 <f_write>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <Update_File+0x144>)
 80012e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <Update_File+0x144>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d010      	beq.n	8001312 <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f00c fdcf 	bl	800de94 <malloc>
 80012f6:	4603      	mov	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <Update_File+0x144>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4928      	ldr	r1, [pc, #160]	; (80013a4 <Update_File+0x158>)
 8001304:	69b8      	ldr	r0, [r7, #24]
 8001306:	f00d fc9f 	bl	800ec48 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800130a:	69b8      	ldr	r0, [r7, #24]
 800130c:	f00c fdca 	bl	800dea4 <free>
 8001310:	e00c      	b.n	800132c <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f00c fdbe 	bl	800de94 <malloc>
 8001318:	4603      	mov	r3, r0
 800131a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4922      	ldr	r1, [pc, #136]	; (80013a8 <Update_File+0x15c>)
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	f00d fc91 	bl	800ec48 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001326:	69f8      	ldr	r0, [r7, #28]
 8001328:	f00c fdbc 	bl	800dea4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <Update_File+0x14c>)
 800132e:	f00c fb8a 	bl	800da46 <f_close>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <Update_File+0x144>)
 8001338:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <Update_File+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d010      	beq.n	8001364 <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f00c fda6 	bl	800de94 <malloc>
 8001348:	4603      	mov	r3, r0
 800134a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <Update_File+0x144>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4915      	ldr	r1, [pc, #84]	; (80013ac <Update_File+0x160>)
 8001356:	6938      	ldr	r0, [r7, #16]
 8001358:	f00d fc76 	bl	800ec48 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800135c:	6938      	ldr	r0, [r7, #16]
 800135e:	f00c fda1 	bl	800dea4 <free>
 8001362:	e00c      	b.n	800137e <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f00c fd95 	bl	800de94 <malloc>
 800136a:	4603      	mov	r3, r0
 800136c:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	490f      	ldr	r1, [pc, #60]	; (80013b0 <Update_File+0x164>)
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f00d fc68 	bl	800ec48 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f00c fd93 	bl	800dea4 <free>
	     }
	}
    return fresult;
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <Update_File+0x144>)
 8001380:	781b      	ldrb	r3, [r3, #0]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20002314 	.word	0x20002314
 8001390:	2000232c 	.word	0x2000232c
 8001394:	08011ae8 	.word	0x08011ae8
 8001398:	200012e4 	.word	0x200012e4
 800139c:	08011b08 	.word	0x08011b08
 80013a0:	20002334 	.word	0x20002334
 80013a4:	08011d24 	.word	0x08011d24
 80013a8:	08011d4c 	.word	0x08011d4c
 80013ac:	08011c18 	.word	0x08011c18
 80013b0:	08011c40 	.word	0x08011c40

080013b4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f00c fba5 	bl	800db0c <f_mkdir>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <Create_Dir+0x68>)
 80013c8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <Create_Dir+0x68>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10d      	bne.n	80013ee <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f00c fd5e 	bl	800de94 <malloc>
 80013d8:	4603      	mov	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4910      	ldr	r1, [pc, #64]	; (8001420 <Create_Dir+0x6c>)
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f00d fc31 	bl	800ec48 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f00c fd5c 	bl	800dea4 <free>
 80013ec:	e00f      	b.n	800140e <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f00c fd50 	bl	800de94 <malloc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <Create_Dir+0x68>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4908      	ldr	r1, [pc, #32]	; (8001424 <Create_Dir+0x70>)
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f00d fc20 	bl	800ec48 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f00c fd4b 	bl	800dea4 <free>
    }
    return fresult;
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <Create_Dir+0x68>)
 8001410:	781b      	ldrb	r3, [r3, #0]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000232c 	.word	0x2000232c
 8001420:	08011dac 	.word	0x08011dac
 8001424:	08011dd0 	.word	0x08011dd0

08001428 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001432:	2300      	movs	r3, #0
 8001434:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001436:	2332      	movs	r3, #50	; 0x32
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	22d0      	movs	r2, #208	; 0xd0
 8001446:	21ef      	movs	r1, #239	; 0xef
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <read_chip_id+0x3c>)
 800144a:	f004 fa81 	bl	8005950 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2b55      	cmp	r3, #85	; 0x55
 8001452:	d001      	beq.n	8001458 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001454:	2301      	movs	r3, #1
 8001456:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20002540 	.word	0x20002540

08001468 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001474:	2300      	movs	r3, #0
 8001476:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d81a      	bhi.n	80014b4 <set_oss+0x4c>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <set_oss+0x1c>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	0800149d 	.word	0x0800149d
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014ad 	.word	0x080014ad
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2205      	movs	r2, #5
 8001498:	705a      	strb	r2, [r3, #1]
			break;
 800149a:	e00f      	b.n	80014bc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2208      	movs	r2, #8
 80014a0:	705a      	strb	r2, [r3, #1]
			break;
 80014a2:	e00b      	b.n	80014bc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	220e      	movs	r2, #14
 80014a8:	705a      	strb	r2, [r3, #1]
			break;
 80014aa:	e007      	b.n	80014bc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	221a      	movs	r2, #26
 80014b0:	705a      	strb	r2, [r3, #1]
			break;
 80014b2:	e003      	b.n	80014bc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2208      	movs	r2, #8
 80014b8:	705a      	strb	r2, [r3, #1]
			break;
 80014ba:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	70fb      	strb	r3, [r7, #3]
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80014cc:	2332      	movs	r3, #50	; 0x32
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	22f4      	movs	r2, #244	; 0xf4
 80014de:	21ee      	movs	r1, #238	; 0xee
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <set_oss+0x88>)
 80014e2:	f004 f93b 	bl	800575c <HAL_I2C_Mem_Write>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20002540 	.word	0x20002540

080014f4 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001522:	2332      	movs	r3, #50	; 0x32
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	2316      	movs	r3, #22
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	22aa      	movs	r2, #170	; 0xaa
 8001534:	21ef      	movs	r1, #239	; 0xef
 8001536:	4827      	ldr	r0, [pc, #156]	; (80015d4 <read_calib_data+0xe0>)
 8001538:	f004 fa0a 	bl	8005950 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001542:	e03c      	b.n	80015be <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	3328      	adds	r3, #40	; 0x28
 800154c:	443b      	add	r3, r7
 800154e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b219      	sxth	r1, r3
 8001556:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800155a:	3328      	adds	r3, #40	; 0x28
 800155c:	443b      	add	r3, r7
 800155e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001562:	b21a      	sxth	r2, r3
 8001564:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4403      	add	r3, r0
 800156e:	430a      	orrs	r2, r1
 8001570:	b212      	sxth	r2, r2
 8001572:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2da      	uxtb	r2, r3
 800158c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	440b      	add	r3, r1
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b8:	3301      	adds	r3, #1
 80015ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	d9be      	bls.n	8001544 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20002540 	.word	0x20002540

080015d8 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2204      	movs	r2, #4
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00c fc72 	bl	800ded0 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80015ec:	687c      	ldr	r4, [r7, #4]
 80015ee:	f7ff ff1b 	bl	8001428 <read_chip_id>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff79 	bl	80014f4 <read_calib_data>
 8001602:	4603      	mov	r3, r0
 8001604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3340      	adds	r3, #64	; 0x40
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff2a 	bl	8001468 <set_oss>
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001622:	232e      	movs	r3, #46	; 0x2e
 8001624:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001626:	2332      	movs	r3, #50	; 0x32
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	22f4      	movs	r2, #244	; 0xf4
 8001636:	21ee      	movs	r1, #238	; 0xee
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <get_ut+0x50>)
 800163a:	f004 f88f 	bl	800575c <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 800163e:	2005      	movs	r0, #5
 8001640:	f003 fb70 	bl	8004d24 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001644:	2332      	movs	r3, #50	; 0x32
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	2302      	movs	r3, #2
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	22f6      	movs	r2, #246	; 0xf6
 8001654:	21ef      	movs	r1, #239	; 0xef
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <get_ut+0x50>)
 8001658:	f004 f97a 	bl	8005950 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 800165c:	793b      	ldrb	r3, [r7, #4]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	797a      	ldrb	r2, [r7, #5]
 8001662:	4313      	orrs	r3, r2
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20002540 	.word	0x20002540

08001670 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 7a06 	vldr	s15, [r3, #24]
 800168c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001690:	ee17 2a90 	vmov	r2, s15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	895b      	ldrh	r3, [r3, #10]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	8912      	ldrh	r2, [r2, #8]
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	13db      	asrs	r3, r3, #15
 80016a4:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ac:	02da      	lsls	r2, r3, #11
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016b4:	4619      	mov	r1, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	440b      	add	r3, r1
 80016ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80016be:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	441a      	add	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	3308      	adds	r3, #8
 80016d0:	111b      	asrs	r3, r3, #4
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016da:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001728 <get_temp+0xb8>
 80016de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e2:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800172c <get_temp+0xbc>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d908      	bls.n	800170a <get_temp+0x9a>
 80016f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001730 <get_temp+0xc0>
 8001700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	db03      	blt.n	8001712 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2203      	movs	r2, #3
 800170e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	ee07 3a90 	vmov	s15, r3
}
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	3dcccccd 	.word	0x3dcccccd
 800172c:	c2200000 	.word	0xc2200000
 8001730:	42aa0000 	.word	0x42aa0000

08001734 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af04      	add	r7, sp, #16
 800173a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <get_up+0x7c>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	813b      	strh	r3, [r7, #8]
 8001742:	2300      	movs	r3, #0
 8001744:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800174a:	2334      	movs	r3, #52	; 0x34
 800174c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800174e:	2332      	movs	r3, #50	; 0x32
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f4      	movs	r2, #244	; 0xf4
 8001760:	21ee      	movs	r1, #238	; 0xee
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <get_up+0x80>)
 8001764:	f003 fffa 	bl	800575c <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fada 	bl	8004d24 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001770:	2332      	movs	r3, #50	; 0x32
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2303      	movs	r3, #3
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	22f6      	movs	r2, #246	; 0xf6
 8001782:	21ef      	movs	r1, #239	; 0xef
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <get_up+0x80>)
 8001786:	f004 f8e3 	bl	8005950 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800178a:	7a3b      	ldrb	r3, [r7, #8]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	7a7b      	ldrb	r3, [r7, #9]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	4413      	add	r3, r2
 8001794:	7aba      	ldrb	r2, [r7, #10]
 8001796:	441a      	add	r2, r3
 8001798:	793b      	ldrb	r3, [r7, #4]
 800179a:	f1c3 0308 	rsb	r3, r3, #8
 800179e:	fa42 f303 	asr.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
	return up;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08011e40 	.word	0x08011e40
 80017b4:	20002540 	.word	0x20002540

080017b8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017b8:	b084      	sub	sp, #16
 80017ba:	b480      	push	{r7}
 80017bc:	b089      	sub	sp, #36	; 0x24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80017d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80017d6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80017d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80017dc:	461a      	mov	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fb03 f303 	mul.w	r3, r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da01      	bge.n	80017ec <get_pressure+0x34>
 80017e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80017ec:	131b      	asrs	r3, r3, #12
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da01      	bge.n	80017fa <get_pressure+0x42>
 80017f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80017fa:	12db      	asrs	r3, r3, #11
 80017fc:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80017fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001802:	461a      	mov	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	da01      	bge.n	8001812 <get_pressure+0x5a>
 800180e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001812:	12db      	asrs	r3, r3, #11
 8001814:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800181e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001822:	009a      	lsls	r2, r3, #2
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800182c:	4093      	lsls	r3, r2
 800182e:	3302      	adds	r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	da00      	bge.n	8001836 <get_pressure+0x7e>
 8001834:	3303      	adds	r3, #3
 8001836:	109b      	asrs	r3, r3, #2
 8001838:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800183a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800183e:	461a      	mov	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	da02      	bge.n	8001850 <get_pressure+0x98>
 800184a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800184e:	331f      	adds	r3, #31
 8001850:	135b      	asrs	r3, r3, #13
 8001852:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001854:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001858:	461a      	mov	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fb03 f303 	mul.w	r3, r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	da01      	bge.n	8001868 <get_pressure+0xb0>
 8001864:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001868:	131b      	asrs	r3, r3, #12
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	da02      	bge.n	8001878 <get_pressure+0xc0>
 8001872:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001876:	33ff      	adds	r3, #255	; 0xff
 8001878:	141b      	asrs	r3, r3, #16
 800187a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	3302      	adds	r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <get_pressure+0xd2>
 8001888:	3303      	adds	r3, #3
 800188a:	109b      	asrs	r3, r3, #2
 800188c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800188e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	0bdb      	lsrs	r3, r3, #15
 800189e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80018ac:	4611      	mov	r1, r2
 80018ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018b2:	410a      	asrs	r2, r1
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db06      	blt.n	80018ce <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	005a      	lsls	r2, r3, #1
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	e005      	b.n	80018da <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da00      	bge.n	80018e2 <get_pressure+0x12a>
 80018e0:	33ff      	adds	r3, #255	; 0xff
 80018e2:	121b      	asrs	r3, r3, #8
 80018e4:	461a      	mov	r2, r3
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da00      	bge.n	80018ee <get_pressure+0x136>
 80018ec:	33ff      	adds	r3, #255	; 0xff
 80018ee:	121b      	asrs	r3, r3, #8
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f640 32de 	movw	r2, #3038	; 0xbde
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	da02      	bge.n	800190a <get_pressure+0x152>
 8001904:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001908:	33ff      	adds	r3, #255	; 0xff
 800190a:	141b      	asrs	r3, r3, #16
 800190c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <get_pressure+0x198>)
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <get_pressure+0x168>
 800191a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800191e:	33ff      	adds	r3, #255	; 0xff
 8001920:	141b      	asrs	r3, r3, #16
 8001922:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800192e:	2b00      	cmp	r3, #0
 8001930:	da00      	bge.n	8001934 <get_pressure+0x17c>
 8001932:	330f      	adds	r3, #15
 8001934:	111b      	asrs	r3, r3, #4
 8001936:	461a      	mov	r2, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]

	return p;
 800193e:	69fb      	ldr	r3, [r7, #28]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	ffffe343 	.word	0xffffe343
 8001954:	00000000 	.word	0x00000000

08001958 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <get_altitude+0xb8>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800197c:	ee16 0a90 	vmov	r0, s13
 8001980:	f7fe fdf2 	bl	8000568 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a00 <get_altitude+0xa8>
 800198c:	ec43 2b10 	vmov	d0, r2, r3
 8001990:	f00f f956 	bl	8010c40 <pow>
 8001994:	ec53 2b10 	vmov	r2, r3, d0
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	491d      	ldr	r1, [pc, #116]	; (8001a14 <get_altitude+0xbc>)
 800199e:	f7fe fc83 	bl	80002a8 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	a317      	add	r3, pc, #92	; (adr r3, 8001a08 <get_altitude+0xb0>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fe32 	bl	8000618 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f904 	bl	8000bc8 <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80019c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a18 <get_altitude+0xc0>
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d908      	bls.n	80019e8 <get_altitude+0x90>
 80019d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a1c <get_altitude+0xc4>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	db03      	blt.n	80019f0 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2205      	movs	r2, #5
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ee07 3a90 	vmov	s15, r3
}
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	ccd9456c 	.word	0xccd9456c
 8001a04:	3fc85b95 	.word	0x3fc85b95
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40e5a540 	.word	0x40e5a540
 8001a10:	20000000 	.word	0x20000000
 8001a14:	3ff00000 	.word	0x3ff00000
 8001a18:	c3fa0000 	.word	0xc3fa0000
 8001a1c:	460ca000 	.word	0x460ca000

08001a20 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd86 	bl	8000544 <__aeabi_i2d>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	460d      	mov	r5, r1
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <get_slp+0x80>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001aa4 <get_slp+0x84>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	ee17 0a90 	vmov	r0, s15
 8001a56:	f7fe fd87 	bl	8000568 <__aeabi_f2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001a98 <get_slp+0x78>
 8001a62:	ec43 2b10 	vmov	d0, r2, r3
 8001a66:	f00f f8eb 	bl	8010c40 <pow>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fefb 	bl	800086c <__aeabi_ddiv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f8a3 	bl	8000bc8 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	60fb      	str	r3, [r7, #12]

	return slp;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ee07 3a90 	vmov	s15, r3
}
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	b851eb85 	.word	0xb851eb85
 8001a9c:	4015051e 	.word	0x4015051e
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	472d2a00 	.word	0x472d2a00

08001aa8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b095      	sub	sp, #84	; 0x54
 8001aac:	af0e      	add	r7, sp, #56	; 0x38
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001ab2:	f7ff fdb3 	bl	800161c <get_ut>
 8001ab6:	ee07 0a90 	vmov	s15, r0
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff fdd3 	bl	8001670 <get_temp>
 8001aca:	eef0 7a40 	vmov.f32	s15, s0
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001ad8:	f7ff fe2c 	bl	8001734 <get_up>
 8001adc:	4602      	mov	r2, r0
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001ae2:	683e      	ldr	r6, [r7, #0]
 8001ae4:	466d      	mov	r5, sp
 8001ae6:	f106 0410 	add.w	r4, r6, #16
 8001aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	602b      	str	r3, [r5, #0]
 8001afa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001afe:	f7ff fe5b 	bl	80017b8 <get_pressure>
 8001b02:	4602      	mov	r2, r0
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001b08:	6838      	ldr	r0, [r7, #0]
 8001b0a:	f7ff ff89 	bl	8001a20 <get_slp>
 8001b0e:	eef0 7a40 	vmov.f32	s15, s0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f7ff ff1d 	bl	8001958 <get_altitude>
 8001b1e:	eef0 7a40 	vmov.f32	s15, s0
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	617b      	str	r3, [r7, #20]
	return result;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	461c      	mov	r4, r3
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b58 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001b64:	e0ad      	b.n	8001cc2 <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	440b      	add	r3, r1
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4959      	ldr	r1, [pc, #356]	; (8001cd8 <initButtons+0x180>)
 8001b74:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b78:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	440b      	add	r3, r1
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4955      	ldr	r1, [pc, #340]	; (8001cdc <initButtons+0x184>)
 8001b88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b8c:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	7993      	ldrb	r3, [r2, #6]
 8001b9a:	f36f 0300 	bfc	r3, #0, #1
 8001b9e:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	7993      	ldrb	r3, [r2, #6]
 8001bac:	f36f 0341 	bfc	r3, #1, #1
 8001bb0:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	f67f af4e 	bls.w	8001b66 <initButtons+0xe>
	}
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000020 	.word	0x20000020
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f003 fb7e 	bl	80053f4 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <scanButton>:

void scanButton(Button* btn){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	799b      	ldrb	r3, [r3, #6]
 8001d18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	b2d9      	uxtb	r1, r3
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	7993      	ldrb	r3, [r2, #6]
 8001d2c:	f361 0300 	bfi	r3, r1, #0, #1
 8001d30:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffd4 	bl	8001ce0 <readButton>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	7993      	ldrb	r3, [r2, #6]
 8001d48:	f361 0341 	bfi	r3, r1, #1, #1
 8001d4c:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001d4e:	7bba      	ldrb	r2, [r7, #14]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d158      	bne.n	8001e08 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 8001d56:	7bbb      	ldrb	r3, [r7, #14]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d14e      	bne.n	8001dfa <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d62:	3301      	adds	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7a9b      	ldrb	r3, [r3, #10]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2000      	movs	r0, #0
 8001d86:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7a9b      	ldrb	r3, [r3, #10]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <scanButton+0x17c>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d32d      	bcc.n	8001df2 <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7b5b      	ldrb	r3, [r3, #13]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d110      	bne.n	8001dc0 <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2000      	movs	r0, #0
 8001dac:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7a5b      	ldrb	r3, [r3, #9]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7a9b      	ldrb	r3, [r3, #10]
 8001dc4:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <scanButton+0x17c>)
 8001dc6:	8852      	ldrh	r2, [r2, #2]
 8001dc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dcc:	fb01 f202 	mul.w	r2, r1, r2
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2000      	movs	r0, #0
 8001de4:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7adb      	ldrb	r3, [r3, #11]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001df8:	e042      	b.n	8001e80 <scanButton+0x174>
			btn->shortSingleHandled = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	735a      	strb	r2, [r3, #13]
}
 8001e06:	e03b      	b.n	8001e80 <scanButton+0x174>
		if(currStatus == 1){
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11f      	bne.n	8001e4e <scanButton+0x142>
			btn->shortContinuous = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7b1b      	ldrb	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12e      	bne.n	8001e80 <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <scanButton+0x12e>
					pulseVib(5, 75);
 8001e2a:	214b      	movs	r1, #75	; 0x4b
 8001e2c:	2005      	movs	r0, #5
 8001e2e:	f002 faf5 	bl	800441c <pulseVib>
					btn->onSinglePressHandler(NULL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2000      	movs	r0, #0
 8001e38:	4798      	blx	r3
				btn->shortSingleOn++;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	79db      	ldrb	r3, [r3, #7]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	731a      	strb	r2, [r3, #12]
}
 8001e4c:	e018      	b.n	8001e80 <scanButton+0x174>
			if(btn->releaseHandled == 0){
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7b9b      	ldrb	r3, [r3, #14]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d114      	bne.n	8001e80 <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	2000      	movs	r0, #0
 8001e64:	4798      	blx	r3
				btn->pressedFor = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7a1b      	ldrb	r3, [r3, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	739a      	strb	r2, [r3, #14]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000044 	.word	0x20000044

08001e8c <scanButtons>:


void scanButtons(Button* btns[6]){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001e98:	e00a      	b.n	8001eb0 <scanButtons+0x24>
		scanButton(btns[i]);
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <scanButton>
		i++;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	3301      	adds	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d9f1      	bls.n	8001e9a <scanButtons+0xe>
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	791b      	ldrb	r3, [r3, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <pauseTimer>:
	cnt->remainingSec = seconds;
}
void startTimer(countdown_t *cnt){
	cnt->isRunning = 1;
}
void pauseTimer(countdown_t *cnt){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	711a      	strb	r2, [r3, #4]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	; 0x38
 8001ef8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a71      	ldr	r2, [pc, #452]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a6a      	ldr	r2, [pc, #424]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a5c      	ldr	r2, [pc, #368]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a40      	ldr	r2, [pc, #256]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <MX_GPIO_Init+0x1e4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	483b      	ldr	r0, [pc, #236]	; (80020dc <MX_GPIO_Init+0x1e8>)
 8001ff0:	f003 fa18 	bl	8005424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ffa:	4839      	ldr	r0, [pc, #228]	; (80020e0 <MX_GPIO_Init+0x1ec>)
 8001ffc:	f003 fa12 	bl	8005424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	4837      	ldr	r0, [pc, #220]	; (80020e4 <MX_GPIO_Init+0x1f0>)
 8002006:	f003 fa0d 	bl	8005424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	4835      	ldr	r0, [pc, #212]	; (80020e8 <MX_GPIO_Init+0x1f4>)
 8002012:	f003 fa07 	bl	8005424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	482b      	ldr	r0, [pc, #172]	; (80020dc <MX_GPIO_Init+0x1e8>)
 800202e:	f003 f835 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002032:	f244 0381 	movw	r3, #16513	; 0x4081
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4825      	ldr	r0, [pc, #148]	; (80020e0 <MX_GPIO_Init+0x1ec>)
 800204c:	f003 f826 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8002050:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002056:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4821      	ldr	r0, [pc, #132]	; (80020ec <MX_GPIO_Init+0x1f8>)
 8002068:	f003 f818 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4818      	ldr	r0, [pc, #96]	; (80020e4 <MX_GPIO_Init+0x1f0>)
 8002084:	f003 f80a 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <MX_GPIO_Init+0x1f0>)
 800209c:	f002 fffe 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80020a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <MX_GPIO_Init+0x1f4>)
 80020ba:	f002 ffef 	bl	800509c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2028      	movs	r0, #40	; 0x28
 80020c4:	f002 ff2d 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020c8:	2028      	movs	r0, #40	; 0x28
 80020ca:	f002 ff46 	bl	8004f5a <HAL_NVIC_EnableIRQ>

}
 80020ce:	bf00      	nop
 80020d0:	3738      	adds	r7, #56	; 0x38
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40021000 	.word	0x40021000

080020f0 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002100:	4619      	mov	r1, r3
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <getDataFromUart+0x20>)
 8002104:	f007 fd2f 	bl	8009b66 <HAL_UART_Receive_DMA>

}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200059d8 	.word	0x200059d8

08002114 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8002114:	b580      	push	{r7, lr}
 8002116:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800211a:	af00      	add	r7, sp, #0
 800211c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002120:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002124:	6018      	str	r0, [r3, #0]
 8002126:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800212a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800212e:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002130:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002134:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002138:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800213c:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	3304      	adds	r3, #4
 800214a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f00c fddc 	bl	800ed0e <strncpy>
	gpsModule.getData = &getDataFromUart;
 8002156:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800215a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <initGps+0x90>)
 8002160:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 8002164:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002168:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 8002172:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002176:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002180:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f44f 7319 	mov.w	r3, #612	; 0x264
 800218c:	461a      	mov	r2, r3
 800218e:	f00b fe91 	bl	800deb4 <memcpy>
}
 8002192:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002196:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	080020f1 	.word	0x080020f1

080021a8 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <showGui+0x2c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <showGui+0x18>
		moduleSetupPtr();
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <showGui+0x30>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4798      	blx	r3
		isModuleSet = 1;
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <showGui+0x2c>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <showGui+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <showGui+0x26>
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <showGui+0x34>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4798      	blx	r3
//	lcdRefresh();
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000253c 	.word	0x2000253c
 80021d8:	20000048 	.word	0x20000048
 80021dc:	2000004c 	.word	0x2000004c

080021e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_I2C1_Init+0x74>)
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <MX_I2C1_Init+0x78>)
 80021e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_I2C1_Init+0x74>)
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <MX_I2C1_Init+0x7c>)
 80021ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_I2C1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_I2C1_Init+0x74>)
 80021fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_I2C1_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_I2C1_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_I2C1_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_I2C1_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_I2C1_Init+0x74>)
 800221e:	f003 f959 	bl	80054d4 <HAL_I2C_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002228:	f001 fac2 	bl	80037b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800222c:	2100      	movs	r1, #0
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <MX_I2C1_Init+0x74>)
 8002230:	f004 f90f 	bl	8006452 <HAL_I2CEx_ConfigAnalogFilter>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800223a:	f001 fab9 	bl	80037b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800223e:	2100      	movs	r1, #0
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_I2C1_Init+0x74>)
 8002242:	f004 f942 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800224c:	f001 fab0 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20002540 	.word	0x20002540
 8002258:	40005400 	.word	0x40005400
 800225c:	000186a0 	.word	0x000186a0

08002260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_I2C_MspInit+0x84>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d12c      	bne.n	80022dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800229e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a4:	2312      	movs	r3, #18
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022b0:	2304      	movs	r3, #4
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	480c      	ldr	r0, [pc, #48]	; (80022ec <HAL_I2C_MspInit+0x8c>)
 80022bc:	f002 feee 	bl	800509c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40005400 	.word	0x40005400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020400 	.word	0x40020400

080022f0 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 80022fa:	2307      	movs	r3, #7
 80022fc:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 800230a:	e010      	b.n	800232e <reverse_uint8+0x3e>
		result = result << 1;
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002320:	7bba      	ldrb	r2, [r7, #14]
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	4313      	orrs	r3, r2
 8002326:	73bb      	strb	r3, [r7, #14]
		times--;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	3b01      	subs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1eb      	bne.n	800230c <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002334:	7bbb      	ldrb	r3, [r7, #14]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	updateSetting(0);
 800234a:	2000      	movs	r0, #0
 800234c:	f000 f824 	bl	8002398 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	e014      	b.n	8002380 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002356:	2300      	movs	r3, #0
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	e00b      	b.n	8002374 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2232      	movs	r2, #50	; 0x32
 8002360:	fb03 f202 	mul.w	r2, r3, r2
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <lcdClearBuffer+0x50>)
 800236a:	21ff      	movs	r1, #255	; 0xff
 800236c:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800236e:	88bb      	ldrh	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	80bb      	strh	r3, [r7, #4]
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	2b31      	cmp	r3, #49	; 0x31
 8002378:	d9f0      	bls.n	800235c <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	3301      	adds	r3, #1
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2bef      	cmp	r3, #239	; 0xef
 8002384:	d9e7      	bls.n	8002356 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f000 f806 	bl	8002398 <updateSetting>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20002598 	.word	0x20002598

08002398 <updateSetting>:

void updateSetting(uint8_t state){
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <updateSetting+0x1c>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	7013      	strb	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	20000050 	.word	0x20000050

080023b8 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4603      	mov	r3, r0
 80023c2:	80fb      	strh	r3, [r7, #6]
 80023c4:	460b      	mov	r3, r1
 80023c6:	717b      	strb	r3, [r7, #5]
 80023c8:	4613      	mov	r3, r2
 80023ca:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	795b      	ldrb	r3, [r3, #5]
 80023d0:	793a      	ldrb	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d304      	bcc.n	80023e0 <lcdPutChar+0x28>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	799b      	ldrb	r3, [r3, #6]
 80023da:	793a      	ldrb	r2, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d902      	bls.n	80023e6 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	79db      	ldrb	r3, [r3, #7]
 80023e4:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	08db      	lsrs	r3, r3, #3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	885b      	ldrh	r3, [r3, #2]
 80023fc:	461a      	mov	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	fb92 f3f3 	sdiv	r3, r2, r3
 8002406:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
 800240c:	e09b      	b.n	8002546 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800240e:	797a      	ldrb	r2, [r7, #5]
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	4413      	add	r3, r2
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	0091      	lsls	r1, r2, #2
 8002420:	461a      	mov	r2, r3
 8002422:	460b      	mov	r3, r1
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002432:	793b      	ldrb	r3, [r7, #4]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	7952      	ldrb	r2, [r2, #5]
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	8852      	ldrh	r2, [r2, #2]
 800243e:	fb03 f202 	mul.w	r2, r3, r2
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	7cb9      	ldrb	r1, [r7, #18]
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	3308      	adds	r3, #8
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	7d3b      	ldrb	r3, [r7, #20]
 800245c:	fa42 f303 	asr.w	r3, r2, r3
 8002460:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002462:	8a3b      	ldrh	r3, [r7, #16]
 8002464:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <lcdPutChar+0x1a8>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	b25a      	sxtb	r2, r3
 800246a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800246e:	43db      	mvns	r3, r3
 8002470:	b25b      	sxtb	r3, r3
 8002472:	4013      	ands	r3, r2
 8002474:	b25a      	sxtb	r2, r3
 8002476:	8a3b      	ldrh	r3, [r7, #16]
 8002478:	b2d1      	uxtb	r1, r2
 800247a:	4a39      	ldr	r2, [pc, #228]	; (8002560 <lcdPutChar+0x1a8>)
 800247c:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	3308      	adds	r3, #8
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b25a      	sxtb	r2, r3
 800248a:	7d3b      	ldrb	r3, [r7, #20]
 800248c:	f1c3 0308 	rsb	r3, r3, #8
 8002490:	21ff      	movs	r1, #255	; 0xff
 8002492:	fa41 f303 	asr.w	r3, r1, r3
 8002496:	b25b      	sxtb	r3, r3
 8002498:	4013      	ands	r3, r2
 800249a:	b25b      	sxtb	r3, r3
 800249c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800249e:	2301      	movs	r3, #1
 80024a0:	757b      	strb	r3, [r7, #21]
 80024a2:	e029      	b.n	80024f8 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80024a4:	7d7a      	ldrb	r2, [r7, #21]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	7a1b      	ldrb	r3, [r3, #8]
 80024b0:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80024b2:	8a3a      	ldrh	r2, [r7, #16]
 80024b4:	7d7b      	ldrb	r3, [r7, #21]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <lcdPutChar+0x1a8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	b25a      	sxtb	r2, r3
 80024be:	7db9      	ldrb	r1, [r7, #22]
 80024c0:	7d3b      	ldrb	r3, [r7, #20]
 80024c2:	f1c3 0308 	rsb	r3, r3, #8
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	b259      	sxtb	r1, r3
 80024cc:	7af8      	ldrb	r0, [r7, #11]
 80024ce:	7d3b      	ldrb	r3, [r7, #20]
 80024d0:	fa40 f303 	asr.w	r3, r0, r3
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	430b      	orrs	r3, r1
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	4013      	ands	r3, r2
 80024e0:	b259      	sxtb	r1, r3
 80024e2:	8a3a      	ldrh	r2, [r7, #16]
 80024e4:	7d7b      	ldrb	r3, [r7, #21]
 80024e6:	4413      	add	r3, r2
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <lcdPutChar+0x1a8>)
 80024ec:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80024f2:	7d7b      	ldrb	r3, [r7, #21]
 80024f4:	3301      	adds	r3, #1
 80024f6:	757b      	strb	r3, [r7, #21]
 80024f8:	7d7a      	ldrb	r2, [r7, #21]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3307      	adds	r3, #7
 8002500:	10db      	asrs	r3, r3, #3
 8002502:	429a      	cmp	r2, r3
 8002504:	dbce      	blt.n	80024a4 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002506:	8a3a      	ldrh	r2, [r7, #16]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3307      	adds	r3, #7
 800250e:	10db      	asrs	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <lcdPutChar+0x1a8>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	b25a      	sxtb	r2, r3
 8002518:	7db9      	ldrb	r1, [r7, #22]
 800251a:	7d3b      	ldrb	r3, [r7, #20]
 800251c:	f1c3 0308 	rsb	r3, r3, #8
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	b25b      	sxtb	r3, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	4013      	ands	r3, r2
 800252c:	b259      	sxtb	r1, r3
 800252e:	8a3a      	ldrh	r2, [r7, #16]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	3307      	adds	r3, #7
 8002536:	10db      	asrs	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	b2c9      	uxtb	r1, r1
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <lcdPutChar+0x1a8>)
 800253e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	3301      	adds	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	7dfa      	ldrb	r2, [r7, #23]
 800254c:	429a      	cmp	r2, r3
 800254e:	f4ff af5e 	bcc.w	800240e <lcdPutChar+0x56>
	}
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20002598 	.word	0x20002598

08002564 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4603      	mov	r3, r0
 8002570:	81fb      	strh	r3, [r7, #14]
 8002572:	460b      	mov	r3, r1
 8002574:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
 800257a:	e015      	b.n	80025a8 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	b29b      	uxth	r3, r3
 8002586:	fb12 f303 	smulbb	r3, r2, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	4413      	add	r3, r2
 8002590:	b298      	uxth	r0, r3
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	4413      	add	r3, r2
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	7b79      	ldrb	r1, [r7, #13]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f7ff ff0b 	bl	80023b8 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	3301      	adds	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
 80025a8:	7dfc      	ldrb	r4, [r7, #23]
 80025aa:	68b8      	ldr	r0, [r7, #8]
 80025ac:	f7fd fe20 	bl	80001f0 <strlen>
 80025b0:	4603      	mov	r3, r0
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d3e2      	bcc.n	800257c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <lcdVLine>:
		}

	}
}

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80025c0:	b490      	push	{r4, r7}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4604      	mov	r4, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	80fb      	strh	r3, [r7, #6]
 80025d2:	4603      	mov	r3, r0
 80025d4:	80bb      	strh	r3, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
 80025da:	4613      	mov	r3, r2
 80025dc:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	88ba      	ldrh	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d905      	bls.n	8002606 <lcdVLine+0x46>
		uint8_t temp = y1;
 80025fa:	88bb      	ldrh	r3, [r7, #4]
 80025fc:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 8002606:	88bb      	ldrh	r3, [r7, #4]
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e04e      	b.n	80026aa <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2232      	movs	r2, #50	; 0x32
 8002610:	fb03 f202 	mul.w	r2, r3, r2
 8002614:	7b7b      	ldrb	r3, [r7, #13]
 8002616:	4413      	add	r3, r2
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <lcdVLine+0x100>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 800261e:	78bb      	ldrb	r3, [r7, #2]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d01e      	beq.n	8002662 <lcdVLine+0xa2>
 8002624:	2b02      	cmp	r3, #2
 8002626:	dc27      	bgt.n	8002678 <lcdVLine+0xb8>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <lcdVLine+0x72>
 800262c:	2b01      	cmp	r3, #1
 800262e:	d00b      	beq.n	8002648 <lcdVLine+0x88>
 8002630:	e022      	b.n	8002678 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	fa42 f303 	asr.w	r3, r2, r3
 800263a:	b25a      	sxtb	r2, r3
 800263c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002640:	4313      	orrs	r3, r2
 8002642:	b25b      	sxtb	r3, r3
 8002644:	73bb      	strb	r3, [r7, #14]
				break;
 8002646:	e024      	b.n	8002692 <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002648:	7b3b      	ldrb	r3, [r7, #12]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	fa42 f303 	asr.w	r3, r2, r3
 8002650:	b25b      	sxtb	r3, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	b25a      	sxtb	r2, r3
 8002656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800265a:	4013      	ands	r3, r2
 800265c:	b25b      	sxtb	r3, r3
 800265e:	73bb      	strb	r3, [r7, #14]
				break;
 8002660:	e017      	b.n	8002692 <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002662:	7b3b      	ldrb	r3, [r7, #12]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	fa42 f303 	asr.w	r3, r2, r3
 800266a:	b25a      	sxtb	r2, r3
 800266c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002670:	4053      	eors	r3, r2
 8002672:	b25b      	sxtb	r3, r3
 8002674:	73bb      	strb	r3, [r7, #14]
				break;
 8002676:	e00c      	b.n	8002692 <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8002678:	7b3b      	ldrb	r3, [r7, #12]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	fa42 f303 	asr.w	r3, r2, r3
 8002680:	b25b      	sxtb	r3, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	b25a      	sxtb	r2, r3
 8002686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800268a:	4013      	ands	r3, r2
 800268c:	b25b      	sxtb	r3, r3
 800268e:	73bb      	strb	r3, [r7, #14]
				break;
 8002690:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2232      	movs	r2, #50	; 0x32
 8002696:	fb03 f202 	mul.w	r2, r3, r2
 800269a:	7b7b      	ldrb	r3, [r7, #13]
 800269c:	4413      	add	r3, r2
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <lcdVLine+0x100>)
 80026a0:	7bba      	ldrb	r2, [r7, #14]
 80026a2:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d9ac      	bls.n	800260c <lcdVLine+0x4c>
	}
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc90      	pop	{r4, r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20002598 	.word	0x20002598

080026c4 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80026c4:	b490      	push	{r4, r7}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4604      	mov	r4, r0
 80026cc:	4608      	mov	r0, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	80fb      	strh	r3, [r7, #6]
 80026d6:	4603      	mov	r3, r0
 80026d8:	80bb      	strh	r3, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	70fb      	strb	r3, [r7, #3]
 80026de:	4613      	mov	r3, r2
 80026e0:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80026e2:	23ff      	movs	r3, #255	; 0xff
 80026e4:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80026e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ea:	2b14      	cmp	r3, #20
 80026ec:	f200 8208 	bhi.w	8002b00 <lcdHLine2+0x43c>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <lcdHLine2+0x34>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	08002753 	.word	0x08002753
 8002700:	08002759 	.word	0x08002759
 8002704:	0800275f 	.word	0x0800275f
 8002708:	08002777 	.word	0x08002777
 800270c:	0800278f 	.word	0x0800278f
 8002710:	080027a7 	.word	0x080027a7
 8002714:	080027f1 	.word	0x080027f1
 8002718:	08002835 	.word	0x08002835
 800271c:	08002879 	.word	0x08002879
 8002720:	080028b7 	.word	0x080028b7
 8002724:	080028dd 	.word	0x080028dd
 8002728:	08002907 	.word	0x08002907
 800272c:	0800293d 	.word	0x0800293d
 8002730:	08002955 	.word	0x08002955
 8002734:	0800297b 	.word	0x0800297b
 8002738:	080029b1 	.word	0x080029b1
 800273c:	080029e7 	.word	0x080029e7
 8002740:	08002a29 	.word	0x08002a29
 8002744:	08002a83 	.word	0x08002a83
 8002748:	08002abf 	.word	0x08002abf
		case 0:	// clear
			pattern = 0x00;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]
			break;
 8002750:	e1ea      	b.n	8002b28 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002752:	23ff      	movs	r3, #255	; 0xff
 8002754:	75fb      	strb	r3, [r7, #23]
			break;
 8002756:	e1e7      	b.n	8002b28 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002758:	2355      	movs	r3, #85	; 0x55
 800275a:	75fb      	strb	r3, [r7, #23]
			break;
 800275c:	e1e4      	b.n	8002b28 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <lcdHLine2+0xac>
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800276e:	e1db      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002770:	23ff      	movs	r3, #255	; 0xff
 8002772:	75fb      	strb	r3, [r7, #23]
			break;
 8002774:	e1d8      	b.n	8002b28 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <lcdHLine2+0xc4>
 8002782:	23aa      	movs	r3, #170	; 0xaa
 8002784:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002786:	e1cf      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002788:	2355      	movs	r3, #85	; 0x55
 800278a:	75fb      	strb	r3, [r7, #23]
			break;
 800278c:	e1cc      	b.n	8002b28 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <lcdHLine2+0xdc>
 800279a:	2388      	movs	r3, #136	; 0x88
 800279c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 800279e:	e1c3      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80027a0:	2322      	movs	r3, #34	; 0x22
 80027a2:	75fb      	strb	r3, [r7, #23]
			break;
 80027a4:	e1c0      	b.n	8002b28 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <lcdHLine2+0xf4>
 80027b2:	2388      	movs	r3, #136	; 0x88
 80027b4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80027b6:	e1a6      	b.n	8002b06 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <lcdHLine2+0x106>
 80027c4:	2344      	movs	r3, #68	; 0x44
 80027c6:	75fb      	strb	r3, [r7, #23]
			break;
 80027c8:	e19d      	b.n	8002b06 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d102      	bne.n	80027dc <lcdHLine2+0x118>
 80027d6:	2322      	movs	r3, #34	; 0x22
 80027d8:	75fb      	strb	r3, [r7, #23]
			break;
 80027da:	e194      	b.n	8002b06 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	f040 818e 	bne.w	8002b06 <lcdHLine2+0x442>
 80027ea:	2311      	movs	r3, #17
 80027ec:	75fb      	strb	r3, [r7, #23]
			break;
 80027ee:	e18a      	b.n	8002b06 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <lcdHLine2+0x144>
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d102      	bne.n	800280e <lcdHLine2+0x14a>
 8002808:	23aa      	movs	r3, #170	; 0xaa
 800280a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 800280c:	e17d      	b.n	8002b0a <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <lcdHLine2+0x15c>
 800281a:	2322      	movs	r3, #34	; 0x22
 800281c:	75fb      	strb	r3, [r7, #23]
			break;
 800281e:	e174      	b.n	8002b0a <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b03      	cmp	r3, #3
 800282a:	f040 816e 	bne.w	8002b0a <lcdHLine2+0x446>
 800282e:	2388      	movs	r3, #136	; 0x88
 8002830:	75fb      	strb	r3, [r7, #23]
			break;
 8002832:	e16a      	b.n	8002b0a <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d005      	beq.n	800284c <lcdHLine2+0x188>
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d102      	bne.n	8002852 <lcdHLine2+0x18e>
 800284c:	2355      	movs	r3, #85	; 0x55
 800284e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002850:	e15d      	b.n	8002b0e <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <lcdHLine2+0x1a0>
 800285e:	2388      	movs	r3, #136	; 0x88
 8002860:	75fb      	strb	r3, [r7, #23]
			break;
 8002862:	e154      	b.n	8002b0e <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	f040 814e 	bne.w	8002b0e <lcdHLine2+0x44a>
 8002872:	2322      	movs	r3, #34	; 0x22
 8002874:	75fb      	strb	r3, [r7, #23]
			break;
 8002876:	e14a      	b.n	8002b0e <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <lcdHLine2+0x1cc>
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d102      	bne.n	8002896 <lcdHLine2+0x1d2>
 8002890:	23cc      	movs	r3, #204	; 0xcc
 8002892:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002894:	e13d      	b.n	8002b12 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d006      	beq.n	80028b0 <lcdHLine2+0x1ec>
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	f040 8131 	bne.w	8002b12 <lcdHLine2+0x44e>
 80028b0:	2333      	movs	r3, #51	; 0x33
 80028b2:	75fb      	strb	r3, [r7, #23]
			break;
 80028b4:	e12d      	b.n	8002b12 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <lcdHLine2+0x204>
 80028c2:	2355      	movs	r3, #85	; 0x55
 80028c4:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80028c6:	e126      	b.n	8002b16 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8120 	beq.w	8002b16 <lcdHLine2+0x452>
 80028d6:	23ff      	movs	r3, #255	; 0xff
 80028d8:	75fb      	strb	r3, [r7, #23]
			break;
 80028da:	e11c      	b.n	8002b16 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <lcdHLine2+0x22a>
 80028e8:	23cc      	movs	r3, #204	; 0xcc
 80028ea:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80028ec:	e11c      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <lcdHLine2+0x23c>
 80028fa:	2344      	movs	r3, #68	; 0x44
 80028fc:	75fb      	strb	r3, [r7, #23]
			break;
 80028fe:	e113      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]
			break;
 8002904:	e110      	b.n	8002b28 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <lcdHLine2+0x254>
 8002912:	23ee      	movs	r3, #238	; 0xee
 8002914:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002916:	e107      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d005      	beq.n	8002930 <lcdHLine2+0x26c>
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d102      	bne.n	8002936 <lcdHLine2+0x272>
 8002930:	2322      	movs	r3, #34	; 0x22
 8002932:	75fb      	strb	r3, [r7, #23]
			break;
 8002934:	e0f8      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
			break;
 800293a:	e0f5      	b.n	8002b28 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <lcdHLine2+0x28a>
 8002948:	23ff      	movs	r3, #255	; 0xff
 800294a:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 800294c:	e0ec      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800294e:	2388      	movs	r3, #136	; 0x88
 8002950:	75fb      	strb	r3, [r7, #23]
			break;
 8002952:	e0e9      	b.n	8002b28 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <lcdHLine2+0x2a2>
 8002960:	23aa      	movs	r3, #170	; 0xaa
 8002962:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002964:	e0d9      	b.n	8002b1a <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d3 	beq.w	8002b1a <lcdHLine2+0x456>
 8002974:	2300      	movs	r3, #0
 8002976:	75fb      	strb	r3, [r7, #23]
			break;
 8002978:	e0cf      	b.n	8002b1a <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <lcdHLine2+0x2ce>
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d102      	bne.n	8002998 <lcdHLine2+0x2d4>
 8002992:	23aa      	movs	r3, #170	; 0xaa
 8002994:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002996:	e0c7      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <lcdHLine2+0x2e6>
 80029a4:	2344      	movs	r3, #68	; 0x44
 80029a6:	75fb      	strb	r3, [r7, #23]
			break;
 80029a8:	e0be      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x00;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
			break;
 80029ae:	e0bb      	b.n	8002b28 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <lcdHLine2+0x304>
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d102      	bne.n	80029ce <lcdHLine2+0x30a>
 80029c8:	23ee      	movs	r3, #238	; 0xee
 80029ca:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80029cc:	e0ac      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <lcdHLine2+0x31c>
 80029da:	23aa      	movs	r3, #170	; 0xaa
 80029dc:	75fb      	strb	r3, [r7, #23]
			break;
 80029de:	e0a3      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	75fb      	strb	r3, [r7, #23]
			break;
 80029e4:	e0a0      	b.n	8002b28 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <lcdHLine2+0x33a>
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d102      	bne.n	8002a04 <lcdHLine2+0x340>
 80029fe:	2344      	movs	r3, #68	; 0x44
 8002a00:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002a02:	e08c      	b.n	8002b1e <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <lcdHLine2+0x352>
 8002a10:	23aa      	movs	r3, #170	; 0xaa
 8002a12:	75fb      	strb	r3, [r7, #23]
			break;
 8002a14:	e083      	b.n	8002b1e <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d17d      	bne.n	8002b1e <lcdHLine2+0x45a>
 8002a22:	2311      	movs	r3, #17
 8002a24:	75fb      	strb	r3, [r7, #23]
			break;
 8002a26:	e07a      	b.n	8002b1e <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4baf      	ldr	r3, [pc, #700]	; (8002ce8 <lcdHLine2+0x624>)
 8002a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a30:	0859      	lsrs	r1, r3, #1
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <lcdHLine2+0x382>
 8002a40:	2355      	movs	r3, #85	; 0x55
 8002a42:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002a44:	e06d      	b.n	8002b22 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4ba7      	ldr	r3, [pc, #668]	; (8002ce8 <lcdHLine2+0x624>)
 8002a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a4e:	0859      	lsrs	r1, r3, #1
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <lcdHLine2+0x3a0>
 8002a5e:	23aa      	movs	r3, #170	; 0xaa
 8002a60:	75fb      	strb	r3, [r7, #23]
			break;
 8002a62:	e05e      	b.n	8002b22 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4ba0      	ldr	r3, [pc, #640]	; (8002ce8 <lcdHLine2+0x624>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	0859      	lsrs	r1, r3, #1
 8002a6e:	460b      	mov	r3, r1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d152      	bne.n	8002b22 <lcdHLine2+0x45e>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
			break;
 8002a80:	e04f      	b.n	8002b22 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <lcdHLine2+0x3d0>
 8002a8e:	2322      	movs	r3, #34	; 0x22
 8002a90:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8002a92:	e049      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <lcdHLine2+0x3e2>
 8002aa0:	2355      	movs	r3, #85	; 0x55
 8002aa2:	75fb      	strb	r3, [r7, #23]
			break;
 8002aa4:	e040      	b.n	8002b28 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d102      	bne.n	8002ab8 <lcdHLine2+0x3f4>
 8002ab2:	2388      	movs	r3, #136	; 0x88
 8002ab4:	75fb      	strb	r3, [r7, #23]
			break;
 8002ab6:	e037      	b.n	8002b28 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
			break;
 8002abc:	e034      	b.n	8002b28 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <lcdHLine2+0x412>
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d102      	bne.n	8002adc <lcdHLine2+0x418>
 8002ad6:	2388      	movs	r3, #136	; 0x88
 8002ad8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8002ada:	e024      	b.n	8002b26 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <lcdHLine2+0x42a>
 8002ae8:	2377      	movs	r3, #119	; 0x77
 8002aea:	75fb      	strb	r3, [r7, #23]
			break;
 8002aec:	e01b      	b.n	8002b26 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d115      	bne.n	8002b26 <lcdHLine2+0x462>
 8002afa:	23aa      	movs	r3, #170	; 0xaa
 8002afc:	75fb      	strb	r3, [r7, #23]
			break;
 8002afe:	e012      	b.n	8002b26 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
			break;
 8002b04:	e010      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b06:	bf00      	nop
 8002b08:	e00e      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b0a:	bf00      	nop
 8002b0c:	e00c      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b0e:	bf00      	nop
 8002b10:	e00a      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b12:	bf00      	nop
 8002b14:	e008      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b16:	bf00      	nop
 8002b18:	e006      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b1a:	bf00      	nop
 8002b1c:	e004      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <lcdHLine2+0x464>
			break;
 8002b26:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	08db      	lsrs	r3, r3, #3
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8002b3a:	88bb      	ldrh	r3, [r7, #4]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	2232      	movs	r2, #50	; 0x32
 8002b50:	fb03 f202 	mul.w	r2, r3, r2
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a64      	ldr	r2, [pc, #400]	; (8002cec <lcdHLine2+0x628>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	2232      	movs	r2, #50	; 0x32
 8002b62:	fb03 f202 	mul.w	r2, r3, r2
 8002b66:	7b7b      	ldrb	r3, [r7, #13]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a60      	ldr	r2, [pc, #384]	; (8002cec <lcdHLine2+0x628>)
 8002b6c:	5cd3      	ldrb	r3, [r2, r3]
 8002b6e:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8002b70:	23ff      	movs	r3, #255	; 0xff
 8002b72:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002b74:	7bbb      	ldrb	r3, [r7, #14]
 8002b76:	f1c3 0208 	rsb	r2, r3, #8
 8002b7a:	88b9      	ldrh	r1, [r7, #4]
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	1acb      	subs	r3, r1, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	dd11      	ble.n	8002baa <lcdHLine2+0x4e6>
 8002b86:	88ba      	ldrh	r2, [r7, #4]
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	fa42 f303 	asr.w	r3, r2, r3
 8002b94:	43da      	mvns	r2, r3
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	fa42 f303 	asr.w	r3, r2, r3
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	753b      	strb	r3, [r7, #20]
 8002ba8:	e001      	b.n	8002bae <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8002bae:	78bb      	ldrb	r3, [r7, #2]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	f200 8130 	bhi.w	8002e16 <lcdHLine2+0x752>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <lcdHLine2+0x4f8>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002c51 	.word	0x08002c51
 8002bc4:	08002cf1 	.word	0x08002cf1
 8002bc8:	08002d75 	.word	0x08002d75
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	fa42 f303 	asr.w	r3, r2, r3
 8002bd4:	b25a      	sxtb	r2, r3
 8002bd6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b25a      	sxtb	r2, r3
 8002bde:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8002be8:	7b3b      	ldrb	r3, [r7, #12]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	22ff      	movs	r2, #255	; 0xff
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	b25a      	sxtb	r2, r3
 8002bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b25a      	sxtb	r2, r3
 8002bfe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c08:	2301      	movs	r3, #1
 8002c0a:	74fb      	strb	r3, [r7, #19]
 8002c0c:	e019      	b.n	8002c42 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	2232      	movs	r2, #50	; 0x32
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	441a      	add	r2, r3
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a33      	ldr	r2, [pc, #204]	; (8002cec <lcdHLine2+0x628>)
 8002c20:	5cd1      	ldrb	r1, [r2, r3]
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	2232      	movs	r2, #50	; 0x32
 8002c26:	fb03 f202 	mul.w	r2, r3, r2
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	441a      	add	r2, r3
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	4413      	add	r3, r2
 8002c32:	7dfa      	ldrb	r2, [r7, #23]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	b2d1      	uxtb	r1, r2
 8002c38:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <lcdHLine2+0x628>)
 8002c3a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	74fb      	strb	r3, [r7, #19]
 8002c42:	7cfa      	ldrb	r2, [r7, #19]
 8002c44:	7b79      	ldrb	r1, [r7, #13]
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	1acb      	subs	r3, r1, r3
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbdf      	blt.n	8002c0e <lcdHLine2+0x54a>
			}
			break;
 8002c4e:	e0e2      	b.n	8002e16 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002c50:	7bbb      	ldrb	r3, [r7, #14]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	fa42 f303 	asr.w	r3, r2, r3
 8002c58:	b25a      	sxtb	r2, r3
 8002c5a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b25b      	sxtb	r3, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	b25a      	sxtb	r2, r3
 8002c66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8002c70:	7b3b      	ldrb	r3, [r7, #12]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	b25a      	sxtb	r2, r3
 8002c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	b25a      	sxtb	r2, r3
 8002c8a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c94:	2301      	movs	r3, #1
 8002c96:	74bb      	strb	r3, [r7, #18]
 8002c98:	e01e      	b.n	8002cd8 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	2232      	movs	r2, #50	; 0x32
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	7cbb      	ldrb	r3, [r7, #18]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <lcdHLine2+0x628>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	b25a      	sxtb	r2, r3
 8002cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b259      	sxtb	r1, r3
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2232      	movs	r2, #50	; 0x32
 8002cc0:	fb03 f202 	mul.w	r2, r3, r2
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	7cbb      	ldrb	r3, [r7, #18]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b2c9      	uxtb	r1, r1
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <lcdHLine2+0x628>)
 8002cd0:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002cd2:	7cbb      	ldrb	r3, [r7, #18]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	74bb      	strb	r3, [r7, #18]
 8002cd8:	7cba      	ldrb	r2, [r7, #18]
 8002cda:	7b79      	ldrb	r1, [r7, #13]
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	1acb      	subs	r3, r1, r3
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbda      	blt.n	8002c9a <lcdHLine2+0x5d6>
			}
			break;
 8002ce4:	e097      	b.n	8002e16 <lcdHLine2+0x752>
 8002ce6:	bf00      	nop
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab
 8002cec:	20002598 	.word	0x20002598
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002cf0:	7bbb      	ldrb	r3, [r7, #14]
 8002cf2:	22ff      	movs	r2, #255	; 0xff
 8002cf4:	fa42 f303 	asr.w	r3, r2, r3
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b25a      	sxtb	r2, r3
 8002d02:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d06:	4053      	eors	r3, r2
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	b25a      	sxtb	r2, r3
 8002d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b25a      	sxtb	r2, r3
 8002d22:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d26:	4053      	eors	r3, r2
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	747b      	strb	r3, [r7, #17]
 8002d30:	e019      	b.n	8002d66 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	2232      	movs	r2, #50	; 0x32
 8002d36:	fb03 f202 	mul.w	r2, r3, r2
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	441a      	add	r2, r3
 8002d3e:	7c7b      	ldrb	r3, [r7, #17]
 8002d40:	4413      	add	r3, r2
 8002d42:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <lcdHLine2+0x788>)
 8002d44:	5cd1      	ldrb	r1, [r2, r3]
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	2232      	movs	r2, #50	; 0x32
 8002d4a:	fb03 f202 	mul.w	r2, r3, r2
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	441a      	add	r2, r3
 8002d52:	7c7b      	ldrb	r3, [r7, #17]
 8002d54:	4413      	add	r3, r2
 8002d56:	7dfa      	ldrb	r2, [r7, #23]
 8002d58:	404a      	eors	r2, r1
 8002d5a:	b2d1      	uxtb	r1, r2
 8002d5c:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <lcdHLine2+0x788>)
 8002d5e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002d60:	7c7b      	ldrb	r3, [r7, #17]
 8002d62:	3301      	adds	r3, #1
 8002d64:	747b      	strb	r3, [r7, #17]
 8002d66:	7c7a      	ldrb	r2, [r7, #17]
 8002d68:	7b79      	ldrb	r1, [r7, #13]
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	1acb      	subs	r3, r1, r3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dbdf      	blt.n	8002d32 <lcdHLine2+0x66e>
			}
			break;
 8002d72:	e050      	b.n	8002e16 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	fa42 f303 	asr.w	r3, r2, r3
 8002d7c:	b25a      	sxtb	r2, r3
 8002d7e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d82:	4013      	ands	r3, r2
 8002d84:	b25a      	sxtb	r2, r3
 8002d86:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	b259      	sxtb	r1, r3
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	f1c3 0308 	rsb	r3, r3, #8
 8002d94:	20ff      	movs	r0, #255	; 0xff
 8002d96:	fa00 f303 	lsl.w	r3, r0, r3
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8002daa:	7b3b      	ldrb	r3, [r7, #12]
 8002dac:	f1c3 0307 	rsb	r3, r3, #7
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	b25a      	sxtb	r2, r3
 8002db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b25a      	sxtb	r2, r3
 8002dc0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	b259      	sxtb	r1, r3
 8002dc8:	7b3b      	ldrb	r3, [r7, #12]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	20ff      	movs	r0, #255	; 0xff
 8002dce:	fa40 f303 	asr.w	r3, r0, r3
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002de2:	2301      	movs	r3, #1
 8002de4:	743b      	strb	r3, [r7, #16]
 8002de6:	e00f      	b.n	8002e08 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	2232      	movs	r2, #50	; 0x32
 8002dec:	fb03 f202 	mul.w	r2, r3, r2
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	441a      	add	r2, r3
 8002df4:	7c3b      	ldrb	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	7dfa      	ldrb	r2, [r7, #23]
 8002dfa:	43d2      	mvns	r2, r2
 8002dfc:	b2d1      	uxtb	r1, r2
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <lcdHLine2+0x788>)
 8002e00:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e02:	7c3b      	ldrb	r3, [r7, #16]
 8002e04:	3301      	adds	r3, #1
 8002e06:	743b      	strb	r3, [r7, #16]
 8002e08:	7c3a      	ldrb	r2, [r7, #16]
 8002e0a:	7b79      	ldrb	r1, [r7, #13]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbe9      	blt.n	8002de8 <lcdHLine2+0x724>
			}
			break;
 8002e14:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	2232      	movs	r2, #50	; 0x32
 8002e1a:	fb03 f202 	mul.w	r2, r3, r2
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	4413      	add	r3, r2
 8002e22:	490a      	ldr	r1, [pc, #40]	; (8002e4c <lcdHLine2+0x788>)
 8002e24:	7dba      	ldrb	r2, [r7, #22]
 8002e26:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002e28:	7b7a      	ldrb	r2, [r7, #13]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <lcdHLine2+0x77e>
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2232      	movs	r2, #50	; 0x32
 8002e34:	fb03 f202 	mul.w	r2, r3, r2
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4903      	ldr	r1, [pc, #12]	; (8002e4c <lcdHLine2+0x788>)
 8002e3e:	7d7a      	ldrb	r2, [r7, #21]
 8002e40:	54ca      	strb	r2, [r1, r3]
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc90      	pop	{r4, r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20002598 	.word	0x20002598

08002e50 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002e50:	b490      	push	{r4, r7}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	80fb      	strh	r3, [r7, #6]
 8002e62:	4603      	mov	r3, r0
 8002e64:	80bb      	strh	r3, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70fb      	strb	r3, [r7, #3]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	08db      	lsrs	r3, r3, #3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8002e88:	88bb      	ldrh	r3, [r7, #4]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2232      	movs	r2, #50	; 0x32
 8002e96:	fb03 f202 	mul.w	r2, r3, r2
 8002e9a:	7c7b      	ldrb	r3, [r7, #17]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a71      	ldr	r2, [pc, #452]	; (8003064 <lcdHLine+0x214>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2232      	movs	r2, #50	; 0x32
 8002ea8:	fb03 f202 	mul.w	r2, r3, r2
 8002eac:	7c7b      	ldrb	r3, [r7, #17]
 8002eae:	441a      	add	r2, r3
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	; (8003064 <lcdHLine+0x214>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8002eba:	23ff      	movs	r3, #255	; 0xff
 8002ebc:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002ebe:	7c3b      	ldrb	r3, [r7, #16]
 8002ec0:	f1c3 0208 	rsb	r2, r3, #8
 8002ec4:	88b9      	ldrh	r1, [r7, #4]
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	1acb      	subs	r3, r1, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dd09      	ble.n	8002ee4 <lcdHLine+0x94>
 8002ed0:	88ba      	ldrh	r2, [r7, #4]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	22ff      	movs	r2, #255	; 0xff
 8002eda:	fa42 f303 	asr.w	r3, r2, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002ee4:	78bb      	ldrb	r3, [r7, #2]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d067      	beq.n	8002fba <lcdHLine+0x16a>
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f300 809e 	bgt.w	800302c <lcdHLine+0x1dc>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <lcdHLine+0xaa>
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d02e      	beq.n	8002f56 <lcdHLine+0x106>
 8002ef8:	e098      	b.n	800302c <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8002efa:	7d7a      	ldrb	r2, [r7, #21]
 8002efc:	7c3b      	ldrb	r3, [r7, #16]
 8002efe:	fa42 f303 	asr.w	r3, r2, r3
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	f1c3 0307 	rsb	r3, r3, #7
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	b25a      	sxtb	r2, r3
 8002f1c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f26:	2301      	movs	r3, #1
 8002f28:	753b      	strb	r3, [r7, #20]
 8002f2a:	e00d      	b.n	8002f48 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2232      	movs	r2, #50	; 0x32
 8002f30:	fb03 f202 	mul.w	r2, r3, r2
 8002f34:	7c7b      	ldrb	r3, [r7, #17]
 8002f36:	441a      	add	r2, r3
 8002f38:	7d3b      	ldrb	r3, [r7, #20]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a49      	ldr	r2, [pc, #292]	; (8003064 <lcdHLine+0x214>)
 8002f3e:	21ff      	movs	r1, #255	; 0xff
 8002f40:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f42:	7d3b      	ldrb	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	753b      	strb	r3, [r7, #20]
 8002f48:	7d3a      	ldrb	r2, [r7, #20]
 8002f4a:	7bf9      	ldrb	r1, [r7, #15]
 8002f4c:	7c7b      	ldrb	r3, [r7, #17]
 8002f4e:	1acb      	subs	r3, r1, r3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dbeb      	blt.n	8002f2c <lcdHLine+0xdc>
		}
		break;
 8002f54:	e06a      	b.n	800302c <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8002f56:	7d7a      	ldrb	r2, [r7, #21]
 8002f58:	7c3b      	ldrb	r3, [r7, #16]
 8002f5a:	fa42 f303 	asr.w	r3, r2, r3
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8002f6e:	7bbb      	ldrb	r3, [r7, #14]
 8002f70:	f1c3 0307 	rsb	r3, r3, #7
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	b25a      	sxtb	r2, r3
 8002f80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	74fb      	strb	r3, [r7, #19]
 8002f8e:	e00d      	b.n	8002fac <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2232      	movs	r2, #50	; 0x32
 8002f94:	fb03 f202 	mul.w	r2, r3, r2
 8002f98:	7c7b      	ldrb	r3, [r7, #17]
 8002f9a:	441a      	add	r2, r3
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <lcdHLine+0x214>)
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	74fb      	strb	r3, [r7, #19]
 8002fac:	7cfa      	ldrb	r2, [r7, #19]
 8002fae:	7bf9      	ldrb	r1, [r7, #15]
 8002fb0:	7c7b      	ldrb	r3, [r7, #17]
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbeb      	blt.n	8002f90 <lcdHLine+0x140>
		}
		break;
 8002fb8:	e038      	b.n	800302c <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8002fba:	7d7a      	ldrb	r2, [r7, #21]
 8002fbc:	7c3b      	ldrb	r3, [r7, #16]
 8002fbe:	fa42 f303 	asr.w	r3, r2, r3
 8002fc2:	b25a      	sxtb	r2, r3
 8002fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fc8:	4053      	eors	r3, r2
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	f1c3 0307 	rsb	r3, r3, #7
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002fe0:	4053      	eors	r3, r2
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	74bb      	strb	r3, [r7, #18]
 8002fea:	e018      	b.n	800301e <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	2232      	movs	r2, #50	; 0x32
 8002ff0:	fb03 f202 	mul.w	r2, r3, r2
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	441a      	add	r2, r3
 8002ff8:	7cbb      	ldrb	r3, [r7, #18]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <lcdHLine+0x214>)
 8002ffe:	5cd2      	ldrb	r2, [r2, r3]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2132      	movs	r1, #50	; 0x32
 8003004:	fb03 f101 	mul.w	r1, r3, r1
 8003008:	7c7b      	ldrb	r3, [r7, #17]
 800300a:	4419      	add	r1, r3
 800300c:	7cbb      	ldrb	r3, [r7, #18]
 800300e:	440b      	add	r3, r1
 8003010:	43d2      	mvns	r2, r2
 8003012:	b2d1      	uxtb	r1, r2
 8003014:	4a13      	ldr	r2, [pc, #76]	; (8003064 <lcdHLine+0x214>)
 8003016:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003018:	7cbb      	ldrb	r3, [r7, #18]
 800301a:	3301      	adds	r3, #1
 800301c:	74bb      	strb	r3, [r7, #18]
 800301e:	7cba      	ldrb	r2, [r7, #18]
 8003020:	7bf9      	ldrb	r1, [r7, #15]
 8003022:	7c7b      	ldrb	r3, [r7, #17]
 8003024:	1acb      	subs	r3, r1, r3
 8003026:	429a      	cmp	r2, r3
 8003028:	dbe0      	blt.n	8002fec <lcdHLine+0x19c>
		}
		break;
 800302a:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	2232      	movs	r2, #50	; 0x32
 8003030:	fb03 f202 	mul.w	r2, r3, r2
 8003034:	7c7b      	ldrb	r3, [r7, #17]
 8003036:	4413      	add	r3, r2
 8003038:	490a      	ldr	r1, [pc, #40]	; (8003064 <lcdHLine+0x214>)
 800303a:	7dfa      	ldrb	r2, [r7, #23]
 800303c:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	7c7b      	ldrb	r3, [r7, #17]
 8003042:	429a      	cmp	r2, r3
 8003044:	d908      	bls.n	8003058 <lcdHLine+0x208>
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	2232      	movs	r2, #50	; 0x32
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	4413      	add	r3, r2
 8003052:	4904      	ldr	r1, [pc, #16]	; (8003064 <lcdHLine+0x214>)
 8003054:	7dba      	ldrb	r2, [r7, #22]
 8003056:	54ca      	strb	r2, [r1, r3]
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bc90      	pop	{r4, r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20002598 	.word	0x20002598

08003068 <lcdRefresh>:

void lcdRefresh(void){
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
	if(allowUpdate){
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <lcdRefresh+0x7c>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d032      	beq.n	80030dc <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003076:	2201      	movs	r2, #1
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	481b      	ldr	r0, [pc, #108]	; (80030e8 <lcdRefresh+0x80>)
 800307c:	f002 f9d2 	bl	8005424 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003080:	2301      	movs	r3, #1
 8003082:	71fb      	strb	r3, [r7, #7]
 8003084:	e01c      	b.n	80030c0 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f931 	bl	80022f0 <reverse_uint8>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <lcdRefresh+0x84>)
 8003094:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003096:	2396      	movs	r3, #150	; 0x96
 8003098:	2202      	movs	r2, #2
 800309a:	4914      	ldr	r1, [pc, #80]	; (80030ec <lcdRefresh+0x84>)
 800309c:	4814      	ldr	r0, [pc, #80]	; (80030f0 <lcdRefresh+0x88>)
 800309e:	f005 fa80 	bl	80085a2 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	2232      	movs	r2, #50	; 0x32
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <lcdRefresh+0x8c>)
 80030ae:	1899      	adds	r1, r3, r2
 80030b0:	2396      	movs	r3, #150	; 0x96
 80030b2:	2232      	movs	r2, #50	; 0x32
 80030b4:	480e      	ldr	r0, [pc, #56]	; (80030f0 <lcdRefresh+0x88>)
 80030b6:	f005 fa74 	bl	80085a2 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	3301      	adds	r3, #1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2bf1      	cmp	r3, #241	; 0xf1
 80030c4:	d9df      	bls.n	8003086 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 80030c6:	2396      	movs	r3, #150	; 0x96
 80030c8:	2202      	movs	r2, #2
 80030ca:	490b      	ldr	r1, [pc, #44]	; (80030f8 <lcdRefresh+0x90>)
 80030cc:	4808      	ldr	r0, [pc, #32]	; (80030f0 <lcdRefresh+0x88>)
 80030ce:	f005 fa68 	bl	80085a2 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 80030d2:	2200      	movs	r2, #0
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	4804      	ldr	r0, [pc, #16]	; (80030e8 <lcdRefresh+0x80>)
 80030d8:	f002 f9a4 	bl	8005424 <HAL_GPIO_WritePin>
	}
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000050 	.word	0x20000050
 80030e8:	40020000 	.word	0x40020000
 80030ec:	20000054 	.word	0x20000054
 80030f0:	200057cc 	.word	0x200057cc
 80030f4:	20002598 	.word	0x20002598
 80030f8:	20002594 	.word	0x20002594

080030fc <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	4604      	mov	r4, r0
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4623      	mov	r3, r4
 800310c:	80fb      	strh	r3, [r7, #6]
 800310e:	4603      	mov	r3, r0
 8003110:	80bb      	strh	r3, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
 8003116:	4613      	mov	r3, r2
 8003118:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e009      	b.n	8003134 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003120:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	88b9      	ldrh	r1, [r7, #4]
 8003128:	88f8      	ldrh	r0, [r7, #6]
 800312a:	f7ff fe91 	bl	8002e50 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3301      	adds	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	78bb      	ldrb	r3, [r7, #2]
 8003138:	429a      	cmp	r2, r3
 800313a:	d9f1      	bls.n	8003120 <lcdRect+0x24>
	}
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}

08003146 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003146:	b590      	push	{r4, r7, lr}
 8003148:	b087      	sub	sp, #28
 800314a:	af02      	add	r7, sp, #8
 800314c:	4604      	mov	r4, r0
 800314e:	4608      	mov	r0, r1
 8003150:	4611      	mov	r1, r2
 8003152:	461a      	mov	r2, r3
 8003154:	4623      	mov	r3, r4
 8003156:	80fb      	strh	r3, [r7, #6]
 8003158:	4603      	mov	r3, r0
 800315a:	80bb      	strh	r3, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
 8003160:	4613      	mov	r3, r2
 8003162:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	88bb      	ldrh	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d046      	beq.n	80031fa <lcdRect2+0xb4>
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	78bb      	ldrb	r3, [r7, #2]
 8003170:	429a      	cmp	r2, r3
 8003172:	d042      	beq.n	80031fa <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e00d      	b.n	8003196 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 800317a:	f897 4020 	ldrb.w	r4, [r7, #32]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	88b9      	ldrh	r1, [r7, #4]
 8003182:	88f8      	ldrh	r0, [r7, #6]
 8003184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4623      	mov	r3, r4
 800318c:	f7ff fa9a 	bl	80026c4 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	3301      	adds	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	78bb      	ldrb	r3, [r7, #2]
 800319a:	429a      	cmp	r2, r3
 800319c:	d9ed      	bls.n	800317a <lcdRect2+0x34>
		}
		if(outline){
 800319e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d029      	beq.n	80031fa <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 80031a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	88b9      	ldrh	r1, [r7, #4]
 80031ae:	88f8      	ldrh	r0, [r7, #6]
 80031b0:	2401      	movs	r4, #1
 80031b2:	9400      	str	r4, [sp, #0]
 80031b4:	f7ff fa86 	bl	80026c4 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 80031b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031bc:	78ba      	ldrb	r2, [r7, #2]
 80031be:	88b9      	ldrh	r1, [r7, #4]
 80031c0:	88f8      	ldrh	r0, [r7, #6]
 80031c2:	2401      	movs	r4, #1
 80031c4:	9400      	str	r4, [sp, #0]
 80031c6:	f7ff fa7d 	bl	80026c4 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	b299      	uxth	r1, r3
 80031d2:	78bb      	ldrb	r3, [r7, #2]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031dc:	88f8      	ldrh	r0, [r7, #6]
 80031de:	f7ff f9ef 	bl	80025c0 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	b299      	uxth	r1, r3
 80031ea:	78bb      	ldrb	r3, [r7, #2]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f4:	88b8      	ldrh	r0, [r7, #4]
 80031f6:	f7ff f9e3 	bl	80025c0 <lcdVLine>
		}
	}
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800320a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800320e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d013      	beq.n	8003242 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800321a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800321e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003222:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800322a:	e000      	b.n	800322e <ITM_SendChar+0x2c>
    {
      __NOP();
 800322c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800322e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f9      	beq.n	800322c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ffd1 	bl	8003202 <ITM_SendChar>
	return(ch);
 8003260:	687b      	ldr	r3, [r7, #4]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003278:	4a08      	ldr	r2, [pc, #32]	; (800329c <setTimeout+0x30>)
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <setTimeout+0x34>)
 8003280:	2200      	movs	r2, #0
 8003282:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003284:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <setTimeout+0x38>)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <setTimeout+0x3c>)
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	2000571c 	.word	0x2000571c
 80032a0:	2000571a 	.word	0x2000571a
 80032a4:	20005720 	.word	0x20005720
 80032a8:	20005719 	.word	0x20005719

080032ac <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 80032b2:	2301      	movs	r3, #1
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2303      	movs	r3, #3
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	23be      	movs	r3, #190	; 0xbe
 80032c0:	2232      	movs	r2, #50	; 0x32
 80032c2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80032c6:	2032      	movs	r0, #50	; 0x32
 80032c8:	f7ff ff3d 	bl	8003146 <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <showAlert+0x34>)
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <showAlert+0x38>)
 80032d0:	215a      	movs	r1, #90	; 0x5a
 80032d2:	205a      	movs	r0, #90	; 0x5a
 80032d4:	f7ff f946 	bl	8002564 <lcdPutStr>
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	080120a4 	.word	0x080120a4
 80032e4:	08011efc 	.word	0x08011efc

080032e8 <hideAlert>:
void hideAlert(void){
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
	alertFlag = 0;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <hideAlert+0x14>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20005724 	.word	0x20005724

08003300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003306:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003308:	f001 fc9a 	bl	8004c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800330c:	f000 f902 	bl	8003514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003310:	f7fe fdf0 	bl	8001ef4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003314:	f000 ff94 	bl	8004240 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003318:	f000 fb3a 	bl	8003990 <MX_SPI1_Init>
  MX_TIM1_Init();
 800331c:	f000 fd30 	bl	8003d80 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003320:	f000 fdd0 	bl	8003ec4 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003324:	f7fe ff5c 	bl	80021e0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003328:	f000 fdf0 	bl	8003f0c <MX_TIM11_Init>
  MX_RTC_Init();
 800332c:	f000 fa4e 	bl	80037cc <MX_RTC_Init>
  MX_TIM13_Init();
 8003330:	f000 fe10 	bl	8003f54 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003334:	f000 faa4 	bl	8003880 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003338:	f007 fe2e 	bl	800af98 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800333c:	f000 ffaa 	bl	8004294 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8003340:	f000 fe2c 	bl	8003f9c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003344:	485a      	ldr	r0, [pc, #360]	; (80034b0 <main+0x1b0>)
 8003346:	f005 fb33 	bl	80089b0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800334a:	4859      	ldr	r0, [pc, #356]	; (80034b0 <main+0x1b0>)
 800334c:	f005 fb80 	bl	8008a50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003350:	2100      	movs	r1, #0
 8003352:	4857      	ldr	r0, [pc, #348]	; (80034b0 <main+0x1b0>)
 8003354:	f005 fc46 	bl	8008be4 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003358:	2100      	movs	r1, #0
 800335a:	4856      	ldr	r0, [pc, #344]	; (80034b4 <main+0x1b4>)
 800335c:	f005 fc42 	bl	8008be4 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003360:	4855      	ldr	r0, [pc, #340]	; (80034b8 <main+0x1b8>)
 8003362:	f005 fb75 	bl	8008a50 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003366:	4855      	ldr	r0, [pc, #340]	; (80034bc <main+0x1bc>)
 8003368:	f7fe fbf6 	bl	8001b58 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 800336c:	4854      	ldr	r0, [pc, #336]	; (80034c0 <main+0x1c0>)
 800336e:	f005 fb6f 	bl	8008a50 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003372:	4c54      	ldr	r4, [pc, #336]	; (80034c4 <main+0x1c4>)
 8003374:	463b      	mov	r3, r7
 8003376:	4954      	ldr	r1, [pc, #336]	; (80034c8 <main+0x1c8>)
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fecb 	bl	8002114 <initGps>
 800337e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003382:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003386:	4620      	mov	r0, r4
 8003388:	4619      	mov	r1, r3
 800338a:	f44f 7319 	mov.w	r3, #612	; 0x264
 800338e:	461a      	mov	r2, r3
 8003390:	f00a fd90 	bl	800deb4 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003394:	484d      	ldr	r0, [pc, #308]	; (80034cc <main+0x1cc>)
 8003396:	f7fe f91f 	bl	80015d8 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 800339a:	f240 118f 	movw	r1, #399	; 0x18f
 800339e:	484c      	ldr	r0, [pc, #304]	; (80034d0 <main+0x1d0>)
 80033a0:	f001 fb04 	bl	80049ac <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 80033a4:	f240 128f 	movw	r2, #399	; 0x18f
 80033a8:	2102      	movs	r1, #2
 80033aa:	484a      	ldr	r0, [pc, #296]	; (80034d4 <main+0x1d4>)
 80033ac:	f001 fa62 	bl	8004874 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80033b0:	2201      	movs	r2, #1
 80033b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b6:	4848      	ldr	r0, [pc, #288]	; (80034d8 <main+0x1d8>)
 80033b8:	f002 f834 	bl	8005424 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 80033bc:	4847      	ldr	r0, [pc, #284]	; (80034dc <main+0x1dc>)
 80033be:	f7fd fdeb 	bl	8000f98 <Mount_SD>
  	Create_File("FILE1.TXT");
 80033c2:	4847      	ldr	r0, [pc, #284]	; (80034e0 <main+0x1e0>)
 80033c4:	f7fd feb6 	bl	8001134 <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 80033c8:	4946      	ldr	r1, [pc, #280]	; (80034e4 <main+0x1e4>)
 80033ca:	4845      	ldr	r0, [pc, #276]	; (80034e0 <main+0x1e0>)
 80033cc:	f7fd ff3e 	bl	800124c <Update_File>
  	Create_File("FILE4.TXT");
 80033d0:	4845      	ldr	r0, [pc, #276]	; (80034e8 <main+0x1e8>)
 80033d2:	f7fd feaf 	bl	8001134 <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 80033d6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80033da:	4619      	mov	r1, r3
 80033dc:	4843      	ldr	r0, [pc, #268]	; (80034ec <main+0x1ec>)
 80033de:	f7fd fdf7 	bl	8000fd0 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80033e2:	2200      	movs	r2, #0
 80033e4:	4942      	ldr	r1, [pc, #264]	; (80034f0 <main+0x1f0>)
 80033e6:	4843      	ldr	r0, [pc, #268]	; (80034f4 <main+0x1f4>)
 80033e8:	f003 ff7c 	bl	80072e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80033ec:	2200      	movs	r2, #0
 80033ee:	4942      	ldr	r1, [pc, #264]	; (80034f8 <main+0x1f8>)
 80033f0:	4840      	ldr	r0, [pc, #256]	; (80034f4 <main+0x1f4>)
 80033f2:	f003 ffd5 	bl	80073a0 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80033fc:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8003400:	222e      	movs	r2, #46	; 0x2e
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f00a fd63 	bl	800ded0 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <main+0x1f0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <main+0x1f0>)
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	4619      	mov	r1, r3
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <main+0x1f0>)
 8003418:	789b      	ldrb	r3, [r3, #2]
 800341a:	f507 701a 	add.w	r0, r7, #616	; 0x268
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	460b      	mov	r3, r1
 8003422:	4936      	ldr	r1, [pc, #216]	; (80034fc <main+0x1fc>)
 8003424:	f00b fc10 	bl	800ec48 <siprintf>
	SD_logger(tmpl);
 8003428:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fd9d 	bl	8000f6c <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8003432:	f7fe ff87 	bl	8002344 <lcdClearBuffer>
  lcdRefresh();
 8003436:	f7ff fe17 	bl	8003068 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <main+0x200>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <main+0x162>
		bmpData = getBmpData(&bmp180module);
 8003442:	4c30      	ldr	r4, [pc, #192]	; (8003504 <main+0x204>)
 8003444:	463b      	mov	r3, r7
 8003446:	4921      	ldr	r1, [pc, #132]	; (80034cc <main+0x1cc>)
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fb2d 	bl	8001aa8 <getBmpData>
 800344e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003452:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <main+0x200>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003462:	2200      	movs	r2, #0
 8003464:	4922      	ldr	r1, [pc, #136]	; (80034f0 <main+0x1f0>)
 8003466:	4823      	ldr	r0, [pc, #140]	; (80034f4 <main+0x1f4>)
 8003468:	f003 ff3c 	bl	80072e4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800346c:	2200      	movs	r2, #0
 800346e:	4922      	ldr	r1, [pc, #136]	; (80034f8 <main+0x1f8>)
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <main+0x1f4>)
 8003472:	f003 ff95 	bl	80073a0 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <main+0x1f0>)
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <main+0x18e>
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <main+0x1f0>)
 8003480:	789b      	ldrb	r3, [r3, #2]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <main+0x18e>
			pulseVib(40, 60);
 8003486:	213c      	movs	r1, #60	; 0x3c
 8003488:	2028      	movs	r0, #40	; 0x28
 800348a:	f000 ffc7 	bl	800441c <pulseVib>
		}
	  lcdClearBuffer();
 800348e:	f7fe ff59 	bl	8002344 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8003492:	f7fe fe89 	bl	80021a8 <showGui>

	  if(alertFlag){
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <main+0x208>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <main+0x1a8>
		  showAlert();
 800349e:	f7ff ff05 	bl	80032ac <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <main+0x20c>)
 80034a4:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <main+0x210>)
 80034a6:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 80034a8:	f7ff fdde 	bl	8003068 <lcdRefresh>
	  if(updateBmpData_flag){
 80034ac:	e7c5      	b.n	800343a <main+0x13a>
 80034ae:	bf00      	nop
 80034b0:	2000582c 	.word	0x2000582c
 80034b4:	2000594c 	.word	0x2000594c
 80034b8:	200058bc 	.word	0x200058bc
 80034bc:	2000002c 	.word	0x2000002c
 80034c0:	20005904 	.word	0x20005904
 80034c4:	200054b4 	.word	0x200054b4
 80034c8:	200059d8 	.word	0x200059d8
 80034cc:	20002338 	.word	0x20002338
 80034d0:	200054a4 	.word	0x200054a4
 80034d4:	20005490 	.word	0x20005490
 80034d8:	40020800 	.word	0x40020800
 80034dc:	08011f04 	.word	0x08011f04
 80034e0:	08011f08 	.word	0x08011f08
 80034e4:	08011f14 	.word	0x08011f14
 80034e8:	08011f34 	.word	0x08011f34
 80034ec:	08011f40 	.word	0x08011f40
 80034f0:	20005478 	.word	0x20005478
 80034f4:	20005728 	.word	0x20005728
 80034f8:	2000548c 	.word	0x2000548c
 80034fc:	08011f4c 	.word	0x08011f4c
 8003500:	20000057 	.word	0x20000057
 8003504:	2000237c 	.word	0x2000237c
 8003508:	20005724 	.word	0x20005724
 800350c:	200024ac 	.word	0x200024ac
 8003510:	080032e9 	.word	0x080032e9

08003514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b094      	sub	sp, #80	; 0x50
 8003518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800351a:	f107 0320 	add.w	r3, r7, #32
 800351e:	2230      	movs	r2, #48	; 0x30
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f00a fcd4 	bl	800ded0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <SystemClock_Config+0xd0>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <SystemClock_Config+0xd0>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <SystemClock_Config+0xd0>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003554:	2300      	movs	r3, #0
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <SystemClock_Config+0xd4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <SystemClock_Config+0xd4>)
 800355e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <SystemClock_Config+0xd4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003570:	2305      	movs	r3, #5
 8003572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800357a:	2301      	movs	r3, #1
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357e:	2302      	movs	r3, #2
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003588:	2304      	movs	r3, #4
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800358c:	23a8      	movs	r3, #168	; 0xa8
 800358e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003590:	2302      	movs	r3, #2
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003594:	2307      	movs	r3, #7
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	4618      	mov	r0, r3
 800359e:	f002 ffd3 	bl	8006548 <HAL_RCC_OscConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80035a8:	f000 f902 	bl	80037b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ac:	230f      	movs	r3, #15
 80035ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b0:	2302      	movs	r3, #2
 80035b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	2105      	movs	r1, #5
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fa34 	bl	8006a38 <HAL_RCC_ClockConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80035d6:	f000 f8eb 	bl	80037b0 <Error_Handler>
  }
}
 80035da:	bf00      	nop
 80035dc:	3750      	adds	r7, #80	; 0x50
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40007000 	.word	0x40007000

080035ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_PeriodElapsedCallback+0x30>
		if(stwS.state){
 80035fe:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003600:	78db      	ldrb	r3, [r3, #3]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 800360c:	f000 fad4 	bl	8003bb8 <stwTick>
		}
		animationFrameNum++;
 8003610:	4b49      	ldr	r3, [pc, #292]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800361a:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a46      	ldr	r2, [pc, #280]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d119      	bne.n	800365a <HAL_TIM_PeriodElapsedCallback+0x6e>
		scanButtons(btnsPtrs);
 8003626:	4846      	ldr	r0, [pc, #280]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003628:	f7fe fc30 	bl	8001e8c <scanButtons>
		// check timeouts
		if(timeoutState){
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(timeoutValue == timeoutSetpoint){
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d106      	bne.n	800364e <HAL_TIM_PeriodElapsedCallback+0x62>
				(*timeoutClbkPtr)();
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4798      	blx	r3
				timeoutState = 0;
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e005      	b.n	800365a <HAL_TIM_PeriodElapsedCallback+0x6e>
			} else {
				timeoutValue++;
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003658:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d160      	bne.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x13a>
		// watchface module timer value incrementing
		tickTimAAA();
 8003664:	f000 ff4c 	bl	8004500 <tickTimAAA>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003668:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800366a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_TIM_PeriodElapsedCallback+0x90>
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003674:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003678:	4837      	ldr	r0, [pc, #220]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800367a:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800367c:	2101      	movs	r1, #1
 800367e:	4837      	ldr	r0, [pc, #220]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003680:	f001 fee9 	bl	8005456 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003686:	7b1b      	ldrb	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_TIM_PeriodElapsedCallback+0xbc>
 800368c:	4b35      	ldr	r3, [pc, #212]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369e:	ee17 1a90 	vmov	r1, s15
 80036a2:	482f      	ldr	r0, [pc, #188]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80036a4:	f001 f9b8 	bl	8004a18 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 80036a8:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 80036b8:	4b2c      	ldr	r3, [pc, #176]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80036ba:	7c1b      	ldrb	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_TIM_PeriodElapsedCallback+0xe0>
 80036c0:	f107 030e 	add.w	r3, r7, #14
 80036c4:	4619      	mov	r1, r3
 80036c6:	4829      	ldr	r0, [pc, #164]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80036c8:	f001 f911 	bl	80048ee <cbuf_ovw>

		tim13_counter++;
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80036d6:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d109      	bne.n	80036f8 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	481d      	ldr	r0, [pc, #116]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80036e8:	f001 feb5 	bl	8005456 <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]

		}
		if(isTimerRunning(&countDown1)){
 80036f8:	4820      	ldr	r0, [pc, #128]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80036fa:	f7fe fbe1 	bl	8001ec0 <isTimerRunning>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x13a>
			if(countDown1.remainingSec == 0){
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003706:	885b      	ldrh	r3, [r3, #2]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_TIM_PeriodElapsedCallback+0x12e>
				alertFlag = 1;
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 8003712:	481a      	ldr	r0, [pc, #104]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003714:	f7fe fbe0 	bl	8001ed8 <pauseTimer>
				countDown1.remainingSec--;
			}
		}

	}
}
 8003718:	e005      	b.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x13a>
				countDown1.remainingSec--;
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800371c:	885b      	ldrh	r3, [r3, #2]
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	4b16      	ldr	r3, [pc, #88]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003724:	805a      	strh	r2, [r3, #2]
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40014400 	.word	0x40014400
 8003734:	20005824 	.word	0x20005824
 8003738:	20005a1c 	.word	0x20005a1c
 800373c:	40014800 	.word	0x40014800
 8003740:	2000002c 	.word	0x2000002c
 8003744:	20005719 	.word	0x20005719
 8003748:	2000571a 	.word	0x2000571a
 800374c:	2000571c 	.word	0x2000571c
 8003750:	20005720 	.word	0x20005720
 8003754:	40001c00 	.word	0x40001c00
 8003758:	200054b4 	.word	0x200054b4
 800375c:	40020400 	.word	0x40020400
 8003760:	200054a4 	.word	0x200054a4
 8003764:	2000237c 	.word	0x2000237c
 8003768:	cccccccd 	.word	0xcccccccd
 800376c:	20005490 	.word	0x20005490
 8003770:	20005718 	.word	0x20005718
 8003774:	20000056 	.word	0x20000056
 8003778:	20000057 	.word	0x20000057
 800377c:	20000058 	.word	0x20000058
 8003780:	20005724 	.word	0x20005724

08003784 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_UART_RxCpltCallback+0x24>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d103      	bne.n	800379e <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <HAL_UART_RxCpltCallback+0x28>)
 800379a:	f001 fe5c 	bl	8005456 <HAL_GPIO_TogglePin>

	}
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40011400 	.word	0x40011400
 80037ac:	40020400 	.word	0x40020400

080037b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b4:	b672      	cpsid	i
}
 80037b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80037b8:	2201      	movs	r2, #1
 80037ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037be:	4802      	ldr	r0, [pc, #8]	; (80037c8 <Error_Handler+0x18>)
 80037c0:	f001 fe30 	bl	8005424 <HAL_GPIO_WritePin>
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <Error_Handler+0x14>
 80037c6:	bf00      	nop
 80037c8:	40020400 	.word	0x40020400

080037cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_RTC_Init+0x58>)
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <MX_RTC_Init+0x5c>)
 80037e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_RTC_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_RTC_Init+0x58>)
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <MX_RTC_Init+0x58>)
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <MX_RTC_Init+0x58>)
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <MX_RTC_Init+0x58>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <MX_RTC_Init+0x58>)
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_RTC_Init+0x58>)
 8003810:	f003 fcf2 	bl	80071f8 <HAL_RTC_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800381a:	f7ff ffc9 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20005728 	.word	0x20005728
 8003828:	40002800 	.word	0x40002800

0800382c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	2230      	movs	r2, #48	; 0x30
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f00a fb47 	bl	800ded0 <memset>
  if(rtcHandle->Instance==RTC)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <HAL_RTC_MspInit+0x4c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d111      	bne.n	8003870 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800384c:	2320      	movs	r3, #32
 800384e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fb0c 	bl	8006e78 <HAL_RCCEx_PeriphCLKConfig>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003866:	f7ff ffa3 	bl	80037b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <HAL_RTC_MspInit+0x50>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003870:	bf00      	nop
 8003872:	3738      	adds	r7, #56	; 0x38
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40002800 	.word	0x40002800
 800387c:	42470e3c 	.word	0x42470e3c

08003880 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <MX_SDIO_SD_Init+0x3c>)
 8003888:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 8003898:	2200      	movs	r2, #0
 800389a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <MX_SDIO_SD_Init+0x38>)
 80038aa:	2204      	movs	r2, #4
 80038ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20005748 	.word	0x20005748
 80038bc:	40012c00 	.word	0x40012c00

080038c0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_SD_MspInit+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d14a      	bne.n	8003978 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_SD_MspInit+0xc4>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <HAL_SD_MspInit+0xc4>)
 80038ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_SD_MspInit+0xc4>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_SD_MspInit+0xc4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <HAL_SD_MspInit+0xc4>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_SD_MspInit+0xc4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_SD_MspInit+0xc4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_SD_MspInit+0xc4>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_SD_MspInit+0xc4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003936:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800393a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003948:	230c      	movs	r3, #12
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	480d      	ldr	r0, [pc, #52]	; (8003988 <HAL_SD_MspInit+0xc8>)
 8003954:	f001 fba2 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003958:	2304      	movs	r3, #4
 800395a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003968:	230c      	movs	r3, #12
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4619      	mov	r1, r3
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <HAL_SD_MspInit+0xcc>)
 8003974:	f001 fb92 	bl	800509c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003978:	bf00      	nop
 800397a:	3728      	adds	r7, #40	; 0x28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40023800 	.word	0x40023800
 8003988:	40020800 	.word	0x40020800
 800398c:	40020c00 	.word	0x40020c00

08003990 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <MX_SPI1_Init+0x64>)
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <MX_SPI1_Init+0x68>)
 8003998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <MX_SPI1_Init+0x64>)
 800399c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039c4:	2220      	movs	r2, #32
 80039c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039dc:	220a      	movs	r2, #10
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039e0:	4804      	ldr	r0, [pc, #16]	; (80039f4 <MX_SPI1_Init+0x64>)
 80039e2:	f004 fd55 	bl	8008490 <HAL_SPI_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039ec:	f7ff fee0 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200057cc 	.word	0x200057cc
 80039f8:	40013000 	.word	0x40013000

080039fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_SPI_MspInit+0x84>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12b      	bne.n	8003a76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_SPI_MspInit+0x88>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a56:	23a0      	movs	r3, #160	; 0xa0
 8003a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a66:	2305      	movs	r3, #5
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4805      	ldr	r0, [pc, #20]	; (8003a88 <HAL_SPI_MspInit+0x8c>)
 8003a72:	f001 fb13 	bl	800509c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a76:	bf00      	nop
 8003a78:	3728      	adds	r7, #40	; 0x28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40013000 	.word	0x40013000
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020000 	.word	0x40020000

08003a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800

08003adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <NMI_Handler+0x4>

08003ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8003ae6:	f7ff fe63 	bl	80037b0 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <HardFault_Handler+0x8>

08003aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <MemManage_Handler+0x4>

08003af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003af6:	e7fe      	b.n	8003af6 <BusFault_Handler+0x4>

08003af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003afc:	e7fe      	b.n	8003afc <UsageFault_Handler+0x4>

08003afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b2c:	f001 f8da 	bl	8004ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b38:	4803      	ldr	r0, [pc, #12]	; (8003b48 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003b3a:	f005 f91b 	bl	8008d74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003b3e:	4803      	ldr	r0, [pc, #12]	; (8003b4c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003b40:	f005 f918 	bl	8008d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000582c 	.word	0x2000582c
 8003b4c:	20005874 	.word	0x20005874

08003b50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b54:	4803      	ldr	r0, [pc, #12]	; (8003b64 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003b56:	f005 f90d 	bl	8008d74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003b5a:	4803      	ldr	r0, [pc, #12]	; (8003b68 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003b5c:	f005 f90a 	bl	8008d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	2000582c 	.word	0x2000582c
 8003b68:	200058bc 	.word	0x200058bc

08003b6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8003b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b74:	f001 fc8a 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003b78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b7c:	f001 fc86 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003b80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b84:	f001 fc82 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003b88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b8c:	f001 fc7e 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003b90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b94:	f001 fc7a 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003b98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b9c:	f001 fc76 	bl	800548c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003baa:	f005 f8e3 	bl	8008d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20005904 	.word	0x20005904

08003bb8 <stwTick>:
void stwStart(void){
	  HAL_TIM_Base_Start_IT(&htim10);

	stwS.state = STW_STATE_ENABLED;
}
void stwTick(void){
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <stwTick+0x28>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bca:	4905      	ldr	r1, [pc, #20]	; (8003be0 <stwTick+0x28>)
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	f362 0317 	bfi	r3, r2, #0, #24
 8003bd2:	600b      	str	r3, [r1, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20005824 	.word	0x20005824

08003be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_kill>:

int _kill(int pid, int sig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bfe:	f00a f90d 	bl	800de1c <__errno>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2216      	movs	r2, #22
 8003c06:	601a      	str	r2, [r3, #0]
	return -1;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_exit>:

void _exit (int status)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ffe7 	bl	8003bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c26:	e7fe      	b.n	8003c26 <_exit+0x12>

08003c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e00a      	b.n	8003c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c3a:	f3af 8000 	nop.w
 8003c3e:	4601      	mov	r1, r0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	60ba      	str	r2, [r7, #8]
 8003c46:	b2ca      	uxtb	r2, r1
 8003c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	dbf0      	blt.n	8003c3a <_read+0x12>
	}

return len;
 8003c58:	687b      	ldr	r3, [r7, #4]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e009      	b.n	8003c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	60ba      	str	r2, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fae7 	bl	8003250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dbf1      	blt.n	8003c74 <_write+0x12>
	}
	return len;
 8003c90:	687b      	ldr	r3, [r7, #4]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_close>:

int _close(int file)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_isatty>:

int _isatty(int file)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <_sbrk+0x50>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <_sbrk+0x16>
		heap_end = &end;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <_sbrk+0x50>)
 8003d16:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <_sbrk+0x54>)
 8003d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <_sbrk+0x50>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <_sbrk+0x50>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	466a      	mov	r2, sp
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d907      	bls.n	8003d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d2e:	f00a f875 	bl	800de1c <__errno>
 8003d32:	4603      	mov	r3, r0
 8003d34:	220c      	movs	r2, #12
 8003d36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	e006      	b.n	8003d4c <_sbrk+0x48>
	}

	heap_end += incr;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <_sbrk+0x50>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <_sbrk+0x50>)
 8003d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20005828 	.word	0x20005828
 8003d58:	20005a78 	.word	0x20005a78

08003d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <SystemInit+0x20>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <SystemInit+0x20>)
 8003d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b096      	sub	sp, #88	; 0x58
 8003d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	615a      	str	r2, [r3, #20]
 8003db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	2220      	movs	r2, #32
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00a f889 	bl	800ded0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003dc0:	4a3f      	ldr	r2, [pc, #252]	; (8003ec0 <MX_TIM1_Init+0x140>)
 8003dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003dc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003dd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003de0:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003dec:	4833      	ldr	r0, [pc, #204]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003dee:	f004 fddf 	bl	80089b0 <HAL_TIM_Base_Init>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003df8:	f7ff fcda 	bl	80037b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e06:	4619      	mov	r1, r3
 8003e08:	482c      	ldr	r0, [pc, #176]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003e0a:	f005 f97d 	bl	8009108 <HAL_TIM_ConfigClockSource>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e14:	f7ff fccc 	bl	80037b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e18:	4828      	ldr	r0, [pc, #160]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003e1a:	f004 fe89 	bl	8008b30 <HAL_TIM_PWM_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e24:	f7ff fcc4 	bl	80037b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e34:	4619      	mov	r1, r3
 8003e36:	4821      	ldr	r0, [pc, #132]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003e38:	f005 fd66 	bl	8009908 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003e42:	f7ff fcb5 	bl	80037b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e46:	2360      	movs	r3, #96	; 0x60
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e52:	2300      	movs	r3, #0
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e66:	2200      	movs	r2, #0
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4814      	ldr	r0, [pc, #80]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003e6c:	f005 f88a 	bl	8008f84 <HAL_TIM_PWM_ConfigChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003e76:	f7ff fc9b 	bl	80037b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4807      	ldr	r0, [pc, #28]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003e9e:	f005 fdaf 	bl	8009a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003ea8:	f7ff fc82 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003eac:	4803      	ldr	r0, [pc, #12]	; (8003ebc <MX_TIM1_Init+0x13c>)
 8003eae:	f000 f963 	bl	8004178 <HAL_TIM_MspPostInit>

}
 8003eb2:	bf00      	nop
 8003eb4:	3758      	adds	r7, #88	; 0x58
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000582c 	.word	0x2000582c
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003eca:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <MX_TIM10_Init+0x44>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ed0:	f244 129f 	movw	r2, #16799	; 0x419f
 8003ed4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ede:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ee2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_TIM10_Init+0x40>)
 8003ef2:	f004 fd5d 	bl	80089b0 <HAL_TIM_Base_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003efc:	f7ff fc58 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20005874 	.word	0x20005874
 8003f08:	40014400 	.word	0x40014400

08003f0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <MX_TIM11_Init+0x44>)
 8003f14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f18:	f244 129f 	movw	r2, #16799	; 0x419f
 8003f1c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f26:	2263      	movs	r2, #99	; 0x63
 8003f28:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003f36:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_TIM11_Init+0x40>)
 8003f38:	f004 fd3a 	bl	80089b0 <HAL_TIM_Base_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003f42:	f7ff fc35 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200058bc 	.word	0x200058bc
 8003f50:	40014800 	.word	0x40014800

08003f54 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <MX_TIM13_Init+0x44>)
 8003f5c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f60:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003f64:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f72:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <MX_TIM13_Init+0x40>)
 8003f82:	f004 fd15 	bl	80089b0 <HAL_TIM_Base_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003f8c:	f7ff fc10 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20005904 	.word	0x20005904
 8003f98:	40001c00 	.word	0x40001c00

08003f9c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
 8003fb0:	615a      	str	r2, [r3, #20]
 8003fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <MX_TIM14_Init+0x98>)
 8003fb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8003fba:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fbc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003fc0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fca:	2263      	movs	r2, #99	; 0x63
 8003fcc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003fda:	4815      	ldr	r0, [pc, #84]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fdc:	f004 fce8 	bl	80089b0 <HAL_TIM_Base_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8003fe6:	f7ff fbe3 	bl	80037b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003fea:	4811      	ldr	r0, [pc, #68]	; (8004030 <MX_TIM14_Init+0x94>)
 8003fec:	f004 fda0 	bl	8008b30 <HAL_TIM_PWM_Init>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8003ff6:	f7ff fbdb 	bl	80037b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffa:	2360      	movs	r3, #96	; 0x60
 8003ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	2200      	movs	r2, #0
 800400e:	4619      	mov	r1, r3
 8004010:	4807      	ldr	r0, [pc, #28]	; (8004030 <MX_TIM14_Init+0x94>)
 8004012:	f004 ffb7 	bl	8008f84 <HAL_TIM_PWM_ConfigChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800401c:	f7ff fbc8 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004020:	4803      	ldr	r0, [pc, #12]	; (8004030 <MX_TIM14_Init+0x94>)
 8004022:	f000 f8a9 	bl	8004178 <HAL_TIM_MspPostInit>

}
 8004026:	bf00      	nop
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000594c 	.word	0x2000594c
 8004034:	40002000 	.word	0x40002000

08004038 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_TIM_Base_MspInit+0x128>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d11e      	bne.n	8004088 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	4b45      	ldr	r3, [pc, #276]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	4a44      	ldr	r2, [pc, #272]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6453      	str	r3, [r2, #68]	; 0x44
 800405a:	4b42      	ldr	r3, [pc, #264]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	2019      	movs	r0, #25
 800406c:	f000 ff59 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004070:	2019      	movs	r0, #25
 8004072:	f000 ff72 	bl	8004f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	201a      	movs	r0, #26
 800407c:	f000 ff51 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004080:	201a      	movs	r0, #26
 8004082:	f000 ff6a 	bl	8004f5a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004086:	e066      	b.n	8004156 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a36      	ldr	r2, [pc, #216]	; (8004168 <HAL_TIM_Base_MspInit+0x130>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d116      	bne.n	80040c0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	6453      	str	r3, [r2, #68]	; 0x44
 80040a2:	4b30      	ldr	r3, [pc, #192]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	2019      	movs	r0, #25
 80040b4:	f000 ff35 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80040b8:	2019      	movs	r0, #25
 80040ba:	f000 ff4e 	bl	8004f5a <HAL_NVIC_EnableIRQ>
}
 80040be:	e04a      	b.n	8004156 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a29      	ldr	r2, [pc, #164]	; (800416c <HAL_TIM_Base_MspInit+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d116      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	4a24      	ldr	r2, [pc, #144]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d8:	6453      	str	r3, [r2, #68]	; 0x44
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	201a      	movs	r0, #26
 80040ec:	f000 ff19 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80040f0:	201a      	movs	r0, #26
 80040f2:	f000 ff32 	bl	8004f5a <HAL_NVIC_EnableIRQ>
}
 80040f6:	e02e      	b.n	8004156 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_TIM_Base_MspInit+0x138>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d116      	bne.n	8004130 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	202c      	movs	r0, #44	; 0x2c
 8004124:	f000 fefd 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004128:	202c      	movs	r0, #44	; 0x2c
 800412a:	f000 ff16 	bl	8004f5a <HAL_NVIC_EnableIRQ>
}
 800412e:	e012      	b.n	8004156 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <HAL_TIM_Base_MspInit+0x13c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_TIM_Base_MspInit+0x12c>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40023800 	.word	0x40023800
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	40001c00 	.word	0x40001c00
 8004174:	40002000 	.word	0x40002000

08004178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <HAL_TIM_MspPostInit+0xb4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d11f      	bne.n	80041da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a23      	ldr	r2, [pc, #140]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041a4:	f043 0310 	orr.w	r3, r3, #16
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041c8:	2301      	movs	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	4818      	ldr	r0, [pc, #96]	; (8004234 <HAL_TIM_MspPostInit+0xbc>)
 80041d4:	f000 ff62 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80041d8:	e023      	b.n	8004222 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <HAL_TIM_MspPostInit+0xc0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d11e      	bne.n	8004222 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041ee:	f043 0320 	orr.w	r3, r3, #32
 80041f2:	6313      	str	r3, [r2, #48]	; 0x30
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_TIM_MspPostInit+0xb8>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004212:	2309      	movs	r3, #9
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	4619      	mov	r1, r3
 800421c:	4807      	ldr	r0, [pc, #28]	; (800423c <HAL_TIM_MspPostInit+0xc4>)
 800421e:	f000 ff3d 	bl	800509c <HAL_GPIO_Init>
}
 8004222:	bf00      	nop
 8004224:	3728      	adds	r7, #40	; 0x28
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40023800 	.word	0x40023800
 8004234:	40021000 	.word	0x40021000
 8004238:	40002000 	.word	0x40002000
 800423c:	40021400 	.word	0x40021400

08004240 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <MX_USART3_UART_Init+0x50>)
 8004248:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <MX_USART3_UART_Init+0x4c>)
 800424c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004250:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <MX_USART3_UART_Init+0x4c>)
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004266:	220c      	movs	r2, #12
 8004268:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <MX_USART3_UART_Init+0x4c>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004276:	4805      	ldr	r0, [pc, #20]	; (800428c <MX_USART3_UART_Init+0x4c>)
 8004278:	f005 fc28 	bl	8009acc <HAL_UART_Init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004282:	f7ff fa95 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20005994 	.word	0x20005994
 8004290:	40004800 	.word	0x40004800

08004294 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <MX_USART6_UART_Init+0x50>)
 800429c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042ba:	220c      	movs	r2, #12
 80042bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80042ca:	4805      	ldr	r0, [pc, #20]	; (80042e0 <MX_USART6_UART_Init+0x4c>)
 80042cc:	f005 fbfe 	bl	8009acc <HAL_UART_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80042d6:	f7ff fa6b 	bl	80037b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200059d8 	.word	0x200059d8
 80042e4:	40011400 	.word	0x40011400

080042e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a32      	ldr	r2, [pc, #200]	; (80043d0 <HAL_UART_MspInit+0xe8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d12d      	bne.n	8004366 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <HAL_UART_MspInit+0xec>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_UART_MspInit+0xec>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	6313      	str	r3, [r2, #48]	; 0x30
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004350:	2303      	movs	r3, #3
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004354:	2307      	movs	r3, #7
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004358:	f107 031c 	add.w	r3, r7, #28
 800435c:	4619      	mov	r1, r3
 800435e:	481e      	ldr	r0, [pc, #120]	; (80043d8 <HAL_UART_MspInit+0xf0>)
 8004360:	f000 fe9c 	bl	800509c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004364:	e030      	b.n	80043c8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_UART_MspInit+0xf4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d12b      	bne.n	80043c8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_UART_MspInit+0xec>)
 800437a:	f043 0320 	orr.w	r3, r3, #32
 800437e:	6453      	str	r3, [r2, #68]	; 0x44
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <HAL_UART_MspInit+0xec>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	6313      	str	r3, [r2, #48]	; 0x30
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_UART_MspInit+0xec>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043a8:	23c0      	movs	r3, #192	; 0xc0
 80043aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b4:	2303      	movs	r3, #3
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043b8:	2308      	movs	r3, #8
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043bc:	f107 031c 	add.w	r3, r7, #28
 80043c0:	4619      	mov	r1, r3
 80043c2:	4807      	ldr	r0, [pc, #28]	; (80043e0 <HAL_UART_MspInit+0xf8>)
 80043c4:	f000 fe6a 	bl	800509c <HAL_GPIO_Init>
}
 80043c8:	bf00      	nop
 80043ca:	3730      	adds	r7, #48	; 0x30
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40004800 	.word	0x40004800
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40020c00 	.word	0x40020c00
 80043dc:	40011400 	.word	0x40011400
 80043e0:	40020800 	.word	0x40020800

080043e4 <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <enableVib+0x18>)
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <enableVib+0x1c>)
 80043ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000064 	.word	0x20000064
 8004400:	40002000 	.word	0x40002000

08004404 <disableVib>:
void disableVib(void){
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <disableVib+0x14>)
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40002000 	.word	0x40002000

0800441c <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	460a      	mov	r2, r1
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	4613      	mov	r3, r2
 800442a:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 800442c:	4a06      	ldr	r2, [pc, #24]	; (8004448 <pulseVib+0x2c>)
 800442e:	797b      	ldrb	r3, [r7, #5]
 8004430:	7013      	strb	r3, [r2, #0]
	enableVib();
 8004432:	f7ff ffd7 	bl	80043e4 <enableVib>
	setTimeout(duration, &disableVib);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <pulseVib+0x30>)
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe ff16 	bl	800326c <setTimeout>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000064 	.word	0x20000064
 800444c:	08004405 	.word	0x08004405

08004450 <timerElap>:
#include "../utils/timerUtils.h"

// fonts
#include "fonts/fonts.h"

void timerElap(void){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af02      	add	r7, sp, #8
	lcdRect(10, 20, 10, 20, 1);
 8004456:	2301      	movs	r3, #1
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2314      	movs	r3, #20
 800445c:	220a      	movs	r2, #10
 800445e:	2114      	movs	r1, #20
 8004460:	200a      	movs	r0, #10
 8004462:	f7fe fe4b 	bl	80030fc <lcdRect>
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <testTimerAction>:

timer_T* testTimerPtr = NULL;
static void testTimerAction(void){
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
	if(testTimerPtr == NULL){
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <testTimerAction+0x28>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <testTimerAction+0x24>
		testTimerPtr = createTimer();
 8004478:	f000 fb1d 	bl	8004ab6 <createTimer>
 800447c:	4603      	mov	r3, r0
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <testTimerAction+0x28>)
 8004480:	6013      	str	r3, [r2, #0]
		setTimerAAA(testTimerPtr, 10, &timerElap);
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <testTimerAction+0x28>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <testTimerAction+0x2c>)
 8004488:	210a      	movs	r1, #10
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fb2e 	bl	8004aec <setTimerAAA>
	}
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20005a20 	.word	0x20005a20
 8004498:	08004451 	.word	0x08004451

0800449c <testTimerStartAction>:
static void testTimerStartAction(void){
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
	runTimerAAA(testTimerPtr);
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <testTimerStartAction+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb3b 	bl	8004b20 <runTimerAAA>
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20005a20 	.word	0x20005a20

080044b4 <testTimerPauseAction>:
static void testTimerPauseAction(void){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	pauseTimerAAA(testTimerPtr);
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <testTimerPauseAction+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb45 	bl	8004b4c <pauseTimerAAA>
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20005a20 	.word	0x20005a20

080044cc <testTimerResetAction>:
static void testTimerResetAction(void){
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	resetTimerAAA(testTimerPtr);
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <testTimerResetAction+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fb4b 	bl	8004b70 <resetTimerAAA>
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20005a20 	.word	0x20005a20

080044e4 <testTimerDeleteAction>:
static void testTimerDeleteAction(void){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
	deleteTimer(testTimerPtr);
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <testTimerDeleteAction+0x18>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 faf2 	bl	8004ad6 <deleteTimer>
	testTimerPtr = NULL;
 80044f2:	4b02      	ldr	r3, [pc, #8]	; (80044fc <testTimerDeleteAction+0x18>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20005a20 	.word	0x20005a20

08004500 <tickTimAAA>:
void tickTimAAA(void){
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	tickTimer(testTimerPtr);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <tickTimAAA+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fb42 	bl	8004b92 <tickTimer>
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20005a20 	.word	0x20005a20

08004518 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BB.onSinglePressHandler = &testTimerAction;
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <setDefaultClbcks+0x2c>)
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <setDefaultClbcks+0x30>)
 8004520:	611a      	str	r2, [r3, #16]
//	btn_BA.onSinglePressHandler = &nextScreen;
//	btn_BC.onSinglePressHandler = &prevScreen;
	btn_BC.onSinglePressHandler = &testTimerDeleteAction;
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <setDefaultClbcks+0x34>)
 8004524:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <setDefaultClbcks+0x38>)
 8004526:	611a      	str	r2, [r3, #16]

	btn_B1.onSinglePressHandler = &testTimerStartAction;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <setDefaultClbcks+0x3c>)
 800452a:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <setDefaultClbcks+0x40>)
 800452c:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &testTimerPauseAction;
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <setDefaultClbcks+0x44>)
 8004530:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <setDefaultClbcks+0x48>)
 8004532:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &testTimerResetAction;
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <setDefaultClbcks+0x4c>)
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <setDefaultClbcks+0x50>)
 8004538:	611a      	str	r2, [r3, #16]
}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	200023d4 	.word	0x200023d4
 8004548:	0800446d 	.word	0x0800446d
 800454c:	2000241c 	.word	0x2000241c
 8004550:	080044e5 	.word	0x080044e5
 8004554:	20002464 	.word	0x20002464
 8004558:	0800449d 	.word	0x0800449d
 800455c:	200024ac 	.word	0x200024ac
 8004560:	080044b5 	.word	0x080044b5
 8004564:	200024f4 	.word	0x200024f4
 8004568:	080044cd 	.word	0x080044cd

0800456c <faceSetup>:
}
static void setDateAction(void){
	guiApplyView(&dateInputModule);
}

void faceSetup(void){
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004570:	f7ff ffd2 	bl	8004518 <setDefaultClbcks>

}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}

08004578 <faceMain>:

void faceMain(void){
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b0b9      	sub	sp, #228	; 0xe4
 800457c:	af00      	add	r7, sp, #0
	// callback execution when timer elapsed
	timerElapsedClbk(testTimerPtr);
 800457e:	4bad      	ldr	r3, [pc, #692]	; (8004834 <faceMain+0x2bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb22 	bl	8004bcc <timerElapsedClbk>

	char testTimStr[30] = {0};
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800458e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	615a      	str	r2, [r3, #20]
 80045a0:	831a      	strh	r2, [r3, #24]
	sprintf(&testTimStr, "%3d", testTimerPtr->targetValue);
 80045a2:	4ba4      	ldr	r3, [pc, #656]	; (8004834 <faceMain+0x2bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	885b      	ldrh	r3, [r3, #2]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80045ae:	49a2      	ldr	r1, [pc, #648]	; (8004838 <faceMain+0x2c0>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f00a fb49 	bl	800ec48 <siprintf>
	lcdPutStr(310, 0, testTimStr, zekton24font);
 80045b6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80045ba:	4ba0      	ldr	r3, [pc, #640]	; (800483c <faceMain+0x2c4>)
 80045bc:	2100      	movs	r1, #0
 80045be:	f44f 709b 	mov.w	r0, #310	; 0x136
 80045c2:	f7fd ffcf 	bl	8002564 <lcdPutStr>
	sprintf(&testTimStr, "%3d", testTimerPtr->currentValue);
 80045c6:	4b9b      	ldr	r3, [pc, #620]	; (8004834 <faceMain+0x2bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80045d2:	4999      	ldr	r1, [pc, #612]	; (8004838 <faceMain+0x2c0>)
 80045d4:	4618      	mov	r0, r3
 80045d6:	f00a fb37 	bl	800ec48 <siprintf>
	lcdPutStr(310, 24, testTimStr, zekton24font);
 80045da:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80045de:	4b97      	ldr	r3, [pc, #604]	; (800483c <faceMain+0x2c4>)
 80045e0:	2118      	movs	r1, #24
 80045e2:	f44f 709b 	mov.w	r0, #310	; 0x136
 80045e6:	f7fd ffbd 	bl	8002564 <lcdPutStr>
	sprintf(&testTimStr, "%3d", testTimerPtr->timerStatus);
 80045ea:	4b92      	ldr	r3, [pc, #584]	; (8004834 <faceMain+0x2bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	7a1b      	ldrb	r3, [r3, #8]
 80045f0:	461a      	mov	r2, r3
 80045f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80045f6:	4990      	ldr	r1, [pc, #576]	; (8004838 <faceMain+0x2c0>)
 80045f8:	4618      	mov	r0, r3
 80045fa:	f00a fb25 	bl	800ec48 <siprintf>
	lcdPutStr(310, 48, testTimStr, zekton24font);
 80045fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8004602:	4b8e      	ldr	r3, [pc, #568]	; (800483c <faceMain+0x2c4>)
 8004604:	2130      	movs	r1, #48	; 0x30
 8004606:	f44f 709b 	mov.w	r0, #310	; 0x136
 800460a:	f7fd ffab 	bl	8002564 <lcdPutStr>

	char temperature[30] = {0};
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004614:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
 8004624:	615a      	str	r2, [r3, #20]
 8004626:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8004628:	4b85      	ldr	r3, [pc, #532]	; (8004840 <faceMain+0x2c8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fb ff9b 	bl	8000568 <__aeabi_f2d>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800463a:	4982      	ldr	r1, [pc, #520]	; (8004844 <faceMain+0x2cc>)
 800463c:	f00a fb04 	bl	800ec48 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8004640:	2314      	movs	r3, #20
 8004642:	b29c      	uxth	r4, r3
 8004644:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb fdd1 	bl	80001f0 <strlen>
 800464e:	4603      	mov	r3, r0
 8004650:	f1c3 030d 	rsb	r3, r3, #13
 8004654:	b29b      	uxth	r3, r3
 8004656:	fb14 f303 	smulbb	r3, r4, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	3323      	adds	r3, #35	; 0x23
 800465e:	b298      	uxth	r0, r3
 8004660:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004664:	4b75      	ldr	r3, [pc, #468]	; (800483c <faceMain+0x2c4>)
 8004666:	210e      	movs	r1, #14
 8004668:	f7fd ff7c 	bl	8002564 <lcdPutStr>
	char baroStr[30] = {0};
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004672:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	60da      	str	r2, [r3, #12]
 8004680:	611a      	str	r2, [r3, #16]
 8004682:	615a      	str	r2, [r3, #20]
 8004684:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8004686:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <faceMain+0x2c8>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004848 <faceMain+0x2d0>
 8004696:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800469a:	ee16 0a90 	vmov	r0, s13
 800469e:	f7fb ff63 	bl	8000568 <__aeabi_f2d>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80046aa:	4968      	ldr	r1, [pc, #416]	; (800484c <faceMain+0x2d4>)
 80046ac:	f00a facc 	bl	800ec48 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 80046b0:	2314      	movs	r3, #20
 80046b2:	b29c      	uxth	r4, r3
 80046b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb fd99 	bl	80001f0 <strlen>
 80046be:	4603      	mov	r3, r0
 80046c0:	f1c3 030d 	rsb	r3, r3, #13
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	fb14 f303 	smulbb	r3, r4, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3323      	adds	r3, #35	; 0x23
 80046ce:	b298      	uxth	r0, r3
 80046d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <faceMain+0x2c4>)
 80046d6:	212a      	movs	r1, #42	; 0x2a
 80046d8:	f7fd ff44 	bl	8002564 <lcdPutStr>

	char fracStr[30] = {0};
 80046dc:	2300      	movs	r3, #0
 80046de:	663b      	str	r3, [r7, #96]	; 0x60
 80046e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
 80046f0:	615a      	str	r2, [r3, #20]
 80046f2:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80046f4:	2300      	movs	r3, #0
 80046f6:	643b      	str	r3, [r7, #64]	; 0x40
 80046f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	611a      	str	r2, [r3, #16]
 8004708:	615a      	str	r2, [r3, #20]
 800470a:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 800470c:	2300      	movs	r3, #0
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
 8004720:	615a      	str	r2, [r3, #20]
 8004722:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8004724:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <faceMain+0x2d8>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800472e:	4949      	ldr	r1, [pc, #292]	; (8004854 <faceMain+0x2dc>)
 8004730:	4618      	mov	r0, r3
 8004732:	f00a fa89 	bl	800ec48 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8004736:	4b46      	ldr	r3, [pc, #280]	; (8004850 <faceMain+0x2d8>)
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	461a      	mov	r2, r3
 800473c:	f107 0320 	add.w	r3, r7, #32
 8004740:	4944      	ldr	r1, [pc, #272]	; (8004854 <faceMain+0x2dc>)
 8004742:	4618      	mov	r0, r3
 8004744:	f00a fa80 	bl	800ec48 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8004748:	4b41      	ldr	r3, [pc, #260]	; (8004850 <faceMain+0x2d8>)
 800474a:	789b      	ldrb	r3, [r3, #2]
 800474c:	461a      	mov	r2, r3
 800474e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004752:	4940      	ldr	r1, [pc, #256]	; (8004854 <faceMain+0x2dc>)
 8004754:	4618      	mov	r0, r3
 8004756:	f00a fa77 	bl	800ec48 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800475a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <faceMain+0x2e0>)
 8004760:	214c      	movs	r1, #76	; 0x4c
 8004762:	2014      	movs	r0, #20
 8004764:	f7fd fefe 	bl	8002564 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8004768:	f107 0220 	add.w	r2, r7, #32
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <faceMain+0x2e0>)
 800476e:	214c      	movs	r1, #76	; 0x4c
 8004770:	20aa      	movs	r0, #170	; 0xaa
 8004772:	f7fd fef7 	bl	8002564 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8004776:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800477a:	4b38      	ldr	r3, [pc, #224]	; (800485c <faceMain+0x2e4>)
 800477c:	214c      	movs	r1, #76	; 0x4c
 800477e:	f240 103b 	movw	r0, #315	; 0x13b
 8004782:	f7fd feef 	bl	8002564 <lcdPutStr>

	char buffString[30] = {0};
 8004786:	2300      	movs	r3, #0
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]
 8004798:	615a      	str	r2, [r3, #20]
 800479a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800479c:	463b      	mov	r3, r7
 800479e:	4930      	ldr	r1, [pc, #192]	; (8004860 <faceMain+0x2e8>)
 80047a0:	4618      	mov	r0, r3
 80047a2:	f00a fa51 	bl	800ec48 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 80047a6:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <faceMain+0x2ec>)
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <faceMain+0x2f0>)
 80047ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <faceMain+0x2ec>)
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047ba:	4638      	mov	r0, r7
 80047bc:	492b      	ldr	r1, [pc, #172]	; (800486c <faceMain+0x2f4>)
 80047be:	f00a fa43 	bl	800ec48 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80047c2:	2314      	movs	r3, #20
 80047c4:	b29c      	uxth	r4, r3
 80047c6:	463b      	mov	r3, r7
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fb fd11 	bl	80001f0 <strlen>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f1c3 030d 	rsb	r3, r3, #13
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	fb14 f303 	smulbb	r3, r4, r3
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3323      	adds	r3, #35	; 0x23
 80047de:	b298      	uxth	r0, r3
 80047e0:	463a      	mov	r2, r7
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <faceMain+0x2c4>)
 80047e4:	21ae      	movs	r1, #174	; 0xae
 80047e6:	f7fd febd 	bl	8002564 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <faceMain+0x2ec>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <faceMain+0x2f8>)
 80047f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <faceMain+0x2ec>)
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	4638      	mov	r0, r7
 80047fc:	491b      	ldr	r1, [pc, #108]	; (800486c <faceMain+0x2f4>)
 80047fe:	f00a fa23 	bl	800ec48 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8004802:	2314      	movs	r3, #20
 8004804:	b29c      	uxth	r4, r3
 8004806:	463b      	mov	r3, r7
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb fcf1 	bl	80001f0 <strlen>
 800480e:	4603      	mov	r3, r0
 8004810:	f1c3 030d 	rsb	r3, r3, #13
 8004814:	b29b      	uxth	r3, r3
 8004816:	fb14 f303 	smulbb	r3, r4, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	3323      	adds	r3, #35	; 0x23
 800481e:	b298      	uxth	r0, r3
 8004820:	463a      	mov	r2, r7
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <faceMain+0x2c4>)
 8004824:	21ca      	movs	r1, #202	; 0xca
 8004826:	f7fd fe9d 	bl	8002564 <lcdPutStr>
}
 800482a:	bf00      	nop
 800482c:	37e4      	adds	r7, #228	; 0xe4
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	20005a20 	.word	0x20005a20
 8004838:	08012028 	.word	0x08012028
 800483c:	08013f24 	.word	0x08013f24
 8004840:	2000237c 	.word	0x2000237c
 8004844:	0801202c 	.word	0x0801202c
 8004848:	42c80000 	.word	0x42c80000
 800484c:	08012034 	.word	0x08012034
 8004850:	20005478 	.word	0x20005478
 8004854:	08012040 	.word	0x08012040
 8004858:	0801b3d4 	.word	0x0801b3d4
 800485c:	08015d8c 	.word	0x08015d8c
 8004860:	08012048 	.word	0x08012048
 8004864:	2000548c 	.word	0x2000548c
 8004868:	20000088 	.word	0x20000088
 800486c:	08012058 	.word	0x08012058
 8004870:	20000068 	.word	0x20000068

08004874 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	895b      	ldrh	r3, [r3, #10]
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f009 fafa 	bl	800de94 <malloc>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	741a      	strb	r2, [r3, #16]
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	891a      	ldrh	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	895b      	ldrh	r3, [r3, #10]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ffe5 	bl	80048c8 <cbuf_isFull>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d02b      	beq.n	800495c <cbuf_ovw+0x6e>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	88db      	ldrh	r3, [r3, #6]
 800490c:	4619      	mov	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	18d0      	adds	r0, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	461a      	mov	r2, r3
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	f009 fac8 	bl	800deb4 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	88db      	ldrh	r3, [r3, #6]
 8004928:	3301      	adds	r3, #1
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	8952      	ldrh	r2, [r2, #10]
 800492e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004932:	fb01 f202 	mul.w	r2, r1, r2
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	889b      	ldrh	r3, [r3, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	8952      	ldrh	r2, [r2, #10]
 8004948:	fb93 f1f2 	sdiv	r1, r3, r2
 800494c:	fb01 f202 	mul.w	r2, r1, r2
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	809a      	strh	r2, [r3, #4]
		return 0;
 8004958:	2300      	movs	r3, #0
 800495a:	e023      	b.n	80049a4 <cbuf_ovw+0xb6>
	} else{
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	88db      	ldrh	r3, [r3, #6]
 8004964:	4619      	mov	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	18d0      	adds	r0, r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	461a      	mov	r2, r3
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	f009 fa9c 	bl	800deb4 <memcpy>
		b->elemNum++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	891b      	ldrh	r3, [r3, #8]
 8004980:	3301      	adds	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	88db      	ldrh	r3, [r3, #6]
 800498c:	3301      	adds	r3, #1
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	8952      	ldrh	r2, [r2, #10]
 8004992:	fb93 f1f2 	sdiv	r1, r3, r2
 8004996:	fb01 f202 	mul.w	r2, r1, r2
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	80da      	strh	r2, [r3, #6]
		return 1;
 80049a2:	2301      	movs	r3, #1
	}
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	895b      	ldrh	r3, [r3, #10]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f009 fa65 	bl	800de94 <malloc>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	731a      	strb	r2, [r3, #12]
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	891a      	ldrh	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	895b      	ldrh	r3, [r3, #10]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	bf0c      	ite	eq
 8004a06:	2301      	moveq	r3, #1
 8004a08:	2300      	movne	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffe5 	bl	80049f2 <ring_buffer_full>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d023      	beq.n	8004a76 <add_ovw_ring_buffer+0x5e>
		b->values[b->tail] = value;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	88db      	ldrh	r3, [r3, #6]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	88db      	ldrh	r3, [r3, #6]
 8004a42:	3301      	adds	r3, #1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	8952      	ldrh	r2, [r2, #10]
 8004a48:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a4c:	fb01 f202 	mul.w	r2, r1, r2
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	889b      	ldrh	r3, [r3, #4]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	8952      	ldrh	r2, [r2, #10]
 8004a62:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a66:	fb01 f202 	mul.w	r2, r1, r2
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	809a      	strh	r2, [r3, #4]
		return 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e01b      	b.n	8004aae <add_ovw_ring_buffer+0x96>
	} else{
		b->values[b->tail] = value;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	88db      	ldrh	r3, [r3, #6]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	891b      	ldrh	r3, [r3, #8]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	88db      	ldrh	r3, [r3, #6]
 8004a96:	3301      	adds	r3, #1
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	8952      	ldrh	r2, [r2, #10]
 8004a9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004aa0:	fb01 f202 	mul.w	r2, r1, r2
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	80da      	strh	r2, [r3, #6]
		return 1;
 8004aac:	2301      	movs	r3, #1
	}
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <createTimer>:
 *      Author: wojch
 */

#include "timerUtils.h"

timer_T* createTimer(void){
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
	timer_T* timerPtr = malloc(sizeof(timer_T));
 8004abc:	200c      	movs	r0, #12
 8004abe:	f009 f9e9 	bl	800de94 <malloc>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	607b      	str	r3, [r7, #4]
	timerPtr->timerStatus = TIMER_STATUS_UNSET;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	721a      	strb	r2, [r3, #8]
	return timerPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <deleteTimer>:
void deleteTimer(timer_T* timer){
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
	free(timer);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f009 f9e0 	bl	800dea4 <free>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <setTimerAAA>:
uint8_t setTimerAAA(timer_T* timer, uint16_t targetTime, void* callback){
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	460b      	mov	r3, r1
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	817b      	strh	r3, [r7, #10]
	timer->currentValue = 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	801a      	strh	r2, [r3, #0]
	timer->targetValue = targetTime;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	897a      	ldrh	r2, [r7, #10]
 8004b04:	805a      	strh	r2, [r3, #2]
	timer->callback = callback;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
	timer->timerStatus = TIMER_STATUS_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	721a      	strb	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <runTimerAAA>:

uint8_t runTimerAAA(timer_T* timer){
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	if((timer->timerStatus == TIMER_STATUS_READY) || (timer->timerStatus == TIMER_STATUS_PAUSED)){
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7a1b      	ldrb	r3, [r3, #8]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d003      	beq.n	8004b38 <runTimerAAA+0x18>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7a1b      	ldrb	r3, [r3, #8]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d102      	bne.n	8004b3e <runTimerAAA+0x1e>
		timer->timerStatus = TIMER_STATUS_RUNNING;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	721a      	strb	r2, [r3, #8]
	}
}
 8004b3e:	bf00      	nop
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <pauseTimerAAA>:
uint8_t pauseTimerAAA(timer_T* timer){
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING){
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7a1b      	ldrb	r3, [r3, #8]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d102      	bne.n	8004b62 <pauseTimerAAA+0x16>
		timer->timerStatus = TIMER_STATUS_PAUSED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	721a      	strb	r2, [r3, #8]
	}
}
 8004b62:	bf00      	nop
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <resetTimerAAA>:
// stop and clear
uint8_t resetTimerAAA(timer_T* timer){
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	timer->currentValue = 0;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	801a      	strh	r2, [r3, #0]
	timer->timerStatus = TIMER_STATUS_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	721a      	strb	r2, [r3, #8]
}
 8004b84:	bf00      	nop
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <tickTimer>:

void tickTimer(timer_T* timer){
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING) timer->currentValue++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7a1b      	ldrb	r3, [r3, #8]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d105      	bne.n	8004bae <tickTimer+0x1c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	801a      	strh	r2, [r3, #0]
	if(timer->currentValue == timer->targetValue){
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	885b      	ldrh	r3, [r3, #2]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d102      	bne.n	8004bc0 <tickTimer+0x2e>
		timer->timerStatus = TIMER_STATUS_ELAPSED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	721a      	strb	r2, [r3, #8]
		// callback will be executed in the TMR interrupt!
//		timer->callback(NULL);
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <timerElapsedClbk>:
// check if elapsed and execute callback, TODO: var args in clbk
void timerElapsedClbk(timer_T* timer){
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_ELAPSED){
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7a1b      	ldrb	r3, [r3, #8]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d103      	bne.n	8004be4 <timerElapsedClbk+0x18>
		timer->callback(NULL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2000      	movs	r0, #0
 8004be2:	4798      	blx	r3
	}
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bf0:	480d      	ldr	r0, [pc, #52]	; (8004c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bf2:	490e      	ldr	r1, [pc, #56]	; (8004c2c <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 8004bf4:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf8:	e002      	b.n	8004c00 <LoopCopyDataInit>

08004bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bfe:	3304      	adds	r3, #4

08004c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c04:	d3f9      	bcc.n	8004bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c06:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c08:	4c0b      	ldr	r4, [pc, #44]	; (8004c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c0c:	e001      	b.n	8004c12 <LoopFillZerobss>

08004c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c10:	3204      	adds	r2, #4

08004c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c14:	d3fb      	bcc.n	8004c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c16:	f7ff f8a1 	bl	8003d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c1a:	f009 f917 	bl	800de4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c1e:	f7fe fb6f 	bl	8003300 <main>
  bx  lr    
 8004c22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004c24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c2c:	20000294 	.word	0x20000294
                                         ldr r2, =_sidata
 8004c30:	0801d780 	.word	0x0801d780
  ldr r2, =_sbss
 8004c34:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8004c38:	20005a74 	.word	0x20005a74

08004c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c3c:	e7fe      	b.n	8004c3c <ADC_IRQHandler>
	...

08004c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <HAL_Init+0x40>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_Init+0x40>)
 8004c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_Init+0x40>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <HAL_Init+0x40>)
 8004c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <HAL_Init+0x40>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <HAL_Init+0x40>)
 8004c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c68:	2003      	movs	r0, #3
 8004c6a:	f000 f94f 	bl	8004f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f000 f808 	bl	8004c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c74:	f7fe ff0a 	bl	8003a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023c00 	.word	0x40023c00

08004c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_InitTick+0x54>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_InitTick+0x58>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	4619      	mov	r1, r3
 8004c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f967 	bl	8004f76 <HAL_SYSTICK_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00e      	b.n	8004cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	d80a      	bhi.n	8004cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	f000 f92f 	bl	8004f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cc4:	4a06      	ldr	r2, [pc, #24]	; (8004ce0 <HAL_InitTick+0x5c>)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e000      	b.n	8004cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000060 	.word	0x20000060
 8004cdc:	200000c0 	.word	0x200000c0
 8004ce0:	200000bc 	.word	0x200000bc

08004ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_IncTick+0x20>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_IncTick+0x24>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_IncTick+0x24>)
 8004cf6:	6013      	str	r3, [r2, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	200000c0 	.word	0x200000c0
 8004d08:	20005a24 	.word	0x20005a24

08004d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_GetTick+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20005a24 	.word	0x20005a24

08004d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7ff ffee 	bl	8004d0c <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d005      	beq.n	8004d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_Delay+0x44>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d4a:	bf00      	nop
 8004d4c:	f7ff ffde 	bl	8004d0c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d8f7      	bhi.n	8004d4c <HAL_Delay+0x28>
  {
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200000c0 	.word	0x200000c0

08004d6c <__NVIC_SetPriorityGrouping>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d9e:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <__NVIC_SetPriorityGrouping+0x44>)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	60d3      	str	r3, [r2, #12]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <__NVIC_GetPriorityGrouping>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__NVIC_GetPriorityGrouping+0x18>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 0307 	and.w	r3, r3, #7
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_EnableIRQ>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db0b      	blt.n	8004dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4907      	ldr	r1, [pc, #28]	; (8004e08 <__NVIC_EnableIRQ+0x38>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2001      	movs	r0, #1
 8004df2:	fa00 f202 	lsl.w	r2, r0, r2
 8004df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000e100 	.word	0xe000e100

08004e0c <__NVIC_SetPriority>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <NVIC_EncodePriority>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f1c3 0307 	rsb	r3, r3, #7
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf28      	it	cs
 8004e7e:	2304      	movcs	r3, #4
 8004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d902      	bls.n	8004e90 <NVIC_EncodePriority+0x30>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b03      	subs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <NVIC_EncodePriority+0x32>
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	4313      	orrs	r3, r2
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <SysTick_Config>:
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d301      	bcc.n	8004ede <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004eda:	2301      	movs	r3, #1
 8004edc:	e00f      	b.n	8004efe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <SysTick_Config+0x40>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee6:	210f      	movs	r1, #15
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	f7ff ff8e 	bl	8004e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <SysTick_Config+0x40>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <SysTick_Config+0x40>)
 8004ef8:	2207      	movs	r2, #7
 8004efa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	e000e010 	.word	0xe000e010

08004f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff29 	bl	8004d6c <__NVIC_SetPriorityGrouping>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f34:	f7ff ff3e 	bl	8004db4 <__NVIC_GetPriorityGrouping>
 8004f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f7ff ff8e 	bl	8004e60 <NVIC_EncodePriority>
 8004f44:	4602      	mov	r2, r0
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff5d 	bl	8004e0c <__NVIC_SetPriority>
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff31 	bl	8004dd0 <__NVIC_EnableIRQ>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ffa2 	bl	8004ec8 <SysTick_Config>
 8004f84:	4603      	mov	r3, r0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_DMA_Start_IT+0x26>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e040      	b.n	8005036 <HAL_DMA_Start_IT+0xa8>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d12f      	bne.n	8005028 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f82e 	bl	800503e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	223f      	movs	r2, #63	; 0x3f
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0216 	orr.w	r2, r2, #22
 8004ffc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e005      	b.n	8005034 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005030:	2302      	movs	r3, #2
 8005032:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800505a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d108      	bne.n	800507e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800507c:	e007      	b.n	800508e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e177      	b.n	80053a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050b8:	2201      	movs	r2, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	f040 8166 	bne.w	80053a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d005      	beq.n	80050ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d130      	bne.n	8005150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005124:	2201      	movs	r2, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 0201 	and.w	r2, r3, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b03      	cmp	r3, #3
 800515a:	d017      	beq.n	800518c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	2203      	movs	r2, #3
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d123      	bne.n	80051e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	08da      	lsrs	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3208      	adds	r2, #8
 80051a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	220f      	movs	r2, #15
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	08da      	lsrs	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3208      	adds	r2, #8
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	2203      	movs	r2, #3
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0203 	and.w	r2, r3, #3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80c0 	beq.w	80053a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_GPIO_Init+0x324>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	4a65      	ldr	r2, [pc, #404]	; (80053c0 <HAL_GPIO_Init+0x324>)
 800522c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <HAL_GPIO_Init+0x324>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800523e:	4a61      	ldr	r2, [pc, #388]	; (80053c4 <HAL_GPIO_Init+0x328>)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	220f      	movs	r2, #15
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a58      	ldr	r2, [pc, #352]	; (80053c8 <HAL_GPIO_Init+0x32c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d037      	beq.n	80052da <HAL_GPIO_Init+0x23e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a57      	ldr	r2, [pc, #348]	; (80053cc <HAL_GPIO_Init+0x330>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_GPIO_Init+0x23a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a56      	ldr	r2, [pc, #344]	; (80053d0 <HAL_GPIO_Init+0x334>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d02b      	beq.n	80052d2 <HAL_GPIO_Init+0x236>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a55      	ldr	r2, [pc, #340]	; (80053d4 <HAL_GPIO_Init+0x338>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d025      	beq.n	80052ce <HAL_GPIO_Init+0x232>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a54      	ldr	r2, [pc, #336]	; (80053d8 <HAL_GPIO_Init+0x33c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <HAL_GPIO_Init+0x22e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a53      	ldr	r2, [pc, #332]	; (80053dc <HAL_GPIO_Init+0x340>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_Init+0x22a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a52      	ldr	r2, [pc, #328]	; (80053e0 <HAL_GPIO_Init+0x344>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_Init+0x226>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a51      	ldr	r2, [pc, #324]	; (80053e4 <HAL_GPIO_Init+0x348>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_Init+0x222>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a50      	ldr	r2, [pc, #320]	; (80053e8 <HAL_GPIO_Init+0x34c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_Init+0x21e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a4f      	ldr	r2, [pc, #316]	; (80053ec <HAL_GPIO_Init+0x350>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_Init+0x21a>
 80052b2:	2309      	movs	r3, #9
 80052b4:	e012      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052b6:	230a      	movs	r3, #10
 80052b8:	e010      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052ba:	2308      	movs	r3, #8
 80052bc:	e00e      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052be:	2307      	movs	r3, #7
 80052c0:	e00c      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052c2:	2306      	movs	r3, #6
 80052c4:	e00a      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052c6:	2305      	movs	r3, #5
 80052c8:	e008      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052ca:	2304      	movs	r3, #4
 80052cc:	e006      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052ce:	2303      	movs	r3, #3
 80052d0:	e004      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e002      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <HAL_GPIO_Init+0x240>
 80052da:	2300      	movs	r3, #0
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	f002 0203 	and.w	r2, r2, #3
 80052e2:	0092      	lsls	r2, r2, #2
 80052e4:	4093      	lsls	r3, r2
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ec:	4935      	ldr	r1, [pc, #212]	; (80053c4 <HAL_GPIO_Init+0x328>)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	089b      	lsrs	r3, r3, #2
 80052f2:	3302      	adds	r3, #2
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052fa:	4b3d      	ldr	r3, [pc, #244]	; (80053f0 <HAL_GPIO_Init+0x354>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800531e:	4a34      	ldr	r2, [pc, #208]	; (80053f0 <HAL_GPIO_Init+0x354>)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005324:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_GPIO_Init+0x354>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	43db      	mvns	r3, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4013      	ands	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005348:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <HAL_GPIO_Init+0x354>)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800534e:	4b28      	ldr	r3, [pc, #160]	; (80053f0 <HAL_GPIO_Init+0x354>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_GPIO_Init+0x354>)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_GPIO_Init+0x354>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <HAL_GPIO_Init+0x354>)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	f67f ae84 	bls.w	80050b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3724      	adds	r7, #36	; 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40013800 	.word	0x40013800
 80053c8:	40020000 	.word	0x40020000
 80053cc:	40020400 	.word	0x40020400
 80053d0:	40020800 	.word	0x40020800
 80053d4:	40020c00 	.word	0x40020c00
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40021400 	.word	0x40021400
 80053e0:	40021800 	.word	0x40021800
 80053e4:	40021c00 	.word	0x40021c00
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40022400 	.word	0x40022400
 80053f0:	40013c00 	.word	0x40013c00

080053f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	887b      	ldrh	r3, [r7, #2]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	e001      	b.n	8005416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	807b      	strh	r3, [r7, #2]
 8005430:	4613      	mov	r3, r2
 8005432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005434:	787b      	ldrb	r3, [r7, #1]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800543a:	887a      	ldrh	r2, [r7, #2]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005440:	e003      	b.n	800544a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005442:	887b      	ldrh	r3, [r7, #2]
 8005444:	041a      	lsls	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	619a      	str	r2, [r3, #24]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4013      	ands	r3, r2
 800546e:	041a      	lsls	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	43d9      	mvns	r1, r3
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	400b      	ands	r3, r1
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	619a      	str	r2, [r3, #24]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054a2:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f806 	bl	80054bc <HAL_GPIO_EXTI_Callback>
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40013c00 	.word	0x40013c00

080054bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e12b      	b.n	800573e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc feb0 	bl	8002260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2224      	movs	r2, #36	; 0x24
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005538:	f001 fc76 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 800553c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4a81      	ldr	r2, [pc, #516]	; (8005748 <HAL_I2C_Init+0x274>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d807      	bhi.n	8005558 <HAL_I2C_Init+0x84>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a80      	ldr	r2, [pc, #512]	; (800574c <HAL_I2C_Init+0x278>)
 800554c:	4293      	cmp	r3, r2
 800554e:	bf94      	ite	ls
 8005550:	2301      	movls	r3, #1
 8005552:	2300      	movhi	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e006      	b.n	8005566 <HAL_I2C_Init+0x92>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a7d      	ldr	r2, [pc, #500]	; (8005750 <HAL_I2C_Init+0x27c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	bf94      	ite	ls
 8005560:	2301      	movls	r3, #1
 8005562:	2300      	movhi	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e0e7      	b.n	800573e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a78      	ldr	r2, [pc, #480]	; (8005754 <HAL_I2C_Init+0x280>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	0c9b      	lsrs	r3, r3, #18
 8005578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <HAL_I2C_Init+0x274>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d802      	bhi.n	80055a8 <HAL_I2C_Init+0xd4>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3301      	adds	r3, #1
 80055a6:	e009      	b.n	80055bc <HAL_I2C_Init+0xe8>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	4a69      	ldr	r2, [pc, #420]	; (8005758 <HAL_I2C_Init+0x284>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	099b      	lsrs	r3, r3, #6
 80055ba:	3301      	adds	r3, #1
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	495c      	ldr	r1, [pc, #368]	; (8005748 <HAL_I2C_Init+0x274>)
 80055d8:	428b      	cmp	r3, r1
 80055da:	d819      	bhi.n	8005610 <HAL_I2C_Init+0x13c>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	1e59      	subs	r1, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055f0:	400b      	ands	r3, r1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_I2C_Init+0x138>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1e59      	subs	r1, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fbb1 f3f3 	udiv	r3, r1, r3
 8005604:	3301      	adds	r3, #1
 8005606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560a:	e051      	b.n	80056b0 <HAL_I2C_Init+0x1dc>
 800560c:	2304      	movs	r3, #4
 800560e:	e04f      	b.n	80056b0 <HAL_I2C_Init+0x1dc>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d111      	bne.n	800563c <HAL_I2C_Init+0x168>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1e58      	subs	r0, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	440b      	add	r3, r1
 8005626:	fbb0 f3f3 	udiv	r3, r0, r3
 800562a:	3301      	adds	r3, #1
 800562c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e012      	b.n	8005662 <HAL_I2C_Init+0x18e>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e58      	subs	r0, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	0099      	lsls	r1, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005652:	3301      	adds	r3, #1
 8005654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_Init+0x196>
 8005666:	2301      	movs	r3, #1
 8005668:	e022      	b.n	80056b0 <HAL_I2C_Init+0x1dc>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10e      	bne.n	8005690 <HAL_I2C_Init+0x1bc>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1e58      	subs	r0, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	440b      	add	r3, r1
 8005680:	fbb0 f3f3 	udiv	r3, r0, r3
 8005684:	3301      	adds	r3, #1
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568e:	e00f      	b.n	80056b0 <HAL_I2C_Init+0x1dc>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1e58      	subs	r0, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	0099      	lsls	r1, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a6:	3301      	adds	r3, #1
 80056a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	6809      	ldr	r1, [r1, #0]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6911      	ldr	r1, [r2, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	4311      	orrs	r1, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	000186a0 	.word	0x000186a0
 800574c:	001e847f 	.word	0x001e847f
 8005750:	003d08ff 	.word	0x003d08ff
 8005754:	431bde83 	.word	0x431bde83
 8005758:	10624dd3 	.word	0x10624dd3

0800575c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	4608      	mov	r0, r1
 8005766:	4611      	mov	r1, r2
 8005768:	461a      	mov	r2, r3
 800576a:	4603      	mov	r3, r0
 800576c:	817b      	strh	r3, [r7, #10]
 800576e:	460b      	mov	r3, r1
 8005770:	813b      	strh	r3, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005776:	f7ff fac9 	bl	8004d0c <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b20      	cmp	r3, #32
 8005786:	f040 80d9 	bne.w	800593c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2319      	movs	r3, #25
 8005790:	2201      	movs	r2, #1
 8005792:	496d      	ldr	r1, [pc, #436]	; (8005948 <HAL_I2C_Mem_Write+0x1ec>)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fc7f 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0cc      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Mem_Write+0x56>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0c5      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d007      	beq.n	80057d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2221      	movs	r2, #33	; 0x21
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a4d      	ldr	r2, [pc, #308]	; (800594c <HAL_I2C_Mem_Write+0x1f0>)
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800581a:	88f8      	ldrh	r0, [r7, #6]
 800581c:	893a      	ldrh	r2, [r7, #8]
 800581e:	8979      	ldrh	r1, [r7, #10]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	4603      	mov	r3, r0
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fab6 	bl	8005d9c <I2C_RequestMemoryWrite>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d052      	beq.n	80058dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e081      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fd00 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	2b04      	cmp	r3, #4
 8005850:	d107      	bne.n	8005862 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005860:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e06b      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d11b      	bne.n	80058dc <HAL_I2C_Mem_Write+0x180>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d017      	beq.n	80058dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1aa      	bne.n	800583a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fcec 	bl	80062c6 <I2C_WaitOnBTFFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00d      	beq.n	8005910 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d107      	bne.n	800590c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e016      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	00100002 	.word	0x00100002
 800594c:	ffff0000 	.word	0xffff0000

08005950 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08c      	sub	sp, #48	; 0x30
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	4608      	mov	r0, r1
 800595a:	4611      	mov	r1, r2
 800595c:	461a      	mov	r2, r3
 800595e:	4603      	mov	r3, r0
 8005960:	817b      	strh	r3, [r7, #10]
 8005962:	460b      	mov	r3, r1
 8005964:	813b      	strh	r3, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800596a:	f7ff f9cf 	bl	8004d0c <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b20      	cmp	r3, #32
 800597a:	f040 8208 	bne.w	8005d8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	2319      	movs	r3, #25
 8005984:	2201      	movs	r2, #1
 8005986:	497b      	ldr	r1, [pc, #492]	; (8005b74 <HAL_I2C_Mem_Read+0x224>)
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fb85 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
 8005996:	e1fb      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_I2C_Mem_Read+0x56>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e1f4      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d007      	beq.n	80059cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2222      	movs	r2, #34	; 0x22
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2240      	movs	r2, #64	; 0x40
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a5b      	ldr	r2, [pc, #364]	; (8005b78 <HAL_I2C_Mem_Read+0x228>)
 8005a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a0e:	88f8      	ldrh	r0, [r7, #6]
 8005a10:	893a      	ldrh	r2, [r7, #8]
 8005a12:	8979      	ldrh	r1, [r7, #10]
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fa52 	bl	8005ec8 <I2C_RequestMemoryRead>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e1b0      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d113      	bne.n	8005a5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e184      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d11b      	bne.n	8005a9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e164      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d11b      	bne.n	8005ade <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	e144      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005af4:	e138      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	f200 80f1 	bhi.w	8005ce2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d123      	bne.n	8005b50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fc1b 	bl	8006348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e139      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b4e:	e10b      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d14e      	bne.n	8005bf6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4906      	ldr	r1, [pc, #24]	; (8005b7c <HAL_I2C_Mem_Read+0x22c>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fa98 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e10e      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
 8005b72:	bf00      	nop
 8005b74:	00100002 	.word	0x00100002
 8005b78:	ffff0000 	.word	0xffff0000
 8005b7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bf4:	e0b8      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4966      	ldr	r1, [pc, #408]	; (8005d98 <HAL_I2C_Mem_Read+0x448>)
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fa49 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0bf      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2200      	movs	r2, #0
 8005c5a:	494f      	ldr	r1, [pc, #316]	; (8005d98 <HAL_I2C_Mem_Read+0x448>)
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fa1b 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e091      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ce0:	e042      	b.n	8005d68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fb2e 	bl	8006348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e04c      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d118      	bne.n	8005d68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f aec2 	bne.w	8005af6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3728      	adds	r7, #40	; 0x28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	00010004 	.word	0x00010004

08005d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f960 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d103      	bne.n	8005df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e05f      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	492d      	ldr	r1, [pc, #180]	; (8005ec4 <I2C_RequestMemoryWrite+0x128>)
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f998 	bl	8006146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e04c      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	6a39      	ldr	r1, [r7, #32]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa02 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00d      	beq.n	8005e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d107      	bne.n	8005e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e02b      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e68:	893b      	ldrh	r3, [r7, #8]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]
 8005e72:	e021      	b.n	8005eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	6a39      	ldr	r1, [r7, #32]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f9dc 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00d      	beq.n	8005eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d107      	bne.n	8005eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e005      	b.n	8005eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	00010002 	.word	0x00010002

08005ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f8c2 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f28:	d103      	bne.n	8005f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e0aa      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f36:	897b      	ldrh	r3, [r7, #10]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	4952      	ldr	r1, [pc, #328]	; (8006094 <I2C_RequestMemoryRead+0x1cc>)
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f8fa 	bl	8006146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e097      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f74:	6a39      	ldr	r1, [r7, #32]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f964 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d107      	bne.n	8005f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e076      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d105      	bne.n	8005fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa4:	893b      	ldrh	r3, [r7, #8]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	611a      	str	r2, [r3, #16]
 8005fae:	e021      	b.n	8005ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc0:	6a39      	ldr	r1, [r7, #32]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f93e 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d107      	bne.n	8005fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e050      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fea:	893b      	ldrh	r3, [r7, #8]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	6a39      	ldr	r1, [r7, #32]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f923 	bl	8006244 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b04      	cmp	r3, #4
 800600a:	d107      	bne.n	800601c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e035      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2200      	movs	r2, #0
 8006038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f82b 	bl	8006098 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d103      	bne.n	8006060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e013      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006064:	897b      	ldrh	r3, [r7, #10]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	4906      	ldr	r1, [pc, #24]	; (8006094 <I2C_RequestMemoryRead+0x1cc>)
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f863 	bl	8006146 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	00010002 	.word	0x00010002

08006098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060a8:	e025      	b.n	80060f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d021      	beq.n	80060f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fe fe2b 	bl	8004d0c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d116      	bne.n	80060f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e023      	b.n	800613e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10d      	bne.n	800611c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	43da      	mvns	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	e00c      	b.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	43da      	mvns	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	429a      	cmp	r2, r3
 800613a:	d0b6      	beq.n	80060aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006154:	e051      	b.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d123      	bne.n	80061ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006174:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800617e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0204 	orr.w	r2, r3, #4
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e046      	b.n	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d021      	beq.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fe fda9 	bl	8004d0c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d116      	bne.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e020      	b.n	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d10c      	bne.n	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	43da      	mvns	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e00b      	b.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	43da      	mvns	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d18d      	bne.n	8006156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006250:	e02d      	b.n	80062ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f8ce 	bl	80063f4 <I2C_IsAcknowledgeFailed>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e02d      	b.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d021      	beq.n	80062ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626a:	f7fe fd4f 	bl	8004d0c <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d116      	bne.n	80062ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e007      	b.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d1ca      	bne.n	8006252 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062d2:	e02d      	b.n	8006330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f88d 	bl	80063f4 <I2C_IsAcknowledgeFailed>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e02d      	b.n	8006340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d021      	beq.n	8006330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ec:	f7fe fd0e 	bl	8004d0c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d302      	bcc.n	8006302 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d116      	bne.n	8006330 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e007      	b.n	8006340 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d1ca      	bne.n	80062d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006354:	e042      	b.n	80063dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b10      	cmp	r3, #16
 8006362:	d119      	bne.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0210 	mvn.w	r2, #16
 800636c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e029      	b.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fe fcb8 	bl	8004d0c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d116      	bne.n	80063dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e007      	b.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d1b5      	bne.n	8006356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d11b      	bne.n	8006444 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006414:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	f043 0204 	orr.w	r2, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b20      	cmp	r3, #32
 8006466:	d129      	bne.n	80064bc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0210 	bic.w	r2, r2, #16
 800648e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d12a      	bne.n	800653a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	f023 030f 	bic.w	r3, r3, #15
 800650a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	4313      	orrs	r3, r2
 8006514:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	89fa      	ldrh	r2, [r7, #14]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e000      	b.n	800653c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
  }
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e267      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d075      	beq.n	8006652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006566:	4b88      	ldr	r3, [pc, #544]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00c      	beq.n	800658c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006572:	4b85      	ldr	r3, [pc, #532]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800657a:	2b08      	cmp	r3, #8
 800657c:	d112      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657e:	4b82      	ldr	r3, [pc, #520]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658a:	d10b      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	4b7e      	ldr	r3, [pc, #504]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05b      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d157      	bne.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e242      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d106      	bne.n	80065bc <HAL_RCC_OscConfig+0x74>
 80065ae:	4b76      	ldr	r3, [pc, #472]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a75      	ldr	r2, [pc, #468]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01d      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x98>
 80065c6:	4b70      	ldr	r3, [pc, #448]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6f      	ldr	r2, [pc, #444]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b6d      	ldr	r3, [pc, #436]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6c      	ldr	r2, [pc, #432]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065e0:	4b69      	ldr	r3, [pc, #420]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a68      	ldr	r2, [pc, #416]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b66      	ldr	r3, [pc, #408]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a65      	ldr	r2, [pc, #404]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fe fb84 	bl	8004d0c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006608:	f7fe fb80 	bl	8004d0c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e207      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b5b      	ldr	r3, [pc, #364]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0xc0>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fe fb70 	bl	8004d0c <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006630:	f7fe fb6c 	bl	8004d0c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	; 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e1f3      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006642:	4b51      	ldr	r3, [pc, #324]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d063      	beq.n	8006726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800665e:	4b4a      	ldr	r3, [pc, #296]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666a:	4b47      	ldr	r3, [pc, #284]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006672:	2b08      	cmp	r3, #8
 8006674:	d11c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006676:	4b44      	ldr	r3, [pc, #272]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006682:	4b41      	ldr	r3, [pc, #260]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e1c7      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669a:	4b3b      	ldr	r3, [pc, #236]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4937      	ldr	r1, [pc, #220]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ae:	e03a      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b8:	4b34      	ldr	r3, [pc, #208]	; (800678c <HAL_RCC_OscConfig+0x244>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fe fb25 	bl	8004d0c <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fe fb21 	bl	8004d0c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1a8      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d8:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	4b28      	ldr	r3, [pc, #160]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4925      	ldr	r1, [pc, #148]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	e015      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_RCC_OscConfig+0x244>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe fb04 	bl	8004d0c <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006708:	f7fe fb00 	bl	8004d0c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e187      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671a:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d036      	beq.n	80067a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <HAL_RCC_OscConfig+0x248>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fe fae4 	bl	8004d0c <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006748:	f7fe fae0 	bl	8004d0c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e167      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <HAL_RCC_OscConfig+0x240>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x200>
 8006766:	e01b      	b.n	80067a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b09      	ldr	r3, [pc, #36]	; (8006790 <HAL_RCC_OscConfig+0x248>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7fe facd 	bl	8004d0c <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006774:	e00e      	b.n	8006794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006776:	f7fe fac9 	bl	8004d0c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d907      	bls.n	8006794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e150      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
 8006788:	40023800 	.word	0x40023800
 800678c:	42470000 	.word	0x42470000
 8006790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006794:	4b88      	ldr	r3, [pc, #544]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ea      	bne.n	8006776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8097 	beq.w	80068dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b2:	4b81      	ldr	r3, [pc, #516]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	4b7d      	ldr	r3, [pc, #500]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4a7c      	ldr	r2, [pc, #496]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067cc:	6413      	str	r3, [r2, #64]	; 0x40
 80067ce:	4b7a      	ldr	r3, [pc, #488]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067de:	4b77      	ldr	r3, [pc, #476]	; (80069bc <HAL_RCC_OscConfig+0x474>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d118      	bne.n	800681c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ea:	4b74      	ldr	r3, [pc, #464]	; (80069bc <HAL_RCC_OscConfig+0x474>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a73      	ldr	r2, [pc, #460]	; (80069bc <HAL_RCC_OscConfig+0x474>)
 80067f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f6:	f7fe fa89 	bl	8004d0c <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fe:	f7fe fa85 	bl	8004d0c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e10c      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006810:	4b6a      	ldr	r3, [pc, #424]	; (80069bc <HAL_RCC_OscConfig+0x474>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d106      	bne.n	8006832 <HAL_RCC_OscConfig+0x2ea>
 8006824:	4b64      	ldr	r3, [pc, #400]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006828:	4a63      	ldr	r2, [pc, #396]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6713      	str	r3, [r2, #112]	; 0x70
 8006830:	e01c      	b.n	800686c <HAL_RCC_OscConfig+0x324>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b05      	cmp	r3, #5
 8006838:	d10c      	bne.n	8006854 <HAL_RCC_OscConfig+0x30c>
 800683a:	4b5f      	ldr	r3, [pc, #380]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683e:	4a5e      	ldr	r2, [pc, #376]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006840:	f043 0304 	orr.w	r3, r3, #4
 8006844:	6713      	str	r3, [r2, #112]	; 0x70
 8006846:	4b5c      	ldr	r3, [pc, #368]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	4a5b      	ldr	r2, [pc, #364]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6713      	str	r3, [r2, #112]	; 0x70
 8006852:	e00b      	b.n	800686c <HAL_RCC_OscConfig+0x324>
 8006854:	4b58      	ldr	r3, [pc, #352]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	4a57      	ldr	r2, [pc, #348]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	6713      	str	r3, [r2, #112]	; 0x70
 8006860:	4b55      	ldr	r3, [pc, #340]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	4a54      	ldr	r2, [pc, #336]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006866:	f023 0304 	bic.w	r3, r3, #4
 800686a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d015      	beq.n	80068a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fe fa4a 	bl	8004d0c <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687a:	e00a      	b.n	8006892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687c:	f7fe fa46 	bl	8004d0c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f241 3288 	movw	r2, #5000	; 0x1388
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e0cb      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006892:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ee      	beq.n	800687c <HAL_RCC_OscConfig+0x334>
 800689e:	e014      	b.n	80068ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a0:	f7fe fa34 	bl	8004d0c <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a6:	e00a      	b.n	80068be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fe fa30 	bl	8004d0c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e0b5      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068be:	4b3e      	ldr	r3, [pc, #248]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1ee      	bne.n	80068a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d105      	bne.n	80068dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d0:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80a1 	beq.w	8006a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e6:	4b34      	ldr	r3, [pc, #208]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d05c      	beq.n	80069ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d141      	bne.n	800697e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <HAL_RCC_OscConfig+0x478>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fe fa04 	bl	8004d0c <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006908:	f7fe fa00 	bl	8004d0c <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e087      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691a:	4b27      	ldr	r3, [pc, #156]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	3b01      	subs	r3, #1
 8006940:	041b      	lsls	r3, r3, #16
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	491b      	ldr	r1, [pc, #108]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 800694c:	4313      	orrs	r3, r2
 800694e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <HAL_RCC_OscConfig+0x478>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006956:	f7fe f9d9 	bl	8004d0c <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695e:	f7fe f9d5 	bl	8004d0c <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e05c      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006970:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x416>
 800697c:	e054      	b.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697e:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <HAL_RCC_OscConfig+0x478>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006984:	f7fe f9c2 	bl	8004d0c <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800698c:	f7fe f9be 	bl	8004d0c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e045      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_RCC_OscConfig+0x470>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f0      	bne.n	800698c <HAL_RCC_OscConfig+0x444>
 80069aa:	e03d      	b.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e038      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
 80069b8:	40023800 	.word	0x40023800
 80069bc:	40007000 	.word	0x40007000
 80069c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <HAL_RCC_OscConfig+0x4ec>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d028      	beq.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d121      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d11a      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d111      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d107      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40023800 	.word	0x40023800

08006a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0cc      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b68      	ldr	r3, [pc, #416]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d90c      	bls.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b65      	ldr	r3, [pc, #404]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0b8      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a8c:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4a58      	ldr	r2, [pc, #352]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa4:	4b53      	ldr	r3, [pc, #332]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a52      	ldr	r2, [pc, #328]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b50      	ldr	r3, [pc, #320]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	494d      	ldr	r1, [pc, #308]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d044      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad6:	4b47      	ldr	r3, [pc, #284]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d119      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e07f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d003      	beq.n	8006af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d107      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af6:	4b3f      	ldr	r3, [pc, #252]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b06:	4b3b      	ldr	r3, [pc, #236]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e067      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f023 0203 	bic.w	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4934      	ldr	r1, [pc, #208]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b28:	f7fe f8f0 	bl	8004d0c <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b30:	f7fe f8ec 	bl	8004d0c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e04f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	4b2b      	ldr	r3, [pc, #172]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 020c 	and.w	r2, r3, #12
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1eb      	bne.n	8006b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b58:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d20c      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e032      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4916      	ldr	r1, [pc, #88]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	490e      	ldr	r1, [pc, #56]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bbe:	f000 f821 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	490a      	ldr	r1, [pc, #40]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	5ccb      	ldrb	r3, [r1, r3]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_ClockConfig+0x1c8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f850 	bl	8004c84 <HAL_InitTick>

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023c00 	.word	0x40023c00
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	08013f0c 	.word	0x08013f0c
 8006bfc:	20000060 	.word	0x20000060
 8006c00:	200000bc 	.word	0x200000bc

08006c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c08:	b094      	sub	sp, #80	; 0x50
 8006c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c10:	2300      	movs	r3, #0
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c14:	2300      	movs	r3, #0
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c1c:	4b79      	ldr	r3, [pc, #484]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d00d      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x40>
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	f200 80e1 	bhi.w	8006df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_RCC_GetSysClockFreq+0x34>
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d003      	beq.n	8006c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c36:	e0db      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c38:	4b73      	ldr	r3, [pc, #460]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c3c:	e0db      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3e:	4b73      	ldr	r3, [pc, #460]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8006c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c42:	e0d8      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c4e:	4b6d      	ldr	r3, [pc, #436]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d063      	beq.n	8006d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	2200      	movs	r2, #0
 8006c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
 8006c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	f04f 0000 	mov.w	r0, #0
 8006c7e:	f04f 0100 	mov.w	r1, #0
 8006c82:	0159      	lsls	r1, r3, #5
 8006c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c88:	0150      	lsls	r0, r2, #5
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4621      	mov	r1, r4
 8006c90:	1a51      	subs	r1, r2, r1
 8006c92:	6139      	str	r1, [r7, #16]
 8006c94:	4629      	mov	r1, r5
 8006c96:	eb63 0301 	sbc.w	r3, r3, r1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	018b      	lsls	r3, r1, #6
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	018a      	lsls	r2, r1, #6
 8006cb6:	4651      	mov	r1, sl
 8006cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd6:	4690      	mov	r8, r2
 8006cd8:	4699      	mov	r9, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	eb18 0303 	adds.w	r3, r8, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	eb49 0303 	adc.w	r3, r9, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	024b      	lsls	r3, r1, #9
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d00:	4621      	mov	r1, r4
 8006d02:	024a      	lsls	r2, r1, #9
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d14:	f7f9 ffa8 	bl	8000c68 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	e058      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d22:	4b38      	ldr	r3, [pc, #224]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
 8006d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	f04f 0000 	mov.w	r0, #0
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	0159      	lsls	r1, r3, #5
 8006d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d4e:	0150      	lsls	r0, r2, #5
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4641      	mov	r1, r8
 8006d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d74:	ebb2 040a 	subs.w	r4, r2, sl
 8006d78:	eb63 050b 	sbc.w	r5, r3, fp
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	00eb      	lsls	r3, r5, #3
 8006d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d8a:	00e2      	lsls	r2, r4, #3
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	4643      	mov	r3, r8
 8006d92:	18e3      	adds	r3, r4, r3
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	464b      	mov	r3, r9
 8006d98:	eb45 0303 	adc.w	r3, r5, r3
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006daa:	4629      	mov	r1, r5
 8006dac:	028b      	lsls	r3, r1, #10
 8006dae:	4621      	mov	r1, r4
 8006db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db4:	4621      	mov	r1, r4
 8006db6:	028a      	lsls	r2, r1, #10
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	61fa      	str	r2, [r7, #28]
 8006dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc8:	f7f9 ff4e 	bl	8000c68 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	3301      	adds	r3, #1
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dee:	e002      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8006df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3750      	adds	r7, #80	; 0x50
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	007a1200 	.word	0x007a1200

08006e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000060 	.word	0x20000060

08006e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e2c:	f7ff fff0 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	0a9b      	lsrs	r3, r3, #10
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4903      	ldr	r1, [pc, #12]	; (8006e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	08013f1c 	.word	0x08013f1c

08006e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e54:	f7ff ffdc 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	0b5b      	lsrs	r3, r3, #13
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4903      	ldr	r1, [pc, #12]	; (8006e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40023800 	.word	0x40023800
 8006e74:	08013f1c 	.word	0x08013f1c

08006e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d075      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eac:	4b91      	ldr	r3, [pc, #580]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eb2:	f7fd ff2b 	bl	8004d0c <HAL_GetTick>
 8006eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006eba:	f7fd ff27 	bl	8004d0c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e189      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ecc:	4b8a      	ldr	r3, [pc, #552]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	019a      	lsls	r2, r3, #6
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	071b      	lsls	r3, r3, #28
 8006ef0:	4981      	ldr	r1, [pc, #516]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01f      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f04:	4b7c      	ldr	r3, [pc, #496]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	0f1b      	lsrs	r3, r3, #28
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	019a      	lsls	r2, r3, #6
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	071b      	lsls	r3, r3, #28
 8006f24:	4974      	ldr	r1, [pc, #464]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f2c:	4b72      	ldr	r3, [pc, #456]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f32:	f023 021f 	bic.w	r2, r3, #31
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	496e      	ldr	r1, [pc, #440]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	019a      	lsls	r2, r3, #6
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	061b      	lsls	r3, r3, #24
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	071b      	lsls	r3, r3, #28
 8006f64:	4964      	ldr	r1, [pc, #400]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f6c:	4b61      	ldr	r3, [pc, #388]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f72:	f7fd fecb 	bl	8004d0c <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f78:	e008      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f7a:	f7fd fec7 	bl	8004d0c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e129      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f8c:	4b5a      	ldr	r3, [pc, #360]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f0      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d079      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fb0:	4b52      	ldr	r3, [pc, #328]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fb6:	f7fd fea9 	bl	8004d0c <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fbe:	f7fd fea5 	bl	8004d0c <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e107      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fd0:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fdc:	d0ef      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d020      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006fea:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff0:	0f1b      	lsrs	r3, r3, #28
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	019a      	lsls	r2, r3, #6
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	061b      	lsls	r3, r3, #24
 8007004:	431a      	orrs	r2, r3
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	071b      	lsls	r3, r3, #28
 800700a:	493b      	ldr	r1, [pc, #236]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007012:	4b39      	ldr	r3, [pc, #228]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	3b01      	subs	r3, #1
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	4934      	ldr	r1, [pc, #208]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007038:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703e:	0e1b      	lsrs	r3, r3, #24
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	019a      	lsls	r2, r3, #6
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	071b      	lsls	r3, r3, #28
 8007058:	4927      	ldr	r1, [pc, #156]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007060:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	4922      	ldr	r1, [pc, #136]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800707c:	f7fd fe46 	bl	8004d0c <HAL_GetTick>
 8007080:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007084:	f7fd fe42 	bl	8004d0c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0a4      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800709e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a2:	d1ef      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 808b 	beq.w	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6413      	str	r3, [r2, #64]	; 0x40
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070da:	f7fd fe17 	bl	8004d0c <HAL_GetTick>
 80070de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070e0:	e010      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070e2:	f7fd fe13 	bl	8004d0c <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d909      	bls.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e075      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80070f4:	42470068 	.word	0x42470068
 80070f8:	40023800 	.word	0x40023800
 80070fc:	42470070 	.word	0x42470070
 8007100:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007104:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0e8      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007110:	4b36      	ldr	r3, [pc, #216]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007118:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02f      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d028      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007136:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007138:	4b2d      	ldr	r3, [pc, #180]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800713e:	4b2c      	ldr	r3, [pc, #176]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007144:	4a29      	ldr	r2, [pc, #164]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800714a:	4b28      	ldr	r3, [pc, #160]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d114      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007156:	f7fd fdd9 	bl	8004d0c <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800715c:	e00a      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800715e:	f7fd fdd5 	bl	8004d0c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e035      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ee      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800718c:	d10d      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800718e:	4b17      	ldr	r3, [pc, #92]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800719e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a2:	4912      	ldr	r1, [pc, #72]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	608b      	str	r3, [r1, #8]
 80071a8:	e005      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80071aa:	4b10      	ldr	r3, [pc, #64]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071b4:	6093      	str	r3, [r2, #8]
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c2:	490a      	ldr	r1, [pc, #40]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80071da:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40007000 	.word	0x40007000
 80071ec:	40023800 	.word	0x40023800
 80071f0:	42470e40 	.word	0x42470e40
 80071f4:	424711e0 	.word	0x424711e0

080071f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e066      	b.n	80072dc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7f5b      	ldrb	r3, [r3, #29]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fc fb04 	bl	800382c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	22ca      	movs	r2, #202	; 0xca
 8007230:	625a      	str	r2, [r3, #36]	; 0x24
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2253      	movs	r2, #83	; 0x53
 8007238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f927 	bl	800748e <RTC_EnterInitMode>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d12c      	bne.n	80072a4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6899      	ldr	r1, [r3, #8]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68d2      	ldr	r2, [r2, #12]
 8007284:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6919      	ldr	r1, [r3, #16]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	041a      	lsls	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f92e 	bl	80074fc <RTC_ExitInitMode>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d113      	bne.n	80072d2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	22ff      	movs	r2, #255	; 0xff
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007316:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800731a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007326:	b2da      	uxtb	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	0a1b      	lsrs	r3, r3, #8
 8007330:	b2db      	uxtb	r3, r3
 8007332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	0d9b      	lsrs	r3, r3, #22
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11a      	bne.n	8007396 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f8ee 	bl	8007546 <RTC_Bcd2ToByte>
 800736a:	4603      	mov	r3, r0
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f8e5 	bl	8007546 <RTC_Bcd2ToByte>
 800737c:	4603      	mov	r3, r0
 800737e:	461a      	mov	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	789b      	ldrb	r3, [r3, #2]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 f8dc 	bl	8007546 <RTC_Bcd2ToByte>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	0b5b      	lsrs	r3, r3, #13
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d11a      	bne.n	8007434 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	78db      	ldrb	r3, [r3, #3]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f89f 	bl	8007546 <RTC_Bcd2ToByte>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f896 	bl	8007546 <RTC_Bcd2ToByte>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	789b      	ldrb	r3, [r3, #2]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f88d 	bl	8007546 <RTC_Bcd2ToByte>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007458:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800745a:	f7fd fc57 	bl	8004d0c <HAL_GetTick>
 800745e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007460:	e009      	b.n	8007476 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007462:	f7fd fc53 	bl	8004d0c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007470:	d901      	bls.n	8007476 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e007      	b.n	8007486 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ee      	beq.n	8007462 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d122      	bne.n	80074f2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074bc:	f7fd fc26 	bl	8004d0c <HAL_GetTick>
 80074c0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80074c2:	e00c      	b.n	80074de <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074c4:	f7fd fc22 	bl	8004d0c <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074d2:	d904      	bls.n	80074de <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2204      	movs	r2, #4
 80074d8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d102      	bne.n	80074f2 <RTC_EnterInitMode+0x64>
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d1e8      	bne.n	80074c4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007516:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff ff89 	bl	800743e <HAL_RTC_WaitForSynchro>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	4603      	mov	r3, r0
 800754e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	b2db      	uxtb	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	0092      	lsls	r2, r2, #2
 800755e:	4413      	add	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	b2da      	uxtb	r2, r3
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	4413      	add	r3, r2
 8007570:	b2db      	uxtb	r3, r3
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e022      	b.n	80075d6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fc f98c 	bl	80038c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2203      	movs	r2, #3
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f815 	bl	80075e0 <HAL_SD_InitCard>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e00a      	b.n	80075d6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80075fc:	2376      	movs	r3, #118	; 0x76
 80075fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681d      	ldr	r5, [r3, #0]
 8007604:	466c      	mov	r4, sp
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800760e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007612:	f107 0308 	add.w	r3, r7, #8
 8007616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007618:	4628      	mov	r0, r5
 800761a:	f002 ff8b 	bl	800a534 <SDIO_Init>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e04f      	b.n	80076d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007630:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <HAL_SD_InitCard+0xf8>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f002 ffc3 	bl	800a5c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <HAL_SD_InitCard+0xf8>)
 8007642:	2201      	movs	r2, #1
 8007644:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007646:	2002      	movs	r0, #2
 8007648:	f7fd fb6c 	bl	8004d24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fe69 	bl	8008324 <SD_PowerON>
 8007652:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e02e      	b.n	80076d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fd88 	bl	8008188 <SD_InitCard>
 8007678:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e01b      	b.n	80076d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076a0:	4618      	mov	r0, r3
 80076a2:	f003 f822 	bl	800a6ea <SDMMC_CmdBlockLength>
 80076a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00f      	beq.n	80076ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <HAL_SD_InitCard+0xfc>)
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bdb0      	pop	{r4, r5, r7, pc}
 80076d8:	422580a0 	.word	0x422580a0
 80076dc:	004005ff 	.word	0x004005ff

080076e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b092      	sub	sp, #72	; 0x48
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80076ee:	f7fd fb0d 	bl	8004d0c <HAL_GetTick>
 80076f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d107      	bne.n	8007712 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e1bd      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	f040 81b0 	bne.w	8007a80 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	429a      	cmp	r2, r3
 8007732:	d907      	bls.n	8007744 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e1a4      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2203      	movs	r2, #3
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007758:	2b01      	cmp	r3, #1
 800775a:	d002      	beq.n	8007762 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	025b      	lsls	r3, r3, #9
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	025b      	lsls	r3, r3, #9
 800776c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800776e:	2390      	movs	r3, #144	; 0x90
 8007770:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007772:	2302      	movs	r3, #2
 8007774:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007776:	2300      	movs	r3, #0
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800777a:	2301      	movs	r3, #1
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f107 0214 	add.w	r2, r7, #20
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f002 ff82 	bl	800a692 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d90a      	bls.n	80077aa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2202      	movs	r2, #2
 8007798:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 ffe6 	bl	800a772 <SDMMC_CmdReadMultiBlock>
 80077a6:	6478      	str	r0, [r7, #68]	; 0x44
 80077a8:	e009      	b.n	80077be <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 ffb9 	bl	800a72e <SDMMC_CmdReadSingleBlock>
 80077bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80077be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d012      	beq.n	80077ea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a7a      	ldr	r2, [pc, #488]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d2:	431a      	orrs	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e151      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80077ee:	e061      	b.n	80078b4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d03c      	beq.n	8007878 <HAL_SD_ReadBlocks+0x198>
 80077fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d039      	beq.n	8007878 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007804:	2300      	movs	r3, #0
 8007806:	643b      	str	r3, [r7, #64]	; 0x40
 8007808:	e033      	b.n	8007872 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f002 febb 	bl	800a58a <SDIO_ReadFIFO>
 8007814:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	b2da      	uxtb	r2, r3
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	3301      	adds	r3, #1
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	3b01      	subs	r3, #1
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	0a1b      	lsrs	r3, r3, #8
 800782e:	b2da      	uxtb	r2, r3
 8007830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007832:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	3301      	adds	r3, #1
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	3b01      	subs	r3, #1
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2da      	uxtb	r2, r3
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	3301      	adds	r3, #1
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007852:	3b01      	subs	r3, #1
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	0e1b      	lsrs	r3, r3, #24
 800785a:	b2da      	uxtb	r2, r3
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	3301      	adds	r3, #1
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007868:	3b01      	subs	r3, #1
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800786c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786e:	3301      	adds	r3, #1
 8007870:	643b      	str	r3, [r7, #64]	; 0x40
 8007872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007874:	2b07      	cmp	r3, #7
 8007876:	d9c8      	bls.n	800780a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007878:	f7fd fa48 	bl	8004d0c <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007884:	429a      	cmp	r2, r3
 8007886:	d902      	bls.n	800788e <HAL_SD_ReadBlocks+0x1ae>
 8007888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788a:	2b00      	cmp	r3, #0
 800788c:	d112      	bne.n	80078b4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a48      	ldr	r2, [pc, #288]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0ec      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ba:	f240 332a 	movw	r3, #810	; 0x32a
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d095      	beq.n	80077f0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d022      	beq.n	8007918 <HAL_SD_ReadBlocks+0x238>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d91f      	bls.n	8007918 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d01b      	beq.n	8007918 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f002 ffab 	bl	800a840 <SDMMC_CmdStopTransfer>
 80078ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80078ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d012      	beq.n	8007918 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	431a      	orrs	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0ba      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d012      	beq.n	800794c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a22      	ldr	r2, [pc, #136]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f043 0208 	orr.w	r2, r3, #8
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0a0      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d012      	beq.n	8007980 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	f043 0202 	orr.w	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e086      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d063      	beq.n	8007a56 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <HAL_SD_ReadBlocks+0x2d4>)
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	f043 0220 	orr.w	r2, r3, #32
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e06c      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
 80079b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 fde4 	bl	800a58a <SDIO_ReadFIFO>
 80079c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ce:	3301      	adds	r3, #1
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	3b01      	subs	r3, #1
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	3301      	adds	r3, #1
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ea:	3b01      	subs	r3, #1
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	3301      	adds	r3, #1
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80079fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a00:	3b01      	subs	r3, #1
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	0e1b      	lsrs	r3, r3, #24
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	3301      	adds	r3, #1
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	3b01      	subs	r3, #1
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a1a:	f7fd f977 	bl	8004d0c <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d902      	bls.n	8007a30 <HAL_SD_ReadBlocks+0x350>
 8007a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d112      	bne.n	8007a56 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <HAL_SD_ReadBlocks+0x3b8>)
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e01b      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SD_ReadBlocks+0x38a>
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1a6      	bne.n	80079b8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e006      	b.n	8007a8e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3748      	adds	r7, #72	; 0x48
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	004005ff 	.word	0x004005ff

08007a9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b092      	sub	sp, #72	; 0x48
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007aaa:	f7fd f92f 	bl	8004d0c <HAL_GetTick>
 8007aae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d107      	bne.n	8007ace <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e166      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	f040 8159 	bne.w	8007d8e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d907      	bls.n	8007b00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e14d      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d002      	beq.n	8007b1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	025b      	lsls	r3, r3, #9
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	025b      	lsls	r3, r3, #9
 8007b28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007b2a:	2390      	movs	r3, #144	; 0x90
 8007b2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007b36:	2301      	movs	r3, #1
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f107 0218 	add.w	r2, r7, #24
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f002 fda4 	bl	800a692 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d90a      	bls.n	8007b66 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f002 fe4c 	bl	800a7fa <SDMMC_CmdWriteMultiBlock>
 8007b62:	6478      	str	r0, [r7, #68]	; 0x44
 8007b64:	e009      	b.n	8007b7a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2210      	movs	r2, #16
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b72:	4618      	mov	r0, r3
 8007b74:	f002 fe1f 	bl	800a7b6 <SDMMC_CmdWriteSingleBlock>
 8007b78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d012      	beq.n	8007ba6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a87      	ldr	r2, [pc, #540]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e0fa      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007baa:	e065      	b.n	8007c78 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d040      	beq.n	8007c3c <HAL_SD_WriteBlocks+0x1a0>
 8007bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d03d      	beq.n	8007c3c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc4:	e037      	b.n	8007c36 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	3301      	adds	r3, #1
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	021a      	lsls	r2, r3, #8
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be6:	3301      	adds	r3, #1
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	3b01      	subs	r3, #1
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	041a      	lsls	r2, r3, #16
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	3301      	adds	r3, #1
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	3b01      	subs	r3, #1
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	061a      	lsls	r2, r3, #24
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c16:	3301      	adds	r3, #1
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f107 0214 	add.w	r2, r7, #20
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f002 fcba 	bl	800a5a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c32:	3301      	adds	r3, #1
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
 8007c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	d9c4      	bls.n	8007bc6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007c3c:	f7fd f866 	bl	8004d0c <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d902      	bls.n	8007c52 <HAL_SD_WriteBlocks+0x1b6>
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d112      	bne.n	8007c78 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a53      	ldr	r2, [pc, #332]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c60:	431a      	orrs	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e091      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c7e:	f240 331a 	movw	r3, #794	; 0x31a
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d091      	beq.n	8007bac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d022      	beq.n	8007cdc <HAL_SD_WriteBlocks+0x240>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d91f      	bls.n	8007cdc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d01b      	beq.n	8007cdc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 fdc9 	bl	800a840 <SDMMC_CmdStopTransfer>
 8007cae:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d012      	beq.n	8007cdc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a3a      	ldr	r2, [pc, #232]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e05f      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d012      	beq.n	8007d10 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a2d      	ldr	r2, [pc, #180]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f043 0208 	orr.w	r2, r3, #8
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e045      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d012      	beq.n	8007d44 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a20      	ldr	r2, [pc, #128]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	f043 0202 	orr.w	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e02b      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <HAL_SD_WriteBlocks+0x308>)
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	f043 0210 	orr.w	r2, r3, #16
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e011      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e006      	b.n	8007d9c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
  }
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3748      	adds	r7, #72	; 0x48
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	004005ff 	.word	0x004005ff

08007da8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db6:	0f9b      	lsrs	r3, r3, #30
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc2:	0e9b      	lsrs	r3, r3, #26
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd4:	0e1b      	lsrs	r3, r3, #24
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e08:	0d1b      	lsrs	r3, r3, #20
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e26:	0bdb      	lsrs	r3, r3, #15
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e38:	0b9b      	lsrs	r3, r3, #14
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e4a:	0b5b      	lsrs	r3, r3, #13
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e5c:	0b1b      	lsrs	r3, r3, #12
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d163      	bne.n	8007f40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7c:	009a      	lsls	r2, r3, #2
 8007e7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e82:	4013      	ands	r3, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e88:	0f92      	lsrs	r2, r2, #30
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	0edb      	lsrs	r3, r3, #27
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea6:	0e1b      	lsrs	r3, r3, #24
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb8:	0d5b      	lsrs	r3, r3, #21
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eca:	0c9b      	lsrs	r3, r3, #18
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007edc:	0bdb      	lsrs	r3, r3, #15
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	7e1b      	ldrb	r3, [r3, #24]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	3302      	adds	r3, #2
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f0a:	fb03 f202 	mul.w	r2, r3, r2
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	7a1b      	ldrb	r3, [r3, #8]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f2c:	0a52      	lsrs	r2, r2, #9
 8007f2e:	fb03 f202 	mul.w	r2, r3, r2
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f3e:	e031      	b.n	8007fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d11d      	bne.n	8007f84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	3301      	adds	r3, #1
 8007f64:	029a      	lsls	r2, r3, #10
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	661a      	str	r2, [r3, #96]	; 0x60
 8007f82:	e00f      	b.n	8007fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a58      	ldr	r2, [pc, #352]	; (80080ec <HAL_SD_GetCardCSD+0x344>)
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09d      	b.n	80080e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa8:	0b9b      	lsrs	r3, r3, #14
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fba:	09db      	lsrs	r3, r3, #7
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	0fdb      	lsrs	r3, r3, #31
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	0f5b      	lsrs	r3, r3, #29
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	0e9b      	lsrs	r3, r3, #26
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	0d9b      	lsrs	r3, r3, #22
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	0d5b      	lsrs	r3, r3, #21
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	0c1b      	lsrs	r3, r3, #16
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	0bdb      	lsrs	r3, r3, #15
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008062:	0b9b      	lsrs	r3, r3, #14
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008076:	0b5b      	lsrs	r3, r3, #13
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	0b1b      	lsrs	r3, r3, #12
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	0a9b      	lsrs	r3, r3, #10
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	0a1b      	lsrs	r3, r3, #8
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	004005ff 	.word	0x004005ff

080080f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f970 	bl	8008440 <SD_SendStatus>
 8008160:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0a5b      	lsrs	r3, r3, #9
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800817e:	693b      	ldr	r3, [r7, #16]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008188:	b5b0      	push	{r4, r5, r7, lr}
 800818a:	b094      	sub	sp, #80	; 0x50
 800818c:	af04      	add	r7, sp, #16
 800818e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008190:	2301      	movs	r3, #1
 8008192:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f002 fa22 	bl	800a5e2 <SDIO_GetPowerState>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80081a8:	e0b8      	b.n	800831c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d02f      	beq.n	8008212 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f002 fc09 	bl	800a9ce <SDMMC_CmdSendCID>
 80081bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80081c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c6:	e0a9      	b.n	800831c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f002 fa4c 	bl	800a66c <SDIO_GetResponse>
 80081d4:	4602      	mov	r2, r0
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2104      	movs	r1, #4
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 fa43 	bl	800a66c <SDIO_GetResponse>
 80081e6:	4602      	mov	r2, r0
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2108      	movs	r1, #8
 80081f2:	4618      	mov	r0, r3
 80081f4:	f002 fa3a 	bl	800a66c <SDIO_GetResponse>
 80081f8:	4602      	mov	r2, r0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	210c      	movs	r1, #12
 8008204:	4618      	mov	r0, r3
 8008206:	f002 fa31 	bl	800a66c <SDIO_GetResponse>
 800820a:	4602      	mov	r2, r0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	2b03      	cmp	r3, #3
 8008218:	d00d      	beq.n	8008236 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f107 020e 	add.w	r2, r7, #14
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f002 fc0f 	bl	800aa48 <SDMMC_CmdSetRelAdd>
 800822a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <SD_InitCard+0xae>
    {
      return errorstate;
 8008232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008234:	e072      	b.n	800831c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	2b03      	cmp	r3, #3
 800823c:	d036      	beq.n	80082ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800823e:	89fb      	ldrh	r3, [r7, #14]
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f002 fbd9 	bl	800aa0a <SDMMC_CmdSendCSD>
 8008258:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008262:	e05b      	b.n	800831c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f002 f9fe 	bl	800a66c <SDIO_GetResponse>
 8008270:	4602      	mov	r2, r0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2104      	movs	r1, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f002 f9f5 	bl	800a66c <SDIO_GetResponse>
 8008282:	4602      	mov	r2, r0
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2108      	movs	r1, #8
 800828e:	4618      	mov	r0, r3
 8008290:	f002 f9ec 	bl	800a66c <SDIO_GetResponse>
 8008294:	4602      	mov	r2, r0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	210c      	movs	r1, #12
 80082a0:	4618      	mov	r0, r3
 80082a2:	f002 f9e3 	bl	800a66c <SDIO_GetResponse>
 80082a6:	4602      	mov	r2, r0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2104      	movs	r1, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f002 f9da 	bl	800a66c <SDIO_GetResponse>
 80082b8:	4603      	mov	r3, r0
 80082ba:	0d1a      	lsrs	r2, r3, #20
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fd6e 	bl	8007da8 <HAL_SD_GetCardCSD>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082d6:	e021      	b.n	800831c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e0:	041b      	lsls	r3, r3, #16
 80082e2:	2200      	movs	r2, #0
 80082e4:	461c      	mov	r4, r3
 80082e6:	4615      	mov	r5, r2
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	4608      	mov	r0, r1
 80082ee:	f002 fac9 	bl	800a884 <SDMMC_CmdSelDesel>
 80082f2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <SD_InitCard+0x176>
  {
    return errorstate;
 80082fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fc:	e00e      	b.n	800831c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681d      	ldr	r5, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	466c      	mov	r4, sp
 8008306:	f103 0210 	add.w	r2, r3, #16
 800830a:	ca07      	ldmia	r2, {r0, r1, r2}
 800830c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008310:	3304      	adds	r3, #4
 8008312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008314:	4628      	mov	r0, r5
 8008316:	f002 f90d 	bl	800a534 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3740      	adds	r7, #64	; 0x40
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}

08008324 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f002 fac4 	bl	800a8ca <SDMMC_CmdGoIdleState>
 8008342:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <SD_PowerON+0x2a>
  {
    return errorstate;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	e072      	b.n	8008434 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f002 fad7 	bl	800a906 <SDMMC_CmdOperCond>
 8008358:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f002 faad 	bl	800a8ca <SDMMC_CmdGoIdleState>
 8008370:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	e05b      	b.n	8008434 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008386:	2b01      	cmp	r3, #1
 8008388:	d137      	bne.n	80083fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f002 fad7 	bl	800a944 <SDMMC_CmdAppCommand>
 8008396:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d02d      	beq.n	80083fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800839e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083a2:	e047      	b.n	8008434 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f002 faca 	bl	800a944 <SDMMC_CmdAppCommand>
 80083b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <SD_PowerON+0x98>
    {
      return errorstate;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	e03b      	b.n	8008434 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	491e      	ldr	r1, [pc, #120]	; (800843c <SD_PowerON+0x118>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 fae0 	bl	800a988 <SDMMC_CmdAppOperCommand>
 80083c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083d4:	e02e      	b.n	8008434 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f002 f945 	bl	800a66c <SDIO_GetResponse>
 80083e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	0fdb      	lsrs	r3, r3, #31
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <SD_PowerON+0xcc>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <SD_PowerON+0xce>
 80083f0:	2300      	movs	r3, #0
 80083f2:	613b      	str	r3, [r7, #16]

    count++;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008400:	4293      	cmp	r3, r2
 8008402:	d802      	bhi.n	800840a <SD_PowerON+0xe6>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0cc      	beq.n	80083a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008410:	4293      	cmp	r3, r2
 8008412:	d902      	bls.n	800841a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008418:	e00c      	b.n	8008434 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
 800842a:	e002      	b.n	8008432 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	c1100000 	.word	0xc1100000

08008440 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008454:	e018      	b.n	8008488 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f002 fb11 	bl	800aa8a <SDMMC_CmdSendStatus>
 8008468:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	e009      	b.n	8008488 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f002 f8f6 	bl	800a66c <SDIO_GetResponse>
 8008480:	4602      	mov	r2, r0
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07b      	b.n	800859a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d108      	bne.n	80084bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084b2:	d009      	beq.n	80084c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	61da      	str	r2, [r3, #28]
 80084ba:	e005      	b.n	80084c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7fb fa8a 	bl	80039fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	ea42 0103 	orr.w	r1, r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	f003 0104 	and.w	r1, r3, #4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	f003 0210 	and.w	r2, r3, #16
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b088      	sub	sp, #32
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_SPI_Transmit+0x22>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e126      	b.n	8008812 <HAL_SPI_Transmit+0x270>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085cc:	f7fc fb9e 	bl	8004d0c <HAL_GetTick>
 80085d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d002      	beq.n	80085e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
 80085e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085e6:	e10b      	b.n	8008800 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <HAL_SPI_Transmit+0x52>
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085f8:	e102      	b.n	8008800 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2203      	movs	r2, #3
 80085fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	88fa      	ldrh	r2, [r7, #6]
 8008612:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	88fa      	ldrh	r2, [r7, #6]
 8008618:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008640:	d10f      	bne.n	8008662 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008660:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d007      	beq.n	8008680 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008688:	d14b      	bne.n	8008722 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_SPI_Transmit+0xf6>
 8008692:	8afb      	ldrh	r3, [r7, #22]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d13e      	bne.n	8008716 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	881a      	ldrh	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	1c9a      	adds	r2, r3, #2
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086bc:	e02b      	b.n	8008716 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d112      	bne.n	80086f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	881a      	ldrh	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	1c9a      	adds	r2, r3, #2
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80086f0:	e011      	b.n	8008716 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086f2:	f7fc fb0b 	bl	8004d0c <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d803      	bhi.n	800870a <HAL_SPI_Transmit+0x168>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d102      	bne.n	8008710 <HAL_SPI_Transmit+0x16e>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008714:	e074      	b.n	8008800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ce      	bne.n	80086be <HAL_SPI_Transmit+0x11c>
 8008720:	e04c      	b.n	80087bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HAL_SPI_Transmit+0x18e>
 800872a:	8afb      	ldrh	r3, [r7, #22]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d140      	bne.n	80087b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008756:	e02c      	b.n	80087b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d113      	bne.n	800878e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	86da      	strh	r2, [r3, #54]	; 0x36
 800878c:	e011      	b.n	80087b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800878e:	f7fc fabd 	bl	8004d0c <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d803      	bhi.n	80087a6 <HAL_SPI_Transmit+0x204>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d102      	bne.n	80087ac <HAL_SPI_Transmit+0x20a>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087b0:	e026      	b.n	8008800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1cd      	bne.n	8008758 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f8b3 	bl	800892c <SPI_EndRxTxTransaction>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087da:	2300      	movs	r3, #0
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	613b      	str	r3, [r7, #16]
 80087ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	77fb      	strb	r3, [r7, #31]
 80087fc:	e000      	b.n	8008800 <HAL_SPI_Transmit+0x25e>
  }

error:
 80087fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008810:	7ffb      	ldrb	r3, [r7, #31]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800882c:	f7fc fa6e 	bl	8004d0c <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4413      	add	r3, r2
 800883a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800883c:	f7fc fa66 	bl	8004d0c <HAL_GetTick>
 8008840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008842:	4b39      	ldr	r3, [pc, #228]	; (8008928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	015b      	lsls	r3, r3, #5
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	fb02 f303 	mul.w	r3, r2, r3
 8008850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008852:	e054      	b.n	80088fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d050      	beq.n	80088fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800885c:	f7fc fa56 	bl	8004d0c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	429a      	cmp	r2, r3
 800886a:	d902      	bls.n	8008872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d13d      	bne.n	80088ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800888a:	d111      	bne.n	80088b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008894:	d004      	beq.n	80088a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800889e:	d107      	bne.n	80088b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b8:	d10f      	bne.n	80088da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e017      	b.n	800891e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4013      	ands	r3, r2
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	429a      	cmp	r2, r3
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d19b      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3720      	adds	r7, #32
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000060 	.word	0x20000060

0800892c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008938:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <SPI_EndRxTxTransaction+0x7c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1b      	ldr	r2, [pc, #108]	; (80089ac <SPI_EndRxTxTransaction+0x80>)
 800893e:	fba2 2303 	umull	r2, r3, r2, r3
 8008942:	0d5b      	lsrs	r3, r3, #21
 8008944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008948:	fb02 f303 	mul.w	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008956:	d112      	bne.n	800897e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	2180      	movs	r1, #128	; 0x80
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff ff5a 	bl	800881c <SPI_WaitFlagStateUntilTimeout>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d016      	beq.n	800899c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	f043 0220 	orr.w	r2, r3, #32
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e00f      	b.n	800899e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	3b01      	subs	r3, #1
 8008988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	d0f2      	beq.n	800897e <SPI_EndRxTxTransaction+0x52>
 8008998:	e000      	b.n	800899c <SPI_EndRxTxTransaction+0x70>
        break;
 800899a:	bf00      	nop
  }

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000060 	.word	0x20000060
 80089ac:	165e9f81 	.word	0x165e9f81

080089b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e041      	b.n	8008a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fb fb2e 	bl	8004038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f000 fc7a 	bl	80092e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d001      	beq.n	8008a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e04e      	b.n	8008b06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0201 	orr.w	r2, r2, #1
 8008a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a23      	ldr	r2, [pc, #140]	; (8008b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d022      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a92:	d01d      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a1f      	ldr	r2, [pc, #124]	; (8008b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d018      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a1e      	ldr	r2, [pc, #120]	; (8008b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d013      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1c      	ldr	r2, [pc, #112]	; (8008b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00e      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a1b      	ldr	r2, [pc, #108]	; (8008b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a19      	ldr	r2, [pc, #100]	; (8008b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x80>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d111      	bne.n	8008af4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b06      	cmp	r3, #6
 8008ae0:	d010      	beq.n	8008b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0201 	orr.w	r2, r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af2:	e007      	b.n	8008b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40000400 	.word	0x40000400
 8008b1c:	40000800 	.word	0x40000800
 8008b20:	40000c00 	.word	0x40000c00
 8008b24:	40010400 	.word	0x40010400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	40001800 	.word	0x40001800

08008b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e041      	b.n	8008bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f839 	bl	8008bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f000 fbba 	bl	80092e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
	...

08008be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <HAL_TIM_PWM_Start+0x24>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	bf14      	ite	ne
 8008c00:	2301      	movne	r3, #1
 8008c02:	2300      	moveq	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	e022      	b.n	8008c4e <HAL_TIM_PWM_Start+0x6a>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d109      	bne.n	8008c22 <HAL_TIM_PWM_Start+0x3e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	bf14      	ite	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	2300      	moveq	r3, #0
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	e015      	b.n	8008c4e <HAL_TIM_PWM_Start+0x6a>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d109      	bne.n	8008c3c <HAL_TIM_PWM_Start+0x58>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	bf14      	ite	ne
 8008c34:	2301      	movne	r3, #1
 8008c36:	2300      	moveq	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	e008      	b.n	8008c4e <HAL_TIM_PWM_Start+0x6a>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	bf14      	ite	ne
 8008c48:	2301      	movne	r3, #1
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e07c      	b.n	8008d50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <HAL_TIM_PWM_Start+0x82>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c64:	e013      	b.n	8008c8e <HAL_TIM_PWM_Start+0xaa>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d104      	bne.n	8008c76 <HAL_TIM_PWM_Start+0x92>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c74:	e00b      	b.n	8008c8e <HAL_TIM_PWM_Start+0xaa>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_Start+0xa2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c84:	e003      	b.n	8008c8e <HAL_TIM_PWM_Start+0xaa>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2201      	movs	r2, #1
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fe10 	bl	80098bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a2d      	ldr	r2, [pc, #180]	; (8008d58 <HAL_TIM_PWM_Start+0x174>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <HAL_TIM_PWM_Start+0xcc>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <HAL_TIM_PWM_Start+0x178>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d101      	bne.n	8008cb4 <HAL_TIM_PWM_Start+0xd0>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <HAL_TIM_PWM_Start+0xd2>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a22      	ldr	r2, [pc, #136]	; (8008d58 <HAL_TIM_PWM_Start+0x174>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d022      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d01d      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <HAL_TIM_PWM_Start+0x17c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d018      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1d      	ldr	r2, [pc, #116]	; (8008d64 <HAL_TIM_PWM_Start+0x180>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <HAL_TIM_PWM_Start+0x184>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00e      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a16      	ldr	r2, [pc, #88]	; (8008d5c <HAL_TIM_PWM_Start+0x178>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a18      	ldr	r2, [pc, #96]	; (8008d6c <HAL_TIM_PWM_Start+0x188>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x136>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <HAL_TIM_PWM_Start+0x18c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d111      	bne.n	8008d3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b06      	cmp	r3, #6
 8008d2a:	d010      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3c:	e007      	b.n	8008d4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0201 	orr.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40001800 	.word	0x40001800

08008d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d122      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d11b      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0202 	mvn.w	r2, #2
 8008da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa77 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 8008dbc:	e005      	b.n	8008dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa69 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa7a 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d122      	bne.n	8008e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d11b      	bne.n	8008e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0204 	mvn.w	r2, #4
 8008df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa4d 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa3f 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa50 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0208 	mvn.w	r2, #8
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa23 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa15 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa26 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b10      	cmp	r3, #16
 8008e84:	d122      	bne.n	8008ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0310 	and.w	r3, r3, #16
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d11b      	bne.n	8008ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0210 	mvn.w	r2, #16
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f9f9 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9eb 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f9fc 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d10e      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d107      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f06f 0201 	mvn.w	r2, #1
 8008ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fa fb7a 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f02:	2b80      	cmp	r3, #128	; 0x80
 8008f04:	d10e      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f10:	2b80      	cmp	r3, #128	; 0x80
 8008f12:	d107      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fdca 	bl	8009ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d10e      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9c1 	bl	80092d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d10e      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d107      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f06f 0220 	mvn.w	r2, #32
 8008f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fd94 	bl	8009aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d101      	bne.n	8008fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e0ae      	b.n	8009100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b0c      	cmp	r3, #12
 8008fae:	f200 809f 	bhi.w	80090f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008fb2:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fed 	.word	0x08008fed
 8008fbc:	080090f1 	.word	0x080090f1
 8008fc0:	080090f1 	.word	0x080090f1
 8008fc4:	080090f1 	.word	0x080090f1
 8008fc8:	0800902d 	.word	0x0800902d
 8008fcc:	080090f1 	.word	0x080090f1
 8008fd0:	080090f1 	.word	0x080090f1
 8008fd4:	080090f1 	.word	0x080090f1
 8008fd8:	0800906f 	.word	0x0800906f
 8008fdc:	080090f1 	.word	0x080090f1
 8008fe0:	080090f1 	.word	0x080090f1
 8008fe4:	080090f1 	.word	0x080090f1
 8008fe8:	080090af 	.word	0x080090af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fa18 	bl	8009428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0208 	orr.w	r2, r2, #8
 8009006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0204 	bic.w	r2, r2, #4
 8009016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6999      	ldr	r1, [r3, #24]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	691a      	ldr	r2, [r3, #16]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	619a      	str	r2, [r3, #24]
      break;
 800902a:	e064      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fa68 	bl	8009508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6999      	ldr	r1, [r3, #24]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	021a      	lsls	r2, r3, #8
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	619a      	str	r2, [r3, #24]
      break;
 800906c:	e043      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fabd 	bl	80095f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69da      	ldr	r2, [r3, #28]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0208 	orr.w	r2, r2, #8
 8009088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0204 	bic.w	r2, r2, #4
 8009098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69d9      	ldr	r1, [r3, #28]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	61da      	str	r2, [r3, #28]
      break;
 80090ac:	e023      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fb11 	bl	80096dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69da      	ldr	r2, [r3, #28]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69da      	ldr	r2, [r3, #28]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69d9      	ldr	r1, [r3, #28]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	021a      	lsls	r2, r3, #8
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	61da      	str	r2, [r3, #28]
      break;
 80090ee:	e002      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	75fb      	strb	r3, [r7, #23]
      break;
 80090f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_TIM_ConfigClockSource+0x1c>
 8009120:	2302      	movs	r3, #2
 8009122:	e0b4      	b.n	800928e <HAL_TIM_ConfigClockSource+0x186>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800914a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915c:	d03e      	beq.n	80091dc <HAL_TIM_ConfigClockSource+0xd4>
 800915e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009162:	f200 8087 	bhi.w	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 8009166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916a:	f000 8086 	beq.w	800927a <HAL_TIM_ConfigClockSource+0x172>
 800916e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009172:	d87f      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 8009174:	2b70      	cmp	r3, #112	; 0x70
 8009176:	d01a      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0xa6>
 8009178:	2b70      	cmp	r3, #112	; 0x70
 800917a:	d87b      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 800917c:	2b60      	cmp	r3, #96	; 0x60
 800917e:	d050      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x11a>
 8009180:	2b60      	cmp	r3, #96	; 0x60
 8009182:	d877      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 8009184:	2b50      	cmp	r3, #80	; 0x50
 8009186:	d03c      	beq.n	8009202 <HAL_TIM_ConfigClockSource+0xfa>
 8009188:	2b50      	cmp	r3, #80	; 0x50
 800918a:	d873      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 800918c:	2b40      	cmp	r3, #64	; 0x40
 800918e:	d058      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0x13a>
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d86f      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 8009194:	2b30      	cmp	r3, #48	; 0x30
 8009196:	d064      	beq.n	8009262 <HAL_TIM_ConfigClockSource+0x15a>
 8009198:	2b30      	cmp	r3, #48	; 0x30
 800919a:	d86b      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 800919c:	2b20      	cmp	r3, #32
 800919e:	d060      	beq.n	8009262 <HAL_TIM_ConfigClockSource+0x15a>
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d867      	bhi.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d05c      	beq.n	8009262 <HAL_TIM_ConfigClockSource+0x15a>
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d05a      	beq.n	8009262 <HAL_TIM_ConfigClockSource+0x15a>
 80091ac:	e062      	b.n	8009274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6899      	ldr	r1, [r3, #8]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	f000 fb5d 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	609a      	str	r2, [r3, #8]
      break;
 80091da:	e04f      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	6899      	ldr	r1, [r3, #8]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f000 fb46 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091fe:	609a      	str	r2, [r3, #8]
      break;
 8009200:	e03c      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6859      	ldr	r1, [r3, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	461a      	mov	r2, r3
 8009210:	f000 faba 	bl	8009788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2150      	movs	r1, #80	; 0x50
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb13 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009220:	e02c      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6859      	ldr	r1, [r3, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	461a      	mov	r2, r3
 8009230:	f000 fad9 	bl	80097e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2160      	movs	r1, #96	; 0x60
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fb03 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009240:	e01c      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6859      	ldr	r1, [r3, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	461a      	mov	r2, r3
 8009250:	f000 fa9a 	bl	8009788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2140      	movs	r1, #64	; 0x40
 800925a:	4618      	mov	r0, r3
 800925c:	f000 faf3 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009260:	e00c      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f000 faea 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009272:	e003      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	e000      	b.n	800927c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800927a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a40      	ldr	r2, [pc, #256]	; (80093fc <TIM_Base_SetConfig+0x114>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d013      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009306:	d00f      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3d      	ldr	r2, [pc, #244]	; (8009400 <TIM_Base_SetConfig+0x118>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00b      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a3c      	ldr	r2, [pc, #240]	; (8009404 <TIM_Base_SetConfig+0x11c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d007      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a3b      	ldr	r2, [pc, #236]	; (8009408 <TIM_Base_SetConfig+0x120>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a3a      	ldr	r2, [pc, #232]	; (800940c <TIM_Base_SetConfig+0x124>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d108      	bne.n	800933a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a2f      	ldr	r2, [pc, #188]	; (80093fc <TIM_Base_SetConfig+0x114>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d02b      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009348:	d027      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a2c      	ldr	r2, [pc, #176]	; (8009400 <TIM_Base_SetConfig+0x118>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d023      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a2b      	ldr	r2, [pc, #172]	; (8009404 <TIM_Base_SetConfig+0x11c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d01f      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a2a      	ldr	r2, [pc, #168]	; (8009408 <TIM_Base_SetConfig+0x120>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d01b      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a29      	ldr	r2, [pc, #164]	; (800940c <TIM_Base_SetConfig+0x124>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d017      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a28      	ldr	r2, [pc, #160]	; (8009410 <TIM_Base_SetConfig+0x128>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d013      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a27      	ldr	r2, [pc, #156]	; (8009414 <TIM_Base_SetConfig+0x12c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00f      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a26      	ldr	r2, [pc, #152]	; (8009418 <TIM_Base_SetConfig+0x130>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00b      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a25      	ldr	r2, [pc, #148]	; (800941c <TIM_Base_SetConfig+0x134>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d007      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a24      	ldr	r2, [pc, #144]	; (8009420 <TIM_Base_SetConfig+0x138>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d003      	beq.n	800939a <TIM_Base_SetConfig+0xb2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a23      	ldr	r2, [pc, #140]	; (8009424 <TIM_Base_SetConfig+0x13c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d108      	bne.n	80093ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <TIM_Base_SetConfig+0x114>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_Base_SetConfig+0xf8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a0c      	ldr	r2, [pc, #48]	; (800940c <TIM_Base_SetConfig+0x124>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d103      	bne.n	80093e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	615a      	str	r2, [r3, #20]
}
 80093ee:	bf00      	nop
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	40010000 	.word	0x40010000
 8009400:	40000400 	.word	0x40000400
 8009404:	40000800 	.word	0x40000800
 8009408:	40000c00 	.word	0x40000c00
 800940c:	40010400 	.word	0x40010400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800
 800941c:	40001800 	.word	0x40001800
 8009420:	40001c00 	.word	0x40001c00
 8009424:	40002000 	.word	0x40002000

08009428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f023 0201 	bic.w	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 0302 	bic.w	r3, r3, #2
 8009470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a20      	ldr	r2, [pc, #128]	; (8009500 <TIM_OC1_SetConfig+0xd8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d003      	beq.n	800948c <TIM_OC1_SetConfig+0x64>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <TIM_OC1_SetConfig+0xdc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d10c      	bne.n	80094a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0308 	bic.w	r3, r3, #8
 8009492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f023 0304 	bic.w	r3, r3, #4
 80094a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a15      	ldr	r2, [pc, #84]	; (8009500 <TIM_OC1_SetConfig+0xd8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <TIM_OC1_SetConfig+0x8e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a14      	ldr	r2, [pc, #80]	; (8009504 <TIM_OC1_SetConfig+0xdc>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d111      	bne.n	80094da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40010000 	.word	0x40010000
 8009504:	40010400 	.word	0x40010400

08009508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f023 0210 	bic.w	r2, r3, #16
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800953e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f023 0320 	bic.w	r3, r3, #32
 8009552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a22      	ldr	r2, [pc, #136]	; (80095ec <TIM_OC2_SetConfig+0xe4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_OC2_SetConfig+0x68>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a21      	ldr	r2, [pc, #132]	; (80095f0 <TIM_OC2_SetConfig+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d10d      	bne.n	800958c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800958a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a17      	ldr	r2, [pc, #92]	; (80095ec <TIM_OC2_SetConfig+0xe4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d003      	beq.n	800959c <TIM_OC2_SetConfig+0x94>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a16      	ldr	r2, [pc, #88]	; (80095f0 <TIM_OC2_SetConfig+0xe8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d113      	bne.n	80095c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	621a      	str	r2, [r3, #32]
}
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40010400 	.word	0x40010400

080095f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800963c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a21      	ldr	r2, [pc, #132]	; (80096d4 <TIM_OC3_SetConfig+0xe0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_OC3_SetConfig+0x66>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a20      	ldr	r2, [pc, #128]	; (80096d8 <TIM_OC3_SetConfig+0xe4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10d      	bne.n	8009676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a16      	ldr	r2, [pc, #88]	; (80096d4 <TIM_OC3_SetConfig+0xe0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d003      	beq.n	8009686 <TIM_OC3_SetConfig+0x92>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <TIM_OC3_SetConfig+0xe4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d113      	bne.n	80096ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800968c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	031b      	lsls	r3, r3, #12
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a12      	ldr	r2, [pc, #72]	; (8009780 <TIM_OC4_SetConfig+0xa4>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_OC4_SetConfig+0x68>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a11      	ldr	r2, [pc, #68]	; (8009784 <TIM_OC4_SetConfig+0xa8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d109      	bne.n	8009758 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800974a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	019b      	lsls	r3, r3, #6
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	621a      	str	r2, [r3, #32]
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40010000 	.word	0x40010000
 8009784:	40010400 	.word	0x40010400

08009788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 030a 	bic.w	r3, r3, #10
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b087      	sub	sp, #28
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f023 0210 	bic.w	r2, r3, #16
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4313      	orrs	r3, r2
 8009864:	f043 0307 	orr.w	r3, r3, #7
 8009868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	609a      	str	r2, [r3, #8]
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	021a      	lsls	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	609a      	str	r2, [r3, #8]
}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	2201      	movs	r2, #1
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	43db      	mvns	r3, r3
 80098de:	401a      	ands	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a1a      	ldr	r2, [r3, #32]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f003 031f 	and.w	r3, r3, #31
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	431a      	orrs	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e05a      	b.n	80099d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a21      	ldr	r2, [pc, #132]	; (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d022      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996c:	d01d      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1d      	ldr	r2, [pc, #116]	; (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d018      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1b      	ldr	r2, [pc, #108]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a1a      	ldr	r2, [pc, #104]	; (80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d00e      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a18      	ldr	r2, [pc, #96]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d009      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d004      	beq.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a15      	ldr	r2, [pc, #84]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d10c      	bne.n	80099c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	40010000 	.word	0x40010000
 80099e8:	40000400 	.word	0x40000400
 80099ec:	40000800 	.word	0x40000800
 80099f0:	40000c00 	.word	0x40000c00
 80099f4:	40010400 	.word	0x40010400
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40001800 	.word	0x40001800

08009a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e03d      	b.n	8009a98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e03f      	b.n	8009b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fa fbf8 	bl	80042e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2224      	movs	r2, #36	; 0x24
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa9b 	bl	800a04c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	695a      	ldr	r2, [r3, #20]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	4613      	mov	r3, r2
 8009b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d11d      	bne.n	8009bbc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <HAL_UART_Receive_DMA+0x26>
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e016      	b.n	8009bbe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Receive_DMA+0x38>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e00f      	b.n	8009bbe <HAL_UART_Receive_DMA+0x58>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f920 	bl	8009df8 <UART_Start_Receive_DMA>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	e000      	b.n	8009bbe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009bbc:	2302      	movs	r3, #2
  }
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009bce:	bf00      	nop
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b083      	sub	sp, #12
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009be2:	bf00      	nop
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b09c      	sub	sp, #112	; 0x70
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d172      	bne.n	8009d08 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c24:	2200      	movs	r2, #0
 8009c26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c48:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c4a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3314      	adds	r3, #20
 8009c62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	667b      	str	r3, [r7, #100]	; 0x64
 8009c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c7c:	647a      	str	r2, [r7, #68]	; 0x44
 8009c7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e5      	bne.n	8009c5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3314      	adds	r3, #20
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3314      	adds	r3, #20
 8009cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cb0:	633a      	str	r2, [r7, #48]	; 0x30
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e5      	bne.n	8009c90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d119      	bne.n	8009d08 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	330c      	adds	r3, #12
 8009cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	e853 3f00 	ldrex	r3, [r3]
 8009ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0310 	bic.w	r3, r3, #16
 8009cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	330c      	adds	r3, #12
 8009cf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cf4:	61fa      	str	r2, [r7, #28]
 8009cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	69b9      	ldr	r1, [r7, #24]
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	e841 2300 	strex	r3, r2, [r1]
 8009d00:	617b      	str	r3, [r7, #20]
   return(result);
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e5      	bne.n	8009cd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d106      	bne.n	8009d1e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d14:	4619      	mov	r1, r3
 8009d16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d18:	f7ff ff69 	bl	8009bee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d1c:	e002      	b.n	8009d24 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009d1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009d20:	f7f9 fd30 	bl	8003784 <HAL_UART_RxCpltCallback>
}
 8009d24:	bf00      	nop
 8009d26:	3770      	adds	r7, #112	; 0x70
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d108      	bne.n	8009d54 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff ff4e 	bl	8009bee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d52:	e002      	b.n	8009d5a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff ff36 	bl	8009bc6 <HAL_UART_RxHalfCpltCallback>
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7e:	2b80      	cmp	r3, #128	; 0x80
 8009d80:	bf0c      	ite	eq
 8009d82:	2301      	moveq	r3, #1
 8009d84:	2300      	movne	r3, #0
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b21      	cmp	r3, #33	; 0x21
 8009d94:	d108      	bne.n	8009da8 <UART_DMAError+0x46>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009da2:	68b8      	ldr	r0, [r7, #8]
 8009da4:	f000 f8c6 	bl	8009f34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db2:	2b40      	cmp	r3, #64	; 0x40
 8009db4:	bf0c      	ite	eq
 8009db6:	2301      	moveq	r3, #1
 8009db8:	2300      	movne	r3, #0
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b22      	cmp	r3, #34	; 0x22
 8009dc8:	d108      	bne.n	8009ddc <UART_DMAError+0x7a>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009dd6:	68b8      	ldr	r0, [r7, #8]
 8009dd8:	f000 f8d4 	bl	8009f84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	f043 0210 	orr.w	r2, r3, #16
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009de8:	68b8      	ldr	r0, [r7, #8]
 8009dea:	f7ff fef6 	bl	8009bda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b098      	sub	sp, #96	; 0x60
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	4613      	mov	r3, r2
 8009e04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2222      	movs	r2, #34	; 0x22
 8009e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	4a40      	ldr	r2, [pc, #256]	; (8009f28 <UART_Start_Receive_DMA+0x130>)
 8009e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2c:	4a3f      	ldr	r2, [pc, #252]	; (8009f2c <UART_Start_Receive_DMA+0x134>)
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	4a3e      	ldr	r2, [pc, #248]	; (8009f30 <UART_Start_Receive_DMA+0x138>)
 8009e36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	88fb      	ldrh	r3, [r7, #6]
 8009e58:	f7fb f899 	bl	8004f8e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	613b      	str	r3, [r7, #16]
 8009e70:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d019      	beq.n	8009eb6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	330c      	adds	r3, #12
 8009e88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ea2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e5      	bne.n	8009e82 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	f043 0301 	orr.w	r3, r3, #1
 8009ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3314      	adds	r3, #20
 8009ed4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ed6:	63ba      	str	r2, [r7, #56]	; 0x38
 8009ed8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e5      	bne.n	8009eb6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3314      	adds	r3, #20
 8009ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	e853 3f00 	ldrex	r3, [r3]
 8009ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f00:	653b      	str	r3, [r7, #80]	; 0x50
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3314      	adds	r3, #20
 8009f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8009f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0e:	6a39      	ldr	r1, [r7, #32]
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e5      	bne.n	8009eea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3760      	adds	r7, #96	; 0x60
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	08009c07 	.word	0x08009c07
 8009f2c:	08009d2d 	.word	0x08009d2d
 8009f30:	08009d63 	.word	0x08009d63

08009f34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b089      	sub	sp, #36	; 0x24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	330c      	adds	r3, #12
 8009f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f52:	61fb      	str	r3, [r7, #28]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	61ba      	str	r2, [r7, #24]
 8009f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6979      	ldr	r1, [r7, #20]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e5      	bne.n	8009f3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009f78:	bf00      	nop
 8009f7a:	3724      	adds	r7, #36	; 0x24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b095      	sub	sp, #84	; 0x54
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fac:	643a      	str	r2, [r7, #64]	; 0x40
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	f023 0301 	bic.w	r3, r3, #1
 8009fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3314      	adds	r3, #20
 8009fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d119      	bne.n	800a030 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	647b      	str	r3, [r7, #68]	; 0x44
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a01c:	61ba      	str	r2, [r7, #24]
 800a01e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6979      	ldr	r1, [r7, #20]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	613b      	str	r3, [r7, #16]
   return(result);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a03e:	bf00      	nop
 800a040:	3754      	adds	r7, #84	; 0x54
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
	...

0800a04c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a04c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a050:	b0c0      	sub	sp, #256	; 0x100
 800a052:	af00      	add	r7, sp, #0
 800a054:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a068:	68d9      	ldr	r1, [r3, #12]
 800a06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	ea40 0301 	orr.w	r3, r0, r1
 800a074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	431a      	orrs	r2, r3
 800a084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	431a      	orrs	r2, r3
 800a08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	4313      	orrs	r3, r2
 800a094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a0a4:	f021 010c 	bic.w	r1, r1, #12
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c6:	6999      	ldr	r1, [r3, #24]
 800a0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	ea40 0301 	orr.w	r3, r0, r1
 800a0d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b8f      	ldr	r3, [pc, #572]	; (800a318 <UART_SetConfig+0x2cc>)
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d005      	beq.n	800a0ec <UART_SetConfig+0xa0>
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	4b8d      	ldr	r3, [pc, #564]	; (800a31c <UART_SetConfig+0x2d0>)
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d104      	bne.n	800a0f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0ec:	f7fc feb0 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 800a0f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a0f4:	e003      	b.n	800a0fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0f6:	f7fc fe97 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 800a0fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a108:	f040 810c 	bne.w	800a324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a10c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a110:	2200      	movs	r2, #0
 800a112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a116:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a11a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a11e:	4622      	mov	r2, r4
 800a120:	462b      	mov	r3, r5
 800a122:	1891      	adds	r1, r2, r2
 800a124:	65b9      	str	r1, [r7, #88]	; 0x58
 800a126:	415b      	adcs	r3, r3
 800a128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a12e:	4621      	mov	r1, r4
 800a130:	eb12 0801 	adds.w	r8, r2, r1
 800a134:	4629      	mov	r1, r5
 800a136:	eb43 0901 	adc.w	r9, r3, r1
 800a13a:	f04f 0200 	mov.w	r2, #0
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a14a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a14e:	4690      	mov	r8, r2
 800a150:	4699      	mov	r9, r3
 800a152:	4623      	mov	r3, r4
 800a154:	eb18 0303 	adds.w	r3, r8, r3
 800a158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a15c:	462b      	mov	r3, r5
 800a15e:	eb49 0303 	adc.w	r3, r9, r3
 800a162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a172:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a17a:	460b      	mov	r3, r1
 800a17c:	18db      	adds	r3, r3, r3
 800a17e:	653b      	str	r3, [r7, #80]	; 0x50
 800a180:	4613      	mov	r3, r2
 800a182:	eb42 0303 	adc.w	r3, r2, r3
 800a186:	657b      	str	r3, [r7, #84]	; 0x54
 800a188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a18c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a190:	f7f6 fd6a 	bl	8000c68 <__aeabi_uldivmod>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4b61      	ldr	r3, [pc, #388]	; (800a320 <UART_SetConfig+0x2d4>)
 800a19a:	fba3 2302 	umull	r2, r3, r3, r2
 800a19e:	095b      	lsrs	r3, r3, #5
 800a1a0:	011c      	lsls	r4, r3, #4
 800a1a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a1b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	1891      	adds	r1, r2, r2
 800a1ba:	64b9      	str	r1, [r7, #72]	; 0x48
 800a1bc:	415b      	adcs	r3, r3
 800a1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a1c4:	4641      	mov	r1, r8
 800a1c6:	eb12 0a01 	adds.w	sl, r2, r1
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	eb43 0b01 	adc.w	fp, r3, r1
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	f04f 0300 	mov.w	r3, #0
 800a1d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1e4:	4692      	mov	sl, r2
 800a1e6:	469b      	mov	fp, r3
 800a1e8:	4643      	mov	r3, r8
 800a1ea:	eb1a 0303 	adds.w	r3, sl, r3
 800a1ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	eb4b 0303 	adc.w	r3, fp, r3
 800a1f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a208:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a20c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a210:	460b      	mov	r3, r1
 800a212:	18db      	adds	r3, r3, r3
 800a214:	643b      	str	r3, [r7, #64]	; 0x40
 800a216:	4613      	mov	r3, r2
 800a218:	eb42 0303 	adc.w	r3, r2, r3
 800a21c:	647b      	str	r3, [r7, #68]	; 0x44
 800a21e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a226:	f7f6 fd1f 	bl	8000c68 <__aeabi_uldivmod>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	4b3b      	ldr	r3, [pc, #236]	; (800a320 <UART_SetConfig+0x2d4>)
 800a232:	fba3 2301 	umull	r2, r3, r3, r1
 800a236:	095b      	lsrs	r3, r3, #5
 800a238:	2264      	movs	r2, #100	; 0x64
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
 800a23e:	1acb      	subs	r3, r1, r3
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a246:	4b36      	ldr	r3, [pc, #216]	; (800a320 <UART_SetConfig+0x2d4>)
 800a248:	fba3 2302 	umull	r2, r3, r3, r2
 800a24c:	095b      	lsrs	r3, r3, #5
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a254:	441c      	add	r4, r3
 800a256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a260:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	1891      	adds	r1, r2, r2
 800a26e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a270:	415b      	adcs	r3, r3
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a278:	4641      	mov	r1, r8
 800a27a:	1851      	adds	r1, r2, r1
 800a27c:	6339      	str	r1, [r7, #48]	; 0x30
 800a27e:	4649      	mov	r1, r9
 800a280:	414b      	adcs	r3, r1
 800a282:	637b      	str	r3, [r7, #52]	; 0x34
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	f04f 0300 	mov.w	r3, #0
 800a28c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a290:	4659      	mov	r1, fp
 800a292:	00cb      	lsls	r3, r1, #3
 800a294:	4651      	mov	r1, sl
 800a296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a29a:	4651      	mov	r1, sl
 800a29c:	00ca      	lsls	r2, r1, #3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	189b      	adds	r3, r3, r2
 800a2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	eb42 0303 	adc.w	r3, r2, r3
 800a2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a2c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	18db      	adds	r3, r3, r3
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	eb42 0303 	adc.w	r3, r2, r3
 800a2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a2e2:	f7f6 fcc1 	bl	8000c68 <__aeabi_uldivmod>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <UART_SetConfig+0x2d4>)
 800a2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f0:	095b      	lsrs	r3, r3, #5
 800a2f2:	2164      	movs	r1, #100	; 0x64
 800a2f4:	fb01 f303 	mul.w	r3, r1, r3
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	3332      	adds	r3, #50	; 0x32
 800a2fe:	4a08      	ldr	r2, [pc, #32]	; (800a320 <UART_SetConfig+0x2d4>)
 800a300:	fba2 2303 	umull	r2, r3, r2, r3
 800a304:	095b      	lsrs	r3, r3, #5
 800a306:	f003 0207 	and.w	r2, r3, #7
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4422      	add	r2, r4
 800a312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a314:	e105      	b.n	800a522 <UART_SetConfig+0x4d6>
 800a316:	bf00      	nop
 800a318:	40011000 	.word	0x40011000
 800a31c:	40011400 	.word	0x40011400
 800a320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a328:	2200      	movs	r2, #0
 800a32a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a32e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a336:	4642      	mov	r2, r8
 800a338:	464b      	mov	r3, r9
 800a33a:	1891      	adds	r1, r2, r2
 800a33c:	6239      	str	r1, [r7, #32]
 800a33e:	415b      	adcs	r3, r3
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
 800a342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a346:	4641      	mov	r1, r8
 800a348:	1854      	adds	r4, r2, r1
 800a34a:	4649      	mov	r1, r9
 800a34c:	eb43 0501 	adc.w	r5, r3, r1
 800a350:	f04f 0200 	mov.w	r2, #0
 800a354:	f04f 0300 	mov.w	r3, #0
 800a358:	00eb      	lsls	r3, r5, #3
 800a35a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a35e:	00e2      	lsls	r2, r4, #3
 800a360:	4614      	mov	r4, r2
 800a362:	461d      	mov	r5, r3
 800a364:	4643      	mov	r3, r8
 800a366:	18e3      	adds	r3, r4, r3
 800a368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a36c:	464b      	mov	r3, r9
 800a36e:	eb45 0303 	adc.w	r3, r5, r3
 800a372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a382:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	f04f 0300 	mov.w	r3, #0
 800a38e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a392:	4629      	mov	r1, r5
 800a394:	008b      	lsls	r3, r1, #2
 800a396:	4621      	mov	r1, r4
 800a398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a39c:	4621      	mov	r1, r4
 800a39e:	008a      	lsls	r2, r1, #2
 800a3a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a3a4:	f7f6 fc60 	bl	8000c68 <__aeabi_uldivmod>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4b60      	ldr	r3, [pc, #384]	; (800a530 <UART_SetConfig+0x4e4>)
 800a3ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	011c      	lsls	r4, r3, #4
 800a3b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	1891      	adds	r1, r2, r2
 800a3ce:	61b9      	str	r1, [r7, #24]
 800a3d0:	415b      	adcs	r3, r3
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3d8:	4641      	mov	r1, r8
 800a3da:	1851      	adds	r1, r2, r1
 800a3dc:	6139      	str	r1, [r7, #16]
 800a3de:	4649      	mov	r1, r9
 800a3e0:	414b      	adcs	r3, r1
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3f0:	4659      	mov	r1, fp
 800a3f2:	00cb      	lsls	r3, r1, #3
 800a3f4:	4651      	mov	r1, sl
 800a3f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3fa:	4651      	mov	r1, sl
 800a3fc:	00ca      	lsls	r2, r1, #3
 800a3fe:	4610      	mov	r0, r2
 800a400:	4619      	mov	r1, r3
 800a402:	4603      	mov	r3, r0
 800a404:	4642      	mov	r2, r8
 800a406:	189b      	adds	r3, r3, r2
 800a408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a40c:	464b      	mov	r3, r9
 800a40e:	460a      	mov	r2, r1
 800a410:	eb42 0303 	adc.w	r3, r2, r3
 800a414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	67bb      	str	r3, [r7, #120]	; 0x78
 800a422:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a424:	f04f 0200 	mov.w	r2, #0
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a430:	4649      	mov	r1, r9
 800a432:	008b      	lsls	r3, r1, #2
 800a434:	4641      	mov	r1, r8
 800a436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a43a:	4641      	mov	r1, r8
 800a43c:	008a      	lsls	r2, r1, #2
 800a43e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a442:	f7f6 fc11 	bl	8000c68 <__aeabi_uldivmod>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4b39      	ldr	r3, [pc, #228]	; (800a530 <UART_SetConfig+0x4e4>)
 800a44c:	fba3 1302 	umull	r1, r3, r3, r2
 800a450:	095b      	lsrs	r3, r3, #5
 800a452:	2164      	movs	r1, #100	; 0x64
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	011b      	lsls	r3, r3, #4
 800a45c:	3332      	adds	r3, #50	; 0x32
 800a45e:	4a34      	ldr	r2, [pc, #208]	; (800a530 <UART_SetConfig+0x4e4>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46a:	441c      	add	r4, r3
 800a46c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a470:	2200      	movs	r2, #0
 800a472:	673b      	str	r3, [r7, #112]	; 0x70
 800a474:	677a      	str	r2, [r7, #116]	; 0x74
 800a476:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a47a:	4642      	mov	r2, r8
 800a47c:	464b      	mov	r3, r9
 800a47e:	1891      	adds	r1, r2, r2
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	415b      	adcs	r3, r3
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a48a:	4641      	mov	r1, r8
 800a48c:	1851      	adds	r1, r2, r1
 800a48e:	6039      	str	r1, [r7, #0]
 800a490:	4649      	mov	r1, r9
 800a492:	414b      	adcs	r3, r1
 800a494:	607b      	str	r3, [r7, #4]
 800a496:	f04f 0200 	mov.w	r2, #0
 800a49a:	f04f 0300 	mov.w	r3, #0
 800a49e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4a2:	4659      	mov	r1, fp
 800a4a4:	00cb      	lsls	r3, r1, #3
 800a4a6:	4651      	mov	r1, sl
 800a4a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4ac:	4651      	mov	r1, sl
 800a4ae:	00ca      	lsls	r2, r1, #3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	189b      	adds	r3, r3, r2
 800a4ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4bc:	464b      	mov	r3, r9
 800a4be:	460a      	mov	r2, r1
 800a4c0:	eb42 0303 	adc.w	r3, r2, r3
 800a4c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	663b      	str	r3, [r7, #96]	; 0x60
 800a4d0:	667a      	str	r2, [r7, #100]	; 0x64
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	f04f 0300 	mov.w	r3, #0
 800a4da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a4de:	4649      	mov	r1, r9
 800a4e0:	008b      	lsls	r3, r1, #2
 800a4e2:	4641      	mov	r1, r8
 800a4e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4e8:	4641      	mov	r1, r8
 800a4ea:	008a      	lsls	r2, r1, #2
 800a4ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a4f0:	f7f6 fbba 	bl	8000c68 <__aeabi_uldivmod>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <UART_SetConfig+0x4e4>)
 800a4fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a4fe:	095b      	lsrs	r3, r3, #5
 800a500:	2164      	movs	r1, #100	; 0x64
 800a502:	fb01 f303 	mul.w	r3, r1, r3
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	3332      	adds	r3, #50	; 0x32
 800a50c:	4a08      	ldr	r2, [pc, #32]	; (800a530 <UART_SetConfig+0x4e4>)
 800a50e:	fba2 2303 	umull	r2, r3, r2, r3
 800a512:	095b      	lsrs	r3, r3, #5
 800a514:	f003 020f 	and.w	r2, r3, #15
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4422      	add	r2, r4
 800a520:	609a      	str	r2, [r3, #8]
}
 800a522:	bf00      	nop
 800a524:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a528:	46bd      	mov	sp, r7
 800a52a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a52e:	bf00      	nop
 800a530:	51eb851f 	.word	0x51eb851f

0800a534 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a534:	b084      	sub	sp, #16
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	f107 001c 	add.w	r0, r7, #28
 800a542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a54a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a54c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a54e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a552:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a556:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a55a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a55e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a56e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	431a      	orrs	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	b004      	add	sp, #16
 800a588:	4770      	bx	lr

0800a58a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0303 	and.w	r3, r3, #3
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a61c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a622:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a628:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a638:	f023 030f 	bic.w	r3, r3, #15
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	b2db      	uxtb	r3, r3
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3314      	adds	r3, #20
 800a67a:	461a      	mov	r2, r3
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
}  
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a6be:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a6c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0

}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6f8:	2310      	movs	r3, #16
 800a6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a70a:	f107 0308 	add.w	r3, r7, #8
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff ff74 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a716:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71a:	2110      	movs	r1, #16
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f9d7 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a724:	69fb      	ldr	r3, [r7, #28]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3720      	adds	r7, #32
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b088      	sub	sp, #32
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a73c:	2311      	movs	r3, #17
 800a73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a740:	2340      	movs	r3, #64	; 0x40
 800a742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a74c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a74e:	f107 0308 	add.w	r3, r7, #8
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff52 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75e:	2111      	movs	r1, #17
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f9b5 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a768:	69fb      	ldr	r3, [r7, #28]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b088      	sub	sp, #32
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a780:	2312      	movs	r3, #18
 800a782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a784:	2340      	movs	r3, #64	; 0x40
 800a786:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a788:	2300      	movs	r3, #0
 800a78a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a790:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff30 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a2:	2112      	movs	r1, #18
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f993 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a7aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b088      	sub	sp, #32
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a7c4:	2318      	movs	r3, #24
 800a7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7d6:	f107 0308 	add.w	r3, r7, #8
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ff0e 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7e6:	2118      	movs	r1, #24
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f971 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a7ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3720      	adds	r7, #32
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b088      	sub	sp, #32
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a808:	2319      	movs	r3, #25
 800a80a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a81a:	f107 0308 	add.w	r3, r7, #8
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff feec 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a826:	f241 3288 	movw	r2, #5000	; 0x1388
 800a82a:	2119      	movs	r1, #25
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f94f 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a834:	69fb      	ldr	r3, [r7, #28]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3720      	adds	r7, #32
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a84c:	230c      	movs	r3, #12
 800a84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a854:	2300      	movs	r3, #0
 800a856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff feca 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a86a:	4a05      	ldr	r2, [pc, #20]	; (800a880 <SDMMC_CmdStopTransfer+0x40>)
 800a86c:	210c      	movs	r1, #12
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f92e 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a876:	69fb      	ldr	r3, [r7, #28]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3720      	adds	r7, #32
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	05f5e100 	.word	0x05f5e100

0800a884 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08a      	sub	sp, #40	; 0x28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a894:	2307      	movs	r3, #7
 800a896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a6:	f107 0310 	add.w	r3, r7, #16
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f7ff fea6 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b6:	2107      	movs	r1, #7
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f909 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a8be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3728      	adds	r7, #40	; 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b088      	sub	sp, #32
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fe85 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fb23 	bl	800af40 <SDMMC_GetCmdError>
 800a8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b088      	sub	sp, #32
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a90e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a914:	2308      	movs	r3, #8
 800a916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a926:	f107 0308 	add.w	r3, r7, #8
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fe66 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fab6 	bl	800aea4 <SDMMC_GetCmdResp7>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a952:	2337      	movs	r3, #55	; 0x37
 800a954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a956:	2340      	movs	r3, #64	; 0x40
 800a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fe47 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a970:	f241 3288 	movw	r2, #5000	; 0x1388
 800a974:	2137      	movs	r1, #55	; 0x37
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8aa 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a97e:	69fb      	ldr	r3, [r7, #28]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a99c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a99e:	2329      	movs	r3, #41	; 0x29
 800a9a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fe21 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f9bd 	bl	800ad3c <SDMMC_GetCmdResp3>
 800a9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b088      	sub	sp, #32
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a9de:	23c0      	movs	r3, #192	; 0xc0
 800a9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ec:	f107 0308 	add.w	r3, r7, #8
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fe03 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f957 	bl	800acac <SDMMC_GetCmdResp2>
 800a9fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa00:	69fb      	ldr	r3, [r7, #28]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b088      	sub	sp, #32
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa18:	2309      	movs	r3, #9
 800aa1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa1c:	23c0      	movs	r3, #192	; 0xc0
 800aa1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa20:	2300      	movs	r3, #0
 800aa22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fde4 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f938 	bl	800acac <SDMMC_GetCmdResp2>
 800aa3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa56:	2303      	movs	r3, #3
 800aa58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa5a:	2340      	movs	r3, #64	; 0x40
 800aa5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fdc5 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	2103      	movs	r1, #3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f99d 	bl	800adb8 <SDMMC_GetCmdResp6>
 800aa7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa80:	69fb      	ldr	r3, [r7, #28]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b088      	sub	sp, #32
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa98:	230d      	movs	r3, #13
 800aa9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa9c:	2340      	movs	r3, #64	; 0x40
 800aa9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaaa:	f107 0308 	add.w	r3, r7, #8
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fda4 	bl	800a5fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aab6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaba:	210d      	movs	r1, #13
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f807 	bl	800aad0 <SDMMC_GetCmdResp1>
 800aac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aac4:	69fb      	ldr	r3, [r7, #28]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3720      	adds	r7, #32
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	460b      	mov	r3, r1
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aade:	4b70      	ldr	r3, [pc, #448]	; (800aca0 <SDMMC_GetCmdResp1+0x1d0>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a70      	ldr	r2, [pc, #448]	; (800aca4 <SDMMC_GetCmdResp1+0x1d4>)
 800aae4:	fba2 2303 	umull	r2, r3, r2, r3
 800aae8:	0a5a      	lsrs	r2, r3, #9
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
 800aaf0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	61fa      	str	r2, [r7, #28]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aafc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab00:	e0c9      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0ef      	beq.n	800aaf2 <SDMMC_GetCmdResp1+0x22>
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1ea      	bne.n	800aaf2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab2e:	2304      	movs	r3, #4
 800ab30:	e0b1      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d004      	beq.n	800ab48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e0a6      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	22c5      	movs	r2, #197	; 0xc5
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fd7f 	bl	800a652 <SDIO_GetCommandResponse>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d001      	beq.n	800ab62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e099      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab62:	2100      	movs	r1, #0
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f7ff fd81 	bl	800a66c <SDIO_GetResponse>
 800ab6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	4b4e      	ldr	r3, [pc, #312]	; (800aca8 <SDMMC_GetCmdResp1+0x1d8>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	e08d      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	da02      	bge.n	800ab86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab84:	e087      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab90:	2340      	movs	r3, #64	; 0x40
 800ab92:	e080      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab9e:	2380      	movs	r3, #128	; 0x80
 800aba0:	e079      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abb0:	e071      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc0:	e069      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800abcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abd0:	e061      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800abdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abe0:	e059      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf0:	e051      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac00:	e049      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac10:	e041      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac20:	e039      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac30:	e031      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac40:	e029      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac50:	e021      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac60:	e019      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac70:	e011      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac80:	e009      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac90:	e001      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000060 	.word	0x20000060
 800aca4:	10624dd3 	.word	0x10624dd3
 800aca8:	fdffe008 	.word	0xfdffe008

0800acac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acb4:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <SDMMC_GetCmdResp2+0x88>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a1f      	ldr	r2, [pc, #124]	; (800ad38 <SDMMC_GetCmdResp2+0x8c>)
 800acba:	fba2 2303 	umull	r2, r3, r2, r3
 800acbe:	0a5b      	lsrs	r3, r3, #9
 800acc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
 800acc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1e5a      	subs	r2, r3, #1
 800acce:	60fa      	str	r2, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acd8:	e026      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0ef      	beq.n	800acca <SDMMC_GetCmdResp2+0x1e>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1ea      	bne.n	800acca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2204      	movs	r2, #4
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad06:	2304      	movs	r3, #4
 800ad08:	e00e      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e003      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	22c5      	movs	r2, #197	; 0xc5
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20000060 	.word	0x20000060
 800ad38:	10624dd3 	.word	0x10624dd3

0800ad3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad44:	4b1a      	ldr	r3, [pc, #104]	; (800adb0 <SDMMC_GetCmdResp3+0x74>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <SDMMC_GetCmdResp3+0x78>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	0a5b      	lsrs	r3, r3, #9
 800ad50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad54:	fb02 f303 	mul.w	r3, r2, r3
 800ad58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad68:	e01b      	b.n	800ada2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0ef      	beq.n	800ad5a <SDMMC_GetCmdResp3+0x1e>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ea      	bne.n	800ad5a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad96:	2304      	movs	r3, #4
 800ad98:	e003      	b.n	800ada2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	22c5      	movs	r2, #197	; 0xc5
 800ad9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20000060 	.word	0x20000060
 800adb4:	10624dd3 	.word	0x10624dd3

0800adb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	460b      	mov	r3, r1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adc6:	4b35      	ldr	r3, [pc, #212]	; (800ae9c <SDMMC_GetCmdResp6+0xe4>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a35      	ldr	r2, [pc, #212]	; (800aea0 <SDMMC_GetCmdResp6+0xe8>)
 800adcc:	fba2 2303 	umull	r2, r3, r2, r3
 800add0:	0a5b      	lsrs	r3, r3, #9
 800add2:	f241 3288 	movw	r2, #5000	; 0x1388
 800add6:	fb02 f303 	mul.w	r3, r2, r3
 800adda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	1e5a      	subs	r2, r3, #1
 800ade0:	61fa      	str	r2, [r7, #28]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adea:	e052      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0ef      	beq.n	800addc <SDMMC_GetCmdResp6+0x24>
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ea      	bne.n	800addc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2204      	movs	r2, #4
 800ae16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae18:	2304      	movs	r3, #4
 800ae1a:	e03a      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e02f      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff fc0d 	bl	800a652 <SDIO_GetCommandResponse>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	7afb      	ldrb	r3, [r7, #11]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d001      	beq.n	800ae46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e025      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	22c5      	movs	r2, #197	; 0xc5
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fc0c 	bl	800a66c <SDIO_GetResponse>
 800ae54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e011      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae7c:	e009      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae8c:	e001      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20000060 	.word	0x20000060
 800aea0:	10624dd3 	.word	0x10624dd3

0800aea4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeac:	4b22      	ldr	r3, [pc, #136]	; (800af38 <SDMMC_GetCmdResp7+0x94>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a22      	ldr	r2, [pc, #136]	; (800af3c <SDMMC_GetCmdResp7+0x98>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0a5b      	lsrs	r3, r3, #9
 800aeb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aebc:	fb02 f303 	mul.w	r3, r2, r3
 800aec0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	60fa      	str	r2, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aed0:	e02c      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0ef      	beq.n	800aec2 <SDMMC_GetCmdResp7+0x1e>
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1ea      	bne.n	800aec2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2204      	movs	r2, #4
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aefe:	2304      	movs	r3, #4
 800af00:	e014      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af14:	2301      	movs	r3, #1
 800af16:	e009      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2240      	movs	r2, #64	; 0x40
 800af28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af2a:	2300      	movs	r3, #0
  
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20000060 	.word	0x20000060
 800af3c:	10624dd3 	.word	0x10624dd3

0800af40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af48:	4b11      	ldr	r3, [pc, #68]	; (800af90 <SDMMC_GetCmdError+0x50>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a11      	ldr	r2, [pc, #68]	; (800af94 <SDMMC_GetCmdError+0x54>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	0a5b      	lsrs	r3, r3, #9
 800af54:	f241 3288 	movw	r2, #5000	; 0x1388
 800af58:	fb02 f303 	mul.w	r3, r2, r3
 800af5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	60fa      	str	r2, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af6c:	e009      	b.n	800af82 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f1      	beq.n	800af5e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	22c5      	movs	r2, #197	; 0xc5
 800af7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	20000060 	.word	0x20000060
 800af94:	10624dd3 	.word	0x10624dd3

0800af98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af9c:	4904      	ldr	r1, [pc, #16]	; (800afb0 <MX_FATFS_Init+0x18>)
 800af9e:	4805      	ldr	r0, [pc, #20]	; (800afb4 <MX_FATFS_Init+0x1c>)
 800afa0:	f002 ff0e 	bl	800ddc0 <FATFS_LinkDriver>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	4b03      	ldr	r3, [pc, #12]	; (800afb8 <MX_FATFS_Init+0x20>)
 800afaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800afac:	bf00      	nop
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20005a2c 	.word	0x20005a2c
 800afb4:	0801d2cc 	.word	0x0801d2cc
 800afb8:	20005a28 	.word	0x20005a28

0800afbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800afc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800afd6:	f000 f86b 	bl	800b0b0 <BSP_SD_IsDetected>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d001      	beq.n	800afe4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e005      	b.n	800aff0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800afe4:	4804      	ldr	r0, [pc, #16]	; (800aff8 <BSP_SD_Init+0x2c>)
 800afe6:	f7fc faca 	bl	800757e <HAL_SD_Init>
 800afea:	4603      	mov	r3, r0
 800afec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800afee:	79fb      	ldrb	r3, [r7, #7]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20005748 	.word	0x20005748

0800affc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af02      	add	r7, sp, #8
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	4806      	ldr	r0, [pc, #24]	; (800b034 <BSP_SD_ReadBlocks+0x38>)
 800b01a:	f7fc fb61 	bl	80076e0 <HAL_SD_ReadBlocks>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20005748 	.word	0x20005748

0800b038 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	4806      	ldr	r0, [pc, #24]	; (800b070 <BSP_SD_WriteBlocks+0x38>)
 800b056:	f7fc fd21 	bl	8007a9c <HAL_SD_WriteBlocks>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20005748 	.word	0x20005748

0800b074 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b078:	4805      	ldr	r0, [pc, #20]	; (800b090 <BSP_SD_GetCardState+0x1c>)
 800b07a:	f7fd f865 	bl	8008148 <HAL_SD_GetCardState>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b04      	cmp	r3, #4
 800b082:	bf14      	ite	ne
 800b084:	2301      	movne	r3, #1
 800b086:	2300      	moveq	r3, #0
 800b088:	b2db      	uxtb	r3, r3
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20005748 	.word	0x20005748

0800b094 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	4803      	ldr	r0, [pc, #12]	; (800b0ac <BSP_SD_GetCardInfo+0x18>)
 800b0a0:	f7fd f826 	bl	80080f0 <HAL_SD_GetCardInfo>
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20005748 	.word	0x20005748

0800b0b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	b2db      	uxtb	r3, r3
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0d6:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <SD_CheckStatus+0x38>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0dc:	f7ff ffca 	bl	800b074 <BSP_SD_GetCardState>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0e6:	4b07      	ldr	r3, [pc, #28]	; (800b104 <SD_CheckStatus+0x38>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f023 0301 	bic.w	r3, r3, #1
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	4b04      	ldr	r3, [pc, #16]	; (800b104 <SD_CheckStatus+0x38>)
 800b0f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b0f6:	4b03      	ldr	r3, [pc, #12]	; (800b104 <SD_CheckStatus+0x38>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	b2db      	uxtb	r3, r3
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	200000c1 	.word	0x200000c1

0800b108 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b112:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <SD_initialize+0x38>)
 800b114:	2201      	movs	r2, #1
 800b116:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b118:	f7ff ff58 	bl	800afcc <BSP_SD_Init>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d107      	bne.n	800b132 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff ffd1 	bl	800b0cc <SD_CheckStatus>
 800b12a:	4603      	mov	r3, r0
 800b12c:	461a      	mov	r2, r3
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <SD_initialize+0x38>)
 800b130:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b132:	4b03      	ldr	r3, [pc, #12]	; (800b140 <SD_initialize+0x38>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	b2db      	uxtb	r3, r3
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	200000c1 	.word	0x200000c1

0800b144 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4603      	mov	r3, r0
 800b14c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff ffbb 	bl	800b0cc <SD_CheckStatus>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b174:	f04f 33ff 	mov.w	r3, #4294967295
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	68b8      	ldr	r0, [r7, #8]
 800b17e:	f7ff ff3d 	bl	800affc <BSP_SD_ReadBlocks>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d107      	bne.n	800b198 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b188:	bf00      	nop
 800b18a:	f7ff ff73 	bl	800b074 <BSP_SD_GetCardState>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1fa      	bne.n	800b18a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b198:	7dfb      	ldrb	r3, [r7, #23]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	68b8      	ldr	r0, [r7, #8]
 800b1c0:	f7ff ff3a 	bl	800b038 <BSP_SD_WriteBlocks>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d107      	bne.n	800b1da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b1ca:	bf00      	nop
 800b1cc:	f7ff ff52 	bl	800b074 <BSP_SD_GetCardState>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1fa      	bne.n	800b1cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08c      	sub	sp, #48	; 0x30
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	603a      	str	r2, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b1fa:	4b25      	ldr	r3, [pc, #148]	; (800b290 <SD_ioctl+0xac>)
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <SD_ioctl+0x28>
 800b208:	2303      	movs	r3, #3
 800b20a:	e03c      	b.n	800b286 <SD_ioctl+0xa2>

  switch (cmd)
 800b20c:	79bb      	ldrb	r3, [r7, #6]
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d834      	bhi.n	800b27c <SD_ioctl+0x98>
 800b212:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <SD_ioctl+0x34>)
 800b214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b218:	0800b229 	.word	0x0800b229
 800b21c:	0800b231 	.word	0x0800b231
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b263 	.word	0x0800b263
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b22e:	e028      	b.n	800b282 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff ff2d 	bl	800b094 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b246:	e01c      	b.n	800b282 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b248:	f107 030c 	add.w	r3, r7, #12
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff ff21 	bl	800b094 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	b29a      	uxth	r2, r3
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b260:	e00f      	b.n	800b282 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b262:	f107 030c 	add.w	r3, r7, #12
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff ff14 	bl	800b094 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	0a5a      	lsrs	r2, r3, #9
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b27a:	e002      	b.n	800b282 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b27c:	2304      	movs	r3, #4
 800b27e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b286:	4618      	mov	r0, r3
 800b288:	3730      	adds	r7, #48	; 0x30
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	200000c1 	.word	0x200000c1

0800b294 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	4a08      	ldr	r2, [pc, #32]	; (800b2c4 <disk_status+0x30>)
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	79fa      	ldrb	r2, [r7, #7]
 800b2ac:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <disk_status+0x30>)
 800b2ae:	440a      	add	r2, r1
 800b2b0:	7a12      	ldrb	r2, [r2, #8]
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4798      	blx	r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20005a58 	.word	0x20005a58

0800b2c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	4a0d      	ldr	r2, [pc, #52]	; (800b310 <disk_initialize+0x48>)
 800b2da:	5cd3      	ldrb	r3, [r2, r3]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d111      	bne.n	800b304 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	4a0b      	ldr	r2, [pc, #44]	; (800b310 <disk_initialize+0x48>)
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	4a09      	ldr	r2, [pc, #36]	; (800b310 <disk_initialize+0x48>)
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	79fa      	ldrb	r2, [r7, #7]
 800b2f6:	4906      	ldr	r1, [pc, #24]	; (800b310 <disk_initialize+0x48>)
 800b2f8:	440a      	add	r2, r1
 800b2fa:	7a12      	ldrb	r2, [r2, #8]
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	4798      	blx	r3
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20005a58 	.word	0x20005a58

0800b314 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	4603      	mov	r3, r0
 800b322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	4a0a      	ldr	r2, [pc, #40]	; (800b350 <disk_read+0x3c>)
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	689c      	ldr	r4, [r3, #8]
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	4a07      	ldr	r2, [pc, #28]	; (800b350 <disk_read+0x3c>)
 800b334:	4413      	add	r3, r2
 800b336:	7a18      	ldrb	r0, [r3, #8]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	47a0      	blx	r4
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]
  return res;
 800b344:	7dfb      	ldrb	r3, [r7, #23]
}
 800b346:	4618      	mov	r0, r3
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd90      	pop	{r4, r7, pc}
 800b34e:	bf00      	nop
 800b350:	20005a58 	.word	0x20005a58

0800b354 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	607a      	str	r2, [r7, #4]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	4a0a      	ldr	r2, [pc, #40]	; (800b390 <disk_write+0x3c>)
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	68dc      	ldr	r4, [r3, #12]
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	4a07      	ldr	r2, [pc, #28]	; (800b390 <disk_write+0x3c>)
 800b374:	4413      	add	r3, r2
 800b376:	7a18      	ldrb	r0, [r3, #8]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	68b9      	ldr	r1, [r7, #8]
 800b37e:	47a0      	blx	r4
 800b380:	4603      	mov	r3, r0
 800b382:	75fb      	strb	r3, [r7, #23]
  return res;
 800b384:	7dfb      	ldrb	r3, [r7, #23]
}
 800b386:	4618      	mov	r0, r3
 800b388:	371c      	adds	r7, #28
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	20005a58 	.word	0x20005a58

0800b394 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	603a      	str	r2, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <disk_ioctl+0x38>)
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	79fa      	ldrb	r2, [r7, #7]
 800b3b2:	4906      	ldr	r1, [pc, #24]	; (800b3cc <disk_ioctl+0x38>)
 800b3b4:	440a      	add	r2, r1
 800b3b6:	7a10      	ldrb	r0, [r2, #8]
 800b3b8:	79b9      	ldrb	r1, [r7, #6]
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	4798      	blx	r3
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20005a58 	.word	0x20005a58

0800b3d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b3e0:	89fb      	ldrh	r3, [r7, #14]
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	b21a      	sxth	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	b21b      	sxth	r3, r3
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b3f2:	89fb      	ldrh	r3, [r7, #14]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3303      	adds	r3, #3
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	021b      	lsls	r3, r3, #8
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	3202      	adds	r2, #2
 800b418:	7812      	ldrb	r2, [r2, #0]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	021b      	lsls	r3, r3, #8
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	3201      	adds	r2, #1
 800b426:	7812      	ldrb	r2, [r2, #0]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	7812      	ldrb	r2, [r2, #0]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
	return rv;
 800b438:	68fb      	ldr	r3, [r7, #12]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b446:	b480      	push	{r7}
 800b448:	b083      	sub	sp, #12
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	887a      	ldrh	r2, [r7, #2]
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	887b      	ldrh	r3, [r7, #2]
 800b460:	0a1b      	lsrs	r3, r3, #8
 800b462:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	887a      	ldrh	r2, [r7, #2]
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	0a1b      	lsrs	r3, r3, #8
 800b496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	607a      	str	r2, [r7, #4]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	0a1b      	lsrs	r3, r3, #8
 800b4a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	701a      	strb	r2, [r3, #0]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	0a1b      	lsrs	r3, r3, #8
 800b4ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	607a      	str	r2, [r7, #4]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	b2d2      	uxtb	r2, r2
 800b4c6:	701a      	strb	r2, [r3, #0]
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00d      	beq.n	800b50a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	1c53      	adds	r3, r2, #1
 800b4f2:	613b      	str	r3, [r7, #16]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	1c59      	adds	r1, r3, #1
 800b4f8:	6179      	str	r1, [r7, #20]
 800b4fa:	7812      	ldrb	r2, [r2, #0]
 800b4fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3b01      	subs	r3, #1
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1f1      	bne.n	800b4ee <mem_cpy+0x1a>
	}
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b516:	b480      	push	{r7}
 800b518:	b087      	sub	sp, #28
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	617a      	str	r2, [r7, #20]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	b2d2      	uxtb	r2, r2
 800b530:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3b01      	subs	r3, #1
 800b536:	607b      	str	r3, [r7, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1f3      	bne.n	800b526 <mem_set+0x10>
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b54c:	b480      	push	{r7}
 800b54e:	b089      	sub	sp, #36	; 0x24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	61fb      	str	r3, [r7, #28]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	61fa      	str	r2, [r7, #28]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	61ba      	str	r2, [r7, #24]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	1acb      	subs	r3, r1, r3
 800b578:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	607b      	str	r3, [r7, #4]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <mem_cmp+0x40>
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d0eb      	beq.n	800b564 <mem_cmp+0x18>

	return r;
 800b58c:	697b      	ldr	r3, [r7, #20]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3724      	adds	r7, #36	; 0x24
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5a4:	e002      	b.n	800b5ac <chk_chr+0x12>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	607b      	str	r3, [r7, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d005      	beq.n	800b5c0 <chk_chr+0x26>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d1f2      	bne.n	800b5a6 <chk_chr+0xc>
	return *str;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	e029      	b.n	800b638 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b5e4:	4a27      	ldr	r2, [pc, #156]	; (800b684 <chk_lock+0xb4>)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	011b      	lsls	r3, r3, #4
 800b5ea:	4413      	add	r3, r2
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01d      	beq.n	800b62e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b5f2:	4a24      	ldr	r2, [pc, #144]	; (800b684 <chk_lock+0xb4>)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	011b      	lsls	r3, r3, #4
 800b5f8:	4413      	add	r3, r2
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d116      	bne.n	800b632 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b604:	4a1f      	ldr	r2, [pc, #124]	; (800b684 <chk_lock+0xb4>)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	011b      	lsls	r3, r3, #4
 800b60a:	4413      	add	r3, r2
 800b60c:	3304      	adds	r3, #4
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b614:	429a      	cmp	r2, r3
 800b616:	d10c      	bne.n	800b632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b618:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <chk_lock+0xb4>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	4413      	add	r3, r2
 800b620:	3308      	adds	r3, #8
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b628:	429a      	cmp	r2, r3
 800b62a:	d102      	bne.n	800b632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b62c:	e007      	b.n	800b63e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b62e:	2301      	movs	r3, #1
 800b630:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3301      	adds	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d9d2      	bls.n	800b5e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b02      	cmp	r3, #2
 800b642:	d109      	bne.n	800b658 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d102      	bne.n	800b650 <chk_lock+0x80>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d101      	bne.n	800b654 <chk_lock+0x84>
 800b650:	2300      	movs	r3, #0
 800b652:	e010      	b.n	800b676 <chk_lock+0xa6>
 800b654:	2312      	movs	r3, #18
 800b656:	e00e      	b.n	800b676 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d108      	bne.n	800b670 <chk_lock+0xa0>
 800b65e:	4a09      	ldr	r2, [pc, #36]	; (800b684 <chk_lock+0xb4>)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	4413      	add	r3, r2
 800b666:	330c      	adds	r3, #12
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66e:	d101      	bne.n	800b674 <chk_lock+0xa4>
 800b670:	2310      	movs	r3, #16
 800b672:	e000      	b.n	800b676 <chk_lock+0xa6>
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20005a38 	.word	0x20005a38

0800b688 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b68e:	2300      	movs	r3, #0
 800b690:	607b      	str	r3, [r7, #4]
 800b692:	e002      	b.n	800b69a <enq_lock+0x12>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d806      	bhi.n	800b6ae <enq_lock+0x26>
 800b6a0:	4a09      	ldr	r2, [pc, #36]	; (800b6c8 <enq_lock+0x40>)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	4413      	add	r3, r2
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f2      	bne.n	800b694 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	bf14      	ite	ne
 800b6b4:	2301      	movne	r3, #1
 800b6b6:	2300      	moveq	r3, #0
 800b6b8:	b2db      	uxtb	r3, r3
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	20005a38 	.word	0x20005a38

0800b6cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	e01f      	b.n	800b71c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6dc:	4a41      	ldr	r2, [pc, #260]	; (800b7e4 <inc_lock+0x118>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	4413      	add	r3, r2
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d113      	bne.n	800b716 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b6ee:	4a3d      	ldr	r2, [pc, #244]	; (800b7e4 <inc_lock+0x118>)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d109      	bne.n	800b716 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b702:	4a38      	ldr	r2, [pc, #224]	; (800b7e4 <inc_lock+0x118>)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	4413      	add	r3, r2
 800b70a:	3308      	adds	r3, #8
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b712:	429a      	cmp	r2, r3
 800b714:	d006      	beq.n	800b724 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d9dc      	bls.n	800b6dc <inc_lock+0x10>
 800b722:	e000      	b.n	800b726 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b724:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d132      	bne.n	800b792 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	e002      	b.n	800b738 <inc_lock+0x6c>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3301      	adds	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d806      	bhi.n	800b74c <inc_lock+0x80>
 800b73e:	4a29      	ldr	r2, [pc, #164]	; (800b7e4 <inc_lock+0x118>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	4413      	add	r3, r2
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f2      	bne.n	800b732 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d101      	bne.n	800b756 <inc_lock+0x8a>
 800b752:	2300      	movs	r3, #0
 800b754:	e040      	b.n	800b7d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	4922      	ldr	r1, [pc, #136]	; (800b7e4 <inc_lock+0x118>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	011b      	lsls	r3, r3, #4
 800b760:	440b      	add	r3, r1
 800b762:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	491e      	ldr	r1, [pc, #120]	; (800b7e4 <inc_lock+0x118>)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	011b      	lsls	r3, r3, #4
 800b76e:	440b      	add	r3, r1
 800b770:	3304      	adds	r3, #4
 800b772:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	695a      	ldr	r2, [r3, #20]
 800b778:	491a      	ldr	r1, [pc, #104]	; (800b7e4 <inc_lock+0x118>)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	440b      	add	r3, r1
 800b780:	3308      	adds	r3, #8
 800b782:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b784:	4a17      	ldr	r2, [pc, #92]	; (800b7e4 <inc_lock+0x118>)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	4413      	add	r3, r2
 800b78c:	330c      	adds	r3, #12
 800b78e:	2200      	movs	r2, #0
 800b790:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d009      	beq.n	800b7ac <inc_lock+0xe0>
 800b798:	4a12      	ldr	r2, [pc, #72]	; (800b7e4 <inc_lock+0x118>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	4413      	add	r3, r2
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <inc_lock+0xe0>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e015      	b.n	800b7d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <inc_lock+0xf8>
 800b7b2:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <inc_lock+0x118>)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	4413      	add	r3, r2
 800b7ba:	330c      	adds	r3, #12
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	e001      	b.n	800b7c8 <inc_lock+0xfc>
 800b7c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7c8:	4906      	ldr	r1, [pc, #24]	; (800b7e4 <inc_lock+0x118>)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	440b      	add	r3, r1
 800b7d0:	330c      	adds	r3, #12
 800b7d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	20005a38 	.word	0x20005a38

0800b7e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	607b      	str	r3, [r7, #4]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d825      	bhi.n	800b848 <dec_lock+0x60>
		n = Files[i].ctr;
 800b7fc:	4a17      	ldr	r2, [pc, #92]	; (800b85c <dec_lock+0x74>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	4413      	add	r3, r2
 800b804:	330c      	adds	r3, #12
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b80a:	89fb      	ldrh	r3, [r7, #14]
 800b80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b810:	d101      	bne.n	800b816 <dec_lock+0x2e>
 800b812:	2300      	movs	r3, #0
 800b814:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b816:	89fb      	ldrh	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <dec_lock+0x3a>
 800b81c:	89fb      	ldrh	r3, [r7, #14]
 800b81e:	3b01      	subs	r3, #1
 800b820:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b822:	4a0e      	ldr	r2, [pc, #56]	; (800b85c <dec_lock+0x74>)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	4413      	add	r3, r2
 800b82a:	330c      	adds	r3, #12
 800b82c:	89fa      	ldrh	r2, [r7, #14]
 800b82e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d105      	bne.n	800b842 <dec_lock+0x5a>
 800b836:	4a09      	ldr	r2, [pc, #36]	; (800b85c <dec_lock+0x74>)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	737b      	strb	r3, [r7, #13]
 800b846:	e001      	b.n	800b84c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b848:	2302      	movs	r3, #2
 800b84a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b84c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	20005a38 	.word	0x20005a38

0800b860 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b868:	2300      	movs	r3, #0
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	e010      	b.n	800b890 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b86e:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <clear_lock+0x44>)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	4413      	add	r3, r2
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d105      	bne.n	800b88a <clear_lock+0x2a>
 800b87e:	4a09      	ldr	r2, [pc, #36]	; (800b8a4 <clear_lock+0x44>)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	4413      	add	r3, r2
 800b886:	2200      	movs	r2, #0
 800b888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d9eb      	bls.n	800b86e <clear_lock+0xe>
	}
}
 800b896:	bf00      	nop
 800b898:	bf00      	nop
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20005a38 	.word	0x20005a38

0800b8a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	78db      	ldrb	r3, [r3, #3]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d034      	beq.n	800b926 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	7858      	ldrb	r0, [r3, #1]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	f7ff fd40 	bl	800b354 <disk_write>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	73fb      	strb	r3, [r7, #15]
 800b8de:	e022      	b.n	800b926 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d217      	bcs.n	800b926 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	789b      	ldrb	r3, [r3, #2]
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	e010      	b.n	800b920 <sync_window+0x78>
					wsect += fs->fsize;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	4413      	add	r3, r2
 800b906:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	7858      	ldrb	r0, [r3, #1]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b912:	2301      	movs	r3, #1
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	f7ff fd1d 	bl	800b354 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d8eb      	bhi.n	800b8fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	429a      	cmp	r2, r3
 800b946:	d01b      	beq.n	800b980 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ffad 	bl	800b8a8 <sync_window>
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d113      	bne.n	800b980 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7858      	ldrb	r0, [r3, #1]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b962:	2301      	movs	r3, #1
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	f7ff fcd5 	bl	800b314 <disk_read>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b970:	f04f 33ff 	mov.w	r3, #4294967295
 800b974:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b976:	2301      	movs	r3, #1
 800b978:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff ff87 	bl	800b8a8 <sync_window>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d159      	bne.n	800ba58 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d149      	bne.n	800ba40 <sync_fs+0xb4>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	791b      	ldrb	r3, [r3, #4]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d145      	bne.n	800ba40 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	899b      	ldrh	r3, [r3, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	f7ff fda8 	bl	800b516 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3334      	adds	r3, #52	; 0x34
 800b9ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fd37 	bl	800b446 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3334      	adds	r3, #52	; 0x34
 800b9dc:	4921      	ldr	r1, [pc, #132]	; (800ba64 <sync_fs+0xd8>)
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff fd4c 	bl	800b47c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3334      	adds	r3, #52	; 0x34
 800b9e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9ec:	491e      	ldr	r1, [pc, #120]	; (800ba68 <sync_fs+0xdc>)
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fd44 	bl	800b47c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3334      	adds	r3, #52	; 0x34
 800b9f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	4619      	mov	r1, r3
 800ba02:	4610      	mov	r0, r2
 800ba04:	f7ff fd3a 	bl	800b47c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3334      	adds	r3, #52	; 0x34
 800ba0c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7ff fd30 	bl	800b47c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	7858      	ldrb	r0, [r3, #1]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba34:	2301      	movs	r3, #1
 800ba36:	f7ff fc8d 	bl	800b354 <disk_write>
			fs->fsi_flag = 0;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	2200      	movs	r2, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff fca3 	bl	800b394 <disk_ioctl>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <sync_fs+0xcc>
 800ba54:	2301      	movs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	41615252 	.word	0x41615252
 800ba68:	61417272 	.word	0x61417272

0800ba6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	3b02      	subs	r3, #2
 800ba7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	3b02      	subs	r3, #2
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d301      	bcc.n	800ba8c <clust2sect+0x20>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e008      	b.n	800ba9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	895b      	ldrh	r3, [r3, #10]
 800ba90:	461a      	mov	r2, r3
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	fb03 f202 	mul.w	r2, r3, r2
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	4413      	add	r3, r2
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d904      	bls.n	800baca <get_fat+0x20>
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d302      	bcc.n	800bad0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800baca:	2301      	movs	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e0bb      	b.n	800bc48 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295
 800bad4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b03      	cmp	r3, #3
 800badc:	f000 8083 	beq.w	800bbe6 <get_fat+0x13c>
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	f300 80a7 	bgt.w	800bc34 <get_fat+0x18a>
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d002      	beq.n	800baf0 <get_fat+0x46>
 800baea:	2b02      	cmp	r3, #2
 800baec:	d056      	beq.n	800bb9c <get_fat+0xf2>
 800baee:	e0a1      	b.n	800bc34 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	085b      	lsrs	r3, r3, #1
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4413      	add	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	899b      	ldrh	r3, [r3, #12]
 800bb06:	4619      	mov	r1, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb0e:	4413      	add	r3, r2
 800bb10:	4619      	mov	r1, r3
 800bb12:	6938      	ldr	r0, [r7, #16]
 800bb14:	f7ff ff0c 	bl	800b930 <move_window>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f040 808d 	bne.w	800bc3a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	60fa      	str	r2, [r7, #12]
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	8992      	ldrh	r2, [r2, #12]
 800bb2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb2e:	fb01 f202 	mul.w	r2, r1, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	4413      	add	r3, r2
 800bb38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	899b      	ldrh	r3, [r3, #12]
 800bb46:	4619      	mov	r1, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb4e:	4413      	add	r3, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	6938      	ldr	r0, [r7, #16]
 800bb54:	f7ff feec 	bl	800b930 <move_window>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d16f      	bne.n	800bc3e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	899b      	ldrh	r3, [r3, #12]
 800bb62:	461a      	mov	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb6a:	fb01 f202 	mul.w	r2, r1, r2
 800bb6e:	1a9b      	subs	r3, r3, r2
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <get_fat+0xe8>
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	091b      	lsrs	r3, r3, #4
 800bb90:	e002      	b.n	800bb98 <get_fat+0xee>
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb98:	617b      	str	r3, [r7, #20]
			break;
 800bb9a:	e055      	b.n	800bc48 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	899b      	ldrh	r3, [r3, #12]
 800bba4:	085b      	lsrs	r3, r3, #1
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	4619      	mov	r1, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6938      	ldr	r0, [r7, #16]
 800bbb6:	f7ff febb 	bl	800b930 <move_window>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d140      	bne.n	800bc42 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	8992      	ldrh	r2, [r2, #12]
 800bbce:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbd2:	fb00 f202 	mul.w	r2, r0, r2
 800bbd6:	1a9b      	subs	r3, r3, r2
 800bbd8:	440b      	add	r3, r1
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff fbf8 	bl	800b3d0 <ld_word>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	617b      	str	r3, [r7, #20]
			break;
 800bbe4:	e030      	b.n	800bc48 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	899b      	ldrh	r3, [r3, #12]
 800bbee:	089b      	lsrs	r3, r3, #2
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6938      	ldr	r0, [r7, #16]
 800bc00:	f7ff fe96 	bl	800b930 <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d11d      	bne.n	800bc46 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	8992      	ldrh	r2, [r2, #12]
 800bc18:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc1c:	fb00 f202 	mul.w	r2, r0, r2
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	440b      	add	r3, r1
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff fbeb 	bl	800b400 <ld_dword>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc30:	617b      	str	r3, [r7, #20]
			break;
 800bc32:	e009      	b.n	800bc48 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	e006      	b.n	800bc48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc3a:	bf00      	nop
 800bc3c:	e004      	b.n	800bc48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc3e:	bf00      	nop
 800bc40:	e002      	b.n	800bc48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc42:	bf00      	nop
 800bc44:	e000      	b.n	800bc48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc46:	bf00      	nop
		}
	}

	return val;
 800bc48:	697b      	ldr	r3, [r7, #20]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc52:	b590      	push	{r4, r7, lr}
 800bc54:	b089      	sub	sp, #36	; 0x24
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	f240 8102 	bls.w	800be6e <put_fat+0x21c>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	f080 80fc 	bcs.w	800be6e <put_fat+0x21c>
		switch (fs->fs_type) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	f000 80b6 	beq.w	800bdec <put_fat+0x19a>
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	f300 80fd 	bgt.w	800be80 <put_fat+0x22e>
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d003      	beq.n	800bc92 <put_fat+0x40>
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	f000 8083 	beq.w	800bd96 <put_fat+0x144>
 800bc90:	e0f6      	b.n	800be80 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	61bb      	str	r3, [r7, #24]
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	085b      	lsrs	r3, r3, #1
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	899b      	ldrh	r3, [r3, #12]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcb0:	4413      	add	r3, r2
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fe3b 	bl	800b930 <move_window>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcbe:	7ffb      	ldrb	r3, [r7, #31]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f040 80d6 	bne.w	800be72 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	61ba      	str	r2, [r7, #24]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	8992      	ldrh	r2, [r2, #12]
 800bcd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcda:	fb00 f202 	mul.w	r2, r0, r2
 800bcde:	1a9b      	subs	r3, r3, r2
 800bce0:	440b      	add	r3, r1
 800bce2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00d      	beq.n	800bd0a <put_fat+0xb8>
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b25b      	sxtb	r3, r3
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	b25a      	sxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	b25b      	sxtb	r3, r3
 800bd02:	4313      	orrs	r3, r2
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	e001      	b.n	800bd0e <put_fat+0xbc>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	899b      	ldrh	r3, [r3, #12]
 800bd20:	4619      	mov	r1, r3
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd28:	4413      	add	r3, r2
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff fdff 	bl	800b930 <move_window>
 800bd32:	4603      	mov	r3, r0
 800bd34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f040 809c 	bne.w	800be76 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	899b      	ldrh	r3, [r3, #12]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd50:	fb00 f202 	mul.w	r2, r0, r2
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	440b      	add	r3, r1
 800bd58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	f003 0301 	and.w	r3, r3, #1
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <put_fat+0x11a>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	091b      	lsrs	r3, r3, #4
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	e00e      	b.n	800bd8a <put_fat+0x138>
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	f023 030f 	bic.w	r3, r3, #15
 800bd76:	b25a      	sxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	0a1b      	lsrs	r3, r3, #8
 800bd7c:	b25b      	sxtb	r3, r3
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	b25b      	sxtb	r3, r3
 800bd84:	4313      	orrs	r3, r2
 800bd86:	b25b      	sxtb	r3, r3
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2201      	movs	r2, #1
 800bd92:	70da      	strb	r2, [r3, #3]
			break;
 800bd94:	e074      	b.n	800be80 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	899b      	ldrh	r3, [r3, #12]
 800bd9e:	085b      	lsrs	r3, r3, #1
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	4619      	mov	r1, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdaa:	4413      	add	r3, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff fdbe 	bl	800b930 <move_window>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdb8:	7ffb      	ldrb	r3, [r7, #31]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d15d      	bne.n	800be7a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	8992      	ldrh	r2, [r2, #12]
 800bdcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdd0:	fb00 f202 	mul.w	r2, r0, r2
 800bdd4:	1a9b      	subs	r3, r3, r2
 800bdd6:	440b      	add	r3, r1
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	b292      	uxth	r2, r2
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fb31 	bl	800b446 <st_word>
			fs->wflag = 1;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2201      	movs	r2, #1
 800bde8:	70da      	strb	r2, [r3, #3]
			break;
 800bdea:	e049      	b.n	800be80 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	899b      	ldrh	r3, [r3, #12]
 800bdf4:	089b      	lsrs	r3, r3, #2
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	fbb3 f3f1 	udiv	r3, r3, r1
 800be00:	4413      	add	r3, r2
 800be02:	4619      	mov	r1, r3
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff fd93 	bl	800b930 <move_window>
 800be0a:	4603      	mov	r3, r0
 800be0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be0e:	7ffb      	ldrb	r3, [r7, #31]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d134      	bne.n	800be7e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	8992      	ldrh	r2, [r2, #12]
 800be28:	fbb3 f0f2 	udiv	r0, r3, r2
 800be2c:	fb00 f202 	mul.w	r2, r0, r2
 800be30:	1a9b      	subs	r3, r3, r2
 800be32:	440b      	add	r3, r1
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff fae3 	bl	800b400 <ld_dword>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be40:	4323      	orrs	r3, r4
 800be42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	8992      	ldrh	r2, [r2, #12]
 800be52:	fbb3 f0f2 	udiv	r0, r3, r2
 800be56:	fb00 f202 	mul.w	r2, r0, r2
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	440b      	add	r3, r1
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fb0b 	bl	800b47c <st_dword>
			fs->wflag = 1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	70da      	strb	r2, [r3, #3]
			break;
 800be6c:	e008      	b.n	800be80 <put_fat+0x22e>
		}
	}
 800be6e:	bf00      	nop
 800be70:	e006      	b.n	800be80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800be72:	bf00      	nop
 800be74:	e004      	b.n	800be80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800be76:	bf00      	nop
 800be78:	e002      	b.n	800be80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800be7a:	bf00      	nop
 800be7c:	e000      	b.n	800be80 <put_fat+0x22e>
			if (res != FR_OK) break;
 800be7e:	bf00      	nop
	return res;
 800be80:	7ffb      	ldrb	r3, [r7, #31]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3724      	adds	r7, #36	; 0x24
 800be86:	46bd      	mov	sp, r7
 800be88:	bd90      	pop	{r4, r7, pc}

0800be8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b088      	sub	sp, #32
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d904      	bls.n	800beb0 <remove_chain+0x26>
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	429a      	cmp	r2, r3
 800beae:	d301      	bcc.n	800beb4 <remove_chain+0x2a>
 800beb0:	2302      	movs	r3, #2
 800beb2:	e04b      	b.n	800bf4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00c      	beq.n	800bed4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800beba:	f04f 32ff 	mov.w	r2, #4294967295
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	69b8      	ldr	r0, [r7, #24]
 800bec2:	f7ff fec6 	bl	800bc52 <put_fat>
 800bec6:	4603      	mov	r3, r0
 800bec8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800beca:	7ffb      	ldrb	r3, [r7, #31]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <remove_chain+0x4a>
 800bed0:	7ffb      	ldrb	r3, [r7, #31]
 800bed2:	e03b      	b.n	800bf4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bed4:	68b9      	ldr	r1, [r7, #8]
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7ff fde7 	bl	800baaa <get_fat>
 800bedc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d031      	beq.n	800bf48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d101      	bne.n	800beee <remove_chain+0x64>
 800beea:	2302      	movs	r3, #2
 800beec:	e02e      	b.n	800bf4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d101      	bne.n	800befa <remove_chain+0x70>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e028      	b.n	800bf4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800befa:	2200      	movs	r2, #0
 800befc:	68b9      	ldr	r1, [r7, #8]
 800befe:	69b8      	ldr	r0, [r7, #24]
 800bf00:	f7ff fea7 	bl	800bc52 <put_fat>
 800bf04:	4603      	mov	r3, r0
 800bf06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf08:	7ffb      	ldrb	r3, [r7, #31]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <remove_chain+0x88>
 800bf0e:	7ffb      	ldrb	r3, [r7, #31]
 800bf10:	e01c      	b.n	800bf4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	695a      	ldr	r2, [r3, #20]
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	3b02      	subs	r3, #2
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d20b      	bcs.n	800bf38 <remove_chain+0xae>
			fs->free_clst++;
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	791b      	ldrb	r3, [r3, #4]
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d3c6      	bcc.n	800bed4 <remove_chain+0x4a>
 800bf46:	e000      	b.n	800bf4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10d      	bne.n	800bf86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <create_chain+0x2c>
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d31b      	bcc.n	800bfb8 <create_chain+0x64>
 800bf80:	2301      	movs	r3, #1
 800bf82:	61bb      	str	r3, [r7, #24]
 800bf84:	e018      	b.n	800bfb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff fd8e 	bl	800baaa <get_fat>
 800bf8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d801      	bhi.n	800bf9a <create_chain+0x46>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e070      	b.n	800c07c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d101      	bne.n	800bfa6 <create_chain+0x52>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	e06a      	b.n	800c07c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d201      	bcs.n	800bfb4 <create_chain+0x60>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	e063      	b.n	800c07c <create_chain+0x128>
		scl = clst;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d307      	bcc.n	800bfdc <create_chain+0x88>
				ncl = 2;
 800bfcc:	2302      	movs	r3, #2
 800bfce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bfd0:	69fa      	ldr	r2, [r7, #28]
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d901      	bls.n	800bfdc <create_chain+0x88>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e04f      	b.n	800c07c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff fd63 	bl	800baaa <get_fat>
 800bfe4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00e      	beq.n	800c00a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d003      	beq.n	800bffa <create_chain+0xa6>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d101      	bne.n	800bffe <create_chain+0xaa>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	e03e      	b.n	800c07c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	429a      	cmp	r2, r3
 800c004:	d1da      	bne.n	800bfbc <create_chain+0x68>
 800c006:	2300      	movs	r3, #0
 800c008:	e038      	b.n	800c07c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c00a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c00c:	f04f 32ff 	mov.w	r2, #4294967295
 800c010:	69f9      	ldr	r1, [r7, #28]
 800c012:	6938      	ldr	r0, [r7, #16]
 800c014:	f7ff fe1d 	bl	800bc52 <put_fat>
 800c018:	4603      	mov	r3, r0
 800c01a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d109      	bne.n	800c036 <create_chain+0xe2>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d006      	beq.n	800c036 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6938      	ldr	r0, [r7, #16]
 800c02e:	f7ff fe10 	bl	800bc52 <put_fat>
 800c032:	4603      	mov	r3, r0
 800c034:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d116      	bne.n	800c06a <create_chain+0x116>
		fs->last_clst = ncl;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	69fa      	ldr	r2, [r7, #28]
 800c040:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	695a      	ldr	r2, [r3, #20]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	3b02      	subs	r3, #2
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d804      	bhi.n	800c05a <create_chain+0x106>
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	1e5a      	subs	r2, r3, #1
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	791b      	ldrb	r3, [r3, #4]
 800c05e:	f043 0301 	orr.w	r3, r3, #1
 800c062:	b2da      	uxtb	r2, r3
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	711a      	strb	r2, [r3, #4]
 800c068:	e007      	b.n	800c07a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d102      	bne.n	800c076 <create_chain+0x122>
 800c070:	f04f 33ff 	mov.w	r3, #4294967295
 800c074:	e000      	b.n	800c078 <create_chain+0x124>
 800c076:	2301      	movs	r3, #1
 800c078:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c07a:	69fb      	ldr	r3, [r7, #28]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	3304      	adds	r3, #4
 800c09a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	899b      	ldrh	r3, [r3, #12]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	8952      	ldrh	r2, [r2, #10]
 800c0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	1d1a      	adds	r2, r3, #4
 800c0b6:	613a      	str	r2, [r7, #16]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <clmt_clust+0x42>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e010      	b.n	800c0e8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d307      	bcc.n	800c0de <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0dc:	e7e9      	b.n	800c0b2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c0de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	4413      	add	r3, r2
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c10a:	d204      	bcs.n	800c116 <dir_sdi+0x22>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f003 031f 	and.w	r3, r3, #31
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c116:	2302      	movs	r3, #2
 800c118:	e071      	b.n	800c1fe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <dir_sdi+0x46>
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b02      	cmp	r3, #2
 800c132:	d902      	bls.n	800c13a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c138:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10c      	bne.n	800c15a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	8912      	ldrh	r2, [r2, #8]
 800c148:	4293      	cmp	r3, r2
 800c14a:	d301      	bcc.n	800c150 <dir_sdi+0x5c>
 800c14c:	2302      	movs	r3, #2
 800c14e:	e056      	b.n	800c1fe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	61da      	str	r2, [r3, #28]
 800c158:	e02d      	b.n	800c1b6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	895b      	ldrh	r3, [r3, #10]
 800c15e:	461a      	mov	r2, r3
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	899b      	ldrh	r3, [r3, #12]
 800c164:	fb02 f303 	mul.w	r3, r2, r3
 800c168:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c16a:	e019      	b.n	800c1a0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6979      	ldr	r1, [r7, #20]
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff fc9a 	bl	800baaa <get_fat>
 800c176:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17e:	d101      	bne.n	800c184 <dir_sdi+0x90>
 800c180:	2301      	movs	r3, #1
 800c182:	e03c      	b.n	800c1fe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d904      	bls.n	800c194 <dir_sdi+0xa0>
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	429a      	cmp	r2, r3
 800c192:	d301      	bcc.n	800c198 <dir_sdi+0xa4>
 800c194:	2302      	movs	r3, #2
 800c196:	e032      	b.n	800c1fe <dir_sdi+0x10a>
			ofs -= csz;
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d2e1      	bcs.n	800c16c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c1a8:	6979      	ldr	r1, [r7, #20]
 800c1aa:	6938      	ldr	r0, [r7, #16]
 800c1ac:	f7ff fc5e 	bl	800ba6c <clust2sect>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	69db      	ldr	r3, [r3, #28]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <dir_sdi+0xd4>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	e01a      	b.n	800c1fe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	69da      	ldr	r2, [r3, #28]
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	899b      	ldrh	r3, [r3, #12]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1d8:	441a      	add	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	899b      	ldrh	r3, [r3, #12]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1f0:	fb00 f202 	mul.w	r2, r0, r2
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	18ca      	adds	r2, r1, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b086      	sub	sp, #24
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	3320      	adds	r3, #32
 800c21c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <dir_next+0x28>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c22c:	d301      	bcc.n	800c232 <dir_next+0x2c>
 800c22e:	2304      	movs	r3, #4
 800c230:	e0bb      	b.n	800c3aa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	899b      	ldrh	r3, [r3, #12]
 800c236:	461a      	mov	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c23e:	fb01 f202 	mul.w	r2, r1, r2
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	2b00      	cmp	r3, #0
 800c246:	f040 809d 	bne.w	800c384 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	699b      	ldr	r3, [r3, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10b      	bne.n	800c274 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	8912      	ldrh	r2, [r2, #8]
 800c264:	4293      	cmp	r3, r2
 800c266:	f0c0 808d 	bcc.w	800c384 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	61da      	str	r2, [r3, #28]
 800c270:	2304      	movs	r3, #4
 800c272:	e09a      	b.n	800c3aa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	899b      	ldrh	r3, [r3, #12]
 800c278:	461a      	mov	r2, r3
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	8952      	ldrh	r2, [r2, #10]
 800c284:	3a01      	subs	r2, #1
 800c286:	4013      	ands	r3, r2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d17b      	bne.n	800c384 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7ff fc08 	bl	800baaa <get_fat>
 800c29a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d801      	bhi.n	800c2a6 <dir_next+0xa0>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e081      	b.n	800c3aa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d101      	bne.n	800c2b2 <dir_next+0xac>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e07b      	b.n	800c3aa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d359      	bcc.n	800c370 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d104      	bne.n	800c2cc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	61da      	str	r2, [r3, #28]
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	e06e      	b.n	800c3aa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	f7ff fe3d 	bl	800bf54 <create_chain>
 800c2da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d101      	bne.n	800c2e6 <dir_next+0xe0>
 800c2e2:	2307      	movs	r3, #7
 800c2e4:	e061      	b.n	800c3aa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d101      	bne.n	800c2f0 <dir_next+0xea>
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	e05c      	b.n	800c3aa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d101      	bne.n	800c2fc <dir_next+0xf6>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e056      	b.n	800c3aa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f7ff fad3 	bl	800b8a8 <sync_window>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <dir_next+0x106>
 800c308:	2301      	movs	r3, #1
 800c30a:	e04e      	b.n	800c3aa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	899b      	ldrh	r3, [r3, #12]
 800c316:	461a      	mov	r2, r3
 800c318:	2100      	movs	r1, #0
 800c31a:	f7ff f8fc 	bl	800b516 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c31e:	2300      	movs	r3, #0
 800c320:	613b      	str	r3, [r7, #16]
 800c322:	6979      	ldr	r1, [r7, #20]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f7ff fba1 	bl	800ba6c <clust2sect>
 800c32a:	4602      	mov	r2, r0
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	631a      	str	r2, [r3, #48]	; 0x30
 800c330:	e012      	b.n	800c358 <dir_next+0x152>
						fs->wflag = 1;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fab5 	bl	800b8a8 <sync_window>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <dir_next+0x142>
 800c344:	2301      	movs	r3, #1
 800c346:	e030      	b.n	800c3aa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	3301      	adds	r3, #1
 800c34c:	613b      	str	r3, [r7, #16]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	631a      	str	r2, [r3, #48]	; 0x30
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	895b      	ldrh	r3, [r3, #10]
 800c35c:	461a      	mov	r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	4293      	cmp	r3, r2
 800c362:	d3e6      	bcc.n	800c332 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c376:	6979      	ldr	r1, [r7, #20]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fb77 	bl	800ba6c <clust2sect>
 800c37e:	4602      	mov	r2, r0
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	899b      	ldrh	r3, [r3, #12]
 800c394:	461a      	mov	r2, r3
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	fbb3 f0f2 	udiv	r0, r3, r2
 800c39c:	fb00 f202 	mul.w	r2, r0, r2
 800c3a0:	1a9b      	subs	r3, r3, r2
 800c3a2:	18ca      	adds	r2, r1, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b086      	sub	sp, #24
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff fe95 	bl	800c0f4 <dir_sdi>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d12b      	bne.n	800c42c <dir_alloc+0x7a>
		n = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	69db      	ldr	r3, [r3, #28]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f7ff faa6 	bl	800b930 <move_window>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11d      	bne.n	800c42a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2be5      	cmp	r3, #229	; 0xe5
 800c3f6:	d004      	beq.n	800c402 <dir_alloc+0x50>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a1b      	ldr	r3, [r3, #32]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d107      	bne.n	800c412 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	3301      	adds	r3, #1
 800c406:	613b      	str	r3, [r7, #16]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d102      	bne.n	800c416 <dir_alloc+0x64>
 800c410:	e00c      	b.n	800c42c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c412:	2300      	movs	r3, #0
 800c414:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c416:	2101      	movs	r1, #1
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff fef4 	bl	800c206 <dir_next>
 800c41e:	4603      	mov	r3, r0
 800c420:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0d7      	beq.n	800c3d8 <dir_alloc+0x26>
 800c428:	e000      	b.n	800c42c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c42a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d101      	bne.n	800c436 <dir_alloc+0x84>
 800c432:	2307      	movs	r3, #7
 800c434:	75fb      	strb	r3, [r7, #23]
	return res;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	331a      	adds	r3, #26
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe ffbe 	bl	800b3d0 <ld_word>
 800c454:	4603      	mov	r3, r0
 800c456:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d109      	bne.n	800c474 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	3314      	adds	r3, #20
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe ffb3 	bl	800b3d0 <ld_word>
 800c46a:	4603      	mov	r3, r0
 800c46c:	041b      	lsls	r3, r3, #16
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	331a      	adds	r3, #26
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	b292      	uxth	r2, r2
 800c492:	4611      	mov	r1, r2
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe ffd6 	bl	800b446 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d109      	bne.n	800c4b6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f103 0214 	add.w	r2, r3, #20
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	0c1b      	lsrs	r3, r3, #16
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	f7fe ffc8 	bl	800b446 <st_word>
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b086      	sub	sp, #24
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe10 	bl	800c0f4 <dir_sdi>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <dir_find+0x24>
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	e03e      	b.n	800c560 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6938      	ldr	r0, [r7, #16]
 800c4ea:	f7ff fa21 	bl	800b930 <move_window>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d12f      	bne.n	800c558 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <dir_find+0x4e>
 800c506:	2304      	movs	r3, #4
 800c508:	75fb      	strb	r3, [r7, #23]
 800c50a:	e028      	b.n	800c55e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	330b      	adds	r3, #11
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	330b      	adds	r3, #11
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	f003 0308 	and.w	r3, r3, #8
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10a      	bne.n	800c544 <dir_find+0x86>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a18      	ldr	r0, [r3, #32]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3324      	adds	r3, #36	; 0x24
 800c536:	220b      	movs	r2, #11
 800c538:	4619      	mov	r1, r3
 800c53a:	f7ff f807 	bl	800b54c <mem_cmp>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00b      	beq.n	800c55c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c544:	2100      	movs	r1, #0
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fe5d 	bl	800c206 <dir_next>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d0c5      	beq.n	800c4e2 <dir_find+0x24>
 800c556:	e002      	b.n	800c55e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c558:	bf00      	nop
 800c55a:	e000      	b.n	800c55e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c55c:	bf00      	nop

	return res;
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c576:	2101      	movs	r1, #1
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ff1a 	bl	800c3b2 <dir_alloc>
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d11c      	bne.n	800c5c2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	4619      	mov	r1, r3
 800c58e:	68b8      	ldr	r0, [r7, #8]
 800c590:	f7ff f9ce 	bl	800b930 <move_window>
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d111      	bne.n	800c5c2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe ffb5 	bl	800b516 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a18      	ldr	r0, [r3, #32]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	3324      	adds	r3, #36	; 0x24
 800c5b4:	220b      	movs	r2, #11
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	f7fe ff8c 	bl	800b4d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d04e      	beq.n	800c682 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	613b      	str	r3, [r7, #16]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800c5ec:	e021      	b.n	800c632 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a1a      	ldr	r2, [r3, #32]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	1c59      	adds	r1, r3, #1
 800c5f6:	6179      	str	r1, [r7, #20]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b20      	cmp	r3, #32
 800c602:	d100      	bne.n	800c606 <get_fileinfo+0x3a>
 800c604:	e015      	b.n	800c632 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	2b05      	cmp	r3, #5
 800c60a:	d101      	bne.n	800c610 <get_fileinfo+0x44>
 800c60c:	23e5      	movs	r3, #229	; 0xe5
 800c60e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2b09      	cmp	r3, #9
 800c614:	d106      	bne.n	800c624 <get_fileinfo+0x58>
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	613a      	str	r2, [r7, #16]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	4413      	add	r3, r2
 800c620:	222e      	movs	r2, #46	; 0x2e
 800c622:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	613a      	str	r2, [r7, #16]
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	4413      	add	r3, r2
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b0a      	cmp	r3, #10
 800c636:	d9da      	bls.n	800c5ee <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	4413      	add	r3, r2
 800c63e:	3309      	adds	r3, #9
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	7ada      	ldrb	r2, [r3, #11]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	331c      	adds	r3, #28
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fed3 	bl	800b400 <ld_dword>
 800c65a:	4602      	mov	r2, r0
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	3316      	adds	r3, #22
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe feca 	bl	800b400 <ld_dword>
 800c66c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	b29a      	uxth	r2, r3
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	80da      	strh	r2, [r3, #6]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	0c1b      	lsrs	r3, r3, #16
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	809a      	strh	r2, [r3, #4]
 800c680:	e000      	b.n	800c684 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c682:	bf00      	nop
}
 800c684:	3718      	adds	r7, #24
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
	...

0800c68c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3324      	adds	r3, #36	; 0x24
 800c6a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6a2:	220b      	movs	r2, #11
 800c6a4:	2120      	movs	r1, #32
 800c6a6:	68b8      	ldr	r0, [r7, #8]
 800c6a8:	f7fe ff35 	bl	800b516 <mem_set>
	si = i = 0; ni = 8;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	613b      	str	r3, [r7, #16]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	2308      	movs	r3, #8
 800c6b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	61fa      	str	r2, [r7, #28]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6c6:	7efb      	ldrb	r3, [r7, #27]
 800c6c8:	2b20      	cmp	r3, #32
 800c6ca:	d94e      	bls.n	800c76a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c6cc:	7efb      	ldrb	r3, [r7, #27]
 800c6ce:	2b2f      	cmp	r3, #47	; 0x2f
 800c6d0:	d006      	beq.n	800c6e0 <create_name+0x54>
 800c6d2:	7efb      	ldrb	r3, [r7, #27]
 800c6d4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6d6:	d110      	bne.n	800c6fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6d8:	e002      	b.n	800c6e0 <create_name+0x54>
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b2f      	cmp	r3, #47	; 0x2f
 800c6ea:	d0f6      	beq.n	800c6da <create_name+0x4e>
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6f6:	d0f0      	beq.n	800c6da <create_name+0x4e>
			break;
 800c6f8:	e038      	b.n	800c76c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c6fa:	7efb      	ldrb	r3, [r7, #27]
 800c6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c6fe:	d003      	beq.n	800c708 <create_name+0x7c>
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	429a      	cmp	r2, r3
 800c706:	d30c      	bcc.n	800c722 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b0b      	cmp	r3, #11
 800c70c:	d002      	beq.n	800c714 <create_name+0x88>
 800c70e:	7efb      	ldrb	r3, [r7, #27]
 800c710:	2b2e      	cmp	r3, #46	; 0x2e
 800c712:	d001      	beq.n	800c718 <create_name+0x8c>
 800c714:	2306      	movs	r3, #6
 800c716:	e044      	b.n	800c7a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c718:	2308      	movs	r3, #8
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	230b      	movs	r3, #11
 800c71e:	617b      	str	r3, [r7, #20]
			continue;
 800c720:	e022      	b.n	800c768 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c722:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c726:	2b00      	cmp	r3, #0
 800c728:	da04      	bge.n	800c734 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c72a:	7efb      	ldrb	r3, [r7, #27]
 800c72c:	3b80      	subs	r3, #128	; 0x80
 800c72e:	4a1f      	ldr	r2, [pc, #124]	; (800c7ac <create_name+0x120>)
 800c730:	5cd3      	ldrb	r3, [r2, r3]
 800c732:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c734:	7efb      	ldrb	r3, [r7, #27]
 800c736:	4619      	mov	r1, r3
 800c738:	481d      	ldr	r0, [pc, #116]	; (800c7b0 <create_name+0x124>)
 800c73a:	f7fe ff2e 	bl	800b59a <chk_chr>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d001      	beq.n	800c748 <create_name+0xbc>
 800c744:	2306      	movs	r3, #6
 800c746:	e02c      	b.n	800c7a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c748:	7efb      	ldrb	r3, [r7, #27]
 800c74a:	2b60      	cmp	r3, #96	; 0x60
 800c74c:	d905      	bls.n	800c75a <create_name+0xce>
 800c74e:	7efb      	ldrb	r3, [r7, #27]
 800c750:	2b7a      	cmp	r3, #122	; 0x7a
 800c752:	d802      	bhi.n	800c75a <create_name+0xce>
 800c754:	7efb      	ldrb	r3, [r7, #27]
 800c756:	3b20      	subs	r3, #32
 800c758:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	613a      	str	r2, [r7, #16]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	4413      	add	r3, r2
 800c764:	7efa      	ldrb	r2, [r7, #27]
 800c766:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c768:	e7a6      	b.n	800c6b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c76a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	441a      	add	r2, r3
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <create_name+0xf4>
 800c77c:	2306      	movs	r3, #6
 800c77e:	e010      	b.n	800c7a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2be5      	cmp	r3, #229	; 0xe5
 800c786:	d102      	bne.n	800c78e <create_name+0x102>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2205      	movs	r2, #5
 800c78c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c78e:	7efb      	ldrb	r3, [r7, #27]
 800c790:	2b20      	cmp	r3, #32
 800c792:	d801      	bhi.n	800c798 <create_name+0x10c>
 800c794:	2204      	movs	r2, #4
 800c796:	e000      	b.n	800c79a <create_name+0x10e>
 800c798:	2200      	movs	r2, #0
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	330b      	adds	r3, #11
 800c79e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3720      	adds	r7, #32
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0801d2e0 	.word	0x0801d2e0
 800c7b0:	08012060 	.word	0x08012060

0800c7b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c7c8:	e002      	b.n	800c7d0 <follow_path+0x1c>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	603b      	str	r3, [r7, #0]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b2f      	cmp	r3, #47	; 0x2f
 800c7d6:	d0f8      	beq.n	800c7ca <follow_path+0x16>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c7de:	d0f4      	beq.n	800c7ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b1f      	cmp	r3, #31
 800c7ec:	d80a      	bhi.n	800c804 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2280      	movs	r2, #128	; 0x80
 800c7f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff fc7b 	bl	800c0f4 <dir_sdi>
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]
 800c802:	e048      	b.n	800c896 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c804:	463b      	mov	r3, r7
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff ff3f 	bl	800c68c <create_name>
 800c80e:	4603      	mov	r3, r0
 800c810:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d139      	bne.n	800c88c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff fe50 	bl	800c4be <dir_find>
 800c81e:	4603      	mov	r3, r0
 800c820:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c828:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	2b04      	cmp	r3, #4
 800c834:	d12c      	bne.n	800c890 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c836:	7afb      	ldrb	r3, [r7, #11]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d127      	bne.n	800c890 <follow_path+0xdc>
 800c840:	2305      	movs	r3, #5
 800c842:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c844:	e024      	b.n	800c890 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c846:	7afb      	ldrb	r3, [r7, #11]
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d121      	bne.n	800c894 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	799b      	ldrb	r3, [r3, #6]
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c85c:	2305      	movs	r3, #5
 800c85e:	75fb      	strb	r3, [r7, #23]
 800c860:	e019      	b.n	800c896 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	8992      	ldrh	r2, [r2, #12]
 800c870:	fbb3 f0f2 	udiv	r0, r3, r2
 800c874:	fb00 f202 	mul.w	r2, r0, r2
 800c878:	1a9b      	subs	r3, r3, r2
 800c87a:	440b      	add	r3, r1
 800c87c:	4619      	mov	r1, r3
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff fdde 	bl	800c440 <ld_clust>
 800c884:	4602      	mov	r2, r0
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c88a:	e7bb      	b.n	800c804 <follow_path+0x50>
			if (res != FR_OK) break;
 800c88c:	bf00      	nop
 800c88e:	e002      	b.n	800c896 <follow_path+0xe2>
				break;
 800c890:	bf00      	nop
 800c892:	e000      	b.n	800c896 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c894:	bf00      	nop
			}
		}
	}

	return res;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d031      	beq.n	800c91a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	617b      	str	r3, [r7, #20]
 800c8bc:	e002      	b.n	800c8c4 <get_ldnumber+0x24>
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	d903      	bls.n	800c8d4 <get_ldnumber+0x34>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b3a      	cmp	r3, #58	; 0x3a
 800c8d2:	d1f4      	bne.n	800c8be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b3a      	cmp	r3, #58	; 0x3a
 800c8da:	d11c      	bne.n	800c916 <get_ldnumber+0x76>
			tp = *path;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	1c5a      	adds	r2, r3, #1
 800c8e6:	60fa      	str	r2, [r7, #12]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	3b30      	subs	r3, #48	; 0x30
 800c8ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d80e      	bhi.n	800c912 <get_ldnumber+0x72>
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d10a      	bne.n	800c912 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d107      	bne.n	800c912 <get_ldnumber+0x72>
					vol = (int)i;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	3301      	adds	r3, #1
 800c90a:	617b      	str	r3, [r7, #20]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	e002      	b.n	800c91c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c916:	2300      	movs	r3, #0
 800c918:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c91a:	693b      	ldr	r3, [r7, #16]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	70da      	strb	r2, [r3, #3]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7fe fff4 	bl	800b930 <move_window>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <check_fs+0x2a>
 800c94e:	2304      	movs	r3, #4
 800c950:	e038      	b.n	800c9c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3334      	adds	r3, #52	; 0x34
 800c956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fd38 	bl	800b3d0 <ld_word>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c968:	429a      	cmp	r2, r3
 800c96a:	d001      	beq.n	800c970 <check_fs+0x48>
 800c96c:	2303      	movs	r3, #3
 800c96e:	e029      	b.n	800c9c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c976:	2be9      	cmp	r3, #233	; 0xe9
 800c978:	d009      	beq.n	800c98e <check_fs+0x66>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c980:	2beb      	cmp	r3, #235	; 0xeb
 800c982:	d11e      	bne.n	800c9c2 <check_fs+0x9a>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c98a:	2b90      	cmp	r3, #144	; 0x90
 800c98c:	d119      	bne.n	800c9c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3334      	adds	r3, #52	; 0x34
 800c992:	3336      	adds	r3, #54	; 0x36
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fd33 	bl	800b400 <ld_dword>
 800c99a:	4603      	mov	r3, r0
 800c99c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9a0:	4a0a      	ldr	r2, [pc, #40]	; (800c9cc <check_fs+0xa4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d101      	bne.n	800c9aa <check_fs+0x82>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e00c      	b.n	800c9c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3334      	adds	r3, #52	; 0x34
 800c9ae:	3352      	adds	r3, #82	; 0x52
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fe fd25 	bl	800b400 <ld_dword>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	4a05      	ldr	r2, [pc, #20]	; (800c9d0 <check_fs+0xa8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d101      	bne.n	800c9c2 <check_fs+0x9a>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e000      	b.n	800c9c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9c2:	2302      	movs	r3, #2
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	00544146 	.word	0x00544146
 800c9d0:	33544146 	.word	0x33544146

0800c9d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b096      	sub	sp, #88	; 0x58
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f7ff ff59 	bl	800c8a0 <get_ldnumber>
 800c9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	da01      	bge.n	800c9fa <find_volume+0x26>
 800c9f6:	230b      	movs	r3, #11
 800c9f8:	e262      	b.n	800cec0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9fa:	4a9f      	ldr	r2, [pc, #636]	; (800cc78 <find_volume+0x2a4>)
 800c9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <find_volume+0x3a>
 800ca0a:	230c      	movs	r3, #12
 800ca0c:	e258      	b.n	800cec0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	f023 0301 	bic.w	r3, r3, #1
 800ca1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d01a      	beq.n	800ca5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	785b      	ldrb	r3, [r3, #1]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fc33 	bl	800b294 <disk_status>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10c      	bne.n	800ca5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca40:	79fb      	ldrb	r3, [r7, #7]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <find_volume+0x82>
 800ca46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca52:	230a      	movs	r3, #10
 800ca54:	e234      	b.n	800cec0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ca56:	2300      	movs	r3, #0
 800ca58:	e232      	b.n	800cec0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	785b      	ldrb	r3, [r3, #1]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fe fc2b 	bl	800b2c8 <disk_initialize>
 800ca72:	4603      	mov	r3, r0
 800ca74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca84:	2303      	movs	r3, #3
 800ca86:	e21b      	b.n	800cec0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca88:	79fb      	ldrb	r3, [r7, #7]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <find_volume+0xca>
 800ca8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca9a:	230a      	movs	r3, #10
 800ca9c:	e210      	b.n	800cec0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	7858      	ldrb	r0, [r3, #1]
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	330c      	adds	r3, #12
 800caa6:	461a      	mov	r2, r3
 800caa8:	2102      	movs	r1, #2
 800caaa:	f7fe fc73 	bl	800b394 <disk_ioctl>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <find_volume+0xe4>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e203      	b.n	800cec0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	899b      	ldrh	r3, [r3, #12]
 800cabc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cac0:	d80d      	bhi.n	800cade <find_volume+0x10a>
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	899b      	ldrh	r3, [r3, #12]
 800cac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caca:	d308      	bcc.n	800cade <find_volume+0x10a>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	899b      	ldrh	r3, [r3, #12]
 800cad0:	461a      	mov	r2, r3
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	899b      	ldrh	r3, [r3, #12]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	4013      	ands	r3, r2
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <find_volume+0x10e>
 800cade:	2301      	movs	r3, #1
 800cae0:	e1ee      	b.n	800cec0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caea:	f7ff ff1d 	bl	800c928 <check_fs>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800caf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d149      	bne.n	800cb90 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cafc:	2300      	movs	r3, #0
 800cafe:	643b      	str	r3, [r7, #64]	; 0x40
 800cb00:	e01e      	b.n	800cb40 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb0a:	011b      	lsls	r3, r3, #4
 800cb0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cb10:	4413      	add	r3, r2
 800cb12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb16:	3304      	adds	r3, #4
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d006      	beq.n	800cb2c <find_volume+0x158>
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	3308      	adds	r3, #8
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fc6c 	bl	800b400 <ld_dword>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	e000      	b.n	800cb2e <find_volume+0x15a>
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	3358      	adds	r3, #88	; 0x58
 800cb34:	443b      	add	r3, r7
 800cb36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d9dd      	bls.n	800cb02 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb46:	2300      	movs	r3, #0
 800cb48:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <find_volume+0x182>
 800cb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb52:	3b01      	subs	r3, #1
 800cb54:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	3358      	adds	r3, #88	; 0x58
 800cb5c:	443b      	add	r3, r7
 800cb5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d005      	beq.n	800cb76 <find_volume+0x1a2>
 800cb6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb6e:	f7ff fedb 	bl	800c928 <check_fs>
 800cb72:	4603      	mov	r3, r0
 800cb74:	e000      	b.n	800cb78 <find_volume+0x1a4>
 800cb76:	2303      	movs	r3, #3
 800cb78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d905      	bls.n	800cb90 <find_volume+0x1bc>
 800cb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb86:	3301      	adds	r3, #1
 800cb88:	643b      	str	r3, [r7, #64]	; 0x40
 800cb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8c:	2b03      	cmp	r3, #3
 800cb8e:	d9e2      	bls.n	800cb56 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb94:	2b04      	cmp	r3, #4
 800cb96:	d101      	bne.n	800cb9c <find_volume+0x1c8>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e191      	b.n	800cec0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d901      	bls.n	800cba8 <find_volume+0x1d4>
 800cba4:	230d      	movs	r3, #13
 800cba6:	e18b      	b.n	800cec0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	3334      	adds	r3, #52	; 0x34
 800cbac:	330b      	adds	r3, #11
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe fc0e 	bl	800b3d0 <ld_word>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	899b      	ldrh	r3, [r3, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d001      	beq.n	800cbc4 <find_volume+0x1f0>
 800cbc0:	230d      	movs	r3, #13
 800cbc2:	e17d      	b.n	800cec0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	3334      	adds	r3, #52	; 0x34
 800cbc8:	3316      	adds	r3, #22
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fc00 	bl	800b3d0 <ld_word>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <find_volume+0x214>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	3334      	adds	r3, #52	; 0x34
 800cbde:	3324      	adds	r3, #36	; 0x24
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe fc0d 	bl	800b400 <ld_dword>
 800cbe6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	789b      	ldrb	r3, [r3, #2]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d005      	beq.n	800cc0c <find_volume+0x238>
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	789b      	ldrb	r3, [r3, #2]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d001      	beq.n	800cc0c <find_volume+0x238>
 800cc08:	230d      	movs	r3, #13
 800cc0a:	e159      	b.n	800cec0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	789b      	ldrb	r3, [r3, #2]
 800cc10:	461a      	mov	r2, r3
 800cc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc28:	895b      	ldrh	r3, [r3, #10]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <find_volume+0x26c>
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	895b      	ldrh	r3, [r3, #10]
 800cc32:	461a      	mov	r2, r3
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	895b      	ldrh	r3, [r3, #10]
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <find_volume+0x270>
 800cc40:	230d      	movs	r3, #13
 800cc42:	e13d      	b.n	800cec0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	3334      	adds	r3, #52	; 0x34
 800cc48:	3311      	adds	r3, #17
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fe fbc0 	bl	800b3d0 <ld_word>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	891b      	ldrh	r3, [r3, #8]
 800cc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc5e:	8992      	ldrh	r2, [r2, #12]
 800cc60:	0952      	lsrs	r2, r2, #5
 800cc62:	b292      	uxth	r2, r2
 800cc64:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc68:	fb01 f202 	mul.w	r2, r1, r2
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d003      	beq.n	800cc7c <find_volume+0x2a8>
 800cc74:	230d      	movs	r3, #13
 800cc76:	e123      	b.n	800cec0 <find_volume+0x4ec>
 800cc78:	20005a30 	.word	0x20005a30

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	3334      	adds	r3, #52	; 0x34
 800cc80:	3313      	adds	r3, #19
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fba4 	bl	800b3d0 <ld_word>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <find_volume+0x2cc>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	3334      	adds	r3, #52	; 0x34
 800cc96:	3320      	adds	r3, #32
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe fbb1 	bl	800b400 <ld_dword>
 800cc9e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	3334      	adds	r3, #52	; 0x34
 800cca4:	330e      	adds	r3, #14
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fe fb92 	bl	800b3d0 <ld_word>
 800ccac:	4603      	mov	r3, r0
 800ccae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ccb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <find_volume+0x2e6>
 800ccb6:	230d      	movs	r3, #13
 800ccb8:	e102      	b.n	800cec0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccbe:	4413      	add	r3, r2
 800ccc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccc2:	8911      	ldrh	r1, [r2, #8]
 800ccc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccc6:	8992      	ldrh	r2, [r2, #12]
 800ccc8:	0952      	lsrs	r2, r2, #5
 800ccca:	b292      	uxth	r2, r2
 800cccc:	fbb1 f2f2 	udiv	r2, r1, r2
 800ccd0:	b292      	uxth	r2, r2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ccd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d201      	bcs.n	800cce2 <find_volume+0x30e>
 800ccde:	230d      	movs	r3, #13
 800cce0:	e0ee      	b.n	800cec0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccea:	8952      	ldrh	r2, [r2, #10]
 800ccec:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <find_volume+0x328>
 800ccf8:	230d      	movs	r3, #13
 800ccfa:	e0e1      	b.n	800cec0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d802      	bhi.n	800cd12 <find_volume+0x33e>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d802      	bhi.n	800cd22 <find_volume+0x34e>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	1c9a      	adds	r2, r3, #2
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd2e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd34:	441a      	add	r2, r3
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cd3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	441a      	add	r2, r3
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800cd44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d11e      	bne.n	800cd8a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	3334      	adds	r3, #52	; 0x34
 800cd50:	332a      	adds	r3, #42	; 0x2a
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fb3c 	bl	800b3d0 <ld_word>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <find_volume+0x38e>
 800cd5e:	230d      	movs	r3, #13
 800cd60:	e0ae      	b.n	800cec0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	891b      	ldrh	r3, [r3, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d001      	beq.n	800cd6e <find_volume+0x39a>
 800cd6a:	230d      	movs	r3, #13
 800cd6c:	e0a8      	b.n	800cec0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	3334      	adds	r3, #52	; 0x34
 800cd72:	332c      	adds	r3, #44	; 0x2c
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fb43 	bl	800b400 <ld_dword>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	647b      	str	r3, [r7, #68]	; 0x44
 800cd88:	e01f      	b.n	800cdca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	891b      	ldrh	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <find_volume+0x3c2>
 800cd92:	230d      	movs	r3, #13
 800cd94:	e094      	b.n	800cec0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd9c:	441a      	add	r2, r3
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cda2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d103      	bne.n	800cdb2 <find_volume+0x3de>
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	e00a      	b.n	800cdc8 <find_volume+0x3f4>
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	4413      	add	r3, r2
 800cdbc:	085a      	lsrs	r2, r3, #1
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cdc8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	69da      	ldr	r2, [r3, #28]
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	899b      	ldrh	r3, [r3, #12]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdd6:	440b      	add	r3, r1
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cddc:	8989      	ldrh	r1, [r1, #12]
 800cdde:	fbb3 f3f1 	udiv	r3, r3, r1
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d201      	bcs.n	800cdea <find_volume+0x416>
 800cde6:	230d      	movs	r3, #13
 800cde8:	e06a      	b.n	800cec0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdec:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf0:	615a      	str	r2, [r3, #20]
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	695a      	ldr	r2, [r3, #20]
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	2280      	movs	r2, #128	; 0x80
 800cdfe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	d149      	bne.n	800ce9c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	3334      	adds	r3, #52	; 0x34
 800ce0c:	3330      	adds	r3, #48	; 0x30
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe fade 	bl	800b3d0 <ld_word>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d140      	bne.n	800ce9c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce22:	f7fe fd85 	bl	800b930 <move_window>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d137      	bne.n	800ce9c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	2200      	movs	r2, #0
 800ce30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	3334      	adds	r3, #52	; 0x34
 800ce36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe fac8 	bl	800b3d0 <ld_word>
 800ce40:	4603      	mov	r3, r0
 800ce42:	461a      	mov	r2, r3
 800ce44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d127      	bne.n	800ce9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	3334      	adds	r3, #52	; 0x34
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe fad5 	bl	800b400 <ld_dword>
 800ce56:	4603      	mov	r3, r0
 800ce58:	4a1b      	ldr	r2, [pc, #108]	; (800cec8 <find_volume+0x4f4>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d11e      	bne.n	800ce9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	3334      	adds	r3, #52	; 0x34
 800ce62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe faca 	bl	800b400 <ld_dword>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	4a17      	ldr	r2, [pc, #92]	; (800cecc <find_volume+0x4f8>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d113      	bne.n	800ce9c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	3334      	adds	r3, #52	; 0x34
 800ce78:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe fabf 	bl	800b400 <ld_dword>
 800ce82:	4602      	mov	r2, r0
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	3334      	adds	r3, #52	; 0x34
 800ce8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe fab5 	bl	800b400 <ld_dword>
 800ce96:	4602      	mov	r2, r0
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cea2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cea4:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <find_volume+0x4fc>)
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	4b08      	ldr	r3, [pc, #32]	; (800ced0 <find_volume+0x4fc>)
 800ceae:	801a      	strh	r2, [r3, #0]
 800ceb0:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <find_volume+0x4fc>)
 800ceb2:	881a      	ldrh	r2, [r3, #0]
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ceb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ceba:	f7fe fcd1 	bl	800b860 <clear_lock>
#endif
	return FR_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3758      	adds	r7, #88	; 0x58
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	41615252 	.word	0x41615252
 800cecc:	61417272 	.word	0x61417272
 800ced0:	20005a34 	.word	0x20005a34

0800ced4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cede:	2309      	movs	r3, #9
 800cee0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01c      	beq.n	800cf22 <validate+0x4e>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d018      	beq.n	800cf22 <validate+0x4e>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d013      	beq.n	800cf22 <validate+0x4e>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	889a      	ldrh	r2, [r3, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	88db      	ldrh	r3, [r3, #6]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d10c      	bne.n	800cf22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe f9c0 	bl	800b294 <disk_status>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <validate+0x4e>
			res = FR_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <validate+0x5a>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	e000      	b.n	800cf30 <validate+0x5c>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	6013      	str	r3, [r2, #0]
	return res;
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf52:	f107 0310 	add.w	r3, r7, #16
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff fca2 	bl	800c8a0 <get_ldnumber>
 800cf5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	da01      	bge.n	800cf68 <f_mount+0x28>
 800cf64:	230b      	movs	r3, #11
 800cf66:	e02b      	b.n	800cfc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf68:	4a17      	ldr	r2, [pc, #92]	; (800cfc8 <f_mount+0x88>)
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d005      	beq.n	800cf84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf78:	69b8      	ldr	r0, [r7, #24]
 800cf7a:	f7fe fc71 	bl	800b860 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2200      	movs	r2, #0
 800cf82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	490d      	ldr	r1, [pc, #52]	; (800cfc8 <f_mount+0x88>)
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <f_mount+0x66>
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d001      	beq.n	800cfaa <f_mount+0x6a>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e00a      	b.n	800cfc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfaa:	f107 010c 	add.w	r1, r7, #12
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fd0d 	bl	800c9d4 <find_volume>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3720      	adds	r7, #32
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20005a30 	.word	0x20005a30

0800cfcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b098      	sub	sp, #96	; 0x60
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <f_open+0x18>
 800cfe0:	2309      	movs	r3, #9
 800cfe2:	e1bb      	b.n	800d35c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfec:	79fa      	ldrb	r2, [r7, #7]
 800cfee:	f107 0110 	add.w	r1, r7, #16
 800cff2:	f107 0308 	add.w	r3, r7, #8
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fcec 	bl	800c9d4 <find_volume>
 800cffc:	4603      	mov	r3, r0
 800cffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d006:	2b00      	cmp	r3, #0
 800d008:	f040 819f 	bne.w	800d34a <f_open+0x37e>
		dj.obj.fs = fs;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	f107 0314 	add.w	r3, r7, #20
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff fbcb 	bl	800c7b4 <follow_path>
 800d01e:	4603      	mov	r3, r0
 800d020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d11a      	bne.n	800d062 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d02c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d030:	b25b      	sxtb	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	da03      	bge.n	800d03e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d036:	2306      	movs	r3, #6
 800d038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d03c:	e011      	b.n	800d062 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	f023 0301 	bic.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	bf14      	ite	ne
 800d048:	2301      	movne	r3, #1
 800d04a:	2300      	moveq	r3, #0
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	f107 0314 	add.w	r3, r7, #20
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe faba 	bl	800b5d0 <chk_lock>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	f003 031c 	and.w	r3, r3, #28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d07f      	beq.n	800d16c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d070:	2b00      	cmp	r3, #0
 800d072:	d017      	beq.n	800d0a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d10e      	bne.n	800d09a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d07c:	f7fe fb04 	bl	800b688 <enq_lock>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <f_open+0xc8>
 800d086:	f107 0314 	add.w	r3, r7, #20
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff fa6c 	bl	800c568 <dir_register>
 800d090:	4603      	mov	r3, r0
 800d092:	e000      	b.n	800d096 <f_open+0xca>
 800d094:	2312      	movs	r3, #18
 800d096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	f043 0308 	orr.w	r3, r3, #8
 800d0a0:	71fb      	strb	r3, [r7, #7]
 800d0a2:	e010      	b.n	800d0c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0a4:	7ebb      	ldrb	r3, [r7, #26]
 800d0a6:	f003 0311 	and.w	r3, r3, #17
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <f_open+0xea>
					res = FR_DENIED;
 800d0ae:	2307      	movs	r3, #7
 800d0b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d0b4:	e007      	b.n	800d0c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	f003 0304 	and.w	r3, r3, #4
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <f_open+0xfa>
 800d0c0:	2308      	movs	r3, #8
 800d0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d0c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d168      	bne.n	800d1a0 <f_open+0x1d4>
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	f003 0308 	and.w	r3, r3, #8
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d063      	beq.n	800d1a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d0d8:	f7fd ff70 	bl	800afbc <get_fattime>
 800d0dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e0:	330e      	adds	r3, #14
 800d0e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fe f9c9 	bl	800b47c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ec:	3316      	adds	r3, #22
 800d0ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe f9c3 	bl	800b47c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f8:	330b      	adds	r3, #11
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d102:	4611      	mov	r1, r2
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff f99b 	bl	800c440 <ld_clust>
 800d10a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d110:	2200      	movs	r2, #0
 800d112:	4618      	mov	r0, r3
 800d114:	f7ff f9b3 	bl	800c47e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	331c      	adds	r3, #28
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe f9ac 	bl	800b47c <st_dword>
					fs->wflag = 1;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	2201      	movs	r2, #1
 800d128:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d037      	beq.n	800d1a0 <f_open+0x1d4>
						dw = fs->winsect;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d134:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d136:	f107 0314 	add.w	r3, r7, #20
 800d13a:	2200      	movs	r2, #0
 800d13c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fea3 	bl	800be8a <remove_chain>
 800d144:	4603      	mov	r3, r0
 800d146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d14a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d126      	bne.n	800d1a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fbea 	bl	800b930 <move_window>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d166:	3a01      	subs	r2, #1
 800d168:	611a      	str	r2, [r3, #16]
 800d16a:	e019      	b.n	800d1a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d170:	2b00      	cmp	r3, #0
 800d172:	d115      	bne.n	800d1a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d174:	7ebb      	ldrb	r3, [r7, #26]
 800d176:	f003 0310 	and.w	r3, r3, #16
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d17e:	2304      	movs	r3, #4
 800d180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d184:	e00c      	b.n	800d1a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	f003 0302 	and.w	r3, r3, #2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <f_open+0x1d4>
 800d190:	7ebb      	ldrb	r3, [r7, #26]
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	2b00      	cmp	r3, #0
 800d198:	d002      	beq.n	800d1a0 <f_open+0x1d4>
						res = FR_DENIED;
 800d19a:	2307      	movs	r3, #7
 800d19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d128      	bne.n	800d1fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	f003 0308 	and.w	r3, r3, #8
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d003      	beq.n	800d1ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	f023 0301 	bic.w	r3, r3, #1
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	bf14      	ite	ne
 800d1d2:	2301      	movne	r3, #1
 800d1d4:	2300      	moveq	r3, #0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	461a      	mov	r2, r3
 800d1da:	f107 0314 	add.w	r3, r7, #20
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fe fa73 	bl	800b6cc <inc_lock>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d102      	bne.n	800d1fa <f_open+0x22e>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f040 80a3 	bne.w	800d34a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d208:	4611      	mov	r1, r2
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7ff f918 	bl	800c440 <ld_clust>
 800d210:	4602      	mov	r2, r0
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d218:	331c      	adds	r3, #28
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe f8f0 	bl	800b400 <ld_dword>
 800d220:	4602      	mov	r2, r0
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	88da      	ldrh	r2, [r3, #6]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	79fa      	ldrb	r2, [r7, #7]
 800d23e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3330      	adds	r3, #48	; 0x30
 800d256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d25a:	2100      	movs	r1, #0
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe f95a 	bl	800b516 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d06e      	beq.n	800d34a <f_open+0x37e>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d06a      	beq.n	800d34a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68da      	ldr	r2, [r3, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	895b      	ldrh	r3, [r3, #10]
 800d280:	461a      	mov	r2, r3
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	899b      	ldrh	r3, [r3, #12]
 800d286:	fb02 f303 	mul.w	r3, r2, r3
 800d28a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	657b      	str	r3, [r7, #84]	; 0x54
 800d298:	e016      	b.n	800d2c8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fe fc03 	bl	800baaa <get_fat>
 800d2a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d2a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d802      	bhi.n	800d2b2 <f_open+0x2e6>
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d102      	bne.n	800d2c0 <f_open+0x2f4>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	657b      	str	r3, [r7, #84]	; 0x54
 800d2c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <f_open+0x30c>
 800d2d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d8e0      	bhi.n	800d29a <f_open+0x2ce>
				}
				fp->clust = clst;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d2de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d131      	bne.n	800d34a <f_open+0x37e>
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	899b      	ldrh	r3, [r3, #12]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2f2:	fb01 f202 	mul.w	r2, r1, r2
 800d2f6:	1a9b      	subs	r3, r3, r2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d026      	beq.n	800d34a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fbb3 	bl	800ba6c <clust2sect>
 800d306:	6478      	str	r0, [r7, #68]	; 0x44
 800d308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d103      	bne.n	800d316 <f_open+0x34a>
						res = FR_INT_ERR;
 800d30e:	2302      	movs	r3, #2
 800d310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d314:	e019      	b.n	800d34a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	899b      	ldrh	r3, [r3, #12]
 800d31a:	461a      	mov	r2, r3
 800d31c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d31e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d324:	441a      	add	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	7858      	ldrb	r0, [r3, #1]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6a1a      	ldr	r2, [r3, #32]
 800d338:	2301      	movs	r3, #1
 800d33a:	f7fd ffeb 	bl	800b314 <disk_read>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <f_open+0x37e>
 800d344:	2301      	movs	r3, #1
 800d346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d34a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d002      	beq.n	800d358 <f_open+0x38c>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3760      	adds	r7, #96	; 0x60
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08e      	sub	sp, #56	; 0x38
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f107 0214 	add.w	r2, r7, #20
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fda5 	bl	800ced4 <validate>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d394:	2b00      	cmp	r3, #0
 800d396:	d107      	bne.n	800d3a8 <f_read+0x44>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	7d5b      	ldrb	r3, [r3, #21]
 800d39c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <f_read+0x4a>
 800d3a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3ac:	e135      	b.n	800d61a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	7d1b      	ldrb	r3, [r3, #20]
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <f_read+0x5a>
 800d3ba:	2307      	movs	r3, #7
 800d3bc:	e12d      	b.n	800d61a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	f240 811e 	bls.w	800d610 <f_read+0x2ac>
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d3d8:	e11a      	b.n	800d610 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	8992      	ldrh	r2, [r2, #12]
 800d3e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3e6:	fb01 f202 	mul.w	r2, r1, r2
 800d3ea:	1a9b      	subs	r3, r3, r2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 80d5 	bne.w	800d59c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	8992      	ldrh	r2, [r2, #12]
 800d3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	8952      	ldrh	r2, [r2, #10]
 800d402:	3a01      	subs	r2, #1
 800d404:	4013      	ands	r3, r2
 800d406:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d12f      	bne.n	800d46e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d103      	bne.n	800d41e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	633b      	str	r3, [r7, #48]	; 0x30
 800d41c:	e013      	b.n	800d446 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	4619      	mov	r1, r3
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f7fe fe29 	bl	800c084 <clmt_clust>
 800d432:	6338      	str	r0, [r7, #48]	; 0x30
 800d434:	e007      	b.n	800d446 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	69db      	ldr	r3, [r3, #28]
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f7fe fb33 	bl	800baaa <get_fat>
 800d444:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d804      	bhi.n	800d456 <f_read+0xf2>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2202      	movs	r2, #2
 800d450:	755a      	strb	r2, [r3, #21]
 800d452:	2302      	movs	r3, #2
 800d454:	e0e1      	b.n	800d61a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45c:	d104      	bne.n	800d468 <f_read+0x104>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2201      	movs	r2, #1
 800d462:	755a      	strb	r2, [r3, #21]
 800d464:	2301      	movs	r3, #1
 800d466:	e0d8      	b.n	800d61a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d46c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	69db      	ldr	r3, [r3, #28]
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	f7fe faf8 	bl	800ba6c <clust2sect>
 800d47c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d104      	bne.n	800d48e <f_read+0x12a>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2202      	movs	r2, #2
 800d488:	755a      	strb	r2, [r3, #21]
 800d48a:	2302      	movs	r3, #2
 800d48c:	e0c5      	b.n	800d61a <f_read+0x2b6>
			sect += csect;
 800d48e:	69ba      	ldr	r2, [r7, #24]
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	4413      	add	r3, r2
 800d494:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	899b      	ldrh	r3, [r3, #12]
 800d49a:	461a      	mov	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d041      	beq.n	800d52e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	4413      	add	r3, r2
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	8952      	ldrh	r2, [r2, #10]
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d905      	bls.n	800d4c4 <f_read+0x160>
					cc = fs->csize - csect;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	895b      	ldrh	r3, [r3, #10]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	7858      	ldrb	r0, [r3, #1]
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	69ba      	ldr	r2, [r7, #24]
 800d4cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4ce:	f7fd ff21 	bl	800b314 <disk_read>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <f_read+0x17e>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	755a      	strb	r2, [r3, #21]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e09b      	b.n	800d61a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da18      	bge.n	800d51e <f_read+0x1ba>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6a1a      	ldr	r2, [r3, #32]
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d911      	bls.n	800d51e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6a1a      	ldr	r2, [r3, #32]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	8992      	ldrh	r2, [r2, #12]
 800d506:	fb02 f303 	mul.w	r3, r2, r3
 800d50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50c:	18d0      	adds	r0, r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	899b      	ldrh	r3, [r3, #12]
 800d518:	461a      	mov	r2, r3
 800d51a:	f7fd ffdb 	bl	800b4d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	899b      	ldrh	r3, [r3, #12]
 800d522:	461a      	mov	r2, r3
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	fb02 f303 	mul.w	r3, r2, r3
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d52c:	e05c      	b.n	800d5e8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	69ba      	ldr	r2, [r7, #24]
 800d534:	429a      	cmp	r2, r3
 800d536:	d02e      	beq.n	800d596 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	7d1b      	ldrb	r3, [r3, #20]
 800d53c:	b25b      	sxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da18      	bge.n	800d574 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	7858      	ldrb	r0, [r3, #1]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a1a      	ldr	r2, [r3, #32]
 800d550:	2301      	movs	r3, #1
 800d552:	f7fd feff 	bl	800b354 <disk_write>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <f_read+0x202>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2201      	movs	r2, #1
 800d560:	755a      	strb	r2, [r3, #21]
 800d562:	2301      	movs	r3, #1
 800d564:	e059      	b.n	800d61a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	7d1b      	ldrb	r3, [r3, #20]
 800d56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	7858      	ldrb	r0, [r3, #1]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d57e:	2301      	movs	r3, #1
 800d580:	69ba      	ldr	r2, [r7, #24]
 800d582:	f7fd fec7 	bl	800b314 <disk_read>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <f_read+0x232>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	755a      	strb	r2, [r3, #21]
 800d592:	2301      	movs	r3, #1
 800d594:	e041      	b.n	800d61a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	899b      	ldrh	r3, [r3, #12]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	8992      	ldrh	r2, [r2, #12]
 800d5aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5ae:	fb01 f202 	mul.w	r2, r1, r2
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	1ac3      	subs	r3, r0, r3
 800d5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d901      	bls.n	800d5c4 <f_read+0x260>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	8992      	ldrh	r2, [r2, #12]
 800d5d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5d6:	fb00 f202 	mul.w	r2, r0, r2
 800d5da:	1a9b      	subs	r3, r3, r2
 800d5dc:	440b      	add	r3, r1
 800d5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5e4:	f7fd ff76 	bl	800b4d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ec:	4413      	add	r3, r2
 800d5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	699a      	ldr	r2, [r3, #24]
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	441a      	add	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	619a      	str	r2, [r3, #24]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	441a      	add	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	f47f aee1 	bne.w	800d3da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3738      	adds	r7, #56	; 0x38
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b08c      	sub	sp, #48	; 0x30
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f107 0210 	add.w	r2, r7, #16
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fc46 	bl	800ced4 <validate>
 800d648:	4603      	mov	r3, r0
 800d64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d64e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d652:	2b00      	cmp	r3, #0
 800d654:	d107      	bne.n	800d666 <f_write+0x44>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	7d5b      	ldrb	r3, [r3, #21]
 800d65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d662:	2b00      	cmp	r3, #0
 800d664:	d002      	beq.n	800d66c <f_write+0x4a>
 800d666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d66a:	e16a      	b.n	800d942 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	7d1b      	ldrb	r3, [r3, #20]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <f_write+0x5a>
 800d678:	2307      	movs	r3, #7
 800d67a:	e162      	b.n	800d942 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	441a      	add	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	429a      	cmp	r2, r3
 800d68a:	f080 814c 	bcs.w	800d926 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	43db      	mvns	r3, r3
 800d694:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d696:	e146      	b.n	800d926 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	8992      	ldrh	r2, [r2, #12]
 800d6a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6a4:	fb01 f202 	mul.w	r2, r1, r2
 800d6a8:	1a9b      	subs	r3, r3, r2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f040 80f1 	bne.w	800d892 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	8992      	ldrh	r2, [r2, #12]
 800d6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	8952      	ldrh	r2, [r2, #10]
 800d6c0:	3a01      	subs	r2, #1
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d143      	bne.n	800d754 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10c      	bne.n	800d6ee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d11a      	bne.n	800d716 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fe fc35 	bl	800bf54 <create_chain>
 800d6ea:	62b8      	str	r0, [r7, #40]	; 0x28
 800d6ec:	e013      	b.n	800d716 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f7fe fcc1 	bl	800c084 <clmt_clust>
 800d702:	62b8      	str	r0, [r7, #40]	; 0x28
 800d704:	e007      	b.n	800d716 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	4619      	mov	r1, r3
 800d70e:	4610      	mov	r0, r2
 800d710:	f7fe fc20 	bl	800bf54 <create_chain>
 800d714:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 8109 	beq.w	800d930 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	2b01      	cmp	r3, #1
 800d722:	d104      	bne.n	800d72e <f_write+0x10c>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2202      	movs	r2, #2
 800d728:	755a      	strb	r2, [r3, #21]
 800d72a:	2302      	movs	r3, #2
 800d72c:	e109      	b.n	800d942 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d734:	d104      	bne.n	800d740 <f_write+0x11e>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	755a      	strb	r2, [r3, #21]
 800d73c:	2301      	movs	r3, #1
 800d73e:	e100      	b.n	800d942 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d744:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <f_write+0x132>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d752:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	7d1b      	ldrb	r3, [r3, #20]
 800d758:	b25b      	sxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	da18      	bge.n	800d790 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	7858      	ldrb	r0, [r3, #1]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a1a      	ldr	r2, [r3, #32]
 800d76c:	2301      	movs	r3, #1
 800d76e:	f7fd fdf1 	bl	800b354 <disk_write>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d004      	beq.n	800d782 <f_write+0x160>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	755a      	strb	r2, [r3, #21]
 800d77e:	2301      	movs	r3, #1
 800d780:	e0df      	b.n	800d942 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	7d1b      	ldrb	r3, [r3, #20]
 800d786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	4619      	mov	r1, r3
 800d798:	4610      	mov	r0, r2
 800d79a:	f7fe f967 	bl	800ba6c <clust2sect>
 800d79e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d104      	bne.n	800d7b0 <f_write+0x18e>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	755a      	strb	r2, [r3, #21]
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e0c8      	b.n	800d942 <f_write+0x320>
			sect += csect;
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	899b      	ldrh	r3, [r3, #12]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d043      	beq.n	800d854 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d7cc:	69ba      	ldr	r2, [r7, #24]
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	8952      	ldrh	r2, [r2, #10]
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d905      	bls.n	800d7e6 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	895b      	ldrh	r3, [r3, #10]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	7858      	ldrb	r0, [r3, #1]
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	69f9      	ldr	r1, [r7, #28]
 800d7f0:	f7fd fdb0 	bl	800b354 <disk_write>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d004      	beq.n	800d804 <f_write+0x1e2>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	755a      	strb	r2, [r3, #21]
 800d800:	2301      	movs	r3, #1
 800d802:	e09e      	b.n	800d942 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6a1a      	ldr	r2, [r3, #32]
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	6a3a      	ldr	r2, [r7, #32]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d918      	bls.n	800d844 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6a1a      	ldr	r2, [r3, #32]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	8992      	ldrh	r2, [r2, #12]
 800d824:	fb02 f303 	mul.w	r3, r2, r3
 800d828:	69fa      	ldr	r2, [r7, #28]
 800d82a:	18d1      	adds	r1, r2, r3
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	461a      	mov	r2, r3
 800d832:	f7fd fe4f 	bl	800b4d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	7d1b      	ldrb	r3, [r3, #20]
 800d83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	899b      	ldrh	r3, [r3, #12]
 800d848:	461a      	mov	r2, r3
 800d84a:	6a3b      	ldr	r3, [r7, #32]
 800d84c:	fb02 f303 	mul.w	r3, r2, r3
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d852:	e04b      	b.n	800d8ec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d016      	beq.n	800d88c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	699a      	ldr	r2, [r3, #24]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d866:	429a      	cmp	r2, r3
 800d868:	d210      	bcs.n	800d88c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	7858      	ldrb	r0, [r3, #1]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d874:	2301      	movs	r3, #1
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	f7fd fd4c 	bl	800b314 <disk_read>
 800d87c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d004      	beq.n	800d88c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	755a      	strb	r2, [r3, #21]
 800d888:	2301      	movs	r3, #1
 800d88a:	e05a      	b.n	800d942 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	899b      	ldrh	r3, [r3, #12]
 800d896:	4618      	mov	r0, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	8992      	ldrh	r2, [r2, #12]
 800d8a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8a4:	fb01 f202 	mul.w	r2, r1, r2
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	1ac3      	subs	r3, r0, r3
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d901      	bls.n	800d8ba <f_write+0x298>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	8992      	ldrh	r2, [r2, #12]
 800d8c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8cc:	fb00 f202 	mul.w	r2, r0, r2
 800d8d0:	1a9b      	subs	r3, r3, r2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d6:	69f9      	ldr	r1, [r7, #28]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fd fdfb 	bl	800b4d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	7d1b      	ldrb	r3, [r3, #20]
 800d8e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d8ec:	69fa      	ldr	r2, [r7, #28]
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	4413      	add	r3, r2
 800d8f2:	61fb      	str	r3, [r7, #28]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	699a      	ldr	r2, [r3, #24]
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	441a      	add	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	619a      	str	r2, [r3, #24]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68da      	ldr	r2, [r3, #12]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	429a      	cmp	r2, r3
 800d90a:	bf38      	it	cc
 800d90c:	461a      	movcc	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	441a      	add	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f47f aeb5 	bne.w	800d698 <f_write+0x76>
 800d92e:	e000      	b.n	800d932 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d930:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	7d1b      	ldrb	r3, [r3, #20]
 800d936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3730      	adds	r7, #48	; 0x30
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b086      	sub	sp, #24
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f107 0208 	add.w	r2, r7, #8
 800d958:	4611      	mov	r1, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff faba 	bl	800ced4 <validate>
 800d960:	4603      	mov	r3, r0
 800d962:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d964:	7dfb      	ldrb	r3, [r7, #23]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d168      	bne.n	800da3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	7d1b      	ldrb	r3, [r3, #20]
 800d96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d972:	2b00      	cmp	r3, #0
 800d974:	d062      	beq.n	800da3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	b25b      	sxtb	r3, r3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	da15      	bge.n	800d9ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	7858      	ldrb	r0, [r3, #1]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1a      	ldr	r2, [r3, #32]
 800d98e:	2301      	movs	r3, #1
 800d990:	f7fd fce0 	bl	800b354 <disk_write>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <f_sync+0x54>
 800d99a:	2301      	movs	r3, #1
 800d99c:	e04f      	b.n	800da3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d9ac:	f7fd fb06 	bl	800afbc <get_fattime>
 800d9b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	f7fd ffb8 	bl	800b930 <move_window>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d138      	bne.n	800da3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	330b      	adds	r3, #11
 800d9d4:	781a      	ldrb	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	330b      	adds	r3, #11
 800d9da:	f042 0220 	orr.w	r2, r2, #32
 800d9de:	b2d2      	uxtb	r2, r2
 800d9e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6818      	ldr	r0, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	68f9      	ldr	r1, [r7, #12]
 800d9ee:	f7fe fd46 	bl	800c47e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f103 021c 	add.w	r2, r3, #28
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4610      	mov	r0, r2
 800da00:	f7fd fd3c 	bl	800b47c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3316      	adds	r3, #22
 800da08:	6939      	ldr	r1, [r7, #16]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fd36 	bl	800b47c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3312      	adds	r3, #18
 800da14:	2100      	movs	r1, #0
 800da16:	4618      	mov	r0, r3
 800da18:	f7fd fd15 	bl	800b446 <st_word>
					fs->wflag = 1;
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2201      	movs	r2, #1
 800da20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	4618      	mov	r0, r3
 800da26:	f7fd ffb1 	bl	800b98c <sync_fs>
 800da2a:	4603      	mov	r3, r0
 800da2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	7d1b      	ldrb	r3, [r3, #20]
 800da32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da36:	b2da      	uxtb	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b084      	sub	sp, #16
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff7b 	bl	800d94a <f_sync>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d118      	bne.n	800da90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f107 0208 	add.w	r2, r7, #8
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff fa34 	bl	800ced4 <validate>
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10c      	bne.n	800da90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fd feb4 	bl	800b7e8 <dec_lock>
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da90:	7bfb      	ldrb	r3, [r7, #15]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b090      	sub	sp, #64	; 0x40
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800daa4:	f107 010c 	add.w	r1, r7, #12
 800daa8:	1d3b      	adds	r3, r7, #4
 800daaa:	2200      	movs	r2, #0
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe ff91 	bl	800c9d4 <find_volume>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800dab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11f      	bne.n	800db00 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	f107 030c 	add.w	r3, r7, #12
 800dac6:	4611      	mov	r1, r2
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe fe73 	bl	800c7b4 <follow_path>
 800dace:	4603      	mov	r3, r0
 800dad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800dad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d111      	bne.n	800db00 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800dadc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dae0:	b25b      	sxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	da03      	bge.n	800daee <f_stat+0x54>
				res = FR_INVALID_NAME;
 800dae6:	2306      	movs	r3, #6
 800dae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800daec:	e008      	b.n	800db00 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <f_stat+0x66>
 800daf4:	f107 030c 	add.w	r3, r7, #12
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fd66 	bl	800c5cc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800db00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800db04:	4618      	mov	r0, r3
 800db06:	3740      	adds	r7, #64	; 0x40
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b096      	sub	sp, #88	; 0x58
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800db14:	f107 0108 	add.w	r1, r7, #8
 800db18:	1d3b      	adds	r3, r7, #4
 800db1a:	2202      	movs	r2, #2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fe ff59 	bl	800c9d4 <find_volume>
 800db22:	4603      	mov	r3, r0
 800db24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800db2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db30:	2b00      	cmp	r3, #0
 800db32:	f040 80f2 	bne.w	800dd1a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	f107 030c 	add.w	r3, r7, #12
 800db3c:	4611      	mov	r1, r2
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fe fe38 	bl	800c7b4 <follow_path>
 800db44:	4603      	mov	r3, r0
 800db46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800db4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d102      	bne.n	800db58 <f_mkdir+0x4c>
 800db52:	2308      	movs	r3, #8
 800db54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800db58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db5c:	2b04      	cmp	r3, #4
 800db5e:	f040 80dc 	bne.w	800dd1a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	2100      	movs	r1, #0
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fe f9f3 	bl	800bf54 <create_chain>
 800db6e:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	895b      	ldrh	r3, [r3, #10]
 800db74:	461a      	mov	r2, r3
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	899b      	ldrh	r3, [r3, #12]
 800db7a:	fb02 f303 	mul.w	r3, r2, r3
 800db7e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800db86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d102      	bne.n	800db92 <f_mkdir+0x86>
 800db8c:	2307      	movs	r3, #7
 800db8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800db92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db94:	2b01      	cmp	r3, #1
 800db96:	d102      	bne.n	800db9e <f_mkdir+0x92>
 800db98:	2302      	movs	r3, #2
 800db9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba4:	d102      	bne.n	800dbac <f_mkdir+0xa0>
 800dba6:	2301      	movs	r3, #1
 800dba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800dbac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d106      	bne.n	800dbc2 <f_mkdir+0xb6>
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fd fe76 	bl	800b8a8 <sync_window>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800dbc2:	f7fd f9fb 	bl	800afbc <get_fattime>
 800dbc6:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800dbc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d16c      	bne.n	800dcaa <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd ff49 	bl	800ba6c <clust2sect>
 800dbda:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	3334      	adds	r3, #52	; 0x34
 800dbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	899b      	ldrh	r3, [r3, #12]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	2100      	movs	r1, #0
 800dbea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbec:	f7fd fc93 	bl	800b516 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800dbf0:	220b      	movs	r2, #11
 800dbf2:	2120      	movs	r1, #32
 800dbf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbf6:	f7fd fc8e 	bl	800b516 <mem_set>
					dir[DIR_Name] = '.';
 800dbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfc:	222e      	movs	r2, #46	; 0x2e
 800dbfe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800dc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc02:	330b      	adds	r3, #11
 800dc04:	2210      	movs	r2, #16
 800dc06:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800dc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc0a:	3316      	adds	r3, #22
 800dc0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fd fc34 	bl	800b47c <st_dword>
					st_clust(fs, dir, dcl);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fc2f 	bl	800c47e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800dc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc22:	3320      	adds	r3, #32
 800dc24:	2220      	movs	r2, #32
 800dc26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fd fc53 	bl	800b4d4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800dc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc30:	3321      	adds	r3, #33	; 0x21
 800dc32:	222e      	movs	r2, #46	; 0x2e
 800dc34:	701a      	strb	r2, [r3, #0]
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d106      	bne.n	800dc50 <f_mkdir+0x144>
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d101      	bne.n	800dc50 <f_mkdir+0x144>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800dc50:	68b8      	ldr	r0, [r7, #8]
 800dc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc54:	3320      	adds	r3, #32
 800dc56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc58:	4619      	mov	r1, r3
 800dc5a:	f7fe fc10 	bl	800c47e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	895b      	ldrh	r3, [r3, #10]
 800dc62:	653b      	str	r3, [r7, #80]	; 0x50
 800dc64:	e01c      	b.n	800dca0 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800dc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2201      	movs	r2, #1
 800dc74:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fd fe15 	bl	800b8a8 <sync_window>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800dc84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10d      	bne.n	800dca8 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	899b      	ldrh	r3, [r3, #12]
 800dc90:	461a      	mov	r2, r3
 800dc92:	2100      	movs	r1, #0
 800dc94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc96:	f7fd fc3e 	bl	800b516 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	653b      	str	r3, [r7, #80]	; 0x50
 800dca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1df      	bne.n	800dc66 <f_mkdir+0x15a>
 800dca6:	e000      	b.n	800dcaa <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800dca8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800dcaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d107      	bne.n	800dcc2 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800dcb2:	f107 030c 	add.w	r3, r7, #12
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe fc56 	bl	800c568 <dir_register>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800dcc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d120      	bne.n	800dd0c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd0:	3316      	adds	r3, #22
 800dcd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fd fbd1 	bl	800b47c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fbcc 	bl	800c47e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce8:	330b      	adds	r3, #11
 800dcea:	2210      	movs	r2, #16
 800dcec:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dcf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10e      	bne.n	800dd1a <f_mkdir+0x20e>
					res = sync_fs(fs);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fd fe44 	bl	800b98c <sync_fs>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800dd0a:	e006      	b.n	800dd1a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800dd0c:	f107 030c 	add.w	r3, r7, #12
 800dd10:	2200      	movs	r2, #0
 800dd12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe f8b8 	bl	800be8a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800dd1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3758      	adds	r7, #88	; 0x58
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
	...

0800dd28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	4613      	mov	r3, r2
 800dd34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd36:	2301      	movs	r3, #1
 800dd38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd3e:	4b1f      	ldr	r3, [pc, #124]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd40:	7a5b      	ldrb	r3, [r3, #9]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d131      	bne.n	800ddac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd48:	4b1c      	ldr	r3, [pc, #112]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd4a:	7a5b      	ldrb	r3, [r3, #9]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	461a      	mov	r2, r3
 800dd50:	4b1a      	ldr	r3, [pc, #104]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd52:	2100      	movs	r1, #0
 800dd54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd56:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd58:	7a5b      	ldrb	r3, [r3, #9]
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	4a17      	ldr	r2, [pc, #92]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd66:	4b15      	ldr	r3, [pc, #84]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd68:	7a5b      	ldrb	r3, [r3, #9]
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b13      	ldr	r3, [pc, #76]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd70:	4413      	add	r3, r2
 800dd72:	79fa      	ldrb	r2, [r7, #7]
 800dd74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd76:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd78:	7a5b      	ldrb	r3, [r3, #9]
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	b2d1      	uxtb	r1, r2
 800dd80:	4a0e      	ldr	r2, [pc, #56]	; (800ddbc <FATFS_LinkDriverEx+0x94>)
 800dd82:	7251      	strb	r1, [r2, #9]
 800dd84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd86:	7dbb      	ldrb	r3, [r7, #22]
 800dd88:	3330      	adds	r3, #48	; 0x30
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	3301      	adds	r3, #1
 800dd94:	223a      	movs	r2, #58	; 0x3a
 800dd96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	222f      	movs	r2, #47	; 0x2f
 800dd9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	3303      	adds	r3, #3
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ddac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	371c      	adds	r7, #28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	20005a58 	.word	0x20005a58

0800ddc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ddca:	2200      	movs	r2, #0
 800ddcc:	6839      	ldr	r1, [r7, #0]
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff ffaa 	bl	800dd28 <FATFS_LinkDriverEx>
 800ddd4:	4603      	mov	r3, r0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <__assert_func>:
 800dde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dde2:	4614      	mov	r4, r2
 800dde4:	461a      	mov	r2, r3
 800dde6:	4b09      	ldr	r3, [pc, #36]	; (800de0c <__assert_func+0x2c>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4605      	mov	r5, r0
 800ddec:	68d8      	ldr	r0, [r3, #12]
 800ddee:	b14c      	cbz	r4, 800de04 <__assert_func+0x24>
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <__assert_func+0x30>)
 800ddf2:	9100      	str	r1, [sp, #0]
 800ddf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf8:	4906      	ldr	r1, [pc, #24]	; (800de14 <__assert_func+0x34>)
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	f000 f814 	bl	800de28 <fiprintf>
 800de00:	f001 f86a 	bl	800eed8 <abort>
 800de04:	4b04      	ldr	r3, [pc, #16]	; (800de18 <__assert_func+0x38>)
 800de06:	461c      	mov	r4, r3
 800de08:	e7f3      	b.n	800ddf2 <__assert_func+0x12>
 800de0a:	bf00      	nop
 800de0c:	200000c4 	.word	0x200000c4
 800de10:	0801d360 	.word	0x0801d360
 800de14:	0801d36d 	.word	0x0801d36d
 800de18:	0801d39b 	.word	0x0801d39b

0800de1c <__errno>:
 800de1c:	4b01      	ldr	r3, [pc, #4]	; (800de24 <__errno+0x8>)
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	200000c4 	.word	0x200000c4

0800de28 <fiprintf>:
 800de28:	b40e      	push	{r1, r2, r3}
 800de2a:	b503      	push	{r0, r1, lr}
 800de2c:	4601      	mov	r1, r0
 800de2e:	ab03      	add	r3, sp, #12
 800de30:	4805      	ldr	r0, [pc, #20]	; (800de48 <fiprintf+0x20>)
 800de32:	f853 2b04 	ldr.w	r2, [r3], #4
 800de36:	6800      	ldr	r0, [r0, #0]
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	f000 f95b 	bl	800e0f4 <_vfiprintf_r>
 800de3e:	b002      	add	sp, #8
 800de40:	f85d eb04 	ldr.w	lr, [sp], #4
 800de44:	b003      	add	sp, #12
 800de46:	4770      	bx	lr
 800de48:	200000c4 	.word	0x200000c4

0800de4c <__libc_init_array>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	4d0d      	ldr	r5, [pc, #52]	; (800de84 <__libc_init_array+0x38>)
 800de50:	4c0d      	ldr	r4, [pc, #52]	; (800de88 <__libc_init_array+0x3c>)
 800de52:	1b64      	subs	r4, r4, r5
 800de54:	10a4      	asrs	r4, r4, #2
 800de56:	2600      	movs	r6, #0
 800de58:	42a6      	cmp	r6, r4
 800de5a:	d109      	bne.n	800de70 <__libc_init_array+0x24>
 800de5c:	4d0b      	ldr	r5, [pc, #44]	; (800de8c <__libc_init_array+0x40>)
 800de5e:	4c0c      	ldr	r4, [pc, #48]	; (800de90 <__libc_init_array+0x44>)
 800de60:	f003 fe08 	bl	8011a74 <_init>
 800de64:	1b64      	subs	r4, r4, r5
 800de66:	10a4      	asrs	r4, r4, #2
 800de68:	2600      	movs	r6, #0
 800de6a:	42a6      	cmp	r6, r4
 800de6c:	d105      	bne.n	800de7a <__libc_init_array+0x2e>
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
 800de70:	f855 3b04 	ldr.w	r3, [r5], #4
 800de74:	4798      	blx	r3
 800de76:	3601      	adds	r6, #1
 800de78:	e7ee      	b.n	800de58 <__libc_init_array+0xc>
 800de7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de7e:	4798      	blx	r3
 800de80:	3601      	adds	r6, #1
 800de82:	e7f2      	b.n	800de6a <__libc_init_array+0x1e>
 800de84:	0801d778 	.word	0x0801d778
 800de88:	0801d778 	.word	0x0801d778
 800de8c:	0801d778 	.word	0x0801d778
 800de90:	0801d77c 	.word	0x0801d77c

0800de94 <malloc>:
 800de94:	4b02      	ldr	r3, [pc, #8]	; (800dea0 <malloc+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 b88d 	b.w	800dfb8 <_malloc_r>
 800de9e:	bf00      	nop
 800dea0:	200000c4 	.word	0x200000c4

0800dea4 <free>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <free+0xc>)
 800dea6:	4601      	mov	r1, r0
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f000 b819 	b.w	800dee0 <_free_r>
 800deae:	bf00      	nop
 800deb0:	200000c4 	.word	0x200000c4

0800deb4 <memcpy>:
 800deb4:	440a      	add	r2, r1
 800deb6:	4291      	cmp	r1, r2
 800deb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800debc:	d100      	bne.n	800dec0 <memcpy+0xc>
 800debe:	4770      	bx	lr
 800dec0:	b510      	push	{r4, lr}
 800dec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deca:	4291      	cmp	r1, r2
 800decc:	d1f9      	bne.n	800dec2 <memcpy+0xe>
 800dece:	bd10      	pop	{r4, pc}

0800ded0 <memset>:
 800ded0:	4402      	add	r2, r0
 800ded2:	4603      	mov	r3, r0
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d100      	bne.n	800deda <memset+0xa>
 800ded8:	4770      	bx	lr
 800deda:	f803 1b01 	strb.w	r1, [r3], #1
 800dede:	e7f9      	b.n	800ded4 <memset+0x4>

0800dee0 <_free_r>:
 800dee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dee2:	2900      	cmp	r1, #0
 800dee4:	d044      	beq.n	800df70 <_free_r+0x90>
 800dee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deea:	9001      	str	r0, [sp, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f1a1 0404 	sub.w	r4, r1, #4
 800def2:	bfb8      	it	lt
 800def4:	18e4      	addlt	r4, r4, r3
 800def6:	f002 f8e5 	bl	80100c4 <__malloc_lock>
 800defa:	4a1e      	ldr	r2, [pc, #120]	; (800df74 <_free_r+0x94>)
 800defc:	9801      	ldr	r0, [sp, #4]
 800defe:	6813      	ldr	r3, [r2, #0]
 800df00:	b933      	cbnz	r3, 800df10 <_free_r+0x30>
 800df02:	6063      	str	r3, [r4, #4]
 800df04:	6014      	str	r4, [r2, #0]
 800df06:	b003      	add	sp, #12
 800df08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df0c:	f002 b8e0 	b.w	80100d0 <__malloc_unlock>
 800df10:	42a3      	cmp	r3, r4
 800df12:	d908      	bls.n	800df26 <_free_r+0x46>
 800df14:	6825      	ldr	r5, [r4, #0]
 800df16:	1961      	adds	r1, r4, r5
 800df18:	428b      	cmp	r3, r1
 800df1a:	bf01      	itttt	eq
 800df1c:	6819      	ldreq	r1, [r3, #0]
 800df1e:	685b      	ldreq	r3, [r3, #4]
 800df20:	1949      	addeq	r1, r1, r5
 800df22:	6021      	streq	r1, [r4, #0]
 800df24:	e7ed      	b.n	800df02 <_free_r+0x22>
 800df26:	461a      	mov	r2, r3
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	b10b      	cbz	r3, 800df30 <_free_r+0x50>
 800df2c:	42a3      	cmp	r3, r4
 800df2e:	d9fa      	bls.n	800df26 <_free_r+0x46>
 800df30:	6811      	ldr	r1, [r2, #0]
 800df32:	1855      	adds	r5, r2, r1
 800df34:	42a5      	cmp	r5, r4
 800df36:	d10b      	bne.n	800df50 <_free_r+0x70>
 800df38:	6824      	ldr	r4, [r4, #0]
 800df3a:	4421      	add	r1, r4
 800df3c:	1854      	adds	r4, r2, r1
 800df3e:	42a3      	cmp	r3, r4
 800df40:	6011      	str	r1, [r2, #0]
 800df42:	d1e0      	bne.n	800df06 <_free_r+0x26>
 800df44:	681c      	ldr	r4, [r3, #0]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	6053      	str	r3, [r2, #4]
 800df4a:	4421      	add	r1, r4
 800df4c:	6011      	str	r1, [r2, #0]
 800df4e:	e7da      	b.n	800df06 <_free_r+0x26>
 800df50:	d902      	bls.n	800df58 <_free_r+0x78>
 800df52:	230c      	movs	r3, #12
 800df54:	6003      	str	r3, [r0, #0]
 800df56:	e7d6      	b.n	800df06 <_free_r+0x26>
 800df58:	6825      	ldr	r5, [r4, #0]
 800df5a:	1961      	adds	r1, r4, r5
 800df5c:	428b      	cmp	r3, r1
 800df5e:	bf04      	itt	eq
 800df60:	6819      	ldreq	r1, [r3, #0]
 800df62:	685b      	ldreq	r3, [r3, #4]
 800df64:	6063      	str	r3, [r4, #4]
 800df66:	bf04      	itt	eq
 800df68:	1949      	addeq	r1, r1, r5
 800df6a:	6021      	streq	r1, [r4, #0]
 800df6c:	6054      	str	r4, [r2, #4]
 800df6e:	e7ca      	b.n	800df06 <_free_r+0x26>
 800df70:	b003      	add	sp, #12
 800df72:	bd30      	pop	{r4, r5, pc}
 800df74:	20005a64 	.word	0x20005a64

0800df78 <sbrk_aligned>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	4e0e      	ldr	r6, [pc, #56]	; (800dfb4 <sbrk_aligned+0x3c>)
 800df7c:	460c      	mov	r4, r1
 800df7e:	6831      	ldr	r1, [r6, #0]
 800df80:	4605      	mov	r5, r0
 800df82:	b911      	cbnz	r1, 800df8a <sbrk_aligned+0x12>
 800df84:	f000 fe50 	bl	800ec28 <_sbrk_r>
 800df88:	6030      	str	r0, [r6, #0]
 800df8a:	4621      	mov	r1, r4
 800df8c:	4628      	mov	r0, r5
 800df8e:	f000 fe4b 	bl	800ec28 <_sbrk_r>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	d00a      	beq.n	800dfac <sbrk_aligned+0x34>
 800df96:	1cc4      	adds	r4, r0, #3
 800df98:	f024 0403 	bic.w	r4, r4, #3
 800df9c:	42a0      	cmp	r0, r4
 800df9e:	d007      	beq.n	800dfb0 <sbrk_aligned+0x38>
 800dfa0:	1a21      	subs	r1, r4, r0
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f000 fe40 	bl	800ec28 <_sbrk_r>
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	d101      	bne.n	800dfb0 <sbrk_aligned+0x38>
 800dfac:	f04f 34ff 	mov.w	r4, #4294967295
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	20005a68 	.word	0x20005a68

0800dfb8 <_malloc_r>:
 800dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbc:	1ccd      	adds	r5, r1, #3
 800dfbe:	f025 0503 	bic.w	r5, r5, #3
 800dfc2:	3508      	adds	r5, #8
 800dfc4:	2d0c      	cmp	r5, #12
 800dfc6:	bf38      	it	cc
 800dfc8:	250c      	movcc	r5, #12
 800dfca:	2d00      	cmp	r5, #0
 800dfcc:	4607      	mov	r7, r0
 800dfce:	db01      	blt.n	800dfd4 <_malloc_r+0x1c>
 800dfd0:	42a9      	cmp	r1, r5
 800dfd2:	d905      	bls.n	800dfe0 <_malloc_r+0x28>
 800dfd4:	230c      	movs	r3, #12
 800dfd6:	603b      	str	r3, [r7, #0]
 800dfd8:	2600      	movs	r6, #0
 800dfda:	4630      	mov	r0, r6
 800dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe0:	4e2e      	ldr	r6, [pc, #184]	; (800e09c <_malloc_r+0xe4>)
 800dfe2:	f002 f86f 	bl	80100c4 <__malloc_lock>
 800dfe6:	6833      	ldr	r3, [r6, #0]
 800dfe8:	461c      	mov	r4, r3
 800dfea:	bb34      	cbnz	r4, 800e03a <_malloc_r+0x82>
 800dfec:	4629      	mov	r1, r5
 800dfee:	4638      	mov	r0, r7
 800dff0:	f7ff ffc2 	bl	800df78 <sbrk_aligned>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	4604      	mov	r4, r0
 800dff8:	d14d      	bne.n	800e096 <_malloc_r+0xde>
 800dffa:	6834      	ldr	r4, [r6, #0]
 800dffc:	4626      	mov	r6, r4
 800dffe:	2e00      	cmp	r6, #0
 800e000:	d140      	bne.n	800e084 <_malloc_r+0xcc>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	4631      	mov	r1, r6
 800e006:	4638      	mov	r0, r7
 800e008:	eb04 0803 	add.w	r8, r4, r3
 800e00c:	f000 fe0c 	bl	800ec28 <_sbrk_r>
 800e010:	4580      	cmp	r8, r0
 800e012:	d13a      	bne.n	800e08a <_malloc_r+0xd2>
 800e014:	6821      	ldr	r1, [r4, #0]
 800e016:	3503      	adds	r5, #3
 800e018:	1a6d      	subs	r5, r5, r1
 800e01a:	f025 0503 	bic.w	r5, r5, #3
 800e01e:	3508      	adds	r5, #8
 800e020:	2d0c      	cmp	r5, #12
 800e022:	bf38      	it	cc
 800e024:	250c      	movcc	r5, #12
 800e026:	4629      	mov	r1, r5
 800e028:	4638      	mov	r0, r7
 800e02a:	f7ff ffa5 	bl	800df78 <sbrk_aligned>
 800e02e:	3001      	adds	r0, #1
 800e030:	d02b      	beq.n	800e08a <_malloc_r+0xd2>
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	442b      	add	r3, r5
 800e036:	6023      	str	r3, [r4, #0]
 800e038:	e00e      	b.n	800e058 <_malloc_r+0xa0>
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	1b52      	subs	r2, r2, r5
 800e03e:	d41e      	bmi.n	800e07e <_malloc_r+0xc6>
 800e040:	2a0b      	cmp	r2, #11
 800e042:	d916      	bls.n	800e072 <_malloc_r+0xba>
 800e044:	1961      	adds	r1, r4, r5
 800e046:	42a3      	cmp	r3, r4
 800e048:	6025      	str	r5, [r4, #0]
 800e04a:	bf18      	it	ne
 800e04c:	6059      	strne	r1, [r3, #4]
 800e04e:	6863      	ldr	r3, [r4, #4]
 800e050:	bf08      	it	eq
 800e052:	6031      	streq	r1, [r6, #0]
 800e054:	5162      	str	r2, [r4, r5]
 800e056:	604b      	str	r3, [r1, #4]
 800e058:	4638      	mov	r0, r7
 800e05a:	f104 060b 	add.w	r6, r4, #11
 800e05e:	f002 f837 	bl	80100d0 <__malloc_unlock>
 800e062:	f026 0607 	bic.w	r6, r6, #7
 800e066:	1d23      	adds	r3, r4, #4
 800e068:	1af2      	subs	r2, r6, r3
 800e06a:	d0b6      	beq.n	800dfda <_malloc_r+0x22>
 800e06c:	1b9b      	subs	r3, r3, r6
 800e06e:	50a3      	str	r3, [r4, r2]
 800e070:	e7b3      	b.n	800dfda <_malloc_r+0x22>
 800e072:	6862      	ldr	r2, [r4, #4]
 800e074:	42a3      	cmp	r3, r4
 800e076:	bf0c      	ite	eq
 800e078:	6032      	streq	r2, [r6, #0]
 800e07a:	605a      	strne	r2, [r3, #4]
 800e07c:	e7ec      	b.n	800e058 <_malloc_r+0xa0>
 800e07e:	4623      	mov	r3, r4
 800e080:	6864      	ldr	r4, [r4, #4]
 800e082:	e7b2      	b.n	800dfea <_malloc_r+0x32>
 800e084:	4634      	mov	r4, r6
 800e086:	6876      	ldr	r6, [r6, #4]
 800e088:	e7b9      	b.n	800dffe <_malloc_r+0x46>
 800e08a:	230c      	movs	r3, #12
 800e08c:	603b      	str	r3, [r7, #0]
 800e08e:	4638      	mov	r0, r7
 800e090:	f002 f81e 	bl	80100d0 <__malloc_unlock>
 800e094:	e7a1      	b.n	800dfda <_malloc_r+0x22>
 800e096:	6025      	str	r5, [r4, #0]
 800e098:	e7de      	b.n	800e058 <_malloc_r+0xa0>
 800e09a:	bf00      	nop
 800e09c:	20005a64 	.word	0x20005a64

0800e0a0 <__sfputc_r>:
 800e0a0:	6893      	ldr	r3, [r2, #8]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	b410      	push	{r4}
 800e0a8:	6093      	str	r3, [r2, #8]
 800e0aa:	da08      	bge.n	800e0be <__sfputc_r+0x1e>
 800e0ac:	6994      	ldr	r4, [r2, #24]
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	db01      	blt.n	800e0b6 <__sfputc_r+0x16>
 800e0b2:	290a      	cmp	r1, #10
 800e0b4:	d103      	bne.n	800e0be <__sfputc_r+0x1e>
 800e0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ba:	f000 be3b 	b.w	800ed34 <__swbuf_r>
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	1c58      	adds	r0, r3, #1
 800e0c2:	6010      	str	r0, [r2, #0]
 800e0c4:	7019      	strb	r1, [r3, #0]
 800e0c6:	4608      	mov	r0, r1
 800e0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <__sfputs_r>:
 800e0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	460f      	mov	r7, r1
 800e0d4:	4614      	mov	r4, r2
 800e0d6:	18d5      	adds	r5, r2, r3
 800e0d8:	42ac      	cmp	r4, r5
 800e0da:	d101      	bne.n	800e0e0 <__sfputs_r+0x12>
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e007      	b.n	800e0f0 <__sfputs_r+0x22>
 800e0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e4:	463a      	mov	r2, r7
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ffda 	bl	800e0a0 <__sfputc_r>
 800e0ec:	1c43      	adds	r3, r0, #1
 800e0ee:	d1f3      	bne.n	800e0d8 <__sfputs_r+0xa>
 800e0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0f4 <_vfiprintf_r>:
 800e0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	b09d      	sub	sp, #116	; 0x74
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	4698      	mov	r8, r3
 800e100:	4606      	mov	r6, r0
 800e102:	b118      	cbz	r0, 800e10c <_vfiprintf_r+0x18>
 800e104:	6983      	ldr	r3, [r0, #24]
 800e106:	b90b      	cbnz	r3, 800e10c <_vfiprintf_r+0x18>
 800e108:	f001 fe92 	bl	800fe30 <__sinit>
 800e10c:	4b89      	ldr	r3, [pc, #548]	; (800e334 <_vfiprintf_r+0x240>)
 800e10e:	429d      	cmp	r5, r3
 800e110:	d11b      	bne.n	800e14a <_vfiprintf_r+0x56>
 800e112:	6875      	ldr	r5, [r6, #4]
 800e114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e116:	07d9      	lsls	r1, r3, #31
 800e118:	d405      	bmi.n	800e126 <_vfiprintf_r+0x32>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	059a      	lsls	r2, r3, #22
 800e11e:	d402      	bmi.n	800e126 <_vfiprintf_r+0x32>
 800e120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e122:	f001 ff28 	bl	800ff76 <__retarget_lock_acquire_recursive>
 800e126:	89ab      	ldrh	r3, [r5, #12]
 800e128:	071b      	lsls	r3, r3, #28
 800e12a:	d501      	bpl.n	800e130 <_vfiprintf_r+0x3c>
 800e12c:	692b      	ldr	r3, [r5, #16]
 800e12e:	b9eb      	cbnz	r3, 800e16c <_vfiprintf_r+0x78>
 800e130:	4629      	mov	r1, r5
 800e132:	4630      	mov	r0, r6
 800e134:	f000 fe62 	bl	800edfc <__swsetup_r>
 800e138:	b1c0      	cbz	r0, 800e16c <_vfiprintf_r+0x78>
 800e13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e13c:	07dc      	lsls	r4, r3, #31
 800e13e:	d50e      	bpl.n	800e15e <_vfiprintf_r+0x6a>
 800e140:	f04f 30ff 	mov.w	r0, #4294967295
 800e144:	b01d      	add	sp, #116	; 0x74
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	4b7b      	ldr	r3, [pc, #492]	; (800e338 <_vfiprintf_r+0x244>)
 800e14c:	429d      	cmp	r5, r3
 800e14e:	d101      	bne.n	800e154 <_vfiprintf_r+0x60>
 800e150:	68b5      	ldr	r5, [r6, #8]
 800e152:	e7df      	b.n	800e114 <_vfiprintf_r+0x20>
 800e154:	4b79      	ldr	r3, [pc, #484]	; (800e33c <_vfiprintf_r+0x248>)
 800e156:	429d      	cmp	r5, r3
 800e158:	bf08      	it	eq
 800e15a:	68f5      	ldreq	r5, [r6, #12]
 800e15c:	e7da      	b.n	800e114 <_vfiprintf_r+0x20>
 800e15e:	89ab      	ldrh	r3, [r5, #12]
 800e160:	0598      	lsls	r0, r3, #22
 800e162:	d4ed      	bmi.n	800e140 <_vfiprintf_r+0x4c>
 800e164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e166:	f001 ff07 	bl	800ff78 <__retarget_lock_release_recursive>
 800e16a:	e7e9      	b.n	800e140 <_vfiprintf_r+0x4c>
 800e16c:	2300      	movs	r3, #0
 800e16e:	9309      	str	r3, [sp, #36]	; 0x24
 800e170:	2320      	movs	r3, #32
 800e172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e176:	f8cd 800c 	str.w	r8, [sp, #12]
 800e17a:	2330      	movs	r3, #48	; 0x30
 800e17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e340 <_vfiprintf_r+0x24c>
 800e180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e184:	f04f 0901 	mov.w	r9, #1
 800e188:	4623      	mov	r3, r4
 800e18a:	469a      	mov	sl, r3
 800e18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e190:	b10a      	cbz	r2, 800e196 <_vfiprintf_r+0xa2>
 800e192:	2a25      	cmp	r2, #37	; 0x25
 800e194:	d1f9      	bne.n	800e18a <_vfiprintf_r+0x96>
 800e196:	ebba 0b04 	subs.w	fp, sl, r4
 800e19a:	d00b      	beq.n	800e1b4 <_vfiprintf_r+0xc0>
 800e19c:	465b      	mov	r3, fp
 800e19e:	4622      	mov	r2, r4
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f7ff ff93 	bl	800e0ce <__sfputs_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	f000 80aa 	beq.w	800e302 <_vfiprintf_r+0x20e>
 800e1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1b0:	445a      	add	r2, fp
 800e1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f000 80a2 	beq.w	800e302 <_vfiprintf_r+0x20e>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c8:	f10a 0a01 	add.w	sl, sl, #1
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	9307      	str	r3, [sp, #28]
 800e1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1d6:	4654      	mov	r4, sl
 800e1d8:	2205      	movs	r2, #5
 800e1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1de:	4858      	ldr	r0, [pc, #352]	; (800e340 <_vfiprintf_r+0x24c>)
 800e1e0:	f7f2 f80e 	bl	8000200 <memchr>
 800e1e4:	9a04      	ldr	r2, [sp, #16]
 800e1e6:	b9d8      	cbnz	r0, 800e220 <_vfiprintf_r+0x12c>
 800e1e8:	06d1      	lsls	r1, r2, #27
 800e1ea:	bf44      	itt	mi
 800e1ec:	2320      	movmi	r3, #32
 800e1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f2:	0713      	lsls	r3, r2, #28
 800e1f4:	bf44      	itt	mi
 800e1f6:	232b      	movmi	r3, #43	; 0x2b
 800e1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e200:	2b2a      	cmp	r3, #42	; 0x2a
 800e202:	d015      	beq.n	800e230 <_vfiprintf_r+0x13c>
 800e204:	9a07      	ldr	r2, [sp, #28]
 800e206:	4654      	mov	r4, sl
 800e208:	2000      	movs	r0, #0
 800e20a:	f04f 0c0a 	mov.w	ip, #10
 800e20e:	4621      	mov	r1, r4
 800e210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e214:	3b30      	subs	r3, #48	; 0x30
 800e216:	2b09      	cmp	r3, #9
 800e218:	d94e      	bls.n	800e2b8 <_vfiprintf_r+0x1c4>
 800e21a:	b1b0      	cbz	r0, 800e24a <_vfiprintf_r+0x156>
 800e21c:	9207      	str	r2, [sp, #28]
 800e21e:	e014      	b.n	800e24a <_vfiprintf_r+0x156>
 800e220:	eba0 0308 	sub.w	r3, r0, r8
 800e224:	fa09 f303 	lsl.w	r3, r9, r3
 800e228:	4313      	orrs	r3, r2
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	46a2      	mov	sl, r4
 800e22e:	e7d2      	b.n	800e1d6 <_vfiprintf_r+0xe2>
 800e230:	9b03      	ldr	r3, [sp, #12]
 800e232:	1d19      	adds	r1, r3, #4
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	9103      	str	r1, [sp, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bfbb      	ittet	lt
 800e23c:	425b      	neglt	r3, r3
 800e23e:	f042 0202 	orrlt.w	r2, r2, #2
 800e242:	9307      	strge	r3, [sp, #28]
 800e244:	9307      	strlt	r3, [sp, #28]
 800e246:	bfb8      	it	lt
 800e248:	9204      	strlt	r2, [sp, #16]
 800e24a:	7823      	ldrb	r3, [r4, #0]
 800e24c:	2b2e      	cmp	r3, #46	; 0x2e
 800e24e:	d10c      	bne.n	800e26a <_vfiprintf_r+0x176>
 800e250:	7863      	ldrb	r3, [r4, #1]
 800e252:	2b2a      	cmp	r3, #42	; 0x2a
 800e254:	d135      	bne.n	800e2c2 <_vfiprintf_r+0x1ce>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	1d1a      	adds	r2, r3, #4
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	9203      	str	r2, [sp, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bfb8      	it	lt
 800e262:	f04f 33ff 	movlt.w	r3, #4294967295
 800e266:	3402      	adds	r4, #2
 800e268:	9305      	str	r3, [sp, #20]
 800e26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e350 <_vfiprintf_r+0x25c>
 800e26e:	7821      	ldrb	r1, [r4, #0]
 800e270:	2203      	movs	r2, #3
 800e272:	4650      	mov	r0, sl
 800e274:	f7f1 ffc4 	bl	8000200 <memchr>
 800e278:	b140      	cbz	r0, 800e28c <_vfiprintf_r+0x198>
 800e27a:	2340      	movs	r3, #64	; 0x40
 800e27c:	eba0 000a 	sub.w	r0, r0, sl
 800e280:	fa03 f000 	lsl.w	r0, r3, r0
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	4303      	orrs	r3, r0
 800e288:	3401      	adds	r4, #1
 800e28a:	9304      	str	r3, [sp, #16]
 800e28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e290:	482c      	ldr	r0, [pc, #176]	; (800e344 <_vfiprintf_r+0x250>)
 800e292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e296:	2206      	movs	r2, #6
 800e298:	f7f1 ffb2 	bl	8000200 <memchr>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d03f      	beq.n	800e320 <_vfiprintf_r+0x22c>
 800e2a0:	4b29      	ldr	r3, [pc, #164]	; (800e348 <_vfiprintf_r+0x254>)
 800e2a2:	bb1b      	cbnz	r3, 800e2ec <_vfiprintf_r+0x1f8>
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	3307      	adds	r3, #7
 800e2a8:	f023 0307 	bic.w	r3, r3, #7
 800e2ac:	3308      	adds	r3, #8
 800e2ae:	9303      	str	r3, [sp, #12]
 800e2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b2:	443b      	add	r3, r7
 800e2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b6:	e767      	b.n	800e188 <_vfiprintf_r+0x94>
 800e2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2bc:	460c      	mov	r4, r1
 800e2be:	2001      	movs	r0, #1
 800e2c0:	e7a5      	b.n	800e20e <_vfiprintf_r+0x11a>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	3401      	adds	r4, #1
 800e2c6:	9305      	str	r3, [sp, #20]
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	f04f 0c0a 	mov.w	ip, #10
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2d4:	3a30      	subs	r2, #48	; 0x30
 800e2d6:	2a09      	cmp	r2, #9
 800e2d8:	d903      	bls.n	800e2e2 <_vfiprintf_r+0x1ee>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d0c5      	beq.n	800e26a <_vfiprintf_r+0x176>
 800e2de:	9105      	str	r1, [sp, #20]
 800e2e0:	e7c3      	b.n	800e26a <_vfiprintf_r+0x176>
 800e2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e7f0      	b.n	800e2ce <_vfiprintf_r+0x1da>
 800e2ec:	ab03      	add	r3, sp, #12
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4b16      	ldr	r3, [pc, #88]	; (800e34c <_vfiprintf_r+0x258>)
 800e2f4:	a904      	add	r1, sp, #16
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f000 f8cc 	bl	800e494 <_printf_float>
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	1c78      	adds	r0, r7, #1
 800e300:	d1d6      	bne.n	800e2b0 <_vfiprintf_r+0x1bc>
 800e302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e304:	07d9      	lsls	r1, r3, #31
 800e306:	d405      	bmi.n	800e314 <_vfiprintf_r+0x220>
 800e308:	89ab      	ldrh	r3, [r5, #12]
 800e30a:	059a      	lsls	r2, r3, #22
 800e30c:	d402      	bmi.n	800e314 <_vfiprintf_r+0x220>
 800e30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e310:	f001 fe32 	bl	800ff78 <__retarget_lock_release_recursive>
 800e314:	89ab      	ldrh	r3, [r5, #12]
 800e316:	065b      	lsls	r3, r3, #25
 800e318:	f53f af12 	bmi.w	800e140 <_vfiprintf_r+0x4c>
 800e31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e31e:	e711      	b.n	800e144 <_vfiprintf_r+0x50>
 800e320:	ab03      	add	r3, sp, #12
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	462a      	mov	r2, r5
 800e326:	4b09      	ldr	r3, [pc, #36]	; (800e34c <_vfiprintf_r+0x258>)
 800e328:	a904      	add	r1, sp, #16
 800e32a:	4630      	mov	r0, r6
 800e32c:	f000 fb56 	bl	800e9dc <_printf_i>
 800e330:	e7e4      	b.n	800e2fc <_vfiprintf_r+0x208>
 800e332:	bf00      	nop
 800e334:	0801d598 	.word	0x0801d598
 800e338:	0801d5b8 	.word	0x0801d5b8
 800e33c:	0801d578 	.word	0x0801d578
 800e340:	0801d3a0 	.word	0x0801d3a0
 800e344:	0801d3aa 	.word	0x0801d3aa
 800e348:	0800e495 	.word	0x0800e495
 800e34c:	0800e0cf 	.word	0x0800e0cf
 800e350:	0801d3a6 	.word	0x0801d3a6

0800e354 <__cvt>:
 800e354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e358:	ec55 4b10 	vmov	r4, r5, d0
 800e35c:	2d00      	cmp	r5, #0
 800e35e:	460e      	mov	r6, r1
 800e360:	4619      	mov	r1, r3
 800e362:	462b      	mov	r3, r5
 800e364:	bfbb      	ittet	lt
 800e366:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e36a:	461d      	movlt	r5, r3
 800e36c:	2300      	movge	r3, #0
 800e36e:	232d      	movlt	r3, #45	; 0x2d
 800e370:	700b      	strb	r3, [r1, #0]
 800e372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e374:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e378:	4691      	mov	r9, r2
 800e37a:	f023 0820 	bic.w	r8, r3, #32
 800e37e:	bfbc      	itt	lt
 800e380:	4622      	movlt	r2, r4
 800e382:	4614      	movlt	r4, r2
 800e384:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e388:	d005      	beq.n	800e396 <__cvt+0x42>
 800e38a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e38e:	d100      	bne.n	800e392 <__cvt+0x3e>
 800e390:	3601      	adds	r6, #1
 800e392:	2102      	movs	r1, #2
 800e394:	e000      	b.n	800e398 <__cvt+0x44>
 800e396:	2103      	movs	r1, #3
 800e398:	ab03      	add	r3, sp, #12
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	ab02      	add	r3, sp, #8
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	ec45 4b10 	vmov	d0, r4, r5
 800e3a4:	4653      	mov	r3, sl
 800e3a6:	4632      	mov	r2, r6
 800e3a8:	f000 fe3a 	bl	800f020 <_dtoa_r>
 800e3ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	d102      	bne.n	800e3ba <__cvt+0x66>
 800e3b4:	f019 0f01 	tst.w	r9, #1
 800e3b8:	d022      	beq.n	800e400 <__cvt+0xac>
 800e3ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3be:	eb07 0906 	add.w	r9, r7, r6
 800e3c2:	d110      	bne.n	800e3e6 <__cvt+0x92>
 800e3c4:	783b      	ldrb	r3, [r7, #0]
 800e3c6:	2b30      	cmp	r3, #48	; 0x30
 800e3c8:	d10a      	bne.n	800e3e0 <__cvt+0x8c>
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	f7f2 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3d6:	b918      	cbnz	r0, 800e3e0 <__cvt+0x8c>
 800e3d8:	f1c6 0601 	rsb	r6, r6, #1
 800e3dc:	f8ca 6000 	str.w	r6, [sl]
 800e3e0:	f8da 3000 	ldr.w	r3, [sl]
 800e3e4:	4499      	add	r9, r3
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	f7f2 fb7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3f2:	b108      	cbz	r0, 800e3f8 <__cvt+0xa4>
 800e3f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3f8:	2230      	movs	r2, #48	; 0x30
 800e3fa:	9b03      	ldr	r3, [sp, #12]
 800e3fc:	454b      	cmp	r3, r9
 800e3fe:	d307      	bcc.n	800e410 <__cvt+0xbc>
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e404:	1bdb      	subs	r3, r3, r7
 800e406:	4638      	mov	r0, r7
 800e408:	6013      	str	r3, [r2, #0]
 800e40a:	b004      	add	sp, #16
 800e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e410:	1c59      	adds	r1, r3, #1
 800e412:	9103      	str	r1, [sp, #12]
 800e414:	701a      	strb	r2, [r3, #0]
 800e416:	e7f0      	b.n	800e3fa <__cvt+0xa6>

0800e418 <__exponent>:
 800e418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e41a:	4603      	mov	r3, r0
 800e41c:	2900      	cmp	r1, #0
 800e41e:	bfb8      	it	lt
 800e420:	4249      	neglt	r1, r1
 800e422:	f803 2b02 	strb.w	r2, [r3], #2
 800e426:	bfb4      	ite	lt
 800e428:	222d      	movlt	r2, #45	; 0x2d
 800e42a:	222b      	movge	r2, #43	; 0x2b
 800e42c:	2909      	cmp	r1, #9
 800e42e:	7042      	strb	r2, [r0, #1]
 800e430:	dd2a      	ble.n	800e488 <__exponent+0x70>
 800e432:	f10d 0407 	add.w	r4, sp, #7
 800e436:	46a4      	mov	ip, r4
 800e438:	270a      	movs	r7, #10
 800e43a:	46a6      	mov	lr, r4
 800e43c:	460a      	mov	r2, r1
 800e43e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e442:	fb07 1516 	mls	r5, r7, r6, r1
 800e446:	3530      	adds	r5, #48	; 0x30
 800e448:	2a63      	cmp	r2, #99	; 0x63
 800e44a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e44e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e452:	4631      	mov	r1, r6
 800e454:	dcf1      	bgt.n	800e43a <__exponent+0x22>
 800e456:	3130      	adds	r1, #48	; 0x30
 800e458:	f1ae 0502 	sub.w	r5, lr, #2
 800e45c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e460:	1c44      	adds	r4, r0, #1
 800e462:	4629      	mov	r1, r5
 800e464:	4561      	cmp	r1, ip
 800e466:	d30a      	bcc.n	800e47e <__exponent+0x66>
 800e468:	f10d 0209 	add.w	r2, sp, #9
 800e46c:	eba2 020e 	sub.w	r2, r2, lr
 800e470:	4565      	cmp	r5, ip
 800e472:	bf88      	it	hi
 800e474:	2200      	movhi	r2, #0
 800e476:	4413      	add	r3, r2
 800e478:	1a18      	subs	r0, r3, r0
 800e47a:	b003      	add	sp, #12
 800e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e482:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e486:	e7ed      	b.n	800e464 <__exponent+0x4c>
 800e488:	2330      	movs	r3, #48	; 0x30
 800e48a:	3130      	adds	r1, #48	; 0x30
 800e48c:	7083      	strb	r3, [r0, #2]
 800e48e:	70c1      	strb	r1, [r0, #3]
 800e490:	1d03      	adds	r3, r0, #4
 800e492:	e7f1      	b.n	800e478 <__exponent+0x60>

0800e494 <_printf_float>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	ed2d 8b02 	vpush	{d8}
 800e49c:	b08d      	sub	sp, #52	; 0x34
 800e49e:	460c      	mov	r4, r1
 800e4a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	461f      	mov	r7, r3
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	f001 fd5f 	bl	800ff6c <_localeconv_r>
 800e4ae:	f8d0 a000 	ldr.w	sl, [r0]
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	f7f1 fe9c 	bl	80001f0 <strlen>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	9305      	str	r3, [sp, #20]
 800e4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e4c8:	3307      	adds	r3, #7
 800e4ca:	f023 0307 	bic.w	r3, r3, #7
 800e4ce:	f103 0208 	add.w	r2, r3, #8
 800e4d2:	f8c8 2000 	str.w	r2, [r8]
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e4de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e4e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4e6:	9307      	str	r3, [sp, #28]
 800e4e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4ec:	ee08 0a10 	vmov	s16, r0
 800e4f0:	4b9f      	ldr	r3, [pc, #636]	; (800e770 <_printf_float+0x2dc>)
 800e4f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fa:	f7f2 fb27 	bl	8000b4c <__aeabi_dcmpun>
 800e4fe:	bb88      	cbnz	r0, 800e564 <_printf_float+0xd0>
 800e500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e504:	4b9a      	ldr	r3, [pc, #616]	; (800e770 <_printf_float+0x2dc>)
 800e506:	f04f 32ff 	mov.w	r2, #4294967295
 800e50a:	f7f2 fb01 	bl	8000b10 <__aeabi_dcmple>
 800e50e:	bb48      	cbnz	r0, 800e564 <_printf_float+0xd0>
 800e510:	2200      	movs	r2, #0
 800e512:	2300      	movs	r3, #0
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f2 faf0 	bl	8000afc <__aeabi_dcmplt>
 800e51c:	b110      	cbz	r0, 800e524 <_printf_float+0x90>
 800e51e:	232d      	movs	r3, #45	; 0x2d
 800e520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e524:	4b93      	ldr	r3, [pc, #588]	; (800e774 <_printf_float+0x2e0>)
 800e526:	4894      	ldr	r0, [pc, #592]	; (800e778 <_printf_float+0x2e4>)
 800e528:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e52c:	bf94      	ite	ls
 800e52e:	4698      	movls	r8, r3
 800e530:	4680      	movhi	r8, r0
 800e532:	2303      	movs	r3, #3
 800e534:	6123      	str	r3, [r4, #16]
 800e536:	9b05      	ldr	r3, [sp, #20]
 800e538:	f023 0204 	bic.w	r2, r3, #4
 800e53c:	6022      	str	r2, [r4, #0]
 800e53e:	f04f 0900 	mov.w	r9, #0
 800e542:	9700      	str	r7, [sp, #0]
 800e544:	4633      	mov	r3, r6
 800e546:	aa0b      	add	r2, sp, #44	; 0x2c
 800e548:	4621      	mov	r1, r4
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 f9d8 	bl	800e900 <_printf_common>
 800e550:	3001      	adds	r0, #1
 800e552:	f040 8090 	bne.w	800e676 <_printf_float+0x1e2>
 800e556:	f04f 30ff 	mov.w	r0, #4294967295
 800e55a:	b00d      	add	sp, #52	; 0x34
 800e55c:	ecbd 8b02 	vpop	{d8}
 800e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e564:	4642      	mov	r2, r8
 800e566:	464b      	mov	r3, r9
 800e568:	4640      	mov	r0, r8
 800e56a:	4649      	mov	r1, r9
 800e56c:	f7f2 faee 	bl	8000b4c <__aeabi_dcmpun>
 800e570:	b140      	cbz	r0, 800e584 <_printf_float+0xf0>
 800e572:	464b      	mov	r3, r9
 800e574:	2b00      	cmp	r3, #0
 800e576:	bfbc      	itt	lt
 800e578:	232d      	movlt	r3, #45	; 0x2d
 800e57a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e57e:	487f      	ldr	r0, [pc, #508]	; (800e77c <_printf_float+0x2e8>)
 800e580:	4b7f      	ldr	r3, [pc, #508]	; (800e780 <_printf_float+0x2ec>)
 800e582:	e7d1      	b.n	800e528 <_printf_float+0x94>
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e58a:	9206      	str	r2, [sp, #24]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	d13f      	bne.n	800e610 <_printf_float+0x17c>
 800e590:	2306      	movs	r3, #6
 800e592:	6063      	str	r3, [r4, #4]
 800e594:	9b05      	ldr	r3, [sp, #20]
 800e596:	6861      	ldr	r1, [r4, #4]
 800e598:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e59c:	2300      	movs	r3, #0
 800e59e:	9303      	str	r3, [sp, #12]
 800e5a0:	ab0a      	add	r3, sp, #40	; 0x28
 800e5a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e5a6:	ab09      	add	r3, sp, #36	; 0x24
 800e5a8:	ec49 8b10 	vmov	d0, r8, r9
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	6022      	str	r2, [r4, #0]
 800e5b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	f7ff fecd 	bl	800e354 <__cvt>
 800e5ba:	9b06      	ldr	r3, [sp, #24]
 800e5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5be:	2b47      	cmp	r3, #71	; 0x47
 800e5c0:	4680      	mov	r8, r0
 800e5c2:	d108      	bne.n	800e5d6 <_printf_float+0x142>
 800e5c4:	1cc8      	adds	r0, r1, #3
 800e5c6:	db02      	blt.n	800e5ce <_printf_float+0x13a>
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	4299      	cmp	r1, r3
 800e5cc:	dd41      	ble.n	800e652 <_printf_float+0x1be>
 800e5ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800e5d2:	fa5f fb8b 	uxtb.w	fp, fp
 800e5d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5da:	d820      	bhi.n	800e61e <_printf_float+0x18a>
 800e5dc:	3901      	subs	r1, #1
 800e5de:	465a      	mov	r2, fp
 800e5e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5e4:	9109      	str	r1, [sp, #36]	; 0x24
 800e5e6:	f7ff ff17 	bl	800e418 <__exponent>
 800e5ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ec:	1813      	adds	r3, r2, r0
 800e5ee:	2a01      	cmp	r2, #1
 800e5f0:	4681      	mov	r9, r0
 800e5f2:	6123      	str	r3, [r4, #16]
 800e5f4:	dc02      	bgt.n	800e5fc <_printf_float+0x168>
 800e5f6:	6822      	ldr	r2, [r4, #0]
 800e5f8:	07d2      	lsls	r2, r2, #31
 800e5fa:	d501      	bpl.n	800e600 <_printf_float+0x16c>
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	6123      	str	r3, [r4, #16]
 800e600:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e604:	2b00      	cmp	r3, #0
 800e606:	d09c      	beq.n	800e542 <_printf_float+0xae>
 800e608:	232d      	movs	r3, #45	; 0x2d
 800e60a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e60e:	e798      	b.n	800e542 <_printf_float+0xae>
 800e610:	9a06      	ldr	r2, [sp, #24]
 800e612:	2a47      	cmp	r2, #71	; 0x47
 800e614:	d1be      	bne.n	800e594 <_printf_float+0x100>
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1bc      	bne.n	800e594 <_printf_float+0x100>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e7b9      	b.n	800e592 <_printf_float+0xfe>
 800e61e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e622:	d118      	bne.n	800e656 <_printf_float+0x1c2>
 800e624:	2900      	cmp	r1, #0
 800e626:	6863      	ldr	r3, [r4, #4]
 800e628:	dd0b      	ble.n	800e642 <_printf_float+0x1ae>
 800e62a:	6121      	str	r1, [r4, #16]
 800e62c:	b913      	cbnz	r3, 800e634 <_printf_float+0x1a0>
 800e62e:	6822      	ldr	r2, [r4, #0]
 800e630:	07d0      	lsls	r0, r2, #31
 800e632:	d502      	bpl.n	800e63a <_printf_float+0x1a6>
 800e634:	3301      	adds	r3, #1
 800e636:	440b      	add	r3, r1
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e63c:	f04f 0900 	mov.w	r9, #0
 800e640:	e7de      	b.n	800e600 <_printf_float+0x16c>
 800e642:	b913      	cbnz	r3, 800e64a <_printf_float+0x1b6>
 800e644:	6822      	ldr	r2, [r4, #0]
 800e646:	07d2      	lsls	r2, r2, #31
 800e648:	d501      	bpl.n	800e64e <_printf_float+0x1ba>
 800e64a:	3302      	adds	r3, #2
 800e64c:	e7f4      	b.n	800e638 <_printf_float+0x1a4>
 800e64e:	2301      	movs	r3, #1
 800e650:	e7f2      	b.n	800e638 <_printf_float+0x1a4>
 800e652:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e658:	4299      	cmp	r1, r3
 800e65a:	db05      	blt.n	800e668 <_printf_float+0x1d4>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	6121      	str	r1, [r4, #16]
 800e660:	07d8      	lsls	r0, r3, #31
 800e662:	d5ea      	bpl.n	800e63a <_printf_float+0x1a6>
 800e664:	1c4b      	adds	r3, r1, #1
 800e666:	e7e7      	b.n	800e638 <_printf_float+0x1a4>
 800e668:	2900      	cmp	r1, #0
 800e66a:	bfd4      	ite	le
 800e66c:	f1c1 0202 	rsble	r2, r1, #2
 800e670:	2201      	movgt	r2, #1
 800e672:	4413      	add	r3, r2
 800e674:	e7e0      	b.n	800e638 <_printf_float+0x1a4>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	055a      	lsls	r2, r3, #21
 800e67a:	d407      	bmi.n	800e68c <_printf_float+0x1f8>
 800e67c:	6923      	ldr	r3, [r4, #16]
 800e67e:	4642      	mov	r2, r8
 800e680:	4631      	mov	r1, r6
 800e682:	4628      	mov	r0, r5
 800e684:	47b8      	blx	r7
 800e686:	3001      	adds	r0, #1
 800e688:	d12c      	bne.n	800e6e4 <_printf_float+0x250>
 800e68a:	e764      	b.n	800e556 <_printf_float+0xc2>
 800e68c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e690:	f240 80e0 	bls.w	800e854 <_printf_float+0x3c0>
 800e694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e698:	2200      	movs	r2, #0
 800e69a:	2300      	movs	r3, #0
 800e69c:	f7f2 fa24 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d034      	beq.n	800e70e <_printf_float+0x27a>
 800e6a4:	4a37      	ldr	r2, [pc, #220]	; (800e784 <_printf_float+0x2f0>)
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af51 	beq.w	800e556 <_printf_float+0xc2>
 800e6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	db02      	blt.n	800e6c2 <_printf_float+0x22e>
 800e6bc:	6823      	ldr	r3, [r4, #0]
 800e6be:	07d8      	lsls	r0, r3, #31
 800e6c0:	d510      	bpl.n	800e6e4 <_printf_float+0x250>
 800e6c2:	ee18 3a10 	vmov	r3, s16
 800e6c6:	4652      	mov	r2, sl
 800e6c8:	4631      	mov	r1, r6
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	47b8      	blx	r7
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	f43f af41 	beq.w	800e556 <_printf_float+0xc2>
 800e6d4:	f04f 0800 	mov.w	r8, #0
 800e6d8:	f104 091a 	add.w	r9, r4, #26
 800e6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	4543      	cmp	r3, r8
 800e6e2:	dc09      	bgt.n	800e6f8 <_printf_float+0x264>
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	079b      	lsls	r3, r3, #30
 800e6e8:	f100 8105 	bmi.w	800e8f6 <_printf_float+0x462>
 800e6ec:	68e0      	ldr	r0, [r4, #12]
 800e6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6f0:	4298      	cmp	r0, r3
 800e6f2:	bfb8      	it	lt
 800e6f4:	4618      	movlt	r0, r3
 800e6f6:	e730      	b.n	800e55a <_printf_float+0xc6>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	464a      	mov	r2, r9
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4628      	mov	r0, r5
 800e700:	47b8      	blx	r7
 800e702:	3001      	adds	r0, #1
 800e704:	f43f af27 	beq.w	800e556 <_printf_float+0xc2>
 800e708:	f108 0801 	add.w	r8, r8, #1
 800e70c:	e7e6      	b.n	800e6dc <_printf_float+0x248>
 800e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	dc39      	bgt.n	800e788 <_printf_float+0x2f4>
 800e714:	4a1b      	ldr	r2, [pc, #108]	; (800e784 <_printf_float+0x2f0>)
 800e716:	2301      	movs	r3, #1
 800e718:	4631      	mov	r1, r6
 800e71a:	4628      	mov	r0, r5
 800e71c:	47b8      	blx	r7
 800e71e:	3001      	adds	r0, #1
 800e720:	f43f af19 	beq.w	800e556 <_printf_float+0xc2>
 800e724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e728:	4313      	orrs	r3, r2
 800e72a:	d102      	bne.n	800e732 <_printf_float+0x29e>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	07d9      	lsls	r1, r3, #31
 800e730:	d5d8      	bpl.n	800e6e4 <_printf_float+0x250>
 800e732:	ee18 3a10 	vmov	r3, s16
 800e736:	4652      	mov	r2, sl
 800e738:	4631      	mov	r1, r6
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b8      	blx	r7
 800e73e:	3001      	adds	r0, #1
 800e740:	f43f af09 	beq.w	800e556 <_printf_float+0xc2>
 800e744:	f04f 0900 	mov.w	r9, #0
 800e748:	f104 0a1a 	add.w	sl, r4, #26
 800e74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e74e:	425b      	negs	r3, r3
 800e750:	454b      	cmp	r3, r9
 800e752:	dc01      	bgt.n	800e758 <_printf_float+0x2c4>
 800e754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e756:	e792      	b.n	800e67e <_printf_float+0x1ea>
 800e758:	2301      	movs	r3, #1
 800e75a:	4652      	mov	r2, sl
 800e75c:	4631      	mov	r1, r6
 800e75e:	4628      	mov	r0, r5
 800e760:	47b8      	blx	r7
 800e762:	3001      	adds	r0, #1
 800e764:	f43f aef7 	beq.w	800e556 <_printf_float+0xc2>
 800e768:	f109 0901 	add.w	r9, r9, #1
 800e76c:	e7ee      	b.n	800e74c <_printf_float+0x2b8>
 800e76e:	bf00      	nop
 800e770:	7fefffff 	.word	0x7fefffff
 800e774:	0801d3b1 	.word	0x0801d3b1
 800e778:	0801d3b5 	.word	0x0801d3b5
 800e77c:	0801d3bd 	.word	0x0801d3bd
 800e780:	0801d3b9 	.word	0x0801d3b9
 800e784:	0801d3c1 	.word	0x0801d3c1
 800e788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e78a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e78c:	429a      	cmp	r2, r3
 800e78e:	bfa8      	it	ge
 800e790:	461a      	movge	r2, r3
 800e792:	2a00      	cmp	r2, #0
 800e794:	4691      	mov	r9, r2
 800e796:	dc37      	bgt.n	800e808 <_printf_float+0x374>
 800e798:	f04f 0b00 	mov.w	fp, #0
 800e79c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7a0:	f104 021a 	add.w	r2, r4, #26
 800e7a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7a6:	9305      	str	r3, [sp, #20]
 800e7a8:	eba3 0309 	sub.w	r3, r3, r9
 800e7ac:	455b      	cmp	r3, fp
 800e7ae:	dc33      	bgt.n	800e818 <_printf_float+0x384>
 800e7b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	db3b      	blt.n	800e830 <_printf_float+0x39c>
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	07da      	lsls	r2, r3, #31
 800e7bc:	d438      	bmi.n	800e830 <_printf_float+0x39c>
 800e7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c0:	9a05      	ldr	r2, [sp, #20]
 800e7c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7c4:	1a9a      	subs	r2, r3, r2
 800e7c6:	eba3 0901 	sub.w	r9, r3, r1
 800e7ca:	4591      	cmp	r9, r2
 800e7cc:	bfa8      	it	ge
 800e7ce:	4691      	movge	r9, r2
 800e7d0:	f1b9 0f00 	cmp.w	r9, #0
 800e7d4:	dc35      	bgt.n	800e842 <_printf_float+0x3ae>
 800e7d6:	f04f 0800 	mov.w	r8, #0
 800e7da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7de:	f104 0a1a 	add.w	sl, r4, #26
 800e7e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7e6:	1a9b      	subs	r3, r3, r2
 800e7e8:	eba3 0309 	sub.w	r3, r3, r9
 800e7ec:	4543      	cmp	r3, r8
 800e7ee:	f77f af79 	ble.w	800e6e4 <_printf_float+0x250>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4652      	mov	r2, sl
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	47b8      	blx	r7
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	f43f aeaa 	beq.w	800e556 <_printf_float+0xc2>
 800e802:	f108 0801 	add.w	r8, r8, #1
 800e806:	e7ec      	b.n	800e7e2 <_printf_float+0x34e>
 800e808:	4613      	mov	r3, r2
 800e80a:	4631      	mov	r1, r6
 800e80c:	4642      	mov	r2, r8
 800e80e:	4628      	mov	r0, r5
 800e810:	47b8      	blx	r7
 800e812:	3001      	adds	r0, #1
 800e814:	d1c0      	bne.n	800e798 <_printf_float+0x304>
 800e816:	e69e      	b.n	800e556 <_printf_float+0xc2>
 800e818:	2301      	movs	r3, #1
 800e81a:	4631      	mov	r1, r6
 800e81c:	4628      	mov	r0, r5
 800e81e:	9205      	str	r2, [sp, #20]
 800e820:	47b8      	blx	r7
 800e822:	3001      	adds	r0, #1
 800e824:	f43f ae97 	beq.w	800e556 <_printf_float+0xc2>
 800e828:	9a05      	ldr	r2, [sp, #20]
 800e82a:	f10b 0b01 	add.w	fp, fp, #1
 800e82e:	e7b9      	b.n	800e7a4 <_printf_float+0x310>
 800e830:	ee18 3a10 	vmov	r3, s16
 800e834:	4652      	mov	r2, sl
 800e836:	4631      	mov	r1, r6
 800e838:	4628      	mov	r0, r5
 800e83a:	47b8      	blx	r7
 800e83c:	3001      	adds	r0, #1
 800e83e:	d1be      	bne.n	800e7be <_printf_float+0x32a>
 800e840:	e689      	b.n	800e556 <_printf_float+0xc2>
 800e842:	9a05      	ldr	r2, [sp, #20]
 800e844:	464b      	mov	r3, r9
 800e846:	4442      	add	r2, r8
 800e848:	4631      	mov	r1, r6
 800e84a:	4628      	mov	r0, r5
 800e84c:	47b8      	blx	r7
 800e84e:	3001      	adds	r0, #1
 800e850:	d1c1      	bne.n	800e7d6 <_printf_float+0x342>
 800e852:	e680      	b.n	800e556 <_printf_float+0xc2>
 800e854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e856:	2a01      	cmp	r2, #1
 800e858:	dc01      	bgt.n	800e85e <_printf_float+0x3ca>
 800e85a:	07db      	lsls	r3, r3, #31
 800e85c:	d538      	bpl.n	800e8d0 <_printf_float+0x43c>
 800e85e:	2301      	movs	r3, #1
 800e860:	4642      	mov	r2, r8
 800e862:	4631      	mov	r1, r6
 800e864:	4628      	mov	r0, r5
 800e866:	47b8      	blx	r7
 800e868:	3001      	adds	r0, #1
 800e86a:	f43f ae74 	beq.w	800e556 <_printf_float+0xc2>
 800e86e:	ee18 3a10 	vmov	r3, s16
 800e872:	4652      	mov	r2, sl
 800e874:	4631      	mov	r1, r6
 800e876:	4628      	mov	r0, r5
 800e878:	47b8      	blx	r7
 800e87a:	3001      	adds	r0, #1
 800e87c:	f43f ae6b 	beq.w	800e556 <_printf_float+0xc2>
 800e880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e884:	2200      	movs	r2, #0
 800e886:	2300      	movs	r3, #0
 800e888:	f7f2 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e88c:	b9d8      	cbnz	r0, 800e8c6 <_printf_float+0x432>
 800e88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e890:	f108 0201 	add.w	r2, r8, #1
 800e894:	3b01      	subs	r3, #1
 800e896:	4631      	mov	r1, r6
 800e898:	4628      	mov	r0, r5
 800e89a:	47b8      	blx	r7
 800e89c:	3001      	adds	r0, #1
 800e89e:	d10e      	bne.n	800e8be <_printf_float+0x42a>
 800e8a0:	e659      	b.n	800e556 <_printf_float+0xc2>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4652      	mov	r2, sl
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	47b8      	blx	r7
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	f43f ae52 	beq.w	800e556 <_printf_float+0xc2>
 800e8b2:	f108 0801 	add.w	r8, r8, #1
 800e8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	4543      	cmp	r3, r8
 800e8bc:	dcf1      	bgt.n	800e8a2 <_printf_float+0x40e>
 800e8be:	464b      	mov	r3, r9
 800e8c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e8c4:	e6dc      	b.n	800e680 <_printf_float+0x1ec>
 800e8c6:	f04f 0800 	mov.w	r8, #0
 800e8ca:	f104 0a1a 	add.w	sl, r4, #26
 800e8ce:	e7f2      	b.n	800e8b6 <_printf_float+0x422>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	4642      	mov	r2, r8
 800e8d4:	e7df      	b.n	800e896 <_printf_float+0x402>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	464a      	mov	r2, r9
 800e8da:	4631      	mov	r1, r6
 800e8dc:	4628      	mov	r0, r5
 800e8de:	47b8      	blx	r7
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	f43f ae38 	beq.w	800e556 <_printf_float+0xc2>
 800e8e6:	f108 0801 	add.w	r8, r8, #1
 800e8ea:	68e3      	ldr	r3, [r4, #12]
 800e8ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8ee:	1a5b      	subs	r3, r3, r1
 800e8f0:	4543      	cmp	r3, r8
 800e8f2:	dcf0      	bgt.n	800e8d6 <_printf_float+0x442>
 800e8f4:	e6fa      	b.n	800e6ec <_printf_float+0x258>
 800e8f6:	f04f 0800 	mov.w	r8, #0
 800e8fa:	f104 0919 	add.w	r9, r4, #25
 800e8fe:	e7f4      	b.n	800e8ea <_printf_float+0x456>

0800e900 <_printf_common>:
 800e900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	4616      	mov	r6, r2
 800e906:	4699      	mov	r9, r3
 800e908:	688a      	ldr	r2, [r1, #8]
 800e90a:	690b      	ldr	r3, [r1, #16]
 800e90c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e910:	4293      	cmp	r3, r2
 800e912:	bfb8      	it	lt
 800e914:	4613      	movlt	r3, r2
 800e916:	6033      	str	r3, [r6, #0]
 800e918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e91c:	4607      	mov	r7, r0
 800e91e:	460c      	mov	r4, r1
 800e920:	b10a      	cbz	r2, 800e926 <_printf_common+0x26>
 800e922:	3301      	adds	r3, #1
 800e924:	6033      	str	r3, [r6, #0]
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	0699      	lsls	r1, r3, #26
 800e92a:	bf42      	ittt	mi
 800e92c:	6833      	ldrmi	r3, [r6, #0]
 800e92e:	3302      	addmi	r3, #2
 800e930:	6033      	strmi	r3, [r6, #0]
 800e932:	6825      	ldr	r5, [r4, #0]
 800e934:	f015 0506 	ands.w	r5, r5, #6
 800e938:	d106      	bne.n	800e948 <_printf_common+0x48>
 800e93a:	f104 0a19 	add.w	sl, r4, #25
 800e93e:	68e3      	ldr	r3, [r4, #12]
 800e940:	6832      	ldr	r2, [r6, #0]
 800e942:	1a9b      	subs	r3, r3, r2
 800e944:	42ab      	cmp	r3, r5
 800e946:	dc26      	bgt.n	800e996 <_printf_common+0x96>
 800e948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e94c:	1e13      	subs	r3, r2, #0
 800e94e:	6822      	ldr	r2, [r4, #0]
 800e950:	bf18      	it	ne
 800e952:	2301      	movne	r3, #1
 800e954:	0692      	lsls	r2, r2, #26
 800e956:	d42b      	bmi.n	800e9b0 <_printf_common+0xb0>
 800e958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e95c:	4649      	mov	r1, r9
 800e95e:	4638      	mov	r0, r7
 800e960:	47c0      	blx	r8
 800e962:	3001      	adds	r0, #1
 800e964:	d01e      	beq.n	800e9a4 <_printf_common+0xa4>
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	68e5      	ldr	r5, [r4, #12]
 800e96a:	6832      	ldr	r2, [r6, #0]
 800e96c:	f003 0306 	and.w	r3, r3, #6
 800e970:	2b04      	cmp	r3, #4
 800e972:	bf08      	it	eq
 800e974:	1aad      	subeq	r5, r5, r2
 800e976:	68a3      	ldr	r3, [r4, #8]
 800e978:	6922      	ldr	r2, [r4, #16]
 800e97a:	bf0c      	ite	eq
 800e97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e980:	2500      	movne	r5, #0
 800e982:	4293      	cmp	r3, r2
 800e984:	bfc4      	itt	gt
 800e986:	1a9b      	subgt	r3, r3, r2
 800e988:	18ed      	addgt	r5, r5, r3
 800e98a:	2600      	movs	r6, #0
 800e98c:	341a      	adds	r4, #26
 800e98e:	42b5      	cmp	r5, r6
 800e990:	d11a      	bne.n	800e9c8 <_printf_common+0xc8>
 800e992:	2000      	movs	r0, #0
 800e994:	e008      	b.n	800e9a8 <_printf_common+0xa8>
 800e996:	2301      	movs	r3, #1
 800e998:	4652      	mov	r2, sl
 800e99a:	4649      	mov	r1, r9
 800e99c:	4638      	mov	r0, r7
 800e99e:	47c0      	blx	r8
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	d103      	bne.n	800e9ac <_printf_common+0xac>
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ac:	3501      	adds	r5, #1
 800e9ae:	e7c6      	b.n	800e93e <_printf_common+0x3e>
 800e9b0:	18e1      	adds	r1, r4, r3
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	2030      	movs	r0, #48	; 0x30
 800e9b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9ba:	4422      	add	r2, r4
 800e9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9c4:	3302      	adds	r3, #2
 800e9c6:	e7c7      	b.n	800e958 <_printf_common+0x58>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	47c0      	blx	r8
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	d0e6      	beq.n	800e9a4 <_printf_common+0xa4>
 800e9d6:	3601      	adds	r6, #1
 800e9d8:	e7d9      	b.n	800e98e <_printf_common+0x8e>
	...

0800e9dc <_printf_i>:
 800e9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e0:	7e0f      	ldrb	r7, [r1, #24]
 800e9e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e9e4:	2f78      	cmp	r7, #120	; 0x78
 800e9e6:	4691      	mov	r9, r2
 800e9e8:	4680      	mov	r8, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	469a      	mov	sl, r3
 800e9ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9f2:	d807      	bhi.n	800ea04 <_printf_i+0x28>
 800e9f4:	2f62      	cmp	r7, #98	; 0x62
 800e9f6:	d80a      	bhi.n	800ea0e <_printf_i+0x32>
 800e9f8:	2f00      	cmp	r7, #0
 800e9fa:	f000 80d8 	beq.w	800ebae <_printf_i+0x1d2>
 800e9fe:	2f58      	cmp	r7, #88	; 0x58
 800ea00:	f000 80a3 	beq.w	800eb4a <_printf_i+0x16e>
 800ea04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea0c:	e03a      	b.n	800ea84 <_printf_i+0xa8>
 800ea0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea12:	2b15      	cmp	r3, #21
 800ea14:	d8f6      	bhi.n	800ea04 <_printf_i+0x28>
 800ea16:	a101      	add	r1, pc, #4	; (adr r1, 800ea1c <_printf_i+0x40>)
 800ea18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea1c:	0800ea75 	.word	0x0800ea75
 800ea20:	0800ea89 	.word	0x0800ea89
 800ea24:	0800ea05 	.word	0x0800ea05
 800ea28:	0800ea05 	.word	0x0800ea05
 800ea2c:	0800ea05 	.word	0x0800ea05
 800ea30:	0800ea05 	.word	0x0800ea05
 800ea34:	0800ea89 	.word	0x0800ea89
 800ea38:	0800ea05 	.word	0x0800ea05
 800ea3c:	0800ea05 	.word	0x0800ea05
 800ea40:	0800ea05 	.word	0x0800ea05
 800ea44:	0800ea05 	.word	0x0800ea05
 800ea48:	0800eb95 	.word	0x0800eb95
 800ea4c:	0800eab9 	.word	0x0800eab9
 800ea50:	0800eb77 	.word	0x0800eb77
 800ea54:	0800ea05 	.word	0x0800ea05
 800ea58:	0800ea05 	.word	0x0800ea05
 800ea5c:	0800ebb7 	.word	0x0800ebb7
 800ea60:	0800ea05 	.word	0x0800ea05
 800ea64:	0800eab9 	.word	0x0800eab9
 800ea68:	0800ea05 	.word	0x0800ea05
 800ea6c:	0800ea05 	.word	0x0800ea05
 800ea70:	0800eb7f 	.word	0x0800eb7f
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	1d1a      	adds	r2, r3, #4
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	602a      	str	r2, [r5, #0]
 800ea7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea84:	2301      	movs	r3, #1
 800ea86:	e0a3      	b.n	800ebd0 <_printf_i+0x1f4>
 800ea88:	6820      	ldr	r0, [r4, #0]
 800ea8a:	6829      	ldr	r1, [r5, #0]
 800ea8c:	0606      	lsls	r6, r0, #24
 800ea8e:	f101 0304 	add.w	r3, r1, #4
 800ea92:	d50a      	bpl.n	800eaaa <_printf_i+0xce>
 800ea94:	680e      	ldr	r6, [r1, #0]
 800ea96:	602b      	str	r3, [r5, #0]
 800ea98:	2e00      	cmp	r6, #0
 800ea9a:	da03      	bge.n	800eaa4 <_printf_i+0xc8>
 800ea9c:	232d      	movs	r3, #45	; 0x2d
 800ea9e:	4276      	negs	r6, r6
 800eaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaa4:	485e      	ldr	r0, [pc, #376]	; (800ec20 <_printf_i+0x244>)
 800eaa6:	230a      	movs	r3, #10
 800eaa8:	e019      	b.n	800eade <_printf_i+0x102>
 800eaaa:	680e      	ldr	r6, [r1, #0]
 800eaac:	602b      	str	r3, [r5, #0]
 800eaae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eab2:	bf18      	it	ne
 800eab4:	b236      	sxthne	r6, r6
 800eab6:	e7ef      	b.n	800ea98 <_printf_i+0xbc>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	6820      	ldr	r0, [r4, #0]
 800eabc:	1d19      	adds	r1, r3, #4
 800eabe:	6029      	str	r1, [r5, #0]
 800eac0:	0601      	lsls	r1, r0, #24
 800eac2:	d501      	bpl.n	800eac8 <_printf_i+0xec>
 800eac4:	681e      	ldr	r6, [r3, #0]
 800eac6:	e002      	b.n	800eace <_printf_i+0xf2>
 800eac8:	0646      	lsls	r6, r0, #25
 800eaca:	d5fb      	bpl.n	800eac4 <_printf_i+0xe8>
 800eacc:	881e      	ldrh	r6, [r3, #0]
 800eace:	4854      	ldr	r0, [pc, #336]	; (800ec20 <_printf_i+0x244>)
 800ead0:	2f6f      	cmp	r7, #111	; 0x6f
 800ead2:	bf0c      	ite	eq
 800ead4:	2308      	moveq	r3, #8
 800ead6:	230a      	movne	r3, #10
 800ead8:	2100      	movs	r1, #0
 800eada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eade:	6865      	ldr	r5, [r4, #4]
 800eae0:	60a5      	str	r5, [r4, #8]
 800eae2:	2d00      	cmp	r5, #0
 800eae4:	bfa2      	ittt	ge
 800eae6:	6821      	ldrge	r1, [r4, #0]
 800eae8:	f021 0104 	bicge.w	r1, r1, #4
 800eaec:	6021      	strge	r1, [r4, #0]
 800eaee:	b90e      	cbnz	r6, 800eaf4 <_printf_i+0x118>
 800eaf0:	2d00      	cmp	r5, #0
 800eaf2:	d04d      	beq.n	800eb90 <_printf_i+0x1b4>
 800eaf4:	4615      	mov	r5, r2
 800eaf6:	fbb6 f1f3 	udiv	r1, r6, r3
 800eafa:	fb03 6711 	mls	r7, r3, r1, r6
 800eafe:	5dc7      	ldrb	r7, [r0, r7]
 800eb00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb04:	4637      	mov	r7, r6
 800eb06:	42bb      	cmp	r3, r7
 800eb08:	460e      	mov	r6, r1
 800eb0a:	d9f4      	bls.n	800eaf6 <_printf_i+0x11a>
 800eb0c:	2b08      	cmp	r3, #8
 800eb0e:	d10b      	bne.n	800eb28 <_printf_i+0x14c>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	07de      	lsls	r6, r3, #31
 800eb14:	d508      	bpl.n	800eb28 <_printf_i+0x14c>
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	6861      	ldr	r1, [r4, #4]
 800eb1a:	4299      	cmp	r1, r3
 800eb1c:	bfde      	ittt	le
 800eb1e:	2330      	movle	r3, #48	; 0x30
 800eb20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb24:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb28:	1b52      	subs	r2, r2, r5
 800eb2a:	6122      	str	r2, [r4, #16]
 800eb2c:	f8cd a000 	str.w	sl, [sp]
 800eb30:	464b      	mov	r3, r9
 800eb32:	aa03      	add	r2, sp, #12
 800eb34:	4621      	mov	r1, r4
 800eb36:	4640      	mov	r0, r8
 800eb38:	f7ff fee2 	bl	800e900 <_printf_common>
 800eb3c:	3001      	adds	r0, #1
 800eb3e:	d14c      	bne.n	800ebda <_printf_i+0x1fe>
 800eb40:	f04f 30ff 	mov.w	r0, #4294967295
 800eb44:	b004      	add	sp, #16
 800eb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4a:	4835      	ldr	r0, [pc, #212]	; (800ec20 <_printf_i+0x244>)
 800eb4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eb50:	6829      	ldr	r1, [r5, #0]
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb58:	6029      	str	r1, [r5, #0]
 800eb5a:	061d      	lsls	r5, r3, #24
 800eb5c:	d514      	bpl.n	800eb88 <_printf_i+0x1ac>
 800eb5e:	07df      	lsls	r7, r3, #31
 800eb60:	bf44      	itt	mi
 800eb62:	f043 0320 	orrmi.w	r3, r3, #32
 800eb66:	6023      	strmi	r3, [r4, #0]
 800eb68:	b91e      	cbnz	r6, 800eb72 <_printf_i+0x196>
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	f023 0320 	bic.w	r3, r3, #32
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	2310      	movs	r3, #16
 800eb74:	e7b0      	b.n	800ead8 <_printf_i+0xfc>
 800eb76:	6823      	ldr	r3, [r4, #0]
 800eb78:	f043 0320 	orr.w	r3, r3, #32
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	2378      	movs	r3, #120	; 0x78
 800eb80:	4828      	ldr	r0, [pc, #160]	; (800ec24 <_printf_i+0x248>)
 800eb82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb86:	e7e3      	b.n	800eb50 <_printf_i+0x174>
 800eb88:	0659      	lsls	r1, r3, #25
 800eb8a:	bf48      	it	mi
 800eb8c:	b2b6      	uxthmi	r6, r6
 800eb8e:	e7e6      	b.n	800eb5e <_printf_i+0x182>
 800eb90:	4615      	mov	r5, r2
 800eb92:	e7bb      	b.n	800eb0c <_printf_i+0x130>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	6826      	ldr	r6, [r4, #0]
 800eb98:	6961      	ldr	r1, [r4, #20]
 800eb9a:	1d18      	adds	r0, r3, #4
 800eb9c:	6028      	str	r0, [r5, #0]
 800eb9e:	0635      	lsls	r5, r6, #24
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	d501      	bpl.n	800eba8 <_printf_i+0x1cc>
 800eba4:	6019      	str	r1, [r3, #0]
 800eba6:	e002      	b.n	800ebae <_printf_i+0x1d2>
 800eba8:	0670      	lsls	r0, r6, #25
 800ebaa:	d5fb      	bpl.n	800eba4 <_printf_i+0x1c8>
 800ebac:	8019      	strh	r1, [r3, #0]
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	4615      	mov	r5, r2
 800ebb4:	e7ba      	b.n	800eb2c <_printf_i+0x150>
 800ebb6:	682b      	ldr	r3, [r5, #0]
 800ebb8:	1d1a      	adds	r2, r3, #4
 800ebba:	602a      	str	r2, [r5, #0]
 800ebbc:	681d      	ldr	r5, [r3, #0]
 800ebbe:	6862      	ldr	r2, [r4, #4]
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f7f1 fb1c 	bl	8000200 <memchr>
 800ebc8:	b108      	cbz	r0, 800ebce <_printf_i+0x1f2>
 800ebca:	1b40      	subs	r0, r0, r5
 800ebcc:	6060      	str	r0, [r4, #4]
 800ebce:	6863      	ldr	r3, [r4, #4]
 800ebd0:	6123      	str	r3, [r4, #16]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd8:	e7a8      	b.n	800eb2c <_printf_i+0x150>
 800ebda:	6923      	ldr	r3, [r4, #16]
 800ebdc:	462a      	mov	r2, r5
 800ebde:	4649      	mov	r1, r9
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	47d0      	blx	sl
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d0ab      	beq.n	800eb40 <_printf_i+0x164>
 800ebe8:	6823      	ldr	r3, [r4, #0]
 800ebea:	079b      	lsls	r3, r3, #30
 800ebec:	d413      	bmi.n	800ec16 <_printf_i+0x23a>
 800ebee:	68e0      	ldr	r0, [r4, #12]
 800ebf0:	9b03      	ldr	r3, [sp, #12]
 800ebf2:	4298      	cmp	r0, r3
 800ebf4:	bfb8      	it	lt
 800ebf6:	4618      	movlt	r0, r3
 800ebf8:	e7a4      	b.n	800eb44 <_printf_i+0x168>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	4649      	mov	r1, r9
 800ec00:	4640      	mov	r0, r8
 800ec02:	47d0      	blx	sl
 800ec04:	3001      	adds	r0, #1
 800ec06:	d09b      	beq.n	800eb40 <_printf_i+0x164>
 800ec08:	3501      	adds	r5, #1
 800ec0a:	68e3      	ldr	r3, [r4, #12]
 800ec0c:	9903      	ldr	r1, [sp, #12]
 800ec0e:	1a5b      	subs	r3, r3, r1
 800ec10:	42ab      	cmp	r3, r5
 800ec12:	dcf2      	bgt.n	800ebfa <_printf_i+0x21e>
 800ec14:	e7eb      	b.n	800ebee <_printf_i+0x212>
 800ec16:	2500      	movs	r5, #0
 800ec18:	f104 0619 	add.w	r6, r4, #25
 800ec1c:	e7f5      	b.n	800ec0a <_printf_i+0x22e>
 800ec1e:	bf00      	nop
 800ec20:	0801d3c3 	.word	0x0801d3c3
 800ec24:	0801d3d4 	.word	0x0801d3d4

0800ec28 <_sbrk_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4d06      	ldr	r5, [pc, #24]	; (800ec44 <_sbrk_r+0x1c>)
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4604      	mov	r4, r0
 800ec30:	4608      	mov	r0, r1
 800ec32:	602b      	str	r3, [r5, #0]
 800ec34:	f7f5 f866 	bl	8003d04 <_sbrk>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d102      	bne.n	800ec42 <_sbrk_r+0x1a>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	b103      	cbz	r3, 800ec42 <_sbrk_r+0x1a>
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	20005a70 	.word	0x20005a70

0800ec48 <siprintf>:
 800ec48:	b40e      	push	{r1, r2, r3}
 800ec4a:	b500      	push	{lr}
 800ec4c:	b09c      	sub	sp, #112	; 0x70
 800ec4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ec50:	9002      	str	r0, [sp, #8]
 800ec52:	9006      	str	r0, [sp, #24]
 800ec54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec58:	4809      	ldr	r0, [pc, #36]	; (800ec80 <siprintf+0x38>)
 800ec5a:	9107      	str	r1, [sp, #28]
 800ec5c:	9104      	str	r1, [sp, #16]
 800ec5e:	4909      	ldr	r1, [pc, #36]	; (800ec84 <siprintf+0x3c>)
 800ec60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec64:	9105      	str	r1, [sp, #20]
 800ec66:	6800      	ldr	r0, [r0, #0]
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	a902      	add	r1, sp, #8
 800ec6c:	f001 fe5a 	bl	8010924 <_svfiprintf_r>
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	2200      	movs	r2, #0
 800ec74:	701a      	strb	r2, [r3, #0]
 800ec76:	b01c      	add	sp, #112	; 0x70
 800ec78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec7c:	b003      	add	sp, #12
 800ec7e:	4770      	bx	lr
 800ec80:	200000c4 	.word	0x200000c4
 800ec84:	ffff0208 	.word	0xffff0208

0800ec88 <__sread>:
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec90:	f001 ff48 	bl	8010b24 <_read_r>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	bfab      	itete	ge
 800ec98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec9c:	181b      	addge	r3, r3, r0
 800ec9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eca2:	bfac      	ite	ge
 800eca4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eca6:	81a3      	strhlt	r3, [r4, #12]
 800eca8:	bd10      	pop	{r4, pc}

0800ecaa <__swrite>:
 800ecaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecae:	461f      	mov	r7, r3
 800ecb0:	898b      	ldrh	r3, [r1, #12]
 800ecb2:	05db      	lsls	r3, r3, #23
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	4616      	mov	r6, r2
 800ecba:	d505      	bpl.n	800ecc8 <__swrite+0x1e>
 800ecbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f001 f95a 	bl	800ff7c <_lseek_r>
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecd2:	81a3      	strh	r3, [r4, #12]
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	463b      	mov	r3, r7
 800ecd8:	4628      	mov	r0, r5
 800ecda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecde:	f000 b87b 	b.w	800edd8 <_write_r>

0800ece2 <__sseek>:
 800ece2:	b510      	push	{r4, lr}
 800ece4:	460c      	mov	r4, r1
 800ece6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecea:	f001 f947 	bl	800ff7c <_lseek_r>
 800ecee:	1c43      	adds	r3, r0, #1
 800ecf0:	89a3      	ldrh	r3, [r4, #12]
 800ecf2:	bf15      	itete	ne
 800ecf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecfe:	81a3      	strheq	r3, [r4, #12]
 800ed00:	bf18      	it	ne
 800ed02:	81a3      	strhne	r3, [r4, #12]
 800ed04:	bd10      	pop	{r4, pc}

0800ed06 <__sclose>:
 800ed06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed0a:	f000 b8ed 	b.w	800eee8 <_close_r>

0800ed0e <strncpy>:
 800ed0e:	b510      	push	{r4, lr}
 800ed10:	3901      	subs	r1, #1
 800ed12:	4603      	mov	r3, r0
 800ed14:	b132      	cbz	r2, 800ed24 <strncpy+0x16>
 800ed16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ed1a:	f803 4b01 	strb.w	r4, [r3], #1
 800ed1e:	3a01      	subs	r2, #1
 800ed20:	2c00      	cmp	r4, #0
 800ed22:	d1f7      	bne.n	800ed14 <strncpy+0x6>
 800ed24:	441a      	add	r2, r3
 800ed26:	2100      	movs	r1, #0
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d100      	bne.n	800ed2e <strncpy+0x20>
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed32:	e7f9      	b.n	800ed28 <strncpy+0x1a>

0800ed34 <__swbuf_r>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	460e      	mov	r6, r1
 800ed38:	4614      	mov	r4, r2
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	b118      	cbz	r0, 800ed46 <__swbuf_r+0x12>
 800ed3e:	6983      	ldr	r3, [r0, #24]
 800ed40:	b90b      	cbnz	r3, 800ed46 <__swbuf_r+0x12>
 800ed42:	f001 f875 	bl	800fe30 <__sinit>
 800ed46:	4b21      	ldr	r3, [pc, #132]	; (800edcc <__swbuf_r+0x98>)
 800ed48:	429c      	cmp	r4, r3
 800ed4a:	d12b      	bne.n	800eda4 <__swbuf_r+0x70>
 800ed4c:	686c      	ldr	r4, [r5, #4]
 800ed4e:	69a3      	ldr	r3, [r4, #24]
 800ed50:	60a3      	str	r3, [r4, #8]
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	071a      	lsls	r2, r3, #28
 800ed56:	d52f      	bpl.n	800edb8 <__swbuf_r+0x84>
 800ed58:	6923      	ldr	r3, [r4, #16]
 800ed5a:	b36b      	cbz	r3, 800edb8 <__swbuf_r+0x84>
 800ed5c:	6923      	ldr	r3, [r4, #16]
 800ed5e:	6820      	ldr	r0, [r4, #0]
 800ed60:	1ac0      	subs	r0, r0, r3
 800ed62:	6963      	ldr	r3, [r4, #20]
 800ed64:	b2f6      	uxtb	r6, r6
 800ed66:	4283      	cmp	r3, r0
 800ed68:	4637      	mov	r7, r6
 800ed6a:	dc04      	bgt.n	800ed76 <__swbuf_r+0x42>
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f000 ffca 	bl	800fd08 <_fflush_r>
 800ed74:	bb30      	cbnz	r0, 800edc4 <__swbuf_r+0x90>
 800ed76:	68a3      	ldr	r3, [r4, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	60a3      	str	r3, [r4, #8]
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	6022      	str	r2, [r4, #0]
 800ed82:	701e      	strb	r6, [r3, #0]
 800ed84:	6963      	ldr	r3, [r4, #20]
 800ed86:	3001      	adds	r0, #1
 800ed88:	4283      	cmp	r3, r0
 800ed8a:	d004      	beq.n	800ed96 <__swbuf_r+0x62>
 800ed8c:	89a3      	ldrh	r3, [r4, #12]
 800ed8e:	07db      	lsls	r3, r3, #31
 800ed90:	d506      	bpl.n	800eda0 <__swbuf_r+0x6c>
 800ed92:	2e0a      	cmp	r6, #10
 800ed94:	d104      	bne.n	800eda0 <__swbuf_r+0x6c>
 800ed96:	4621      	mov	r1, r4
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f000 ffb5 	bl	800fd08 <_fflush_r>
 800ed9e:	b988      	cbnz	r0, 800edc4 <__swbuf_r+0x90>
 800eda0:	4638      	mov	r0, r7
 800eda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eda4:	4b0a      	ldr	r3, [pc, #40]	; (800edd0 <__swbuf_r+0x9c>)
 800eda6:	429c      	cmp	r4, r3
 800eda8:	d101      	bne.n	800edae <__swbuf_r+0x7a>
 800edaa:	68ac      	ldr	r4, [r5, #8]
 800edac:	e7cf      	b.n	800ed4e <__swbuf_r+0x1a>
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <__swbuf_r+0xa0>)
 800edb0:	429c      	cmp	r4, r3
 800edb2:	bf08      	it	eq
 800edb4:	68ec      	ldreq	r4, [r5, #12]
 800edb6:	e7ca      	b.n	800ed4e <__swbuf_r+0x1a>
 800edb8:	4621      	mov	r1, r4
 800edba:	4628      	mov	r0, r5
 800edbc:	f000 f81e 	bl	800edfc <__swsetup_r>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d0cb      	beq.n	800ed5c <__swbuf_r+0x28>
 800edc4:	f04f 37ff 	mov.w	r7, #4294967295
 800edc8:	e7ea      	b.n	800eda0 <__swbuf_r+0x6c>
 800edca:	bf00      	nop
 800edcc:	0801d598 	.word	0x0801d598
 800edd0:	0801d5b8 	.word	0x0801d5b8
 800edd4:	0801d578 	.word	0x0801d578

0800edd8 <_write_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4d07      	ldr	r5, [pc, #28]	; (800edf8 <_write_r+0x20>)
 800eddc:	4604      	mov	r4, r0
 800edde:	4608      	mov	r0, r1
 800ede0:	4611      	mov	r1, r2
 800ede2:	2200      	movs	r2, #0
 800ede4:	602a      	str	r2, [r5, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	f7f4 ff3b 	bl	8003c62 <_write>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d102      	bne.n	800edf6 <_write_r+0x1e>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	b103      	cbz	r3, 800edf6 <_write_r+0x1e>
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
 800edf8:	20005a70 	.word	0x20005a70

0800edfc <__swsetup_r>:
 800edfc:	4b32      	ldr	r3, [pc, #200]	; (800eec8 <__swsetup_r+0xcc>)
 800edfe:	b570      	push	{r4, r5, r6, lr}
 800ee00:	681d      	ldr	r5, [r3, #0]
 800ee02:	4606      	mov	r6, r0
 800ee04:	460c      	mov	r4, r1
 800ee06:	b125      	cbz	r5, 800ee12 <__swsetup_r+0x16>
 800ee08:	69ab      	ldr	r3, [r5, #24]
 800ee0a:	b913      	cbnz	r3, 800ee12 <__swsetup_r+0x16>
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f001 f80f 	bl	800fe30 <__sinit>
 800ee12:	4b2e      	ldr	r3, [pc, #184]	; (800eecc <__swsetup_r+0xd0>)
 800ee14:	429c      	cmp	r4, r3
 800ee16:	d10f      	bne.n	800ee38 <__swsetup_r+0x3c>
 800ee18:	686c      	ldr	r4, [r5, #4]
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee20:	0719      	lsls	r1, r3, #28
 800ee22:	d42c      	bmi.n	800ee7e <__swsetup_r+0x82>
 800ee24:	06dd      	lsls	r5, r3, #27
 800ee26:	d411      	bmi.n	800ee4c <__swsetup_r+0x50>
 800ee28:	2309      	movs	r3, #9
 800ee2a:	6033      	str	r3, [r6, #0]
 800ee2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee30:	81a3      	strh	r3, [r4, #12]
 800ee32:	f04f 30ff 	mov.w	r0, #4294967295
 800ee36:	e03e      	b.n	800eeb6 <__swsetup_r+0xba>
 800ee38:	4b25      	ldr	r3, [pc, #148]	; (800eed0 <__swsetup_r+0xd4>)
 800ee3a:	429c      	cmp	r4, r3
 800ee3c:	d101      	bne.n	800ee42 <__swsetup_r+0x46>
 800ee3e:	68ac      	ldr	r4, [r5, #8]
 800ee40:	e7eb      	b.n	800ee1a <__swsetup_r+0x1e>
 800ee42:	4b24      	ldr	r3, [pc, #144]	; (800eed4 <__swsetup_r+0xd8>)
 800ee44:	429c      	cmp	r4, r3
 800ee46:	bf08      	it	eq
 800ee48:	68ec      	ldreq	r4, [r5, #12]
 800ee4a:	e7e6      	b.n	800ee1a <__swsetup_r+0x1e>
 800ee4c:	0758      	lsls	r0, r3, #29
 800ee4e:	d512      	bpl.n	800ee76 <__swsetup_r+0x7a>
 800ee50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee52:	b141      	cbz	r1, 800ee66 <__swsetup_r+0x6a>
 800ee54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee58:	4299      	cmp	r1, r3
 800ee5a:	d002      	beq.n	800ee62 <__swsetup_r+0x66>
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f7ff f83f 	bl	800dee0 <_free_r>
 800ee62:	2300      	movs	r3, #0
 800ee64:	6363      	str	r3, [r4, #52]	; 0x34
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee6c:	81a3      	strh	r3, [r4, #12]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	6063      	str	r3, [r4, #4]
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	6023      	str	r3, [r4, #0]
 800ee76:	89a3      	ldrh	r3, [r4, #12]
 800ee78:	f043 0308 	orr.w	r3, r3, #8
 800ee7c:	81a3      	strh	r3, [r4, #12]
 800ee7e:	6923      	ldr	r3, [r4, #16]
 800ee80:	b94b      	cbnz	r3, 800ee96 <__swsetup_r+0x9a>
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee8c:	d003      	beq.n	800ee96 <__swsetup_r+0x9a>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4630      	mov	r0, r6
 800ee92:	f001 f8ab 	bl	800ffec <__smakebuf_r>
 800ee96:	89a0      	ldrh	r0, [r4, #12]
 800ee98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee9c:	f010 0301 	ands.w	r3, r0, #1
 800eea0:	d00a      	beq.n	800eeb8 <__swsetup_r+0xbc>
 800eea2:	2300      	movs	r3, #0
 800eea4:	60a3      	str	r3, [r4, #8]
 800eea6:	6963      	ldr	r3, [r4, #20]
 800eea8:	425b      	negs	r3, r3
 800eeaa:	61a3      	str	r3, [r4, #24]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	b943      	cbnz	r3, 800eec2 <__swsetup_r+0xc6>
 800eeb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eeb4:	d1ba      	bne.n	800ee2c <__swsetup_r+0x30>
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	0781      	lsls	r1, r0, #30
 800eeba:	bf58      	it	pl
 800eebc:	6963      	ldrpl	r3, [r4, #20]
 800eebe:	60a3      	str	r3, [r4, #8]
 800eec0:	e7f4      	b.n	800eeac <__swsetup_r+0xb0>
 800eec2:	2000      	movs	r0, #0
 800eec4:	e7f7      	b.n	800eeb6 <__swsetup_r+0xba>
 800eec6:	bf00      	nop
 800eec8:	200000c4 	.word	0x200000c4
 800eecc:	0801d598 	.word	0x0801d598
 800eed0:	0801d5b8 	.word	0x0801d5b8
 800eed4:	0801d578 	.word	0x0801d578

0800eed8 <abort>:
 800eed8:	b508      	push	{r3, lr}
 800eeda:	2006      	movs	r0, #6
 800eedc:	f001 fe5c 	bl	8010b98 <raise>
 800eee0:	2001      	movs	r0, #1
 800eee2:	f7f4 fe97 	bl	8003c14 <_exit>
	...

0800eee8 <_close_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4d06      	ldr	r5, [pc, #24]	; (800ef04 <_close_r+0x1c>)
 800eeec:	2300      	movs	r3, #0
 800eeee:	4604      	mov	r4, r0
 800eef0:	4608      	mov	r0, r1
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	f7f4 fed1 	bl	8003c9a <_close>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_close_r+0x1a>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_close_r+0x1a>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	20005a70 	.word	0x20005a70

0800ef08 <quorem>:
 800ef08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	6903      	ldr	r3, [r0, #16]
 800ef0e:	690c      	ldr	r4, [r1, #16]
 800ef10:	42a3      	cmp	r3, r4
 800ef12:	4607      	mov	r7, r0
 800ef14:	f2c0 8081 	blt.w	800f01a <quorem+0x112>
 800ef18:	3c01      	subs	r4, #1
 800ef1a:	f101 0814 	add.w	r8, r1, #20
 800ef1e:	f100 0514 	add.w	r5, r0, #20
 800ef22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef30:	3301      	adds	r3, #1
 800ef32:	429a      	cmp	r2, r3
 800ef34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef40:	d331      	bcc.n	800efa6 <quorem+0x9e>
 800ef42:	f04f 0e00 	mov.w	lr, #0
 800ef46:	4640      	mov	r0, r8
 800ef48:	46ac      	mov	ip, r5
 800ef4a:	46f2      	mov	sl, lr
 800ef4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef50:	b293      	uxth	r3, r2
 800ef52:	fb06 e303 	mla	r3, r6, r3, lr
 800ef56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ef60:	f8dc a000 	ldr.w	sl, [ip]
 800ef64:	0c12      	lsrs	r2, r2, #16
 800ef66:	fa13 f38a 	uxtah	r3, r3, sl
 800ef6a:	fb06 e202 	mla	r2, r6, r2, lr
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	9b00      	ldr	r3, [sp, #0]
 800ef72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef76:	b292      	uxth	r2, r2
 800ef78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef80:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef84:	4581      	cmp	r9, r0
 800ef86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef8a:	f84c 3b04 	str.w	r3, [ip], #4
 800ef8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef92:	d2db      	bcs.n	800ef4c <quorem+0x44>
 800ef94:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef98:	b92b      	cbnz	r3, 800efa6 <quorem+0x9e>
 800ef9a:	9b01      	ldr	r3, [sp, #4]
 800ef9c:	3b04      	subs	r3, #4
 800ef9e:	429d      	cmp	r5, r3
 800efa0:	461a      	mov	r2, r3
 800efa2:	d32e      	bcc.n	800f002 <quorem+0xfa>
 800efa4:	613c      	str	r4, [r7, #16]
 800efa6:	4638      	mov	r0, r7
 800efa8:	f001 fb1a 	bl	80105e0 <__mcmp>
 800efac:	2800      	cmp	r0, #0
 800efae:	db24      	blt.n	800effa <quorem+0xf2>
 800efb0:	3601      	adds	r6, #1
 800efb2:	4628      	mov	r0, r5
 800efb4:	f04f 0c00 	mov.w	ip, #0
 800efb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800efbc:	f8d0 e000 	ldr.w	lr, [r0]
 800efc0:	b293      	uxth	r3, r2
 800efc2:	ebac 0303 	sub.w	r3, ip, r3
 800efc6:	0c12      	lsrs	r2, r2, #16
 800efc8:	fa13 f38e 	uxtah	r3, r3, lr
 800efcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efda:	45c1      	cmp	r9, r8
 800efdc:	f840 3b04 	str.w	r3, [r0], #4
 800efe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efe4:	d2e8      	bcs.n	800efb8 <quorem+0xb0>
 800efe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efee:	b922      	cbnz	r2, 800effa <quorem+0xf2>
 800eff0:	3b04      	subs	r3, #4
 800eff2:	429d      	cmp	r5, r3
 800eff4:	461a      	mov	r2, r3
 800eff6:	d30a      	bcc.n	800f00e <quorem+0x106>
 800eff8:	613c      	str	r4, [r7, #16]
 800effa:	4630      	mov	r0, r6
 800effc:	b003      	add	sp, #12
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	6812      	ldr	r2, [r2, #0]
 800f004:	3b04      	subs	r3, #4
 800f006:	2a00      	cmp	r2, #0
 800f008:	d1cc      	bne.n	800efa4 <quorem+0x9c>
 800f00a:	3c01      	subs	r4, #1
 800f00c:	e7c7      	b.n	800ef9e <quorem+0x96>
 800f00e:	6812      	ldr	r2, [r2, #0]
 800f010:	3b04      	subs	r3, #4
 800f012:	2a00      	cmp	r2, #0
 800f014:	d1f0      	bne.n	800eff8 <quorem+0xf0>
 800f016:	3c01      	subs	r4, #1
 800f018:	e7eb      	b.n	800eff2 <quorem+0xea>
 800f01a:	2000      	movs	r0, #0
 800f01c:	e7ee      	b.n	800effc <quorem+0xf4>
	...

0800f020 <_dtoa_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	ed2d 8b04 	vpush	{d8-d9}
 800f028:	ec57 6b10 	vmov	r6, r7, d0
 800f02c:	b093      	sub	sp, #76	; 0x4c
 800f02e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f034:	9106      	str	r1, [sp, #24]
 800f036:	ee10 aa10 	vmov	sl, s0
 800f03a:	4604      	mov	r4, r0
 800f03c:	9209      	str	r2, [sp, #36]	; 0x24
 800f03e:	930c      	str	r3, [sp, #48]	; 0x30
 800f040:	46bb      	mov	fp, r7
 800f042:	b975      	cbnz	r5, 800f062 <_dtoa_r+0x42>
 800f044:	2010      	movs	r0, #16
 800f046:	f7fe ff25 	bl	800de94 <malloc>
 800f04a:	4602      	mov	r2, r0
 800f04c:	6260      	str	r0, [r4, #36]	; 0x24
 800f04e:	b920      	cbnz	r0, 800f05a <_dtoa_r+0x3a>
 800f050:	4ba7      	ldr	r3, [pc, #668]	; (800f2f0 <_dtoa_r+0x2d0>)
 800f052:	21ea      	movs	r1, #234	; 0xea
 800f054:	48a7      	ldr	r0, [pc, #668]	; (800f2f4 <_dtoa_r+0x2d4>)
 800f056:	f7fe fec3 	bl	800dde0 <__assert_func>
 800f05a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f05e:	6005      	str	r5, [r0, #0]
 800f060:	60c5      	str	r5, [r0, #12]
 800f062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f064:	6819      	ldr	r1, [r3, #0]
 800f066:	b151      	cbz	r1, 800f07e <_dtoa_r+0x5e>
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	604a      	str	r2, [r1, #4]
 800f06c:	2301      	movs	r3, #1
 800f06e:	4093      	lsls	r3, r2
 800f070:	608b      	str	r3, [r1, #8]
 800f072:	4620      	mov	r0, r4
 800f074:	f001 f872 	bl	801015c <_Bfree>
 800f078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	1e3b      	subs	r3, r7, #0
 800f080:	bfaa      	itet	ge
 800f082:	2300      	movge	r3, #0
 800f084:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f088:	f8c8 3000 	strge.w	r3, [r8]
 800f08c:	4b9a      	ldr	r3, [pc, #616]	; (800f2f8 <_dtoa_r+0x2d8>)
 800f08e:	bfbc      	itt	lt
 800f090:	2201      	movlt	r2, #1
 800f092:	f8c8 2000 	strlt.w	r2, [r8]
 800f096:	ea33 030b 	bics.w	r3, r3, fp
 800f09a:	d11b      	bne.n	800f0d4 <_dtoa_r+0xb4>
 800f09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f09e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0a8:	4333      	orrs	r3, r6
 800f0aa:	f000 8592 	beq.w	800fbd2 <_dtoa_r+0xbb2>
 800f0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b0:	b963      	cbnz	r3, 800f0cc <_dtoa_r+0xac>
 800f0b2:	4b92      	ldr	r3, [pc, #584]	; (800f2fc <_dtoa_r+0x2dc>)
 800f0b4:	e022      	b.n	800f0fc <_dtoa_r+0xdc>
 800f0b6:	4b92      	ldr	r3, [pc, #584]	; (800f300 <_dtoa_r+0x2e0>)
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f0be:	6013      	str	r3, [r2, #0]
 800f0c0:	9801      	ldr	r0, [sp, #4]
 800f0c2:	b013      	add	sp, #76	; 0x4c
 800f0c4:	ecbd 8b04 	vpop	{d8-d9}
 800f0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0cc:	4b8b      	ldr	r3, [pc, #556]	; (800f2fc <_dtoa_r+0x2dc>)
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	3303      	adds	r3, #3
 800f0d2:	e7f3      	b.n	800f0bc <_dtoa_r+0x9c>
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4650      	mov	r0, sl
 800f0da:	4659      	mov	r1, fp
 800f0dc:	f7f1 fd04 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0e0:	ec4b ab19 	vmov	d9, sl, fp
 800f0e4:	4680      	mov	r8, r0
 800f0e6:	b158      	cbz	r0, 800f100 <_dtoa_r+0xe0>
 800f0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	6013      	str	r3, [r2, #0]
 800f0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 856b 	beq.w	800fbcc <_dtoa_r+0xbac>
 800f0f6:	4883      	ldr	r0, [pc, #524]	; (800f304 <_dtoa_r+0x2e4>)
 800f0f8:	6018      	str	r0, [r3, #0]
 800f0fa:	1e43      	subs	r3, r0, #1
 800f0fc:	9301      	str	r3, [sp, #4]
 800f0fe:	e7df      	b.n	800f0c0 <_dtoa_r+0xa0>
 800f100:	ec4b ab10 	vmov	d0, sl, fp
 800f104:	aa10      	add	r2, sp, #64	; 0x40
 800f106:	a911      	add	r1, sp, #68	; 0x44
 800f108:	4620      	mov	r0, r4
 800f10a:	f001 fb0f 	bl	801072c <__d2b>
 800f10e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f112:	ee08 0a10 	vmov	s16, r0
 800f116:	2d00      	cmp	r5, #0
 800f118:	f000 8084 	beq.w	800f224 <_dtoa_r+0x204>
 800f11c:	ee19 3a90 	vmov	r3, s19
 800f120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f124:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f128:	4656      	mov	r6, sl
 800f12a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f12e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f132:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f136:	4b74      	ldr	r3, [pc, #464]	; (800f308 <_dtoa_r+0x2e8>)
 800f138:	2200      	movs	r2, #0
 800f13a:	4630      	mov	r0, r6
 800f13c:	4639      	mov	r1, r7
 800f13e:	f7f1 f8b3 	bl	80002a8 <__aeabi_dsub>
 800f142:	a365      	add	r3, pc, #404	; (adr r3, 800f2d8 <_dtoa_r+0x2b8>)
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	f7f1 fa66 	bl	8000618 <__aeabi_dmul>
 800f14c:	a364      	add	r3, pc, #400	; (adr r3, 800f2e0 <_dtoa_r+0x2c0>)
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f7f1 f8ab 	bl	80002ac <__adddf3>
 800f156:	4606      	mov	r6, r0
 800f158:	4628      	mov	r0, r5
 800f15a:	460f      	mov	r7, r1
 800f15c:	f7f1 f9f2 	bl	8000544 <__aeabi_i2d>
 800f160:	a361      	add	r3, pc, #388	; (adr r3, 800f2e8 <_dtoa_r+0x2c8>)
 800f162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f166:	f7f1 fa57 	bl	8000618 <__aeabi_dmul>
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	4630      	mov	r0, r6
 800f170:	4639      	mov	r1, r7
 800f172:	f7f1 f89b 	bl	80002ac <__adddf3>
 800f176:	4606      	mov	r6, r0
 800f178:	460f      	mov	r7, r1
 800f17a:	f7f1 fcfd 	bl	8000b78 <__aeabi_d2iz>
 800f17e:	2200      	movs	r2, #0
 800f180:	9000      	str	r0, [sp, #0]
 800f182:	2300      	movs	r3, #0
 800f184:	4630      	mov	r0, r6
 800f186:	4639      	mov	r1, r7
 800f188:	f7f1 fcb8 	bl	8000afc <__aeabi_dcmplt>
 800f18c:	b150      	cbz	r0, 800f1a4 <_dtoa_r+0x184>
 800f18e:	9800      	ldr	r0, [sp, #0]
 800f190:	f7f1 f9d8 	bl	8000544 <__aeabi_i2d>
 800f194:	4632      	mov	r2, r6
 800f196:	463b      	mov	r3, r7
 800f198:	f7f1 fca6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f19c:	b910      	cbnz	r0, 800f1a4 <_dtoa_r+0x184>
 800f19e:	9b00      	ldr	r3, [sp, #0]
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	9b00      	ldr	r3, [sp, #0]
 800f1a6:	2b16      	cmp	r3, #22
 800f1a8:	d85a      	bhi.n	800f260 <_dtoa_r+0x240>
 800f1aa:	9a00      	ldr	r2, [sp, #0]
 800f1ac:	4b57      	ldr	r3, [pc, #348]	; (800f30c <_dtoa_r+0x2ec>)
 800f1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	ec51 0b19 	vmov	r0, r1, d9
 800f1ba:	f7f1 fc9f 	bl	8000afc <__aeabi_dcmplt>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d050      	beq.n	800f264 <_dtoa_r+0x244>
 800f1c2:	9b00      	ldr	r3, [sp, #0]
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ce:	1b5d      	subs	r5, r3, r5
 800f1d0:	1e6b      	subs	r3, r5, #1
 800f1d2:	9305      	str	r3, [sp, #20]
 800f1d4:	bf45      	ittet	mi
 800f1d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f1da:	9304      	strmi	r3, [sp, #16]
 800f1dc:	2300      	movpl	r3, #0
 800f1de:	2300      	movmi	r3, #0
 800f1e0:	bf4c      	ite	mi
 800f1e2:	9305      	strmi	r3, [sp, #20]
 800f1e4:	9304      	strpl	r3, [sp, #16]
 800f1e6:	9b00      	ldr	r3, [sp, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	db3d      	blt.n	800f268 <_dtoa_r+0x248>
 800f1ec:	9b05      	ldr	r3, [sp, #20]
 800f1ee:	9a00      	ldr	r2, [sp, #0]
 800f1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800f1f2:	4413      	add	r3, r2
 800f1f4:	9305      	str	r3, [sp, #20]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9307      	str	r3, [sp, #28]
 800f1fa:	9b06      	ldr	r3, [sp, #24]
 800f1fc:	2b09      	cmp	r3, #9
 800f1fe:	f200 8089 	bhi.w	800f314 <_dtoa_r+0x2f4>
 800f202:	2b05      	cmp	r3, #5
 800f204:	bfc4      	itt	gt
 800f206:	3b04      	subgt	r3, #4
 800f208:	9306      	strgt	r3, [sp, #24]
 800f20a:	9b06      	ldr	r3, [sp, #24]
 800f20c:	f1a3 0302 	sub.w	r3, r3, #2
 800f210:	bfcc      	ite	gt
 800f212:	2500      	movgt	r5, #0
 800f214:	2501      	movle	r5, #1
 800f216:	2b03      	cmp	r3, #3
 800f218:	f200 8087 	bhi.w	800f32a <_dtoa_r+0x30a>
 800f21c:	e8df f003 	tbb	[pc, r3]
 800f220:	59383a2d 	.word	0x59383a2d
 800f224:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f228:	441d      	add	r5, r3
 800f22a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f22e:	2b20      	cmp	r3, #32
 800f230:	bfc1      	itttt	gt
 800f232:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f236:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f23a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f23e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f242:	bfda      	itte	le
 800f244:	f1c3 0320 	rsble	r3, r3, #32
 800f248:	fa06 f003 	lslle.w	r0, r6, r3
 800f24c:	4318      	orrgt	r0, r3
 800f24e:	f7f1 f969 	bl	8000524 <__aeabi_ui2d>
 800f252:	2301      	movs	r3, #1
 800f254:	4606      	mov	r6, r0
 800f256:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f25a:	3d01      	subs	r5, #1
 800f25c:	930e      	str	r3, [sp, #56]	; 0x38
 800f25e:	e76a      	b.n	800f136 <_dtoa_r+0x116>
 800f260:	2301      	movs	r3, #1
 800f262:	e7b2      	b.n	800f1ca <_dtoa_r+0x1aa>
 800f264:	900b      	str	r0, [sp, #44]	; 0x2c
 800f266:	e7b1      	b.n	800f1cc <_dtoa_r+0x1ac>
 800f268:	9b04      	ldr	r3, [sp, #16]
 800f26a:	9a00      	ldr	r2, [sp, #0]
 800f26c:	1a9b      	subs	r3, r3, r2
 800f26e:	9304      	str	r3, [sp, #16]
 800f270:	4253      	negs	r3, r2
 800f272:	9307      	str	r3, [sp, #28]
 800f274:	2300      	movs	r3, #0
 800f276:	930a      	str	r3, [sp, #40]	; 0x28
 800f278:	e7bf      	b.n	800f1fa <_dtoa_r+0x1da>
 800f27a:	2300      	movs	r3, #0
 800f27c:	9308      	str	r3, [sp, #32]
 800f27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f280:	2b00      	cmp	r3, #0
 800f282:	dc55      	bgt.n	800f330 <_dtoa_r+0x310>
 800f284:	2301      	movs	r3, #1
 800f286:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f28a:	461a      	mov	r2, r3
 800f28c:	9209      	str	r2, [sp, #36]	; 0x24
 800f28e:	e00c      	b.n	800f2aa <_dtoa_r+0x28a>
 800f290:	2301      	movs	r3, #1
 800f292:	e7f3      	b.n	800f27c <_dtoa_r+0x25c>
 800f294:	2300      	movs	r3, #0
 800f296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f298:	9308      	str	r3, [sp, #32]
 800f29a:	9b00      	ldr	r3, [sp, #0]
 800f29c:	4413      	add	r3, r2
 800f29e:	9302      	str	r3, [sp, #8]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	9303      	str	r3, [sp, #12]
 800f2a6:	bfb8      	it	lt
 800f2a8:	2301      	movlt	r3, #1
 800f2aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	6042      	str	r2, [r0, #4]
 800f2b0:	2204      	movs	r2, #4
 800f2b2:	f102 0614 	add.w	r6, r2, #20
 800f2b6:	429e      	cmp	r6, r3
 800f2b8:	6841      	ldr	r1, [r0, #4]
 800f2ba:	d93d      	bls.n	800f338 <_dtoa_r+0x318>
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f000 ff0d 	bl	80100dc <_Balloc>
 800f2c2:	9001      	str	r0, [sp, #4]
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d13b      	bne.n	800f340 <_dtoa_r+0x320>
 800f2c8:	4b11      	ldr	r3, [pc, #68]	; (800f310 <_dtoa_r+0x2f0>)
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f2d0:	e6c0      	b.n	800f054 <_dtoa_r+0x34>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e7df      	b.n	800f296 <_dtoa_r+0x276>
 800f2d6:	bf00      	nop
 800f2d8:	636f4361 	.word	0x636f4361
 800f2dc:	3fd287a7 	.word	0x3fd287a7
 800f2e0:	8b60c8b3 	.word	0x8b60c8b3
 800f2e4:	3fc68a28 	.word	0x3fc68a28
 800f2e8:	509f79fb 	.word	0x509f79fb
 800f2ec:	3fd34413 	.word	0x3fd34413
 800f2f0:	0801d4f3 	.word	0x0801d4f3
 800f2f4:	0801d50a 	.word	0x0801d50a
 800f2f8:	7ff00000 	.word	0x7ff00000
 800f2fc:	0801d4ef 	.word	0x0801d4ef
 800f300:	0801d4e6 	.word	0x0801d4e6
 800f304:	0801d3c2 	.word	0x0801d3c2
 800f308:	3ff80000 	.word	0x3ff80000
 800f30c:	0801d668 	.word	0x0801d668
 800f310:	0801d565 	.word	0x0801d565
 800f314:	2501      	movs	r5, #1
 800f316:	2300      	movs	r3, #0
 800f318:	9306      	str	r3, [sp, #24]
 800f31a:	9508      	str	r5, [sp, #32]
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295
 800f320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f324:	2200      	movs	r2, #0
 800f326:	2312      	movs	r3, #18
 800f328:	e7b0      	b.n	800f28c <_dtoa_r+0x26c>
 800f32a:	2301      	movs	r3, #1
 800f32c:	9308      	str	r3, [sp, #32]
 800f32e:	e7f5      	b.n	800f31c <_dtoa_r+0x2fc>
 800f330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f332:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f336:	e7b8      	b.n	800f2aa <_dtoa_r+0x28a>
 800f338:	3101      	adds	r1, #1
 800f33a:	6041      	str	r1, [r0, #4]
 800f33c:	0052      	lsls	r2, r2, #1
 800f33e:	e7b8      	b.n	800f2b2 <_dtoa_r+0x292>
 800f340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f342:	9a01      	ldr	r2, [sp, #4]
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	2b0e      	cmp	r3, #14
 800f34a:	f200 809d 	bhi.w	800f488 <_dtoa_r+0x468>
 800f34e:	2d00      	cmp	r5, #0
 800f350:	f000 809a 	beq.w	800f488 <_dtoa_r+0x468>
 800f354:	9b00      	ldr	r3, [sp, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	dd32      	ble.n	800f3c0 <_dtoa_r+0x3a0>
 800f35a:	4ab7      	ldr	r2, [pc, #732]	; (800f638 <_dtoa_r+0x618>)
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f368:	9b00      	ldr	r3, [sp, #0]
 800f36a:	05d8      	lsls	r0, r3, #23
 800f36c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f370:	d516      	bpl.n	800f3a0 <_dtoa_r+0x380>
 800f372:	4bb2      	ldr	r3, [pc, #712]	; (800f63c <_dtoa_r+0x61c>)
 800f374:	ec51 0b19 	vmov	r0, r1, d9
 800f378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f37c:	f7f1 fa76 	bl	800086c <__aeabi_ddiv>
 800f380:	f007 070f 	and.w	r7, r7, #15
 800f384:	4682      	mov	sl, r0
 800f386:	468b      	mov	fp, r1
 800f388:	2503      	movs	r5, #3
 800f38a:	4eac      	ldr	r6, [pc, #688]	; (800f63c <_dtoa_r+0x61c>)
 800f38c:	b957      	cbnz	r7, 800f3a4 <_dtoa_r+0x384>
 800f38e:	4642      	mov	r2, r8
 800f390:	464b      	mov	r3, r9
 800f392:	4650      	mov	r0, sl
 800f394:	4659      	mov	r1, fp
 800f396:	f7f1 fa69 	bl	800086c <__aeabi_ddiv>
 800f39a:	4682      	mov	sl, r0
 800f39c:	468b      	mov	fp, r1
 800f39e:	e028      	b.n	800f3f2 <_dtoa_r+0x3d2>
 800f3a0:	2502      	movs	r5, #2
 800f3a2:	e7f2      	b.n	800f38a <_dtoa_r+0x36a>
 800f3a4:	07f9      	lsls	r1, r7, #31
 800f3a6:	d508      	bpl.n	800f3ba <_dtoa_r+0x39a>
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3b0:	f7f1 f932 	bl	8000618 <__aeabi_dmul>
 800f3b4:	3501      	adds	r5, #1
 800f3b6:	4680      	mov	r8, r0
 800f3b8:	4689      	mov	r9, r1
 800f3ba:	107f      	asrs	r7, r7, #1
 800f3bc:	3608      	adds	r6, #8
 800f3be:	e7e5      	b.n	800f38c <_dtoa_r+0x36c>
 800f3c0:	f000 809b 	beq.w	800f4fa <_dtoa_r+0x4da>
 800f3c4:	9b00      	ldr	r3, [sp, #0]
 800f3c6:	4f9d      	ldr	r7, [pc, #628]	; (800f63c <_dtoa_r+0x61c>)
 800f3c8:	425e      	negs	r6, r3
 800f3ca:	4b9b      	ldr	r3, [pc, #620]	; (800f638 <_dtoa_r+0x618>)
 800f3cc:	f006 020f 	and.w	r2, r6, #15
 800f3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	ec51 0b19 	vmov	r0, r1, d9
 800f3dc:	f7f1 f91c 	bl	8000618 <__aeabi_dmul>
 800f3e0:	1136      	asrs	r6, r6, #4
 800f3e2:	4682      	mov	sl, r0
 800f3e4:	468b      	mov	fp, r1
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	2502      	movs	r5, #2
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	d17a      	bne.n	800f4e4 <_dtoa_r+0x4c4>
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1d3      	bne.n	800f39a <_dtoa_r+0x37a>
 800f3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 8082 	beq.w	800f4fe <_dtoa_r+0x4de>
 800f3fa:	4b91      	ldr	r3, [pc, #580]	; (800f640 <_dtoa_r+0x620>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4650      	mov	r0, sl
 800f400:	4659      	mov	r1, fp
 800f402:	f7f1 fb7b 	bl	8000afc <__aeabi_dcmplt>
 800f406:	2800      	cmp	r0, #0
 800f408:	d079      	beq.n	800f4fe <_dtoa_r+0x4de>
 800f40a:	9b03      	ldr	r3, [sp, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d076      	beq.n	800f4fe <_dtoa_r+0x4de>
 800f410:	9b02      	ldr	r3, [sp, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	dd36      	ble.n	800f484 <_dtoa_r+0x464>
 800f416:	9b00      	ldr	r3, [sp, #0]
 800f418:	4650      	mov	r0, sl
 800f41a:	4659      	mov	r1, fp
 800f41c:	1e5f      	subs	r7, r3, #1
 800f41e:	2200      	movs	r2, #0
 800f420:	4b88      	ldr	r3, [pc, #544]	; (800f644 <_dtoa_r+0x624>)
 800f422:	f7f1 f8f9 	bl	8000618 <__aeabi_dmul>
 800f426:	9e02      	ldr	r6, [sp, #8]
 800f428:	4682      	mov	sl, r0
 800f42a:	468b      	mov	fp, r1
 800f42c:	3501      	adds	r5, #1
 800f42e:	4628      	mov	r0, r5
 800f430:	f7f1 f888 	bl	8000544 <__aeabi_i2d>
 800f434:	4652      	mov	r2, sl
 800f436:	465b      	mov	r3, fp
 800f438:	f7f1 f8ee 	bl	8000618 <__aeabi_dmul>
 800f43c:	4b82      	ldr	r3, [pc, #520]	; (800f648 <_dtoa_r+0x628>)
 800f43e:	2200      	movs	r2, #0
 800f440:	f7f0 ff34 	bl	80002ac <__adddf3>
 800f444:	46d0      	mov	r8, sl
 800f446:	46d9      	mov	r9, fp
 800f448:	4682      	mov	sl, r0
 800f44a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f44e:	2e00      	cmp	r6, #0
 800f450:	d158      	bne.n	800f504 <_dtoa_r+0x4e4>
 800f452:	4b7e      	ldr	r3, [pc, #504]	; (800f64c <_dtoa_r+0x62c>)
 800f454:	2200      	movs	r2, #0
 800f456:	4640      	mov	r0, r8
 800f458:	4649      	mov	r1, r9
 800f45a:	f7f0 ff25 	bl	80002a8 <__aeabi_dsub>
 800f45e:	4652      	mov	r2, sl
 800f460:	465b      	mov	r3, fp
 800f462:	4680      	mov	r8, r0
 800f464:	4689      	mov	r9, r1
 800f466:	f7f1 fb67 	bl	8000b38 <__aeabi_dcmpgt>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f040 8295 	bne.w	800f99a <_dtoa_r+0x97a>
 800f470:	4652      	mov	r2, sl
 800f472:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f476:	4640      	mov	r0, r8
 800f478:	4649      	mov	r1, r9
 800f47a:	f7f1 fb3f 	bl	8000afc <__aeabi_dcmplt>
 800f47e:	2800      	cmp	r0, #0
 800f480:	f040 8289 	bne.w	800f996 <_dtoa_r+0x976>
 800f484:	ec5b ab19 	vmov	sl, fp, d9
 800f488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f2c0 8148 	blt.w	800f720 <_dtoa_r+0x700>
 800f490:	9a00      	ldr	r2, [sp, #0]
 800f492:	2a0e      	cmp	r2, #14
 800f494:	f300 8144 	bgt.w	800f720 <_dtoa_r+0x700>
 800f498:	4b67      	ldr	r3, [pc, #412]	; (800f638 <_dtoa_r+0x618>)
 800f49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f280 80d5 	bge.w	800f654 <_dtoa_r+0x634>
 800f4aa:	9b03      	ldr	r3, [sp, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f300 80d1 	bgt.w	800f654 <_dtoa_r+0x634>
 800f4b2:	f040 826f 	bne.w	800f994 <_dtoa_r+0x974>
 800f4b6:	4b65      	ldr	r3, [pc, #404]	; (800f64c <_dtoa_r+0x62c>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	4649      	mov	r1, r9
 800f4be:	f7f1 f8ab 	bl	8000618 <__aeabi_dmul>
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	f7f1 fb2d 	bl	8000b24 <__aeabi_dcmpge>
 800f4ca:	9e03      	ldr	r6, [sp, #12]
 800f4cc:	4637      	mov	r7, r6
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	f040 8245 	bne.w	800f95e <_dtoa_r+0x93e>
 800f4d4:	9d01      	ldr	r5, [sp, #4]
 800f4d6:	2331      	movs	r3, #49	; 0x31
 800f4d8:	f805 3b01 	strb.w	r3, [r5], #1
 800f4dc:	9b00      	ldr	r3, [sp, #0]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	e240      	b.n	800f966 <_dtoa_r+0x946>
 800f4e4:	07f2      	lsls	r2, r6, #31
 800f4e6:	d505      	bpl.n	800f4f4 <_dtoa_r+0x4d4>
 800f4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ec:	f7f1 f894 	bl	8000618 <__aeabi_dmul>
 800f4f0:	3501      	adds	r5, #1
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	1076      	asrs	r6, r6, #1
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	e777      	b.n	800f3ea <_dtoa_r+0x3ca>
 800f4fa:	2502      	movs	r5, #2
 800f4fc:	e779      	b.n	800f3f2 <_dtoa_r+0x3d2>
 800f4fe:	9f00      	ldr	r7, [sp, #0]
 800f500:	9e03      	ldr	r6, [sp, #12]
 800f502:	e794      	b.n	800f42e <_dtoa_r+0x40e>
 800f504:	9901      	ldr	r1, [sp, #4]
 800f506:	4b4c      	ldr	r3, [pc, #304]	; (800f638 <_dtoa_r+0x618>)
 800f508:	4431      	add	r1, r6
 800f50a:	910d      	str	r1, [sp, #52]	; 0x34
 800f50c:	9908      	ldr	r1, [sp, #32]
 800f50e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f516:	2900      	cmp	r1, #0
 800f518:	d043      	beq.n	800f5a2 <_dtoa_r+0x582>
 800f51a:	494d      	ldr	r1, [pc, #308]	; (800f650 <_dtoa_r+0x630>)
 800f51c:	2000      	movs	r0, #0
 800f51e:	f7f1 f9a5 	bl	800086c <__aeabi_ddiv>
 800f522:	4652      	mov	r2, sl
 800f524:	465b      	mov	r3, fp
 800f526:	f7f0 febf 	bl	80002a8 <__aeabi_dsub>
 800f52a:	9d01      	ldr	r5, [sp, #4]
 800f52c:	4682      	mov	sl, r0
 800f52e:	468b      	mov	fp, r1
 800f530:	4649      	mov	r1, r9
 800f532:	4640      	mov	r0, r8
 800f534:	f7f1 fb20 	bl	8000b78 <__aeabi_d2iz>
 800f538:	4606      	mov	r6, r0
 800f53a:	f7f1 f803 	bl	8000544 <__aeabi_i2d>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4640      	mov	r0, r8
 800f544:	4649      	mov	r1, r9
 800f546:	f7f0 feaf 	bl	80002a8 <__aeabi_dsub>
 800f54a:	3630      	adds	r6, #48	; 0x30
 800f54c:	f805 6b01 	strb.w	r6, [r5], #1
 800f550:	4652      	mov	r2, sl
 800f552:	465b      	mov	r3, fp
 800f554:	4680      	mov	r8, r0
 800f556:	4689      	mov	r9, r1
 800f558:	f7f1 fad0 	bl	8000afc <__aeabi_dcmplt>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d163      	bne.n	800f628 <_dtoa_r+0x608>
 800f560:	4642      	mov	r2, r8
 800f562:	464b      	mov	r3, r9
 800f564:	4936      	ldr	r1, [pc, #216]	; (800f640 <_dtoa_r+0x620>)
 800f566:	2000      	movs	r0, #0
 800f568:	f7f0 fe9e 	bl	80002a8 <__aeabi_dsub>
 800f56c:	4652      	mov	r2, sl
 800f56e:	465b      	mov	r3, fp
 800f570:	f7f1 fac4 	bl	8000afc <__aeabi_dcmplt>
 800f574:	2800      	cmp	r0, #0
 800f576:	f040 80b5 	bne.w	800f6e4 <_dtoa_r+0x6c4>
 800f57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f57c:	429d      	cmp	r5, r3
 800f57e:	d081      	beq.n	800f484 <_dtoa_r+0x464>
 800f580:	4b30      	ldr	r3, [pc, #192]	; (800f644 <_dtoa_r+0x624>)
 800f582:	2200      	movs	r2, #0
 800f584:	4650      	mov	r0, sl
 800f586:	4659      	mov	r1, fp
 800f588:	f7f1 f846 	bl	8000618 <__aeabi_dmul>
 800f58c:	4b2d      	ldr	r3, [pc, #180]	; (800f644 <_dtoa_r+0x624>)
 800f58e:	4682      	mov	sl, r0
 800f590:	468b      	mov	fp, r1
 800f592:	4640      	mov	r0, r8
 800f594:	4649      	mov	r1, r9
 800f596:	2200      	movs	r2, #0
 800f598:	f7f1 f83e 	bl	8000618 <__aeabi_dmul>
 800f59c:	4680      	mov	r8, r0
 800f59e:	4689      	mov	r9, r1
 800f5a0:	e7c6      	b.n	800f530 <_dtoa_r+0x510>
 800f5a2:	4650      	mov	r0, sl
 800f5a4:	4659      	mov	r1, fp
 800f5a6:	f7f1 f837 	bl	8000618 <__aeabi_dmul>
 800f5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5ac:	9d01      	ldr	r5, [sp, #4]
 800f5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5b0:	4682      	mov	sl, r0
 800f5b2:	468b      	mov	fp, r1
 800f5b4:	4649      	mov	r1, r9
 800f5b6:	4640      	mov	r0, r8
 800f5b8:	f7f1 fade 	bl	8000b78 <__aeabi_d2iz>
 800f5bc:	4606      	mov	r6, r0
 800f5be:	f7f0 ffc1 	bl	8000544 <__aeabi_i2d>
 800f5c2:	3630      	adds	r6, #48	; 0x30
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f7f0 fe6c 	bl	80002a8 <__aeabi_dsub>
 800f5d0:	f805 6b01 	strb.w	r6, [r5], #1
 800f5d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	4680      	mov	r8, r0
 800f5da:	4689      	mov	r9, r1
 800f5dc:	f04f 0200 	mov.w	r2, #0
 800f5e0:	d124      	bne.n	800f62c <_dtoa_r+0x60c>
 800f5e2:	4b1b      	ldr	r3, [pc, #108]	; (800f650 <_dtoa_r+0x630>)
 800f5e4:	4650      	mov	r0, sl
 800f5e6:	4659      	mov	r1, fp
 800f5e8:	f7f0 fe60 	bl	80002ac <__adddf3>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4640      	mov	r0, r8
 800f5f2:	4649      	mov	r1, r9
 800f5f4:	f7f1 faa0 	bl	8000b38 <__aeabi_dcmpgt>
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d173      	bne.n	800f6e4 <_dtoa_r+0x6c4>
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	465b      	mov	r3, fp
 800f600:	4913      	ldr	r1, [pc, #76]	; (800f650 <_dtoa_r+0x630>)
 800f602:	2000      	movs	r0, #0
 800f604:	f7f0 fe50 	bl	80002a8 <__aeabi_dsub>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4640      	mov	r0, r8
 800f60e:	4649      	mov	r1, r9
 800f610:	f7f1 fa74 	bl	8000afc <__aeabi_dcmplt>
 800f614:	2800      	cmp	r0, #0
 800f616:	f43f af35 	beq.w	800f484 <_dtoa_r+0x464>
 800f61a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f61c:	1e6b      	subs	r3, r5, #1
 800f61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f620:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f624:	2b30      	cmp	r3, #48	; 0x30
 800f626:	d0f8      	beq.n	800f61a <_dtoa_r+0x5fa>
 800f628:	9700      	str	r7, [sp, #0]
 800f62a:	e049      	b.n	800f6c0 <_dtoa_r+0x6a0>
 800f62c:	4b05      	ldr	r3, [pc, #20]	; (800f644 <_dtoa_r+0x624>)
 800f62e:	f7f0 fff3 	bl	8000618 <__aeabi_dmul>
 800f632:	4680      	mov	r8, r0
 800f634:	4689      	mov	r9, r1
 800f636:	e7bd      	b.n	800f5b4 <_dtoa_r+0x594>
 800f638:	0801d668 	.word	0x0801d668
 800f63c:	0801d640 	.word	0x0801d640
 800f640:	3ff00000 	.word	0x3ff00000
 800f644:	40240000 	.word	0x40240000
 800f648:	401c0000 	.word	0x401c0000
 800f64c:	40140000 	.word	0x40140000
 800f650:	3fe00000 	.word	0x3fe00000
 800f654:	9d01      	ldr	r5, [sp, #4]
 800f656:	4656      	mov	r6, sl
 800f658:	465f      	mov	r7, fp
 800f65a:	4642      	mov	r2, r8
 800f65c:	464b      	mov	r3, r9
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f1 f903 	bl	800086c <__aeabi_ddiv>
 800f666:	f7f1 fa87 	bl	8000b78 <__aeabi_d2iz>
 800f66a:	4682      	mov	sl, r0
 800f66c:	f7f0 ff6a 	bl	8000544 <__aeabi_i2d>
 800f670:	4642      	mov	r2, r8
 800f672:	464b      	mov	r3, r9
 800f674:	f7f0 ffd0 	bl	8000618 <__aeabi_dmul>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	4630      	mov	r0, r6
 800f67e:	4639      	mov	r1, r7
 800f680:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f684:	f7f0 fe10 	bl	80002a8 <__aeabi_dsub>
 800f688:	f805 6b01 	strb.w	r6, [r5], #1
 800f68c:	9e01      	ldr	r6, [sp, #4]
 800f68e:	9f03      	ldr	r7, [sp, #12]
 800f690:	1bae      	subs	r6, r5, r6
 800f692:	42b7      	cmp	r7, r6
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	d135      	bne.n	800f706 <_dtoa_r+0x6e6>
 800f69a:	f7f0 fe07 	bl	80002ac <__adddf3>
 800f69e:	4642      	mov	r2, r8
 800f6a0:	464b      	mov	r3, r9
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	460f      	mov	r7, r1
 800f6a6:	f7f1 fa47 	bl	8000b38 <__aeabi_dcmpgt>
 800f6aa:	b9d0      	cbnz	r0, 800f6e2 <_dtoa_r+0x6c2>
 800f6ac:	4642      	mov	r2, r8
 800f6ae:	464b      	mov	r3, r9
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	4639      	mov	r1, r7
 800f6b4:	f7f1 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6b8:	b110      	cbz	r0, 800f6c0 <_dtoa_r+0x6a0>
 800f6ba:	f01a 0f01 	tst.w	sl, #1
 800f6be:	d110      	bne.n	800f6e2 <_dtoa_r+0x6c2>
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	ee18 1a10 	vmov	r1, s16
 800f6c6:	f000 fd49 	bl	801015c <_Bfree>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	9800      	ldr	r0, [sp, #0]
 800f6ce:	702b      	strb	r3, [r5, #0]
 800f6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	6018      	str	r0, [r3, #0]
 800f6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f43f acf1 	beq.w	800f0c0 <_dtoa_r+0xa0>
 800f6de:	601d      	str	r5, [r3, #0]
 800f6e0:	e4ee      	b.n	800f0c0 <_dtoa_r+0xa0>
 800f6e2:	9f00      	ldr	r7, [sp, #0]
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	461d      	mov	r5, r3
 800f6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6ec:	2a39      	cmp	r2, #57	; 0x39
 800f6ee:	d106      	bne.n	800f6fe <_dtoa_r+0x6de>
 800f6f0:	9a01      	ldr	r2, [sp, #4]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d1f7      	bne.n	800f6e6 <_dtoa_r+0x6c6>
 800f6f6:	9901      	ldr	r1, [sp, #4]
 800f6f8:	2230      	movs	r2, #48	; 0x30
 800f6fa:	3701      	adds	r7, #1
 800f6fc:	700a      	strb	r2, [r1, #0]
 800f6fe:	781a      	ldrb	r2, [r3, #0]
 800f700:	3201      	adds	r2, #1
 800f702:	701a      	strb	r2, [r3, #0]
 800f704:	e790      	b.n	800f628 <_dtoa_r+0x608>
 800f706:	4ba6      	ldr	r3, [pc, #664]	; (800f9a0 <_dtoa_r+0x980>)
 800f708:	2200      	movs	r2, #0
 800f70a:	f7f0 ff85 	bl	8000618 <__aeabi_dmul>
 800f70e:	2200      	movs	r2, #0
 800f710:	2300      	movs	r3, #0
 800f712:	4606      	mov	r6, r0
 800f714:	460f      	mov	r7, r1
 800f716:	f7f1 f9e7 	bl	8000ae8 <__aeabi_dcmpeq>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d09d      	beq.n	800f65a <_dtoa_r+0x63a>
 800f71e:	e7cf      	b.n	800f6c0 <_dtoa_r+0x6a0>
 800f720:	9a08      	ldr	r2, [sp, #32]
 800f722:	2a00      	cmp	r2, #0
 800f724:	f000 80d7 	beq.w	800f8d6 <_dtoa_r+0x8b6>
 800f728:	9a06      	ldr	r2, [sp, #24]
 800f72a:	2a01      	cmp	r2, #1
 800f72c:	f300 80ba 	bgt.w	800f8a4 <_dtoa_r+0x884>
 800f730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f732:	2a00      	cmp	r2, #0
 800f734:	f000 80b2 	beq.w	800f89c <_dtoa_r+0x87c>
 800f738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f73c:	9e07      	ldr	r6, [sp, #28]
 800f73e:	9d04      	ldr	r5, [sp, #16]
 800f740:	9a04      	ldr	r2, [sp, #16]
 800f742:	441a      	add	r2, r3
 800f744:	9204      	str	r2, [sp, #16]
 800f746:	9a05      	ldr	r2, [sp, #20]
 800f748:	2101      	movs	r1, #1
 800f74a:	441a      	add	r2, r3
 800f74c:	4620      	mov	r0, r4
 800f74e:	9205      	str	r2, [sp, #20]
 800f750:	f000 fdbc 	bl	80102cc <__i2b>
 800f754:	4607      	mov	r7, r0
 800f756:	2d00      	cmp	r5, #0
 800f758:	dd0c      	ble.n	800f774 <_dtoa_r+0x754>
 800f75a:	9b05      	ldr	r3, [sp, #20]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dd09      	ble.n	800f774 <_dtoa_r+0x754>
 800f760:	42ab      	cmp	r3, r5
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	bfa8      	it	ge
 800f766:	462b      	movge	r3, r5
 800f768:	1ad2      	subs	r2, r2, r3
 800f76a:	9204      	str	r2, [sp, #16]
 800f76c:	9a05      	ldr	r2, [sp, #20]
 800f76e:	1aed      	subs	r5, r5, r3
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	9305      	str	r3, [sp, #20]
 800f774:	9b07      	ldr	r3, [sp, #28]
 800f776:	b31b      	cbz	r3, 800f7c0 <_dtoa_r+0x7a0>
 800f778:	9b08      	ldr	r3, [sp, #32]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 80af 	beq.w	800f8de <_dtoa_r+0x8be>
 800f780:	2e00      	cmp	r6, #0
 800f782:	dd13      	ble.n	800f7ac <_dtoa_r+0x78c>
 800f784:	4639      	mov	r1, r7
 800f786:	4632      	mov	r2, r6
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 fe5f 	bl	801044c <__pow5mult>
 800f78e:	ee18 2a10 	vmov	r2, s16
 800f792:	4601      	mov	r1, r0
 800f794:	4607      	mov	r7, r0
 800f796:	4620      	mov	r0, r4
 800f798:	f000 fdae 	bl	80102f8 <__multiply>
 800f79c:	ee18 1a10 	vmov	r1, s16
 800f7a0:	4680      	mov	r8, r0
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 fcda 	bl	801015c <_Bfree>
 800f7a8:	ee08 8a10 	vmov	s16, r8
 800f7ac:	9b07      	ldr	r3, [sp, #28]
 800f7ae:	1b9a      	subs	r2, r3, r6
 800f7b0:	d006      	beq.n	800f7c0 <_dtoa_r+0x7a0>
 800f7b2:	ee18 1a10 	vmov	r1, s16
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f000 fe48 	bl	801044c <__pow5mult>
 800f7bc:	ee08 0a10 	vmov	s16, r0
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 fd82 	bl	80102cc <__i2b>
 800f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	f340 8088 	ble.w	800f8e2 <_dtoa_r+0x8c2>
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	4601      	mov	r1, r0
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 fe38 	bl	801044c <__pow5mult>
 800f7dc:	9b06      	ldr	r3, [sp, #24]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	4606      	mov	r6, r0
 800f7e2:	f340 8081 	ble.w	800f8e8 <_dtoa_r+0x8c8>
 800f7e6:	f04f 0800 	mov.w	r8, #0
 800f7ea:	6933      	ldr	r3, [r6, #16]
 800f7ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f7f0:	6918      	ldr	r0, [r3, #16]
 800f7f2:	f000 fd1b 	bl	801022c <__hi0bits>
 800f7f6:	f1c0 0020 	rsb	r0, r0, #32
 800f7fa:	9b05      	ldr	r3, [sp, #20]
 800f7fc:	4418      	add	r0, r3
 800f7fe:	f010 001f 	ands.w	r0, r0, #31
 800f802:	f000 8092 	beq.w	800f92a <_dtoa_r+0x90a>
 800f806:	f1c0 0320 	rsb	r3, r0, #32
 800f80a:	2b04      	cmp	r3, #4
 800f80c:	f340 808a 	ble.w	800f924 <_dtoa_r+0x904>
 800f810:	f1c0 001c 	rsb	r0, r0, #28
 800f814:	9b04      	ldr	r3, [sp, #16]
 800f816:	4403      	add	r3, r0
 800f818:	9304      	str	r3, [sp, #16]
 800f81a:	9b05      	ldr	r3, [sp, #20]
 800f81c:	4403      	add	r3, r0
 800f81e:	4405      	add	r5, r0
 800f820:	9305      	str	r3, [sp, #20]
 800f822:	9b04      	ldr	r3, [sp, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd07      	ble.n	800f838 <_dtoa_r+0x818>
 800f828:	ee18 1a10 	vmov	r1, s16
 800f82c:	461a      	mov	r2, r3
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 fe66 	bl	8010500 <__lshift>
 800f834:	ee08 0a10 	vmov	s16, r0
 800f838:	9b05      	ldr	r3, [sp, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	dd05      	ble.n	800f84a <_dtoa_r+0x82a>
 800f83e:	4631      	mov	r1, r6
 800f840:	461a      	mov	r2, r3
 800f842:	4620      	mov	r0, r4
 800f844:	f000 fe5c 	bl	8010500 <__lshift>
 800f848:	4606      	mov	r6, r0
 800f84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d06e      	beq.n	800f92e <_dtoa_r+0x90e>
 800f850:	ee18 0a10 	vmov	r0, s16
 800f854:	4631      	mov	r1, r6
 800f856:	f000 fec3 	bl	80105e0 <__mcmp>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	da67      	bge.n	800f92e <_dtoa_r+0x90e>
 800f85e:	9b00      	ldr	r3, [sp, #0]
 800f860:	3b01      	subs	r3, #1
 800f862:	ee18 1a10 	vmov	r1, s16
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	220a      	movs	r2, #10
 800f86a:	2300      	movs	r3, #0
 800f86c:	4620      	mov	r0, r4
 800f86e:	f000 fc97 	bl	80101a0 <__multadd>
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	ee08 0a10 	vmov	s16, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 81b1 	beq.w	800fbe0 <_dtoa_r+0xbc0>
 800f87e:	2300      	movs	r3, #0
 800f880:	4639      	mov	r1, r7
 800f882:	220a      	movs	r2, #10
 800f884:	4620      	mov	r0, r4
 800f886:	f000 fc8b 	bl	80101a0 <__multadd>
 800f88a:	9b02      	ldr	r3, [sp, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	4607      	mov	r7, r0
 800f890:	f300 808e 	bgt.w	800f9b0 <_dtoa_r+0x990>
 800f894:	9b06      	ldr	r3, [sp, #24]
 800f896:	2b02      	cmp	r3, #2
 800f898:	dc51      	bgt.n	800f93e <_dtoa_r+0x91e>
 800f89a:	e089      	b.n	800f9b0 <_dtoa_r+0x990>
 800f89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f8a2:	e74b      	b.n	800f73c <_dtoa_r+0x71c>
 800f8a4:	9b03      	ldr	r3, [sp, #12]
 800f8a6:	1e5e      	subs	r6, r3, #1
 800f8a8:	9b07      	ldr	r3, [sp, #28]
 800f8aa:	42b3      	cmp	r3, r6
 800f8ac:	bfbf      	itttt	lt
 800f8ae:	9b07      	ldrlt	r3, [sp, #28]
 800f8b0:	9607      	strlt	r6, [sp, #28]
 800f8b2:	1af2      	sublt	r2, r6, r3
 800f8b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f8b6:	bfb6      	itet	lt
 800f8b8:	189b      	addlt	r3, r3, r2
 800f8ba:	1b9e      	subge	r6, r3, r6
 800f8bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f8be:	9b03      	ldr	r3, [sp, #12]
 800f8c0:	bfb8      	it	lt
 800f8c2:	2600      	movlt	r6, #0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	bfb7      	itett	lt
 800f8c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f8cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f8d0:	1a9d      	sublt	r5, r3, r2
 800f8d2:	2300      	movlt	r3, #0
 800f8d4:	e734      	b.n	800f740 <_dtoa_r+0x720>
 800f8d6:	9e07      	ldr	r6, [sp, #28]
 800f8d8:	9d04      	ldr	r5, [sp, #16]
 800f8da:	9f08      	ldr	r7, [sp, #32]
 800f8dc:	e73b      	b.n	800f756 <_dtoa_r+0x736>
 800f8de:	9a07      	ldr	r2, [sp, #28]
 800f8e0:	e767      	b.n	800f7b2 <_dtoa_r+0x792>
 800f8e2:	9b06      	ldr	r3, [sp, #24]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	dc18      	bgt.n	800f91a <_dtoa_r+0x8fa>
 800f8e8:	f1ba 0f00 	cmp.w	sl, #0
 800f8ec:	d115      	bne.n	800f91a <_dtoa_r+0x8fa>
 800f8ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8f2:	b993      	cbnz	r3, 800f91a <_dtoa_r+0x8fa>
 800f8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f8f8:	0d1b      	lsrs	r3, r3, #20
 800f8fa:	051b      	lsls	r3, r3, #20
 800f8fc:	b183      	cbz	r3, 800f920 <_dtoa_r+0x900>
 800f8fe:	9b04      	ldr	r3, [sp, #16]
 800f900:	3301      	adds	r3, #1
 800f902:	9304      	str	r3, [sp, #16]
 800f904:	9b05      	ldr	r3, [sp, #20]
 800f906:	3301      	adds	r3, #1
 800f908:	9305      	str	r3, [sp, #20]
 800f90a:	f04f 0801 	mov.w	r8, #1
 800f90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f910:	2b00      	cmp	r3, #0
 800f912:	f47f af6a 	bne.w	800f7ea <_dtoa_r+0x7ca>
 800f916:	2001      	movs	r0, #1
 800f918:	e76f      	b.n	800f7fa <_dtoa_r+0x7da>
 800f91a:	f04f 0800 	mov.w	r8, #0
 800f91e:	e7f6      	b.n	800f90e <_dtoa_r+0x8ee>
 800f920:	4698      	mov	r8, r3
 800f922:	e7f4      	b.n	800f90e <_dtoa_r+0x8ee>
 800f924:	f43f af7d 	beq.w	800f822 <_dtoa_r+0x802>
 800f928:	4618      	mov	r0, r3
 800f92a:	301c      	adds	r0, #28
 800f92c:	e772      	b.n	800f814 <_dtoa_r+0x7f4>
 800f92e:	9b03      	ldr	r3, [sp, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	dc37      	bgt.n	800f9a4 <_dtoa_r+0x984>
 800f934:	9b06      	ldr	r3, [sp, #24]
 800f936:	2b02      	cmp	r3, #2
 800f938:	dd34      	ble.n	800f9a4 <_dtoa_r+0x984>
 800f93a:	9b03      	ldr	r3, [sp, #12]
 800f93c:	9302      	str	r3, [sp, #8]
 800f93e:	9b02      	ldr	r3, [sp, #8]
 800f940:	b96b      	cbnz	r3, 800f95e <_dtoa_r+0x93e>
 800f942:	4631      	mov	r1, r6
 800f944:	2205      	movs	r2, #5
 800f946:	4620      	mov	r0, r4
 800f948:	f000 fc2a 	bl	80101a0 <__multadd>
 800f94c:	4601      	mov	r1, r0
 800f94e:	4606      	mov	r6, r0
 800f950:	ee18 0a10 	vmov	r0, s16
 800f954:	f000 fe44 	bl	80105e0 <__mcmp>
 800f958:	2800      	cmp	r0, #0
 800f95a:	f73f adbb 	bgt.w	800f4d4 <_dtoa_r+0x4b4>
 800f95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f960:	9d01      	ldr	r5, [sp, #4]
 800f962:	43db      	mvns	r3, r3
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	f04f 0800 	mov.w	r8, #0
 800f96a:	4631      	mov	r1, r6
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 fbf5 	bl	801015c <_Bfree>
 800f972:	2f00      	cmp	r7, #0
 800f974:	f43f aea4 	beq.w	800f6c0 <_dtoa_r+0x6a0>
 800f978:	f1b8 0f00 	cmp.w	r8, #0
 800f97c:	d005      	beq.n	800f98a <_dtoa_r+0x96a>
 800f97e:	45b8      	cmp	r8, r7
 800f980:	d003      	beq.n	800f98a <_dtoa_r+0x96a>
 800f982:	4641      	mov	r1, r8
 800f984:	4620      	mov	r0, r4
 800f986:	f000 fbe9 	bl	801015c <_Bfree>
 800f98a:	4639      	mov	r1, r7
 800f98c:	4620      	mov	r0, r4
 800f98e:	f000 fbe5 	bl	801015c <_Bfree>
 800f992:	e695      	b.n	800f6c0 <_dtoa_r+0x6a0>
 800f994:	2600      	movs	r6, #0
 800f996:	4637      	mov	r7, r6
 800f998:	e7e1      	b.n	800f95e <_dtoa_r+0x93e>
 800f99a:	9700      	str	r7, [sp, #0]
 800f99c:	4637      	mov	r7, r6
 800f99e:	e599      	b.n	800f4d4 <_dtoa_r+0x4b4>
 800f9a0:	40240000 	.word	0x40240000
 800f9a4:	9b08      	ldr	r3, [sp, #32]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 80ca 	beq.w	800fb40 <_dtoa_r+0xb20>
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	9302      	str	r3, [sp, #8]
 800f9b0:	2d00      	cmp	r5, #0
 800f9b2:	dd05      	ble.n	800f9c0 <_dtoa_r+0x9a0>
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	462a      	mov	r2, r5
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f000 fda1 	bl	8010500 <__lshift>
 800f9be:	4607      	mov	r7, r0
 800f9c0:	f1b8 0f00 	cmp.w	r8, #0
 800f9c4:	d05b      	beq.n	800fa7e <_dtoa_r+0xa5e>
 800f9c6:	6879      	ldr	r1, [r7, #4]
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f000 fb87 	bl	80100dc <_Balloc>
 800f9ce:	4605      	mov	r5, r0
 800f9d0:	b928      	cbnz	r0, 800f9de <_dtoa_r+0x9be>
 800f9d2:	4b87      	ldr	r3, [pc, #540]	; (800fbf0 <_dtoa_r+0xbd0>)
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f9da:	f7ff bb3b 	b.w	800f054 <_dtoa_r+0x34>
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	3202      	adds	r2, #2
 800f9e2:	0092      	lsls	r2, r2, #2
 800f9e4:	f107 010c 	add.w	r1, r7, #12
 800f9e8:	300c      	adds	r0, #12
 800f9ea:	f7fe fa63 	bl	800deb4 <memcpy>
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f000 fd84 	bl	8010500 <__lshift>
 800f9f8:	9b01      	ldr	r3, [sp, #4]
 800f9fa:	f103 0901 	add.w	r9, r3, #1
 800f9fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fa02:	4413      	add	r3, r2
 800fa04:	9305      	str	r3, [sp, #20]
 800fa06:	f00a 0301 	and.w	r3, sl, #1
 800fa0a:	46b8      	mov	r8, r7
 800fa0c:	9304      	str	r3, [sp, #16]
 800fa0e:	4607      	mov	r7, r0
 800fa10:	4631      	mov	r1, r6
 800fa12:	ee18 0a10 	vmov	r0, s16
 800fa16:	f7ff fa77 	bl	800ef08 <quorem>
 800fa1a:	4641      	mov	r1, r8
 800fa1c:	9002      	str	r0, [sp, #8]
 800fa1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fa22:	ee18 0a10 	vmov	r0, s16
 800fa26:	f000 fddb 	bl	80105e0 <__mcmp>
 800fa2a:	463a      	mov	r2, r7
 800fa2c:	9003      	str	r0, [sp, #12]
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 fdf1 	bl	8010618 <__mdiff>
 800fa36:	68c2      	ldr	r2, [r0, #12]
 800fa38:	f109 3bff 	add.w	fp, r9, #4294967295
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	bb02      	cbnz	r2, 800fa82 <_dtoa_r+0xa62>
 800fa40:	4601      	mov	r1, r0
 800fa42:	ee18 0a10 	vmov	r0, s16
 800fa46:	f000 fdcb 	bl	80105e0 <__mcmp>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4620      	mov	r0, r4
 800fa50:	9207      	str	r2, [sp, #28]
 800fa52:	f000 fb83 	bl	801015c <_Bfree>
 800fa56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fa5a:	ea43 0102 	orr.w	r1, r3, r2
 800fa5e:	9b04      	ldr	r3, [sp, #16]
 800fa60:	430b      	orrs	r3, r1
 800fa62:	464d      	mov	r5, r9
 800fa64:	d10f      	bne.n	800fa86 <_dtoa_r+0xa66>
 800fa66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa6a:	d02a      	beq.n	800fac2 <_dtoa_r+0xaa2>
 800fa6c:	9b03      	ldr	r3, [sp, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	dd02      	ble.n	800fa78 <_dtoa_r+0xa58>
 800fa72:	9b02      	ldr	r3, [sp, #8]
 800fa74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fa78:	f88b a000 	strb.w	sl, [fp]
 800fa7c:	e775      	b.n	800f96a <_dtoa_r+0x94a>
 800fa7e:	4638      	mov	r0, r7
 800fa80:	e7ba      	b.n	800f9f8 <_dtoa_r+0x9d8>
 800fa82:	2201      	movs	r2, #1
 800fa84:	e7e2      	b.n	800fa4c <_dtoa_r+0xa2c>
 800fa86:	9b03      	ldr	r3, [sp, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	db04      	blt.n	800fa96 <_dtoa_r+0xa76>
 800fa8c:	9906      	ldr	r1, [sp, #24]
 800fa8e:	430b      	orrs	r3, r1
 800fa90:	9904      	ldr	r1, [sp, #16]
 800fa92:	430b      	orrs	r3, r1
 800fa94:	d122      	bne.n	800fadc <_dtoa_r+0xabc>
 800fa96:	2a00      	cmp	r2, #0
 800fa98:	ddee      	ble.n	800fa78 <_dtoa_r+0xa58>
 800fa9a:	ee18 1a10 	vmov	r1, s16
 800fa9e:	2201      	movs	r2, #1
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 fd2d 	bl	8010500 <__lshift>
 800faa6:	4631      	mov	r1, r6
 800faa8:	ee08 0a10 	vmov	s16, r0
 800faac:	f000 fd98 	bl	80105e0 <__mcmp>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	dc03      	bgt.n	800fabc <_dtoa_r+0xa9c>
 800fab4:	d1e0      	bne.n	800fa78 <_dtoa_r+0xa58>
 800fab6:	f01a 0f01 	tst.w	sl, #1
 800faba:	d0dd      	beq.n	800fa78 <_dtoa_r+0xa58>
 800fabc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fac0:	d1d7      	bne.n	800fa72 <_dtoa_r+0xa52>
 800fac2:	2339      	movs	r3, #57	; 0x39
 800fac4:	f88b 3000 	strb.w	r3, [fp]
 800fac8:	462b      	mov	r3, r5
 800faca:	461d      	mov	r5, r3
 800facc:	3b01      	subs	r3, #1
 800face:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fad2:	2a39      	cmp	r2, #57	; 0x39
 800fad4:	d071      	beq.n	800fbba <_dtoa_r+0xb9a>
 800fad6:	3201      	adds	r2, #1
 800fad8:	701a      	strb	r2, [r3, #0]
 800fada:	e746      	b.n	800f96a <_dtoa_r+0x94a>
 800fadc:	2a00      	cmp	r2, #0
 800fade:	dd07      	ble.n	800faf0 <_dtoa_r+0xad0>
 800fae0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fae4:	d0ed      	beq.n	800fac2 <_dtoa_r+0xaa2>
 800fae6:	f10a 0301 	add.w	r3, sl, #1
 800faea:	f88b 3000 	strb.w	r3, [fp]
 800faee:	e73c      	b.n	800f96a <_dtoa_r+0x94a>
 800faf0:	9b05      	ldr	r3, [sp, #20]
 800faf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800faf6:	4599      	cmp	r9, r3
 800faf8:	d047      	beq.n	800fb8a <_dtoa_r+0xb6a>
 800fafa:	ee18 1a10 	vmov	r1, s16
 800fafe:	2300      	movs	r3, #0
 800fb00:	220a      	movs	r2, #10
 800fb02:	4620      	mov	r0, r4
 800fb04:	f000 fb4c 	bl	80101a0 <__multadd>
 800fb08:	45b8      	cmp	r8, r7
 800fb0a:	ee08 0a10 	vmov	s16, r0
 800fb0e:	f04f 0300 	mov.w	r3, #0
 800fb12:	f04f 020a 	mov.w	r2, #10
 800fb16:	4641      	mov	r1, r8
 800fb18:	4620      	mov	r0, r4
 800fb1a:	d106      	bne.n	800fb2a <_dtoa_r+0xb0a>
 800fb1c:	f000 fb40 	bl	80101a0 <__multadd>
 800fb20:	4680      	mov	r8, r0
 800fb22:	4607      	mov	r7, r0
 800fb24:	f109 0901 	add.w	r9, r9, #1
 800fb28:	e772      	b.n	800fa10 <_dtoa_r+0x9f0>
 800fb2a:	f000 fb39 	bl	80101a0 <__multadd>
 800fb2e:	4639      	mov	r1, r7
 800fb30:	4680      	mov	r8, r0
 800fb32:	2300      	movs	r3, #0
 800fb34:	220a      	movs	r2, #10
 800fb36:	4620      	mov	r0, r4
 800fb38:	f000 fb32 	bl	80101a0 <__multadd>
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	e7f1      	b.n	800fb24 <_dtoa_r+0xb04>
 800fb40:	9b03      	ldr	r3, [sp, #12]
 800fb42:	9302      	str	r3, [sp, #8]
 800fb44:	9d01      	ldr	r5, [sp, #4]
 800fb46:	ee18 0a10 	vmov	r0, s16
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	f7ff f9dc 	bl	800ef08 <quorem>
 800fb50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb54:	9b01      	ldr	r3, [sp, #4]
 800fb56:	f805 ab01 	strb.w	sl, [r5], #1
 800fb5a:	1aea      	subs	r2, r5, r3
 800fb5c:	9b02      	ldr	r3, [sp, #8]
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	dd09      	ble.n	800fb76 <_dtoa_r+0xb56>
 800fb62:	ee18 1a10 	vmov	r1, s16
 800fb66:	2300      	movs	r3, #0
 800fb68:	220a      	movs	r2, #10
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fb18 	bl	80101a0 <__multadd>
 800fb70:	ee08 0a10 	vmov	s16, r0
 800fb74:	e7e7      	b.n	800fb46 <_dtoa_r+0xb26>
 800fb76:	9b02      	ldr	r3, [sp, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	bfc8      	it	gt
 800fb7c:	461d      	movgt	r5, r3
 800fb7e:	9b01      	ldr	r3, [sp, #4]
 800fb80:	bfd8      	it	le
 800fb82:	2501      	movle	r5, #1
 800fb84:	441d      	add	r5, r3
 800fb86:	f04f 0800 	mov.w	r8, #0
 800fb8a:	ee18 1a10 	vmov	r1, s16
 800fb8e:	2201      	movs	r2, #1
 800fb90:	4620      	mov	r0, r4
 800fb92:	f000 fcb5 	bl	8010500 <__lshift>
 800fb96:	4631      	mov	r1, r6
 800fb98:	ee08 0a10 	vmov	s16, r0
 800fb9c:	f000 fd20 	bl	80105e0 <__mcmp>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	dc91      	bgt.n	800fac8 <_dtoa_r+0xaa8>
 800fba4:	d102      	bne.n	800fbac <_dtoa_r+0xb8c>
 800fba6:	f01a 0f01 	tst.w	sl, #1
 800fbaa:	d18d      	bne.n	800fac8 <_dtoa_r+0xaa8>
 800fbac:	462b      	mov	r3, r5
 800fbae:	461d      	mov	r5, r3
 800fbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbb4:	2a30      	cmp	r2, #48	; 0x30
 800fbb6:	d0fa      	beq.n	800fbae <_dtoa_r+0xb8e>
 800fbb8:	e6d7      	b.n	800f96a <_dtoa_r+0x94a>
 800fbba:	9a01      	ldr	r2, [sp, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d184      	bne.n	800faca <_dtoa_r+0xaaa>
 800fbc0:	9b00      	ldr	r3, [sp, #0]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	2331      	movs	r3, #49	; 0x31
 800fbc8:	7013      	strb	r3, [r2, #0]
 800fbca:	e6ce      	b.n	800f96a <_dtoa_r+0x94a>
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <_dtoa_r+0xbd4>)
 800fbce:	f7ff ba95 	b.w	800f0fc <_dtoa_r+0xdc>
 800fbd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f47f aa6e 	bne.w	800f0b6 <_dtoa_r+0x96>
 800fbda:	4b07      	ldr	r3, [pc, #28]	; (800fbf8 <_dtoa_r+0xbd8>)
 800fbdc:	f7ff ba8e 	b.w	800f0fc <_dtoa_r+0xdc>
 800fbe0:	9b02      	ldr	r3, [sp, #8]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	dcae      	bgt.n	800fb44 <_dtoa_r+0xb24>
 800fbe6:	9b06      	ldr	r3, [sp, #24]
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	f73f aea8 	bgt.w	800f93e <_dtoa_r+0x91e>
 800fbee:	e7a9      	b.n	800fb44 <_dtoa_r+0xb24>
 800fbf0:	0801d565 	.word	0x0801d565
 800fbf4:	0801d3c1 	.word	0x0801d3c1
 800fbf8:	0801d4e6 	.word	0x0801d4e6

0800fbfc <__sflush_r>:
 800fbfc:	898a      	ldrh	r2, [r1, #12]
 800fbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc02:	4605      	mov	r5, r0
 800fc04:	0710      	lsls	r0, r2, #28
 800fc06:	460c      	mov	r4, r1
 800fc08:	d458      	bmi.n	800fcbc <__sflush_r+0xc0>
 800fc0a:	684b      	ldr	r3, [r1, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	dc05      	bgt.n	800fc1c <__sflush_r+0x20>
 800fc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	dc02      	bgt.n	800fc1c <__sflush_r+0x20>
 800fc16:	2000      	movs	r0, #0
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc1e:	2e00      	cmp	r6, #0
 800fc20:	d0f9      	beq.n	800fc16 <__sflush_r+0x1a>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc28:	682f      	ldr	r7, [r5, #0]
 800fc2a:	602b      	str	r3, [r5, #0]
 800fc2c:	d032      	beq.n	800fc94 <__sflush_r+0x98>
 800fc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc30:	89a3      	ldrh	r3, [r4, #12]
 800fc32:	075a      	lsls	r2, r3, #29
 800fc34:	d505      	bpl.n	800fc42 <__sflush_r+0x46>
 800fc36:	6863      	ldr	r3, [r4, #4]
 800fc38:	1ac0      	subs	r0, r0, r3
 800fc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc3c:	b10b      	cbz	r3, 800fc42 <__sflush_r+0x46>
 800fc3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc40:	1ac0      	subs	r0, r0, r3
 800fc42:	2300      	movs	r3, #0
 800fc44:	4602      	mov	r2, r0
 800fc46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc48:	6a21      	ldr	r1, [r4, #32]
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	47b0      	blx	r6
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	d106      	bne.n	800fc62 <__sflush_r+0x66>
 800fc54:	6829      	ldr	r1, [r5, #0]
 800fc56:	291d      	cmp	r1, #29
 800fc58:	d82c      	bhi.n	800fcb4 <__sflush_r+0xb8>
 800fc5a:	4a2a      	ldr	r2, [pc, #168]	; (800fd04 <__sflush_r+0x108>)
 800fc5c:	40ca      	lsrs	r2, r1
 800fc5e:	07d6      	lsls	r6, r2, #31
 800fc60:	d528      	bpl.n	800fcb4 <__sflush_r+0xb8>
 800fc62:	2200      	movs	r2, #0
 800fc64:	6062      	str	r2, [r4, #4]
 800fc66:	04d9      	lsls	r1, r3, #19
 800fc68:	6922      	ldr	r2, [r4, #16]
 800fc6a:	6022      	str	r2, [r4, #0]
 800fc6c:	d504      	bpl.n	800fc78 <__sflush_r+0x7c>
 800fc6e:	1c42      	adds	r2, r0, #1
 800fc70:	d101      	bne.n	800fc76 <__sflush_r+0x7a>
 800fc72:	682b      	ldr	r3, [r5, #0]
 800fc74:	b903      	cbnz	r3, 800fc78 <__sflush_r+0x7c>
 800fc76:	6560      	str	r0, [r4, #84]	; 0x54
 800fc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc7a:	602f      	str	r7, [r5, #0]
 800fc7c:	2900      	cmp	r1, #0
 800fc7e:	d0ca      	beq.n	800fc16 <__sflush_r+0x1a>
 800fc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc84:	4299      	cmp	r1, r3
 800fc86:	d002      	beq.n	800fc8e <__sflush_r+0x92>
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f7fe f929 	bl	800dee0 <_free_r>
 800fc8e:	2000      	movs	r0, #0
 800fc90:	6360      	str	r0, [r4, #52]	; 0x34
 800fc92:	e7c1      	b.n	800fc18 <__sflush_r+0x1c>
 800fc94:	6a21      	ldr	r1, [r4, #32]
 800fc96:	2301      	movs	r3, #1
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b0      	blx	r6
 800fc9c:	1c41      	adds	r1, r0, #1
 800fc9e:	d1c7      	bne.n	800fc30 <__sflush_r+0x34>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d0c4      	beq.n	800fc30 <__sflush_r+0x34>
 800fca6:	2b1d      	cmp	r3, #29
 800fca8:	d001      	beq.n	800fcae <__sflush_r+0xb2>
 800fcaa:	2b16      	cmp	r3, #22
 800fcac:	d101      	bne.n	800fcb2 <__sflush_r+0xb6>
 800fcae:	602f      	str	r7, [r5, #0]
 800fcb0:	e7b1      	b.n	800fc16 <__sflush_r+0x1a>
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb8:	81a3      	strh	r3, [r4, #12]
 800fcba:	e7ad      	b.n	800fc18 <__sflush_r+0x1c>
 800fcbc:	690f      	ldr	r7, [r1, #16]
 800fcbe:	2f00      	cmp	r7, #0
 800fcc0:	d0a9      	beq.n	800fc16 <__sflush_r+0x1a>
 800fcc2:	0793      	lsls	r3, r2, #30
 800fcc4:	680e      	ldr	r6, [r1, #0]
 800fcc6:	bf08      	it	eq
 800fcc8:	694b      	ldreq	r3, [r1, #20]
 800fcca:	600f      	str	r7, [r1, #0]
 800fccc:	bf18      	it	ne
 800fcce:	2300      	movne	r3, #0
 800fcd0:	eba6 0807 	sub.w	r8, r6, r7
 800fcd4:	608b      	str	r3, [r1, #8]
 800fcd6:	f1b8 0f00 	cmp.w	r8, #0
 800fcda:	dd9c      	ble.n	800fc16 <__sflush_r+0x1a>
 800fcdc:	6a21      	ldr	r1, [r4, #32]
 800fcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fce0:	4643      	mov	r3, r8
 800fce2:	463a      	mov	r2, r7
 800fce4:	4628      	mov	r0, r5
 800fce6:	47b0      	blx	r6
 800fce8:	2800      	cmp	r0, #0
 800fcea:	dc06      	bgt.n	800fcfa <__sflush_r+0xfe>
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcf2:	81a3      	strh	r3, [r4, #12]
 800fcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf8:	e78e      	b.n	800fc18 <__sflush_r+0x1c>
 800fcfa:	4407      	add	r7, r0
 800fcfc:	eba8 0800 	sub.w	r8, r8, r0
 800fd00:	e7e9      	b.n	800fcd6 <__sflush_r+0xda>
 800fd02:	bf00      	nop
 800fd04:	20400001 	.word	0x20400001

0800fd08 <_fflush_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	690b      	ldr	r3, [r1, #16]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	b913      	cbnz	r3, 800fd18 <_fflush_r+0x10>
 800fd12:	2500      	movs	r5, #0
 800fd14:	4628      	mov	r0, r5
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	b118      	cbz	r0, 800fd22 <_fflush_r+0x1a>
 800fd1a:	6983      	ldr	r3, [r0, #24]
 800fd1c:	b90b      	cbnz	r3, 800fd22 <_fflush_r+0x1a>
 800fd1e:	f000 f887 	bl	800fe30 <__sinit>
 800fd22:	4b14      	ldr	r3, [pc, #80]	; (800fd74 <_fflush_r+0x6c>)
 800fd24:	429c      	cmp	r4, r3
 800fd26:	d11b      	bne.n	800fd60 <_fflush_r+0x58>
 800fd28:	686c      	ldr	r4, [r5, #4]
 800fd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0ef      	beq.n	800fd12 <_fflush_r+0xa>
 800fd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd34:	07d0      	lsls	r0, r2, #31
 800fd36:	d404      	bmi.n	800fd42 <_fflush_r+0x3a>
 800fd38:	0599      	lsls	r1, r3, #22
 800fd3a:	d402      	bmi.n	800fd42 <_fflush_r+0x3a>
 800fd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd3e:	f000 f91a 	bl	800ff76 <__retarget_lock_acquire_recursive>
 800fd42:	4628      	mov	r0, r5
 800fd44:	4621      	mov	r1, r4
 800fd46:	f7ff ff59 	bl	800fbfc <__sflush_r>
 800fd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd4c:	07da      	lsls	r2, r3, #31
 800fd4e:	4605      	mov	r5, r0
 800fd50:	d4e0      	bmi.n	800fd14 <_fflush_r+0xc>
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	059b      	lsls	r3, r3, #22
 800fd56:	d4dd      	bmi.n	800fd14 <_fflush_r+0xc>
 800fd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd5a:	f000 f90d 	bl	800ff78 <__retarget_lock_release_recursive>
 800fd5e:	e7d9      	b.n	800fd14 <_fflush_r+0xc>
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <_fflush_r+0x70>)
 800fd62:	429c      	cmp	r4, r3
 800fd64:	d101      	bne.n	800fd6a <_fflush_r+0x62>
 800fd66:	68ac      	ldr	r4, [r5, #8]
 800fd68:	e7df      	b.n	800fd2a <_fflush_r+0x22>
 800fd6a:	4b04      	ldr	r3, [pc, #16]	; (800fd7c <_fflush_r+0x74>)
 800fd6c:	429c      	cmp	r4, r3
 800fd6e:	bf08      	it	eq
 800fd70:	68ec      	ldreq	r4, [r5, #12]
 800fd72:	e7da      	b.n	800fd2a <_fflush_r+0x22>
 800fd74:	0801d598 	.word	0x0801d598
 800fd78:	0801d5b8 	.word	0x0801d5b8
 800fd7c:	0801d578 	.word	0x0801d578

0800fd80 <std>:
 800fd80:	2300      	movs	r3, #0
 800fd82:	b510      	push	{r4, lr}
 800fd84:	4604      	mov	r4, r0
 800fd86:	e9c0 3300 	strd	r3, r3, [r0]
 800fd8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd8e:	6083      	str	r3, [r0, #8]
 800fd90:	8181      	strh	r1, [r0, #12]
 800fd92:	6643      	str	r3, [r0, #100]	; 0x64
 800fd94:	81c2      	strh	r2, [r0, #14]
 800fd96:	6183      	str	r3, [r0, #24]
 800fd98:	4619      	mov	r1, r3
 800fd9a:	2208      	movs	r2, #8
 800fd9c:	305c      	adds	r0, #92	; 0x5c
 800fd9e:	f7fe f897 	bl	800ded0 <memset>
 800fda2:	4b05      	ldr	r3, [pc, #20]	; (800fdb8 <std+0x38>)
 800fda4:	6263      	str	r3, [r4, #36]	; 0x24
 800fda6:	4b05      	ldr	r3, [pc, #20]	; (800fdbc <std+0x3c>)
 800fda8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdaa:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <std+0x40>)
 800fdac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdae:	4b05      	ldr	r3, [pc, #20]	; (800fdc4 <std+0x44>)
 800fdb0:	6224      	str	r4, [r4, #32]
 800fdb2:	6323      	str	r3, [r4, #48]	; 0x30
 800fdb4:	bd10      	pop	{r4, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0800ec89 	.word	0x0800ec89
 800fdbc:	0800ecab 	.word	0x0800ecab
 800fdc0:	0800ece3 	.word	0x0800ece3
 800fdc4:	0800ed07 	.word	0x0800ed07

0800fdc8 <_cleanup_r>:
 800fdc8:	4901      	ldr	r1, [pc, #4]	; (800fdd0 <_cleanup_r+0x8>)
 800fdca:	f000 b8af 	b.w	800ff2c <_fwalk_reent>
 800fdce:	bf00      	nop
 800fdd0:	0800fd09 	.word	0x0800fd09

0800fdd4 <__sfmoreglue>:
 800fdd4:	b570      	push	{r4, r5, r6, lr}
 800fdd6:	2268      	movs	r2, #104	; 0x68
 800fdd8:	1e4d      	subs	r5, r1, #1
 800fdda:	4355      	muls	r5, r2
 800fddc:	460e      	mov	r6, r1
 800fdde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fde2:	f7fe f8e9 	bl	800dfb8 <_malloc_r>
 800fde6:	4604      	mov	r4, r0
 800fde8:	b140      	cbz	r0, 800fdfc <__sfmoreglue+0x28>
 800fdea:	2100      	movs	r1, #0
 800fdec:	e9c0 1600 	strd	r1, r6, [r0]
 800fdf0:	300c      	adds	r0, #12
 800fdf2:	60a0      	str	r0, [r4, #8]
 800fdf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fdf8:	f7fe f86a 	bl	800ded0 <memset>
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}

0800fe00 <__sfp_lock_acquire>:
 800fe00:	4801      	ldr	r0, [pc, #4]	; (800fe08 <__sfp_lock_acquire+0x8>)
 800fe02:	f000 b8b8 	b.w	800ff76 <__retarget_lock_acquire_recursive>
 800fe06:	bf00      	nop
 800fe08:	20005a6d 	.word	0x20005a6d

0800fe0c <__sfp_lock_release>:
 800fe0c:	4801      	ldr	r0, [pc, #4]	; (800fe14 <__sfp_lock_release+0x8>)
 800fe0e:	f000 b8b3 	b.w	800ff78 <__retarget_lock_release_recursive>
 800fe12:	bf00      	nop
 800fe14:	20005a6d 	.word	0x20005a6d

0800fe18 <__sinit_lock_acquire>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__sinit_lock_acquire+0x8>)
 800fe1a:	f000 b8ac 	b.w	800ff76 <__retarget_lock_acquire_recursive>
 800fe1e:	bf00      	nop
 800fe20:	20005a6e 	.word	0x20005a6e

0800fe24 <__sinit_lock_release>:
 800fe24:	4801      	ldr	r0, [pc, #4]	; (800fe2c <__sinit_lock_release+0x8>)
 800fe26:	f000 b8a7 	b.w	800ff78 <__retarget_lock_release_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	20005a6e 	.word	0x20005a6e

0800fe30 <__sinit>:
 800fe30:	b510      	push	{r4, lr}
 800fe32:	4604      	mov	r4, r0
 800fe34:	f7ff fff0 	bl	800fe18 <__sinit_lock_acquire>
 800fe38:	69a3      	ldr	r3, [r4, #24]
 800fe3a:	b11b      	cbz	r3, 800fe44 <__sinit+0x14>
 800fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe40:	f7ff bff0 	b.w	800fe24 <__sinit_lock_release>
 800fe44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe48:	6523      	str	r3, [r4, #80]	; 0x50
 800fe4a:	4b13      	ldr	r3, [pc, #76]	; (800fe98 <__sinit+0x68>)
 800fe4c:	4a13      	ldr	r2, [pc, #76]	; (800fe9c <__sinit+0x6c>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe52:	42a3      	cmp	r3, r4
 800fe54:	bf04      	itt	eq
 800fe56:	2301      	moveq	r3, #1
 800fe58:	61a3      	streq	r3, [r4, #24]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 f820 	bl	800fea0 <__sfp>
 800fe60:	6060      	str	r0, [r4, #4]
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 f81c 	bl	800fea0 <__sfp>
 800fe68:	60a0      	str	r0, [r4, #8]
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f000 f818 	bl	800fea0 <__sfp>
 800fe70:	2200      	movs	r2, #0
 800fe72:	60e0      	str	r0, [r4, #12]
 800fe74:	2104      	movs	r1, #4
 800fe76:	6860      	ldr	r0, [r4, #4]
 800fe78:	f7ff ff82 	bl	800fd80 <std>
 800fe7c:	68a0      	ldr	r0, [r4, #8]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	2109      	movs	r1, #9
 800fe82:	f7ff ff7d 	bl	800fd80 <std>
 800fe86:	68e0      	ldr	r0, [r4, #12]
 800fe88:	2202      	movs	r2, #2
 800fe8a:	2112      	movs	r1, #18
 800fe8c:	f7ff ff78 	bl	800fd80 <std>
 800fe90:	2301      	movs	r3, #1
 800fe92:	61a3      	str	r3, [r4, #24]
 800fe94:	e7d2      	b.n	800fe3c <__sinit+0xc>
 800fe96:	bf00      	nop
 800fe98:	0801d39c 	.word	0x0801d39c
 800fe9c:	0800fdc9 	.word	0x0800fdc9

0800fea0 <__sfp>:
 800fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea2:	4607      	mov	r7, r0
 800fea4:	f7ff ffac 	bl	800fe00 <__sfp_lock_acquire>
 800fea8:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <__sfp+0x84>)
 800feaa:	681e      	ldr	r6, [r3, #0]
 800feac:	69b3      	ldr	r3, [r6, #24]
 800feae:	b913      	cbnz	r3, 800feb6 <__sfp+0x16>
 800feb0:	4630      	mov	r0, r6
 800feb2:	f7ff ffbd 	bl	800fe30 <__sinit>
 800feb6:	3648      	adds	r6, #72	; 0x48
 800feb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800febc:	3b01      	subs	r3, #1
 800febe:	d503      	bpl.n	800fec8 <__sfp+0x28>
 800fec0:	6833      	ldr	r3, [r6, #0]
 800fec2:	b30b      	cbz	r3, 800ff08 <__sfp+0x68>
 800fec4:	6836      	ldr	r6, [r6, #0]
 800fec6:	e7f7      	b.n	800feb8 <__sfp+0x18>
 800fec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fecc:	b9d5      	cbnz	r5, 800ff04 <__sfp+0x64>
 800fece:	4b16      	ldr	r3, [pc, #88]	; (800ff28 <__sfp+0x88>)
 800fed0:	60e3      	str	r3, [r4, #12]
 800fed2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fed6:	6665      	str	r5, [r4, #100]	; 0x64
 800fed8:	f000 f84c 	bl	800ff74 <__retarget_lock_init_recursive>
 800fedc:	f7ff ff96 	bl	800fe0c <__sfp_lock_release>
 800fee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fee8:	6025      	str	r5, [r4, #0]
 800feea:	61a5      	str	r5, [r4, #24]
 800feec:	2208      	movs	r2, #8
 800feee:	4629      	mov	r1, r5
 800fef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fef4:	f7fd ffec 	bl	800ded0 <memset>
 800fef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fefc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff00:	4620      	mov	r0, r4
 800ff02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff04:	3468      	adds	r4, #104	; 0x68
 800ff06:	e7d9      	b.n	800febc <__sfp+0x1c>
 800ff08:	2104      	movs	r1, #4
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	f7ff ff62 	bl	800fdd4 <__sfmoreglue>
 800ff10:	4604      	mov	r4, r0
 800ff12:	6030      	str	r0, [r6, #0]
 800ff14:	2800      	cmp	r0, #0
 800ff16:	d1d5      	bne.n	800fec4 <__sfp+0x24>
 800ff18:	f7ff ff78 	bl	800fe0c <__sfp_lock_release>
 800ff1c:	230c      	movs	r3, #12
 800ff1e:	603b      	str	r3, [r7, #0]
 800ff20:	e7ee      	b.n	800ff00 <__sfp+0x60>
 800ff22:	bf00      	nop
 800ff24:	0801d39c 	.word	0x0801d39c
 800ff28:	ffff0001 	.word	0xffff0001

0800ff2c <_fwalk_reent>:
 800ff2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff30:	4606      	mov	r6, r0
 800ff32:	4688      	mov	r8, r1
 800ff34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff38:	2700      	movs	r7, #0
 800ff3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ff42:	d505      	bpl.n	800ff50 <_fwalk_reent+0x24>
 800ff44:	6824      	ldr	r4, [r4, #0]
 800ff46:	2c00      	cmp	r4, #0
 800ff48:	d1f7      	bne.n	800ff3a <_fwalk_reent+0xe>
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff50:	89ab      	ldrh	r3, [r5, #12]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d907      	bls.n	800ff66 <_fwalk_reent+0x3a>
 800ff56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	d003      	beq.n	800ff66 <_fwalk_reent+0x3a>
 800ff5e:	4629      	mov	r1, r5
 800ff60:	4630      	mov	r0, r6
 800ff62:	47c0      	blx	r8
 800ff64:	4307      	orrs	r7, r0
 800ff66:	3568      	adds	r5, #104	; 0x68
 800ff68:	e7e9      	b.n	800ff3e <_fwalk_reent+0x12>
	...

0800ff6c <_localeconv_r>:
 800ff6c:	4800      	ldr	r0, [pc, #0]	; (800ff70 <_localeconv_r+0x4>)
 800ff6e:	4770      	bx	lr
 800ff70:	20000218 	.word	0x20000218

0800ff74 <__retarget_lock_init_recursive>:
 800ff74:	4770      	bx	lr

0800ff76 <__retarget_lock_acquire_recursive>:
 800ff76:	4770      	bx	lr

0800ff78 <__retarget_lock_release_recursive>:
 800ff78:	4770      	bx	lr
	...

0800ff7c <_lseek_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	; (800ff9c <_lseek_r+0x20>)
 800ff80:	4604      	mov	r4, r0
 800ff82:	4608      	mov	r0, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	602a      	str	r2, [r5, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7f3 feac 	bl	8003ce8 <_lseek>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_lseek_r+0x1e>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_lseek_r+0x1e>
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	20005a70 	.word	0x20005a70

0800ffa0 <__swhatbuf_r>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	460e      	mov	r6, r1
 800ffa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffa8:	2900      	cmp	r1, #0
 800ffaa:	b096      	sub	sp, #88	; 0x58
 800ffac:	4614      	mov	r4, r2
 800ffae:	461d      	mov	r5, r3
 800ffb0:	da08      	bge.n	800ffc4 <__swhatbuf_r+0x24>
 800ffb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	602a      	str	r2, [r5, #0]
 800ffba:	061a      	lsls	r2, r3, #24
 800ffbc:	d410      	bmi.n	800ffe0 <__swhatbuf_r+0x40>
 800ffbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffc2:	e00e      	b.n	800ffe2 <__swhatbuf_r+0x42>
 800ffc4:	466a      	mov	r2, sp
 800ffc6:	f000 fe11 	bl	8010bec <_fstat_r>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	dbf1      	blt.n	800ffb2 <__swhatbuf_r+0x12>
 800ffce:	9a01      	ldr	r2, [sp, #4]
 800ffd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffd8:	425a      	negs	r2, r3
 800ffda:	415a      	adcs	r2, r3
 800ffdc:	602a      	str	r2, [r5, #0]
 800ffde:	e7ee      	b.n	800ffbe <__swhatbuf_r+0x1e>
 800ffe0:	2340      	movs	r3, #64	; 0x40
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	b016      	add	sp, #88	; 0x58
 800ffe8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffec <__smakebuf_r>:
 800ffec:	898b      	ldrh	r3, [r1, #12]
 800ffee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fff0:	079d      	lsls	r5, r3, #30
 800fff2:	4606      	mov	r6, r0
 800fff4:	460c      	mov	r4, r1
 800fff6:	d507      	bpl.n	8010008 <__smakebuf_r+0x1c>
 800fff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	6123      	str	r3, [r4, #16]
 8010000:	2301      	movs	r3, #1
 8010002:	6163      	str	r3, [r4, #20]
 8010004:	b002      	add	sp, #8
 8010006:	bd70      	pop	{r4, r5, r6, pc}
 8010008:	ab01      	add	r3, sp, #4
 801000a:	466a      	mov	r2, sp
 801000c:	f7ff ffc8 	bl	800ffa0 <__swhatbuf_r>
 8010010:	9900      	ldr	r1, [sp, #0]
 8010012:	4605      	mov	r5, r0
 8010014:	4630      	mov	r0, r6
 8010016:	f7fd ffcf 	bl	800dfb8 <_malloc_r>
 801001a:	b948      	cbnz	r0, 8010030 <__smakebuf_r+0x44>
 801001c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010020:	059a      	lsls	r2, r3, #22
 8010022:	d4ef      	bmi.n	8010004 <__smakebuf_r+0x18>
 8010024:	f023 0303 	bic.w	r3, r3, #3
 8010028:	f043 0302 	orr.w	r3, r3, #2
 801002c:	81a3      	strh	r3, [r4, #12]
 801002e:	e7e3      	b.n	800fff8 <__smakebuf_r+0xc>
 8010030:	4b0d      	ldr	r3, [pc, #52]	; (8010068 <__smakebuf_r+0x7c>)
 8010032:	62b3      	str	r3, [r6, #40]	; 0x28
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	6020      	str	r0, [r4, #0]
 8010038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801003c:	81a3      	strh	r3, [r4, #12]
 801003e:	9b00      	ldr	r3, [sp, #0]
 8010040:	6163      	str	r3, [r4, #20]
 8010042:	9b01      	ldr	r3, [sp, #4]
 8010044:	6120      	str	r0, [r4, #16]
 8010046:	b15b      	cbz	r3, 8010060 <__smakebuf_r+0x74>
 8010048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801004c:	4630      	mov	r0, r6
 801004e:	f000 fddf 	bl	8010c10 <_isatty_r>
 8010052:	b128      	cbz	r0, 8010060 <__smakebuf_r+0x74>
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	f023 0303 	bic.w	r3, r3, #3
 801005a:	f043 0301 	orr.w	r3, r3, #1
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	89a0      	ldrh	r0, [r4, #12]
 8010062:	4305      	orrs	r5, r0
 8010064:	81a5      	strh	r5, [r4, #12]
 8010066:	e7cd      	b.n	8010004 <__smakebuf_r+0x18>
 8010068:	0800fdc9 	.word	0x0800fdc9

0801006c <__ascii_mbtowc>:
 801006c:	b082      	sub	sp, #8
 801006e:	b901      	cbnz	r1, 8010072 <__ascii_mbtowc+0x6>
 8010070:	a901      	add	r1, sp, #4
 8010072:	b142      	cbz	r2, 8010086 <__ascii_mbtowc+0x1a>
 8010074:	b14b      	cbz	r3, 801008a <__ascii_mbtowc+0x1e>
 8010076:	7813      	ldrb	r3, [r2, #0]
 8010078:	600b      	str	r3, [r1, #0]
 801007a:	7812      	ldrb	r2, [r2, #0]
 801007c:	1e10      	subs	r0, r2, #0
 801007e:	bf18      	it	ne
 8010080:	2001      	movne	r0, #1
 8010082:	b002      	add	sp, #8
 8010084:	4770      	bx	lr
 8010086:	4610      	mov	r0, r2
 8010088:	e7fb      	b.n	8010082 <__ascii_mbtowc+0x16>
 801008a:	f06f 0001 	mvn.w	r0, #1
 801008e:	e7f8      	b.n	8010082 <__ascii_mbtowc+0x16>

08010090 <memmove>:
 8010090:	4288      	cmp	r0, r1
 8010092:	b510      	push	{r4, lr}
 8010094:	eb01 0402 	add.w	r4, r1, r2
 8010098:	d902      	bls.n	80100a0 <memmove+0x10>
 801009a:	4284      	cmp	r4, r0
 801009c:	4623      	mov	r3, r4
 801009e:	d807      	bhi.n	80100b0 <memmove+0x20>
 80100a0:	1e43      	subs	r3, r0, #1
 80100a2:	42a1      	cmp	r1, r4
 80100a4:	d008      	beq.n	80100b8 <memmove+0x28>
 80100a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100ae:	e7f8      	b.n	80100a2 <memmove+0x12>
 80100b0:	4402      	add	r2, r0
 80100b2:	4601      	mov	r1, r0
 80100b4:	428a      	cmp	r2, r1
 80100b6:	d100      	bne.n	80100ba <memmove+0x2a>
 80100b8:	bd10      	pop	{r4, pc}
 80100ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100c2:	e7f7      	b.n	80100b4 <memmove+0x24>

080100c4 <__malloc_lock>:
 80100c4:	4801      	ldr	r0, [pc, #4]	; (80100cc <__malloc_lock+0x8>)
 80100c6:	f7ff bf56 	b.w	800ff76 <__retarget_lock_acquire_recursive>
 80100ca:	bf00      	nop
 80100cc:	20005a6c 	.word	0x20005a6c

080100d0 <__malloc_unlock>:
 80100d0:	4801      	ldr	r0, [pc, #4]	; (80100d8 <__malloc_unlock+0x8>)
 80100d2:	f7ff bf51 	b.w	800ff78 <__retarget_lock_release_recursive>
 80100d6:	bf00      	nop
 80100d8:	20005a6c 	.word	0x20005a6c

080100dc <_Balloc>:
 80100dc:	b570      	push	{r4, r5, r6, lr}
 80100de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	b976      	cbnz	r6, 8010104 <_Balloc+0x28>
 80100e6:	2010      	movs	r0, #16
 80100e8:	f7fd fed4 	bl	800de94 <malloc>
 80100ec:	4602      	mov	r2, r0
 80100ee:	6260      	str	r0, [r4, #36]	; 0x24
 80100f0:	b920      	cbnz	r0, 80100fc <_Balloc+0x20>
 80100f2:	4b18      	ldr	r3, [pc, #96]	; (8010154 <_Balloc+0x78>)
 80100f4:	4818      	ldr	r0, [pc, #96]	; (8010158 <_Balloc+0x7c>)
 80100f6:	2166      	movs	r1, #102	; 0x66
 80100f8:	f7fd fe72 	bl	800dde0 <__assert_func>
 80100fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010100:	6006      	str	r6, [r0, #0]
 8010102:	60c6      	str	r6, [r0, #12]
 8010104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010106:	68f3      	ldr	r3, [r6, #12]
 8010108:	b183      	cbz	r3, 801012c <_Balloc+0x50>
 801010a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010112:	b9b8      	cbnz	r0, 8010144 <_Balloc+0x68>
 8010114:	2101      	movs	r1, #1
 8010116:	fa01 f605 	lsl.w	r6, r1, r5
 801011a:	1d72      	adds	r2, r6, #5
 801011c:	0092      	lsls	r2, r2, #2
 801011e:	4620      	mov	r0, r4
 8010120:	f000 fb60 	bl	80107e4 <_calloc_r>
 8010124:	b160      	cbz	r0, 8010140 <_Balloc+0x64>
 8010126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801012a:	e00e      	b.n	801014a <_Balloc+0x6e>
 801012c:	2221      	movs	r2, #33	; 0x21
 801012e:	2104      	movs	r1, #4
 8010130:	4620      	mov	r0, r4
 8010132:	f000 fb57 	bl	80107e4 <_calloc_r>
 8010136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010138:	60f0      	str	r0, [r6, #12]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d1e4      	bne.n	801010a <_Balloc+0x2e>
 8010140:	2000      	movs	r0, #0
 8010142:	bd70      	pop	{r4, r5, r6, pc}
 8010144:	6802      	ldr	r2, [r0, #0]
 8010146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801014a:	2300      	movs	r3, #0
 801014c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010150:	e7f7      	b.n	8010142 <_Balloc+0x66>
 8010152:	bf00      	nop
 8010154:	0801d4f3 	.word	0x0801d4f3
 8010158:	0801d5e2 	.word	0x0801d5e2

0801015c <_Bfree>:
 801015c:	b570      	push	{r4, r5, r6, lr}
 801015e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010160:	4605      	mov	r5, r0
 8010162:	460c      	mov	r4, r1
 8010164:	b976      	cbnz	r6, 8010184 <_Bfree+0x28>
 8010166:	2010      	movs	r0, #16
 8010168:	f7fd fe94 	bl	800de94 <malloc>
 801016c:	4602      	mov	r2, r0
 801016e:	6268      	str	r0, [r5, #36]	; 0x24
 8010170:	b920      	cbnz	r0, 801017c <_Bfree+0x20>
 8010172:	4b09      	ldr	r3, [pc, #36]	; (8010198 <_Bfree+0x3c>)
 8010174:	4809      	ldr	r0, [pc, #36]	; (801019c <_Bfree+0x40>)
 8010176:	218a      	movs	r1, #138	; 0x8a
 8010178:	f7fd fe32 	bl	800dde0 <__assert_func>
 801017c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010180:	6006      	str	r6, [r0, #0]
 8010182:	60c6      	str	r6, [r0, #12]
 8010184:	b13c      	cbz	r4, 8010196 <_Bfree+0x3a>
 8010186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010188:	6862      	ldr	r2, [r4, #4]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010190:	6021      	str	r1, [r4, #0]
 8010192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	0801d4f3 	.word	0x0801d4f3
 801019c:	0801d5e2 	.word	0x0801d5e2

080101a0 <__multadd>:
 80101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a4:	690d      	ldr	r5, [r1, #16]
 80101a6:	4607      	mov	r7, r0
 80101a8:	460c      	mov	r4, r1
 80101aa:	461e      	mov	r6, r3
 80101ac:	f101 0c14 	add.w	ip, r1, #20
 80101b0:	2000      	movs	r0, #0
 80101b2:	f8dc 3000 	ldr.w	r3, [ip]
 80101b6:	b299      	uxth	r1, r3
 80101b8:	fb02 6101 	mla	r1, r2, r1, r6
 80101bc:	0c1e      	lsrs	r6, r3, #16
 80101be:	0c0b      	lsrs	r3, r1, #16
 80101c0:	fb02 3306 	mla	r3, r2, r6, r3
 80101c4:	b289      	uxth	r1, r1
 80101c6:	3001      	adds	r0, #1
 80101c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80101cc:	4285      	cmp	r5, r0
 80101ce:	f84c 1b04 	str.w	r1, [ip], #4
 80101d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80101d6:	dcec      	bgt.n	80101b2 <__multadd+0x12>
 80101d8:	b30e      	cbz	r6, 801021e <__multadd+0x7e>
 80101da:	68a3      	ldr	r3, [r4, #8]
 80101dc:	42ab      	cmp	r3, r5
 80101de:	dc19      	bgt.n	8010214 <__multadd+0x74>
 80101e0:	6861      	ldr	r1, [r4, #4]
 80101e2:	4638      	mov	r0, r7
 80101e4:	3101      	adds	r1, #1
 80101e6:	f7ff ff79 	bl	80100dc <_Balloc>
 80101ea:	4680      	mov	r8, r0
 80101ec:	b928      	cbnz	r0, 80101fa <__multadd+0x5a>
 80101ee:	4602      	mov	r2, r0
 80101f0:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <__multadd+0x84>)
 80101f2:	480d      	ldr	r0, [pc, #52]	; (8010228 <__multadd+0x88>)
 80101f4:	21b5      	movs	r1, #181	; 0xb5
 80101f6:	f7fd fdf3 	bl	800dde0 <__assert_func>
 80101fa:	6922      	ldr	r2, [r4, #16]
 80101fc:	3202      	adds	r2, #2
 80101fe:	f104 010c 	add.w	r1, r4, #12
 8010202:	0092      	lsls	r2, r2, #2
 8010204:	300c      	adds	r0, #12
 8010206:	f7fd fe55 	bl	800deb4 <memcpy>
 801020a:	4621      	mov	r1, r4
 801020c:	4638      	mov	r0, r7
 801020e:	f7ff ffa5 	bl	801015c <_Bfree>
 8010212:	4644      	mov	r4, r8
 8010214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010218:	3501      	adds	r5, #1
 801021a:	615e      	str	r6, [r3, #20]
 801021c:	6125      	str	r5, [r4, #16]
 801021e:	4620      	mov	r0, r4
 8010220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010224:	0801d565 	.word	0x0801d565
 8010228:	0801d5e2 	.word	0x0801d5e2

0801022c <__hi0bits>:
 801022c:	0c03      	lsrs	r3, r0, #16
 801022e:	041b      	lsls	r3, r3, #16
 8010230:	b9d3      	cbnz	r3, 8010268 <__hi0bits+0x3c>
 8010232:	0400      	lsls	r0, r0, #16
 8010234:	2310      	movs	r3, #16
 8010236:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801023a:	bf04      	itt	eq
 801023c:	0200      	lsleq	r0, r0, #8
 801023e:	3308      	addeq	r3, #8
 8010240:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010244:	bf04      	itt	eq
 8010246:	0100      	lsleq	r0, r0, #4
 8010248:	3304      	addeq	r3, #4
 801024a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801024e:	bf04      	itt	eq
 8010250:	0080      	lsleq	r0, r0, #2
 8010252:	3302      	addeq	r3, #2
 8010254:	2800      	cmp	r0, #0
 8010256:	db05      	blt.n	8010264 <__hi0bits+0x38>
 8010258:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801025c:	f103 0301 	add.w	r3, r3, #1
 8010260:	bf08      	it	eq
 8010262:	2320      	moveq	r3, #32
 8010264:	4618      	mov	r0, r3
 8010266:	4770      	bx	lr
 8010268:	2300      	movs	r3, #0
 801026a:	e7e4      	b.n	8010236 <__hi0bits+0xa>

0801026c <__lo0bits>:
 801026c:	6803      	ldr	r3, [r0, #0]
 801026e:	f013 0207 	ands.w	r2, r3, #7
 8010272:	4601      	mov	r1, r0
 8010274:	d00b      	beq.n	801028e <__lo0bits+0x22>
 8010276:	07da      	lsls	r2, r3, #31
 8010278:	d423      	bmi.n	80102c2 <__lo0bits+0x56>
 801027a:	0798      	lsls	r0, r3, #30
 801027c:	bf49      	itett	mi
 801027e:	085b      	lsrmi	r3, r3, #1
 8010280:	089b      	lsrpl	r3, r3, #2
 8010282:	2001      	movmi	r0, #1
 8010284:	600b      	strmi	r3, [r1, #0]
 8010286:	bf5c      	itt	pl
 8010288:	600b      	strpl	r3, [r1, #0]
 801028a:	2002      	movpl	r0, #2
 801028c:	4770      	bx	lr
 801028e:	b298      	uxth	r0, r3
 8010290:	b9a8      	cbnz	r0, 80102be <__lo0bits+0x52>
 8010292:	0c1b      	lsrs	r3, r3, #16
 8010294:	2010      	movs	r0, #16
 8010296:	b2da      	uxtb	r2, r3
 8010298:	b90a      	cbnz	r2, 801029e <__lo0bits+0x32>
 801029a:	3008      	adds	r0, #8
 801029c:	0a1b      	lsrs	r3, r3, #8
 801029e:	071a      	lsls	r2, r3, #28
 80102a0:	bf04      	itt	eq
 80102a2:	091b      	lsreq	r3, r3, #4
 80102a4:	3004      	addeq	r0, #4
 80102a6:	079a      	lsls	r2, r3, #30
 80102a8:	bf04      	itt	eq
 80102aa:	089b      	lsreq	r3, r3, #2
 80102ac:	3002      	addeq	r0, #2
 80102ae:	07da      	lsls	r2, r3, #31
 80102b0:	d403      	bmi.n	80102ba <__lo0bits+0x4e>
 80102b2:	085b      	lsrs	r3, r3, #1
 80102b4:	f100 0001 	add.w	r0, r0, #1
 80102b8:	d005      	beq.n	80102c6 <__lo0bits+0x5a>
 80102ba:	600b      	str	r3, [r1, #0]
 80102bc:	4770      	bx	lr
 80102be:	4610      	mov	r0, r2
 80102c0:	e7e9      	b.n	8010296 <__lo0bits+0x2a>
 80102c2:	2000      	movs	r0, #0
 80102c4:	4770      	bx	lr
 80102c6:	2020      	movs	r0, #32
 80102c8:	4770      	bx	lr
	...

080102cc <__i2b>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	460c      	mov	r4, r1
 80102d0:	2101      	movs	r1, #1
 80102d2:	f7ff ff03 	bl	80100dc <_Balloc>
 80102d6:	4602      	mov	r2, r0
 80102d8:	b928      	cbnz	r0, 80102e6 <__i2b+0x1a>
 80102da:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <__i2b+0x24>)
 80102dc:	4805      	ldr	r0, [pc, #20]	; (80102f4 <__i2b+0x28>)
 80102de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80102e2:	f7fd fd7d 	bl	800dde0 <__assert_func>
 80102e6:	2301      	movs	r3, #1
 80102e8:	6144      	str	r4, [r0, #20]
 80102ea:	6103      	str	r3, [r0, #16]
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop
 80102f0:	0801d565 	.word	0x0801d565
 80102f4:	0801d5e2 	.word	0x0801d5e2

080102f8 <__multiply>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	4691      	mov	r9, r2
 80102fe:	690a      	ldr	r2, [r1, #16]
 8010300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010304:	429a      	cmp	r2, r3
 8010306:	bfb8      	it	lt
 8010308:	460b      	movlt	r3, r1
 801030a:	460c      	mov	r4, r1
 801030c:	bfbc      	itt	lt
 801030e:	464c      	movlt	r4, r9
 8010310:	4699      	movlt	r9, r3
 8010312:	6927      	ldr	r7, [r4, #16]
 8010314:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010318:	68a3      	ldr	r3, [r4, #8]
 801031a:	6861      	ldr	r1, [r4, #4]
 801031c:	eb07 060a 	add.w	r6, r7, sl
 8010320:	42b3      	cmp	r3, r6
 8010322:	b085      	sub	sp, #20
 8010324:	bfb8      	it	lt
 8010326:	3101      	addlt	r1, #1
 8010328:	f7ff fed8 	bl	80100dc <_Balloc>
 801032c:	b930      	cbnz	r0, 801033c <__multiply+0x44>
 801032e:	4602      	mov	r2, r0
 8010330:	4b44      	ldr	r3, [pc, #272]	; (8010444 <__multiply+0x14c>)
 8010332:	4845      	ldr	r0, [pc, #276]	; (8010448 <__multiply+0x150>)
 8010334:	f240 115d 	movw	r1, #349	; 0x15d
 8010338:	f7fd fd52 	bl	800dde0 <__assert_func>
 801033c:	f100 0514 	add.w	r5, r0, #20
 8010340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010344:	462b      	mov	r3, r5
 8010346:	2200      	movs	r2, #0
 8010348:	4543      	cmp	r3, r8
 801034a:	d321      	bcc.n	8010390 <__multiply+0x98>
 801034c:	f104 0314 	add.w	r3, r4, #20
 8010350:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010354:	f109 0314 	add.w	r3, r9, #20
 8010358:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801035c:	9202      	str	r2, [sp, #8]
 801035e:	1b3a      	subs	r2, r7, r4
 8010360:	3a15      	subs	r2, #21
 8010362:	f022 0203 	bic.w	r2, r2, #3
 8010366:	3204      	adds	r2, #4
 8010368:	f104 0115 	add.w	r1, r4, #21
 801036c:	428f      	cmp	r7, r1
 801036e:	bf38      	it	cc
 8010370:	2204      	movcc	r2, #4
 8010372:	9201      	str	r2, [sp, #4]
 8010374:	9a02      	ldr	r2, [sp, #8]
 8010376:	9303      	str	r3, [sp, #12]
 8010378:	429a      	cmp	r2, r3
 801037a:	d80c      	bhi.n	8010396 <__multiply+0x9e>
 801037c:	2e00      	cmp	r6, #0
 801037e:	dd03      	ble.n	8010388 <__multiply+0x90>
 8010380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010384:	2b00      	cmp	r3, #0
 8010386:	d05a      	beq.n	801043e <__multiply+0x146>
 8010388:	6106      	str	r6, [r0, #16]
 801038a:	b005      	add	sp, #20
 801038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010390:	f843 2b04 	str.w	r2, [r3], #4
 8010394:	e7d8      	b.n	8010348 <__multiply+0x50>
 8010396:	f8b3 a000 	ldrh.w	sl, [r3]
 801039a:	f1ba 0f00 	cmp.w	sl, #0
 801039e:	d024      	beq.n	80103ea <__multiply+0xf2>
 80103a0:	f104 0e14 	add.w	lr, r4, #20
 80103a4:	46a9      	mov	r9, r5
 80103a6:	f04f 0c00 	mov.w	ip, #0
 80103aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80103ae:	f8d9 1000 	ldr.w	r1, [r9]
 80103b2:	fa1f fb82 	uxth.w	fp, r2
 80103b6:	b289      	uxth	r1, r1
 80103b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80103bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80103c0:	f8d9 2000 	ldr.w	r2, [r9]
 80103c4:	4461      	add	r1, ip
 80103c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80103ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80103d2:	b289      	uxth	r1, r1
 80103d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80103d8:	4577      	cmp	r7, lr
 80103da:	f849 1b04 	str.w	r1, [r9], #4
 80103de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103e2:	d8e2      	bhi.n	80103aa <__multiply+0xb2>
 80103e4:	9a01      	ldr	r2, [sp, #4]
 80103e6:	f845 c002 	str.w	ip, [r5, r2]
 80103ea:	9a03      	ldr	r2, [sp, #12]
 80103ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80103f0:	3304      	adds	r3, #4
 80103f2:	f1b9 0f00 	cmp.w	r9, #0
 80103f6:	d020      	beq.n	801043a <__multiply+0x142>
 80103f8:	6829      	ldr	r1, [r5, #0]
 80103fa:	f104 0c14 	add.w	ip, r4, #20
 80103fe:	46ae      	mov	lr, r5
 8010400:	f04f 0a00 	mov.w	sl, #0
 8010404:	f8bc b000 	ldrh.w	fp, [ip]
 8010408:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801040c:	fb09 220b 	mla	r2, r9, fp, r2
 8010410:	4492      	add	sl, r2
 8010412:	b289      	uxth	r1, r1
 8010414:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010418:	f84e 1b04 	str.w	r1, [lr], #4
 801041c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010420:	f8be 1000 	ldrh.w	r1, [lr]
 8010424:	0c12      	lsrs	r2, r2, #16
 8010426:	fb09 1102 	mla	r1, r9, r2, r1
 801042a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801042e:	4567      	cmp	r7, ip
 8010430:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010434:	d8e6      	bhi.n	8010404 <__multiply+0x10c>
 8010436:	9a01      	ldr	r2, [sp, #4]
 8010438:	50a9      	str	r1, [r5, r2]
 801043a:	3504      	adds	r5, #4
 801043c:	e79a      	b.n	8010374 <__multiply+0x7c>
 801043e:	3e01      	subs	r6, #1
 8010440:	e79c      	b.n	801037c <__multiply+0x84>
 8010442:	bf00      	nop
 8010444:	0801d565 	.word	0x0801d565
 8010448:	0801d5e2 	.word	0x0801d5e2

0801044c <__pow5mult>:
 801044c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010450:	4615      	mov	r5, r2
 8010452:	f012 0203 	ands.w	r2, r2, #3
 8010456:	4606      	mov	r6, r0
 8010458:	460f      	mov	r7, r1
 801045a:	d007      	beq.n	801046c <__pow5mult+0x20>
 801045c:	4c25      	ldr	r4, [pc, #148]	; (80104f4 <__pow5mult+0xa8>)
 801045e:	3a01      	subs	r2, #1
 8010460:	2300      	movs	r3, #0
 8010462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010466:	f7ff fe9b 	bl	80101a0 <__multadd>
 801046a:	4607      	mov	r7, r0
 801046c:	10ad      	asrs	r5, r5, #2
 801046e:	d03d      	beq.n	80104ec <__pow5mult+0xa0>
 8010470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010472:	b97c      	cbnz	r4, 8010494 <__pow5mult+0x48>
 8010474:	2010      	movs	r0, #16
 8010476:	f7fd fd0d 	bl	800de94 <malloc>
 801047a:	4602      	mov	r2, r0
 801047c:	6270      	str	r0, [r6, #36]	; 0x24
 801047e:	b928      	cbnz	r0, 801048c <__pow5mult+0x40>
 8010480:	4b1d      	ldr	r3, [pc, #116]	; (80104f8 <__pow5mult+0xac>)
 8010482:	481e      	ldr	r0, [pc, #120]	; (80104fc <__pow5mult+0xb0>)
 8010484:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010488:	f7fd fcaa 	bl	800dde0 <__assert_func>
 801048c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010490:	6004      	str	r4, [r0, #0]
 8010492:	60c4      	str	r4, [r0, #12]
 8010494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801049c:	b94c      	cbnz	r4, 80104b2 <__pow5mult+0x66>
 801049e:	f240 2171 	movw	r1, #625	; 0x271
 80104a2:	4630      	mov	r0, r6
 80104a4:	f7ff ff12 	bl	80102cc <__i2b>
 80104a8:	2300      	movs	r3, #0
 80104aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80104ae:	4604      	mov	r4, r0
 80104b0:	6003      	str	r3, [r0, #0]
 80104b2:	f04f 0900 	mov.w	r9, #0
 80104b6:	07eb      	lsls	r3, r5, #31
 80104b8:	d50a      	bpl.n	80104d0 <__pow5mult+0x84>
 80104ba:	4639      	mov	r1, r7
 80104bc:	4622      	mov	r2, r4
 80104be:	4630      	mov	r0, r6
 80104c0:	f7ff ff1a 	bl	80102f8 <__multiply>
 80104c4:	4639      	mov	r1, r7
 80104c6:	4680      	mov	r8, r0
 80104c8:	4630      	mov	r0, r6
 80104ca:	f7ff fe47 	bl	801015c <_Bfree>
 80104ce:	4647      	mov	r7, r8
 80104d0:	106d      	asrs	r5, r5, #1
 80104d2:	d00b      	beq.n	80104ec <__pow5mult+0xa0>
 80104d4:	6820      	ldr	r0, [r4, #0]
 80104d6:	b938      	cbnz	r0, 80104e8 <__pow5mult+0x9c>
 80104d8:	4622      	mov	r2, r4
 80104da:	4621      	mov	r1, r4
 80104dc:	4630      	mov	r0, r6
 80104de:	f7ff ff0b 	bl	80102f8 <__multiply>
 80104e2:	6020      	str	r0, [r4, #0]
 80104e4:	f8c0 9000 	str.w	r9, [r0]
 80104e8:	4604      	mov	r4, r0
 80104ea:	e7e4      	b.n	80104b6 <__pow5mult+0x6a>
 80104ec:	4638      	mov	r0, r7
 80104ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104f2:	bf00      	nop
 80104f4:	0801d730 	.word	0x0801d730
 80104f8:	0801d4f3 	.word	0x0801d4f3
 80104fc:	0801d5e2 	.word	0x0801d5e2

08010500 <__lshift>:
 8010500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010504:	460c      	mov	r4, r1
 8010506:	6849      	ldr	r1, [r1, #4]
 8010508:	6923      	ldr	r3, [r4, #16]
 801050a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801050e:	68a3      	ldr	r3, [r4, #8]
 8010510:	4607      	mov	r7, r0
 8010512:	4691      	mov	r9, r2
 8010514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010518:	f108 0601 	add.w	r6, r8, #1
 801051c:	42b3      	cmp	r3, r6
 801051e:	db0b      	blt.n	8010538 <__lshift+0x38>
 8010520:	4638      	mov	r0, r7
 8010522:	f7ff fddb 	bl	80100dc <_Balloc>
 8010526:	4605      	mov	r5, r0
 8010528:	b948      	cbnz	r0, 801053e <__lshift+0x3e>
 801052a:	4602      	mov	r2, r0
 801052c:	4b2a      	ldr	r3, [pc, #168]	; (80105d8 <__lshift+0xd8>)
 801052e:	482b      	ldr	r0, [pc, #172]	; (80105dc <__lshift+0xdc>)
 8010530:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010534:	f7fd fc54 	bl	800dde0 <__assert_func>
 8010538:	3101      	adds	r1, #1
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	e7ee      	b.n	801051c <__lshift+0x1c>
 801053e:	2300      	movs	r3, #0
 8010540:	f100 0114 	add.w	r1, r0, #20
 8010544:	f100 0210 	add.w	r2, r0, #16
 8010548:	4618      	mov	r0, r3
 801054a:	4553      	cmp	r3, sl
 801054c:	db37      	blt.n	80105be <__lshift+0xbe>
 801054e:	6920      	ldr	r0, [r4, #16]
 8010550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010554:	f104 0314 	add.w	r3, r4, #20
 8010558:	f019 091f 	ands.w	r9, r9, #31
 801055c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010560:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010564:	d02f      	beq.n	80105c6 <__lshift+0xc6>
 8010566:	f1c9 0e20 	rsb	lr, r9, #32
 801056a:	468a      	mov	sl, r1
 801056c:	f04f 0c00 	mov.w	ip, #0
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	fa02 f209 	lsl.w	r2, r2, r9
 8010576:	ea42 020c 	orr.w	r2, r2, ip
 801057a:	f84a 2b04 	str.w	r2, [sl], #4
 801057e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010582:	4298      	cmp	r0, r3
 8010584:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010588:	d8f2      	bhi.n	8010570 <__lshift+0x70>
 801058a:	1b03      	subs	r3, r0, r4
 801058c:	3b15      	subs	r3, #21
 801058e:	f023 0303 	bic.w	r3, r3, #3
 8010592:	3304      	adds	r3, #4
 8010594:	f104 0215 	add.w	r2, r4, #21
 8010598:	4290      	cmp	r0, r2
 801059a:	bf38      	it	cc
 801059c:	2304      	movcc	r3, #4
 801059e:	f841 c003 	str.w	ip, [r1, r3]
 80105a2:	f1bc 0f00 	cmp.w	ip, #0
 80105a6:	d001      	beq.n	80105ac <__lshift+0xac>
 80105a8:	f108 0602 	add.w	r6, r8, #2
 80105ac:	3e01      	subs	r6, #1
 80105ae:	4638      	mov	r0, r7
 80105b0:	612e      	str	r6, [r5, #16]
 80105b2:	4621      	mov	r1, r4
 80105b4:	f7ff fdd2 	bl	801015c <_Bfree>
 80105b8:	4628      	mov	r0, r5
 80105ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105be:	f842 0f04 	str.w	r0, [r2, #4]!
 80105c2:	3301      	adds	r3, #1
 80105c4:	e7c1      	b.n	801054a <__lshift+0x4a>
 80105c6:	3904      	subs	r1, #4
 80105c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80105cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80105d0:	4298      	cmp	r0, r3
 80105d2:	d8f9      	bhi.n	80105c8 <__lshift+0xc8>
 80105d4:	e7ea      	b.n	80105ac <__lshift+0xac>
 80105d6:	bf00      	nop
 80105d8:	0801d565 	.word	0x0801d565
 80105dc:	0801d5e2 	.word	0x0801d5e2

080105e0 <__mcmp>:
 80105e0:	b530      	push	{r4, r5, lr}
 80105e2:	6902      	ldr	r2, [r0, #16]
 80105e4:	690c      	ldr	r4, [r1, #16]
 80105e6:	1b12      	subs	r2, r2, r4
 80105e8:	d10e      	bne.n	8010608 <__mcmp+0x28>
 80105ea:	f100 0314 	add.w	r3, r0, #20
 80105ee:	3114      	adds	r1, #20
 80105f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80105f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80105f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80105fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010600:	42a5      	cmp	r5, r4
 8010602:	d003      	beq.n	801060c <__mcmp+0x2c>
 8010604:	d305      	bcc.n	8010612 <__mcmp+0x32>
 8010606:	2201      	movs	r2, #1
 8010608:	4610      	mov	r0, r2
 801060a:	bd30      	pop	{r4, r5, pc}
 801060c:	4283      	cmp	r3, r0
 801060e:	d3f3      	bcc.n	80105f8 <__mcmp+0x18>
 8010610:	e7fa      	b.n	8010608 <__mcmp+0x28>
 8010612:	f04f 32ff 	mov.w	r2, #4294967295
 8010616:	e7f7      	b.n	8010608 <__mcmp+0x28>

08010618 <__mdiff>:
 8010618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	460c      	mov	r4, r1
 801061e:	4606      	mov	r6, r0
 8010620:	4611      	mov	r1, r2
 8010622:	4620      	mov	r0, r4
 8010624:	4690      	mov	r8, r2
 8010626:	f7ff ffdb 	bl	80105e0 <__mcmp>
 801062a:	1e05      	subs	r5, r0, #0
 801062c:	d110      	bne.n	8010650 <__mdiff+0x38>
 801062e:	4629      	mov	r1, r5
 8010630:	4630      	mov	r0, r6
 8010632:	f7ff fd53 	bl	80100dc <_Balloc>
 8010636:	b930      	cbnz	r0, 8010646 <__mdiff+0x2e>
 8010638:	4b3a      	ldr	r3, [pc, #232]	; (8010724 <__mdiff+0x10c>)
 801063a:	4602      	mov	r2, r0
 801063c:	f240 2132 	movw	r1, #562	; 0x232
 8010640:	4839      	ldr	r0, [pc, #228]	; (8010728 <__mdiff+0x110>)
 8010642:	f7fd fbcd 	bl	800dde0 <__assert_func>
 8010646:	2301      	movs	r3, #1
 8010648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801064c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010650:	bfa4      	itt	ge
 8010652:	4643      	movge	r3, r8
 8010654:	46a0      	movge	r8, r4
 8010656:	4630      	mov	r0, r6
 8010658:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801065c:	bfa6      	itte	ge
 801065e:	461c      	movge	r4, r3
 8010660:	2500      	movge	r5, #0
 8010662:	2501      	movlt	r5, #1
 8010664:	f7ff fd3a 	bl	80100dc <_Balloc>
 8010668:	b920      	cbnz	r0, 8010674 <__mdiff+0x5c>
 801066a:	4b2e      	ldr	r3, [pc, #184]	; (8010724 <__mdiff+0x10c>)
 801066c:	4602      	mov	r2, r0
 801066e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010672:	e7e5      	b.n	8010640 <__mdiff+0x28>
 8010674:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010678:	6926      	ldr	r6, [r4, #16]
 801067a:	60c5      	str	r5, [r0, #12]
 801067c:	f104 0914 	add.w	r9, r4, #20
 8010680:	f108 0514 	add.w	r5, r8, #20
 8010684:	f100 0e14 	add.w	lr, r0, #20
 8010688:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801068c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010690:	f108 0210 	add.w	r2, r8, #16
 8010694:	46f2      	mov	sl, lr
 8010696:	2100      	movs	r1, #0
 8010698:	f859 3b04 	ldr.w	r3, [r9], #4
 801069c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106a0:	fa1f f883 	uxth.w	r8, r3
 80106a4:	fa11 f18b 	uxtah	r1, r1, fp
 80106a8:	0c1b      	lsrs	r3, r3, #16
 80106aa:	eba1 0808 	sub.w	r8, r1, r8
 80106ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106b6:	fa1f f888 	uxth.w	r8, r8
 80106ba:	1419      	asrs	r1, r3, #16
 80106bc:	454e      	cmp	r6, r9
 80106be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80106c2:	f84a 3b04 	str.w	r3, [sl], #4
 80106c6:	d8e7      	bhi.n	8010698 <__mdiff+0x80>
 80106c8:	1b33      	subs	r3, r6, r4
 80106ca:	3b15      	subs	r3, #21
 80106cc:	f023 0303 	bic.w	r3, r3, #3
 80106d0:	3304      	adds	r3, #4
 80106d2:	3415      	adds	r4, #21
 80106d4:	42a6      	cmp	r6, r4
 80106d6:	bf38      	it	cc
 80106d8:	2304      	movcc	r3, #4
 80106da:	441d      	add	r5, r3
 80106dc:	4473      	add	r3, lr
 80106de:	469e      	mov	lr, r3
 80106e0:	462e      	mov	r6, r5
 80106e2:	4566      	cmp	r6, ip
 80106e4:	d30e      	bcc.n	8010704 <__mdiff+0xec>
 80106e6:	f10c 0203 	add.w	r2, ip, #3
 80106ea:	1b52      	subs	r2, r2, r5
 80106ec:	f022 0203 	bic.w	r2, r2, #3
 80106f0:	3d03      	subs	r5, #3
 80106f2:	45ac      	cmp	ip, r5
 80106f4:	bf38      	it	cc
 80106f6:	2200      	movcc	r2, #0
 80106f8:	441a      	add	r2, r3
 80106fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80106fe:	b17b      	cbz	r3, 8010720 <__mdiff+0x108>
 8010700:	6107      	str	r7, [r0, #16]
 8010702:	e7a3      	b.n	801064c <__mdiff+0x34>
 8010704:	f856 8b04 	ldr.w	r8, [r6], #4
 8010708:	fa11 f288 	uxtah	r2, r1, r8
 801070c:	1414      	asrs	r4, r2, #16
 801070e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010712:	b292      	uxth	r2, r2
 8010714:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010718:	f84e 2b04 	str.w	r2, [lr], #4
 801071c:	1421      	asrs	r1, r4, #16
 801071e:	e7e0      	b.n	80106e2 <__mdiff+0xca>
 8010720:	3f01      	subs	r7, #1
 8010722:	e7ea      	b.n	80106fa <__mdiff+0xe2>
 8010724:	0801d565 	.word	0x0801d565
 8010728:	0801d5e2 	.word	0x0801d5e2

0801072c <__d2b>:
 801072c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010730:	4689      	mov	r9, r1
 8010732:	2101      	movs	r1, #1
 8010734:	ec57 6b10 	vmov	r6, r7, d0
 8010738:	4690      	mov	r8, r2
 801073a:	f7ff fccf 	bl	80100dc <_Balloc>
 801073e:	4604      	mov	r4, r0
 8010740:	b930      	cbnz	r0, 8010750 <__d2b+0x24>
 8010742:	4602      	mov	r2, r0
 8010744:	4b25      	ldr	r3, [pc, #148]	; (80107dc <__d2b+0xb0>)
 8010746:	4826      	ldr	r0, [pc, #152]	; (80107e0 <__d2b+0xb4>)
 8010748:	f240 310a 	movw	r1, #778	; 0x30a
 801074c:	f7fd fb48 	bl	800dde0 <__assert_func>
 8010750:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010754:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010758:	bb35      	cbnz	r5, 80107a8 <__d2b+0x7c>
 801075a:	2e00      	cmp	r6, #0
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	d028      	beq.n	80107b2 <__d2b+0x86>
 8010760:	4668      	mov	r0, sp
 8010762:	9600      	str	r6, [sp, #0]
 8010764:	f7ff fd82 	bl	801026c <__lo0bits>
 8010768:	9900      	ldr	r1, [sp, #0]
 801076a:	b300      	cbz	r0, 80107ae <__d2b+0x82>
 801076c:	9a01      	ldr	r2, [sp, #4]
 801076e:	f1c0 0320 	rsb	r3, r0, #32
 8010772:	fa02 f303 	lsl.w	r3, r2, r3
 8010776:	430b      	orrs	r3, r1
 8010778:	40c2      	lsrs	r2, r0
 801077a:	6163      	str	r3, [r4, #20]
 801077c:	9201      	str	r2, [sp, #4]
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	61a3      	str	r3, [r4, #24]
 8010782:	2b00      	cmp	r3, #0
 8010784:	bf14      	ite	ne
 8010786:	2202      	movne	r2, #2
 8010788:	2201      	moveq	r2, #1
 801078a:	6122      	str	r2, [r4, #16]
 801078c:	b1d5      	cbz	r5, 80107c4 <__d2b+0x98>
 801078e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010792:	4405      	add	r5, r0
 8010794:	f8c9 5000 	str.w	r5, [r9]
 8010798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801079c:	f8c8 0000 	str.w	r0, [r8]
 80107a0:	4620      	mov	r0, r4
 80107a2:	b003      	add	sp, #12
 80107a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107ac:	e7d5      	b.n	801075a <__d2b+0x2e>
 80107ae:	6161      	str	r1, [r4, #20]
 80107b0:	e7e5      	b.n	801077e <__d2b+0x52>
 80107b2:	a801      	add	r0, sp, #4
 80107b4:	f7ff fd5a 	bl	801026c <__lo0bits>
 80107b8:	9b01      	ldr	r3, [sp, #4]
 80107ba:	6163      	str	r3, [r4, #20]
 80107bc:	2201      	movs	r2, #1
 80107be:	6122      	str	r2, [r4, #16]
 80107c0:	3020      	adds	r0, #32
 80107c2:	e7e3      	b.n	801078c <__d2b+0x60>
 80107c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80107cc:	f8c9 0000 	str.w	r0, [r9]
 80107d0:	6918      	ldr	r0, [r3, #16]
 80107d2:	f7ff fd2b 	bl	801022c <__hi0bits>
 80107d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107da:	e7df      	b.n	801079c <__d2b+0x70>
 80107dc:	0801d565 	.word	0x0801d565
 80107e0:	0801d5e2 	.word	0x0801d5e2

080107e4 <_calloc_r>:
 80107e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107e6:	fba1 2402 	umull	r2, r4, r1, r2
 80107ea:	b94c      	cbnz	r4, 8010800 <_calloc_r+0x1c>
 80107ec:	4611      	mov	r1, r2
 80107ee:	9201      	str	r2, [sp, #4]
 80107f0:	f7fd fbe2 	bl	800dfb8 <_malloc_r>
 80107f4:	9a01      	ldr	r2, [sp, #4]
 80107f6:	4605      	mov	r5, r0
 80107f8:	b930      	cbnz	r0, 8010808 <_calloc_r+0x24>
 80107fa:	4628      	mov	r0, r5
 80107fc:	b003      	add	sp, #12
 80107fe:	bd30      	pop	{r4, r5, pc}
 8010800:	220c      	movs	r2, #12
 8010802:	6002      	str	r2, [r0, #0]
 8010804:	2500      	movs	r5, #0
 8010806:	e7f8      	b.n	80107fa <_calloc_r+0x16>
 8010808:	4621      	mov	r1, r4
 801080a:	f7fd fb61 	bl	800ded0 <memset>
 801080e:	e7f4      	b.n	80107fa <_calloc_r+0x16>

08010810 <_realloc_r>:
 8010810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010814:	4680      	mov	r8, r0
 8010816:	4614      	mov	r4, r2
 8010818:	460e      	mov	r6, r1
 801081a:	b921      	cbnz	r1, 8010826 <_realloc_r+0x16>
 801081c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010820:	4611      	mov	r1, r2
 8010822:	f7fd bbc9 	b.w	800dfb8 <_malloc_r>
 8010826:	b92a      	cbnz	r2, 8010834 <_realloc_r+0x24>
 8010828:	f7fd fb5a 	bl	800dee0 <_free_r>
 801082c:	4625      	mov	r5, r4
 801082e:	4628      	mov	r0, r5
 8010830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010834:	f000 f9fc 	bl	8010c30 <_malloc_usable_size_r>
 8010838:	4284      	cmp	r4, r0
 801083a:	4607      	mov	r7, r0
 801083c:	d802      	bhi.n	8010844 <_realloc_r+0x34>
 801083e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010842:	d812      	bhi.n	801086a <_realloc_r+0x5a>
 8010844:	4621      	mov	r1, r4
 8010846:	4640      	mov	r0, r8
 8010848:	f7fd fbb6 	bl	800dfb8 <_malloc_r>
 801084c:	4605      	mov	r5, r0
 801084e:	2800      	cmp	r0, #0
 8010850:	d0ed      	beq.n	801082e <_realloc_r+0x1e>
 8010852:	42bc      	cmp	r4, r7
 8010854:	4622      	mov	r2, r4
 8010856:	4631      	mov	r1, r6
 8010858:	bf28      	it	cs
 801085a:	463a      	movcs	r2, r7
 801085c:	f7fd fb2a 	bl	800deb4 <memcpy>
 8010860:	4631      	mov	r1, r6
 8010862:	4640      	mov	r0, r8
 8010864:	f7fd fb3c 	bl	800dee0 <_free_r>
 8010868:	e7e1      	b.n	801082e <_realloc_r+0x1e>
 801086a:	4635      	mov	r5, r6
 801086c:	e7df      	b.n	801082e <_realloc_r+0x1e>

0801086e <__ssputs_r>:
 801086e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010872:	688e      	ldr	r6, [r1, #8]
 8010874:	429e      	cmp	r6, r3
 8010876:	4682      	mov	sl, r0
 8010878:	460c      	mov	r4, r1
 801087a:	4690      	mov	r8, r2
 801087c:	461f      	mov	r7, r3
 801087e:	d838      	bhi.n	80108f2 <__ssputs_r+0x84>
 8010880:	898a      	ldrh	r2, [r1, #12]
 8010882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010886:	d032      	beq.n	80108ee <__ssputs_r+0x80>
 8010888:	6825      	ldr	r5, [r4, #0]
 801088a:	6909      	ldr	r1, [r1, #16]
 801088c:	eba5 0901 	sub.w	r9, r5, r1
 8010890:	6965      	ldr	r5, [r4, #20]
 8010892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801089a:	3301      	adds	r3, #1
 801089c:	444b      	add	r3, r9
 801089e:	106d      	asrs	r5, r5, #1
 80108a0:	429d      	cmp	r5, r3
 80108a2:	bf38      	it	cc
 80108a4:	461d      	movcc	r5, r3
 80108a6:	0553      	lsls	r3, r2, #21
 80108a8:	d531      	bpl.n	801090e <__ssputs_r+0xa0>
 80108aa:	4629      	mov	r1, r5
 80108ac:	f7fd fb84 	bl	800dfb8 <_malloc_r>
 80108b0:	4606      	mov	r6, r0
 80108b2:	b950      	cbnz	r0, 80108ca <__ssputs_r+0x5c>
 80108b4:	230c      	movs	r3, #12
 80108b6:	f8ca 3000 	str.w	r3, [sl]
 80108ba:	89a3      	ldrh	r3, [r4, #12]
 80108bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108c0:	81a3      	strh	r3, [r4, #12]
 80108c2:	f04f 30ff 	mov.w	r0, #4294967295
 80108c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ca:	6921      	ldr	r1, [r4, #16]
 80108cc:	464a      	mov	r2, r9
 80108ce:	f7fd faf1 	bl	800deb4 <memcpy>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108dc:	81a3      	strh	r3, [r4, #12]
 80108de:	6126      	str	r6, [r4, #16]
 80108e0:	6165      	str	r5, [r4, #20]
 80108e2:	444e      	add	r6, r9
 80108e4:	eba5 0509 	sub.w	r5, r5, r9
 80108e8:	6026      	str	r6, [r4, #0]
 80108ea:	60a5      	str	r5, [r4, #8]
 80108ec:	463e      	mov	r6, r7
 80108ee:	42be      	cmp	r6, r7
 80108f0:	d900      	bls.n	80108f4 <__ssputs_r+0x86>
 80108f2:	463e      	mov	r6, r7
 80108f4:	6820      	ldr	r0, [r4, #0]
 80108f6:	4632      	mov	r2, r6
 80108f8:	4641      	mov	r1, r8
 80108fa:	f7ff fbc9 	bl	8010090 <memmove>
 80108fe:	68a3      	ldr	r3, [r4, #8]
 8010900:	1b9b      	subs	r3, r3, r6
 8010902:	60a3      	str	r3, [r4, #8]
 8010904:	6823      	ldr	r3, [r4, #0]
 8010906:	4433      	add	r3, r6
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	2000      	movs	r0, #0
 801090c:	e7db      	b.n	80108c6 <__ssputs_r+0x58>
 801090e:	462a      	mov	r2, r5
 8010910:	f7ff ff7e 	bl	8010810 <_realloc_r>
 8010914:	4606      	mov	r6, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	d1e1      	bne.n	80108de <__ssputs_r+0x70>
 801091a:	6921      	ldr	r1, [r4, #16]
 801091c:	4650      	mov	r0, sl
 801091e:	f7fd fadf 	bl	800dee0 <_free_r>
 8010922:	e7c7      	b.n	80108b4 <__ssputs_r+0x46>

08010924 <_svfiprintf_r>:
 8010924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010928:	4698      	mov	r8, r3
 801092a:	898b      	ldrh	r3, [r1, #12]
 801092c:	061b      	lsls	r3, r3, #24
 801092e:	b09d      	sub	sp, #116	; 0x74
 8010930:	4607      	mov	r7, r0
 8010932:	460d      	mov	r5, r1
 8010934:	4614      	mov	r4, r2
 8010936:	d50e      	bpl.n	8010956 <_svfiprintf_r+0x32>
 8010938:	690b      	ldr	r3, [r1, #16]
 801093a:	b963      	cbnz	r3, 8010956 <_svfiprintf_r+0x32>
 801093c:	2140      	movs	r1, #64	; 0x40
 801093e:	f7fd fb3b 	bl	800dfb8 <_malloc_r>
 8010942:	6028      	str	r0, [r5, #0]
 8010944:	6128      	str	r0, [r5, #16]
 8010946:	b920      	cbnz	r0, 8010952 <_svfiprintf_r+0x2e>
 8010948:	230c      	movs	r3, #12
 801094a:	603b      	str	r3, [r7, #0]
 801094c:	f04f 30ff 	mov.w	r0, #4294967295
 8010950:	e0d1      	b.n	8010af6 <_svfiprintf_r+0x1d2>
 8010952:	2340      	movs	r3, #64	; 0x40
 8010954:	616b      	str	r3, [r5, #20]
 8010956:	2300      	movs	r3, #0
 8010958:	9309      	str	r3, [sp, #36]	; 0x24
 801095a:	2320      	movs	r3, #32
 801095c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010960:	f8cd 800c 	str.w	r8, [sp, #12]
 8010964:	2330      	movs	r3, #48	; 0x30
 8010966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b10 <_svfiprintf_r+0x1ec>
 801096a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801096e:	f04f 0901 	mov.w	r9, #1
 8010972:	4623      	mov	r3, r4
 8010974:	469a      	mov	sl, r3
 8010976:	f813 2b01 	ldrb.w	r2, [r3], #1
 801097a:	b10a      	cbz	r2, 8010980 <_svfiprintf_r+0x5c>
 801097c:	2a25      	cmp	r2, #37	; 0x25
 801097e:	d1f9      	bne.n	8010974 <_svfiprintf_r+0x50>
 8010980:	ebba 0b04 	subs.w	fp, sl, r4
 8010984:	d00b      	beq.n	801099e <_svfiprintf_r+0x7a>
 8010986:	465b      	mov	r3, fp
 8010988:	4622      	mov	r2, r4
 801098a:	4629      	mov	r1, r5
 801098c:	4638      	mov	r0, r7
 801098e:	f7ff ff6e 	bl	801086e <__ssputs_r>
 8010992:	3001      	adds	r0, #1
 8010994:	f000 80aa 	beq.w	8010aec <_svfiprintf_r+0x1c8>
 8010998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801099a:	445a      	add	r2, fp
 801099c:	9209      	str	r2, [sp, #36]	; 0x24
 801099e:	f89a 3000 	ldrb.w	r3, [sl]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 80a2 	beq.w	8010aec <_svfiprintf_r+0x1c8>
 80109a8:	2300      	movs	r3, #0
 80109aa:	f04f 32ff 	mov.w	r2, #4294967295
 80109ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109b2:	f10a 0a01 	add.w	sl, sl, #1
 80109b6:	9304      	str	r3, [sp, #16]
 80109b8:	9307      	str	r3, [sp, #28]
 80109ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109be:	931a      	str	r3, [sp, #104]	; 0x68
 80109c0:	4654      	mov	r4, sl
 80109c2:	2205      	movs	r2, #5
 80109c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c8:	4851      	ldr	r0, [pc, #324]	; (8010b10 <_svfiprintf_r+0x1ec>)
 80109ca:	f7ef fc19 	bl	8000200 <memchr>
 80109ce:	9a04      	ldr	r2, [sp, #16]
 80109d0:	b9d8      	cbnz	r0, 8010a0a <_svfiprintf_r+0xe6>
 80109d2:	06d0      	lsls	r0, r2, #27
 80109d4:	bf44      	itt	mi
 80109d6:	2320      	movmi	r3, #32
 80109d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109dc:	0711      	lsls	r1, r2, #28
 80109de:	bf44      	itt	mi
 80109e0:	232b      	movmi	r3, #43	; 0x2b
 80109e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109e6:	f89a 3000 	ldrb.w	r3, [sl]
 80109ea:	2b2a      	cmp	r3, #42	; 0x2a
 80109ec:	d015      	beq.n	8010a1a <_svfiprintf_r+0xf6>
 80109ee:	9a07      	ldr	r2, [sp, #28]
 80109f0:	4654      	mov	r4, sl
 80109f2:	2000      	movs	r0, #0
 80109f4:	f04f 0c0a 	mov.w	ip, #10
 80109f8:	4621      	mov	r1, r4
 80109fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109fe:	3b30      	subs	r3, #48	; 0x30
 8010a00:	2b09      	cmp	r3, #9
 8010a02:	d94e      	bls.n	8010aa2 <_svfiprintf_r+0x17e>
 8010a04:	b1b0      	cbz	r0, 8010a34 <_svfiprintf_r+0x110>
 8010a06:	9207      	str	r2, [sp, #28]
 8010a08:	e014      	b.n	8010a34 <_svfiprintf_r+0x110>
 8010a0a:	eba0 0308 	sub.w	r3, r0, r8
 8010a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8010a12:	4313      	orrs	r3, r2
 8010a14:	9304      	str	r3, [sp, #16]
 8010a16:	46a2      	mov	sl, r4
 8010a18:	e7d2      	b.n	80109c0 <_svfiprintf_r+0x9c>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	1d19      	adds	r1, r3, #4
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	9103      	str	r1, [sp, #12]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bfbb      	ittet	lt
 8010a26:	425b      	neglt	r3, r3
 8010a28:	f042 0202 	orrlt.w	r2, r2, #2
 8010a2c:	9307      	strge	r3, [sp, #28]
 8010a2e:	9307      	strlt	r3, [sp, #28]
 8010a30:	bfb8      	it	lt
 8010a32:	9204      	strlt	r2, [sp, #16]
 8010a34:	7823      	ldrb	r3, [r4, #0]
 8010a36:	2b2e      	cmp	r3, #46	; 0x2e
 8010a38:	d10c      	bne.n	8010a54 <_svfiprintf_r+0x130>
 8010a3a:	7863      	ldrb	r3, [r4, #1]
 8010a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8010a3e:	d135      	bne.n	8010aac <_svfiprintf_r+0x188>
 8010a40:	9b03      	ldr	r3, [sp, #12]
 8010a42:	1d1a      	adds	r2, r3, #4
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	9203      	str	r2, [sp, #12]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	bfb8      	it	lt
 8010a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a50:	3402      	adds	r4, #2
 8010a52:	9305      	str	r3, [sp, #20]
 8010a54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b20 <_svfiprintf_r+0x1fc>
 8010a58:	7821      	ldrb	r1, [r4, #0]
 8010a5a:	2203      	movs	r2, #3
 8010a5c:	4650      	mov	r0, sl
 8010a5e:	f7ef fbcf 	bl	8000200 <memchr>
 8010a62:	b140      	cbz	r0, 8010a76 <_svfiprintf_r+0x152>
 8010a64:	2340      	movs	r3, #64	; 0x40
 8010a66:	eba0 000a 	sub.w	r0, r0, sl
 8010a6a:	fa03 f000 	lsl.w	r0, r3, r0
 8010a6e:	9b04      	ldr	r3, [sp, #16]
 8010a70:	4303      	orrs	r3, r0
 8010a72:	3401      	adds	r4, #1
 8010a74:	9304      	str	r3, [sp, #16]
 8010a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a7a:	4826      	ldr	r0, [pc, #152]	; (8010b14 <_svfiprintf_r+0x1f0>)
 8010a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a80:	2206      	movs	r2, #6
 8010a82:	f7ef fbbd 	bl	8000200 <memchr>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d038      	beq.n	8010afc <_svfiprintf_r+0x1d8>
 8010a8a:	4b23      	ldr	r3, [pc, #140]	; (8010b18 <_svfiprintf_r+0x1f4>)
 8010a8c:	bb1b      	cbnz	r3, 8010ad6 <_svfiprintf_r+0x1b2>
 8010a8e:	9b03      	ldr	r3, [sp, #12]
 8010a90:	3307      	adds	r3, #7
 8010a92:	f023 0307 	bic.w	r3, r3, #7
 8010a96:	3308      	adds	r3, #8
 8010a98:	9303      	str	r3, [sp, #12]
 8010a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a9c:	4433      	add	r3, r6
 8010a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010aa0:	e767      	b.n	8010972 <_svfiprintf_r+0x4e>
 8010aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	2001      	movs	r0, #1
 8010aaa:	e7a5      	b.n	80109f8 <_svfiprintf_r+0xd4>
 8010aac:	2300      	movs	r3, #0
 8010aae:	3401      	adds	r4, #1
 8010ab0:	9305      	str	r3, [sp, #20]
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	f04f 0c0a 	mov.w	ip, #10
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010abe:	3a30      	subs	r2, #48	; 0x30
 8010ac0:	2a09      	cmp	r2, #9
 8010ac2:	d903      	bls.n	8010acc <_svfiprintf_r+0x1a8>
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d0c5      	beq.n	8010a54 <_svfiprintf_r+0x130>
 8010ac8:	9105      	str	r1, [sp, #20]
 8010aca:	e7c3      	b.n	8010a54 <_svfiprintf_r+0x130>
 8010acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e7f0      	b.n	8010ab8 <_svfiprintf_r+0x194>
 8010ad6:	ab03      	add	r3, sp, #12
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	462a      	mov	r2, r5
 8010adc:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <_svfiprintf_r+0x1f8>)
 8010ade:	a904      	add	r1, sp, #16
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	f7fd fcd7 	bl	800e494 <_printf_float>
 8010ae6:	1c42      	adds	r2, r0, #1
 8010ae8:	4606      	mov	r6, r0
 8010aea:	d1d6      	bne.n	8010a9a <_svfiprintf_r+0x176>
 8010aec:	89ab      	ldrh	r3, [r5, #12]
 8010aee:	065b      	lsls	r3, r3, #25
 8010af0:	f53f af2c 	bmi.w	801094c <_svfiprintf_r+0x28>
 8010af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010af6:	b01d      	add	sp, #116	; 0x74
 8010af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afc:	ab03      	add	r3, sp, #12
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	462a      	mov	r2, r5
 8010b02:	4b06      	ldr	r3, [pc, #24]	; (8010b1c <_svfiprintf_r+0x1f8>)
 8010b04:	a904      	add	r1, sp, #16
 8010b06:	4638      	mov	r0, r7
 8010b08:	f7fd ff68 	bl	800e9dc <_printf_i>
 8010b0c:	e7eb      	b.n	8010ae6 <_svfiprintf_r+0x1c2>
 8010b0e:	bf00      	nop
 8010b10:	0801d3a0 	.word	0x0801d3a0
 8010b14:	0801d3aa 	.word	0x0801d3aa
 8010b18:	0800e495 	.word	0x0800e495
 8010b1c:	0801086f 	.word	0x0801086f
 8010b20:	0801d3a6 	.word	0x0801d3a6

08010b24 <_read_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4d07      	ldr	r5, [pc, #28]	; (8010b44 <_read_r+0x20>)
 8010b28:	4604      	mov	r4, r0
 8010b2a:	4608      	mov	r0, r1
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	2200      	movs	r2, #0
 8010b30:	602a      	str	r2, [r5, #0]
 8010b32:	461a      	mov	r2, r3
 8010b34:	f7f3 f878 	bl	8003c28 <_read>
 8010b38:	1c43      	adds	r3, r0, #1
 8010b3a:	d102      	bne.n	8010b42 <_read_r+0x1e>
 8010b3c:	682b      	ldr	r3, [r5, #0]
 8010b3e:	b103      	cbz	r3, 8010b42 <_read_r+0x1e>
 8010b40:	6023      	str	r3, [r4, #0]
 8010b42:	bd38      	pop	{r3, r4, r5, pc}
 8010b44:	20005a70 	.word	0x20005a70

08010b48 <_raise_r>:
 8010b48:	291f      	cmp	r1, #31
 8010b4a:	b538      	push	{r3, r4, r5, lr}
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	460d      	mov	r5, r1
 8010b50:	d904      	bls.n	8010b5c <_raise_r+0x14>
 8010b52:	2316      	movs	r3, #22
 8010b54:	6003      	str	r3, [r0, #0]
 8010b56:	f04f 30ff 	mov.w	r0, #4294967295
 8010b5a:	bd38      	pop	{r3, r4, r5, pc}
 8010b5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010b5e:	b112      	cbz	r2, 8010b66 <_raise_r+0x1e>
 8010b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b64:	b94b      	cbnz	r3, 8010b7a <_raise_r+0x32>
 8010b66:	4620      	mov	r0, r4
 8010b68:	f000 f830 	bl	8010bcc <_getpid_r>
 8010b6c:	462a      	mov	r2, r5
 8010b6e:	4601      	mov	r1, r0
 8010b70:	4620      	mov	r0, r4
 8010b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b76:	f000 b817 	b.w	8010ba8 <_kill_r>
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d00a      	beq.n	8010b94 <_raise_r+0x4c>
 8010b7e:	1c59      	adds	r1, r3, #1
 8010b80:	d103      	bne.n	8010b8a <_raise_r+0x42>
 8010b82:	2316      	movs	r3, #22
 8010b84:	6003      	str	r3, [r0, #0]
 8010b86:	2001      	movs	r0, #1
 8010b88:	e7e7      	b.n	8010b5a <_raise_r+0x12>
 8010b8a:	2400      	movs	r4, #0
 8010b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b90:	4628      	mov	r0, r5
 8010b92:	4798      	blx	r3
 8010b94:	2000      	movs	r0, #0
 8010b96:	e7e0      	b.n	8010b5a <_raise_r+0x12>

08010b98 <raise>:
 8010b98:	4b02      	ldr	r3, [pc, #8]	; (8010ba4 <raise+0xc>)
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	6818      	ldr	r0, [r3, #0]
 8010b9e:	f7ff bfd3 	b.w	8010b48 <_raise_r>
 8010ba2:	bf00      	nop
 8010ba4:	200000c4 	.word	0x200000c4

08010ba8 <_kill_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	4d07      	ldr	r5, [pc, #28]	; (8010bc8 <_kill_r+0x20>)
 8010bac:	2300      	movs	r3, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	f7f3 f81d 	bl	8003bf4 <_kill>
 8010bba:	1c43      	adds	r3, r0, #1
 8010bbc:	d102      	bne.n	8010bc4 <_kill_r+0x1c>
 8010bbe:	682b      	ldr	r3, [r5, #0]
 8010bc0:	b103      	cbz	r3, 8010bc4 <_kill_r+0x1c>
 8010bc2:	6023      	str	r3, [r4, #0]
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
 8010bc6:	bf00      	nop
 8010bc8:	20005a70 	.word	0x20005a70

08010bcc <_getpid_r>:
 8010bcc:	f7f3 b80a 	b.w	8003be4 <_getpid>

08010bd0 <__ascii_wctomb>:
 8010bd0:	b149      	cbz	r1, 8010be6 <__ascii_wctomb+0x16>
 8010bd2:	2aff      	cmp	r2, #255	; 0xff
 8010bd4:	bf85      	ittet	hi
 8010bd6:	238a      	movhi	r3, #138	; 0x8a
 8010bd8:	6003      	strhi	r3, [r0, #0]
 8010bda:	700a      	strbls	r2, [r1, #0]
 8010bdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010be0:	bf98      	it	ls
 8010be2:	2001      	movls	r0, #1
 8010be4:	4770      	bx	lr
 8010be6:	4608      	mov	r0, r1
 8010be8:	4770      	bx	lr
	...

08010bec <_fstat_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4d07      	ldr	r5, [pc, #28]	; (8010c0c <_fstat_r+0x20>)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	602b      	str	r3, [r5, #0]
 8010bfa:	f7f3 f85a 	bl	8003cb2 <_fstat>
 8010bfe:	1c43      	adds	r3, r0, #1
 8010c00:	d102      	bne.n	8010c08 <_fstat_r+0x1c>
 8010c02:	682b      	ldr	r3, [r5, #0]
 8010c04:	b103      	cbz	r3, 8010c08 <_fstat_r+0x1c>
 8010c06:	6023      	str	r3, [r4, #0]
 8010c08:	bd38      	pop	{r3, r4, r5, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20005a70 	.word	0x20005a70

08010c10 <_isatty_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4d06      	ldr	r5, [pc, #24]	; (8010c2c <_isatty_r+0x1c>)
 8010c14:	2300      	movs	r3, #0
 8010c16:	4604      	mov	r4, r0
 8010c18:	4608      	mov	r0, r1
 8010c1a:	602b      	str	r3, [r5, #0]
 8010c1c:	f7f3 f859 	bl	8003cd2 <_isatty>
 8010c20:	1c43      	adds	r3, r0, #1
 8010c22:	d102      	bne.n	8010c2a <_isatty_r+0x1a>
 8010c24:	682b      	ldr	r3, [r5, #0]
 8010c26:	b103      	cbz	r3, 8010c2a <_isatty_r+0x1a>
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}
 8010c2c:	20005a70 	.word	0x20005a70

08010c30 <_malloc_usable_size_r>:
 8010c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c34:	1f18      	subs	r0, r3, #4
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	bfbc      	itt	lt
 8010c3a:	580b      	ldrlt	r3, [r1, r0]
 8010c3c:	18c0      	addlt	r0, r0, r3
 8010c3e:	4770      	bx	lr

08010c40 <pow>:
 8010c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c42:	ed2d 8b02 	vpush	{d8}
 8010c46:	eeb0 8a40 	vmov.f32	s16, s0
 8010c4a:	eef0 8a60 	vmov.f32	s17, s1
 8010c4e:	ec55 4b11 	vmov	r4, r5, d1
 8010c52:	f000 f865 	bl	8010d20 <__ieee754_pow>
 8010c56:	4622      	mov	r2, r4
 8010c58:	462b      	mov	r3, r5
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	ec57 6b10 	vmov	r6, r7, d0
 8010c62:	f7ef ff73 	bl	8000b4c <__aeabi_dcmpun>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d13b      	bne.n	8010ce2 <pow+0xa2>
 8010c6a:	ec51 0b18 	vmov	r0, r1, d8
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2300      	movs	r3, #0
 8010c72:	f7ef ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c76:	b1b8      	cbz	r0, 8010ca8 <pow+0x68>
 8010c78:	2200      	movs	r2, #0
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	4629      	mov	r1, r5
 8010c80:	f7ef ff32 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	d146      	bne.n	8010d16 <pow+0xd6>
 8010c88:	ec45 4b10 	vmov	d0, r4, r5
 8010c8c:	f000 fe61 	bl	8011952 <finite>
 8010c90:	b338      	cbz	r0, 8010ce2 <pow+0xa2>
 8010c92:	2200      	movs	r2, #0
 8010c94:	2300      	movs	r3, #0
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef ff2f 	bl	8000afc <__aeabi_dcmplt>
 8010c9e:	b300      	cbz	r0, 8010ce2 <pow+0xa2>
 8010ca0:	f7fd f8bc 	bl	800de1c <__errno>
 8010ca4:	2322      	movs	r3, #34	; 0x22
 8010ca6:	e01b      	b.n	8010ce0 <pow+0xa0>
 8010ca8:	ec47 6b10 	vmov	d0, r6, r7
 8010cac:	f000 fe51 	bl	8011952 <finite>
 8010cb0:	b9e0      	cbnz	r0, 8010cec <pow+0xac>
 8010cb2:	eeb0 0a48 	vmov.f32	s0, s16
 8010cb6:	eef0 0a68 	vmov.f32	s1, s17
 8010cba:	f000 fe4a 	bl	8011952 <finite>
 8010cbe:	b1a8      	cbz	r0, 8010cec <pow+0xac>
 8010cc0:	ec45 4b10 	vmov	d0, r4, r5
 8010cc4:	f000 fe45 	bl	8011952 <finite>
 8010cc8:	b180      	cbz	r0, 8010cec <pow+0xac>
 8010cca:	4632      	mov	r2, r6
 8010ccc:	463b      	mov	r3, r7
 8010cce:	4630      	mov	r0, r6
 8010cd0:	4639      	mov	r1, r7
 8010cd2:	f7ef ff3b 	bl	8000b4c <__aeabi_dcmpun>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d0e2      	beq.n	8010ca0 <pow+0x60>
 8010cda:	f7fd f89f 	bl	800de1c <__errno>
 8010cde:	2321      	movs	r3, #33	; 0x21
 8010ce0:	6003      	str	r3, [r0, #0]
 8010ce2:	ecbd 8b02 	vpop	{d8}
 8010ce6:	ec47 6b10 	vmov	d0, r6, r7
 8010cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cec:	2200      	movs	r2, #0
 8010cee:	2300      	movs	r3, #0
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	4639      	mov	r1, r7
 8010cf4:	f7ef fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d0f2      	beq.n	8010ce2 <pow+0xa2>
 8010cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8010d00:	eef0 0a68 	vmov.f32	s1, s17
 8010d04:	f000 fe25 	bl	8011952 <finite>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d0ea      	beq.n	8010ce2 <pow+0xa2>
 8010d0c:	ec45 4b10 	vmov	d0, r4, r5
 8010d10:	f000 fe1f 	bl	8011952 <finite>
 8010d14:	e7c3      	b.n	8010c9e <pow+0x5e>
 8010d16:	4f01      	ldr	r7, [pc, #4]	; (8010d1c <pow+0xdc>)
 8010d18:	2600      	movs	r6, #0
 8010d1a:	e7e2      	b.n	8010ce2 <pow+0xa2>
 8010d1c:	3ff00000 	.word	0x3ff00000

08010d20 <__ieee754_pow>:
 8010d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d24:	ed2d 8b06 	vpush	{d8-d10}
 8010d28:	b089      	sub	sp, #36	; 0x24
 8010d2a:	ed8d 1b00 	vstr	d1, [sp]
 8010d2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010d32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010d36:	ea58 0102 	orrs.w	r1, r8, r2
 8010d3a:	ec57 6b10 	vmov	r6, r7, d0
 8010d3e:	d115      	bne.n	8010d6c <__ieee754_pow+0x4c>
 8010d40:	19b3      	adds	r3, r6, r6
 8010d42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010d46:	4152      	adcs	r2, r2
 8010d48:	4299      	cmp	r1, r3
 8010d4a:	4b89      	ldr	r3, [pc, #548]	; (8010f70 <__ieee754_pow+0x250>)
 8010d4c:	4193      	sbcs	r3, r2
 8010d4e:	f080 84d2 	bcs.w	80116f6 <__ieee754_pow+0x9d6>
 8010d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d56:	4630      	mov	r0, r6
 8010d58:	4639      	mov	r1, r7
 8010d5a:	f7ef faa7 	bl	80002ac <__adddf3>
 8010d5e:	ec41 0b10 	vmov	d0, r0, r1
 8010d62:	b009      	add	sp, #36	; 0x24
 8010d64:	ecbd 8b06 	vpop	{d8-d10}
 8010d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6c:	4b81      	ldr	r3, [pc, #516]	; (8010f74 <__ieee754_pow+0x254>)
 8010d6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010d72:	429c      	cmp	r4, r3
 8010d74:	ee10 aa10 	vmov	sl, s0
 8010d78:	463d      	mov	r5, r7
 8010d7a:	dc06      	bgt.n	8010d8a <__ieee754_pow+0x6a>
 8010d7c:	d101      	bne.n	8010d82 <__ieee754_pow+0x62>
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	d1e7      	bne.n	8010d52 <__ieee754_pow+0x32>
 8010d82:	4598      	cmp	r8, r3
 8010d84:	dc01      	bgt.n	8010d8a <__ieee754_pow+0x6a>
 8010d86:	d10f      	bne.n	8010da8 <__ieee754_pow+0x88>
 8010d88:	b172      	cbz	r2, 8010da8 <__ieee754_pow+0x88>
 8010d8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010d8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010d92:	ea55 050a 	orrs.w	r5, r5, sl
 8010d96:	d1dc      	bne.n	8010d52 <__ieee754_pow+0x32>
 8010d98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d9c:	18db      	adds	r3, r3, r3
 8010d9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010da2:	4152      	adcs	r2, r2
 8010da4:	429d      	cmp	r5, r3
 8010da6:	e7d0      	b.n	8010d4a <__ieee754_pow+0x2a>
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	da3b      	bge.n	8010e24 <__ieee754_pow+0x104>
 8010dac:	4b72      	ldr	r3, [pc, #456]	; (8010f78 <__ieee754_pow+0x258>)
 8010dae:	4598      	cmp	r8, r3
 8010db0:	dc51      	bgt.n	8010e56 <__ieee754_pow+0x136>
 8010db2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010db6:	4598      	cmp	r8, r3
 8010db8:	f340 84ac 	ble.w	8011714 <__ieee754_pow+0x9f4>
 8010dbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010dc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010dc4:	2b14      	cmp	r3, #20
 8010dc6:	dd0f      	ble.n	8010de8 <__ieee754_pow+0xc8>
 8010dc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010dcc:	fa22 f103 	lsr.w	r1, r2, r3
 8010dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	f040 849d 	bne.w	8011714 <__ieee754_pow+0x9f4>
 8010dda:	f001 0101 	and.w	r1, r1, #1
 8010dde:	f1c1 0302 	rsb	r3, r1, #2
 8010de2:	9304      	str	r3, [sp, #16]
 8010de4:	b182      	cbz	r2, 8010e08 <__ieee754_pow+0xe8>
 8010de6:	e05f      	b.n	8010ea8 <__ieee754_pow+0x188>
 8010de8:	2a00      	cmp	r2, #0
 8010dea:	d15b      	bne.n	8010ea4 <__ieee754_pow+0x184>
 8010dec:	f1c3 0314 	rsb	r3, r3, #20
 8010df0:	fa48 f103 	asr.w	r1, r8, r3
 8010df4:	fa01 f303 	lsl.w	r3, r1, r3
 8010df8:	4543      	cmp	r3, r8
 8010dfa:	f040 8488 	bne.w	801170e <__ieee754_pow+0x9ee>
 8010dfe:	f001 0101 	and.w	r1, r1, #1
 8010e02:	f1c1 0302 	rsb	r3, r1, #2
 8010e06:	9304      	str	r3, [sp, #16]
 8010e08:	4b5c      	ldr	r3, [pc, #368]	; (8010f7c <__ieee754_pow+0x25c>)
 8010e0a:	4598      	cmp	r8, r3
 8010e0c:	d132      	bne.n	8010e74 <__ieee754_pow+0x154>
 8010e0e:	f1b9 0f00 	cmp.w	r9, #0
 8010e12:	f280 8478 	bge.w	8011706 <__ieee754_pow+0x9e6>
 8010e16:	4959      	ldr	r1, [pc, #356]	; (8010f7c <__ieee754_pow+0x25c>)
 8010e18:	4632      	mov	r2, r6
 8010e1a:	463b      	mov	r3, r7
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	f7ef fd25 	bl	800086c <__aeabi_ddiv>
 8010e22:	e79c      	b.n	8010d5e <__ieee754_pow+0x3e>
 8010e24:	2300      	movs	r3, #0
 8010e26:	9304      	str	r3, [sp, #16]
 8010e28:	2a00      	cmp	r2, #0
 8010e2a:	d13d      	bne.n	8010ea8 <__ieee754_pow+0x188>
 8010e2c:	4b51      	ldr	r3, [pc, #324]	; (8010f74 <__ieee754_pow+0x254>)
 8010e2e:	4598      	cmp	r8, r3
 8010e30:	d1ea      	bne.n	8010e08 <__ieee754_pow+0xe8>
 8010e32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010e36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8010e3e:	f000 845a 	beq.w	80116f6 <__ieee754_pow+0x9d6>
 8010e42:	4b4f      	ldr	r3, [pc, #316]	; (8010f80 <__ieee754_pow+0x260>)
 8010e44:	429c      	cmp	r4, r3
 8010e46:	dd08      	ble.n	8010e5a <__ieee754_pow+0x13a>
 8010e48:	f1b9 0f00 	cmp.w	r9, #0
 8010e4c:	f2c0 8457 	blt.w	80116fe <__ieee754_pow+0x9de>
 8010e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e54:	e783      	b.n	8010d5e <__ieee754_pow+0x3e>
 8010e56:	2302      	movs	r3, #2
 8010e58:	e7e5      	b.n	8010e26 <__ieee754_pow+0x106>
 8010e5a:	f1b9 0f00 	cmp.w	r9, #0
 8010e5e:	f04f 0000 	mov.w	r0, #0
 8010e62:	f04f 0100 	mov.w	r1, #0
 8010e66:	f6bf af7a 	bge.w	8010d5e <__ieee754_pow+0x3e>
 8010e6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010e6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e72:	e774      	b.n	8010d5e <__ieee754_pow+0x3e>
 8010e74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010e78:	d106      	bne.n	8010e88 <__ieee754_pow+0x168>
 8010e7a:	4632      	mov	r2, r6
 8010e7c:	463b      	mov	r3, r7
 8010e7e:	4630      	mov	r0, r6
 8010e80:	4639      	mov	r1, r7
 8010e82:	f7ef fbc9 	bl	8000618 <__aeabi_dmul>
 8010e86:	e76a      	b.n	8010d5e <__ieee754_pow+0x3e>
 8010e88:	4b3e      	ldr	r3, [pc, #248]	; (8010f84 <__ieee754_pow+0x264>)
 8010e8a:	4599      	cmp	r9, r3
 8010e8c:	d10c      	bne.n	8010ea8 <__ieee754_pow+0x188>
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	db0a      	blt.n	8010ea8 <__ieee754_pow+0x188>
 8010e92:	ec47 6b10 	vmov	d0, r6, r7
 8010e96:	b009      	add	sp, #36	; 0x24
 8010e98:	ecbd 8b06 	vpop	{d8-d10}
 8010e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	f000 bc6c 	b.w	801177c <__ieee754_sqrt>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	9304      	str	r3, [sp, #16]
 8010ea8:	ec47 6b10 	vmov	d0, r6, r7
 8010eac:	f000 fd48 	bl	8011940 <fabs>
 8010eb0:	ec51 0b10 	vmov	r0, r1, d0
 8010eb4:	f1ba 0f00 	cmp.w	sl, #0
 8010eb8:	d129      	bne.n	8010f0e <__ieee754_pow+0x1ee>
 8010eba:	b124      	cbz	r4, 8010ec6 <__ieee754_pow+0x1a6>
 8010ebc:	4b2f      	ldr	r3, [pc, #188]	; (8010f7c <__ieee754_pow+0x25c>)
 8010ebe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d123      	bne.n	8010f0e <__ieee754_pow+0x1ee>
 8010ec6:	f1b9 0f00 	cmp.w	r9, #0
 8010eca:	da05      	bge.n	8010ed8 <__ieee754_pow+0x1b8>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	492a      	ldr	r1, [pc, #168]	; (8010f7c <__ieee754_pow+0x25c>)
 8010ed4:	f7ef fcca 	bl	800086c <__aeabi_ddiv>
 8010ed8:	2d00      	cmp	r5, #0
 8010eda:	f6bf af40 	bge.w	8010d5e <__ieee754_pow+0x3e>
 8010ede:	9b04      	ldr	r3, [sp, #16]
 8010ee0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010ee4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010ee8:	4323      	orrs	r3, r4
 8010eea:	d108      	bne.n	8010efe <__ieee754_pow+0x1de>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	4610      	mov	r0, r2
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	f7ef f9d8 	bl	80002a8 <__aeabi_dsub>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	460b      	mov	r3, r1
 8010efc:	e78f      	b.n	8010e1e <__ieee754_pow+0xfe>
 8010efe:	9b04      	ldr	r3, [sp, #16]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	f47f af2c 	bne.w	8010d5e <__ieee754_pow+0x3e>
 8010f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	e727      	b.n	8010d5e <__ieee754_pow+0x3e>
 8010f0e:	0feb      	lsrs	r3, r5, #31
 8010f10:	3b01      	subs	r3, #1
 8010f12:	9306      	str	r3, [sp, #24]
 8010f14:	9a06      	ldr	r2, [sp, #24]
 8010f16:	9b04      	ldr	r3, [sp, #16]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	d102      	bne.n	8010f22 <__ieee754_pow+0x202>
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	463b      	mov	r3, r7
 8010f20:	e7e6      	b.n	8010ef0 <__ieee754_pow+0x1d0>
 8010f22:	4b19      	ldr	r3, [pc, #100]	; (8010f88 <__ieee754_pow+0x268>)
 8010f24:	4598      	cmp	r8, r3
 8010f26:	f340 80fb 	ble.w	8011120 <__ieee754_pow+0x400>
 8010f2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010f2e:	4598      	cmp	r8, r3
 8010f30:	4b13      	ldr	r3, [pc, #76]	; (8010f80 <__ieee754_pow+0x260>)
 8010f32:	dd0c      	ble.n	8010f4e <__ieee754_pow+0x22e>
 8010f34:	429c      	cmp	r4, r3
 8010f36:	dc0f      	bgt.n	8010f58 <__ieee754_pow+0x238>
 8010f38:	f1b9 0f00 	cmp.w	r9, #0
 8010f3c:	da0f      	bge.n	8010f5e <__ieee754_pow+0x23e>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	b009      	add	sp, #36	; 0x24
 8010f42:	ecbd 8b06 	vpop	{d8-d10}
 8010f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4a:	f000 bcf0 	b.w	801192e <__math_oflow>
 8010f4e:	429c      	cmp	r4, r3
 8010f50:	dbf2      	blt.n	8010f38 <__ieee754_pow+0x218>
 8010f52:	4b0a      	ldr	r3, [pc, #40]	; (8010f7c <__ieee754_pow+0x25c>)
 8010f54:	429c      	cmp	r4, r3
 8010f56:	dd19      	ble.n	8010f8c <__ieee754_pow+0x26c>
 8010f58:	f1b9 0f00 	cmp.w	r9, #0
 8010f5c:	dcef      	bgt.n	8010f3e <__ieee754_pow+0x21e>
 8010f5e:	2000      	movs	r0, #0
 8010f60:	b009      	add	sp, #36	; 0x24
 8010f62:	ecbd 8b06 	vpop	{d8-d10}
 8010f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6a:	f000 bcd7 	b.w	801191c <__math_uflow>
 8010f6e:	bf00      	nop
 8010f70:	fff00000 	.word	0xfff00000
 8010f74:	7ff00000 	.word	0x7ff00000
 8010f78:	433fffff 	.word	0x433fffff
 8010f7c:	3ff00000 	.word	0x3ff00000
 8010f80:	3fefffff 	.word	0x3fefffff
 8010f84:	3fe00000 	.word	0x3fe00000
 8010f88:	41e00000 	.word	0x41e00000
 8010f8c:	4b60      	ldr	r3, [pc, #384]	; (8011110 <__ieee754_pow+0x3f0>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f7ef f98a 	bl	80002a8 <__aeabi_dsub>
 8010f94:	a354      	add	r3, pc, #336	; (adr r3, 80110e8 <__ieee754_pow+0x3c8>)
 8010f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	460d      	mov	r5, r1
 8010f9e:	f7ef fb3b 	bl	8000618 <__aeabi_dmul>
 8010fa2:	a353      	add	r3, pc, #332	; (adr r3, 80110f0 <__ieee754_pow+0x3d0>)
 8010fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa8:	4606      	mov	r6, r0
 8010faa:	460f      	mov	r7, r1
 8010fac:	4620      	mov	r0, r4
 8010fae:	4629      	mov	r1, r5
 8010fb0:	f7ef fb32 	bl	8000618 <__aeabi_dmul>
 8010fb4:	4b57      	ldr	r3, [pc, #348]	; (8011114 <__ieee754_pow+0x3f4>)
 8010fb6:	4682      	mov	sl, r0
 8010fb8:	468b      	mov	fp, r1
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	f7ef fb2a 	bl	8000618 <__aeabi_dmul>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	a14b      	add	r1, pc, #300	; (adr r1, 80110f8 <__ieee754_pow+0x3d8>)
 8010fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fce:	f7ef f96b 	bl	80002a8 <__aeabi_dsub>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	462b      	mov	r3, r5
 8010fd6:	f7ef fb1f 	bl	8000618 <__aeabi_dmul>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	2000      	movs	r0, #0
 8010fe0:	494d      	ldr	r1, [pc, #308]	; (8011118 <__ieee754_pow+0x3f8>)
 8010fe2:	f7ef f961 	bl	80002a8 <__aeabi_dsub>
 8010fe6:	4622      	mov	r2, r4
 8010fe8:	4680      	mov	r8, r0
 8010fea:	4689      	mov	r9, r1
 8010fec:	462b      	mov	r3, r5
 8010fee:	4620      	mov	r0, r4
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	f7ef fb11 	bl	8000618 <__aeabi_dmul>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4640      	mov	r0, r8
 8010ffc:	4649      	mov	r1, r9
 8010ffe:	f7ef fb0b 	bl	8000618 <__aeabi_dmul>
 8011002:	a33f      	add	r3, pc, #252	; (adr r3, 8011100 <__ieee754_pow+0x3e0>)
 8011004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011008:	f7ef fb06 	bl	8000618 <__aeabi_dmul>
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	4650      	mov	r0, sl
 8011012:	4659      	mov	r1, fp
 8011014:	f7ef f948 	bl	80002a8 <__aeabi_dsub>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4680      	mov	r8, r0
 801101e:	4689      	mov	r9, r1
 8011020:	4630      	mov	r0, r6
 8011022:	4639      	mov	r1, r7
 8011024:	f7ef f942 	bl	80002ac <__adddf3>
 8011028:	2000      	movs	r0, #0
 801102a:	4632      	mov	r2, r6
 801102c:	463b      	mov	r3, r7
 801102e:	4604      	mov	r4, r0
 8011030:	460d      	mov	r5, r1
 8011032:	f7ef f939 	bl	80002a8 <__aeabi_dsub>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4640      	mov	r0, r8
 801103c:	4649      	mov	r1, r9
 801103e:	f7ef f933 	bl	80002a8 <__aeabi_dsub>
 8011042:	9b04      	ldr	r3, [sp, #16]
 8011044:	9a06      	ldr	r2, [sp, #24]
 8011046:	3b01      	subs	r3, #1
 8011048:	4313      	orrs	r3, r2
 801104a:	4682      	mov	sl, r0
 801104c:	468b      	mov	fp, r1
 801104e:	f040 81e7 	bne.w	8011420 <__ieee754_pow+0x700>
 8011052:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011108 <__ieee754_pow+0x3e8>
 8011056:	eeb0 8a47 	vmov.f32	s16, s14
 801105a:	eef0 8a67 	vmov.f32	s17, s15
 801105e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011062:	2600      	movs	r6, #0
 8011064:	4632      	mov	r2, r6
 8011066:	463b      	mov	r3, r7
 8011068:	e9dd 0100 	ldrd	r0, r1, [sp]
 801106c:	f7ef f91c 	bl	80002a8 <__aeabi_dsub>
 8011070:	4622      	mov	r2, r4
 8011072:	462b      	mov	r3, r5
 8011074:	f7ef fad0 	bl	8000618 <__aeabi_dmul>
 8011078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801107c:	4680      	mov	r8, r0
 801107e:	4689      	mov	r9, r1
 8011080:	4650      	mov	r0, sl
 8011082:	4659      	mov	r1, fp
 8011084:	f7ef fac8 	bl	8000618 <__aeabi_dmul>
 8011088:	4602      	mov	r2, r0
 801108a:	460b      	mov	r3, r1
 801108c:	4640      	mov	r0, r8
 801108e:	4649      	mov	r1, r9
 8011090:	f7ef f90c 	bl	80002ac <__adddf3>
 8011094:	4632      	mov	r2, r6
 8011096:	463b      	mov	r3, r7
 8011098:	4680      	mov	r8, r0
 801109a:	4689      	mov	r9, r1
 801109c:	4620      	mov	r0, r4
 801109e:	4629      	mov	r1, r5
 80110a0:	f7ef faba 	bl	8000618 <__aeabi_dmul>
 80110a4:	460b      	mov	r3, r1
 80110a6:	4604      	mov	r4, r0
 80110a8:	460d      	mov	r5, r1
 80110aa:	4602      	mov	r2, r0
 80110ac:	4649      	mov	r1, r9
 80110ae:	4640      	mov	r0, r8
 80110b0:	f7ef f8fc 	bl	80002ac <__adddf3>
 80110b4:	4b19      	ldr	r3, [pc, #100]	; (801111c <__ieee754_pow+0x3fc>)
 80110b6:	4299      	cmp	r1, r3
 80110b8:	ec45 4b19 	vmov	d9, r4, r5
 80110bc:	4606      	mov	r6, r0
 80110be:	460f      	mov	r7, r1
 80110c0:	468b      	mov	fp, r1
 80110c2:	f340 82f1 	ble.w	80116a8 <__ieee754_pow+0x988>
 80110c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80110ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80110ce:	4303      	orrs	r3, r0
 80110d0:	f000 81e4 	beq.w	801149c <__ieee754_pow+0x77c>
 80110d4:	ec51 0b18 	vmov	r0, r1, d8
 80110d8:	2200      	movs	r2, #0
 80110da:	2300      	movs	r3, #0
 80110dc:	f7ef fd0e 	bl	8000afc <__aeabi_dcmplt>
 80110e0:	3800      	subs	r0, #0
 80110e2:	bf18      	it	ne
 80110e4:	2001      	movne	r0, #1
 80110e6:	e72b      	b.n	8010f40 <__ieee754_pow+0x220>
 80110e8:	60000000 	.word	0x60000000
 80110ec:	3ff71547 	.word	0x3ff71547
 80110f0:	f85ddf44 	.word	0xf85ddf44
 80110f4:	3e54ae0b 	.word	0x3e54ae0b
 80110f8:	55555555 	.word	0x55555555
 80110fc:	3fd55555 	.word	0x3fd55555
 8011100:	652b82fe 	.word	0x652b82fe
 8011104:	3ff71547 	.word	0x3ff71547
 8011108:	00000000 	.word	0x00000000
 801110c:	bff00000 	.word	0xbff00000
 8011110:	3ff00000 	.word	0x3ff00000
 8011114:	3fd00000 	.word	0x3fd00000
 8011118:	3fe00000 	.word	0x3fe00000
 801111c:	408fffff 	.word	0x408fffff
 8011120:	4bd5      	ldr	r3, [pc, #852]	; (8011478 <__ieee754_pow+0x758>)
 8011122:	402b      	ands	r3, r5
 8011124:	2200      	movs	r2, #0
 8011126:	b92b      	cbnz	r3, 8011134 <__ieee754_pow+0x414>
 8011128:	4bd4      	ldr	r3, [pc, #848]	; (801147c <__ieee754_pow+0x75c>)
 801112a:	f7ef fa75 	bl	8000618 <__aeabi_dmul>
 801112e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011132:	460c      	mov	r4, r1
 8011134:	1523      	asrs	r3, r4, #20
 8011136:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801113a:	4413      	add	r3, r2
 801113c:	9305      	str	r3, [sp, #20]
 801113e:	4bd0      	ldr	r3, [pc, #832]	; (8011480 <__ieee754_pow+0x760>)
 8011140:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011144:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011148:	429c      	cmp	r4, r3
 801114a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801114e:	dd08      	ble.n	8011162 <__ieee754_pow+0x442>
 8011150:	4bcc      	ldr	r3, [pc, #816]	; (8011484 <__ieee754_pow+0x764>)
 8011152:	429c      	cmp	r4, r3
 8011154:	f340 8162 	ble.w	801141c <__ieee754_pow+0x6fc>
 8011158:	9b05      	ldr	r3, [sp, #20]
 801115a:	3301      	adds	r3, #1
 801115c:	9305      	str	r3, [sp, #20]
 801115e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011162:	2400      	movs	r4, #0
 8011164:	00e3      	lsls	r3, r4, #3
 8011166:	9307      	str	r3, [sp, #28]
 8011168:	4bc7      	ldr	r3, [pc, #796]	; (8011488 <__ieee754_pow+0x768>)
 801116a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801116e:	ed93 7b00 	vldr	d7, [r3]
 8011172:	4629      	mov	r1, r5
 8011174:	ec53 2b17 	vmov	r2, r3, d7
 8011178:	eeb0 9a47 	vmov.f32	s18, s14
 801117c:	eef0 9a67 	vmov.f32	s19, s15
 8011180:	4682      	mov	sl, r0
 8011182:	f7ef f891 	bl	80002a8 <__aeabi_dsub>
 8011186:	4652      	mov	r2, sl
 8011188:	4606      	mov	r6, r0
 801118a:	460f      	mov	r7, r1
 801118c:	462b      	mov	r3, r5
 801118e:	ec51 0b19 	vmov	r0, r1, d9
 8011192:	f7ef f88b 	bl	80002ac <__adddf3>
 8011196:	4602      	mov	r2, r0
 8011198:	460b      	mov	r3, r1
 801119a:	2000      	movs	r0, #0
 801119c:	49bb      	ldr	r1, [pc, #748]	; (801148c <__ieee754_pow+0x76c>)
 801119e:	f7ef fb65 	bl	800086c <__aeabi_ddiv>
 80111a2:	ec41 0b1a 	vmov	d10, r0, r1
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4630      	mov	r0, r6
 80111ac:	4639      	mov	r1, r7
 80111ae:	f7ef fa33 	bl	8000618 <__aeabi_dmul>
 80111b2:	2300      	movs	r3, #0
 80111b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111b8:	9302      	str	r3, [sp, #8]
 80111ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80111be:	46ab      	mov	fp, r5
 80111c0:	106d      	asrs	r5, r5, #1
 80111c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80111c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80111ca:	ec41 0b18 	vmov	d8, r0, r1
 80111ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80111d2:	2200      	movs	r2, #0
 80111d4:	4640      	mov	r0, r8
 80111d6:	4649      	mov	r1, r9
 80111d8:	4614      	mov	r4, r2
 80111da:	461d      	mov	r5, r3
 80111dc:	f7ef fa1c 	bl	8000618 <__aeabi_dmul>
 80111e0:	4602      	mov	r2, r0
 80111e2:	460b      	mov	r3, r1
 80111e4:	4630      	mov	r0, r6
 80111e6:	4639      	mov	r1, r7
 80111e8:	f7ef f85e 	bl	80002a8 <__aeabi_dsub>
 80111ec:	ec53 2b19 	vmov	r2, r3, d9
 80111f0:	4606      	mov	r6, r0
 80111f2:	460f      	mov	r7, r1
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef f856 	bl	80002a8 <__aeabi_dsub>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	4650      	mov	r0, sl
 8011202:	4659      	mov	r1, fp
 8011204:	f7ef f850 	bl	80002a8 <__aeabi_dsub>
 8011208:	4642      	mov	r2, r8
 801120a:	464b      	mov	r3, r9
 801120c:	f7ef fa04 	bl	8000618 <__aeabi_dmul>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	4630      	mov	r0, r6
 8011216:	4639      	mov	r1, r7
 8011218:	f7ef f846 	bl	80002a8 <__aeabi_dsub>
 801121c:	ec53 2b1a 	vmov	r2, r3, d10
 8011220:	f7ef f9fa 	bl	8000618 <__aeabi_dmul>
 8011224:	ec53 2b18 	vmov	r2, r3, d8
 8011228:	ec41 0b19 	vmov	d9, r0, r1
 801122c:	ec51 0b18 	vmov	r0, r1, d8
 8011230:	f7ef f9f2 	bl	8000618 <__aeabi_dmul>
 8011234:	a37c      	add	r3, pc, #496	; (adr r3, 8011428 <__ieee754_pow+0x708>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	4604      	mov	r4, r0
 801123c:	460d      	mov	r5, r1
 801123e:	f7ef f9eb 	bl	8000618 <__aeabi_dmul>
 8011242:	a37b      	add	r3, pc, #492	; (adr r3, 8011430 <__ieee754_pow+0x710>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f830 	bl	80002ac <__adddf3>
 801124c:	4622      	mov	r2, r4
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9e2 	bl	8000618 <__aeabi_dmul>
 8011254:	a378      	add	r3, pc, #480	; (adr r3, 8011438 <__ieee754_pow+0x718>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f827 	bl	80002ac <__adddf3>
 801125e:	4622      	mov	r2, r4
 8011260:	462b      	mov	r3, r5
 8011262:	f7ef f9d9 	bl	8000618 <__aeabi_dmul>
 8011266:	a376      	add	r3, pc, #472	; (adr r3, 8011440 <__ieee754_pow+0x720>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f81e 	bl	80002ac <__adddf3>
 8011270:	4622      	mov	r2, r4
 8011272:	462b      	mov	r3, r5
 8011274:	f7ef f9d0 	bl	8000618 <__aeabi_dmul>
 8011278:	a373      	add	r3, pc, #460	; (adr r3, 8011448 <__ieee754_pow+0x728>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f815 	bl	80002ac <__adddf3>
 8011282:	4622      	mov	r2, r4
 8011284:	462b      	mov	r3, r5
 8011286:	f7ef f9c7 	bl	8000618 <__aeabi_dmul>
 801128a:	a371      	add	r3, pc, #452	; (adr r3, 8011450 <__ieee754_pow+0x730>)
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	f7ef f80c 	bl	80002ac <__adddf3>
 8011294:	4622      	mov	r2, r4
 8011296:	4606      	mov	r6, r0
 8011298:	460f      	mov	r7, r1
 801129a:	462b      	mov	r3, r5
 801129c:	4620      	mov	r0, r4
 801129e:	4629      	mov	r1, r5
 80112a0:	f7ef f9ba 	bl	8000618 <__aeabi_dmul>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	4630      	mov	r0, r6
 80112aa:	4639      	mov	r1, r7
 80112ac:	f7ef f9b4 	bl	8000618 <__aeabi_dmul>
 80112b0:	4642      	mov	r2, r8
 80112b2:	4604      	mov	r4, r0
 80112b4:	460d      	mov	r5, r1
 80112b6:	464b      	mov	r3, r9
 80112b8:	ec51 0b18 	vmov	r0, r1, d8
 80112bc:	f7ee fff6 	bl	80002ac <__adddf3>
 80112c0:	ec53 2b19 	vmov	r2, r3, d9
 80112c4:	f7ef f9a8 	bl	8000618 <__aeabi_dmul>
 80112c8:	4622      	mov	r2, r4
 80112ca:	462b      	mov	r3, r5
 80112cc:	f7ee ffee 	bl	80002ac <__adddf3>
 80112d0:	4642      	mov	r2, r8
 80112d2:	4682      	mov	sl, r0
 80112d4:	468b      	mov	fp, r1
 80112d6:	464b      	mov	r3, r9
 80112d8:	4640      	mov	r0, r8
 80112da:	4649      	mov	r1, r9
 80112dc:	f7ef f99c 	bl	8000618 <__aeabi_dmul>
 80112e0:	4b6b      	ldr	r3, [pc, #428]	; (8011490 <__ieee754_pow+0x770>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	4606      	mov	r6, r0
 80112e6:	460f      	mov	r7, r1
 80112e8:	f7ee ffe0 	bl	80002ac <__adddf3>
 80112ec:	4652      	mov	r2, sl
 80112ee:	465b      	mov	r3, fp
 80112f0:	f7ee ffdc 	bl	80002ac <__adddf3>
 80112f4:	2000      	movs	r0, #0
 80112f6:	4604      	mov	r4, r0
 80112f8:	460d      	mov	r5, r1
 80112fa:	4602      	mov	r2, r0
 80112fc:	460b      	mov	r3, r1
 80112fe:	4640      	mov	r0, r8
 8011300:	4649      	mov	r1, r9
 8011302:	f7ef f989 	bl	8000618 <__aeabi_dmul>
 8011306:	4b62      	ldr	r3, [pc, #392]	; (8011490 <__ieee754_pow+0x770>)
 8011308:	4680      	mov	r8, r0
 801130a:	4689      	mov	r9, r1
 801130c:	2200      	movs	r2, #0
 801130e:	4620      	mov	r0, r4
 8011310:	4629      	mov	r1, r5
 8011312:	f7ee ffc9 	bl	80002a8 <__aeabi_dsub>
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	f7ee ffc5 	bl	80002a8 <__aeabi_dsub>
 801131e:	4602      	mov	r2, r0
 8011320:	460b      	mov	r3, r1
 8011322:	4650      	mov	r0, sl
 8011324:	4659      	mov	r1, fp
 8011326:	f7ee ffbf 	bl	80002a8 <__aeabi_dsub>
 801132a:	ec53 2b18 	vmov	r2, r3, d8
 801132e:	f7ef f973 	bl	8000618 <__aeabi_dmul>
 8011332:	4622      	mov	r2, r4
 8011334:	4606      	mov	r6, r0
 8011336:	460f      	mov	r7, r1
 8011338:	462b      	mov	r3, r5
 801133a:	ec51 0b19 	vmov	r0, r1, d9
 801133e:	f7ef f96b 	bl	8000618 <__aeabi_dmul>
 8011342:	4602      	mov	r2, r0
 8011344:	460b      	mov	r3, r1
 8011346:	4630      	mov	r0, r6
 8011348:	4639      	mov	r1, r7
 801134a:	f7ee ffaf 	bl	80002ac <__adddf3>
 801134e:	4606      	mov	r6, r0
 8011350:	460f      	mov	r7, r1
 8011352:	4602      	mov	r2, r0
 8011354:	460b      	mov	r3, r1
 8011356:	4640      	mov	r0, r8
 8011358:	4649      	mov	r1, r9
 801135a:	f7ee ffa7 	bl	80002ac <__adddf3>
 801135e:	a33e      	add	r3, pc, #248	; (adr r3, 8011458 <__ieee754_pow+0x738>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	2000      	movs	r0, #0
 8011366:	4604      	mov	r4, r0
 8011368:	460d      	mov	r5, r1
 801136a:	f7ef f955 	bl	8000618 <__aeabi_dmul>
 801136e:	4642      	mov	r2, r8
 8011370:	ec41 0b18 	vmov	d8, r0, r1
 8011374:	464b      	mov	r3, r9
 8011376:	4620      	mov	r0, r4
 8011378:	4629      	mov	r1, r5
 801137a:	f7ee ff95 	bl	80002a8 <__aeabi_dsub>
 801137e:	4602      	mov	r2, r0
 8011380:	460b      	mov	r3, r1
 8011382:	4630      	mov	r0, r6
 8011384:	4639      	mov	r1, r7
 8011386:	f7ee ff8f 	bl	80002a8 <__aeabi_dsub>
 801138a:	a335      	add	r3, pc, #212	; (adr r3, 8011460 <__ieee754_pow+0x740>)
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	f7ef f942 	bl	8000618 <__aeabi_dmul>
 8011394:	a334      	add	r3, pc, #208	; (adr r3, 8011468 <__ieee754_pow+0x748>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	4606      	mov	r6, r0
 801139c:	460f      	mov	r7, r1
 801139e:	4620      	mov	r0, r4
 80113a0:	4629      	mov	r1, r5
 80113a2:	f7ef f939 	bl	8000618 <__aeabi_dmul>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	4630      	mov	r0, r6
 80113ac:	4639      	mov	r1, r7
 80113ae:	f7ee ff7d 	bl	80002ac <__adddf3>
 80113b2:	9a07      	ldr	r2, [sp, #28]
 80113b4:	4b37      	ldr	r3, [pc, #220]	; (8011494 <__ieee754_pow+0x774>)
 80113b6:	4413      	add	r3, r2
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	f7ee ff76 	bl	80002ac <__adddf3>
 80113c0:	4682      	mov	sl, r0
 80113c2:	9805      	ldr	r0, [sp, #20]
 80113c4:	468b      	mov	fp, r1
 80113c6:	f7ef f8bd 	bl	8000544 <__aeabi_i2d>
 80113ca:	9a07      	ldr	r2, [sp, #28]
 80113cc:	4b32      	ldr	r3, [pc, #200]	; (8011498 <__ieee754_pow+0x778>)
 80113ce:	4413      	add	r3, r2
 80113d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113d4:	4606      	mov	r6, r0
 80113d6:	460f      	mov	r7, r1
 80113d8:	4652      	mov	r2, sl
 80113da:	465b      	mov	r3, fp
 80113dc:	ec51 0b18 	vmov	r0, r1, d8
 80113e0:	f7ee ff64 	bl	80002ac <__adddf3>
 80113e4:	4642      	mov	r2, r8
 80113e6:	464b      	mov	r3, r9
 80113e8:	f7ee ff60 	bl	80002ac <__adddf3>
 80113ec:	4632      	mov	r2, r6
 80113ee:	463b      	mov	r3, r7
 80113f0:	f7ee ff5c 	bl	80002ac <__adddf3>
 80113f4:	2000      	movs	r0, #0
 80113f6:	4632      	mov	r2, r6
 80113f8:	463b      	mov	r3, r7
 80113fa:	4604      	mov	r4, r0
 80113fc:	460d      	mov	r5, r1
 80113fe:	f7ee ff53 	bl	80002a8 <__aeabi_dsub>
 8011402:	4642      	mov	r2, r8
 8011404:	464b      	mov	r3, r9
 8011406:	f7ee ff4f 	bl	80002a8 <__aeabi_dsub>
 801140a:	ec53 2b18 	vmov	r2, r3, d8
 801140e:	f7ee ff4b 	bl	80002a8 <__aeabi_dsub>
 8011412:	4602      	mov	r2, r0
 8011414:	460b      	mov	r3, r1
 8011416:	4650      	mov	r0, sl
 8011418:	4659      	mov	r1, fp
 801141a:	e610      	b.n	801103e <__ieee754_pow+0x31e>
 801141c:	2401      	movs	r4, #1
 801141e:	e6a1      	b.n	8011164 <__ieee754_pow+0x444>
 8011420:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011470 <__ieee754_pow+0x750>
 8011424:	e617      	b.n	8011056 <__ieee754_pow+0x336>
 8011426:	bf00      	nop
 8011428:	4a454eef 	.word	0x4a454eef
 801142c:	3fca7e28 	.word	0x3fca7e28
 8011430:	93c9db65 	.word	0x93c9db65
 8011434:	3fcd864a 	.word	0x3fcd864a
 8011438:	a91d4101 	.word	0xa91d4101
 801143c:	3fd17460 	.word	0x3fd17460
 8011440:	518f264d 	.word	0x518f264d
 8011444:	3fd55555 	.word	0x3fd55555
 8011448:	db6fabff 	.word	0xdb6fabff
 801144c:	3fdb6db6 	.word	0x3fdb6db6
 8011450:	33333303 	.word	0x33333303
 8011454:	3fe33333 	.word	0x3fe33333
 8011458:	e0000000 	.word	0xe0000000
 801145c:	3feec709 	.word	0x3feec709
 8011460:	dc3a03fd 	.word	0xdc3a03fd
 8011464:	3feec709 	.word	0x3feec709
 8011468:	145b01f5 	.word	0x145b01f5
 801146c:	be3e2fe0 	.word	0xbe3e2fe0
 8011470:	00000000 	.word	0x00000000
 8011474:	3ff00000 	.word	0x3ff00000
 8011478:	7ff00000 	.word	0x7ff00000
 801147c:	43400000 	.word	0x43400000
 8011480:	0003988e 	.word	0x0003988e
 8011484:	000bb679 	.word	0x000bb679
 8011488:	0801d740 	.word	0x0801d740
 801148c:	3ff00000 	.word	0x3ff00000
 8011490:	40080000 	.word	0x40080000
 8011494:	0801d760 	.word	0x0801d760
 8011498:	0801d750 	.word	0x0801d750
 801149c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011774 <__ieee754_pow+0xa54>)
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ee ff01 	bl	80002ac <__adddf3>
 80114aa:	4622      	mov	r2, r4
 80114ac:	ec41 0b1a 	vmov	d10, r0, r1
 80114b0:	462b      	mov	r3, r5
 80114b2:	4630      	mov	r0, r6
 80114b4:	4639      	mov	r1, r7
 80114b6:	f7ee fef7 	bl	80002a8 <__aeabi_dsub>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	ec51 0b1a 	vmov	r0, r1, d10
 80114c2:	f7ef fb39 	bl	8000b38 <__aeabi_dcmpgt>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f47f ae04 	bne.w	80110d4 <__ieee754_pow+0x3b4>
 80114cc:	4aa4      	ldr	r2, [pc, #656]	; (8011760 <__ieee754_pow+0xa40>)
 80114ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114d2:	4293      	cmp	r3, r2
 80114d4:	f340 8108 	ble.w	80116e8 <__ieee754_pow+0x9c8>
 80114d8:	151b      	asrs	r3, r3, #20
 80114da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80114de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80114e2:	fa4a f303 	asr.w	r3, sl, r3
 80114e6:	445b      	add	r3, fp
 80114e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80114ec:	4e9d      	ldr	r6, [pc, #628]	; (8011764 <__ieee754_pow+0xa44>)
 80114ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80114f2:	4116      	asrs	r6, r2
 80114f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80114f8:	2000      	movs	r0, #0
 80114fa:	ea23 0106 	bic.w	r1, r3, r6
 80114fe:	f1c2 0214 	rsb	r2, r2, #20
 8011502:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011506:	fa4a fa02 	asr.w	sl, sl, r2
 801150a:	f1bb 0f00 	cmp.w	fp, #0
 801150e:	4602      	mov	r2, r0
 8011510:	460b      	mov	r3, r1
 8011512:	4620      	mov	r0, r4
 8011514:	4629      	mov	r1, r5
 8011516:	bfb8      	it	lt
 8011518:	f1ca 0a00 	rsblt	sl, sl, #0
 801151c:	f7ee fec4 	bl	80002a8 <__aeabi_dsub>
 8011520:	ec41 0b19 	vmov	d9, r0, r1
 8011524:	4642      	mov	r2, r8
 8011526:	464b      	mov	r3, r9
 8011528:	ec51 0b19 	vmov	r0, r1, d9
 801152c:	f7ee febe 	bl	80002ac <__adddf3>
 8011530:	a37b      	add	r3, pc, #492	; (adr r3, 8011720 <__ieee754_pow+0xa00>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	2000      	movs	r0, #0
 8011538:	4604      	mov	r4, r0
 801153a:	460d      	mov	r5, r1
 801153c:	f7ef f86c 	bl	8000618 <__aeabi_dmul>
 8011540:	ec53 2b19 	vmov	r2, r3, d9
 8011544:	4606      	mov	r6, r0
 8011546:	460f      	mov	r7, r1
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ee feac 	bl	80002a8 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	4640      	mov	r0, r8
 8011556:	4649      	mov	r1, r9
 8011558:	f7ee fea6 	bl	80002a8 <__aeabi_dsub>
 801155c:	a372      	add	r3, pc, #456	; (adr r3, 8011728 <__ieee754_pow+0xa08>)
 801155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011562:	f7ef f859 	bl	8000618 <__aeabi_dmul>
 8011566:	a372      	add	r3, pc, #456	; (adr r3, 8011730 <__ieee754_pow+0xa10>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	4680      	mov	r8, r0
 801156e:	4689      	mov	r9, r1
 8011570:	4620      	mov	r0, r4
 8011572:	4629      	mov	r1, r5
 8011574:	f7ef f850 	bl	8000618 <__aeabi_dmul>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4640      	mov	r0, r8
 801157e:	4649      	mov	r1, r9
 8011580:	f7ee fe94 	bl	80002ac <__adddf3>
 8011584:	4604      	mov	r4, r0
 8011586:	460d      	mov	r5, r1
 8011588:	4602      	mov	r2, r0
 801158a:	460b      	mov	r3, r1
 801158c:	4630      	mov	r0, r6
 801158e:	4639      	mov	r1, r7
 8011590:	f7ee fe8c 	bl	80002ac <__adddf3>
 8011594:	4632      	mov	r2, r6
 8011596:	463b      	mov	r3, r7
 8011598:	4680      	mov	r8, r0
 801159a:	4689      	mov	r9, r1
 801159c:	f7ee fe84 	bl	80002a8 <__aeabi_dsub>
 80115a0:	4602      	mov	r2, r0
 80115a2:	460b      	mov	r3, r1
 80115a4:	4620      	mov	r0, r4
 80115a6:	4629      	mov	r1, r5
 80115a8:	f7ee fe7e 	bl	80002a8 <__aeabi_dsub>
 80115ac:	4642      	mov	r2, r8
 80115ae:	4606      	mov	r6, r0
 80115b0:	460f      	mov	r7, r1
 80115b2:	464b      	mov	r3, r9
 80115b4:	4640      	mov	r0, r8
 80115b6:	4649      	mov	r1, r9
 80115b8:	f7ef f82e 	bl	8000618 <__aeabi_dmul>
 80115bc:	a35e      	add	r3, pc, #376	; (adr r3, 8011738 <__ieee754_pow+0xa18>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	4604      	mov	r4, r0
 80115c4:	460d      	mov	r5, r1
 80115c6:	f7ef f827 	bl	8000618 <__aeabi_dmul>
 80115ca:	a35d      	add	r3, pc, #372	; (adr r3, 8011740 <__ieee754_pow+0xa20>)
 80115cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d0:	f7ee fe6a 	bl	80002a8 <__aeabi_dsub>
 80115d4:	4622      	mov	r2, r4
 80115d6:	462b      	mov	r3, r5
 80115d8:	f7ef f81e 	bl	8000618 <__aeabi_dmul>
 80115dc:	a35a      	add	r3, pc, #360	; (adr r3, 8011748 <__ieee754_pow+0xa28>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	f7ee fe63 	bl	80002ac <__adddf3>
 80115e6:	4622      	mov	r2, r4
 80115e8:	462b      	mov	r3, r5
 80115ea:	f7ef f815 	bl	8000618 <__aeabi_dmul>
 80115ee:	a358      	add	r3, pc, #352	; (adr r3, 8011750 <__ieee754_pow+0xa30>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	f7ee fe58 	bl	80002a8 <__aeabi_dsub>
 80115f8:	4622      	mov	r2, r4
 80115fa:	462b      	mov	r3, r5
 80115fc:	f7ef f80c 	bl	8000618 <__aeabi_dmul>
 8011600:	a355      	add	r3, pc, #340	; (adr r3, 8011758 <__ieee754_pow+0xa38>)
 8011602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011606:	f7ee fe51 	bl	80002ac <__adddf3>
 801160a:	4622      	mov	r2, r4
 801160c:	462b      	mov	r3, r5
 801160e:	f7ef f803 	bl	8000618 <__aeabi_dmul>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4640      	mov	r0, r8
 8011618:	4649      	mov	r1, r9
 801161a:	f7ee fe45 	bl	80002a8 <__aeabi_dsub>
 801161e:	4604      	mov	r4, r0
 8011620:	460d      	mov	r5, r1
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	4640      	mov	r0, r8
 8011628:	4649      	mov	r1, r9
 801162a:	f7ee fff5 	bl	8000618 <__aeabi_dmul>
 801162e:	2200      	movs	r2, #0
 8011630:	ec41 0b19 	vmov	d9, r0, r1
 8011634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011638:	4620      	mov	r0, r4
 801163a:	4629      	mov	r1, r5
 801163c:	f7ee fe34 	bl	80002a8 <__aeabi_dsub>
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	ec51 0b19 	vmov	r0, r1, d9
 8011648:	f7ef f910 	bl	800086c <__aeabi_ddiv>
 801164c:	4632      	mov	r2, r6
 801164e:	4604      	mov	r4, r0
 8011650:	460d      	mov	r5, r1
 8011652:	463b      	mov	r3, r7
 8011654:	4640      	mov	r0, r8
 8011656:	4649      	mov	r1, r9
 8011658:	f7ee ffde 	bl	8000618 <__aeabi_dmul>
 801165c:	4632      	mov	r2, r6
 801165e:	463b      	mov	r3, r7
 8011660:	f7ee fe24 	bl	80002ac <__adddf3>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4620      	mov	r0, r4
 801166a:	4629      	mov	r1, r5
 801166c:	f7ee fe1c 	bl	80002a8 <__aeabi_dsub>
 8011670:	4642      	mov	r2, r8
 8011672:	464b      	mov	r3, r9
 8011674:	f7ee fe18 	bl	80002a8 <__aeabi_dsub>
 8011678:	460b      	mov	r3, r1
 801167a:	4602      	mov	r2, r0
 801167c:	493a      	ldr	r1, [pc, #232]	; (8011768 <__ieee754_pow+0xa48>)
 801167e:	2000      	movs	r0, #0
 8011680:	f7ee fe12 	bl	80002a8 <__aeabi_dsub>
 8011684:	ec41 0b10 	vmov	d0, r0, r1
 8011688:	ee10 3a90 	vmov	r3, s1
 801168c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011694:	da2b      	bge.n	80116ee <__ieee754_pow+0x9ce>
 8011696:	4650      	mov	r0, sl
 8011698:	f000 f966 	bl	8011968 <scalbn>
 801169c:	ec51 0b10 	vmov	r0, r1, d0
 80116a0:	ec53 2b18 	vmov	r2, r3, d8
 80116a4:	f7ff bbed 	b.w	8010e82 <__ieee754_pow+0x162>
 80116a8:	4b30      	ldr	r3, [pc, #192]	; (801176c <__ieee754_pow+0xa4c>)
 80116aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80116ae:	429e      	cmp	r6, r3
 80116b0:	f77f af0c 	ble.w	80114cc <__ieee754_pow+0x7ac>
 80116b4:	4b2e      	ldr	r3, [pc, #184]	; (8011770 <__ieee754_pow+0xa50>)
 80116b6:	440b      	add	r3, r1
 80116b8:	4303      	orrs	r3, r0
 80116ba:	d009      	beq.n	80116d0 <__ieee754_pow+0x9b0>
 80116bc:	ec51 0b18 	vmov	r0, r1, d8
 80116c0:	2200      	movs	r2, #0
 80116c2:	2300      	movs	r3, #0
 80116c4:	f7ef fa1a 	bl	8000afc <__aeabi_dcmplt>
 80116c8:	3800      	subs	r0, #0
 80116ca:	bf18      	it	ne
 80116cc:	2001      	movne	r0, #1
 80116ce:	e447      	b.n	8010f60 <__ieee754_pow+0x240>
 80116d0:	4622      	mov	r2, r4
 80116d2:	462b      	mov	r3, r5
 80116d4:	f7ee fde8 	bl	80002a8 <__aeabi_dsub>
 80116d8:	4642      	mov	r2, r8
 80116da:	464b      	mov	r3, r9
 80116dc:	f7ef fa22 	bl	8000b24 <__aeabi_dcmpge>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	f43f aef3 	beq.w	80114cc <__ieee754_pow+0x7ac>
 80116e6:	e7e9      	b.n	80116bc <__ieee754_pow+0x99c>
 80116e8:	f04f 0a00 	mov.w	sl, #0
 80116ec:	e71a      	b.n	8011524 <__ieee754_pow+0x804>
 80116ee:	ec51 0b10 	vmov	r0, r1, d0
 80116f2:	4619      	mov	r1, r3
 80116f4:	e7d4      	b.n	80116a0 <__ieee754_pow+0x980>
 80116f6:	491c      	ldr	r1, [pc, #112]	; (8011768 <__ieee754_pow+0xa48>)
 80116f8:	2000      	movs	r0, #0
 80116fa:	f7ff bb30 	b.w	8010d5e <__ieee754_pow+0x3e>
 80116fe:	2000      	movs	r0, #0
 8011700:	2100      	movs	r1, #0
 8011702:	f7ff bb2c 	b.w	8010d5e <__ieee754_pow+0x3e>
 8011706:	4630      	mov	r0, r6
 8011708:	4639      	mov	r1, r7
 801170a:	f7ff bb28 	b.w	8010d5e <__ieee754_pow+0x3e>
 801170e:	9204      	str	r2, [sp, #16]
 8011710:	f7ff bb7a 	b.w	8010e08 <__ieee754_pow+0xe8>
 8011714:	2300      	movs	r3, #0
 8011716:	f7ff bb64 	b.w	8010de2 <__ieee754_pow+0xc2>
 801171a:	bf00      	nop
 801171c:	f3af 8000 	nop.w
 8011720:	00000000 	.word	0x00000000
 8011724:	3fe62e43 	.word	0x3fe62e43
 8011728:	fefa39ef 	.word	0xfefa39ef
 801172c:	3fe62e42 	.word	0x3fe62e42
 8011730:	0ca86c39 	.word	0x0ca86c39
 8011734:	be205c61 	.word	0xbe205c61
 8011738:	72bea4d0 	.word	0x72bea4d0
 801173c:	3e663769 	.word	0x3e663769
 8011740:	c5d26bf1 	.word	0xc5d26bf1
 8011744:	3ebbbd41 	.word	0x3ebbbd41
 8011748:	af25de2c 	.word	0xaf25de2c
 801174c:	3f11566a 	.word	0x3f11566a
 8011750:	16bebd93 	.word	0x16bebd93
 8011754:	3f66c16c 	.word	0x3f66c16c
 8011758:	5555553e 	.word	0x5555553e
 801175c:	3fc55555 	.word	0x3fc55555
 8011760:	3fe00000 	.word	0x3fe00000
 8011764:	000fffff 	.word	0x000fffff
 8011768:	3ff00000 	.word	0x3ff00000
 801176c:	4090cbff 	.word	0x4090cbff
 8011770:	3f6f3400 	.word	0x3f6f3400
 8011774:	652b82fe 	.word	0x652b82fe
 8011778:	3c971547 	.word	0x3c971547

0801177c <__ieee754_sqrt>:
 801177c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011780:	ec55 4b10 	vmov	r4, r5, d0
 8011784:	4e55      	ldr	r6, [pc, #340]	; (80118dc <__ieee754_sqrt+0x160>)
 8011786:	43ae      	bics	r6, r5
 8011788:	ee10 0a10 	vmov	r0, s0
 801178c:	ee10 3a10 	vmov	r3, s0
 8011790:	462a      	mov	r2, r5
 8011792:	4629      	mov	r1, r5
 8011794:	d110      	bne.n	80117b8 <__ieee754_sqrt+0x3c>
 8011796:	ee10 2a10 	vmov	r2, s0
 801179a:	462b      	mov	r3, r5
 801179c:	f7ee ff3c 	bl	8000618 <__aeabi_dmul>
 80117a0:	4602      	mov	r2, r0
 80117a2:	460b      	mov	r3, r1
 80117a4:	4620      	mov	r0, r4
 80117a6:	4629      	mov	r1, r5
 80117a8:	f7ee fd80 	bl	80002ac <__adddf3>
 80117ac:	4604      	mov	r4, r0
 80117ae:	460d      	mov	r5, r1
 80117b0:	ec45 4b10 	vmov	d0, r4, r5
 80117b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b8:	2d00      	cmp	r5, #0
 80117ba:	dc10      	bgt.n	80117de <__ieee754_sqrt+0x62>
 80117bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80117c0:	4330      	orrs	r0, r6
 80117c2:	d0f5      	beq.n	80117b0 <__ieee754_sqrt+0x34>
 80117c4:	b15d      	cbz	r5, 80117de <__ieee754_sqrt+0x62>
 80117c6:	ee10 2a10 	vmov	r2, s0
 80117ca:	462b      	mov	r3, r5
 80117cc:	ee10 0a10 	vmov	r0, s0
 80117d0:	f7ee fd6a 	bl	80002a8 <__aeabi_dsub>
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	f7ef f848 	bl	800086c <__aeabi_ddiv>
 80117dc:	e7e6      	b.n	80117ac <__ieee754_sqrt+0x30>
 80117de:	1512      	asrs	r2, r2, #20
 80117e0:	d074      	beq.n	80118cc <__ieee754_sqrt+0x150>
 80117e2:	07d4      	lsls	r4, r2, #31
 80117e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80117e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80117ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80117f0:	bf5e      	ittt	pl
 80117f2:	0fda      	lsrpl	r2, r3, #31
 80117f4:	005b      	lslpl	r3, r3, #1
 80117f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80117fa:	2400      	movs	r4, #0
 80117fc:	0fda      	lsrs	r2, r3, #31
 80117fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011802:	107f      	asrs	r7, r7, #1
 8011804:	005b      	lsls	r3, r3, #1
 8011806:	2516      	movs	r5, #22
 8011808:	4620      	mov	r0, r4
 801180a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801180e:	1886      	adds	r6, r0, r2
 8011810:	428e      	cmp	r6, r1
 8011812:	bfde      	ittt	le
 8011814:	1b89      	suble	r1, r1, r6
 8011816:	18b0      	addle	r0, r6, r2
 8011818:	18a4      	addle	r4, r4, r2
 801181a:	0049      	lsls	r1, r1, #1
 801181c:	3d01      	subs	r5, #1
 801181e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011822:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801182a:	d1f0      	bne.n	801180e <__ieee754_sqrt+0x92>
 801182c:	462a      	mov	r2, r5
 801182e:	f04f 0e20 	mov.w	lr, #32
 8011832:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011836:	4281      	cmp	r1, r0
 8011838:	eb06 0c05 	add.w	ip, r6, r5
 801183c:	dc02      	bgt.n	8011844 <__ieee754_sqrt+0xc8>
 801183e:	d113      	bne.n	8011868 <__ieee754_sqrt+0xec>
 8011840:	459c      	cmp	ip, r3
 8011842:	d811      	bhi.n	8011868 <__ieee754_sqrt+0xec>
 8011844:	f1bc 0f00 	cmp.w	ip, #0
 8011848:	eb0c 0506 	add.w	r5, ip, r6
 801184c:	da43      	bge.n	80118d6 <__ieee754_sqrt+0x15a>
 801184e:	2d00      	cmp	r5, #0
 8011850:	db41      	blt.n	80118d6 <__ieee754_sqrt+0x15a>
 8011852:	f100 0801 	add.w	r8, r0, #1
 8011856:	1a09      	subs	r1, r1, r0
 8011858:	459c      	cmp	ip, r3
 801185a:	bf88      	it	hi
 801185c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011860:	eba3 030c 	sub.w	r3, r3, ip
 8011864:	4432      	add	r2, r6
 8011866:	4640      	mov	r0, r8
 8011868:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801186c:	f1be 0e01 	subs.w	lr, lr, #1
 8011870:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011874:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011878:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801187c:	d1db      	bne.n	8011836 <__ieee754_sqrt+0xba>
 801187e:	430b      	orrs	r3, r1
 8011880:	d006      	beq.n	8011890 <__ieee754_sqrt+0x114>
 8011882:	1c50      	adds	r0, r2, #1
 8011884:	bf13      	iteet	ne
 8011886:	3201      	addne	r2, #1
 8011888:	3401      	addeq	r4, #1
 801188a:	4672      	moveq	r2, lr
 801188c:	f022 0201 	bicne.w	r2, r2, #1
 8011890:	1063      	asrs	r3, r4, #1
 8011892:	0852      	lsrs	r2, r2, #1
 8011894:	07e1      	lsls	r1, r4, #31
 8011896:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801189a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801189e:	bf48      	it	mi
 80118a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80118a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80118a8:	4614      	mov	r4, r2
 80118aa:	e781      	b.n	80117b0 <__ieee754_sqrt+0x34>
 80118ac:	0ad9      	lsrs	r1, r3, #11
 80118ae:	3815      	subs	r0, #21
 80118b0:	055b      	lsls	r3, r3, #21
 80118b2:	2900      	cmp	r1, #0
 80118b4:	d0fa      	beq.n	80118ac <__ieee754_sqrt+0x130>
 80118b6:	02cd      	lsls	r5, r1, #11
 80118b8:	d50a      	bpl.n	80118d0 <__ieee754_sqrt+0x154>
 80118ba:	f1c2 0420 	rsb	r4, r2, #32
 80118be:	fa23 f404 	lsr.w	r4, r3, r4
 80118c2:	1e55      	subs	r5, r2, #1
 80118c4:	4093      	lsls	r3, r2
 80118c6:	4321      	orrs	r1, r4
 80118c8:	1b42      	subs	r2, r0, r5
 80118ca:	e78a      	b.n	80117e2 <__ieee754_sqrt+0x66>
 80118cc:	4610      	mov	r0, r2
 80118ce:	e7f0      	b.n	80118b2 <__ieee754_sqrt+0x136>
 80118d0:	0049      	lsls	r1, r1, #1
 80118d2:	3201      	adds	r2, #1
 80118d4:	e7ef      	b.n	80118b6 <__ieee754_sqrt+0x13a>
 80118d6:	4680      	mov	r8, r0
 80118d8:	e7bd      	b.n	8011856 <__ieee754_sqrt+0xda>
 80118da:	bf00      	nop
 80118dc:	7ff00000 	.word	0x7ff00000

080118e0 <with_errno>:
 80118e0:	b570      	push	{r4, r5, r6, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	460d      	mov	r5, r1
 80118e6:	4616      	mov	r6, r2
 80118e8:	f7fc fa98 	bl	800de1c <__errno>
 80118ec:	4629      	mov	r1, r5
 80118ee:	6006      	str	r6, [r0, #0]
 80118f0:	4620      	mov	r0, r4
 80118f2:	bd70      	pop	{r4, r5, r6, pc}

080118f4 <xflow>:
 80118f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118f6:	4614      	mov	r4, r2
 80118f8:	461d      	mov	r5, r3
 80118fa:	b108      	cbz	r0, 8011900 <xflow+0xc>
 80118fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011900:	e9cd 2300 	strd	r2, r3, [sp]
 8011904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011908:	4620      	mov	r0, r4
 801190a:	4629      	mov	r1, r5
 801190c:	f7ee fe84 	bl	8000618 <__aeabi_dmul>
 8011910:	2222      	movs	r2, #34	; 0x22
 8011912:	b003      	add	sp, #12
 8011914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011918:	f7ff bfe2 	b.w	80118e0 <with_errno>

0801191c <__math_uflow>:
 801191c:	b508      	push	{r3, lr}
 801191e:	2200      	movs	r2, #0
 8011920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011924:	f7ff ffe6 	bl	80118f4 <xflow>
 8011928:	ec41 0b10 	vmov	d0, r0, r1
 801192c:	bd08      	pop	{r3, pc}

0801192e <__math_oflow>:
 801192e:	b508      	push	{r3, lr}
 8011930:	2200      	movs	r2, #0
 8011932:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011936:	f7ff ffdd 	bl	80118f4 <xflow>
 801193a:	ec41 0b10 	vmov	d0, r0, r1
 801193e:	bd08      	pop	{r3, pc}

08011940 <fabs>:
 8011940:	ec51 0b10 	vmov	r0, r1, d0
 8011944:	ee10 2a10 	vmov	r2, s0
 8011948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801194c:	ec43 2b10 	vmov	d0, r2, r3
 8011950:	4770      	bx	lr

08011952 <finite>:
 8011952:	b082      	sub	sp, #8
 8011954:	ed8d 0b00 	vstr	d0, [sp]
 8011958:	9801      	ldr	r0, [sp, #4]
 801195a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801195e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011962:	0fc0      	lsrs	r0, r0, #31
 8011964:	b002      	add	sp, #8
 8011966:	4770      	bx	lr

08011968 <scalbn>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	ec55 4b10 	vmov	r4, r5, d0
 801196e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011972:	4606      	mov	r6, r0
 8011974:	462b      	mov	r3, r5
 8011976:	b99a      	cbnz	r2, 80119a0 <scalbn+0x38>
 8011978:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801197c:	4323      	orrs	r3, r4
 801197e:	d036      	beq.n	80119ee <scalbn+0x86>
 8011980:	4b39      	ldr	r3, [pc, #228]	; (8011a68 <scalbn+0x100>)
 8011982:	4629      	mov	r1, r5
 8011984:	ee10 0a10 	vmov	r0, s0
 8011988:	2200      	movs	r2, #0
 801198a:	f7ee fe45 	bl	8000618 <__aeabi_dmul>
 801198e:	4b37      	ldr	r3, [pc, #220]	; (8011a6c <scalbn+0x104>)
 8011990:	429e      	cmp	r6, r3
 8011992:	4604      	mov	r4, r0
 8011994:	460d      	mov	r5, r1
 8011996:	da10      	bge.n	80119ba <scalbn+0x52>
 8011998:	a32b      	add	r3, pc, #172	; (adr r3, 8011a48 <scalbn+0xe0>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	e03a      	b.n	8011a16 <scalbn+0xae>
 80119a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80119a4:	428a      	cmp	r2, r1
 80119a6:	d10c      	bne.n	80119c2 <scalbn+0x5a>
 80119a8:	ee10 2a10 	vmov	r2, s0
 80119ac:	4620      	mov	r0, r4
 80119ae:	4629      	mov	r1, r5
 80119b0:	f7ee fc7c 	bl	80002ac <__adddf3>
 80119b4:	4604      	mov	r4, r0
 80119b6:	460d      	mov	r5, r1
 80119b8:	e019      	b.n	80119ee <scalbn+0x86>
 80119ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80119be:	460b      	mov	r3, r1
 80119c0:	3a36      	subs	r2, #54	; 0x36
 80119c2:	4432      	add	r2, r6
 80119c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80119c8:	428a      	cmp	r2, r1
 80119ca:	dd08      	ble.n	80119de <scalbn+0x76>
 80119cc:	2d00      	cmp	r5, #0
 80119ce:	a120      	add	r1, pc, #128	; (adr r1, 8011a50 <scalbn+0xe8>)
 80119d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119d4:	da1c      	bge.n	8011a10 <scalbn+0xa8>
 80119d6:	a120      	add	r1, pc, #128	; (adr r1, 8011a58 <scalbn+0xf0>)
 80119d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119dc:	e018      	b.n	8011a10 <scalbn+0xa8>
 80119de:	2a00      	cmp	r2, #0
 80119e0:	dd08      	ble.n	80119f4 <scalbn+0x8c>
 80119e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80119ee:	ec45 4b10 	vmov	d0, r4, r5
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80119f8:	da19      	bge.n	8011a2e <scalbn+0xc6>
 80119fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80119fe:	429e      	cmp	r6, r3
 8011a00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011a04:	dd0a      	ble.n	8011a1c <scalbn+0xb4>
 8011a06:	a112      	add	r1, pc, #72	; (adr r1, 8011a50 <scalbn+0xe8>)
 8011a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e2      	bne.n	80119d6 <scalbn+0x6e>
 8011a10:	a30f      	add	r3, pc, #60	; (adr r3, 8011a50 <scalbn+0xe8>)
 8011a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a16:	f7ee fdff 	bl	8000618 <__aeabi_dmul>
 8011a1a:	e7cb      	b.n	80119b4 <scalbn+0x4c>
 8011a1c:	a10a      	add	r1, pc, #40	; (adr r1, 8011a48 <scalbn+0xe0>)
 8011a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d0b8      	beq.n	8011998 <scalbn+0x30>
 8011a26:	a10e      	add	r1, pc, #56	; (adr r1, 8011a60 <scalbn+0xf8>)
 8011a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a2c:	e7b4      	b.n	8011998 <scalbn+0x30>
 8011a2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a32:	3236      	adds	r2, #54	; 0x36
 8011a34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011a38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	4b0c      	ldr	r3, [pc, #48]	; (8011a70 <scalbn+0x108>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	e7e8      	b.n	8011a16 <scalbn+0xae>
 8011a44:	f3af 8000 	nop.w
 8011a48:	c2f8f359 	.word	0xc2f8f359
 8011a4c:	01a56e1f 	.word	0x01a56e1f
 8011a50:	8800759c 	.word	0x8800759c
 8011a54:	7e37e43c 	.word	0x7e37e43c
 8011a58:	8800759c 	.word	0x8800759c
 8011a5c:	fe37e43c 	.word	0xfe37e43c
 8011a60:	c2f8f359 	.word	0xc2f8f359
 8011a64:	81a56e1f 	.word	0x81a56e1f
 8011a68:	43500000 	.word	0x43500000
 8011a6c:	ffff3cb0 	.word	0xffff3cb0
 8011a70:	3c900000 	.word	0x3c900000

08011a74 <_init>:
 8011a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a76:	bf00      	nop
 8011a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a7a:	bc08      	pop	{r3}
 8011a7c:	469e      	mov	lr, r3
 8011a7e:	4770      	bx	lr

08011a80 <_fini>:
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a82:	bf00      	nop
 8011a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a86:	bc08      	pop	{r3}
 8011a88:	469e      	mov	lr, r3
 8011a8a:	4770      	bx	lr
