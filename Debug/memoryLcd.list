
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f4  080074f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074fc  080074fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00003284  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200032fc  200032fc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138e6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9e  00000000  00000000  0003398e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f30  00000000  00000000  00037560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002458b  00000000  00000000  00038490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a83  00000000  00000000  0005ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db90b  00000000  00000000  0007049e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bda9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c70  00000000  00000000  0014bdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800624c 	.word	0x0800624c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800624c 	.word	0x0800624c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	4b5c      	ldr	r3, [pc, #368]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a5b      	ldr	r2, [pc, #364]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b59      	ldr	r3, [pc, #356]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	4b55      	ldr	r3, [pc, #340]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a54      	ldr	r2, [pc, #336]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b52      	ldr	r3, [pc, #328]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a46      	ldr	r2, [pc, #280]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a3f      	ldr	r2, [pc, #252]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000634:	f043 0310 	orr.w	r3, r3, #16
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <MX_GPIO_Init+0x18c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <MX_GPIO_Init+0x18c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a38      	ldr	r2, [pc, #224]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b36      	ldr	r3, [pc, #216]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x18c>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <MX_GPIO_Init+0x190>)
 8000684:	f001 fc4c 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f244 0181 	movw	r1, #16513	; 0x4081
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <MX_GPIO_Init+0x194>)
 8000690:	f001 fc46 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4828      	ldr	r0, [pc, #160]	; (800073c <MX_GPIO_Init+0x198>)
 800069a:	f001 fc41 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4822      	ldr	r0, [pc, #136]	; (8000740 <MX_GPIO_Init+0x19c>)
 80006b6:	f001 fa87 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0x190>)
 80006d2:	f001 fa79 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0x194>)
 80006f0:	f001 fa6a 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <MX_GPIO_Init+0x198>)
 800070c:	f001 fa5c 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_GPIO_Init+0x198>)
 8000724:	f001 fa50 	bl	8001bc8 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3730      	adds	r7, #48	; 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40021800 	.word	0x40021800
 8000740:	40020800 	.word	0x40020800

08000744 <getDataFromUart>:


//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1d19      	adds	r1, r3, #4
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <getDataFromUart+0x24>)
 800075a:	f003 fc18 	bl	8003f8e <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200032a4 	.word	0x200032a4

0800076c <initGps>:

gpsDevice initGps(UART_HandleTypeDef* uartPort){
 800076c:	b580      	push	{r7, lr}
 800076e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8000772:	af00      	add	r7, sp, #0
 8000774:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000778:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000782:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000786:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8000788:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800078c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8000790:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8000794:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	3304      	adds	r3, #4
 80007a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f004 fc58 	bl	800505e <strncpy>
	gpsModule.getData = &getDataFromUart;
 80007ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80007b2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <initGps+0x84>)
 80007b8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 80007bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80007c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80007ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80007ce:	4610      	mov	r0, r2
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 7318 	mov.w	r3, #608	; 0x260
 80007d6:	461a      	mov	r2, r3
 80007d8:	f004 fbd0 	bl	8004f7c <memcpy>
}
 80007dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80007e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08000745 	.word	0x08000745

080007f4 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	int msb = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b2f      	cmp	r3, #47	; 0x2f
 8000806:	bf8c      	ite	hi
 8000808:	2301      	movhi	r3, #1
 800080a:	2300      	movls	r3, #0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b39      	cmp	r3, #57	; 0x39
 8000814:	bf94      	ite	ls
 8000816:	2301      	movls	r3, #1
 8000818:	2300      	movhi	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4013      	ands	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <hexCharToInt+0x3a>
		msb = *value - 48;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b30      	subs	r3, #48	; 0x30
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e003      	b.n	8000836 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3b37      	subs	r3, #55	; 0x37
 8000834:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b2f      	cmp	r3, #47	; 0x2f
 8000842:	bf8c      	ite	hi
 8000844:	2301      	movhi	r3, #1
 8000846:	2300      	movls	r3, #0
 8000848:	b2da      	uxtb	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3301      	adds	r3, #1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b39      	cmp	r3, #57	; 0x39
 8000852:	bf94      	ite	ls
 8000854:	2301      	movls	r3, #1
 8000856:	2300      	movhi	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4013      	ands	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d005      	beq.n	800086e <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3b30      	subs	r3, #48	; 0x30
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	e004      	b.n	8000878 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3b37      	subs	r3, #55	; 0x37
 8000876:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
	return(result)
 8000882:	68fb      	ldr	r3, [r7, #12]
;}
 8000884:	4618      	mov	r0, r3
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <readSentence>:


void readSentence(char* buffer, gpsSentence* sentence){
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a4      	sub	sp, #144	; 0x90
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
//	char code[] = "BDGSV";
//	char code[] = "GNZDA";
//	char code[] = "GPGSV";
//	char code[] = "GNGSA";
//	char code[] = "GPTXT";
	char code[] = "GNGGA";
 800089a:	4a78      	ldr	r2, [pc, #480]	; (8000a7c <readSentence+0x1ec>)
 800089c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a4:	6018      	str	r0, [r3, #0]
 80008a6:	3304      	adds	r3, #4
 80008a8:	8019      	strh	r1, [r3, #0]
	char term[] = ",";
 80008aa:	232c      	movs	r3, #44	; 0x2c
 80008ac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

	char* pos = strstr(buffer, code);
 80008b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f004 fbe4 	bl	8005084 <strstr>
 80008bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if(pos != NULL){
 80008c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 80d5 	beq.w	8000a74 <readSentence+0x1e4>
		char* end = strchr(pos, 13); // carriage return
 80008ca:	210d      	movs	r1, #13
 80008cc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80008d0:	f004 fbb8 	bl	8005044 <strchr>
 80008d4:	67f8      	str	r0, [r7, #124]	; 0x7c
		uint8_t strl = end - pos;
 80008d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80008d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

		char myStr[84] = {0};
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	2250      	movs	r2, #80	; 0x50
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fb52 	bl	8004f98 <memset>
		strncpy(myStr, pos, 83);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2253      	movs	r2, #83	; 0x53
 80008fa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fbad 	bl	800505e <strncpy>

		// Checksum control
		char chksum = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t j = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		char tcode = 'b';
 8000910:	2362      	movs	r3, #98	; 0x62
 8000912:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 8000916:	e01c      	b.n	8000952 <readSentence+0xc2>
				tcode = 'c';
 8000918:	2363      	movs	r3, #99	; 0x63
 800091a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			if(j < 84){
 800091e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000922:	2b53      	cmp	r3, #83	; 0x53
 8000924:	d830      	bhi.n	8000988 <readSentence+0xf8>
				chksum ^= myStr[j];
 8000926:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800092a:	3390      	adds	r3, #144	; 0x90
 800092c:	443b      	add	r3, r7
 800092e:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 8000932:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000936:	4053      	eors	r3, r2
 8000938:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				tcode = 'd';
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
				j++;
 8000942:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000946:	3301      	adds	r3, #1
 8000948:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				tcode = 'e';
 800094c:	2365      	movs	r3, #101	; 0x65
 800094e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 8000952:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000956:	3390      	adds	r3, #144	; 0x90
 8000958:	443b      	add	r3, r7
 800095a:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800095e:	2b2a      	cmp	r3, #42	; 0x2a
 8000960:	bf14      	ite	ne
 8000962:	2301      	movne	r3, #1
 8000964:	2300      	moveq	r3, #0
 8000966:	b2da      	uxtb	r2, r3
 8000968:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800096c:	3390      	adds	r3, #144	; 0x90
 800096e:	443b      	add	r3, r7
 8000970:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4013      	ands	r3, r2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1c8      	bne.n	8000918 <readSentence+0x88>
 8000986:	e000      	b.n	800098a <readSentence+0xfa>
			} else {
				break;
 8000988:	bf00      	nop
			}

		}
		tcode = 'f';
 800098a:	2366      	movs	r3, #102	; 0x66
 800098c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		char* chkPos = strchr(pos, '*')+1;
 8000990:	212a      	movs	r1, #42	; 0x2a
 8000992:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8000996:	f004 fb55 	bl	8005044 <strchr>
 800099a:	4603      	mov	r3, r0
 800099c:	3301      	adds	r3, #1
 800099e:	677b      	str	r3, [r7, #116]	; 0x74
		char readChkSum = hexCharToInt(chkPos);
 80009a0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80009a2:	f7ff ff27 	bl	80007f4 <hexCharToInt>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if(readChkSum == chksum){
 80009ac:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80009b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d159      	bne.n	8000a6c <readSentence+0x1dc>
			sentence->valid = '+';
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	222b      	movs	r2, #43	; 0x2b
 80009bc:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
			int wordLen = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66fb      	str	r3, [r7, #108]	; 0x6c
			char* position = myStr;
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			int i = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while((*position != 10) & (i < 24)){
 80009d2:	e028      	b.n	8000a26 <readSentence+0x196>
				sscanf(position, "%[^,\r*]", sentence->words[i]);
 80009d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80009d8:	4613      	mov	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	3306      	adds	r3, #6
 80009e6:	461a      	mov	r2, r3
 80009e8:	4925      	ldr	r1, [pc, #148]	; (8000a80 <readSentence+0x1f0>)
 80009ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009ee:	f004 fafb 	bl	8004fe8 <siscanf>
				wordLen = strlen(sentence->words[i]);
 80009f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	3306      	adds	r3, #6
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fbf3 	bl	80001f0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				position = position + wordLen + 1;
 8000a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a10:	3301      	adds	r3, #1
 8000a12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000a16:	4413      	add	r3, r2
 8000a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				i++;
 8000a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a20:	3301      	adds	r3, #1
 8000a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while((*position != 10) & (i < 24)){
 8000a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a3a:	2b17      	cmp	r3, #23
 8000a3c:	bfd4      	ite	le
 8000a3e:	2301      	movle	r3, #1
 8000a40:	2300      	movgt	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4013      	ands	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1c3      	bne.n	80009d4 <readSentence+0x144>
			}
			sentence->wordNum = i-1;
 8000a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
			strncpy(&sentence->msgId, sentence->words[0], 5);
 8000a5c:	6838      	ldr	r0, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3306      	adds	r3, #6
 8000a62:	2205      	movs	r2, #5
 8000a64:	4619      	mov	r1, r3
 8000a66:	f004 fafa 	bl	800505e <strncpy>
		} else {
			sentence->valid = 'x';
		}
	}
}
 8000a6a:	e003      	b.n	8000a74 <readSentence+0x1e4>
			sentence->valid = 'x';
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2278      	movs	r2, #120	; 0x78
 8000a70:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
}
 8000a74:	bf00      	nop
 8000a76:	3790      	adds	r7, #144	; 0x90
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800627c 	.word	0x0800627c
 8000a80:	08006274 	.word	0x08006274

08000a84 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8000a9e:	e010      	b.n	8000ac2 <reverse_uint8+0x3e>
		result = result << 1;
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8000ab4:	7bba      	ldrb	r2, [r7, #14]
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	73bb      	strb	r3, [r7, #14]
		times--;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1eb      	bne.n	8000aa0 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	updateSetting(0);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f824 	bl	8000b2c <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	e014      	b.n	8000b14 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	e00b      	b.n	8000b08 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2232      	movs	r2, #50	; 0x32
 8000af4:	fb03 f202 	mul.w	r2, r3, r2
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <lcdClearBuffer+0x50>)
 8000afe:	21ff      	movs	r1, #255	; 0xff
 8000b00:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	80bb      	strh	r3, [r7, #4]
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	2b31      	cmp	r3, #49	; 0x31
 8000b0c:	d9f0      	bls.n	8000af0 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	3301      	adds	r3, #1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2bef      	cmp	r3, #239	; 0xef
 8000b18:	d9e7      	bls.n	8000aea <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f806 	bl	8000b2c <updateSetting>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000098 	.word	0x20000098

08000b2c <updateSetting>:

void updateSetting(uint8_t state){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <updateSetting+0x1c>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	7013      	strb	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000000 	.word	0x20000000

08000b4c <lcdPutChar>:
//		lcdBuffer[bufferLoc + 2] &= ~((dataBlock2 << (8 - offset)) | (dataBlock3 >> offset));
//		lcdBuffer[bufferLoc + 3] &= ~(dataBlock3 << (8 - offset));
//	}
//
//}
void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4603      	mov	r3, r0
 8000b56:	80fb      	strh	r3, [r7, #6]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	717b      	strb	r3, [r7, #5]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	795b      	ldrb	r3, [r3, #5]
 8000b64:	793a      	ldrb	r2, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d304      	bcc.n	8000b74 <lcdPutChar+0x28>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	793a      	ldrb	r2, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d902      	bls.n	8000b7a <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	79db      	ldrb	r3, [r3, #7]
 8000b78:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	885b      	ldrh	r3, [r3, #2]
 8000b90:	461a      	mov	r2, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b9a:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	75fb      	strb	r3, [r7, #23]
 8000ba0:	e09d      	b.n	8000cde <lcdPutChar+0x192>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8000ba2:	797a      	ldrb	r2, [r7, #5]
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0091      	lsls	r1, r2, #2
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4413      	add	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	7cfb      	ldrb	r3, [r7, #19]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8000bc6:	793b      	ldrb	r3, [r7, #4]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	7952      	ldrb	r2, [r2, #5]
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	8852      	ldrh	r2, [r2, #2]
 8000bd2:	fb03 f202 	mul.w	r2, r3, r2
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	7cb9      	ldrb	r1, [r7, #18]
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	3308      	adds	r3, #8
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	7d3b      	ldrb	r3, [r7, #20]
 8000bf0:	fa42 f303 	asr.w	r3, r2, r3
 8000bf4:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8000bf6:	8a3b      	ldrh	r3, [r7, #16]
 8000bf8:	4a3f      	ldr	r2, [pc, #252]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000bfa:	5cd3      	ldrb	r3, [r2, r3]
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	b25a      	sxtb	r2, r3
 8000c0a:	8a3b      	ldrh	r3, [r7, #16]
 8000c0c:	b2d1      	uxtb	r1, r2
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000c10:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	3308      	adds	r3, #8
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	7d3b      	ldrb	r3, [r7, #20]
 8000c20:	f1c3 0308 	rsb	r3, r3, #8
 8000c24:	21ff      	movs	r1, #255	; 0xff
 8000c26:	fa41 f303 	asr.w	r3, r1, r3
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000c32:	2301      	movs	r3, #1
 8000c34:	757b      	strb	r3, [r7, #21]
 8000c36:	e029      	b.n	8000c8c <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8000c38:	7d7a      	ldrb	r2, [r7, #21]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	7a1b      	ldrb	r3, [r3, #8]
 8000c44:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8000c46:	8a3a      	ldrh	r2, [r7, #16]
 8000c48:	7d7b      	ldrb	r3, [r7, #21]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	7db9      	ldrb	r1, [r7, #22]
 8000c54:	7d3b      	ldrb	r3, [r7, #20]
 8000c56:	f1c3 0308 	rsb	r3, r3, #8
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	b259      	sxtb	r1, r3
 8000c60:	7af8      	ldrb	r0, [r7, #11]
 8000c62:	7d3b      	ldrb	r3, [r7, #20]
 8000c64:	fa40 f303 	asr.w	r3, r0, r3
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4013      	ands	r3, r2
 8000c74:	b259      	sxtb	r1, r3
 8000c76:	8a3a      	ldrh	r2, [r7, #16]
 8000c78:	7d7b      	ldrb	r3, [r7, #21]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b2c9      	uxtb	r1, r1
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000c80:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8000c82:	7afb      	ldrb	r3, [r7, #11]
 8000c84:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000c86:	7d7b      	ldrb	r3, [r7, #21]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	757b      	strb	r3, [r7, #21]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	7d7a      	ldrb	r2, [r7, #21]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d9ce      	bls.n	8000c38 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width)>>3) + 1] &= ~(dataBlock << (8-offset));
 8000c9a:	8a3b      	ldrh	r3, [r7, #16]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	08d2      	lsrs	r2, r2, #3
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	7db9      	ldrb	r1, [r7, #22]
 8000cb0:	7d3b      	ldrb	r3, [r7, #20]
 8000cb2:	f1c3 0308 	rsb	r3, r3, #8
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	b259      	sxtb	r1, r3
 8000cc4:	8a3b      	ldrh	r3, [r7, #16]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	08d2      	lsrs	r2, r2, #3
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2c9      	uxtb	r1, r1
 8000cd4:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <lcdPutChar+0x1ac>)
 8000cd6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f4ff af5c 	bcc.w	8000ba2 <lcdPutChar+0x56>
	}

}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000098 	.word	0x20000098

08000cfc <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60ba      	str	r2, [r7, #8]
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4603      	mov	r3, r0
 8000d08:	81fb      	strh	r3, [r7, #14]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e01a      	b.n	8000d4a <lcdPutStr+0x4e>
		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	fb12 f303 	smulbb	r3, r2, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	4413      	add	r3, r2
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	7b7a      	ldrb	r2, [r7, #13]
 8000d30:	fb12 f303 	smulbb	r3, r2, r3
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f7ff ff04 	bl	8000b4c <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	3301      	adds	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
 8000d4a:	7dfc      	ldrb	r4, [r7, #23]
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff fa4f 	bl	80001f0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d3dd      	bcc.n	8000d14 <lcdPutStr+0x18>
//		  HAL_Delay(1);
		  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <lcdRefresh>:
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;

}
void lcdRefresh(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <lcdRefresh+0x7c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d032      	beq.n	8000dd8 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	481b      	ldr	r0, [pc, #108]	; (8000de4 <lcdRefresh+0x80>)
 8000d78:	f001 f8d2 	bl	8001f20 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e01c      	b.n	8000dbc <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fe7d 	bl	8000a84 <reverse_uint8>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <lcdRefresh+0x84>)
 8000d90:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8000d92:	2396      	movs	r3, #150	; 0x96
 8000d94:	2202      	movs	r2, #2
 8000d96:	4914      	ldr	r1, [pc, #80]	; (8000de8 <lcdRefresh+0x84>)
 8000d98:	4814      	ldr	r0, [pc, #80]	; (8000dec <lcdRefresh+0x88>)
 8000d9a:	f001 fe16 	bl	80029ca <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	2232      	movs	r2, #50	; 0x32
 8000da4:	fb02 f303 	mul.w	r3, r2, r3
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <lcdRefresh+0x8c>)
 8000daa:	1899      	adds	r1, r3, r2
 8000dac:	2396      	movs	r3, #150	; 0x96
 8000dae:	2232      	movs	r2, #50	; 0x32
 8000db0:	480e      	ldr	r0, [pc, #56]	; (8000dec <lcdRefresh+0x88>)
 8000db2:	f001 fe0a 	bl	80029ca <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	3301      	adds	r3, #1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2bf1      	cmp	r3, #241	; 0xf1
 8000dc0:	d9df      	bls.n	8000d82 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8000dc2:	2396      	movs	r3, #150	; 0x96
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	490b      	ldr	r1, [pc, #44]	; (8000df4 <lcdRefresh+0x90>)
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <lcdRefresh+0x88>)
 8000dca:	f001 fdfe 	bl	80029ca <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <lcdRefresh+0x80>)
 8000dd4:	f001 f8a4 	bl	8001f20 <HAL_GPIO_WritePin>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	40020000 	.word	0x40020000
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20003174 	.word	0x20003174
 8000df0:	20000098 	.word	0x20000098
 8000df4:	20000094 	.word	0x20000094

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	f2ad 4dfc 	subw	sp, sp, #1276	; 0x4fc
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fccc 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f8b6 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f7ff fbcc 	bl	80005a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e0c:	f000 fbc2 	bl	8001594 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000e10:	f000 f948 	bl	80010a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e14:	f000 fa78 	bl	8001308 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000e18:	f000 fb18 	bl	800144c <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8000e1c:	f000 fbe4 	bl	80015e8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8000e20:	484c      	ldr	r0, [pc, #304]	; (8000f54 <main+0x15c>)
 8000e22:	f001 ffd9 	bl	8002dd8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e26:	484b      	ldr	r0, [pc, #300]	; (8000f54 <main+0x15c>)
 8000e28:	f002 f826 	bl	8002e78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4849      	ldr	r0, [pc, #292]	; (8000f54 <main+0x15c>)
 8000e30:	f002 f8ec 	bl	800300c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8000e34:	4848      	ldr	r0, [pc, #288]	; (8000f58 <main+0x160>)
 8000e36:	f002 f81f 	bl	8002e78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  gpsDevice gpsModule;
  gpsModule = initGps(&huart6);
 8000e3a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000e3e:	f5a3 7419 	sub.w	r4, r3, #612	; 0x264
 8000e42:	463b      	mov	r3, r7
 8000e44:	4945      	ldr	r1, [pc, #276]	; (8000f5c <main+0x164>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc90 	bl	800076c <initGps>
 8000e4c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000e50:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8000e54:	4620      	mov	r0, r4
 8000e56:	4619      	mov	r1, r3
 8000e58:	f44f 7318 	mov.w	r3, #608	; 0x260
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f004 f88d 	bl	8004f7c <memcpy>
	  lcdClearBuffer();
 8000e62:	f7ff fe39 	bl	8000ad8 <lcdClearBuffer>
	  lcdRefresh();
 8000e66:	f7ff ff7d 	bl	8000d64 <lcdRefresh>
  while (1)
  {


//	  HAL_UART_Receive(&huart6, &buffer, 600, 1000);
	  gpsModule.getData(&gpsModule);
 8000e6a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000e6e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000e72:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8000e76:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
//	  test(&buffer, &now);
//	  readSentence(&gpsBuffer, &testSentence);
	  readSentence(&gpsModule.buffer, &testSentence);
 8000e7e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8000e82:	3304      	adds	r3, #4
 8000e84:	4936      	ldr	r1, [pc, #216]	; (8000f60 <main+0x168>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fd02 	bl	8000890 <readSentence>


	  lcdClearBuffer();
 8000e8c:	f7ff fe24 	bl	8000ad8 <lcdClearBuffer>
//	  lcdPutStr(0,0, now.timestr ,font13);
//	  lcdPutStr(0,1, now.datestr ,font13);
//	  lcdPutStr(0,2, now.chks ,font13);
	  char text[50] = { 0 };
 8000e90:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000e94:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	222e      	movs	r2, #46	; 0x2e
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 f878 	bl	8004f98 <memset>
//	  $GNGGA,204244.000,,,,,0,00,25.5,,,,,,*7E
	  sprintf(text, "MsgId: %s",  testSentence.msgId);
 8000ea8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000eac:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <main+0x168>)
 8000eae:	492d      	ldr	r1, [pc, #180]	; (8000f64 <main+0x16c>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 f879 	bl	8004fa8 <siprintf>
	  if(testSentence.valid == '+'){
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <main+0x168>)
 8000eb8:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 8000ebc:	2b2b      	cmp	r3, #43	; 0x2b
 8000ebe:	d13f      	bne.n	8000f40 <main+0x148>
		  lcdPutStr(0,0, text ,font13);
 8000ec0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <main+0x170>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff ff17 	bl	8000cfc <lcdPutStr>
		  for(uint8_t i = 0; i <= testSentence.wordNum; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
 8000ed4:	e022      	b.n	8000f1c <main+0x124>
			  sprintf(text, "Word no.%d: %s", i, testSentence.words[i]);
 8000ed6:	f897 14f7 	ldrb.w	r1, [r7, #1271]	; 0x4f7
 8000eda:	f897 24f7 	ldrb.w	r2, [r7, #1271]	; 0x4f7
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <main+0x168>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	3306      	adds	r3, #6
 8000eec:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	491e      	ldr	r1, [pc, #120]	; (8000f6c <main+0x174>)
 8000ef4:	f004 f858 	bl	8004fa8 <siprintf>
			  lcdPutStr(0,i+1, text ,font13);
 8000ef8:	f897 34f7 	ldrb.w	r3, [r7, #1271]	; 0x4f7
 8000efc:	1c59      	adds	r1, r3, #1
 8000efe:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <main+0x170>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fef9 	bl	8000cfc <lcdPutStr>
			  // only 11 lines can be displayed with this font
			  if(i >= 9) break;
 8000f0a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	; 0x4f7
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d80c      	bhi.n	8000f2c <main+0x134>
		  for(uint8_t i = 0; i <= testSentence.wordNum; i++){
 8000f12:	f897 34f7 	ldrb.w	r3, [r7, #1271]	; 0x4f7
 8000f16:	3301      	adds	r3, #1
 8000f18:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <main+0x168>)
 8000f1e:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 8000f22:	f897 24f7 	ldrb.w	r2, [r7, #1271]	; 0x4f7
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d9d5      	bls.n	8000ed6 <main+0xde>
 8000f2a:	e000      	b.n	8000f2e <main+0x136>
			  if(i >= 9) break;
 8000f2c:	bf00      	nop
		  }
		  lcdPutChar(180,0, testSentence.valid ,font13);
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <main+0x168>)
 8000f30:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <main+0x170>)
 8000f36:	2100      	movs	r1, #0
 8000f38:	20b4      	movs	r0, #180	; 0xb4
 8000f3a:	f7ff fe07 	bl	8000b4c <lcdPutChar>
 8000f3e:	e005      	b.n	8000f4c <main+0x154>
	  } else {
		  lcdPutStr(0,0, "Checksum invalid!!!" ,font13);
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <main+0x170>)
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <main+0x178>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fed8 	bl	8000cfc <lcdPutStr>
	  }
	  lcdRefresh();
 8000f4c:	f7ff ff0a 	bl	8000d64 <lcdRefresh>
  {
 8000f50:	e78b      	b.n	8000e6a <main+0x72>
 8000f52:	bf00      	nop
 8000f54:	200031d0 	.word	0x200031d0
 8000f58:	20003218 	.word	0x20003218
 8000f5c:	200032a4 	.word	0x200032a4
 8000f60:	20002f78 	.word	0x20002f78
 8000f64:	08006294 	.word	0x08006294
 8000f68:	080062d0 	.word	0x080062d0
 8000f6c:	080062a0 	.word	0x080062a0
 8000f70:	080062b0 	.word	0x080062b0

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f808 	bl	8004f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <SystemClock_Config+0xcc>)
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <SystemClock_Config+0xcc>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <SystemClock_Config+0xd0>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <SystemClock_Config+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe8:	23a8      	movs	r3, #168	; 0xa8
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 ffc5 	bl	8001f88 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001004:	f000 f840 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2105      	movs	r1, #5
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fa26 	bl	8002478 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001032:	f000 f829 	bl	8001088 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d103      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800105a:	2101      	movs	r1, #1
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800105e:	f000 ff78 	bl	8001f52 <HAL_GPIO_TogglePin>
//		lcdRefresh();

	}
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40014400 	.word	0x40014400
 8001070:	40020400 	.word	0x40020400

08001074 <HAL_UART_RxCpltCallback>:
char currChar, index;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
//		} else {
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//			HAL_UART_Receive_IT(&huart6, &znak,1);
//		}
	}
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <Error_Handler+0x18>)
 8001098:	f000 ff42 	bl	8001f20 <HAL_GPIO_WritePin>
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x14>
 800109e:	bf00      	nop
 80010a0:	40020400 	.word	0x40020400

080010a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_SPI1_Init+0x64>)
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_SPI1_Init+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_SPI1_Init+0x64>)
 80010b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SPI1_Init+0x64>)
 80010d8:	2220      	movs	r2, #32
 80010da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SPI1_Init+0x64>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_SPI1_Init+0x64>)
 80010f6:	f001 fbdf 	bl	80028b8 <HAL_SPI_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001100:	f7ff ffc2 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20003174 	.word	0x20003174
 800110c:	40013000 	.word	0x40013000

08001110 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_SPI_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_SPI_MspInit+0x88>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x88>)
 800113c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_SPI_MspInit+0x88>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_SPI_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_SPI_MspInit+0x88>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117a:	2305      	movs	r3, #5
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_SPI_MspInit+0x8c>)
 8001186:	f000 fd1f 	bl	8001bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40013000 	.word	0x40013000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	Error_Handler();
 80011fa:	f7ff ff45 	bl	8001088 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x8>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 fafe 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800124e:	f001 ffa5 	bl	800319c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001254:	f001 ffa2 	bl	800319c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200031d0 	.word	0x200031d0
 8001260:	20003218 	.word	0x20003218

08001264 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART6_IRQHandler+0x10>)
 800126a:	f002 ff33 	bl	80040d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200032a4 	.word	0x200032a4

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f003 fe3e 	bl	8004f28 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20030000 	.word	0x20030000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200031cc 	.word	0x200031cc
 80012e0:	20003300 	.word	0x20003300

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2220      	movs	r2, #32
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fe29 	bl	8004f98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001348:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <MX_TIM1_Init+0x140>)
 800134a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_TIM1_Init+0x13c>)
 800134e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_TIM1_Init+0x13c>)
 800135c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MX_TIM1_Init+0x13c>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001374:	4833      	ldr	r0, [pc, #204]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001376:	f001 fd2f 	bl	8002dd8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001380:	f7ff fe82 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800138e:	4619      	mov	r1, r3
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001392:	f002 f8cd 	bl	8003530 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800139c:	f7ff fe74 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013a0:	4828      	ldr	r0, [pc, #160]	; (8001444 <MX_TIM1_Init+0x13c>)
 80013a2:	f001 fdd9 	bl	8002f58 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013ac:	f7ff fe6c 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	4619      	mov	r1, r3
 80013be:	4821      	ldr	r0, [pc, #132]	; (8001444 <MX_TIM1_Init+0x13c>)
 80013c0:	f002 fcb6 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80013ca:	f7ff fe5d 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM1_Init+0x13c>)
 80013f4:	f001 ffda 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013fe:	f7ff fe43 	bl	8001088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001426:	f002 fcff 	bl	8003e28 <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001430:	f7ff fe2a 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM1_Init+0x13c>)
 8001436:	f000 f873 	bl	8001520 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3758      	adds	r7, #88	; 0x58
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200031d0 	.word	0x200031d0
 8001448:	40010000 	.word	0x40010000

0800144c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM10_Init+0x40>)
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_TIM10_Init+0x44>)
 8001454:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_TIM10_Init+0x40>)
 8001458:	f244 129f 	movw	r2, #16799	; 0x419f
 800145c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_TIM10_Init+0x40>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_TIM10_Init+0x40>)
 8001466:	f240 12f3 	movw	r2, #499	; 0x1f3
 800146a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_TIM10_Init+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_TIM10_Init+0x40>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_TIM10_Init+0x40>)
 800147a:	f001 fcad 	bl	8002dd8 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001484:	f7ff fe00 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20003218 	.word	0x20003218
 8001490:	40014400 	.word	0x40014400

08001494 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_TIM_Base_MspInit+0x80>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d116      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2019      	movs	r0, #25
 80014c8:	f000 fab5 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014cc:	2019      	movs	r0, #25
 80014ce:	f000 face 	bl	8001a6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80014d2:	e01a      	b.n	800150a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_TIM_Base_MspInit+0x88>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d115      	bne.n	800150a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0x84>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2019      	movs	r0, #25
 8001500:	f000 fa99 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001504:	2019      	movs	r0, #25
 8001506:	f000 fab2 	bl	8001a6e <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000
 8001518:	40023800 	.word	0x40023800
 800151c:	40014400 	.word	0x40014400

08001520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_TIM_MspPostInit+0x68>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11e      	bne.n	8001580 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_TIM_MspPostInit+0x6c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800155e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_TIM_MspPostInit+0x70>)
 800157c:	f000 fb24 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40010000 	.word	0x40010000
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000

08001594 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART3_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART3_UART_Init+0x4c>)
 80015cc:	f002 fc92 	bl	8003ef4 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f7ff fd57 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20003260 	.word	0x20003260
 80015e4:	40004800 	.word	0x40004800

080015e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_USART6_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 80015f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 800160e:	2204      	movs	r2, #4
 8001610:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART6_UART_Init+0x4c>)
 8001620:	f002 fc68 	bl	8003ef4 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f7ff fd2d 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200032a4 	.word	0x200032a4
 8001638:	40011400 	.word	0x40011400

0800163c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a36      	ldr	r2, [pc, #216]	; (8001734 <HAL_UART_MspInit+0xf8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12d      	bne.n	80016ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_UART_MspInit+0xfc>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_UART_MspInit+0xfc>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_UART_MspInit+0xfc>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_UART_MspInit+0xfc>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <HAL_UART_MspInit+0xfc>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_UART_MspInit+0xfc>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a8:	2307      	movs	r3, #7
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4822      	ldr	r0, [pc, #136]	; (800173c <HAL_UART_MspInit+0x100>)
 80016b4:	f000 fa88 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80016b8:	e038      	b.n	800172c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_UART_MspInit+0x104>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d133      	bne.n	800172c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6453      	str	r3, [r2, #68]	; 0x44
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_MspInit+0xfc>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fc:	23c0      	movs	r3, #192	; 0xc0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800170c:	2308      	movs	r3, #8
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <HAL_UART_MspInit+0x108>)
 8001718:	f000 fa56 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2047      	movs	r0, #71	; 0x47
 8001722:	f000 f988 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001726:	2047      	movs	r0, #71	; 0x47
 8001728:	f000 f9a1 	bl	8001a6e <HAL_NVIC_EnableIRQ>
}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40004800 	.word	0x40004800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40011400 	.word	0x40011400
 8001744:	40020800 	.word	0x40020800

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001772:	f7ff fdb7 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f003 fbdd 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fb3d 	bl	8000df8 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001780:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800178c:	08007504 	.word	0x08007504
  ldr r2, =_sbss
 8001790:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001794:	200032fc 	.word	0x200032fc

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f92b 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fce6 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f943 	bl	8001a8a <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f90b 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000008 	.word	0x20000008
 8001838:	20000010 	.word	0x20000010
 800183c:	2000000c 	.word	0x2000000c

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000010 	.word	0x20000010
 8001864:	200032e8 	.word	0x200032e8

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200032e8 	.word	0x200032e8

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff feda 	bl	8001868 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e052      	b.n	8001b7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0216 	bic.w	r2, r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_DMA_Abort+0x62>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b24:	e013      	b.n	8001b4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b26:	f7ff fe9f 	bl	8001868 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d90c      	bls.n	8001b4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e015      	b.n	8001b7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e4      	bne.n	8001b26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	223f      	movs	r2, #63	; 0x3f
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d004      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e00c      	b.n	8001bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e177      	b.n	8001ed4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8166 	bne.w	8001ece <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80c0 	beq.w	8001ece <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a65      	ldr	r2, [pc, #404]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_GPIO_Init+0x324>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a61      	ldr	r2, [pc, #388]	; (8001ef0 <HAL_GPIO_Init+0x328>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d037      	beq.n	8001e06 <HAL_GPIO_Init+0x23e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a57      	ldr	r2, [pc, #348]	; (8001ef8 <HAL_GPIO_Init+0x330>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d031      	beq.n	8001e02 <HAL_GPIO_Init+0x23a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a56      	ldr	r2, [pc, #344]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02b      	beq.n	8001dfe <HAL_GPIO_Init+0x236>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a55      	ldr	r2, [pc, #340]	; (8001f00 <HAL_GPIO_Init+0x338>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d025      	beq.n	8001dfa <HAL_GPIO_Init+0x232>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a54      	ldr	r2, [pc, #336]	; (8001f04 <HAL_GPIO_Init+0x33c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x22e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a53      	ldr	r2, [pc, #332]	; (8001f08 <HAL_GPIO_Init+0x340>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x22a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_GPIO_Init+0x344>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x348>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	; (8001f14 <HAL_GPIO_Init+0x34c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	; (8001f18 <HAL_GPIO_Init+0x350>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dde:	2309      	movs	r3, #9
 8001de0:	e012      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001de2:	230a      	movs	r3, #10
 8001de4:	e010      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001de6:	2308      	movs	r3, #8
 8001de8:	e00e      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00c      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dee:	2306      	movs	r3, #6
 8001df0:	e00a      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001df2:	2305      	movs	r3, #5
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001e06:	2300      	movs	r3, #0
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e18:	4935      	ldr	r1, [pc, #212]	; (8001ef0 <HAL_GPIO_Init+0x328>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a34      	ldr	r2, [pc, #208]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7a:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b0f      	cmp	r3, #15
 8001ed8:	f67f ae84 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40022400 	.word	0x40022400
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f64:	887a      	ldrh	r2, [r7, #2]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e267      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d075      	beq.n	8002092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d00c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d112      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	4b7e      	ldr	r3, [pc, #504]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d05b      	beq.n	8002090 <HAL_RCC_OscConfig+0x108>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d157      	bne.n	8002090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e242      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x74>
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8002020:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fc12 	bl	8001868 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fc0e 	bl	8001868 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e207      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5b      	ldr	r3, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xc0>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fbfe 	bl	8001868 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fbfa 	bl	8001868 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1f3      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0xe8>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c7      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <HAL_RCC_OscConfig+0x244>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff fbb3 	bl	8001868 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff fbaf 	bl	8001868 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a8      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4925      	ldr	r1, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x244>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fb92 	bl	8001868 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fb8e 	bl	8001868 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e187      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d036      	beq.n	80021e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x248>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff fb72 	bl	8001868 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fb6e 	bl	8001868 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e167      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x200>
 80021a6:	e01b      	b.n	80021e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x248>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fb5b 	bl	8001868 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	e00e      	b.n	80021d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b6:	f7ff fb57 	bl	8001868 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d907      	bls.n	80021d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e150      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	42470000 	.word	0x42470000
 80021d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ea      	bne.n	80021b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8097 	beq.w	800231c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b74      	ldr	r3, [pc, #464]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a73      	ldr	r2, [pc, #460]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7ff fb17 	bl	8001868 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7ff fb13 	bl	8001868 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e10c      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x2ea>
 8002264:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x324>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b05      	cmp	r3, #5
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x30c>
 800227a:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5e      	ldr	r2, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0x324>
 8002294:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a57      	ldr	r2, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff fad8 	bl	8001868 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7ff fad4 	bl	8001868 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0cb      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ee      	beq.n	80022bc <HAL_RCC_OscConfig+0x334>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7ff fac2 	bl	8001868 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7ff fabe 	bl	8001868 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0b5      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ee      	bne.n	80022e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a1 	beq.w	8002468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d05c      	beq.n	80023ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d141      	bne.n	80023be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff fa92 	bl	8001868 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff fa8e 	bl	8001868 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e087      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	491b      	ldr	r1, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7ff fa67 	bl	8001868 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff fa63 	bl	8001868 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e05c      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x416>
 80023bc:	e054      	b.n	8002468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fa50 	bl	8001868 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff fa4c 	bl	8001868 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e045      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x444>
 80023ea:	e03d      	b.n	8002468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e038      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40007000 	.word	0x40007000
 8002400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4ec>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d028      	beq.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d121      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11a      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800243a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0cc      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d90c      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d044      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d003      	beq.n	8002536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	2b03      	cmp	r3, #3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e067      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4934      	ldr	r1, [pc, #208]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7ff f97e 	bl	8001868 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7ff f97a 	bl	8001868 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d20c      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f8de 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00
 8002634:	40023800 	.word	0x40023800
 8002638:	0800732c 	.word	0x0800732c
 800263c:	20000008 	.word	0x20000008
 8002640:	2000000c 	.word	0x2000000c

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002648:	b094      	sub	sp, #80	; 0x50
 800264a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
 8002650:	2300      	movs	r3, #0
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002654:	2300      	movs	r3, #0
 8002656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d00d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 8002668:	2b08      	cmp	r3, #8
 800266a:	f200 80e1 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x3a>
 8002676:	e0db      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_GetSysClockFreq+0x204>)
 800267a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800267c:	e0db      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_GetSysClockFreq+0x208>)
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002682:	e0d8      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268e:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
 80026b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	0159      	lsls	r1, r3, #5
 80026c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c8:	0150      	lsls	r0, r2, #5
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4621      	mov	r1, r4
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	6139      	str	r1, [r7, #16]
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e8:	4659      	mov	r1, fp
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f2:	4651      	mov	r1, sl
 80026f4:	018a      	lsls	r2, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	ebb2 0801 	subs.w	r8, r2, r1
 80026fc:	4659      	mov	r1, fp
 80026fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002716:	4690      	mov	r8, r2
 8002718:	4699      	mov	r9, r3
 800271a:	4623      	mov	r3, r4
 800271c:	eb18 0303 	adds.w	r3, r8, r3
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	462b      	mov	r3, r5
 8002724:	eb49 0303 	adc.w	r3, r9, r3
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002736:	4629      	mov	r1, r5
 8002738:	024b      	lsls	r3, r1, #9
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002740:	4621      	mov	r1, r4
 8002742:	024a      	lsls	r2, r1, #9
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	2200      	movs	r2, #0
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
 800274e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002754:	f7fd fda4 	bl	80002a0 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002760:	e058      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	4618      	mov	r0, r3
 800276c:	4611      	mov	r1, r2
 800276e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800277c:	4642      	mov	r2, r8
 800277e:	464b      	mov	r3, r9
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	0159      	lsls	r1, r3, #5
 800278a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278e:	0150      	lsls	r0, r2, #5
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4641      	mov	r1, r8
 8002796:	ebb2 0a01 	subs.w	sl, r2, r1
 800279a:	4649      	mov	r1, r9
 800279c:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027b4:	ebb2 040a 	subs.w	r4, r2, sl
 80027b8:	eb63 050b 	sbc.w	r5, r3, fp
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	00eb      	lsls	r3, r5, #3
 80027c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ca:	00e2      	lsls	r2, r4, #3
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	4643      	mov	r3, r8
 80027d2:	18e3      	adds	r3, r4, r3
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	464b      	mov	r3, r9
 80027d8:	eb45 0303 	adc.w	r3, r5, r3
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ea:	4629      	mov	r1, r5
 80027ec:	028b      	lsls	r3, r1, #10
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f4:	4621      	mov	r1, r4
 80027f6:	028a      	lsls	r2, r1, #10
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	2200      	movs	r2, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	61fa      	str	r2, [r7, #28]
 8002804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002808:	f7fd fd4a 	bl	80002a0 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_GetSysClockFreq+0x200>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetSysClockFreq+0x204>)
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002838:	4618      	mov	r0, r3
 800283a:	3750      	adds	r7, #80	; 0x50
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	007a1200 	.word	0x007a1200

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_RCC_GetHCLKFreq+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000008 	.word	0x20000008

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff0 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	0800733c 	.word	0x0800733c

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002894:	f7ff ffdc 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0b5b      	lsrs	r3, r3, #13
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	0800733c 	.word	0x0800733c

080028b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07b      	b.n	80029c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028da:	d009      	beq.n	80028f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
 80028e2:	e005      	b.n	80028f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fc00 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	ea42 0103 	orr.w	r1, r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0104 	and.w	r1, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f003 0210 	and.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b088      	sub	sp, #32
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_SPI_Transmit+0x22>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e126      	b.n	8002c3a <HAL_SPI_Transmit+0x270>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f4:	f7fe ff38 	bl	8001868 <HAL_GetTick>
 80029f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a0e:	e10b      	b.n	8002c28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_Transmit+0x52>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a20:	e102      	b.n	8002c28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2203      	movs	r2, #3
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d10f      	bne.n	8002a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d007      	beq.n	8002aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	d14b      	bne.n	8002b4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_SPI_Transmit+0xf6>
 8002aba:	8afb      	ldrh	r3, [r7, #22]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d13e      	bne.n	8002b3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	1c9a      	adds	r2, r3, #2
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ae4:	e02b      	b.n	8002b3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d112      	bne.n	8002b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	1c9a      	adds	r2, r3, #2
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b18:	e011      	b.n	8002b3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b1a:	f7fe fea5 	bl	8001868 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d803      	bhi.n	8002b32 <HAL_SPI_Transmit+0x168>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Transmit+0x16e>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b3c:	e074      	b.n	8002c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ce      	bne.n	8002ae6 <HAL_SPI_Transmit+0x11c>
 8002b48:	e04c      	b.n	8002be4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_SPI_Transmit+0x18e>
 8002b52:	8afb      	ldrh	r3, [r7, #22]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d140      	bne.n	8002bda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b7e:	e02c      	b.n	8002bda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d113      	bne.n	8002bb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bb4:	e011      	b.n	8002bda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb6:	f7fe fe57 	bl	8001868 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d803      	bhi.n	8002bce <HAL_SPI_Transmit+0x204>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SPI_Transmit+0x20a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bd8:	e026      	b.n	8002c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1cd      	bne.n	8002b80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f8b3 	bl	8002d54 <SPI_EndRxTxTransaction>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e000      	b.n	8002c28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c54:	f7fe fe08 	bl	8001868 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c64:	f7fe fe00 	bl	8001868 <HAL_GetTick>
 8002c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	015b      	lsls	r3, r3, #5
 8002c70:	0d1b      	lsrs	r3, r3, #20
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	fb02 f303 	mul.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7a:	e054      	b.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d050      	beq.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c84:	f7fe fdf0 	bl	8001868 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d902      	bls.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d13d      	bne.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb2:	d111      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d004      	beq.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d107      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce0:	d10f      	bne.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e017      	b.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d19b      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000008 	.word	0x20000008

08002d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <SPI_EndRxTxTransaction+0x7c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <SPI_EndRxTxTransaction+0x80>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0d5b      	lsrs	r3, r3, #21
 8002d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d112      	bne.n	8002da6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7ff ff5a 	bl	8002c44 <SPI_WaitFlagStateUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e00f      	b.n	8002dc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d0f2      	beq.n	8002da6 <SPI_EndRxTxTransaction+0x52>
 8002dc0:	e000      	b.n	8002dc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dc2:	bf00      	nop
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	165e9f81 	.word	0x165e9f81

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fb48 	bl	8001494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fc7a 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e04e      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d01d      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x80>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d111      	bne.n	8002f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d010      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	e007      	b.n	8002f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40010400 	.word	0x40010400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40001800 	.word	0x40001800

08002f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f839 	bl	8002ff6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 fbba 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_TIM_PWM_Start+0x24>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e022      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d109      	bne.n	800304a <HAL_TIM_PWM_Start+0x3e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e015      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d109      	bne.n	8003064 <HAL_TIM_PWM_Start+0x58>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e008      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07c      	b.n	8003178 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0x82>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800308c:	e013      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d104      	bne.n	800309e <HAL_TIM_PWM_Start+0x92>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	e00b      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ac:	e003      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fe10 	bl	8003ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_TIM_PWM_Start+0x174>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_PWM_Start+0xcc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <HAL_TIM_PWM_Start+0x178>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_PWM_Start+0xd0>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_TIM_PWM_Start+0xd2>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_TIM_PWM_Start+0x174>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d01d      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_TIM_PWM_Start+0x17c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_TIM_PWM_Start+0x180>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_TIM_PWM_Start+0x184>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <HAL_TIM_PWM_Start+0x178>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_PWM_Start+0x188>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIM_PWM_Start+0x136>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_TIM_PWM_Start+0x18c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d111      	bne.n	8003166 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d010      	beq.n	8003176 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	e007      	b.n	8003176 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010000 	.word	0x40010000
 8003184:	40010400 	.word	0x40010400
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40014000 	.word	0x40014000
 8003198:	40001800 	.word	0x40001800

0800319c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0202 	mvn.w	r2, #2
 80031c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa77 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa69 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa7a 	bl	80036e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa4d 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa3f 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fa50 	bl	80036e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0208 	mvn.w	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa23 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa15 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa26 	bl	80036e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9f9 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9eb 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9fc 	bl	80036e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fe94 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fdca 	bl	8003ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9c1 	bl	80036fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0220 	mvn.w	r2, #32
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fd94 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ae      	b.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	f200 809f 	bhi.w	8003518 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003519 	.word	0x08003519
 80033e8:	08003519 	.word	0x08003519
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003455 	.word	0x08003455
 80033f4:	08003519 	.word	0x08003519
 80033f8:	08003519 	.word	0x08003519
 80033fc:	08003519 	.word	0x08003519
 8003400:	08003497 	.word	0x08003497
 8003404:	08003519 	.word	0x08003519
 8003408:	08003519 	.word	0x08003519
 800340c:	08003519 	.word	0x08003519
 8003410:	080034d7 	.word	0x080034d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fa18 	bl	8003850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0204 	bic.w	r2, r2, #4
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	619a      	str	r2, [r3, #24]
      break;
 8003452:	e064      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa68 	bl	8003930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]
      break;
 8003494:	e043      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fabd 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0208 	orr.w	r2, r2, #8
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
      break;
 80034d4:	e023      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fb11 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	61da      	str	r2, [r3, #28]
      break;
 8003516:	e002      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b4      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d03e      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0xd4>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	f200 8087 	bhi.w	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f000 8086 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x172>
 8003596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359a:	d87f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d01a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xa6>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d87b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d050      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x11a>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d877      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d03c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xfa>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d873      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d058      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x13a>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d86f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d064      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d86b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d060      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d867      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d05a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	e062      	b.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 fb5d 	bl	8003ca4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	609a      	str	r2, [r3, #8]
      break;
 8003602:	e04f      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f000 fb46 	bl	8003ca4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e03c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 faba 	bl	8003bb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2150      	movs	r1, #80	; 0x50
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fb13 	bl	8003c6e <TIM_ITRx_SetConfig>
      break;
 8003648:	e02c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	461a      	mov	r2, r3
 8003658:	f000 fad9 	bl	8003c0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fb03 	bl	8003c6e <TIM_ITRx_SetConfig>
      break;
 8003668:	e01c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	f000 fa9a 	bl	8003bb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4618      	mov	r0, r3
 8003684:	f000 faf3 	bl	8003c6e <TIM_ITRx_SetConfig>
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 faea 	bl	8003c6e <TIM_ITRx_SetConfig>
      break;
 800369a:	e003      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a40      	ldr	r2, [pc, #256]	; (8003824 <TIM_Base_SetConfig+0x114>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d00f      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <TIM_Base_SetConfig+0x118>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00b      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <TIM_Base_SetConfig+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3b      	ldr	r2, [pc, #236]	; (8003830 <TIM_Base_SetConfig+0x120>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <TIM_Base_SetConfig+0x124>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d108      	bne.n	8003762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <TIM_Base_SetConfig+0x114>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02b      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d027      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <TIM_Base_SetConfig+0x118>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d023      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <TIM_Base_SetConfig+0x11c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01f      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <TIM_Base_SetConfig+0x120>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01b      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <TIM_Base_SetConfig+0x124>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d017      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <TIM_Base_SetConfig+0x128>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <TIM_Base_SetConfig+0x12c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <TIM_Base_SetConfig+0x130>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a25      	ldr	r2, [pc, #148]	; (8003844 <TIM_Base_SetConfig+0x134>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a24      	ldr	r2, [pc, #144]	; (8003848 <TIM_Base_SetConfig+0x138>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <TIM_Base_SetConfig+0x13c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <TIM_Base_SetConfig+0x114>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0xf8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0c      	ldr	r2, [pc, #48]	; (8003834 <TIM_Base_SetConfig+0x124>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40010400 	.word	0x40010400
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800
 8003844:	40001800 	.word	0x40001800
 8003848:	40001c00 	.word	0x40001c00
 800384c:	40002000 	.word	0x40002000

08003850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 0302 	bic.w	r3, r3, #2
 8003898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <TIM_OC1_SetConfig+0xd8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_OC1_SetConfig+0x64>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <TIM_OC1_SetConfig+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <TIM_OC1_SetConfig+0xd8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_OC1_SetConfig+0x8e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC1_SetConfig+0xdc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40010000 	.word	0x40010000
 800392c:	40010400 	.word	0x40010400

08003930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0210 	bic.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <TIM_OC2_SetConfig+0xe4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_OC2_SetConfig+0x68>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <TIM_OC2_SetConfig+0xe8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10d      	bne.n	80039b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC2_SetConfig+0xe4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC2_SetConfig+0x94>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC2_SetConfig+0xe8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d113      	bne.n	80039ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40010400 	.word	0x40010400

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <TIM_OC3_SetConfig+0xe0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_OC3_SetConfig+0x66>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <TIM_OC3_SetConfig+0xe0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_OC3_SetConfig+0x92>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d113      	bne.n	8003ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <TIM_OC4_SetConfig+0xa4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC4_SetConfig+0x68>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a11      	ldr	r2, [pc, #68]	; (8003bac <TIM_OC4_SetConfig+0xa8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d109      	bne.n	8003b80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40010400 	.word	0x40010400

08003bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0201 	bic.w	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 030a 	bic.w	r3, r3, #10
 8003bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0210 	bic.w	r2, r3, #16
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f043 0307 	orr.w	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	401a      	ands	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e05a      	b.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d01d      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10c      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40001800 	.word	0x40001800

08003e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e03d      	b.n	8003ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03f      	b.n	8003f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fb8e 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fd81 	bl	8004a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	; 0x28
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	f040 808c 	bne.w	80040c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Receive+0x2e>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e084      	b.n	80040ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Receive+0x40>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e07d      	b.n	80040ca <HAL_UART_Receive+0x13c>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2222      	movs	r2, #34	; 0x22
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fea:	f7fd fc3d 	bl	8001868 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d108      	bne.n	8004018 <HAL_UART_Receive+0x8a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e003      	b.n	8004020 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004028:	e043      	b.n	80040b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2120      	movs	r1, #32
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fafb 	bl	8004630 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e042      	b.n	80040ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	b29a      	uxth	r2, r3
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	3302      	adds	r3, #2
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e01f      	b.n	80040a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d007      	beq.n	800407e <HAL_UART_Receive+0xf0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_UART_Receive+0xfe>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e008      	b.n	800409e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004098:	b2da      	uxtb	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1b6      	bne.n	800402a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0ba      	sub	sp, #232	; 0xe8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_UART_IRQHandler+0x66>
 8004126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fbc9 	bl	80048ca <UART_Receive_IT>
      return;
 8004138:	e256      	b.n	80045e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800413a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80de 	beq.w	8004300 <HAL_UART_IRQHandler+0x22c>
 8004144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004154:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80d1 	beq.w	8004300 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_UART_IRQHandler+0xae>
 800416a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_UART_IRQHandler+0xd2>
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0202 	orr.w	r2, r3, #2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_UART_IRQHandler+0xf6>
 80041b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f043 0204 	orr.w	r2, r3, #4
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d011      	beq.n	80041fa <HAL_UART_IRQHandler+0x126>
 80041d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0208 	orr.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 81ed 	beq.w	80045de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_UART_IRQHandler+0x14e>
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fb54 	bl	80048ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <HAL_UART_IRQHandler+0x17a>
 8004246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04f      	beq.n	80042ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa5c 	bl	800470c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d141      	bne.n	80042e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800427c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800428e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800429a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1d9      	bne.n	8004262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d013      	beq.n	80042de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_UART_IRQHandler+0x3dc>)
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fd fc5d 	bl	8001b82 <HAL_DMA_Abort_IT>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d8:	4610      	mov	r0, r2
 80042da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e00e      	b.n	80042fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f990 	bl	8004604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	e00a      	b.n	80042fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f98c 	bl	8004604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	e006      	b.n	80042fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f988 	bl	8004604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042fa:	e170      	b.n	80045de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	bf00      	nop
    return;
 80042fe:	e16e      	b.n	80045de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	2b01      	cmp	r3, #1
 8004306:	f040 814a 	bne.w	800459e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8143 	beq.w	800459e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 813c 	beq.w	800459e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	f040 80b4 	bne.w	80044b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8140 	beq.w	80045e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436a:	429a      	cmp	r2, r3
 800436c:	f080 8139 	bcs.w	80045e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004376:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	f000 8088 	beq.w	8004496 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800439c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1d9      	bne.n	8004386 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e1      	bne.n	80043d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e3      	bne.n	800440e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004478:	65ba      	str	r2, [r7, #88]	; 0x58
 800447a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800447e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e3      	bne.n	8004454 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd fb06 	bl	8001aa2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8b6 	bl	8004618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ac:	e099      	b.n	80045e2 <HAL_UART_IRQHandler+0x50e>
 80044ae:	bf00      	nop
 80044b0:	080047d3 	.word	0x080047d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 808b 	beq.w	80045e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8086 	beq.w	80045e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e3      	bne.n	80044da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	623b      	str	r3, [r7, #32]
   return(result);
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004536:	633a      	str	r2, [r7, #48]	; 0x30
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e3      	bne.n	8004512 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60fb      	str	r3, [r7, #12]
   return(result);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e3      	bne.n	8004558 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f83e 	bl	8004618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800459c:	e023      	b.n	80045e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_UART_IRQHandler+0x4ea>
 80045aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f91f 	bl	80047fa <UART_Transmit_IT>
    return;
 80045bc:	e014      	b.n	80045e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00e      	beq.n	80045e8 <HAL_UART_IRQHandler+0x514>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f95f 	bl	800489a <UART_EndTransmit_IT>
    return;
 80045dc:	e004      	b.n	80045e8 <HAL_UART_IRQHandler+0x514>
    return;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <HAL_UART_IRQHandler+0x514>
      return;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_UART_IRQHandler+0x514>
      return;
 80045e6:	bf00      	nop
  }
}
 80045e8:	37e8      	adds	r7, #232	; 0xe8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop

080045f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b090      	sub	sp, #64	; 0x40
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004640:	e050      	b.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d04c      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <UART_WaitOnFlagUntilTimeout+0x30>
 8004650:	f7fd f90a 	bl	8001868 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465c:	429a      	cmp	r2, r3
 800465e:	d241      	bcs.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004680:	637a      	str	r2, [r7, #52]	; 0x34
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	613b      	str	r3, [r7, #16]
   return(result);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b4:	623a      	str	r2, [r7, #32]
 80046b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e00f      	b.n	8004704 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d09f      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3740      	adds	r7, #64	; 0x40
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b095      	sub	sp, #84	; 0x54
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004734:	643a      	str	r2, [r7, #64]	; 0x40
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800473a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	61fb      	str	r3, [r7, #28]
   return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800476e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e5      	bne.n	8004748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	2b01      	cmp	r3, #1
 8004782:	d119      	bne.n	80047b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	60bb      	str	r3, [r7, #8]
   return(result);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0310 	bic.w	r3, r3, #16
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a4:	61ba      	str	r2, [r7, #24]
 80047a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	613b      	str	r3, [r7, #16]
   return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047c6:	bf00      	nop
 80047c8:	3754      	adds	r7, #84	; 0x54
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ff09 	bl	8004604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b21      	cmp	r3, #33	; 0x21
 800480c:	d13e      	bne.n	800488c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d114      	bne.n	8004842 <UART_Transmit_IT+0x48>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]
 8004840:	e008      	b.n	8004854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6211      	str	r1, [r2, #32]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4619      	mov	r1, r3
 8004862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fe98 	bl	80045f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08c      	sub	sp, #48	; 0x30
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b22      	cmp	r3, #34	; 0x22
 80048dc:	f040 80ab 	bne.w	8004a36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e8:	d117      	bne.n	800491a <UART_Receive_IT+0x50>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d113      	bne.n	800491a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	b29a      	uxth	r2, r3
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e026      	b.n	8004968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d007      	beq.n	800493e <UART_Receive_IT+0x74>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <UART_Receive_IT+0x82>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e008      	b.n	800495e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004958:	b2da      	uxtb	r2, r3
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004978:	2b00      	cmp	r3, #0
 800497a:	d15a      	bne.n	8004a32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0220 	bic.w	r2, r2, #32
 800498a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800499a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d135      	bne.n	8004a28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	613b      	str	r3, [r7, #16]
   return(result);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	623a      	str	r2, [r7, #32]
 80049e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69f9      	ldr	r1, [r7, #28]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d10a      	bne.n	8004a1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fdf9 	bl	8004618 <HAL_UARTEx_RxEventCallback>
 8004a26:	e002      	b.n	8004a2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fc fb23 	bl	8001074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e002      	b.n	8004a38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3730      	adds	r7, #48	; 0x30
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b0c0      	sub	sp, #256	; 0x100
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	68d9      	ldr	r1, [r3, #12]
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	ea40 0301 	orr.w	r3, r0, r1
 8004a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a98:	f021 010c 	bic.w	r1, r1, #12
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	6999      	ldr	r1, [r3, #24]
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	ea40 0301 	orr.w	r3, r0, r1
 8004ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <UART_SetConfig+0x2cc>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d005      	beq.n	8004ae0 <UART_SetConfig+0xa0>
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b8d      	ldr	r3, [pc, #564]	; (8004d10 <UART_SetConfig+0x2d0>)
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d104      	bne.n	8004aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7fd fed6 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8004ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae8:	e003      	b.n	8004af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aea:	f7fd febd 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8004aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	f040 810c 	bne.w	8004d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	1891      	adds	r1, r2, r2
 8004b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b1a:	415b      	adcs	r3, r3
 8004b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b22:	4621      	mov	r1, r4
 8004b24:	eb12 0801 	adds.w	r8, r2, r1
 8004b28:	4629      	mov	r1, r5
 8004b2a:	eb43 0901 	adc.w	r9, r3, r1
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b42:	4690      	mov	r8, r2
 8004b44:	4699      	mov	r9, r3
 8004b46:	4623      	mov	r3, r4
 8004b48:	eb18 0303 	adds.w	r3, r8, r3
 8004b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b50:	462b      	mov	r3, r5
 8004b52:	eb49 0303 	adc.w	r3, r9, r3
 8004b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b6e:	460b      	mov	r3, r1
 8004b70:	18db      	adds	r3, r3, r3
 8004b72:	653b      	str	r3, [r7, #80]	; 0x50
 8004b74:	4613      	mov	r3, r2
 8004b76:	eb42 0303 	adc.w	r3, r2, r3
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b84:	f7fb fb8c 	bl	80002a0 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	011c      	lsls	r4, r3, #4
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb8:	4641      	mov	r1, r8
 8004bba:	eb12 0a01 	adds.w	sl, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd8:	4692      	mov	sl, r2
 8004bda:	469b      	mov	fp, r3
 8004bdc:	4643      	mov	r3, r8
 8004bde:	eb1a 0303 	adds.w	r3, sl, r3
 8004be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c04:	460b      	mov	r3, r1
 8004c06:	18db      	adds	r3, r3, r3
 8004c08:	643b      	str	r3, [r7, #64]	; 0x40
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
 8004c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c1a:	f7fb fb41 	bl	80002a0 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	4b3b      	ldr	r3, [pc, #236]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004c26:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2264      	movs	r2, #100	; 0x64
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	1acb      	subs	r3, r1, r3
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c48:	441c      	add	r4, r3
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c64:	415b      	adcs	r3, r3
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	1851      	adds	r1, r2, r1
 8004c70:	6339      	str	r1, [r7, #48]	; 0x30
 8004c72:	4649      	mov	r1, r9
 8004c74:	414b      	adcs	r3, r1
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c84:	4659      	mov	r1, fp
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4651      	mov	r1, sl
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	18db      	adds	r3, r3, r3
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cd6:	f7fb fae3 	bl	80002a0 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <UART_SetConfig+0x2d4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 0207 	and.w	r2, r3, #7
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4422      	add	r2, r4
 8004d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d08:	e105      	b.n	8004f16 <UART_SetConfig+0x4d6>
 8004d0a:	bf00      	nop
 8004d0c:	40011000 	.word	0x40011000
 8004d10:	40011400 	.word	0x40011400
 8004d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	6239      	str	r1, [r7, #32]
 8004d32:	415b      	adcs	r3, r3
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
 8004d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	1854      	adds	r4, r2, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	eb43 0501 	adc.w	r5, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	00eb      	lsls	r3, r5, #3
 8004d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d52:	00e2      	lsls	r2, r4, #3
 8004d54:	4614      	mov	r4, r2
 8004d56:	461d      	mov	r5, r3
 8004d58:	4643      	mov	r3, r8
 8004d5a:	18e3      	adds	r3, r4, r3
 8004d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d60:	464b      	mov	r3, r9
 8004d62:	eb45 0303 	adc.w	r3, r5, r3
 8004d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d86:	4629      	mov	r1, r5
 8004d88:	008b      	lsls	r3, r1, #2
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d90:	4621      	mov	r1, r4
 8004d92:	008a      	lsls	r2, r1, #2
 8004d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d98:	f7fb fa82 	bl	80002a0 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b60      	ldr	r3, [pc, #384]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004da2:	fba3 2302 	umull	r2, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	011c      	lsls	r4, r3, #4
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	61b9      	str	r1, [r7, #24]
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dcc:	4641      	mov	r1, r8
 8004dce:	1851      	adds	r1, r2, r1
 8004dd0:	6139      	str	r1, [r7, #16]
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	414b      	adcs	r3, r1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de4:	4659      	mov	r1, fp
 8004de6:	00cb      	lsls	r3, r1, #3
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dee:	4651      	mov	r1, sl
 8004df0:	00ca      	lsls	r2, r1, #3
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e00:	464b      	mov	r3, r9
 8004e02:	460a      	mov	r2, r1
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e24:	4649      	mov	r1, r9
 8004e26:	008b      	lsls	r3, r1, #2
 8004e28:	4641      	mov	r1, r8
 8004e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2e:	4641      	mov	r1, r8
 8004e30:	008a      	lsls	r2, r1, #2
 8004e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e36:	f7fb fa33 	bl	80002a0 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a34      	ldr	r2, [pc, #208]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5e:	441c      	add	r4, r3
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	673b      	str	r3, [r7, #112]	; 0x70
 8004e68:	677a      	str	r2, [r7, #116]	; 0x74
 8004e6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e6e:	4642      	mov	r2, r8
 8004e70:	464b      	mov	r3, r9
 8004e72:	1891      	adds	r1, r2, r2
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	415b      	adcs	r3, r3
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7e:	4641      	mov	r1, r8
 8004e80:	1851      	adds	r1, r2, r1
 8004e82:	6039      	str	r1, [r7, #0]
 8004e84:	4649      	mov	r1, r9
 8004e86:	414b      	adcs	r3, r1
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e96:	4659      	mov	r1, fp
 8004e98:	00cb      	lsls	r3, r1, #3
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	00ca      	lsls	r2, r1, #3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4642      	mov	r2, r8
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec4:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	008b      	lsls	r3, r1, #2
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004edc:	4641      	mov	r1, r8
 8004ede:	008a      	lsls	r2, r1, #2
 8004ee0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ee4:	f7fb f9dc 	bl	80002a0 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004eee:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2164      	movs	r1, #100	; 0x64
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	3332      	adds	r3, #50	; 0x32
 8004f00:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <UART_SetConfig+0x4e4>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4422      	add	r2, r4
 8004f14:	609a      	str	r2, [r3, #8]
}
 8004f16:	bf00      	nop
 8004f18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f22:	bf00      	nop
 8004f24:	51eb851f 	.word	0x51eb851f

08004f28 <__errno>:
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <__errno+0x8>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000014 	.word	0x20000014

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4d0d      	ldr	r5, [pc, #52]	; (8004f6c <__libc_init_array+0x38>)
 8004f38:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	4d0b      	ldr	r5, [pc, #44]	; (8004f74 <__libc_init_array+0x40>)
 8004f46:	4c0c      	ldr	r4, [pc, #48]	; (8004f78 <__libc_init_array+0x44>)
 8004f48:	f001 f980 	bl	800624c <_init>
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	2600      	movs	r6, #0
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	080074fc 	.word	0x080074fc
 8004f70:	080074fc 	.word	0x080074fc
 8004f74:	080074fc 	.word	0x080074fc
 8004f78:	08007500 	.word	0x08007500

08004f7c <memcpy>:
 8004f7c:	440a      	add	r2, r1
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f84:	d100      	bne.n	8004f88 <memcpy+0xc>
 8004f86:	4770      	bx	lr
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f92:	4291      	cmp	r1, r2
 8004f94:	d1f9      	bne.n	8004f8a <memcpy+0xe>
 8004f96:	bd10      	pop	{r4, pc}

08004f98 <memset>:
 8004f98:	4402      	add	r2, r0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d100      	bne.n	8004fa2 <memset+0xa>
 8004fa0:	4770      	bx	lr
 8004fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa6:	e7f9      	b.n	8004f9c <memset+0x4>

08004fa8 <siprintf>:
 8004fa8:	b40e      	push	{r1, r2, r3}
 8004faa:	b500      	push	{lr}
 8004fac:	b09c      	sub	sp, #112	; 0x70
 8004fae:	ab1d      	add	r3, sp, #116	; 0x74
 8004fb0:	9002      	str	r0, [sp, #8]
 8004fb2:	9006      	str	r0, [sp, #24]
 8004fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fb8:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <siprintf+0x38>)
 8004fba:	9107      	str	r1, [sp, #28]
 8004fbc:	9104      	str	r1, [sp, #16]
 8004fbe:	4909      	ldr	r1, [pc, #36]	; (8004fe4 <siprintf+0x3c>)
 8004fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	a902      	add	r1, sp, #8
 8004fcc:	f000 f9ac 	bl	8005328 <_svfiprintf_r>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	b01c      	add	sp, #112	; 0x70
 8004fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fdc:	b003      	add	sp, #12
 8004fde:	4770      	bx	lr
 8004fe0:	20000014 	.word	0x20000014
 8004fe4:	ffff0208 	.word	0xffff0208

08004fe8 <siscanf>:
 8004fe8:	b40e      	push	{r1, r2, r3}
 8004fea:	b510      	push	{r4, lr}
 8004fec:	b09f      	sub	sp, #124	; 0x7c
 8004fee:	ac21      	add	r4, sp, #132	; 0x84
 8004ff0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004ff4:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ff8:	9201      	str	r2, [sp, #4]
 8004ffa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004ffe:	9004      	str	r0, [sp, #16]
 8005000:	9008      	str	r0, [sp, #32]
 8005002:	f7fb f8f5 	bl	80001f0 <strlen>
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <siscanf+0x50>)
 8005008:	9005      	str	r0, [sp, #20]
 800500a:	9009      	str	r0, [sp, #36]	; 0x24
 800500c:	930d      	str	r3, [sp, #52]	; 0x34
 800500e:	480b      	ldr	r0, [pc, #44]	; (800503c <siscanf+0x54>)
 8005010:	9a01      	ldr	r2, [sp, #4]
 8005012:	6800      	ldr	r0, [r0, #0]
 8005014:	9403      	str	r4, [sp, #12]
 8005016:	2300      	movs	r3, #0
 8005018:	9311      	str	r3, [sp, #68]	; 0x44
 800501a:	9316      	str	r3, [sp, #88]	; 0x58
 800501c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005020:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005024:	a904      	add	r1, sp, #16
 8005026:	4623      	mov	r3, r4
 8005028:	f000 fad8 	bl	80055dc <__ssvfiscanf_r>
 800502c:	b01f      	add	sp, #124	; 0x7c
 800502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005032:	b003      	add	sp, #12
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	08005041 	.word	0x08005041
 800503c:	20000014 	.word	0x20000014

08005040 <__seofread>:
 8005040:	2000      	movs	r0, #0
 8005042:	4770      	bx	lr

08005044 <strchr>:
 8005044:	b2c9      	uxtb	r1, r1
 8005046:	4603      	mov	r3, r0
 8005048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800504c:	b11a      	cbz	r2, 8005056 <strchr+0x12>
 800504e:	428a      	cmp	r2, r1
 8005050:	d1f9      	bne.n	8005046 <strchr+0x2>
 8005052:	4618      	mov	r0, r3
 8005054:	4770      	bx	lr
 8005056:	2900      	cmp	r1, #0
 8005058:	bf18      	it	ne
 800505a:	2300      	movne	r3, #0
 800505c:	e7f9      	b.n	8005052 <strchr+0xe>

0800505e <strncpy>:
 800505e:	b510      	push	{r4, lr}
 8005060:	3901      	subs	r1, #1
 8005062:	4603      	mov	r3, r0
 8005064:	b132      	cbz	r2, 8005074 <strncpy+0x16>
 8005066:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800506a:	f803 4b01 	strb.w	r4, [r3], #1
 800506e:	3a01      	subs	r2, #1
 8005070:	2c00      	cmp	r4, #0
 8005072:	d1f7      	bne.n	8005064 <strncpy+0x6>
 8005074:	441a      	add	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <strncpy+0x20>
 800507c:	bd10      	pop	{r4, pc}
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <strncpy+0x1a>

08005084 <strstr>:
 8005084:	780a      	ldrb	r2, [r1, #0]
 8005086:	b570      	push	{r4, r5, r6, lr}
 8005088:	b96a      	cbnz	r2, 80050a6 <strstr+0x22>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	429a      	cmp	r2, r3
 800508e:	d109      	bne.n	80050a4 <strstr+0x20>
 8005090:	460c      	mov	r4, r1
 8005092:	4605      	mov	r5, r0
 8005094:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f6      	beq.n	800508a <strstr+0x6>
 800509c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80050a0:	429e      	cmp	r6, r3
 80050a2:	d0f7      	beq.n	8005094 <strstr+0x10>
 80050a4:	3001      	adds	r0, #1
 80050a6:	7803      	ldrb	r3, [r0, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ef      	bne.n	800508c <strstr+0x8>
 80050ac:	4618      	mov	r0, r3
 80050ae:	e7ec      	b.n	800508a <strstr+0x6>

080050b0 <_free_r>:
 80050b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b2:	2900      	cmp	r1, #0
 80050b4:	d044      	beq.n	8005140 <_free_r+0x90>
 80050b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ba:	9001      	str	r0, [sp, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f1a1 0404 	sub.w	r4, r1, #4
 80050c2:	bfb8      	it	lt
 80050c4:	18e4      	addlt	r4, r4, r3
 80050c6:	f001 f87d 	bl	80061c4 <__malloc_lock>
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <_free_r+0x94>)
 80050cc:	9801      	ldr	r0, [sp, #4]
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	b933      	cbnz	r3, 80050e0 <_free_r+0x30>
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	6014      	str	r4, [r2, #0]
 80050d6:	b003      	add	sp, #12
 80050d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050dc:	f001 b878 	b.w	80061d0 <__malloc_unlock>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d908      	bls.n	80050f6 <_free_r+0x46>
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	1961      	adds	r1, r4, r5
 80050e8:	428b      	cmp	r3, r1
 80050ea:	bf01      	itttt	eq
 80050ec:	6819      	ldreq	r1, [r3, #0]
 80050ee:	685b      	ldreq	r3, [r3, #4]
 80050f0:	1949      	addeq	r1, r1, r5
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	e7ed      	b.n	80050d2 <_free_r+0x22>
 80050f6:	461a      	mov	r2, r3
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b10b      	cbz	r3, 8005100 <_free_r+0x50>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d9fa      	bls.n	80050f6 <_free_r+0x46>
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	1855      	adds	r5, r2, r1
 8005104:	42a5      	cmp	r5, r4
 8005106:	d10b      	bne.n	8005120 <_free_r+0x70>
 8005108:	6824      	ldr	r4, [r4, #0]
 800510a:	4421      	add	r1, r4
 800510c:	1854      	adds	r4, r2, r1
 800510e:	42a3      	cmp	r3, r4
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	d1e0      	bne.n	80050d6 <_free_r+0x26>
 8005114:	681c      	ldr	r4, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	6053      	str	r3, [r2, #4]
 800511a:	4421      	add	r1, r4
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	e7da      	b.n	80050d6 <_free_r+0x26>
 8005120:	d902      	bls.n	8005128 <_free_r+0x78>
 8005122:	230c      	movs	r3, #12
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	e7d6      	b.n	80050d6 <_free_r+0x26>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1961      	adds	r1, r4, r5
 800512c:	428b      	cmp	r3, r1
 800512e:	bf04      	itt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	bf04      	itt	eq
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	6054      	str	r4, [r2, #4]
 800513e:	e7ca      	b.n	80050d6 <_free_r+0x26>
 8005140:	b003      	add	sp, #12
 8005142:	bd30      	pop	{r4, r5, pc}
 8005144:	200032ec 	.word	0x200032ec

08005148 <sbrk_aligned>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4e0e      	ldr	r6, [pc, #56]	; (8005184 <sbrk_aligned+0x3c>)
 800514c:	460c      	mov	r4, r1
 800514e:	6831      	ldr	r1, [r6, #0]
 8005150:	4605      	mov	r5, r0
 8005152:	b911      	cbnz	r1, 800515a <sbrk_aligned+0x12>
 8005154:	f000 fea0 	bl	8005e98 <_sbrk_r>
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	4621      	mov	r1, r4
 800515c:	4628      	mov	r0, r5
 800515e:	f000 fe9b 	bl	8005e98 <_sbrk_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d00a      	beq.n	800517c <sbrk_aligned+0x34>
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d007      	beq.n	8005180 <sbrk_aligned+0x38>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fe90 	bl	8005e98 <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d101      	bne.n	8005180 <sbrk_aligned+0x38>
 800517c:	f04f 34ff 	mov.w	r4, #4294967295
 8005180:	4620      	mov	r0, r4
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	200032f0 	.word	0x200032f0

08005188 <_malloc_r>:
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	1ccd      	adds	r5, r1, #3
 800518e:	f025 0503 	bic.w	r5, r5, #3
 8005192:	3508      	adds	r5, #8
 8005194:	2d0c      	cmp	r5, #12
 8005196:	bf38      	it	cc
 8005198:	250c      	movcc	r5, #12
 800519a:	2d00      	cmp	r5, #0
 800519c:	4607      	mov	r7, r0
 800519e:	db01      	blt.n	80051a4 <_malloc_r+0x1c>
 80051a0:	42a9      	cmp	r1, r5
 80051a2:	d905      	bls.n	80051b0 <_malloc_r+0x28>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	2600      	movs	r6, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	4e2e      	ldr	r6, [pc, #184]	; (800526c <_malloc_r+0xe4>)
 80051b2:	f001 f807 	bl	80061c4 <__malloc_lock>
 80051b6:	6833      	ldr	r3, [r6, #0]
 80051b8:	461c      	mov	r4, r3
 80051ba:	bb34      	cbnz	r4, 800520a <_malloc_r+0x82>
 80051bc:	4629      	mov	r1, r5
 80051be:	4638      	mov	r0, r7
 80051c0:	f7ff ffc2 	bl	8005148 <sbrk_aligned>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	4604      	mov	r4, r0
 80051c8:	d14d      	bne.n	8005266 <_malloc_r+0xde>
 80051ca:	6834      	ldr	r4, [r6, #0]
 80051cc:	4626      	mov	r6, r4
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d140      	bne.n	8005254 <_malloc_r+0xcc>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	4631      	mov	r1, r6
 80051d6:	4638      	mov	r0, r7
 80051d8:	eb04 0803 	add.w	r8, r4, r3
 80051dc:	f000 fe5c 	bl	8005e98 <_sbrk_r>
 80051e0:	4580      	cmp	r8, r0
 80051e2:	d13a      	bne.n	800525a <_malloc_r+0xd2>
 80051e4:	6821      	ldr	r1, [r4, #0]
 80051e6:	3503      	adds	r5, #3
 80051e8:	1a6d      	subs	r5, r5, r1
 80051ea:	f025 0503 	bic.w	r5, r5, #3
 80051ee:	3508      	adds	r5, #8
 80051f0:	2d0c      	cmp	r5, #12
 80051f2:	bf38      	it	cc
 80051f4:	250c      	movcc	r5, #12
 80051f6:	4629      	mov	r1, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ffa5 	bl	8005148 <sbrk_aligned>
 80051fe:	3001      	adds	r0, #1
 8005200:	d02b      	beq.n	800525a <_malloc_r+0xd2>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	442b      	add	r3, r5
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	e00e      	b.n	8005228 <_malloc_r+0xa0>
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	1b52      	subs	r2, r2, r5
 800520e:	d41e      	bmi.n	800524e <_malloc_r+0xc6>
 8005210:	2a0b      	cmp	r2, #11
 8005212:	d916      	bls.n	8005242 <_malloc_r+0xba>
 8005214:	1961      	adds	r1, r4, r5
 8005216:	42a3      	cmp	r3, r4
 8005218:	6025      	str	r5, [r4, #0]
 800521a:	bf18      	it	ne
 800521c:	6059      	strne	r1, [r3, #4]
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	bf08      	it	eq
 8005222:	6031      	streq	r1, [r6, #0]
 8005224:	5162      	str	r2, [r4, r5]
 8005226:	604b      	str	r3, [r1, #4]
 8005228:	4638      	mov	r0, r7
 800522a:	f104 060b 	add.w	r6, r4, #11
 800522e:	f000 ffcf 	bl	80061d0 <__malloc_unlock>
 8005232:	f026 0607 	bic.w	r6, r6, #7
 8005236:	1d23      	adds	r3, r4, #4
 8005238:	1af2      	subs	r2, r6, r3
 800523a:	d0b6      	beq.n	80051aa <_malloc_r+0x22>
 800523c:	1b9b      	subs	r3, r3, r6
 800523e:	50a3      	str	r3, [r4, r2]
 8005240:	e7b3      	b.n	80051aa <_malloc_r+0x22>
 8005242:	6862      	ldr	r2, [r4, #4]
 8005244:	42a3      	cmp	r3, r4
 8005246:	bf0c      	ite	eq
 8005248:	6032      	streq	r2, [r6, #0]
 800524a:	605a      	strne	r2, [r3, #4]
 800524c:	e7ec      	b.n	8005228 <_malloc_r+0xa0>
 800524e:	4623      	mov	r3, r4
 8005250:	6864      	ldr	r4, [r4, #4]
 8005252:	e7b2      	b.n	80051ba <_malloc_r+0x32>
 8005254:	4634      	mov	r4, r6
 8005256:	6876      	ldr	r6, [r6, #4]
 8005258:	e7b9      	b.n	80051ce <_malloc_r+0x46>
 800525a:	230c      	movs	r3, #12
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4638      	mov	r0, r7
 8005260:	f000 ffb6 	bl	80061d0 <__malloc_unlock>
 8005264:	e7a1      	b.n	80051aa <_malloc_r+0x22>
 8005266:	6025      	str	r5, [r4, #0]
 8005268:	e7de      	b.n	8005228 <_malloc_r+0xa0>
 800526a:	bf00      	nop
 800526c:	200032ec 	.word	0x200032ec

08005270 <__ssputs_r>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	688e      	ldr	r6, [r1, #8]
 8005276:	429e      	cmp	r6, r3
 8005278:	4682      	mov	sl, r0
 800527a:	460c      	mov	r4, r1
 800527c:	4690      	mov	r8, r2
 800527e:	461f      	mov	r7, r3
 8005280:	d838      	bhi.n	80052f4 <__ssputs_r+0x84>
 8005282:	898a      	ldrh	r2, [r1, #12]
 8005284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005288:	d032      	beq.n	80052f0 <__ssputs_r+0x80>
 800528a:	6825      	ldr	r5, [r4, #0]
 800528c:	6909      	ldr	r1, [r1, #16]
 800528e:	eba5 0901 	sub.w	r9, r5, r1
 8005292:	6965      	ldr	r5, [r4, #20]
 8005294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005298:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800529c:	3301      	adds	r3, #1
 800529e:	444b      	add	r3, r9
 80052a0:	106d      	asrs	r5, r5, #1
 80052a2:	429d      	cmp	r5, r3
 80052a4:	bf38      	it	cc
 80052a6:	461d      	movcc	r5, r3
 80052a8:	0553      	lsls	r3, r2, #21
 80052aa:	d531      	bpl.n	8005310 <__ssputs_r+0xa0>
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7ff ff6b 	bl	8005188 <_malloc_r>
 80052b2:	4606      	mov	r6, r0
 80052b4:	b950      	cbnz	r0, 80052cc <__ssputs_r+0x5c>
 80052b6:	230c      	movs	r3, #12
 80052b8:	f8ca 3000 	str.w	r3, [sl]
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052cc:	6921      	ldr	r1, [r4, #16]
 80052ce:	464a      	mov	r2, r9
 80052d0:	f7ff fe54 	bl	8004f7c <memcpy>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	6126      	str	r6, [r4, #16]
 80052e2:	6165      	str	r5, [r4, #20]
 80052e4:	444e      	add	r6, r9
 80052e6:	eba5 0509 	sub.w	r5, r5, r9
 80052ea:	6026      	str	r6, [r4, #0]
 80052ec:	60a5      	str	r5, [r4, #8]
 80052ee:	463e      	mov	r6, r7
 80052f0:	42be      	cmp	r6, r7
 80052f2:	d900      	bls.n	80052f6 <__ssputs_r+0x86>
 80052f4:	463e      	mov	r6, r7
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	4632      	mov	r2, r6
 80052fa:	4641      	mov	r1, r8
 80052fc:	f000 ff48 	bl	8006190 <memmove>
 8005300:	68a3      	ldr	r3, [r4, #8]
 8005302:	1b9b      	subs	r3, r3, r6
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	4433      	add	r3, r6
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	2000      	movs	r0, #0
 800530e:	e7db      	b.n	80052c8 <__ssputs_r+0x58>
 8005310:	462a      	mov	r2, r5
 8005312:	f000 ff63 	bl	80061dc <_realloc_r>
 8005316:	4606      	mov	r6, r0
 8005318:	2800      	cmp	r0, #0
 800531a:	d1e1      	bne.n	80052e0 <__ssputs_r+0x70>
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	4650      	mov	r0, sl
 8005320:	f7ff fec6 	bl	80050b0 <_free_r>
 8005324:	e7c7      	b.n	80052b6 <__ssputs_r+0x46>
	...

08005328 <_svfiprintf_r>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	4698      	mov	r8, r3
 800532e:	898b      	ldrh	r3, [r1, #12]
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	b09d      	sub	sp, #116	; 0x74
 8005334:	4607      	mov	r7, r0
 8005336:	460d      	mov	r5, r1
 8005338:	4614      	mov	r4, r2
 800533a:	d50e      	bpl.n	800535a <_svfiprintf_r+0x32>
 800533c:	690b      	ldr	r3, [r1, #16]
 800533e:	b963      	cbnz	r3, 800535a <_svfiprintf_r+0x32>
 8005340:	2140      	movs	r1, #64	; 0x40
 8005342:	f7ff ff21 	bl	8005188 <_malloc_r>
 8005346:	6028      	str	r0, [r5, #0]
 8005348:	6128      	str	r0, [r5, #16]
 800534a:	b920      	cbnz	r0, 8005356 <_svfiprintf_r+0x2e>
 800534c:	230c      	movs	r3, #12
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	e0d1      	b.n	80054fa <_svfiprintf_r+0x1d2>
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	616b      	str	r3, [r5, #20]
 800535a:	2300      	movs	r3, #0
 800535c:	9309      	str	r3, [sp, #36]	; 0x24
 800535e:	2320      	movs	r3, #32
 8005360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005364:	f8cd 800c 	str.w	r8, [sp, #12]
 8005368:	2330      	movs	r3, #48	; 0x30
 800536a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005514 <_svfiprintf_r+0x1ec>
 800536e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005372:	f04f 0901 	mov.w	r9, #1
 8005376:	4623      	mov	r3, r4
 8005378:	469a      	mov	sl, r3
 800537a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800537e:	b10a      	cbz	r2, 8005384 <_svfiprintf_r+0x5c>
 8005380:	2a25      	cmp	r2, #37	; 0x25
 8005382:	d1f9      	bne.n	8005378 <_svfiprintf_r+0x50>
 8005384:	ebba 0b04 	subs.w	fp, sl, r4
 8005388:	d00b      	beq.n	80053a2 <_svfiprintf_r+0x7a>
 800538a:	465b      	mov	r3, fp
 800538c:	4622      	mov	r2, r4
 800538e:	4629      	mov	r1, r5
 8005390:	4638      	mov	r0, r7
 8005392:	f7ff ff6d 	bl	8005270 <__ssputs_r>
 8005396:	3001      	adds	r0, #1
 8005398:	f000 80aa 	beq.w	80054f0 <_svfiprintf_r+0x1c8>
 800539c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800539e:	445a      	add	r2, fp
 80053a0:	9209      	str	r2, [sp, #36]	; 0x24
 80053a2:	f89a 3000 	ldrb.w	r3, [sl]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80a2 	beq.w	80054f0 <_svfiprintf_r+0x1c8>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f04f 32ff 	mov.w	r2, #4294967295
 80053b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b6:	f10a 0a01 	add.w	sl, sl, #1
 80053ba:	9304      	str	r3, [sp, #16]
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053c2:	931a      	str	r3, [sp, #104]	; 0x68
 80053c4:	4654      	mov	r4, sl
 80053c6:	2205      	movs	r2, #5
 80053c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053cc:	4851      	ldr	r0, [pc, #324]	; (8005514 <_svfiprintf_r+0x1ec>)
 80053ce:	f7fa ff17 	bl	8000200 <memchr>
 80053d2:	9a04      	ldr	r2, [sp, #16]
 80053d4:	b9d8      	cbnz	r0, 800540e <_svfiprintf_r+0xe6>
 80053d6:	06d0      	lsls	r0, r2, #27
 80053d8:	bf44      	itt	mi
 80053da:	2320      	movmi	r3, #32
 80053dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053e0:	0711      	lsls	r1, r2, #28
 80053e2:	bf44      	itt	mi
 80053e4:	232b      	movmi	r3, #43	; 0x2b
 80053e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ea:	f89a 3000 	ldrb.w	r3, [sl]
 80053ee:	2b2a      	cmp	r3, #42	; 0x2a
 80053f0:	d015      	beq.n	800541e <_svfiprintf_r+0xf6>
 80053f2:	9a07      	ldr	r2, [sp, #28]
 80053f4:	4654      	mov	r4, sl
 80053f6:	2000      	movs	r0, #0
 80053f8:	f04f 0c0a 	mov.w	ip, #10
 80053fc:	4621      	mov	r1, r4
 80053fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005402:	3b30      	subs	r3, #48	; 0x30
 8005404:	2b09      	cmp	r3, #9
 8005406:	d94e      	bls.n	80054a6 <_svfiprintf_r+0x17e>
 8005408:	b1b0      	cbz	r0, 8005438 <_svfiprintf_r+0x110>
 800540a:	9207      	str	r2, [sp, #28]
 800540c:	e014      	b.n	8005438 <_svfiprintf_r+0x110>
 800540e:	eba0 0308 	sub.w	r3, r0, r8
 8005412:	fa09 f303 	lsl.w	r3, r9, r3
 8005416:	4313      	orrs	r3, r2
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	46a2      	mov	sl, r4
 800541c:	e7d2      	b.n	80053c4 <_svfiprintf_r+0x9c>
 800541e:	9b03      	ldr	r3, [sp, #12]
 8005420:	1d19      	adds	r1, r3, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	9103      	str	r1, [sp, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfbb      	ittet	lt
 800542a:	425b      	neglt	r3, r3
 800542c:	f042 0202 	orrlt.w	r2, r2, #2
 8005430:	9307      	strge	r3, [sp, #28]
 8005432:	9307      	strlt	r3, [sp, #28]
 8005434:	bfb8      	it	lt
 8005436:	9204      	strlt	r2, [sp, #16]
 8005438:	7823      	ldrb	r3, [r4, #0]
 800543a:	2b2e      	cmp	r3, #46	; 0x2e
 800543c:	d10c      	bne.n	8005458 <_svfiprintf_r+0x130>
 800543e:	7863      	ldrb	r3, [r4, #1]
 8005440:	2b2a      	cmp	r3, #42	; 0x2a
 8005442:	d135      	bne.n	80054b0 <_svfiprintf_r+0x188>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	9203      	str	r2, [sp, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfb8      	it	lt
 8005450:	f04f 33ff 	movlt.w	r3, #4294967295
 8005454:	3402      	adds	r4, #2
 8005456:	9305      	str	r3, [sp, #20]
 8005458:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005524 <_svfiprintf_r+0x1fc>
 800545c:	7821      	ldrb	r1, [r4, #0]
 800545e:	2203      	movs	r2, #3
 8005460:	4650      	mov	r0, sl
 8005462:	f7fa fecd 	bl	8000200 <memchr>
 8005466:	b140      	cbz	r0, 800547a <_svfiprintf_r+0x152>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	eba0 000a 	sub.w	r0, r0, sl
 800546e:	fa03 f000 	lsl.w	r0, r3, r0
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	4303      	orrs	r3, r0
 8005476:	3401      	adds	r4, #1
 8005478:	9304      	str	r3, [sp, #16]
 800547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547e:	4826      	ldr	r0, [pc, #152]	; (8005518 <_svfiprintf_r+0x1f0>)
 8005480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005484:	2206      	movs	r2, #6
 8005486:	f7fa febb 	bl	8000200 <memchr>
 800548a:	2800      	cmp	r0, #0
 800548c:	d038      	beq.n	8005500 <_svfiprintf_r+0x1d8>
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <_svfiprintf_r+0x1f4>)
 8005490:	bb1b      	cbnz	r3, 80054da <_svfiprintf_r+0x1b2>
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	3307      	adds	r3, #7
 8005496:	f023 0307 	bic.w	r3, r3, #7
 800549a:	3308      	adds	r3, #8
 800549c:	9303      	str	r3, [sp, #12]
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	4433      	add	r3, r6
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	e767      	b.n	8005376 <_svfiprintf_r+0x4e>
 80054a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054aa:	460c      	mov	r4, r1
 80054ac:	2001      	movs	r0, #1
 80054ae:	e7a5      	b.n	80053fc <_svfiprintf_r+0xd4>
 80054b0:	2300      	movs	r3, #0
 80054b2:	3401      	adds	r4, #1
 80054b4:	9305      	str	r3, [sp, #20]
 80054b6:	4619      	mov	r1, r3
 80054b8:	f04f 0c0a 	mov.w	ip, #10
 80054bc:	4620      	mov	r0, r4
 80054be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054c2:	3a30      	subs	r2, #48	; 0x30
 80054c4:	2a09      	cmp	r2, #9
 80054c6:	d903      	bls.n	80054d0 <_svfiprintf_r+0x1a8>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0c5      	beq.n	8005458 <_svfiprintf_r+0x130>
 80054cc:	9105      	str	r1, [sp, #20]
 80054ce:	e7c3      	b.n	8005458 <_svfiprintf_r+0x130>
 80054d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054d4:	4604      	mov	r4, r0
 80054d6:	2301      	movs	r3, #1
 80054d8:	e7f0      	b.n	80054bc <_svfiprintf_r+0x194>
 80054da:	ab03      	add	r3, sp, #12
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	462a      	mov	r2, r5
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <_svfiprintf_r+0x1f8>)
 80054e2:	a904      	add	r1, sp, #16
 80054e4:	4638      	mov	r0, r7
 80054e6:	f3af 8000 	nop.w
 80054ea:	1c42      	adds	r2, r0, #1
 80054ec:	4606      	mov	r6, r0
 80054ee:	d1d6      	bne.n	800549e <_svfiprintf_r+0x176>
 80054f0:	89ab      	ldrh	r3, [r5, #12]
 80054f2:	065b      	lsls	r3, r3, #25
 80054f4:	f53f af2c 	bmi.w	8005350 <_svfiprintf_r+0x28>
 80054f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054fa:	b01d      	add	sp, #116	; 0x74
 80054fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005500:	ab03      	add	r3, sp, #12
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	462a      	mov	r2, r5
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <_svfiprintf_r+0x1f8>)
 8005508:	a904      	add	r1, sp, #16
 800550a:	4638      	mov	r0, r7
 800550c:	f000 fa4c 	bl	80059a8 <_printf_i>
 8005510:	e7eb      	b.n	80054ea <_svfiprintf_r+0x1c2>
 8005512:	bf00      	nop
 8005514:	08007344 	.word	0x08007344
 8005518:	0800734e 	.word	0x0800734e
 800551c:	00000000 	.word	0x00000000
 8005520:	08005271 	.word	0x08005271
 8005524:	0800734a 	.word	0x0800734a

08005528 <_sungetc_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	1c4b      	adds	r3, r1, #1
 800552c:	4614      	mov	r4, r2
 800552e:	d103      	bne.n	8005538 <_sungetc_r+0x10>
 8005530:	f04f 35ff 	mov.w	r5, #4294967295
 8005534:	4628      	mov	r0, r5
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	8993      	ldrh	r3, [r2, #12]
 800553a:	f023 0320 	bic.w	r3, r3, #32
 800553e:	8193      	strh	r3, [r2, #12]
 8005540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	b2cd      	uxtb	r5, r1
 8005546:	b18b      	cbz	r3, 800556c <_sungetc_r+0x44>
 8005548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800554a:	4293      	cmp	r3, r2
 800554c:	dd08      	ble.n	8005560 <_sungetc_r+0x38>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	6063      	str	r3, [r4, #4]
 800555e:	e7e9      	b.n	8005534 <_sungetc_r+0xc>
 8005560:	4621      	mov	r1, r4
 8005562:	f000 fdd9 	bl	8006118 <__submore>
 8005566:	2800      	cmp	r0, #0
 8005568:	d0f1      	beq.n	800554e <_sungetc_r+0x26>
 800556a:	e7e1      	b.n	8005530 <_sungetc_r+0x8>
 800556c:	6921      	ldr	r1, [r4, #16]
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	b151      	cbz	r1, 8005588 <_sungetc_r+0x60>
 8005572:	4299      	cmp	r1, r3
 8005574:	d208      	bcs.n	8005588 <_sungetc_r+0x60>
 8005576:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800557a:	42a9      	cmp	r1, r5
 800557c:	d104      	bne.n	8005588 <_sungetc_r+0x60>
 800557e:	3b01      	subs	r3, #1
 8005580:	3201      	adds	r2, #1
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	6062      	str	r2, [r4, #4]
 8005586:	e7d5      	b.n	8005534 <_sungetc_r+0xc>
 8005588:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800558c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005590:	6363      	str	r3, [r4, #52]	; 0x34
 8005592:	2303      	movs	r3, #3
 8005594:	63a3      	str	r3, [r4, #56]	; 0x38
 8005596:	4623      	mov	r3, r4
 8005598:	f803 5f46 	strb.w	r5, [r3, #70]!
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	2301      	movs	r3, #1
 80055a0:	e7dc      	b.n	800555c <_sungetc_r+0x34>

080055a2 <__ssrefill_r>:
 80055a2:	b510      	push	{r4, lr}
 80055a4:	460c      	mov	r4, r1
 80055a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80055a8:	b169      	cbz	r1, 80055c6 <__ssrefill_r+0x24>
 80055aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d001      	beq.n	80055b6 <__ssrefill_r+0x14>
 80055b2:	f7ff fd7d 	bl	80050b0 <_free_r>
 80055b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055b8:	6063      	str	r3, [r4, #4]
 80055ba:	2000      	movs	r0, #0
 80055bc:	6360      	str	r0, [r4, #52]	; 0x34
 80055be:	b113      	cbz	r3, 80055c6 <__ssrefill_r+0x24>
 80055c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	bd10      	pop	{r4, pc}
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0320 	orr.w	r3, r3, #32
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295
 80055da:	e7f3      	b.n	80055c4 <__ssrefill_r+0x22>

080055dc <__ssvfiscanf_r>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	460c      	mov	r4, r1
 80055e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80055e6:	2100      	movs	r1, #0
 80055e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80055ec:	49a6      	ldr	r1, [pc, #664]	; (8005888 <__ssvfiscanf_r+0x2ac>)
 80055ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80055f0:	f10d 0804 	add.w	r8, sp, #4
 80055f4:	49a5      	ldr	r1, [pc, #660]	; (800588c <__ssvfiscanf_r+0x2b0>)
 80055f6:	4fa6      	ldr	r7, [pc, #664]	; (8005890 <__ssvfiscanf_r+0x2b4>)
 80055f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005894 <__ssvfiscanf_r+0x2b8>
 80055fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005600:	4606      	mov	r6, r0
 8005602:	91a1      	str	r1, [sp, #644]	; 0x284
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	7813      	ldrb	r3, [r2, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 815a 	beq.w	80058c2 <__ssvfiscanf_r+0x2e6>
 800560e:	5dd9      	ldrb	r1, [r3, r7]
 8005610:	f011 0108 	ands.w	r1, r1, #8
 8005614:	f102 0501 	add.w	r5, r2, #1
 8005618:	d019      	beq.n	800564e <__ssvfiscanf_r+0x72>
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd0f      	ble.n	8005640 <__ssvfiscanf_r+0x64>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	5cba      	ldrb	r2, [r7, r2]
 8005626:	0712      	lsls	r2, r2, #28
 8005628:	d401      	bmi.n	800562e <__ssvfiscanf_r+0x52>
 800562a:	462a      	mov	r2, r5
 800562c:	e7eb      	b.n	8005606 <__ssvfiscanf_r+0x2a>
 800562e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005630:	3201      	adds	r2, #1
 8005632:	9245      	str	r2, [sp, #276]	; 0x114
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	3301      	adds	r3, #1
 8005638:	3a01      	subs	r2, #1
 800563a:	6062      	str	r2, [r4, #4]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	e7ec      	b.n	800561a <__ssvfiscanf_r+0x3e>
 8005640:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	4798      	blx	r3
 8005648:	2800      	cmp	r0, #0
 800564a:	d0e9      	beq.n	8005620 <__ssvfiscanf_r+0x44>
 800564c:	e7ed      	b.n	800562a <__ssvfiscanf_r+0x4e>
 800564e:	2b25      	cmp	r3, #37	; 0x25
 8005650:	d012      	beq.n	8005678 <__ssvfiscanf_r+0x9c>
 8005652:	469a      	mov	sl, r3
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f340 8091 	ble.w	800577e <__ssvfiscanf_r+0x1a2>
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	7813      	ldrb	r3, [r2, #0]
 8005660:	4553      	cmp	r3, sl
 8005662:	f040 812e 	bne.w	80058c2 <__ssvfiscanf_r+0x2e6>
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800566e:	3201      	adds	r2, #1
 8005670:	3301      	adds	r3, #1
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	9345      	str	r3, [sp, #276]	; 0x114
 8005676:	e7d8      	b.n	800562a <__ssvfiscanf_r+0x4e>
 8005678:	9141      	str	r1, [sp, #260]	; 0x104
 800567a:	9143      	str	r1, [sp, #268]	; 0x10c
 800567c:	7853      	ldrb	r3, [r2, #1]
 800567e:	2b2a      	cmp	r3, #42	; 0x2a
 8005680:	bf02      	ittt	eq
 8005682:	2310      	moveq	r3, #16
 8005684:	1c95      	addeq	r5, r2, #2
 8005686:	9341      	streq	r3, [sp, #260]	; 0x104
 8005688:	220a      	movs	r2, #10
 800568a:	46aa      	mov	sl, r5
 800568c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005690:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005694:	2b09      	cmp	r3, #9
 8005696:	d91d      	bls.n	80056d4 <__ssvfiscanf_r+0xf8>
 8005698:	487e      	ldr	r0, [pc, #504]	; (8005894 <__ssvfiscanf_r+0x2b8>)
 800569a:	2203      	movs	r2, #3
 800569c:	f7fa fdb0 	bl	8000200 <memchr>
 80056a0:	b140      	cbz	r0, 80056b4 <__ssvfiscanf_r+0xd8>
 80056a2:	2301      	movs	r3, #1
 80056a4:	eba0 0009 	sub.w	r0, r0, r9
 80056a8:	fa03 f000 	lsl.w	r0, r3, r0
 80056ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056ae:	4318      	orrs	r0, r3
 80056b0:	9041      	str	r0, [sp, #260]	; 0x104
 80056b2:	4655      	mov	r5, sl
 80056b4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056b8:	2b78      	cmp	r3, #120	; 0x78
 80056ba:	d806      	bhi.n	80056ca <__ssvfiscanf_r+0xee>
 80056bc:	2b57      	cmp	r3, #87	; 0x57
 80056be:	d810      	bhi.n	80056e2 <__ssvfiscanf_r+0x106>
 80056c0:	2b25      	cmp	r3, #37	; 0x25
 80056c2:	d0c6      	beq.n	8005652 <__ssvfiscanf_r+0x76>
 80056c4:	d856      	bhi.n	8005774 <__ssvfiscanf_r+0x198>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d064      	beq.n	8005794 <__ssvfiscanf_r+0x1b8>
 80056ca:	2303      	movs	r3, #3
 80056cc:	9347      	str	r3, [sp, #284]	; 0x11c
 80056ce:	230a      	movs	r3, #10
 80056d0:	9342      	str	r3, [sp, #264]	; 0x108
 80056d2:	e071      	b.n	80057b8 <__ssvfiscanf_r+0x1dc>
 80056d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80056d6:	fb02 1103 	mla	r1, r2, r3, r1
 80056da:	3930      	subs	r1, #48	; 0x30
 80056dc:	9143      	str	r1, [sp, #268]	; 0x10c
 80056de:	4655      	mov	r5, sl
 80056e0:	e7d3      	b.n	800568a <__ssvfiscanf_r+0xae>
 80056e2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80056e6:	2a20      	cmp	r2, #32
 80056e8:	d8ef      	bhi.n	80056ca <__ssvfiscanf_r+0xee>
 80056ea:	a101      	add	r1, pc, #4	; (adr r1, 80056f0 <__ssvfiscanf_r+0x114>)
 80056ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	080056cb 	.word	0x080056cb
 80056f8:	080056cb 	.word	0x080056cb
 80056fc:	08005801 	.word	0x08005801
 8005700:	080056cb 	.word	0x080056cb
 8005704:	080056cb 	.word	0x080056cb
 8005708:	080056cb 	.word	0x080056cb
 800570c:	080056cb 	.word	0x080056cb
 8005710:	080056cb 	.word	0x080056cb
 8005714:	080056cb 	.word	0x080056cb
 8005718:	080056cb 	.word	0x080056cb
 800571c:	08005817 	.word	0x08005817
 8005720:	080057ed 	.word	0x080057ed
 8005724:	0800577b 	.word	0x0800577b
 8005728:	0800577b 	.word	0x0800577b
 800572c:	0800577b 	.word	0x0800577b
 8005730:	080056cb 	.word	0x080056cb
 8005734:	080057f1 	.word	0x080057f1
 8005738:	080056cb 	.word	0x080056cb
 800573c:	080056cb 	.word	0x080056cb
 8005740:	080056cb 	.word	0x080056cb
 8005744:	080056cb 	.word	0x080056cb
 8005748:	08005827 	.word	0x08005827
 800574c:	080057f9 	.word	0x080057f9
 8005750:	0800579b 	.word	0x0800579b
 8005754:	080056cb 	.word	0x080056cb
 8005758:	080056cb 	.word	0x080056cb
 800575c:	08005823 	.word	0x08005823
 8005760:	080056cb 	.word	0x080056cb
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080056cb 	.word	0x080056cb
 800576c:	080056cb 	.word	0x080056cb
 8005770:	080057a3 	.word	0x080057a3
 8005774:	3b45      	subs	r3, #69	; 0x45
 8005776:	2b02      	cmp	r3, #2
 8005778:	d8a7      	bhi.n	80056ca <__ssvfiscanf_r+0xee>
 800577a:	2305      	movs	r3, #5
 800577c:	e01b      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 800577e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005780:	4621      	mov	r1, r4
 8005782:	4630      	mov	r0, r6
 8005784:	4798      	blx	r3
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f af68 	beq.w	800565c <__ssvfiscanf_r+0x80>
 800578c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 808d 	bne.w	80058ae <__ssvfiscanf_r+0x2d2>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	e08f      	b.n	80058ba <__ssvfiscanf_r+0x2de>
 800579a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800579c:	f042 0220 	orr.w	r2, r2, #32
 80057a0:	9241      	str	r2, [sp, #260]	; 0x104
 80057a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	9241      	str	r2, [sp, #260]	; 0x104
 80057aa:	2210      	movs	r2, #16
 80057ac:	2b6f      	cmp	r3, #111	; 0x6f
 80057ae:	9242      	str	r2, [sp, #264]	; 0x108
 80057b0:	bf34      	ite	cc
 80057b2:	2303      	movcc	r3, #3
 80057b4:	2304      	movcs	r3, #4
 80057b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd42      	ble.n	8005844 <__ssvfiscanf_r+0x268>
 80057be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057c0:	0659      	lsls	r1, r3, #25
 80057c2:	d404      	bmi.n	80057ce <__ssvfiscanf_r+0x1f2>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	5cba      	ldrb	r2, [r7, r2]
 80057ca:	0712      	lsls	r2, r2, #28
 80057cc:	d441      	bmi.n	8005852 <__ssvfiscanf_r+0x276>
 80057ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	dc50      	bgt.n	8005876 <__ssvfiscanf_r+0x29a>
 80057d4:	466b      	mov	r3, sp
 80057d6:	4622      	mov	r2, r4
 80057d8:	a941      	add	r1, sp, #260	; 0x104
 80057da:	4630      	mov	r0, r6
 80057dc:	f000 fa0a 	bl	8005bf4 <_scanf_chars>
 80057e0:	2801      	cmp	r0, #1
 80057e2:	d06e      	beq.n	80058c2 <__ssvfiscanf_r+0x2e6>
 80057e4:	2802      	cmp	r0, #2
 80057e6:	f47f af20 	bne.w	800562a <__ssvfiscanf_r+0x4e>
 80057ea:	e7cf      	b.n	800578c <__ssvfiscanf_r+0x1b0>
 80057ec:	220a      	movs	r2, #10
 80057ee:	e7dd      	b.n	80057ac <__ssvfiscanf_r+0x1d0>
 80057f0:	2300      	movs	r3, #0
 80057f2:	9342      	str	r3, [sp, #264]	; 0x108
 80057f4:	2303      	movs	r3, #3
 80057f6:	e7de      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 80057f8:	2308      	movs	r3, #8
 80057fa:	9342      	str	r3, [sp, #264]	; 0x108
 80057fc:	2304      	movs	r3, #4
 80057fe:	e7da      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 8005800:	4629      	mov	r1, r5
 8005802:	4640      	mov	r0, r8
 8005804:	f000 fb58 	bl	8005eb8 <__sccl>
 8005808:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	9341      	str	r3, [sp, #260]	; 0x104
 8005810:	4605      	mov	r5, r0
 8005812:	2301      	movs	r3, #1
 8005814:	e7cf      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 8005816:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581c:	9341      	str	r3, [sp, #260]	; 0x104
 800581e:	2300      	movs	r3, #0
 8005820:	e7c9      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 8005822:	2302      	movs	r3, #2
 8005824:	e7c7      	b.n	80057b6 <__ssvfiscanf_r+0x1da>
 8005826:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005828:	06c3      	lsls	r3, r0, #27
 800582a:	f53f aefe 	bmi.w	800562a <__ssvfiscanf_r+0x4e>
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005832:	1d19      	adds	r1, r3, #4
 8005834:	9100      	str	r1, [sp, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f010 0f01 	tst.w	r0, #1
 800583c:	bf14      	ite	ne
 800583e:	801a      	strhne	r2, [r3, #0]
 8005840:	601a      	streq	r2, [r3, #0]
 8005842:	e6f2      	b.n	800562a <__ssvfiscanf_r+0x4e>
 8005844:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005846:	4621      	mov	r1, r4
 8005848:	4630      	mov	r0, r6
 800584a:	4798      	blx	r3
 800584c:	2800      	cmp	r0, #0
 800584e:	d0b6      	beq.n	80057be <__ssvfiscanf_r+0x1e2>
 8005850:	e79c      	b.n	800578c <__ssvfiscanf_r+0x1b0>
 8005852:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005854:	3201      	adds	r2, #1
 8005856:	9245      	str	r2, [sp, #276]	; 0x114
 8005858:	6862      	ldr	r2, [r4, #4]
 800585a:	3a01      	subs	r2, #1
 800585c:	2a00      	cmp	r2, #0
 800585e:	6062      	str	r2, [r4, #4]
 8005860:	dd02      	ble.n	8005868 <__ssvfiscanf_r+0x28c>
 8005862:	3301      	adds	r3, #1
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	e7ad      	b.n	80057c4 <__ssvfiscanf_r+0x1e8>
 8005868:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800586a:	4621      	mov	r1, r4
 800586c:	4630      	mov	r0, r6
 800586e:	4798      	blx	r3
 8005870:	2800      	cmp	r0, #0
 8005872:	d0a7      	beq.n	80057c4 <__ssvfiscanf_r+0x1e8>
 8005874:	e78a      	b.n	800578c <__ssvfiscanf_r+0x1b0>
 8005876:	2b04      	cmp	r3, #4
 8005878:	dc0e      	bgt.n	8005898 <__ssvfiscanf_r+0x2bc>
 800587a:	466b      	mov	r3, sp
 800587c:	4622      	mov	r2, r4
 800587e:	a941      	add	r1, sp, #260	; 0x104
 8005880:	4630      	mov	r0, r6
 8005882:	f000 fa11 	bl	8005ca8 <_scanf_i>
 8005886:	e7ab      	b.n	80057e0 <__ssvfiscanf_r+0x204>
 8005888:	08005529 	.word	0x08005529
 800588c:	080055a3 	.word	0x080055a3
 8005890:	08007393 	.word	0x08007393
 8005894:	0800734a 	.word	0x0800734a
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <__ssvfiscanf_r+0x2ec>)
 800589a:	2b00      	cmp	r3, #0
 800589c:	f43f aec5 	beq.w	800562a <__ssvfiscanf_r+0x4e>
 80058a0:	466b      	mov	r3, sp
 80058a2:	4622      	mov	r2, r4
 80058a4:	a941      	add	r1, sp, #260	; 0x104
 80058a6:	4630      	mov	r0, r6
 80058a8:	f3af 8000 	nop.w
 80058ac:	e798      	b.n	80057e0 <__ssvfiscanf_r+0x204>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058b4:	bf18      	it	ne
 80058b6:	f04f 30ff 	movne.w	r0, #4294967295
 80058ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80058be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80058c4:	e7f9      	b.n	80058ba <__ssvfiscanf_r+0x2de>
 80058c6:	bf00      	nop
 80058c8:	00000000 	.word	0x00000000

080058cc <_printf_common>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	4616      	mov	r6, r2
 80058d2:	4699      	mov	r9, r3
 80058d4:	688a      	ldr	r2, [r1, #8]
 80058d6:	690b      	ldr	r3, [r1, #16]
 80058d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058dc:	4293      	cmp	r3, r2
 80058de:	bfb8      	it	lt
 80058e0:	4613      	movlt	r3, r2
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058e8:	4607      	mov	r7, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	b10a      	cbz	r2, 80058f2 <_printf_common+0x26>
 80058ee:	3301      	adds	r3, #1
 80058f0:	6033      	str	r3, [r6, #0]
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	0699      	lsls	r1, r3, #26
 80058f6:	bf42      	ittt	mi
 80058f8:	6833      	ldrmi	r3, [r6, #0]
 80058fa:	3302      	addmi	r3, #2
 80058fc:	6033      	strmi	r3, [r6, #0]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	f015 0506 	ands.w	r5, r5, #6
 8005904:	d106      	bne.n	8005914 <_printf_common+0x48>
 8005906:	f104 0a19 	add.w	sl, r4, #25
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	6832      	ldr	r2, [r6, #0]
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	42ab      	cmp	r3, r5
 8005912:	dc26      	bgt.n	8005962 <_printf_common+0x96>
 8005914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005918:	1e13      	subs	r3, r2, #0
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	bf18      	it	ne
 800591e:	2301      	movne	r3, #1
 8005920:	0692      	lsls	r2, r2, #26
 8005922:	d42b      	bmi.n	800597c <_printf_common+0xb0>
 8005924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005928:	4649      	mov	r1, r9
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	3001      	adds	r0, #1
 8005930:	d01e      	beq.n	8005970 <_printf_common+0xa4>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	68e5      	ldr	r5, [r4, #12]
 8005936:	6832      	ldr	r2, [r6, #0]
 8005938:	f003 0306 	and.w	r3, r3, #6
 800593c:	2b04      	cmp	r3, #4
 800593e:	bf08      	it	eq
 8005940:	1aad      	subeq	r5, r5, r2
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	bf0c      	ite	eq
 8005948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800594c:	2500      	movne	r5, #0
 800594e:	4293      	cmp	r3, r2
 8005950:	bfc4      	itt	gt
 8005952:	1a9b      	subgt	r3, r3, r2
 8005954:	18ed      	addgt	r5, r5, r3
 8005956:	2600      	movs	r6, #0
 8005958:	341a      	adds	r4, #26
 800595a:	42b5      	cmp	r5, r6
 800595c:	d11a      	bne.n	8005994 <_printf_common+0xc8>
 800595e:	2000      	movs	r0, #0
 8005960:	e008      	b.n	8005974 <_printf_common+0xa8>
 8005962:	2301      	movs	r3, #1
 8005964:	4652      	mov	r2, sl
 8005966:	4649      	mov	r1, r9
 8005968:	4638      	mov	r0, r7
 800596a:	47c0      	blx	r8
 800596c:	3001      	adds	r0, #1
 800596e:	d103      	bne.n	8005978 <_printf_common+0xac>
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005978:	3501      	adds	r5, #1
 800597a:	e7c6      	b.n	800590a <_printf_common+0x3e>
 800597c:	18e1      	adds	r1, r4, r3
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	2030      	movs	r0, #48	; 0x30
 8005982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005986:	4422      	add	r2, r4
 8005988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800598c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005990:	3302      	adds	r3, #2
 8005992:	e7c7      	b.n	8005924 <_printf_common+0x58>
 8005994:	2301      	movs	r3, #1
 8005996:	4622      	mov	r2, r4
 8005998:	4649      	mov	r1, r9
 800599a:	4638      	mov	r0, r7
 800599c:	47c0      	blx	r8
 800599e:	3001      	adds	r0, #1
 80059a0:	d0e6      	beq.n	8005970 <_printf_common+0xa4>
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7d9      	b.n	800595a <_printf_common+0x8e>
	...

080059a8 <_printf_i>:
 80059a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	7e0f      	ldrb	r7, [r1, #24]
 80059ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059b0:	2f78      	cmp	r7, #120	; 0x78
 80059b2:	4691      	mov	r9, r2
 80059b4:	4680      	mov	r8, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	469a      	mov	sl, r3
 80059ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059be:	d807      	bhi.n	80059d0 <_printf_i+0x28>
 80059c0:	2f62      	cmp	r7, #98	; 0x62
 80059c2:	d80a      	bhi.n	80059da <_printf_i+0x32>
 80059c4:	2f00      	cmp	r7, #0
 80059c6:	f000 80d8 	beq.w	8005b7a <_printf_i+0x1d2>
 80059ca:	2f58      	cmp	r7, #88	; 0x58
 80059cc:	f000 80a3 	beq.w	8005b16 <_printf_i+0x16e>
 80059d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059d8:	e03a      	b.n	8005a50 <_printf_i+0xa8>
 80059da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059de:	2b15      	cmp	r3, #21
 80059e0:	d8f6      	bhi.n	80059d0 <_printf_i+0x28>
 80059e2:	a101      	add	r1, pc, #4	; (adr r1, 80059e8 <_printf_i+0x40>)
 80059e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a55 	.word	0x08005a55
 80059f0:	080059d1 	.word	0x080059d1
 80059f4:	080059d1 	.word	0x080059d1
 80059f8:	080059d1 	.word	0x080059d1
 80059fc:	080059d1 	.word	0x080059d1
 8005a00:	08005a55 	.word	0x08005a55
 8005a04:	080059d1 	.word	0x080059d1
 8005a08:	080059d1 	.word	0x080059d1
 8005a0c:	080059d1 	.word	0x080059d1
 8005a10:	080059d1 	.word	0x080059d1
 8005a14:	08005b61 	.word	0x08005b61
 8005a18:	08005a85 	.word	0x08005a85
 8005a1c:	08005b43 	.word	0x08005b43
 8005a20:	080059d1 	.word	0x080059d1
 8005a24:	080059d1 	.word	0x080059d1
 8005a28:	08005b83 	.word	0x08005b83
 8005a2c:	080059d1 	.word	0x080059d1
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	080059d1 	.word	0x080059d1
 8005a38:	080059d1 	.word	0x080059d1
 8005a3c:	08005b4b 	.word	0x08005b4b
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	1d1a      	adds	r2, r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	602a      	str	r2, [r5, #0]
 8005a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0a3      	b.n	8005b9c <_printf_i+0x1f4>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	6829      	ldr	r1, [r5, #0]
 8005a58:	0606      	lsls	r6, r0, #24
 8005a5a:	f101 0304 	add.w	r3, r1, #4
 8005a5e:	d50a      	bpl.n	8005a76 <_printf_i+0xce>
 8005a60:	680e      	ldr	r6, [r1, #0]
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	da03      	bge.n	8005a70 <_printf_i+0xc8>
 8005a68:	232d      	movs	r3, #45	; 0x2d
 8005a6a:	4276      	negs	r6, r6
 8005a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a70:	485e      	ldr	r0, [pc, #376]	; (8005bec <_printf_i+0x244>)
 8005a72:	230a      	movs	r3, #10
 8005a74:	e019      	b.n	8005aaa <_printf_i+0x102>
 8005a76:	680e      	ldr	r6, [r1, #0]
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a7e:	bf18      	it	ne
 8005a80:	b236      	sxthne	r6, r6
 8005a82:	e7ef      	b.n	8005a64 <_printf_i+0xbc>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1d19      	adds	r1, r3, #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	0601      	lsls	r1, r0, #24
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0xec>
 8005a90:	681e      	ldr	r6, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <_printf_i+0xf2>
 8005a94:	0646      	lsls	r6, r0, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0xe8>
 8005a98:	881e      	ldrh	r6, [r3, #0]
 8005a9a:	4854      	ldr	r0, [pc, #336]	; (8005bec <_printf_i+0x244>)
 8005a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2308      	moveq	r3, #8
 8005aa2:	230a      	movne	r3, #10
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aaa:	6865      	ldr	r5, [r4, #4]
 8005aac:	60a5      	str	r5, [r4, #8]
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	bfa2      	ittt	ge
 8005ab2:	6821      	ldrge	r1, [r4, #0]
 8005ab4:	f021 0104 	bicge.w	r1, r1, #4
 8005ab8:	6021      	strge	r1, [r4, #0]
 8005aba:	b90e      	cbnz	r6, 8005ac0 <_printf_i+0x118>
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	d04d      	beq.n	8005b5c <_printf_i+0x1b4>
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aca:	5dc7      	ldrb	r7, [r0, r7]
 8005acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ad0:	4637      	mov	r7, r6
 8005ad2:	42bb      	cmp	r3, r7
 8005ad4:	460e      	mov	r6, r1
 8005ad6:	d9f4      	bls.n	8005ac2 <_printf_i+0x11a>
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d10b      	bne.n	8005af4 <_printf_i+0x14c>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	07de      	lsls	r6, r3, #31
 8005ae0:	d508      	bpl.n	8005af4 <_printf_i+0x14c>
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6861      	ldr	r1, [r4, #4]
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	bfde      	ittt	le
 8005aea:	2330      	movle	r3, #48	; 0x30
 8005aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005af4:	1b52      	subs	r2, r2, r5
 8005af6:	6122      	str	r2, [r4, #16]
 8005af8:	f8cd a000 	str.w	sl, [sp]
 8005afc:	464b      	mov	r3, r9
 8005afe:	aa03      	add	r2, sp, #12
 8005b00:	4621      	mov	r1, r4
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7ff fee2 	bl	80058cc <_printf_common>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d14c      	bne.n	8005ba6 <_printf_i+0x1fe>
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	b004      	add	sp, #16
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	4835      	ldr	r0, [pc, #212]	; (8005bec <_printf_i+0x244>)
 8005b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b1c:	6829      	ldr	r1, [r5, #0]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b24:	6029      	str	r1, [r5, #0]
 8005b26:	061d      	lsls	r5, r3, #24
 8005b28:	d514      	bpl.n	8005b54 <_printf_i+0x1ac>
 8005b2a:	07df      	lsls	r7, r3, #31
 8005b2c:	bf44      	itt	mi
 8005b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b32:	6023      	strmi	r3, [r4, #0]
 8005b34:	b91e      	cbnz	r6, 8005b3e <_printf_i+0x196>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	f023 0320 	bic.w	r3, r3, #32
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	2310      	movs	r3, #16
 8005b40:	e7b0      	b.n	8005aa4 <_printf_i+0xfc>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	f043 0320 	orr.w	r3, r3, #32
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	2378      	movs	r3, #120	; 0x78
 8005b4c:	4828      	ldr	r0, [pc, #160]	; (8005bf0 <_printf_i+0x248>)
 8005b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b52:	e7e3      	b.n	8005b1c <_printf_i+0x174>
 8005b54:	0659      	lsls	r1, r3, #25
 8005b56:	bf48      	it	mi
 8005b58:	b2b6      	uxthmi	r6, r6
 8005b5a:	e7e6      	b.n	8005b2a <_printf_i+0x182>
 8005b5c:	4615      	mov	r5, r2
 8005b5e:	e7bb      	b.n	8005ad8 <_printf_i+0x130>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	6826      	ldr	r6, [r4, #0]
 8005b64:	6961      	ldr	r1, [r4, #20]
 8005b66:	1d18      	adds	r0, r3, #4
 8005b68:	6028      	str	r0, [r5, #0]
 8005b6a:	0635      	lsls	r5, r6, #24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	d501      	bpl.n	8005b74 <_printf_i+0x1cc>
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <_printf_i+0x1d2>
 8005b74:	0670      	lsls	r0, r6, #25
 8005b76:	d5fb      	bpl.n	8005b70 <_printf_i+0x1c8>
 8005b78:	8019      	strh	r1, [r3, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	4615      	mov	r5, r2
 8005b80:	e7ba      	b.n	8005af8 <_printf_i+0x150>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	602a      	str	r2, [r5, #0]
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7fa fb36 	bl	8000200 <memchr>
 8005b94:	b108      	cbz	r0, 8005b9a <_printf_i+0x1f2>
 8005b96:	1b40      	subs	r0, r0, r5
 8005b98:	6060      	str	r0, [r4, #4]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	e7a8      	b.n	8005af8 <_printf_i+0x150>
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4649      	mov	r1, r9
 8005bac:	4640      	mov	r0, r8
 8005bae:	47d0      	blx	sl
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d0ab      	beq.n	8005b0c <_printf_i+0x164>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	079b      	lsls	r3, r3, #30
 8005bb8:	d413      	bmi.n	8005be2 <_printf_i+0x23a>
 8005bba:	68e0      	ldr	r0, [r4, #12]
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	4298      	cmp	r0, r3
 8005bc0:	bfb8      	it	lt
 8005bc2:	4618      	movlt	r0, r3
 8005bc4:	e7a4      	b.n	8005b10 <_printf_i+0x168>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4632      	mov	r2, r6
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4640      	mov	r0, r8
 8005bce:	47d0      	blx	sl
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d09b      	beq.n	8005b0c <_printf_i+0x164>
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	9903      	ldr	r1, [sp, #12]
 8005bda:	1a5b      	subs	r3, r3, r1
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	dcf2      	bgt.n	8005bc6 <_printf_i+0x21e>
 8005be0:	e7eb      	b.n	8005bba <_printf_i+0x212>
 8005be2:	2500      	movs	r5, #0
 8005be4:	f104 0619 	add.w	r6, r4, #25
 8005be8:	e7f5      	b.n	8005bd6 <_printf_i+0x22e>
 8005bea:	bf00      	nop
 8005bec:	08007355 	.word	0x08007355
 8005bf0:	08007366 	.word	0x08007366

08005bf4 <_scanf_chars>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	688a      	ldr	r2, [r1, #8]
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	b932      	cbnz	r2, 8005c10 <_scanf_chars+0x1c>
 8005c02:	698a      	ldr	r2, [r1, #24]
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	bf0c      	ite	eq
 8005c08:	2201      	moveq	r2, #1
 8005c0a:	f04f 32ff 	movne.w	r2, #4294967295
 8005c0e:	608a      	str	r2, [r1, #8]
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005ca4 <_scanf_chars+0xb0>
 8005c16:	06d1      	lsls	r1, r2, #27
 8005c18:	bf5f      	itttt	pl
 8005c1a:	681a      	ldrpl	r2, [r3, #0]
 8005c1c:	1d11      	addpl	r1, r2, #4
 8005c1e:	6019      	strpl	r1, [r3, #0]
 8005c20:	6816      	ldrpl	r6, [r2, #0]
 8005c22:	2700      	movs	r7, #0
 8005c24:	69a0      	ldr	r0, [r4, #24]
 8005c26:	b188      	cbz	r0, 8005c4c <_scanf_chars+0x58>
 8005c28:	2801      	cmp	r0, #1
 8005c2a:	d107      	bne.n	8005c3c <_scanf_chars+0x48>
 8005c2c:	682a      	ldr	r2, [r5, #0]
 8005c2e:	7811      	ldrb	r1, [r2, #0]
 8005c30:	6962      	ldr	r2, [r4, #20]
 8005c32:	5c52      	ldrb	r2, [r2, r1]
 8005c34:	b952      	cbnz	r2, 8005c4c <_scanf_chars+0x58>
 8005c36:	2f00      	cmp	r7, #0
 8005c38:	d031      	beq.n	8005c9e <_scanf_chars+0xaa>
 8005c3a:	e022      	b.n	8005c82 <_scanf_chars+0x8e>
 8005c3c:	2802      	cmp	r0, #2
 8005c3e:	d120      	bne.n	8005c82 <_scanf_chars+0x8e>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005c48:	071b      	lsls	r3, r3, #28
 8005c4a:	d41a      	bmi.n	8005c82 <_scanf_chars+0x8e>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	06da      	lsls	r2, r3, #27
 8005c50:	bf5e      	ittt	pl
 8005c52:	682b      	ldrpl	r3, [r5, #0]
 8005c54:	781b      	ldrbpl	r3, [r3, #0]
 8005c56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005c5a:	682a      	ldr	r2, [r5, #0]
 8005c5c:	686b      	ldr	r3, [r5, #4]
 8005c5e:	3201      	adds	r2, #1
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	68a2      	ldr	r2, [r4, #8]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	3a01      	subs	r2, #1
 8005c68:	606b      	str	r3, [r5, #4]
 8005c6a:	3701      	adds	r7, #1
 8005c6c:	60a2      	str	r2, [r4, #8]
 8005c6e:	b142      	cbz	r2, 8005c82 <_scanf_chars+0x8e>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dcd7      	bgt.n	8005c24 <_scanf_chars+0x30>
 8005c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4798      	blx	r3
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0d0      	beq.n	8005c24 <_scanf_chars+0x30>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f013 0310 	ands.w	r3, r3, #16
 8005c88:	d105      	bne.n	8005c96 <_scanf_chars+0xa2>
 8005c8a:	68e2      	ldr	r2, [r4, #12]
 8005c8c:	3201      	adds	r2, #1
 8005c8e:	60e2      	str	r2, [r4, #12]
 8005c90:	69a2      	ldr	r2, [r4, #24]
 8005c92:	b102      	cbz	r2, 8005c96 <_scanf_chars+0xa2>
 8005c94:	7033      	strb	r3, [r6, #0]
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	443b      	add	r3, r7
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08007393 	.word	0x08007393

08005ca8 <_scanf_i>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	4698      	mov	r8, r3
 8005cae:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <_scanf_i+0x1e0>)
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4682      	mov	sl, r0
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005cc2:	4b72      	ldr	r3, [pc, #456]	; (8005e8c <_scanf_i+0x1e4>)
 8005cc4:	69a1      	ldr	r1, [r4, #24]
 8005cc6:	4a72      	ldr	r2, [pc, #456]	; (8005e90 <_scanf_i+0x1e8>)
 8005cc8:	2903      	cmp	r1, #3
 8005cca:	bf18      	it	ne
 8005ccc:	461a      	movne	r2, r3
 8005cce:	68a3      	ldr	r3, [r4, #8]
 8005cd0:	9201      	str	r2, [sp, #4]
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cd8:	bf88      	it	hi
 8005cda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cde:	4627      	mov	r7, r4
 8005ce0:	bf82      	ittt	hi
 8005ce2:	eb03 0905 	addhi.w	r9, r3, r5
 8005ce6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005cea:	60a3      	strhi	r3, [r4, #8]
 8005cec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005cf0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005cf4:	bf98      	it	ls
 8005cf6:	f04f 0900 	movls.w	r9, #0
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	463d      	mov	r5, r7
 8005cfe:	f04f 0b00 	mov.w	fp, #0
 8005d02:	6831      	ldr	r1, [r6, #0]
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	7809      	ldrb	r1, [r1, #0]
 8005d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f7fa fa77 	bl	8000200 <memchr>
 8005d12:	b328      	cbz	r0, 8005d60 <_scanf_i+0xb8>
 8005d14:	f1bb 0f01 	cmp.w	fp, #1
 8005d18:	d159      	bne.n	8005dce <_scanf_i+0x126>
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	b92a      	cbnz	r2, 8005d2a <_scanf_i+0x82>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	2308      	movs	r3, #8
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	6063      	str	r3, [r4, #4]
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005d30:	6022      	str	r2, [r4, #0]
 8005d32:	68a2      	ldr	r2, [r4, #8]
 8005d34:	1e51      	subs	r1, r2, #1
 8005d36:	60a1      	str	r1, [r4, #8]
 8005d38:	b192      	cbz	r2, 8005d60 <_scanf_i+0xb8>
 8005d3a:	6832      	ldr	r2, [r6, #0]
 8005d3c:	1c51      	adds	r1, r2, #1
 8005d3e:	6031      	str	r1, [r6, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	f805 2b01 	strb.w	r2, [r5], #1
 8005d46:	6872      	ldr	r2, [r6, #4]
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	6072      	str	r2, [r6, #4]
 8005d4e:	dc07      	bgt.n	8005d60 <_scanf_i+0xb8>
 8005d50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005d54:	4631      	mov	r1, r6
 8005d56:	4650      	mov	r0, sl
 8005d58:	4790      	blx	r2
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f040 8085 	bne.w	8005e6a <_scanf_i+0x1c2>
 8005d60:	f10b 0b01 	add.w	fp, fp, #1
 8005d64:	f1bb 0f03 	cmp.w	fp, #3
 8005d68:	d1cb      	bne.n	8005d02 <_scanf_i+0x5a>
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	b90b      	cbnz	r3, 8005d72 <_scanf_i+0xca>
 8005d6e:	230a      	movs	r3, #10
 8005d70:	6063      	str	r3, [r4, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	4947      	ldr	r1, [pc, #284]	; (8005e94 <_scanf_i+0x1ec>)
 8005d76:	6960      	ldr	r0, [r4, #20]
 8005d78:	1ac9      	subs	r1, r1, r3
 8005d7a:	f000 f89d 	bl	8005eb8 <__sccl>
 8005d7e:	f04f 0b00 	mov.w	fp, #0
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03d      	beq.n	8005e06 <_scanf_i+0x15e>
 8005d8a:	6831      	ldr	r1, [r6, #0]
 8005d8c:	6960      	ldr	r0, [r4, #20]
 8005d8e:	f891 c000 	ldrb.w	ip, [r1]
 8005d92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d035      	beq.n	8005e06 <_scanf_i+0x15e>
 8005d9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005d9e:	d124      	bne.n	8005dea <_scanf_i+0x142>
 8005da0:	0510      	lsls	r0, r2, #20
 8005da2:	d522      	bpl.n	8005dea <_scanf_i+0x142>
 8005da4:	f10b 0b01 	add.w	fp, fp, #1
 8005da8:	f1b9 0f00 	cmp.w	r9, #0
 8005dac:	d003      	beq.n	8005db6 <_scanf_i+0x10e>
 8005dae:	3301      	adds	r3, #1
 8005db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005db4:	60a3      	str	r3, [r4, #8]
 8005db6:	6873      	ldr	r3, [r6, #4]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	6073      	str	r3, [r6, #4]
 8005dbe:	dd1b      	ble.n	8005df8 <_scanf_i+0x150>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	e7d9      	b.n	8005d82 <_scanf_i+0xda>
 8005dce:	f1bb 0f02 	cmp.w	fp, #2
 8005dd2:	d1ae      	bne.n	8005d32 <_scanf_i+0x8a>
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005dda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005dde:	d1bf      	bne.n	8005d60 <_scanf_i+0xb8>
 8005de0:	2310      	movs	r3, #16
 8005de2:	6063      	str	r3, [r4, #4]
 8005de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de8:	e7a2      	b.n	8005d30 <_scanf_i+0x88>
 8005dea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005dee:	6022      	str	r2, [r4, #0]
 8005df0:	780b      	ldrb	r3, [r1, #0]
 8005df2:	f805 3b01 	strb.w	r3, [r5], #1
 8005df6:	e7de      	b.n	8005db6 <_scanf_i+0x10e>
 8005df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4650      	mov	r0, sl
 8005e00:	4798      	blx	r3
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0df      	beq.n	8005dc6 <_scanf_i+0x11e>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	05db      	lsls	r3, r3, #23
 8005e0a:	d50d      	bpl.n	8005e28 <_scanf_i+0x180>
 8005e0c:	42bd      	cmp	r5, r7
 8005e0e:	d909      	bls.n	8005e24 <_scanf_i+0x17c>
 8005e10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	4798      	blx	r3
 8005e1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005e22:	464d      	mov	r5, r9
 8005e24:	42bd      	cmp	r5, r7
 8005e26:	d02d      	beq.n	8005e84 <_scanf_i+0x1dc>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	f012 0210 	ands.w	r2, r2, #16
 8005e2e:	d113      	bne.n	8005e58 <_scanf_i+0x1b0>
 8005e30:	702a      	strb	r2, [r5, #0]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	9e01      	ldr	r6, [sp, #4]
 8005e36:	4639      	mov	r1, r7
 8005e38:	4650      	mov	r0, sl
 8005e3a:	47b0      	blx	r6
 8005e3c:	6821      	ldr	r1, [r4, #0]
 8005e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e42:	f011 0f20 	tst.w	r1, #32
 8005e46:	d013      	beq.n	8005e70 <_scanf_i+0x1c8>
 8005e48:	1d1a      	adds	r2, r3, #4
 8005e4a:	f8c8 2000 	str.w	r2, [r8]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6018      	str	r0, [r3, #0]
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60e3      	str	r3, [r4, #12]
 8005e58:	1bed      	subs	r5, r5, r7
 8005e5a:	44ab      	add	fp, r5
 8005e5c:	6925      	ldr	r5, [r4, #16]
 8005e5e:	445d      	add	r5, fp
 8005e60:	6125      	str	r5, [r4, #16]
 8005e62:	2000      	movs	r0, #0
 8005e64:	b007      	add	sp, #28
 8005e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6a:	f04f 0b00 	mov.w	fp, #0
 8005e6e:	e7ca      	b.n	8005e06 <_scanf_i+0x15e>
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	f8c8 2000 	str.w	r2, [r8]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f011 0f01 	tst.w	r1, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	8018      	strhne	r0, [r3, #0]
 8005e80:	6018      	streq	r0, [r3, #0]
 8005e82:	e7e6      	b.n	8005e52 <_scanf_i+0x1aa>
 8005e84:	2001      	movs	r0, #1
 8005e86:	e7ed      	b.n	8005e64 <_scanf_i+0x1bc>
 8005e88:	080062c4 	.word	0x080062c4
 8005e8c:	08006115 	.word	0x08006115
 8005e90:	0800602d 	.word	0x0800602d
 8005e94:	08007390 	.word	0x08007390

08005e98 <_sbrk_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_sbrk_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	f7fb f9e8 	bl	8001278 <_sbrk>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_sbrk_r+0x1a>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_sbrk_r+0x1a>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200032f4 	.word	0x200032f4

08005eb8 <__sccl>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	780b      	ldrb	r3, [r1, #0]
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	2b5e      	cmp	r3, #94	; 0x5e
 8005ec0:	bf0b      	itete	eq
 8005ec2:	784b      	ldrbeq	r3, [r1, #1]
 8005ec4:	1c48      	addne	r0, r1, #1
 8005ec6:	1c88      	addeq	r0, r1, #2
 8005ec8:	2200      	movne	r2, #0
 8005eca:	bf08      	it	eq
 8005ecc:	2201      	moveq	r2, #1
 8005ece:	1e61      	subs	r1, r4, #1
 8005ed0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005ed4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d1fb      	bne.n	8005ed4 <__sccl+0x1c>
 8005edc:	b90b      	cbnz	r3, 8005ee2 <__sccl+0x2a>
 8005ede:	3801      	subs	r0, #1
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	f082 0201 	eor.w	r2, r2, #1
 8005ee6:	54e2      	strb	r2, [r4, r3]
 8005ee8:	4605      	mov	r5, r0
 8005eea:	4628      	mov	r0, r5
 8005eec:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005ef0:	292d      	cmp	r1, #45	; 0x2d
 8005ef2:	d006      	beq.n	8005f02 <__sccl+0x4a>
 8005ef4:	295d      	cmp	r1, #93	; 0x5d
 8005ef6:	d0f3      	beq.n	8005ee0 <__sccl+0x28>
 8005ef8:	b909      	cbnz	r1, 8005efe <__sccl+0x46>
 8005efa:	4628      	mov	r0, r5
 8005efc:	e7f0      	b.n	8005ee0 <__sccl+0x28>
 8005efe:	460b      	mov	r3, r1
 8005f00:	e7f1      	b.n	8005ee6 <__sccl+0x2e>
 8005f02:	786e      	ldrb	r6, [r5, #1]
 8005f04:	2e5d      	cmp	r6, #93	; 0x5d
 8005f06:	d0fa      	beq.n	8005efe <__sccl+0x46>
 8005f08:	42b3      	cmp	r3, r6
 8005f0a:	dcf8      	bgt.n	8005efe <__sccl+0x46>
 8005f0c:	3502      	adds	r5, #2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	3101      	adds	r1, #1
 8005f12:	428e      	cmp	r6, r1
 8005f14:	5462      	strb	r2, [r4, r1]
 8005f16:	dcfb      	bgt.n	8005f10 <__sccl+0x58>
 8005f18:	1af1      	subs	r1, r6, r3
 8005f1a:	3901      	subs	r1, #1
 8005f1c:	1c58      	adds	r0, r3, #1
 8005f1e:	42b3      	cmp	r3, r6
 8005f20:	bfa8      	it	ge
 8005f22:	2100      	movge	r1, #0
 8005f24:	1843      	adds	r3, r0, r1
 8005f26:	e7e0      	b.n	8005eea <__sccl+0x32>

08005f28 <_strtol_l.constprop.0>:
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2e:	d001      	beq.n	8005f34 <_strtol_l.constprop.0+0xc>
 8005f30:	2b24      	cmp	r3, #36	; 0x24
 8005f32:	d906      	bls.n	8005f42 <_strtol_l.constprop.0+0x1a>
 8005f34:	f7fe fff8 	bl	8004f28 <__errno>
 8005f38:	2316      	movs	r3, #22
 8005f3a:	6003      	str	r3, [r0, #0]
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006028 <_strtol_l.constprop.0+0x100>
 8005f46:	460d      	mov	r5, r1
 8005f48:	462e      	mov	r6, r5
 8005f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005f52:	f017 0708 	ands.w	r7, r7, #8
 8005f56:	d1f7      	bne.n	8005f48 <_strtol_l.constprop.0+0x20>
 8005f58:	2c2d      	cmp	r4, #45	; 0x2d
 8005f5a:	d132      	bne.n	8005fc2 <_strtol_l.constprop.0+0x9a>
 8005f5c:	782c      	ldrb	r4, [r5, #0]
 8005f5e:	2701      	movs	r7, #1
 8005f60:	1cb5      	adds	r5, r6, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d05b      	beq.n	800601e <_strtol_l.constprop.0+0xf6>
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d109      	bne.n	8005f7e <_strtol_l.constprop.0+0x56>
 8005f6a:	2c30      	cmp	r4, #48	; 0x30
 8005f6c:	d107      	bne.n	8005f7e <_strtol_l.constprop.0+0x56>
 8005f6e:	782c      	ldrb	r4, [r5, #0]
 8005f70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f74:	2c58      	cmp	r4, #88	; 0x58
 8005f76:	d14d      	bne.n	8006014 <_strtol_l.constprop.0+0xec>
 8005f78:	786c      	ldrb	r4, [r5, #1]
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	3502      	adds	r5, #2
 8005f7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f86:	f04f 0c00 	mov.w	ip, #0
 8005f8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f8e:	4666      	mov	r6, ip
 8005f90:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f98:	f1be 0f09 	cmp.w	lr, #9
 8005f9c:	d816      	bhi.n	8005fcc <_strtol_l.constprop.0+0xa4>
 8005f9e:	4674      	mov	r4, lr
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	dd24      	ble.n	8005fee <_strtol_l.constprop.0+0xc6>
 8005fa4:	f1bc 0f00 	cmp.w	ip, #0
 8005fa8:	db1e      	blt.n	8005fe8 <_strtol_l.constprop.0+0xc0>
 8005faa:	45b1      	cmp	r9, r6
 8005fac:	d31c      	bcc.n	8005fe8 <_strtol_l.constprop.0+0xc0>
 8005fae:	d101      	bne.n	8005fb4 <_strtol_l.constprop.0+0x8c>
 8005fb0:	45a2      	cmp	sl, r4
 8005fb2:	db19      	blt.n	8005fe8 <_strtol_l.constprop.0+0xc0>
 8005fb4:	fb06 4603 	mla	r6, r6, r3, r4
 8005fb8:	f04f 0c01 	mov.w	ip, #1
 8005fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fc0:	e7e8      	b.n	8005f94 <_strtol_l.constprop.0+0x6c>
 8005fc2:	2c2b      	cmp	r4, #43	; 0x2b
 8005fc4:	bf04      	itt	eq
 8005fc6:	782c      	ldrbeq	r4, [r5, #0]
 8005fc8:	1cb5      	addeq	r5, r6, #2
 8005fca:	e7ca      	b.n	8005f62 <_strtol_l.constprop.0+0x3a>
 8005fcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005fd0:	f1be 0f19 	cmp.w	lr, #25
 8005fd4:	d801      	bhi.n	8005fda <_strtol_l.constprop.0+0xb2>
 8005fd6:	3c37      	subs	r4, #55	; 0x37
 8005fd8:	e7e2      	b.n	8005fa0 <_strtol_l.constprop.0+0x78>
 8005fda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005fde:	f1be 0f19 	cmp.w	lr, #25
 8005fe2:	d804      	bhi.n	8005fee <_strtol_l.constprop.0+0xc6>
 8005fe4:	3c57      	subs	r4, #87	; 0x57
 8005fe6:	e7db      	b.n	8005fa0 <_strtol_l.constprop.0+0x78>
 8005fe8:	f04f 3cff 	mov.w	ip, #4294967295
 8005fec:	e7e6      	b.n	8005fbc <_strtol_l.constprop.0+0x94>
 8005fee:	f1bc 0f00 	cmp.w	ip, #0
 8005ff2:	da05      	bge.n	8006000 <_strtol_l.constprop.0+0xd8>
 8005ff4:	2322      	movs	r3, #34	; 0x22
 8005ff6:	6003      	str	r3, [r0, #0]
 8005ff8:	4646      	mov	r6, r8
 8005ffa:	b942      	cbnz	r2, 800600e <_strtol_l.constprop.0+0xe6>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	e79e      	b.n	8005f3e <_strtol_l.constprop.0+0x16>
 8006000:	b107      	cbz	r7, 8006004 <_strtol_l.constprop.0+0xdc>
 8006002:	4276      	negs	r6, r6
 8006004:	2a00      	cmp	r2, #0
 8006006:	d0f9      	beq.n	8005ffc <_strtol_l.constprop.0+0xd4>
 8006008:	f1bc 0f00 	cmp.w	ip, #0
 800600c:	d000      	beq.n	8006010 <_strtol_l.constprop.0+0xe8>
 800600e:	1e69      	subs	r1, r5, #1
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	e7f3      	b.n	8005ffc <_strtol_l.constprop.0+0xd4>
 8006014:	2430      	movs	r4, #48	; 0x30
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1b1      	bne.n	8005f7e <_strtol_l.constprop.0+0x56>
 800601a:	2308      	movs	r3, #8
 800601c:	e7af      	b.n	8005f7e <_strtol_l.constprop.0+0x56>
 800601e:	2c30      	cmp	r4, #48	; 0x30
 8006020:	d0a5      	beq.n	8005f6e <_strtol_l.constprop.0+0x46>
 8006022:	230a      	movs	r3, #10
 8006024:	e7ab      	b.n	8005f7e <_strtol_l.constprop.0+0x56>
 8006026:	bf00      	nop
 8006028:	08007393 	.word	0x08007393

0800602c <_strtol_r>:
 800602c:	f7ff bf7c 	b.w	8005f28 <_strtol_l.constprop.0>

08006030 <_strtoul_l.constprop.0>:
 8006030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006034:	4f36      	ldr	r7, [pc, #216]	; (8006110 <_strtoul_l.constprop.0+0xe0>)
 8006036:	4686      	mov	lr, r0
 8006038:	460d      	mov	r5, r1
 800603a:	4628      	mov	r0, r5
 800603c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006040:	5de6      	ldrb	r6, [r4, r7]
 8006042:	f016 0608 	ands.w	r6, r6, #8
 8006046:	d1f8      	bne.n	800603a <_strtoul_l.constprop.0+0xa>
 8006048:	2c2d      	cmp	r4, #45	; 0x2d
 800604a:	d12f      	bne.n	80060ac <_strtoul_l.constprop.0+0x7c>
 800604c:	782c      	ldrb	r4, [r5, #0]
 800604e:	2601      	movs	r6, #1
 8006050:	1c85      	adds	r5, r0, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d057      	beq.n	8006106 <_strtoul_l.constprop.0+0xd6>
 8006056:	2b10      	cmp	r3, #16
 8006058:	d109      	bne.n	800606e <_strtoul_l.constprop.0+0x3e>
 800605a:	2c30      	cmp	r4, #48	; 0x30
 800605c:	d107      	bne.n	800606e <_strtoul_l.constprop.0+0x3e>
 800605e:	7828      	ldrb	r0, [r5, #0]
 8006060:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006064:	2858      	cmp	r0, #88	; 0x58
 8006066:	d149      	bne.n	80060fc <_strtoul_l.constprop.0+0xcc>
 8006068:	786c      	ldrb	r4, [r5, #1]
 800606a:	2310      	movs	r3, #16
 800606c:	3502      	adds	r5, #2
 800606e:	f04f 38ff 	mov.w	r8, #4294967295
 8006072:	2700      	movs	r7, #0
 8006074:	fbb8 f8f3 	udiv	r8, r8, r3
 8006078:	fb03 f908 	mul.w	r9, r3, r8
 800607c:	ea6f 0909 	mvn.w	r9, r9
 8006080:	4638      	mov	r0, r7
 8006082:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006086:	f1bc 0f09 	cmp.w	ip, #9
 800608a:	d814      	bhi.n	80060b6 <_strtoul_l.constprop.0+0x86>
 800608c:	4664      	mov	r4, ip
 800608e:	42a3      	cmp	r3, r4
 8006090:	dd22      	ble.n	80060d8 <_strtoul_l.constprop.0+0xa8>
 8006092:	2f00      	cmp	r7, #0
 8006094:	db1d      	blt.n	80060d2 <_strtoul_l.constprop.0+0xa2>
 8006096:	4580      	cmp	r8, r0
 8006098:	d31b      	bcc.n	80060d2 <_strtoul_l.constprop.0+0xa2>
 800609a:	d101      	bne.n	80060a0 <_strtoul_l.constprop.0+0x70>
 800609c:	45a1      	cmp	r9, r4
 800609e:	db18      	blt.n	80060d2 <_strtoul_l.constprop.0+0xa2>
 80060a0:	fb00 4003 	mla	r0, r0, r3, r4
 80060a4:	2701      	movs	r7, #1
 80060a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060aa:	e7ea      	b.n	8006082 <_strtoul_l.constprop.0+0x52>
 80060ac:	2c2b      	cmp	r4, #43	; 0x2b
 80060ae:	bf04      	itt	eq
 80060b0:	782c      	ldrbeq	r4, [r5, #0]
 80060b2:	1c85      	addeq	r5, r0, #2
 80060b4:	e7cd      	b.n	8006052 <_strtoul_l.constprop.0+0x22>
 80060b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80060ba:	f1bc 0f19 	cmp.w	ip, #25
 80060be:	d801      	bhi.n	80060c4 <_strtoul_l.constprop.0+0x94>
 80060c0:	3c37      	subs	r4, #55	; 0x37
 80060c2:	e7e4      	b.n	800608e <_strtoul_l.constprop.0+0x5e>
 80060c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80060c8:	f1bc 0f19 	cmp.w	ip, #25
 80060cc:	d804      	bhi.n	80060d8 <_strtoul_l.constprop.0+0xa8>
 80060ce:	3c57      	subs	r4, #87	; 0x57
 80060d0:	e7dd      	b.n	800608e <_strtoul_l.constprop.0+0x5e>
 80060d2:	f04f 37ff 	mov.w	r7, #4294967295
 80060d6:	e7e6      	b.n	80060a6 <_strtoul_l.constprop.0+0x76>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	da07      	bge.n	80060ec <_strtoul_l.constprop.0+0xbc>
 80060dc:	2322      	movs	r3, #34	; 0x22
 80060de:	f8ce 3000 	str.w	r3, [lr]
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295
 80060e6:	b932      	cbnz	r2, 80060f6 <_strtoul_l.constprop.0+0xc6>
 80060e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060ec:	b106      	cbz	r6, 80060f0 <_strtoul_l.constprop.0+0xc0>
 80060ee:	4240      	negs	r0, r0
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d0f9      	beq.n	80060e8 <_strtoul_l.constprop.0+0xb8>
 80060f4:	b107      	cbz	r7, 80060f8 <_strtoul_l.constprop.0+0xc8>
 80060f6:	1e69      	subs	r1, r5, #1
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	e7f5      	b.n	80060e8 <_strtoul_l.constprop.0+0xb8>
 80060fc:	2430      	movs	r4, #48	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1b5      	bne.n	800606e <_strtoul_l.constprop.0+0x3e>
 8006102:	2308      	movs	r3, #8
 8006104:	e7b3      	b.n	800606e <_strtoul_l.constprop.0+0x3e>
 8006106:	2c30      	cmp	r4, #48	; 0x30
 8006108:	d0a9      	beq.n	800605e <_strtoul_l.constprop.0+0x2e>
 800610a:	230a      	movs	r3, #10
 800610c:	e7af      	b.n	800606e <_strtoul_l.constprop.0+0x3e>
 800610e:	bf00      	nop
 8006110:	08007393 	.word	0x08007393

08006114 <_strtoul_r>:
 8006114:	f7ff bf8c 	b.w	8006030 <_strtoul_l.constprop.0>

08006118 <__submore>:
 8006118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006124:	4299      	cmp	r1, r3
 8006126:	d11d      	bne.n	8006164 <__submore+0x4c>
 8006128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800612c:	f7ff f82c 	bl	8005188 <_malloc_r>
 8006130:	b918      	cbnz	r0, 800613a <__submore+0x22>
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800613a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800613e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006140:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006144:	6360      	str	r0, [r4, #52]	; 0x34
 8006146:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800614a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800614e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006152:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006156:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800615a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	2000      	movs	r0, #0
 8006162:	e7e8      	b.n	8006136 <__submore+0x1e>
 8006164:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006166:	0077      	lsls	r7, r6, #1
 8006168:	463a      	mov	r2, r7
 800616a:	f000 f837 	bl	80061dc <_realloc_r>
 800616e:	4605      	mov	r5, r0
 8006170:	2800      	cmp	r0, #0
 8006172:	d0de      	beq.n	8006132 <__submore+0x1a>
 8006174:	eb00 0806 	add.w	r8, r0, r6
 8006178:	4601      	mov	r1, r0
 800617a:	4632      	mov	r2, r6
 800617c:	4640      	mov	r0, r8
 800617e:	f7fe fefd 	bl	8004f7c <memcpy>
 8006182:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006186:	f8c4 8000 	str.w	r8, [r4]
 800618a:	e7e9      	b.n	8006160 <__submore+0x48>

0800618c <__retarget_lock_acquire_recursive>:
 800618c:	4770      	bx	lr

0800618e <__retarget_lock_release_recursive>:
 800618e:	4770      	bx	lr

08006190 <memmove>:
 8006190:	4288      	cmp	r0, r1
 8006192:	b510      	push	{r4, lr}
 8006194:	eb01 0402 	add.w	r4, r1, r2
 8006198:	d902      	bls.n	80061a0 <memmove+0x10>
 800619a:	4284      	cmp	r4, r0
 800619c:	4623      	mov	r3, r4
 800619e:	d807      	bhi.n	80061b0 <memmove+0x20>
 80061a0:	1e43      	subs	r3, r0, #1
 80061a2:	42a1      	cmp	r1, r4
 80061a4:	d008      	beq.n	80061b8 <memmove+0x28>
 80061a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ae:	e7f8      	b.n	80061a2 <memmove+0x12>
 80061b0:	4402      	add	r2, r0
 80061b2:	4601      	mov	r1, r0
 80061b4:	428a      	cmp	r2, r1
 80061b6:	d100      	bne.n	80061ba <memmove+0x2a>
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061c2:	e7f7      	b.n	80061b4 <memmove+0x24>

080061c4 <__malloc_lock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__malloc_lock+0x8>)
 80061c6:	f7ff bfe1 	b.w	800618c <__retarget_lock_acquire_recursive>
 80061ca:	bf00      	nop
 80061cc:	200032f8 	.word	0x200032f8

080061d0 <__malloc_unlock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__malloc_unlock+0x8>)
 80061d2:	f7ff bfdc 	b.w	800618e <__retarget_lock_release_recursive>
 80061d6:	bf00      	nop
 80061d8:	200032f8 	.word	0x200032f8

080061dc <_realloc_r>:
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4680      	mov	r8, r0
 80061e2:	4614      	mov	r4, r2
 80061e4:	460e      	mov	r6, r1
 80061e6:	b921      	cbnz	r1, 80061f2 <_realloc_r+0x16>
 80061e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	4611      	mov	r1, r2
 80061ee:	f7fe bfcb 	b.w	8005188 <_malloc_r>
 80061f2:	b92a      	cbnz	r2, 8006200 <_realloc_r+0x24>
 80061f4:	f7fe ff5c 	bl	80050b0 <_free_r>
 80061f8:	4625      	mov	r5, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006200:	f000 f81b 	bl	800623a <_malloc_usable_size_r>
 8006204:	4284      	cmp	r4, r0
 8006206:	4607      	mov	r7, r0
 8006208:	d802      	bhi.n	8006210 <_realloc_r+0x34>
 800620a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800620e:	d812      	bhi.n	8006236 <_realloc_r+0x5a>
 8006210:	4621      	mov	r1, r4
 8006212:	4640      	mov	r0, r8
 8006214:	f7fe ffb8 	bl	8005188 <_malloc_r>
 8006218:	4605      	mov	r5, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	d0ed      	beq.n	80061fa <_realloc_r+0x1e>
 800621e:	42bc      	cmp	r4, r7
 8006220:	4622      	mov	r2, r4
 8006222:	4631      	mov	r1, r6
 8006224:	bf28      	it	cs
 8006226:	463a      	movcs	r2, r7
 8006228:	f7fe fea8 	bl	8004f7c <memcpy>
 800622c:	4631      	mov	r1, r6
 800622e:	4640      	mov	r0, r8
 8006230:	f7fe ff3e 	bl	80050b0 <_free_r>
 8006234:	e7e1      	b.n	80061fa <_realloc_r+0x1e>
 8006236:	4635      	mov	r5, r6
 8006238:	e7df      	b.n	80061fa <_realloc_r+0x1e>

0800623a <_malloc_usable_size_r>:
 800623a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623e:	1f18      	subs	r0, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfbc      	itt	lt
 8006244:	580b      	ldrlt	r3, [r1, r0]
 8006246:	18c0      	addlt	r0, r0, r3
 8006248:	4770      	bx	lr
	...

0800624c <_init>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr

08006258 <_fini>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr
