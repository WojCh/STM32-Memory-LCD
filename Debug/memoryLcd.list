
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013574  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b380  08013728  08013728  00023728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802eaa8  0802eaa8  000402c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802eaa8  0802eaa8  0003eaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802eab0  0802eab0  000402c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802eab0  0802eab0  0003eab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802eab4  0802eab4  0003eab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0802eab8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402c8  2**0
                  CONTENTS
 10 .bss          00005ab4  200002c8  200002c8  000402c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005d7c  20005d7c  000402c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002955d  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006824  00000000  00000000  00069855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021a0  00000000  00000000  00070080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ee8  00000000  00000000  00072220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e03e  00000000  00000000  00074108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030755  00000000  00000000  000a2146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0462  00000000  00000000  000d289b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c2cfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d30  00000000  00000000  001c2d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801370c 	.word	0x0801370c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	0801370c 	.word	0x0801370c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <SD_logger+0x24>)
 8000fb6:	f000 fa1d 	bl	80013f4 <Create_Dir>
	Create_File("logs/LOG.TXT");
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SD_logger+0x28>)
 8000fbc:	f000 f8da 	bl	8001174 <Create_File>
	Update_File("logs/LOG.TXT", msg);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <SD_logger+0x28>)
 8000fc4:	f000 f962 	bl	800128c <Update_File>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08013728 	.word	0x08013728
 8000fd4:	08013730 	.word	0x08013730

08000fd8 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Mount_SD+0x30>)
 8000fe6:	f00d fdc9 	bl	800eb7c <f_mount>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <Mount_SD+0x34>)
 8000ff0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <Mount_SD+0x34>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Mount_SD+0x26>
		return SD_ERROR;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 8000ffe:	2301      	movs	r3, #1
	}
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002e4 	.word	0x200002e4
 800100c:	20002360 	.word	0x20002360

08001010 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800101a:	494d      	ldr	r1, [pc, #308]	; (8001150 <Read_File+0x140>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f00e fb5a 	bl	800f6d6 <f_stat>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <Read_File+0x144>)
 8001028:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <Read_File+0x144>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f00e fd4c 	bl	800fad0 <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <Read_File+0x148>)
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f00f fc1f 	bl	8010884 <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f00e fd4a 	bl	800fae0 <free>
	    return fresult;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <Read_File+0x144>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	e07a      	b.n	8001148 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8001052:	2201      	movs	r2, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <Read_File+0x14c>)
 8001058:	f00d fdd6 	bl	800ec08 <f_open>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <Read_File+0x144>)
 8001062:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <Read_File+0x144>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f00e fd2f 	bl	800fad0 <malloc>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Read_File+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4938      	ldr	r1, [pc, #224]	; (8001160 <Read_File+0x150>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f00f fbff 	bl	8010884 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f00e fd2a 	bl	800fae0 <free>
		    return fresult;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Read_File+0x144>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e05a      	b.n	8001148 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8001092:	2004      	movs	r0, #4
 8001094:	f00e fd1c 	bl	800fad0 <malloc>
 8001098:	4603      	mov	r3, r0
 800109a:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <Read_File+0x14c>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <Read_File+0x154>)
 80010a2:	69f9      	ldr	r1, [r7, #28]
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <Read_File+0x14c>)
 80010a6:	f00d ff7b 	bl	800efa0 <f_read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <Read_File+0x144>)
 80010b0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <Read_File+0x144>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f00e fd08 	bl	800fad0 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
			free(buffer);
 80010c4:	69f8      	ldr	r0, [r7, #28]
 80010c6:	f00e fd0b 	bl	800fae0 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <Read_File+0x144>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <Read_File+0x158>)
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f00f fbd5 	bl	8010884 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f00e fd00 	bl	800fae0 <free>
 80010e0:	e030      	b.n	8001144 <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80010e2:	2231      	movs	r2, #49	; 0x31
 80010e4:	69f9      	ldr	r1, [r7, #28]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00f fc2f 	bl	801094a <strncpy>
			free(buffer);
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f00e fcf7 	bl	800fae0 <free>

			/* Close file */
			fresult = f_close(&fil);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <Read_File+0x14c>)
 80010f4:	f00e fac5 	bl	800f682 <f_close>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Read_File+0x144>)
 80010fe:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <Read_File+0x144>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d010      	beq.n	800112a <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f00e fce1 	bl	800fad0 <malloc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Read_File+0x144>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4914      	ldr	r1, [pc, #80]	; (800116c <Read_File+0x15c>)
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f00f fbb1 	bl	8010884 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f00e fcdc 	bl	800fae0 <free>
 8001128:	e00c      	b.n	8001144 <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f00e fcd0 	bl	800fad0 <malloc>
 8001130:	4603      	mov	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <Read_File+0x160>)
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f00f fba3 	bl	8010884 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f00e fcce 	bl	800fae0 <free>
			}
		}
	    return fresult;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <Read_File+0x144>)
 8001146:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002348 	.word	0x20002348
 8001154:	20002360 	.word	0x20002360
 8001158:	08013864 	.word	0x08013864
 800115c:	20001318 	.word	0x20001318
 8001160:	080137a0 	.word	0x080137a0
 8001164:	20002364 	.word	0x20002364
 8001168:	08013888 	.word	0x08013888
 800116c:	080138b0 	.word	0x080138b0
 8001170:	080138d8 	.word	0x080138d8

08001174 <Create_File>:

FRESULT Create_File (char *name)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800117c:	493b      	ldr	r1, [pc, #236]	; (800126c <Create_File+0xf8>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f00e faa9 	bl	800f6d6 <f_stat>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <Create_File+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <Create_File+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10f      	bne.n	80011b4 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f00e fc9b 	bl	800fad0 <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4934      	ldr	r1, [pc, #208]	; (8001274 <Create_File+0x100>)
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f00f fb6e 	bl	8010884 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f00e fc99 	bl	800fae0 <free>
	    return fresult;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Create_File+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e057      	b.n	8001264 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011b4:	220b      	movs	r2, #11
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	482f      	ldr	r0, [pc, #188]	; (8001278 <Create_File+0x104>)
 80011ba:	f00d fd25 	bl	800ec08 <f_open>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <Create_File+0xfc>)
 80011c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Create_File+0xfc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f00e fc7e 	bl	800fad0 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <Create_File+0xfc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4926      	ldr	r1, [pc, #152]	; (800127c <Create_File+0x108>)
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f00f fb4e 	bl	8010884 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f00e fc79 	bl	800fae0 <free>
		    return fresult;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Create_File+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e037      	b.n	8001264 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f00e fc6b 	bl	800fad0 <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <Create_File+0x10c>)
 8001202:	69f8      	ldr	r0, [r7, #28]
 8001204:	f00f fb3e 	bl	8010884 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001208:	69f8      	ldr	r0, [r7, #28]
 800120a:	f00e fc69 	bl	800fae0 <free>
		}

		fresult = f_close(&fil);
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <Create_File+0x104>)
 8001210:	f00e fa37 	bl	800f682 <f_close>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <Create_File+0xfc>)
 800121a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Create_File+0xfc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d010      	beq.n	8001246 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f00e fc53 	bl	800fad0 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Create_File+0xfc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <Create_File+0x110>)
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f00f fb23 	bl	8010884 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f00e fc4e 	bl	800fae0 <free>
 8001244:	e00c      	b.n	8001260 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f00e fc42 	bl	800fad0 <malloc>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <Create_File+0x114>)
 8001254:	69b8      	ldr	r0, [r7, #24]
 8001256:	f00f fb15 	bl	8010884 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f00e fc40 	bl	800fae0 <free>
		}
	}
    return fresult;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <Create_File+0xfc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20002348 	.word	0x20002348
 8001270:	20002360 	.word	0x20002360
 8001274:	080138f8 	.word	0x080138f8
 8001278:	20001318 	.word	0x20001318
 800127c:	08013930 	.word	0x08013930
 8001280:	08013958 	.word	0x08013958
 8001284:	08013998 	.word	0x08013998
 8001288:	080138d8 	.word	0x080138d8

0800128c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001296:	494d      	ldr	r1, [pc, #308]	; (80013cc <Update_File+0x140>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00e fa1c 	bl	800f6d6 <f_stat>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <Update_File+0x144>)
 80012a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <Update_File+0x144>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f00e fc0e 	bl	800fad0 <malloc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <Update_File+0x148>)
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f00f fae1 	bl	8010884 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f00e fc0c 	bl	800fae0 <free>
	    return fresult;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <Update_File+0x144>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e079      	b.n	80013c2 <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012ce:	2232      	movs	r2, #50	; 0x32
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4841      	ldr	r0, [pc, #260]	; (80013d8 <Update_File+0x14c>)
 80012d4:	f00d fc98 	bl	800ec08 <f_open>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Update_File+0x144>)
 80012de:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <Update_File+0x144>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f00e fbf1 	bl	800fad0 <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <Update_File+0x144>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <Update_File+0x150>)
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00f fac1 	bl	8010884 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f00e fbec 	bl	800fae0 <free>
	        return fresult;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <Update_File+0x144>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e059      	b.n	80013c2 <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7fe ff6e 	bl	80001f0 <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <Update_File+0x154>)
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	482f      	ldr	r0, [pc, #188]	; (80013d8 <Update_File+0x14c>)
 800131c:	f00d ff9f 	bl	800f25e <f_write>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <Update_File+0x144>)
 8001326:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <Update_File+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f00e fbcd 	bl	800fad0 <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Update_File+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4928      	ldr	r1, [pc, #160]	; (80013e4 <Update_File+0x158>)
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	f00f fa9d 	bl	8010884 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f00e fbc8 	bl	800fae0 <free>
 8001350:	e00c      	b.n	800136c <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f00e fbbc 	bl	800fad0 <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4922      	ldr	r1, [pc, #136]	; (80013e8 <Update_File+0x15c>)
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f00f fa8f 	bl	8010884 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001366:	69f8      	ldr	r0, [r7, #28]
 8001368:	f00e fbba 	bl	800fae0 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <Update_File+0x14c>)
 800136e:	f00e f988 	bl	800f682 <f_close>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Update_File+0x144>)
 8001378:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <Update_File+0x144>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f00e fba4 	bl	800fad0 <malloc>
 8001388:	4603      	mov	r3, r0
 800138a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Update_File+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <Update_File+0x160>)
 8001396:	6938      	ldr	r0, [r7, #16]
 8001398:	f00f fa74 	bl	8010884 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f00e fb9f 	bl	800fae0 <free>
 80013a2:	e00c      	b.n	80013be <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f00e fb93 	bl	800fad0 <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <Update_File+0x164>)
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f00f fa66 	bl	8010884 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f00e fb91 	bl	800fae0 <free>
	     }
	}
    return fresult;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Update_File+0x144>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20002348 	.word	0x20002348
 80013d0:	20002360 	.word	0x20002360
 80013d4:	08013780 	.word	0x08013780
 80013d8:	20001318 	.word	0x20001318
 80013dc:	080137a0 	.word	0x080137a0
 80013e0:	20002368 	.word	0x20002368
 80013e4:	080139bc 	.word	0x080139bc
 80013e8:	080139e4 	.word	0x080139e4
 80013ec:	080138b0 	.word	0x080138b0
 80013f0:	080138d8 	.word	0x080138d8

080013f4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f00e f9a3 	bl	800f748 <f_mkdir>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <Create_Dir+0x68>)
 8001408:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <Create_Dir+0x68>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f00e fb5c 	bl	800fad0 <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <Create_Dir+0x6c>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f00f fa2f 	bl	8010884 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f00e fb5a 	bl	800fae0 <free>
 800142c:	e00f      	b.n	800144e <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f00e fb4e 	bl	800fad0 <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <Create_Dir+0x68>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <Create_Dir+0x70>)
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f00f fa1e 	bl	8010884 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f00e fb49 	bl	800fae0 <free>
    }
    return fresult;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <Create_Dir+0x68>)
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20002360 	.word	0x20002360
 8001460:	08013a44 	.word	0x08013a44
 8001464:	08013a68 	.word	0x08013a68

08001468 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001476:	2332      	movs	r3, #50	; 0x32
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	22d0      	movs	r2, #208	; 0xd0
 8001486:	21ef      	movs	r1, #239	; 0xef
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <read_chip_id+0x3c>)
 800148a:	f006 f851 	bl	8007530 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b55      	cmp	r3, #85	; 0x55
 8001492:	d001      	beq.n	8001498 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001494:	2301      	movs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20002728 	.word	0x20002728

080014a8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d81a      	bhi.n	80014f4 <set_oss+0x4c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <set_oss+0x1c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014ed 	.word	0x080014ed
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	705a      	strb	r2, [r3, #1]
			break;
 80014da:	e00f      	b.n	80014fc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	705a      	strb	r2, [r3, #1]
			break;
 80014e2:	e00b      	b.n	80014fc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220e      	movs	r2, #14
 80014e8:	705a      	strb	r2, [r3, #1]
			break;
 80014ea:	e007      	b.n	80014fc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	221a      	movs	r2, #26
 80014f0:	705a      	strb	r2, [r3, #1]
			break;
 80014f2:	e003      	b.n	80014fc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2208      	movs	r2, #8
 80014f8:	705a      	strb	r2, [r3, #1]
			break;
 80014fa:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2302      	movs	r3, #2
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f4      	movs	r2, #244	; 0xf4
 800151e:	21ee      	movs	r1, #238	; 0xee
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <set_oss+0x88>)
 8001522:	f005 ff0b 	bl	800733c <HAL_I2C_Mem_Write>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002728 	.word	0x20002728

08001534 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2316      	movs	r3, #22
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	22aa      	movs	r2, #170	; 0xaa
 8001574:	21ef      	movs	r1, #239	; 0xef
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <read_calib_data+0xe0>)
 8001578:	f005 ffda 	bl	8007530 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001582:	e03c      	b.n	80015fe <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3328      	adds	r3, #40	; 0x28
 800158c:	443b      	add	r3, r7
 800158e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b219      	sxth	r1, r3
 8001596:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800159a:	3328      	adds	r3, #40	; 0x28
 800159c:	443b      	add	r3, r7
 800159e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4403      	add	r3, r0
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b212      	sxth	r2, r2
 80015b2:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440b      	add	r3, r1
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d9be      	bls.n	8001584 <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800160a:	4618      	mov	r0, r3
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20002728 	.word	0x20002728

08001618 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00e fa70 	bl	800fb0c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 800162c:	687c      	ldr	r4, [r7, #4]
 800162e:	f7ff ff1b 	bl	8001468 <read_chip_id>
 8001632:	4603      	mov	r3, r0
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	687c      	ldr	r4, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff79 	bl	8001534 <read_calib_data>
 8001642:	4603      	mov	r3, r0
 8001644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff2a 	bl	80014a8 <set_oss>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001662:	232e      	movs	r3, #46	; 0x2e
 8001664:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f4      	movs	r2, #244	; 0xf4
 8001676:	21ee      	movs	r1, #238	; 0xee
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <get_ut+0x50>)
 800167a:	f005 fe5f 	bl	800733c <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 800167e:	2005      	movs	r0, #5
 8001680:	f005 f940 	bl	8006904 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001684:	2332      	movs	r3, #50	; 0x32
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2302      	movs	r3, #2
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	22f6      	movs	r2, #246	; 0xf6
 8001694:	21ef      	movs	r1, #239	; 0xef
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <get_ut+0x50>)
 8001698:	f005 ff4a 	bl	8007530 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	797a      	ldrb	r2, [r7, #5]
 80016a2:	4313      	orrs	r3, r2
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002728 	.word	0x20002728

080016b0 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	895b      	ldrh	r3, [r3, #10]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	8912      	ldrh	r2, [r2, #8]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	13db      	asrs	r3, r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ec:	02da      	lsls	r2, r3, #11
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f4:	4619      	mov	r1, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	440b      	add	r3, r1
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	3308      	adds	r3, #8
 8001710:	111b      	asrs	r3, r3, #4
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001768 <get_temp+0xb8>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800176c <get_temp+0xbc>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d908      	bls.n	800174a <get_temp+0x9a>
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001770 <get_temp+0xc0>
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	db03      	blt.n	8001752 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	3dcccccd 	.word	0x3dcccccd
 800176c:	c2200000 	.word	0xc2200000
 8001770:	42aa0000 	.word	0x42aa0000

08001774 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af04      	add	r7, sp, #16
 800177a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <get_up+0x7c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	2300      	movs	r3, #0
 8001784:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800178a:	2334      	movs	r3, #52	; 0x34
 800178c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800178e:	2332      	movs	r3, #50	; 0x32
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f4      	movs	r2, #244	; 0xf4
 80017a0:	21ee      	movs	r1, #238	; 0xee
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <get_up+0x80>)
 80017a4:	f005 fdca 	bl	800733c <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f8aa 	bl	8006904 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2303      	movs	r3, #3
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	22f6      	movs	r2, #246	; 0xf6
 80017c2:	21ef      	movs	r1, #239	; 0xef
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <get_up+0x80>)
 80017c6:	f005 feb3 	bl	8007530 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017ca:	7a3b      	ldrb	r3, [r7, #8]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4413      	add	r3, r2
 80017d4:	7aba      	ldrb	r2, [r7, #10]
 80017d6:	441a      	add	r2, r3
 80017d8:	793b      	ldrb	r3, [r7, #4]
 80017da:	f1c3 0308 	rsb	r3, r3, #8
 80017de:	fa42 f303 	asr.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
	return up;
 80017e4:	68fb      	ldr	r3, [r7, #12]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08013ad8 	.word	0x08013ad8
 80017f4:	20002728 	.word	0x20002728

080017f8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017f8:	b084      	sub	sp, #16
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001812:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001816:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001818:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fb03 f303 	mul.w	r3, r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da01      	bge.n	800182c <get_pressure+0x34>
 8001828:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800182c:	131b      	asrs	r3, r3, #12
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	da01      	bge.n	800183a <get_pressure+0x42>
 8001836:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183a:	12db      	asrs	r3, r3, #11
 800183c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800183e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001842:	461a      	mov	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <get_pressure+0x5a>
 800184e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001852:	12db      	asrs	r3, r3, #11
 8001854:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800185e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001862:	009a      	lsls	r2, r3, #2
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800186c:	4093      	lsls	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	da00      	bge.n	8001876 <get_pressure+0x7e>
 8001874:	3303      	adds	r3, #3
 8001876:	109b      	asrs	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800187a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	da02      	bge.n	8001890 <get_pressure+0x98>
 800188a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800188e:	331f      	adds	r3, #31
 8001890:	135b      	asrs	r3, r3, #13
 8001892:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001894:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001898:	461a      	mov	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fb03 f303 	mul.w	r3, r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da01      	bge.n	80018a8 <get_pressure+0xb0>
 80018a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018a8:	131b      	asrs	r3, r3, #12
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <get_pressure+0xc0>
 80018b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018b6:	33ff      	adds	r3, #255	; 0xff
 80018b8:	141b      	asrs	r3, r3, #16
 80018ba:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	3302      	adds	r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da00      	bge.n	80018ca <get_pressure+0xd2>
 80018c8:	3303      	adds	r3, #3
 80018ca:	109b      	asrs	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	0bdb      	lsrs	r3, r3, #15
 80018de:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80018ec:	4611      	mov	r1, r2
 80018ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018f2:	410a      	asrs	r2, r1
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db06      	blt.n	800190e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	005a      	lsls	r2, r3, #1
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e005      	b.n	800191a <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <get_pressure+0x12a>
 8001920:	33ff      	adds	r3, #255	; 0xff
 8001922:	121b      	asrs	r3, r3, #8
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_pressure+0x136>
 800192c:	33ff      	adds	r3, #255	; 0xff
 800192e:	121b      	asrs	r3, r3, #8
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f640 32de 	movw	r2, #3038	; 0xbde
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	da02      	bge.n	800194a <get_pressure+0x152>
 8001944:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001948:	33ff      	adds	r3, #255	; 0xff
 800194a:	141b      	asrs	r3, r3, #16
 800194c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <get_pressure+0x198>)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	da02      	bge.n	8001960 <get_pressure+0x168>
 800195a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800195e:	33ff      	adds	r3, #255	; 0xff
 8001960:	141b      	asrs	r3, r3, #16
 8001962:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <get_pressure+0x17c>
 8001972:	330f      	adds	r3, #15
 8001974:	111b      	asrs	r3, r3, #4
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

	return p;
 800197e:	69fb      	ldr	r3, [r7, #28]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	b004      	add	sp, #16
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	ffffe343 	.word	0xffffe343
 8001994:	00000000 	.word	0x00000000

08001998 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <get_altitude+0xb8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019bc:	ee16 0a90 	vmov	r0, s13
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a40 <get_altitude+0xa8>
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f010 ff56 	bl	8012880 <pow>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	491d      	ldr	r1, [pc, #116]	; (8001a54 <get_altitude+0xbc>)
 80019de:	f7fe fc63 	bl	80002a8 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a317      	add	r3, pc, #92	; (adr r3, 8001a48 <get_altitude+0xb0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe12 	bl	8000618 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f904 	bl	8000c08 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a58 <get_altitude+0xc0>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d908      	bls.n	8001a28 <get_altitude+0x90>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a5c <get_altitude+0xc4>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	db03      	blt.n	8001a30 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ee07 3a90 	vmov	s15, r3
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ccd9456c 	.word	0xccd9456c
 8001a44:	3fc85b95 	.word	0x3fc85b95
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40e5a540 	.word	0x40e5a540
 8001a50:	20000000 	.word	0x20000000
 8001a54:	3ff00000 	.word	0x3ff00000
 8001a58:	c3fa0000 	.word	0xc3fa0000
 8001a5c:	460ca000 	.word	0x460ca000

08001a60 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd66 	bl	8000544 <__aeabi_i2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <get_slp+0x80>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001ae4 <get_slp+0x84>
 8001a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001ad8 <get_slp+0x78>
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f010 feeb 	bl	8012880 <pow>
 8001aaa:	ec53 2b10 	vmov	r2, r3, d0
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fedb 	bl	800086c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f8a3 	bl	8000c08 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]

	return slp;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	ee07 3a90 	vmov	s15, r3
}
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	b851eb85 	.word	0xb851eb85
 8001adc:	4015051e 	.word	0x4015051e
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	472d2a00 	.word	0x472d2a00

08001ae8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b095      	sub	sp, #84	; 0x54
 8001aec:	af0e      	add	r7, sp, #56	; 0x38
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001af2:	f7ff fdb3 	bl	800165c <get_ut>
 8001af6:	ee07 0a90 	vmov	s15, r0
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fdd3 	bl	80016b0 <get_temp>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001b18:	f7ff fe2c 	bl	8001774 <get_up>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001b22:	683e      	ldr	r6, [r7, #0]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b3e:	f7ff fe5b 	bl	80017f8 <get_pressure>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ff89 	bl	8001a60 <get_slp>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff ff1d 	bl	8001998 <get_altitude>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	617b      	str	r3, [r7, #20]
	return result;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461c      	mov	r4, r3
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b98 <button_set_long_press_time>:
// Button states and handlers
Button_State button_states[NUM_BUTTONS];
Button_Handler button_handlers[NUM_BUTTONS];

// Set long press time for a button
void button_set_long_press_time(uint8_t button_num, uint32_t long_press_time) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
    if (button_num < NUM_BUTTONS) {
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d809      	bhi.n	8001bbe <button_set_long_press_time+0x26>
        button_handlers[button_num].long_press_time = long_press_time;
 8001baa:	79fa      	ldrb	r2, [r7, #7]
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <button_set_long_press_time+0x34>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3330      	adds	r3, #48	; 0x30
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
    }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20002420 	.word	0x20002420

08001bd0 <button_set_hold_cycle_time>:
// Set cyclic time period for a button, when held
void button_set_hold_cycle_time(uint8_t button_num, uint32_t cycle_period) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
    if (button_num < NUM_BUTTONS) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d809      	bhi.n	8001bf6 <button_set_hold_cycle_time+0x26>
        button_handlers[button_num].cycle_period = cycle_period;
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <button_set_hold_cycle_time+0x34>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3334      	adds	r3, #52	; 0x34
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
    }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20002420 	.word	0x20002420

08001c08 <button_set_handler>:
        button_states[i].debounce_counter = 0;
    }
}

// Set button event handler
void button_set_handler(uint8_t button_num, Button_Event event_type, Button_Callback callback, void* context) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	460b      	mov	r3, r1
 8001c18:	73bb      	strb	r3, [r7, #14]
    if (button_num < NUM_BUTTONS) {
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d816      	bhi.n	8001c4e <button_set_handler+0x46>
        button_handlers[button_num].callback[event_type] = callback;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	7bb9      	ldrb	r1, [r7, #14]
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <button_set_handler+0x54>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	440b      	add	r3, r1
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        button_handlers[button_num].context[event_type] = context;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	7bb9      	ldrb	r1, [r7, #14]
 8001c3a:	4808      	ldr	r0, [pc, #32]	; (8001c5c <button_set_handler+0x54>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	3306      	adds	r3, #6
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20002420 	.word	0x20002420

08001c60 <button_task>:
 * @brief Scans and processes button states, detects button events, and triggers corresponding callbacks.
 *
 * This function should be called periodically in the main loop. It handles debouncing, press, release, short press,
 * long press, and double press events for a defined set of buttons, and triggers their respective callback functions.
 */
void button_task(void) {
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
    uint8_t debounce_threshold = 8; // Amount of HAL ticks to wait for button to stop bouncing
 8001c66:	2308      	movs	r3, #8
 8001c68:	73bb      	strb	r3, [r7, #14]
    uint32_t double_press_timeout = 150; // Amount of HAL ticks to wait for a second press to be considered a double press
 8001c6a:	2396      	movs	r3, #150	; 0x96
 8001c6c:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e1a7      	b.n	8001fc4 <button_task+0x364>

        // Read the current state of the button (pressed or not pressed)
        uint8_t current_state = HAL_GPIO_ReadPin(Button_Port[i], Button_Pin[i]) == GPIO_PIN_RESET;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	4a92      	ldr	r2, [pc, #584]	; (8001ec0 <button_task+0x260>)
 8001c78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	4991      	ldr	r1, [pc, #580]	; (8001ec4 <button_task+0x264>)
 8001c80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f005 f9a4 	bl	8006fd4 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	71fb      	strb	r3, [r7, #7]

        // Check if the button state has changed
        if (current_state != button_states[i].pressed) {
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	4a8a      	ldr	r2, [pc, #552]	; (8001ec8 <button_task+0x268>)
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	f000 8112 	beq.w	8001ed0 <button_task+0x270>
            // Increment debounce counter
            button_states[i].debounce_counter++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	4986      	ldr	r1, [pc, #536]	; (8001ec8 <button_task+0x268>)
 8001cb0:	011a      	lsls	r2, r3, #4
 8001cb2:	440a      	add	r2, r1
 8001cb4:	320d      	adds	r2, #13
 8001cb6:	7812      	ldrb	r2, [r2, #0]
 8001cb8:	3201      	adds	r2, #1
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	4a82      	ldr	r2, [pc, #520]	; (8001ec8 <button_task+0x268>)
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	330d      	adds	r3, #13
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	701a      	strb	r2, [r3, #0]

            // Check if the debounce counter has reached the threshold
            if (button_states[i].debounce_counter >= debounce_threshold) {
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4a7f      	ldr	r2, [pc, #508]	; (8001ec8 <button_task+0x268>)
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	330d      	adds	r3, #13
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	7bba      	ldrb	r2, [r7, #14]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	f200 8171 	bhi.w	8001fbe <button_task+0x35e>

                // If the button has been released (state changed from pressed to not pressed)
                if (button_states[i].pressed) {
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <button_task+0x268>)
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80a1 	beq.w	8001e2e <button_task+0x1ce>
                    // Trigger the release event callback
                    button_handlers[i].callback[BUTTON_EVENT_RELEASE](button_handlers[i].context[BUTTON_EVENT_RELEASE]);
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	4977      	ldr	r1, [pc, #476]	; (8001ecc <button_task+0x26c>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	4872      	ldr	r0, [pc, #456]	; (8001ecc <button_task+0x26c>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4403      	add	r3, r0
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	4788      	blx	r1

                    // Reset cycle elapsed period value
                    button_states[i].cycle_time = 0;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4a6c      	ldr	r2, [pc, #432]	; (8001ec8 <button_task+0x268>)
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

                    // Calculate the time since the button was last pressed
                    uint32_t time_since_press = HAL_GetTick() - button_states[i].press_time;
 8001d22:	f004 fde3 	bl	80068ec <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	4967      	ldr	r1, [pc, #412]	; (8001ec8 <button_task+0x268>)
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	440b      	add	r3, r1
 8001d30:	3304      	adds	r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	603b      	str	r3, [r7, #0]

                    // Check if the button was pressed once and held longer than the long press time
                    if (button_states[i].press_count == 1 && time_since_press > button_handlers[i].long_press_time) {
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <button_task+0x268>)
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	330c      	adds	r3, #12
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d127      	bne.n	8001d98 <button_task+0x138>
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	4960      	ldr	r1, [pc, #384]	; (8001ecc <button_task+0x26c>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d91b      	bls.n	8001d98 <button_task+0x138>
                        // Trigger the long press event callback and reset the press count
                        button_handlers[i].callback[BUTTON_EVENT_LONG_PRESS](button_handlers[i].context[BUTTON_EVENT_LONG_PRESS]);
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	495a      	ldr	r1, [pc, #360]	; (8001ecc <button_task+0x26c>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	330c      	adds	r3, #12
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	4855      	ldr	r0, [pc, #340]	; (8001ecc <button_task+0x26c>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4403      	add	r3, r0
 8001d80:	3324      	adds	r3, #36	; 0x24
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	4788      	blx	r1
                        button_states[i].press_count = 0;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <button_task+0x268>)
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	330c      	adds	r3, #12
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e04a      	b.n	8001e2e <button_task+0x1ce>
                    }
                    // Check if the button was pressed once and released within the double press timeout
                    else if (button_states[i].press_count == 1 && time_since_press > double_press_timeout) {
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <button_task+0x268>)
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	330c      	adds	r3, #12
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d11f      	bne.n	8001de8 <button_task+0x188>
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d91b      	bls.n	8001de8 <button_task+0x188>
                        // Trigger the short press event callback and reset the press count
                        button_handlers[i].callback[BUTTON_EVENT_SHORT_PRESS](button_handlers[i].context[BUTTON_EVENT_SHORT_PRESS]);
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	4946      	ldr	r1, [pc, #280]	; (8001ecc <button_task+0x26c>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	4841      	ldr	r0, [pc, #260]	; (8001ecc <button_task+0x26c>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4403      	add	r3, r0
 8001dd0:	331c      	adds	r3, #28
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4788      	blx	r1
                        button_states[i].press_count = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	4a3b      	ldr	r2, [pc, #236]	; (8001ec8 <button_task+0x268>)
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	330c      	adds	r3, #12
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e022      	b.n	8001e2e <button_task+0x1ce>
                    }
                    // Check if the button was pressed twice or more
                    else if (button_states[i].press_count >= 2) {
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	4a37      	ldr	r2, [pc, #220]	; (8001ec8 <button_task+0x268>)
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	330c      	adds	r3, #12
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d91a      	bls.n	8001e2e <button_task+0x1ce>
                        // Trigger the double press event callback and reset the press count
                        button_handlers[i].callback[BUTTON_EVENT_DOUBLE_PRESS](button_handlers[i].context[BUTTON_EVENT_DOUBLE_PRESS]);
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	4934      	ldr	r1, [pc, #208]	; (8001ecc <button_task+0x26c>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3310      	adds	r3, #16
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	482f      	ldr	r0, [pc, #188]	; (8001ecc <button_task+0x26c>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4403      	add	r3, r0
 8001e18:	3328      	adds	r3, #40	; 0x28
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	4788      	blx	r1
                        button_states[i].press_count = 0;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <button_task+0x268>)
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	330c      	adds	r3, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
                    }
                }

                // Update button state and reset debounce counter
                button_states[i].pressed = current_state;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <button_task+0x268>)
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	701a      	strb	r2, [r3, #0]
                button_states[i].debounce_counter = 0;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <button_task+0x268>)
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	330d      	adds	r3, #13
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

                // If the button has been pressed
                if (current_state) {
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80b7 	beq.w	8001fbe <button_task+0x35e>
                    // Update press time, trigger the press event callback, and increment the press count
                    button_states[i].press_time = HAL_GetTick();
 8001e50:	7bfc      	ldrb	r4, [r7, #15]
 8001e52:	f004 fd4b 	bl	80068ec <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <button_task+0x268>)
 8001e5a:	0123      	lsls	r3, r4, #4
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3304      	adds	r3, #4
 8001e60:	601a      	str	r2, [r3, #0]
                    button_handlers[i].callback[BUTTON_EVENT_DOWN](button_handlers[i].context[BUTTON_EVENT_DOWN]);
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	4919      	ldr	r1, [pc, #100]	; (8001ecc <button_task+0x26c>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	4815      	ldr	r0, [pc, #84]	; (8001ecc <button_task+0x26c>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4403      	add	r3, r0
 8001e80:	3318      	adds	r3, #24
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	4788      	blx	r1
                    button_states[i].press_count++;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	490f      	ldr	r1, [pc, #60]	; (8001ec8 <button_task+0x268>)
 8001e8c:	011a      	lsls	r2, r3, #4
 8001e8e:	440a      	add	r2, r1
 8001e90:	320c      	adds	r2, #12
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	3201      	adds	r2, #1
 8001e96:	b2d1      	uxtb	r1, r2
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <button_task+0x268>)
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	701a      	strb	r2, [r3, #0]
                    // Save time of first cycle start
                    button_states[i].cycle_time = button_states[i].press_time;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <button_task+0x268>)
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	440a      	add	r2, r1
 8001eae:	3204      	adds	r2, #4
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4905      	ldr	r1, [pc, #20]	; (8001ec8 <button_task+0x268>)
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3308      	adds	r3, #8
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e07f      	b.n	8001fbe <button_task+0x35e>
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000020 	.word	0x20000020
 8001ec8:	200023c0 	.word	0x200023c0
 8001ecc:	20002420 	.word	0x20002420
                }
            }
        } else {
            // If the button was released after one press and double_press_timeout elapsed without press, trigger short_single_press
            if (!button_states[i].pressed && button_states[i].press_count == 1 && HAL_GetTick() - button_states[i].press_time > double_press_timeout) {
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <button_task+0x378>)
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d12f      	bne.n	8001f3e <button_task+0x2de>
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <button_task+0x378>)
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d127      	bne.n	8001f3e <button_task+0x2de>
 8001eee:	f004 fcfd 	bl	80068ec <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	4938      	ldr	r1, [pc, #224]	; (8001fd8 <button_task+0x378>)
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	440b      	add	r3, r1
 8001efc:	3304      	adds	r3, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d21a      	bcs.n	8001f3e <button_task+0x2de>
                // Trigger the short press event and reset the press count
                button_handlers[i].callback[BUTTON_EVENT_SHORT_PRESS](button_handlers[i].context[BUTTON_EVENT_SHORT_PRESS]);
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	4934      	ldr	r1, [pc, #208]	; (8001fdc <button_task+0x37c>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3304      	adds	r3, #4
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	482f      	ldr	r0, [pc, #188]	; (8001fdc <button_task+0x37c>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4403      	add	r3, r0
 8001f28:	331c      	adds	r3, #28
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4788      	blx	r1
                button_states[i].press_count = 0;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <button_task+0x378>)
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	330c      	adds	r3, #12
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
            }
            // If the button is pressed and cycle period elapsed
            if (button_states[i].pressed && HAL_GetTick() - button_states[i].cycle_time >= button_handlers[i].cycle_period){
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <button_task+0x378>)
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d031      	beq.n	8001fb0 <button_task+0x350>
 8001f4c:	f004 fcce 	bl	80068ec <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	4920      	ldr	r1, [pc, #128]	; (8001fd8 <button_task+0x378>)
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	440b      	add	r3, r1
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1ad1      	subs	r1, r2, r3
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	481e      	ldr	r0, [pc, #120]	; (8001fdc <button_task+0x37c>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3334      	adds	r3, #52	; 0x34
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4299      	cmp	r1, r3
 8001f74:	d31c      	bcc.n	8001fb0 <button_task+0x350>
            	// Trigger the cyclic hold event and reset the counter
                button_handlers[i].callback[BUTTON_EVENT_HOLD_CYCLIC](button_handlers[i].context[BUTTON_EVENT_HOLD_CYCLIC]);
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	4918      	ldr	r1, [pc, #96]	; (8001fdc <button_task+0x37c>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3314      	adds	r3, #20
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <button_task+0x37c>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4403      	add	r3, r0
 8001f96:	332c      	adds	r3, #44	; 0x2c
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4788      	blx	r1
                button_states[i].cycle_time = HAL_GetTick();
 8001f9e:	7bfc      	ldrb	r4, [r7, #15]
 8001fa0:	f004 fca4 	bl	80068ec <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <button_task+0x378>)
 8001fa8:	0123      	lsls	r3, r4, #4
 8001faa:	440b      	add	r3, r1
 8001fac:	3308      	adds	r3, #8
 8001fae:	601a      	str	r2, [r3, #0]
            }

            // Reset the debounce counter if the button state hasn't changed
            button_states[i].debounce_counter = 0;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <button_task+0x378>)
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	330d      	adds	r3, #13
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	f67f ae54 	bls.w	8001c74 <button_task+0x14>
        }
    }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200023c0 	.word	0x200023c0
 8001fdc:	20002420 	.word	0x20002420

08001fe0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001fec:	e0ad      	b.n	800214a <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4959      	ldr	r1, [pc, #356]	; (8002160 <initButtons+0x180>)
 8001ffc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002000:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	440b      	add	r3, r1
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4955      	ldr	r1, [pc, #340]	; (8002164 <initButtons+0x184>)
 8002010:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002014:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	7993      	ldrb	r3, [r2, #6]
 8002022:	f36f 0300 	bfc	r3, #0, #1
 8002026:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	7993      	ldrb	r3, [r2, #6]
 8002034:	f36f 0341 	bfc	r3, #1, #1
 8002038:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b05      	cmp	r3, #5
 800214e:	f67f af4e 	bls.w	8001fee <initButtons+0xe>
	}
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000044 	.word	0x20000044
 8002164:	2000002c 	.word	0x2000002c

08002168 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8002172:	e044      	b.n	80021fe <resetButtonHandlers+0x96>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a27      	ldr	r2, [pc, #156]	; (8002214 <resetButtonHandlers+0xac>)
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4a24      	ldr	r2, [pc, #144]	; (8002214 <resetButtonHandlers+0xac>)
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4a21      	ldr	r2, [pc, #132]	; (8002214 <resetButtonHandlers+0xac>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <resetButtonHandlers+0xac>)
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	2200      	movs	r2, #0
 80021a2:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <resetButtonHandlers+0xac>)
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
		// new handlers
		btnsPtrs[i]->onPress = NULL;
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <resetButtonHandlers+0xac>)
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	2200      	movs	r2, #0
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
		btnsPtrs[i]->onRelease = NULL;
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <resetButtonHandlers+0xac>)
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
		btnsPtrs[i]->onShortPress = NULL;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <resetButtonHandlers+0xac>)
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	2200      	movs	r2, #0
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
		btnsPtrs[i]->onLongPress = NULL;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <resetButtonHandlers+0xac>)
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
		btnsPtrs[i]->onContinuousPress = NULL;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <resetButtonHandlers+0xac>)
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	2200      	movs	r2, #0
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c
		btnsPtrs[i]->onRepeatedPress = NULL;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <resetButtonHandlers+0xac>)
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

		i++;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	3301      	adds	r3, #1
 80021fc:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d9b7      	bls.n	8002174 <resetButtonHandlers+0xc>
	}
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000050 	.word	0x20000050

08002218 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f004 fed2 	bl	8006fd4 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <scanButton>:

void scanButton(Button* btn){
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	799b      	ldrb	r3, [r3, #6]
 8002250:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	b2d9      	uxtb	r1, r3
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	7993      	ldrb	r3, [r2, #6]
 8002264:	f361 0300 	bfi	r3, r1, #0, #1
 8002268:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffd4 	bl	8002218 <readButton>
 8002270:	4603      	mov	r3, r0
 8002272:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	b2d9      	uxtb	r1, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	7993      	ldrb	r3, [r2, #6]
 8002280:	f361 0341 	bfi	r3, r1, #1, #1
 8002284:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8002286:	7bba      	ldrb	r2, [r7, #14]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	429a      	cmp	r2, r3
 800228c:	d158      	bne.n	8002340 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 800228e:	7bbb      	ldrb	r3, [r7, #14]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d14e      	bne.n	8002332 <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229a:	3301      	adds	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7a9b      	ldrb	r3, [r3, #10]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2000      	movs	r0, #0
 80022be:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7a9b      	ldrb	r3, [r3, #10]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <scanButton+0x17c>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d32d      	bcc.n	800232a <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7b5b      	ldrb	r3, [r3, #13]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d110      	bne.n	80022f8 <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2000      	movs	r0, #0
 80022e4:	4798      	blx	r3
					}
					btn->longSingleOn++;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7a5b      	ldrb	r3, [r3, #9]
 80022ea:	3301      	adds	r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7a9b      	ldrb	r3, [r3, #10]
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <scanButton+0x17c>)
 80022fe:	8852      	ldrh	r2, [r2, #2]
 8002300:	fb93 f1f2 	sdiv	r1, r3, r2
 8002304:	fb01 f202 	mul.w	r2, r1, r2
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2000      	movs	r0, #0
 800231c:	4798      	blx	r3
					}
					btn->longContinuous++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7adb      	ldrb	r3, [r3, #11]
 8002322:	3301      	adds	r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002330:	e042      	b.n	80023b8 <scanButton+0x174>
			btn->shortSingleHandled = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	735a      	strb	r2, [r3, #13]
}
 800233e:	e03b      	b.n	80023b8 <scanButton+0x174>
		if(currStatus == 1){
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d11f      	bne.n	8002386 <scanButton+0x142>
			btn->shortContinuous = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d12e      	bne.n	80023b8 <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <scanButton+0x12e>
					pulseVib(5, 75);
 8002362:	214b      	movs	r1, #75	; 0x4b
 8002364:	2005      	movs	r0, #5
 8002366:	f003 f88d 	bl	8005484 <pulseVib>
					btn->onSinglePressHandler(NULL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2000      	movs	r0, #0
 8002370:	4798      	blx	r3
				btn->shortSingleOn++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	79db      	ldrb	r3, [r3, #7]
 8002376:	3301      	adds	r3, #1
 8002378:	b2da      	uxtb	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	731a      	strb	r2, [r3, #12]
}
 8002384:	e018      	b.n	80023b8 <scanButton+0x174>
			if(btn->releaseHandled == 0){
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7b9b      	ldrb	r3, [r3, #14]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d114      	bne.n	80023b8 <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	2000      	movs	r0, #0
 800239c:	4798      	blx	r3
				btn->pressedFor = 0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7a1b      	ldrb	r3, [r3, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	739a      	strb	r2, [r3, #14]
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000068 	.word	0x20000068

080023c4 <scanButtons>:


void scanButtons(Button* btns[6]){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80023d0:	e00a      	b.n	80023e8 <scanButtons+0x24>
		scanButton(btns[i]);
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <scanButton>
		i++;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d9f1      	bls.n	80023d2 <scanButtons+0xe>
	}
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	791b      	ldrb	r3, [r3, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <pauseTimer>:
	cnt->remainingSec = seconds;
}
void startTimer(countdown_t *cnt){
	cnt->isRunning = 1;
}
void pauseTimer(countdown_t *cnt){
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	711a      	strb	r2, [r3, #4]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	4b72      	ldr	r3, [pc, #456]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a71      	ldr	r2, [pc, #452]	; (8002610 <MX_GPIO_Init+0x1e4>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002468:	f043 0320 	orr.w	r3, r3, #32
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	4b64      	ldr	r3, [pc, #400]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b61      	ldr	r3, [pc, #388]	; (8002610 <MX_GPIO_Init+0x1e4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <MX_GPIO_Init+0x1e4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b56      	ldr	r3, [pc, #344]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a55      	ldr	r2, [pc, #340]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b53      	ldr	r3, [pc, #332]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b45      	ldr	r3, [pc, #276]	; (8002610 <MX_GPIO_Init+0x1e4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <MX_GPIO_Init+0x1e4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a40      	ldr	r2, [pc, #256]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <MX_GPIO_Init+0x1e4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	483b      	ldr	r0, [pc, #236]	; (8002614 <MX_GPIO_Init+0x1e8>)
 8002528:	f004 fd6c 	bl	8007004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800252c:	2200      	movs	r2, #0
 800252e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002532:	4839      	ldr	r0, [pc, #228]	; (8002618 <MX_GPIO_Init+0x1ec>)
 8002534:	f004 fd66 	bl	8007004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	4837      	ldr	r0, [pc, #220]	; (800261c <MX_GPIO_Init+0x1f0>)
 800253e:	f004 fd61 	bl	8007004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002548:	4835      	ldr	r0, [pc, #212]	; (8002620 <MX_GPIO_Init+0x1f4>)
 800254a:	f004 fd5b 	bl	8007004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800254e:	2340      	movs	r3, #64	; 0x40
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	482b      	ldr	r0, [pc, #172]	; (8002614 <MX_GPIO_Init+0x1e8>)
 8002566:	f004 fb89 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800256a:	f244 0381 	movw	r3, #16513	; 0x4081
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	4825      	ldr	r0, [pc, #148]	; (8002618 <MX_GPIO_Init+0x1ec>)
 8002584:	f004 fb7a 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8002588:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800258e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	4821      	ldr	r0, [pc, #132]	; (8002624 <MX_GPIO_Init+0x1f8>)
 80025a0:	f004 fb6c 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4818      	ldr	r0, [pc, #96]	; (800261c <MX_GPIO_Init+0x1f0>)
 80025bc:	f004 fb5e 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4812      	ldr	r0, [pc, #72]	; (800261c <MX_GPIO_Init+0x1f0>)
 80025d4:	f004 fb52 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80025d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <MX_GPIO_Init+0x1f4>)
 80025f2:	f004 fb43 	bl	8006c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2028      	movs	r0, #40	; 0x28
 80025fc:	f004 fa81 	bl	8006b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002600:	2028      	movs	r0, #40	; 0x28
 8002602:	f004 fa9a 	bl	8006b3a <HAL_NVIC_EnableIRQ>

}
 8002606:	bf00      	nop
 8002608:	3738      	adds	r7, #56	; 0x38
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40021800 	.word	0x40021800
 8002620:	40020800 	.word	0x40020800
 8002624:	40021000 	.word	0x40021000

08002628 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002638:	4619      	mov	r1, r3
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <getDataFromUart+0x20>)
 800263c:	f009 f8b1 	bl	800b7a2 <HAL_UART_Receive_DMA>

}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20005cb4 	.word	0x20005cb4

0800264c <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 800264c:	b580      	push	{r7, lr}
 800264e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002652:	af00      	add	r7, sp, #0
 8002654:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002658:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800265c:	6018      	str	r0, [r3, #0]
 800265e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002662:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002666:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002668:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800266c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002670:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002674:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	3304      	adds	r3, #4
 8002682:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f00e f95e 	bl	801094a <strncpy>
	gpsModule.getData = &getDataFromUart;
 800268e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002692:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002696:	4a11      	ldr	r2, [pc, #68]	; (80026dc <initGps+0x90>)
 8002698:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 800269c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80026a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80026aa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80026ae:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80026b8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f44f 7319 	mov.w	r3, #612	; 0x264
 80026c4:	461a      	mov	r2, r3
 80026c6:	f00d fa13 	bl	800faf0 <memcpy>
}
 80026ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80026ce:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08002629 	.word	0x08002629

080026e0 <tickTimAAB>:

uint8_t isModuleSet = 0;

uint8_t isScrollbarEnabled = 0;
timer_T* scrollerTimer = NULL;
void tickTimAAB(void){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	tickTimer(scrollerTimer);
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <tickTimAAB+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 f850 	bl	800678e <tickTimer>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20002724 	.word	0x20002724

080026f8 <showScrollbar>:
void showScrollbar(void){
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af04      	add	r7, sp, #16
	uint16_t x = 390;
 80026fe:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002702:	81fb      	strh	r3, [r7, #14]
	uint8_t y = 20;
 8002704:	2314      	movs	r3, #20
 8002706:	737b      	strb	r3, [r7, #13]
	uint8_t h_margin = 2;
 8002708:	2302      	movs	r3, #2
 800270a:	733b      	strb	r3, [r7, #12]
	uint8_t v_margin = 2;
 800270c:	2302      	movs	r3, #2
 800270e:	72fb      	strb	r3, [r7, #11]
	uint8_t b_margin = 4;
 8002710:	2304      	movs	r3, #4
 8002712:	72bb      	strb	r3, [r7, #10]
	uint8_t width = 9;
 8002714:	2309      	movs	r3, #9
 8002716:	727b      	strb	r3, [r7, #9]
	uint8_t height = 200;
 8002718:	23c8      	movs	r3, #200	; 0xc8
 800271a:	723b      	strb	r3, [r7, #8]
	uint8_t b_height = (height-2*v_margin-(MENU_ITEM_NUM-1)*b_margin)/MENU_ITEM_NUM;
 800271c:	7a3a      	ldrb	r2, [r7, #8]
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	7abb      	ldrb	r3, [r7, #10]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	4a30      	ldr	r2, [pc, #192]	; (80027ec <showScrollbar+0xf4>)
 800272c:	fb82 1203 	smull	r1, r2, r2, r3
 8002730:	17db      	asrs	r3, r3, #31
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	71fb      	strb	r3, [r7, #7]

	lcdRoundedRect2(x, x+width-1, y, y+height, 0, LCD_RECT_PATTERN_FILL, 0,3);
 8002736:	89f8      	ldrh	r0, [r7, #14]
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	7a7b      	ldrb	r3, [r7, #9]
 800273c:	4413      	add	r3, r2
 800273e:	1e59      	subs	r1, r3, #1
 8002740:	7b7c      	ldrb	r4, [r7, #13]
 8002742:	7b7a      	ldrb	r2, [r7, #13]
 8002744:	7a3b      	ldrb	r3, [r7, #8]
 8002746:	4413      	add	r3, r2
 8002748:	2203      	movs	r2, #3
 800274a:	9203      	str	r2, [sp, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	9202      	str	r2, [sp, #8]
 8002750:	2201      	movs	r2, #1
 8002752:	9201      	str	r2, [sp, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	4622      	mov	r2, r4
 800275a:	f001 f998 	bl	8003a8e <lcdRoundedRect2>
	lcdRoundedRect2(x, x+width-1, y, y+height, 1, LCD_RECT_PATTERN_CLEAR, 1, 3);
 800275e:	89f8      	ldrh	r0, [r7, #14]
 8002760:	89fa      	ldrh	r2, [r7, #14]
 8002762:	7a7b      	ldrb	r3, [r7, #9]
 8002764:	4413      	add	r3, r2
 8002766:	1e59      	subs	r1, r3, #1
 8002768:	7b7c      	ldrb	r4, [r7, #13]
 800276a:	7b7a      	ldrb	r2, [r7, #13]
 800276c:	7a3b      	ldrb	r3, [r7, #8]
 800276e:	4413      	add	r3, r2
 8002770:	2203      	movs	r2, #3
 8002772:	9203      	str	r2, [sp, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	9202      	str	r2, [sp, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	9201      	str	r2, [sp, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	4622      	mov	r2, r4
 8002782:	f001 f984 	bl	8003a8e <lcdRoundedRect2>
	lcdRoundedRect2(x+h_margin, x+width-1-h_margin, y+1+v_margin+(b_height+b_margin)*position, y+1+v_margin+b_height+(b_height+b_margin)*position, 1, LCD_RECT_PATTERN_FILL, 1, 1);
 8002786:	89fa      	ldrh	r2, [r7, #14]
 8002788:	7b3b      	ldrb	r3, [r7, #12]
 800278a:	18d0      	adds	r0, r2, r3
 800278c:	89fa      	ldrh	r2, [r7, #14]
 800278e:	7a7b      	ldrb	r3, [r7, #9]
 8002790:	4413      	add	r3, r2
 8002792:	1e5a      	subs	r2, r3, #1
 8002794:	7b3b      	ldrb	r3, [r7, #12]
 8002796:	1ad4      	subs	r4, r2, r3
 8002798:	7b7b      	ldrb	r3, [r7, #13]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	441a      	add	r2, r3
 80027a0:	79f9      	ldrb	r1, [r7, #7]
 80027a2:	7abb      	ldrb	r3, [r7, #10]
 80027a4:	440b      	add	r3, r1
 80027a6:	4912      	ldr	r1, [pc, #72]	; (80027f0 <showScrollbar+0xf8>)
 80027a8:	7809      	ldrb	r1, [r1, #0]
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	18d5      	adds	r5, r2, r3
 80027b0:	7b7b      	ldrb	r3, [r7, #13]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	441a      	add	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	441a      	add	r2, r3
 80027bc:	79f9      	ldrb	r1, [r7, #7]
 80027be:	7abb      	ldrb	r3, [r7, #10]
 80027c0:	440b      	add	r3, r1
 80027c2:	490b      	ldr	r1, [pc, #44]	; (80027f0 <showScrollbar+0xf8>)
 80027c4:	7809      	ldrb	r1, [r1, #0]
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	2201      	movs	r2, #1
 80027ce:	9203      	str	r2, [sp, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	9202      	str	r2, [sp, #8]
 80027d4:	2201      	movs	r2, #1
 80027d6:	9201      	str	r2, [sp, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	462a      	mov	r2, r5
 80027de:	4621      	mov	r1, r4
 80027e0:	f001 f955 	bl	8003a8e <lcdRoundedRect2>
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*0, y+1+v_margin+b_height+(b_height+b_margin)*0, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*1, y+1+v_margin+b_height+(b_height+b_margin)*1, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*2, y+1+v_margin+b_height+(b_height+b_margin)*2, 1, LCD_RECT_PATTERN_FILL, 0, 1);
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}
 80027ec:	55555556 	.word	0x55555556
 80027f0:	20002720 	.word	0x20002720

080027f4 <disableScrollbar>:
void disableScrollbar(void){
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	isScrollbarEnabled = 0;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <disableScrollbar+0x14>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20002722 	.word	0x20002722

0800280c <enableScrollbar>:
void enableScrollbar(void){
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	scrollerTimer = createTimer();
 8002810:	f003 ff7d 	bl	800670e <createTimer>
 8002814:	4603      	mov	r3, r0
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <enableScrollbar+0x30>)
 8002818:	6013      	str	r3, [r2, #0]
	setTimerAAA(scrollerTimer, 2, &disableScrollbar);
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <enableScrollbar+0x30>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <enableScrollbar+0x34>)
 8002820:	2102      	movs	r1, #2
 8002822:	4618      	mov	r0, r3
 8002824:	f003 ff83 	bl	800672e <setTimerAAA>
	runTimerAAA(scrollerTimer);
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <enableScrollbar+0x30>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 ff98 	bl	8006762 <runTimerAAA>
	isScrollbarEnabled = 1;
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <enableScrollbar+0x38>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20002724 	.word	0x20002724
 8002840:	080027f5 	.word	0x080027f5
 8002844:	20002722 	.word	0x20002722

08002848 <prevPos>:

void prevPos(void){
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	enableScrollbar();
 800284c:	f7ff ffde 	bl	800280c <enableScrollbar>
	if(position>0){
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <prevPos+0x28>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <prevPos+0x1e>
		position--;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <prevPos+0x28>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <prevPos+0x28>)
 8002862:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002864:	e002      	b.n	800286c <prevPos+0x24>
		position=MENU_ITEM_NUM-1;
 8002866:	4b02      	ldr	r3, [pc, #8]	; (8002870 <prevPos+0x28>)
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20002720 	.word	0x20002720

08002874 <nextPos>:

void nextPos(void){
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	enableScrollbar();
 8002878:	f7ff ffc8 	bl	800280c <enableScrollbar>
	if(position<(MENU_ITEM_NUM-1)){
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <nextPos+0x28>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d806      	bhi.n	8002892 <nextPos+0x1e>
		position++;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <nextPos+0x28>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <nextPos+0x28>)
 800288e:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002890:	e002      	b.n	8002898 <nextPos+0x24>
		position=0;
 8002892:	4b02      	ldr	r3, [pc, #8]	; (800289c <nextPos+0x28>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20002720 	.word	0x20002720

080028a0 <nextScreen>:

void nextScreen(void){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	nextPos();
 80028a4:	f7ff ffe6 	bl	8002874 <nextPos>
	applySelectedScreen();
 80028a8:	f000 f816 	bl	80028d8 <applySelectedScreen>
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <prevScreen>:
void prevScreen(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	prevPos();
 80028b4:	f7ff ffc8 	bl	8002848 <prevPos>
	applySelectedScreen();
 80028b8:	f000 f80e 	bl	80028d8 <applySelectedScreen>
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <resetPos>:
void resetPos(void){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	position=0;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <resetPos+0x14>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 80028ca:	f000 f805 	bl	80028d8 <applySelectedScreen>
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20002720 	.word	0x20002720

080028d8 <applySelectedScreen>:
	moduleSetupPtr = module->setup;
	moduleMainPtr = module->main;
	selectScreen();
}

void applySelectedScreen(void){
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <applySelectedScreen+0x40>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <applySelectedScreen+0x44>)
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	3320      	adds	r3, #32
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <applySelectedScreen+0x48>)
 80028f4:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <applySelectedScreen+0x40>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <applySelectedScreen+0x44>)
 80028fe:	460b      	mov	r3, r1
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	3324      	adds	r3, #36	; 0x24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a05      	ldr	r2, [pc, #20]	; (8002924 <applySelectedScreen+0x4c>)
 800290e:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002910:	f000 f80a 	bl	8002928 <selectScreen>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20002720 	.word	0x20002720
 800291c:	0801400c 	.word	0x0801400c
 8002920:	20000070 	.word	0x20000070
 8002924:	2000006c 	.word	0x2000006c

08002928 <selectScreen>:

void selectScreen(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 800292c:	f7ff fc1c 	bl	8002168 <resetButtonHandlers>
	isModuleSet = 0;
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <selectScreen+0x1c>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <selectScreen+0x20>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <selectScreen+0x24>)
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20002721 	.word	0x20002721
 8002948:	2000006c 	.word	0x2000006c
 800294c:	20000074 	.word	0x20000074

08002950 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <showGui+0x38>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <showGui+0x18>
		moduleSetupPtr();
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <showGui+0x3c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4798      	blx	r3
		isModuleSet = 1;
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <showGui+0x38>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <showGui+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <showGui+0x26>
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <showGui+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4798      	blx	r3
	if(isScrollbarEnabled) showScrollbar();
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <showGui+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <showGui+0x32>
 800297e:	f7ff febb 	bl	80026f8 <showScrollbar>
//	lcdRefresh();
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20002721 	.word	0x20002721
 800298c:	20000070 	.word	0x20000070
 8002990:	20000074 	.word	0x20000074
 8002994:	20002722 	.word	0x20002722

08002998 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <MX_I2C1_Init+0x74>)
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <MX_I2C1_Init+0x78>)
 80029a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <MX_I2C1_Init+0x7c>)
 80029a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029d6:	f004 fb6d 	bl	80070b4 <HAL_I2C_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029e0:	f001 fd86 	bl	80044f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029e4:	2100      	movs	r1, #0
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029e8:	f005 fb23 	bl	8008032 <HAL_I2CEx_ConfigAnalogFilter>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80029f2:	f001 fd7d 	bl	80044f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029f6:	2100      	movs	r1, #0
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_I2C1_Init+0x74>)
 80029fa:	f005 fb56 	bl	80080aa <HAL_I2CEx_ConfigDigitalFilter>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002a04:	f001 fd74 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20002728 	.word	0x20002728
 8002a10:	40005400 	.word	0x40005400
 8002a14:	000186a0 	.word	0x000186a0

08002a18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_I2C_MspInit+0x84>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12c      	bne.n	8002a94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <HAL_I2C_MspInit+0x8c>)
 8002a74:	f004 f902 	bl	8006c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a86:	6413      	str	r3, [r2, #64]	; 0x40
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_I2C_MspInit+0x88>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a94:	bf00      	nop
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020400 	.word	0x40020400

08002aa8 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002ac2:	e010      	b.n	8002ae6 <reverse_uint8+0x3e>
		result = result << 1;
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002ad8:	7bba      	ldrb	r2, [r7, #14]
 8002ada:	7b7b      	ldrb	r3, [r7, #13]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	73bb      	strb	r3, [r7, #14]
		times--;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1eb      	bne.n	8002ac4 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f000 f824 	bl	8002b50 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002b08:	2300      	movs	r3, #0
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	e014      	b.n	8002b38 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	80bb      	strh	r3, [r7, #4]
 8002b12:	e00b      	b.n	8002b2c <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2232      	movs	r2, #50	; 0x32
 8002b18:	fb03 f202 	mul.w	r2, r3, r2
 8002b1c:	88bb      	ldrh	r3, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <lcdClearBuffer+0x50>)
 8002b22:	21ff      	movs	r1, #255	; 0xff
 8002b24:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	80bb      	strh	r3, [r7, #4]
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	2b31      	cmp	r3, #49	; 0x31
 8002b30:	d9f0      	bls.n	8002b14 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	3301      	adds	r3, #1
 8002b36:	71fb      	strb	r3, [r7, #7]
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2bef      	cmp	r3, #239	; 0xef
 8002b3c:	d9e7      	bls.n	8002b0e <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f000 f806 	bl	8002b50 <updateSetting>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20002780 	.word	0x20002780

08002b50 <updateSetting>:

void updateSetting(uint8_t state){
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <updateSetting+0x1c>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	7013      	strb	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000078 	.word	0x20000078

08002b70 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4603      	mov	r3, r0
 8002b7a:	80fb      	strh	r3, [r7, #6]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	717b      	strb	r3, [r7, #5]
 8002b80:	4613      	mov	r3, r2
 8002b82:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	795b      	ldrb	r3, [r3, #5]
 8002b88:	793a      	ldrb	r2, [r7, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d304      	bcc.n	8002b98 <lcdPutChar+0x28>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	799b      	ldrb	r3, [r3, #6]
 8002b92:	793a      	ldrb	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d902      	bls.n	8002b9e <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	79db      	ldrb	r3, [r3, #7]
 8002b9c:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	885b      	ldrh	r3, [r3, #2]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bbe:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]
 8002bc4:	e09b      	b.n	8002cfe <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002bc6:	797a      	ldrb	r2, [r7, #5]
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	0091      	lsls	r1, r2, #2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4413      	add	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002bea:	793b      	ldrb	r3, [r7, #4]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	7952      	ldrb	r2, [r2, #5]
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	8852      	ldrh	r2, [r2, #2]
 8002bf6:	fb03 f202 	mul.w	r2, r3, r2
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	7cb9      	ldrb	r1, [r7, #18]
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	7d3b      	ldrb	r3, [r7, #20]
 8002c14:	fa42 f303 	asr.w	r3, r2, r3
 8002c18:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002c1a:	8a3b      	ldrh	r3, [r7, #16]
 8002c1c:	4a3e      	ldr	r2, [pc, #248]	; (8002d18 <lcdPutChar+0x1a8>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	b25a      	sxtb	r2, r3
 8002c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b25a      	sxtb	r2, r3
 8002c2e:	8a3b      	ldrh	r3, [r7, #16]
 8002c30:	b2d1      	uxtb	r1, r2
 8002c32:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <lcdPutChar+0x1a8>)
 8002c34:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b25a      	sxtb	r2, r3
 8002c42:	7d3b      	ldrb	r3, [r7, #20]
 8002c44:	f1c3 0308 	rsb	r3, r3, #8
 8002c48:	21ff      	movs	r1, #255	; 0xff
 8002c4a:	fa41 f303 	asr.w	r3, r1, r3
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	4013      	ands	r3, r2
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002c56:	2301      	movs	r3, #1
 8002c58:	757b      	strb	r3, [r7, #21]
 8002c5a:	e029      	b.n	8002cb0 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002c5c:	7d7a      	ldrb	r2, [r7, #21]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	7a1b      	ldrb	r3, [r3, #8]
 8002c68:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002c6a:	8a3a      	ldrh	r2, [r7, #16]
 8002c6c:	7d7b      	ldrb	r3, [r7, #21]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <lcdPutChar+0x1a8>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	7db9      	ldrb	r1, [r7, #22]
 8002c78:	7d3b      	ldrb	r3, [r7, #20]
 8002c7a:	f1c3 0308 	rsb	r3, r3, #8
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	b259      	sxtb	r1, r3
 8002c84:	7af8      	ldrb	r0, [r7, #11]
 8002c86:	7d3b      	ldrb	r3, [r7, #20]
 8002c88:	fa40 f303 	asr.w	r3, r0, r3
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	4013      	ands	r3, r2
 8002c98:	b259      	sxtb	r1, r3
 8002c9a:	8a3a      	ldrh	r2, [r7, #16]
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b2c9      	uxtb	r1, r1
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <lcdPutChar+0x1a8>)
 8002ca4:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002caa:	7d7b      	ldrb	r3, [r7, #21]
 8002cac:	3301      	adds	r3, #1
 8002cae:	757b      	strb	r3, [r7, #21]
 8002cb0:	7d7a      	ldrb	r2, [r7, #21]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	3307      	adds	r3, #7
 8002cb8:	10db      	asrs	r3, r3, #3
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dbce      	blt.n	8002c5c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002cbe:	8a3a      	ldrh	r2, [r7, #16]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3307      	adds	r3, #7
 8002cc6:	10db      	asrs	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <lcdPutChar+0x1a8>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	b25a      	sxtb	r2, r3
 8002cd0:	7db9      	ldrb	r1, [r7, #22]
 8002cd2:	7d3b      	ldrb	r3, [r7, #20]
 8002cd4:	f1c3 0308 	rsb	r3, r3, #8
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b259      	sxtb	r1, r3
 8002ce6:	8a3a      	ldrh	r2, [r7, #16]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3307      	adds	r3, #7
 8002cee:	10db      	asrs	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b2c9      	uxtb	r1, r1
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <lcdPutChar+0x1a8>)
 8002cf6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	7dfa      	ldrb	r2, [r7, #23]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f4ff af5e 	bcc.w	8002bc6 <lcdPutChar+0x56>
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20002780 	.word	0x20002780

08002d1c <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	603a      	str	r2, [r7, #0]
 8002d26:	80fb      	strh	r3, [r7, #6]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3305      	adds	r3, #5
 8002d3c:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	885b      	ldrh	r3, [r3, #2]
 8002d54:	461a      	mov	r2, r3
 8002d56:	7efb      	ldrb	r3, [r7, #27]
 8002d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d5c:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002d5e:	2300      	movs	r3, #0
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e094      	b.n	8002e8e <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002d64:	797a      	ldrb	r2, [r7, #5]
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	4413      	add	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	461a      	mov	r2, r3
 8002d74:	0091      	lsls	r1, r2, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	7cbb      	ldrb	r3, [r7, #18]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	7c7a      	ldrb	r2, [r7, #17]
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4413      	add	r3, r2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	fa42 f303 	asr.w	r3, r2, r3
 8002da0:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	b25a      	sxtb	r2, r3
 8002daa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4013      	ands	r3, r2
 8002db4:	b25a      	sxtb	r2, r3
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	b2d1      	uxtb	r1, r2
 8002dba:	4a3b      	ldr	r2, [pc, #236]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002dbc:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 8002dbe:	7ffb      	ldrb	r3, [r7, #31]
 8002dc0:	7c7a      	ldrb	r2, [r7, #17]
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b25a      	sxtb	r2, r3
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	f1c3 0308 	rsb	r3, r3, #8
 8002dd6:	21ff      	movs	r1, #255	; 0xff
 8002dd8:	fa41 f303 	asr.w	r3, r1, r3
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	4013      	ands	r3, r2
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002de4:	2301      	movs	r3, #1
 8002de6:	777b      	strb	r3, [r7, #29]
 8002de8:	e02d      	b.n	8002e46 <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
 8002dec:	7c7a      	ldrb	r2, [r7, #17]
 8002dee:	fb03 f202 	mul.w	r2, r3, r2
 8002df2:	7f7b      	ldrb	r3, [r7, #29]
 8002df4:	4413      	add	r3, r2
 8002df6:	461a      	mov	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002e00:	89fa      	ldrh	r2, [r7, #14]
 8002e02:	7f7b      	ldrb	r3, [r7, #29]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	b25a      	sxtb	r2, r3
 8002e0c:	7fb9      	ldrb	r1, [r7, #30]
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	f1c3 0308 	rsb	r3, r3, #8
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	b259      	sxtb	r1, r3
 8002e1a:	7b78      	ldrb	r0, [r7, #13]
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	fa40 f303 	asr.w	r3, r0, r3
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	430b      	orrs	r3, r1
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b259      	sxtb	r1, r3
 8002e30:	89fa      	ldrh	r2, [r7, #14]
 8002e32:	7f7b      	ldrb	r3, [r7, #29]
 8002e34:	4413      	add	r3, r2
 8002e36:	b2c9      	uxtb	r1, r1
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002e3a:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002e3c:	7b7b      	ldrb	r3, [r7, #13]
 8002e3e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002e40:	7f7b      	ldrb	r3, [r7, #29]
 8002e42:	3301      	adds	r3, #1
 8002e44:	777b      	strb	r3, [r7, #29]
 8002e46:	7f3b      	ldrb	r3, [r7, #28]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	7f7a      	ldrb	r2, [r7, #29]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d9cb      	bls.n	8002dea <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002e52:	89fa      	ldrh	r2, [r7, #14]
 8002e54:	7f3b      	ldrb	r3, [r7, #28]
 8002e56:	3307      	adds	r3, #7
 8002e58:	10db      	asrs	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	b25a      	sxtb	r2, r3
 8002e62:	7fb9      	ldrb	r1, [r7, #30]
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	f1c3 0308 	rsb	r3, r3, #8
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	b259      	sxtb	r1, r3
 8002e78:	89fa      	ldrh	r2, [r7, #14]
 8002e7a:	7f3b      	ldrb	r3, [r7, #28]
 8002e7c:	3307      	adds	r3, #7
 8002e7e:	10db      	asrs	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	b2c9      	uxtb	r1, r1
 8002e84:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <lcdPutIcon+0x18c>)
 8002e86:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002e88:	7ffb      	ldrb	r3, [r7, #31]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	7ffa      	ldrb	r2, [r7, #31]
 8002e90:	7efb      	ldrb	r3, [r7, #27]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	f4ff af66 	bcc.w	8002d64 <lcdPutIcon+0x48>
	}
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20002780 	.word	0x20002780

08002eac <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60ba      	str	r2, [r7, #8]
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	81fb      	strh	r3, [r7, #14]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
 8002ec2:	e015      	b.n	8002ef0 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	fb12 f303 	smulbb	r3, r2, r3
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b298      	uxth	r0, r3
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	7b79      	ldrb	r1, [r7, #13]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f7ff fe43 	bl	8002b70 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	3301      	adds	r3, #1
 8002eee:	75fb      	strb	r3, [r7, #23]
 8002ef0:	7dfc      	ldrb	r4, [r7, #23]
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f7fd f97c 	bl	80001f0 <strlen>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	429c      	cmp	r4, r3
 8002efc:	d3e2      	bcc.n	8002ec4 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <lcdVLine>:
		}

	}
}

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002f08:	b490      	push	{r4, r7}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	80fb      	strh	r3, [r7, #6]
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80bb      	strh	r3, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
 8002f22:	4613      	mov	r3, r2
 8002f24:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	88ba      	ldrh	r2, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d905      	bls.n	8002f4e <lcdVLine+0x46>
		uint8_t temp = y1;
 8002f42:	88bb      	ldrh	r3, [r7, #4]
 8002f44:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e04e      	b.n	8002ff2 <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2232      	movs	r2, #50	; 0x32
 8002f58:	fb03 f202 	mul.w	r2, r3, r2
 8002f5c:	7b7b      	ldrb	r3, [r7, #13]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <lcdVLine+0x100>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d01e      	beq.n	8002faa <lcdVLine+0xa2>
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	dc27      	bgt.n	8002fc0 <lcdVLine+0xb8>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <lcdVLine+0x72>
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d00b      	beq.n	8002f90 <lcdVLine+0x88>
 8002f78:	e022      	b.n	8002fc0 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002f7a:	7b3b      	ldrb	r3, [r7, #12]
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	fa42 f303 	asr.w	r3, r2, r3
 8002f82:	b25a      	sxtb	r2, r3
 8002f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	73bb      	strb	r3, [r7, #14]
				break;
 8002f8e:	e024      	b.n	8002fda <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002f90:	7b3b      	ldrb	r3, [r7, #12]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	fa42 f303 	asr.w	r3, r2, r3
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	73bb      	strb	r3, [r7, #14]
				break;
 8002fa8:	e017      	b.n	8002fda <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002faa:	7b3b      	ldrb	r3, [r7, #12]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	fa42 f303 	asr.w	r3, r2, r3
 8002fb2:	b25a      	sxtb	r2, r3
 8002fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb8:	4053      	eors	r3, r2
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	73bb      	strb	r3, [r7, #14]
				break;
 8002fbe:	e00c      	b.n	8002fda <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8002fc0:	7b3b      	ldrb	r3, [r7, #12]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	fa42 f303 	asr.w	r3, r2, r3
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	b25a      	sxtb	r2, r3
 8002fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	73bb      	strb	r3, [r7, #14]
				break;
 8002fd8:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2232      	movs	r2, #50	; 0x32
 8002fde:	fb03 f202 	mul.w	r2, r3, r2
 8002fe2:	7b7b      	ldrb	r3, [r7, #13]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <lcdVLine+0x100>)
 8002fe8:	7bba      	ldrb	r2, [r7, #14]
 8002fea:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d9ac      	bls.n	8002f54 <lcdVLine+0x4c>
	}
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bc90      	pop	{r4, r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20002780 	.word	0x20002780

0800300c <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 800300c:	b490      	push	{r4, r7}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4623      	mov	r3, r4
 800301c:	80fb      	strh	r3, [r7, #6]
 800301e:	4603      	mov	r3, r0
 8003020:	80bb      	strh	r3, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
 8003026:	4613      	mov	r3, r2
 8003028:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 800302a:	23ff      	movs	r3, #255	; 0xff
 800302c:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 800302e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003032:	2b14      	cmp	r3, #20
 8003034:	f200 8208 	bhi.w	8003448 <lcdHLine2+0x43c>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <lcdHLine2+0x34>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003095 	.word	0x08003095
 8003044:	0800309b 	.word	0x0800309b
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030a7 	.word	0x080030a7
 8003050:	080030bf 	.word	0x080030bf
 8003054:	080030d7 	.word	0x080030d7
 8003058:	080030ef 	.word	0x080030ef
 800305c:	08003139 	.word	0x08003139
 8003060:	0800317d 	.word	0x0800317d
 8003064:	080031c1 	.word	0x080031c1
 8003068:	080031ff 	.word	0x080031ff
 800306c:	08003225 	.word	0x08003225
 8003070:	0800324f 	.word	0x0800324f
 8003074:	08003285 	.word	0x08003285
 8003078:	0800329d 	.word	0x0800329d
 800307c:	080032c3 	.word	0x080032c3
 8003080:	080032f9 	.word	0x080032f9
 8003084:	0800332f 	.word	0x0800332f
 8003088:	08003371 	.word	0x08003371
 800308c:	080033cb 	.word	0x080033cb
 8003090:	08003407 	.word	0x08003407
		case 0:	// clear
			pattern = 0x00;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
			break;
 8003098:	e1ea      	b.n	8003470 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800309a:	23ff      	movs	r3, #255	; 0xff
 800309c:	75fb      	strb	r3, [r7, #23]
			break;
 800309e:	e1e7      	b.n	8003470 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 80030a0:	2355      	movs	r3, #85	; 0x55
 80030a2:	75fb      	strb	r3, [r7, #23]
			break;
 80030a4:	e1e4      	b.n	8003470 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <lcdHLine2+0xac>
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 80030b6:	e1db      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0xFF;
 80030b8:	23ff      	movs	r3, #255	; 0xff
 80030ba:	75fb      	strb	r3, [r7, #23]
			break;
 80030bc:	e1d8      	b.n	8003470 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <lcdHLine2+0xc4>
 80030ca:	23aa      	movs	r3, #170	; 0xaa
 80030cc:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 80030ce:	e1cf      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x55;
 80030d0:	2355      	movs	r3, #85	; 0x55
 80030d2:	75fb      	strb	r3, [r7, #23]
			break;
 80030d4:	e1cc      	b.n	8003470 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <lcdHLine2+0xdc>
 80030e2:	2388      	movs	r3, #136	; 0x88
 80030e4:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80030e6:	e1c3      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80030e8:	2322      	movs	r3, #34	; 0x22
 80030ea:	75fb      	strb	r3, [r7, #23]
			break;
 80030ec:	e1c0      	b.n	8003470 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <lcdHLine2+0xf4>
 80030fa:	2388      	movs	r3, #136	; 0x88
 80030fc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80030fe:	e1a6      	b.n	800344e <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <lcdHLine2+0x106>
 800310c:	2344      	movs	r3, #68	; 0x44
 800310e:	75fb      	strb	r3, [r7, #23]
			break;
 8003110:	e19d      	b.n	800344e <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d102      	bne.n	8003124 <lcdHLine2+0x118>
 800311e:	2322      	movs	r3, #34	; 0x22
 8003120:	75fb      	strb	r3, [r7, #23]
			break;
 8003122:	e194      	b.n	800344e <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b03      	cmp	r3, #3
 800312e:	f040 818e 	bne.w	800344e <lcdHLine2+0x442>
 8003132:	2311      	movs	r3, #17
 8003134:	75fb      	strb	r3, [r7, #23]
			break;
 8003136:	e18a      	b.n	800344e <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <lcdHLine2+0x144>
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d102      	bne.n	8003156 <lcdHLine2+0x14a>
 8003150:	23aa      	movs	r3, #170	; 0xaa
 8003152:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003154:	e17d      	b.n	8003452 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <lcdHLine2+0x15c>
 8003162:	2322      	movs	r3, #34	; 0x22
 8003164:	75fb      	strb	r3, [r7, #23]
			break;
 8003166:	e174      	b.n	8003452 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b03      	cmp	r3, #3
 8003172:	f040 816e 	bne.w	8003452 <lcdHLine2+0x446>
 8003176:	2388      	movs	r3, #136	; 0x88
 8003178:	75fb      	strb	r3, [r7, #23]
			break;
 800317a:	e16a      	b.n	8003452 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d005      	beq.n	8003194 <lcdHLine2+0x188>
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d102      	bne.n	800319a <lcdHLine2+0x18e>
 8003194:	2355      	movs	r3, #85	; 0x55
 8003196:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8003198:	e15d      	b.n	8003456 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <lcdHLine2+0x1a0>
 80031a6:	2388      	movs	r3, #136	; 0x88
 80031a8:	75fb      	strb	r3, [r7, #23]
			break;
 80031aa:	e154      	b.n	8003456 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f040 814e 	bne.w	8003456 <lcdHLine2+0x44a>
 80031ba:	2322      	movs	r3, #34	; 0x22
 80031bc:	75fb      	strb	r3, [r7, #23]
			break;
 80031be:	e14a      	b.n	8003456 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <lcdHLine2+0x1cc>
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <lcdHLine2+0x1d2>
 80031d8:	23cc      	movs	r3, #204	; 0xcc
 80031da:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80031dc:	e13d      	b.n	800345a <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d006      	beq.n	80031f8 <lcdHLine2+0x1ec>
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	f040 8131 	bne.w	800345a <lcdHLine2+0x44e>
 80031f8:	2333      	movs	r3, #51	; 0x33
 80031fa:	75fb      	strb	r3, [r7, #23]
			break;
 80031fc:	e12d      	b.n	800345a <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <lcdHLine2+0x204>
 800320a:	2355      	movs	r3, #85	; 0x55
 800320c:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 800320e:	e126      	b.n	800345e <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8120 	beq.w	800345e <lcdHLine2+0x452>
 800321e:	23ff      	movs	r3, #255	; 0xff
 8003220:	75fb      	strb	r3, [r7, #23]
			break;
 8003222:	e11c      	b.n	800345e <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <lcdHLine2+0x22a>
 8003230:	23cc      	movs	r3, #204	; 0xcc
 8003232:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003234:	e11c      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <lcdHLine2+0x23c>
 8003242:	2344      	movs	r3, #68	; 0x44
 8003244:	75fb      	strb	r3, [r7, #23]
			break;
 8003246:	e113      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]
			break;
 800324c:	e110      	b.n	8003470 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <lcdHLine2+0x254>
 800325a:	23ee      	movs	r3, #238	; 0xee
 800325c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800325e:	e107      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <lcdHLine2+0x26c>
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <lcdHLine2+0x272>
 8003278:	2322      	movs	r3, #34	; 0x22
 800327a:	75fb      	strb	r3, [r7, #23]
			break;
 800327c:	e0f8      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x00;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
			break;
 8003282:	e0f5      	b.n	8003470 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <lcdHLine2+0x28a>
 8003290:	23ff      	movs	r3, #255	; 0xff
 8003292:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003294:	e0ec      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8003296:	2388      	movs	r3, #136	; 0x88
 8003298:	75fb      	strb	r3, [r7, #23]
			break;
 800329a:	e0e9      	b.n	8003470 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <lcdHLine2+0x2a2>
 80032a8:	23aa      	movs	r3, #170	; 0xaa
 80032aa:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 80032ac:	e0d9      	b.n	8003462 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80d3 	beq.w	8003462 <lcdHLine2+0x456>
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]
			break;
 80032c0:	e0cf      	b.n	8003462 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <lcdHLine2+0x2ce>
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d102      	bne.n	80032e0 <lcdHLine2+0x2d4>
 80032da:	23aa      	movs	r3, #170	; 0xaa
 80032dc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80032de:	e0c7      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d102      	bne.n	80032f2 <lcdHLine2+0x2e6>
 80032ec:	2344      	movs	r3, #68	; 0x44
 80032ee:	75fb      	strb	r3, [r7, #23]
			break;
 80032f0:	e0be      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x00;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
			break;
 80032f6:	e0bb      	b.n	8003470 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <lcdHLine2+0x304>
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d102      	bne.n	8003316 <lcdHLine2+0x30a>
 8003310:	23ee      	movs	r3, #238	; 0xee
 8003312:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8003314:	e0ac      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <lcdHLine2+0x31c>
 8003322:	23aa      	movs	r3, #170	; 0xaa
 8003324:	75fb      	strb	r3, [r7, #23]
			break;
 8003326:	e0a3      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003328:	2300      	movs	r3, #0
 800332a:	75fb      	strb	r3, [r7, #23]
			break;
 800332c:	e0a0      	b.n	8003470 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <lcdHLine2+0x33a>
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d102      	bne.n	800334c <lcdHLine2+0x340>
 8003346:	2344      	movs	r3, #68	; 0x44
 8003348:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800334a:	e08c      	b.n	8003466 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <lcdHLine2+0x352>
 8003358:	23aa      	movs	r3, #170	; 0xaa
 800335a:	75fb      	strb	r3, [r7, #23]
			break;
 800335c:	e083      	b.n	8003466 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d17d      	bne.n	8003466 <lcdHLine2+0x45a>
 800336a:	2311      	movs	r3, #17
 800336c:	75fb      	strb	r3, [r7, #23]
			break;
 800336e:	e07a      	b.n	8003466 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	4baf      	ldr	r3, [pc, #700]	; (8003630 <lcdHLine2+0x624>)
 8003374:	fba3 1302 	umull	r1, r3, r3, r2
 8003378:	0859      	lsrs	r1, r3, #1
 800337a:	460b      	mov	r3, r1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	440b      	add	r3, r1
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <lcdHLine2+0x382>
 8003388:	2355      	movs	r3, #85	; 0x55
 800338a:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 800338c:	e06d      	b.n	800346a <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4ba7      	ldr	r3, [pc, #668]	; (8003630 <lcdHLine2+0x624>)
 8003392:	fba3 1302 	umull	r1, r3, r3, r2
 8003396:	0859      	lsrs	r1, r3, #1
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <lcdHLine2+0x3a0>
 80033a6:	23aa      	movs	r3, #170	; 0xaa
 80033a8:	75fb      	strb	r3, [r7, #23]
			break;
 80033aa:	e05e      	b.n	800346a <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4ba0      	ldr	r3, [pc, #640]	; (8003630 <lcdHLine2+0x624>)
 80033b0:	fba3 1302 	umull	r1, r3, r3, r2
 80033b4:	0859      	lsrs	r1, r3, #1
 80033b6:	460b      	mov	r3, r1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	440b      	add	r3, r1
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d152      	bne.n	800346a <lcdHLine2+0x45e>
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
			break;
 80033c8:	e04f      	b.n	800346a <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <lcdHLine2+0x3d0>
 80033d6:	2322      	movs	r3, #34	; 0x22
 80033d8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80033da:	e049      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <lcdHLine2+0x3e2>
 80033e8:	2355      	movs	r3, #85	; 0x55
 80033ea:	75fb      	strb	r3, [r7, #23]
			break;
 80033ec:	e040      	b.n	8003470 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d102      	bne.n	8003400 <lcdHLine2+0x3f4>
 80033fa:	2388      	movs	r3, #136	; 0x88
 80033fc:	75fb      	strb	r3, [r7, #23]
			break;
 80033fe:	e037      	b.n	8003470 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
			break;
 8003404:	e034      	b.n	8003470 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d005      	beq.n	800341e <lcdHLine2+0x412>
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d102      	bne.n	8003424 <lcdHLine2+0x418>
 800341e:	2388      	movs	r3, #136	; 0x88
 8003420:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003422:	e024      	b.n	800346e <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <lcdHLine2+0x42a>
 8003430:	2377      	movs	r3, #119	; 0x77
 8003432:	75fb      	strb	r3, [r7, #23]
			break;
 8003434:	e01b      	b.n	800346e <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d115      	bne.n	800346e <lcdHLine2+0x462>
 8003442:	23aa      	movs	r3, #170	; 0xaa
 8003444:	75fb      	strb	r3, [r7, #23]
			break;
 8003446:	e012      	b.n	800346e <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]
			break;
 800344c:	e010      	b.n	8003470 <lcdHLine2+0x464>
			break;
 800344e:	bf00      	nop
 8003450:	e00e      	b.n	8003470 <lcdHLine2+0x464>
			break;
 8003452:	bf00      	nop
 8003454:	e00c      	b.n	8003470 <lcdHLine2+0x464>
			break;
 8003456:	bf00      	nop
 8003458:	e00a      	b.n	8003470 <lcdHLine2+0x464>
			break;
 800345a:	bf00      	nop
 800345c:	e008      	b.n	8003470 <lcdHLine2+0x464>
			break;
 800345e:	bf00      	nop
 8003460:	e006      	b.n	8003470 <lcdHLine2+0x464>
			break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <lcdHLine2+0x464>
			break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <lcdHLine2+0x464>
			break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <lcdHLine2+0x464>
			break;
 800346e:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	b29b      	uxth	r3, r3
 8003476:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8003482:	88bb      	ldrh	r3, [r7, #4]
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	b29b      	uxth	r3, r3
 8003488:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800348a:	88bb      	ldrh	r3, [r7, #4]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2232      	movs	r2, #50	; 0x32
 8003498:	fb03 f202 	mul.w	r2, r3, r2
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	4413      	add	r3, r2
 80034a0:	4a64      	ldr	r2, [pc, #400]	; (8003634 <lcdHLine2+0x628>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	2232      	movs	r2, #50	; 0x32
 80034aa:	fb03 f202 	mul.w	r2, r3, r2
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a60      	ldr	r2, [pc, #384]	; (8003634 <lcdHLine2+0x628>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 80034b8:	23ff      	movs	r3, #255	; 0xff
 80034ba:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	f1c3 0208 	rsb	r2, r3, #8
 80034c2:	88b9      	ldrh	r1, [r7, #4]
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	1acb      	subs	r3, r1, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	429a      	cmp	r2, r3
 80034cc:	dd11      	ble.n	80034f2 <lcdHLine2+0x4e6>
 80034ce:	88ba      	ldrh	r2, [r7, #4]
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	fa42 f303 	asr.w	r3, r2, r3
 80034dc:	43da      	mvns	r2, r3
 80034de:	7bbb      	ldrb	r3, [r7, #14]
 80034e0:	fa42 f303 	asr.w	r3, r2, r3
 80034e4:	b25a      	sxtb	r2, r3
 80034e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ea:	4013      	ands	r3, r2
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	753b      	strb	r3, [r7, #20]
 80034f0:	e001      	b.n	80034f6 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	f200 8130 	bhi.w	800375e <lcdHLine2+0x752>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <lcdHLine2+0x4f8>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	08003599 	.word	0x08003599
 800350c:	08003639 	.word	0x08003639
 8003510:	080036bd 	.word	0x080036bd
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8003514:	7bbb      	ldrb	r3, [r7, #14]
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	fa42 f303 	asr.w	r3, r2, r3
 800351c:	b25a      	sxtb	r2, r3
 800351e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003522:	4013      	ands	r3, r2
 8003524:	b25a      	sxtb	r2, r3
 8003526:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800352a:	4313      	orrs	r3, r2
 800352c:	b25b      	sxtb	r3, r3
 800352e:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003530:	7b3b      	ldrb	r3, [r7, #12]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	b25a      	sxtb	r2, r3
 800353e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003542:	4013      	ands	r3, r2
 8003544:	b25a      	sxtb	r2, r3
 8003546:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800354a:	4313      	orrs	r3, r2
 800354c:	b25b      	sxtb	r3, r3
 800354e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003550:	2301      	movs	r3, #1
 8003552:	74fb      	strb	r3, [r7, #19]
 8003554:	e019      	b.n	800358a <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	2232      	movs	r2, #50	; 0x32
 800355a:	fb03 f202 	mul.w	r2, r3, r2
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	441a      	add	r2, r3
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	4413      	add	r3, r2
 8003566:	4a33      	ldr	r2, [pc, #204]	; (8003634 <lcdHLine2+0x628>)
 8003568:	5cd1      	ldrb	r1, [r2, r3]
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	2232      	movs	r2, #50	; 0x32
 800356e:	fb03 f202 	mul.w	r2, r3, r2
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	441a      	add	r2, r3
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	4413      	add	r3, r2
 800357a:	7dfa      	ldrb	r2, [r7, #23]
 800357c:	430a      	orrs	r2, r1
 800357e:	b2d1      	uxtb	r1, r2
 8003580:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <lcdHLine2+0x628>)
 8003582:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	3301      	adds	r3, #1
 8003588:	74fb      	strb	r3, [r7, #19]
 800358a:	7cfa      	ldrb	r2, [r7, #19]
 800358c:	7b79      	ldrb	r1, [r7, #13]
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	1acb      	subs	r3, r1, r3
 8003592:	429a      	cmp	r2, r3
 8003594:	dbdf      	blt.n	8003556 <lcdHLine2+0x54a>
			}
			break;
 8003596:	e0e2      	b.n	800375e <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	fa42 f303 	asr.w	r3, r2, r3
 80035a0:	b25a      	sxtb	r2, r3
 80035a2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	b25a      	sxtb	r2, r3
 80035ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035b2:	4013      	ands	r3, r2
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 80035b8:	7b3b      	ldrb	r3, [r7, #12]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	b25a      	sxtb	r2, r3
 80035c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ca:	4013      	ands	r3, r2
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80035dc:	2301      	movs	r3, #1
 80035de:	74bb      	strb	r3, [r7, #18]
 80035e0:	e01e      	b.n	8003620 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	2232      	movs	r2, #50	; 0x32
 80035e6:	fb03 f202 	mul.w	r2, r3, r2
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	441a      	add	r2, r3
 80035ee:	7cbb      	ldrb	r3, [r7, #18]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <lcdHLine2+0x628>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	b25a      	sxtb	r2, r3
 80035f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	4013      	ands	r3, r2
 8003602:	b259      	sxtb	r1, r3
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	2232      	movs	r2, #50	; 0x32
 8003608:	fb03 f202 	mul.w	r2, r3, r2
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	441a      	add	r2, r3
 8003610:	7cbb      	ldrb	r3, [r7, #18]
 8003612:	4413      	add	r3, r2
 8003614:	b2c9      	uxtb	r1, r1
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <lcdHLine2+0x628>)
 8003618:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800361a:	7cbb      	ldrb	r3, [r7, #18]
 800361c:	3301      	adds	r3, #1
 800361e:	74bb      	strb	r3, [r7, #18]
 8003620:	7cba      	ldrb	r2, [r7, #18]
 8003622:	7b79      	ldrb	r1, [r7, #13]
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	429a      	cmp	r2, r3
 800362a:	dbda      	blt.n	80035e2 <lcdHLine2+0x5d6>
			}
			break;
 800362c:	e097      	b.n	800375e <lcdHLine2+0x752>
 800362e:	bf00      	nop
 8003630:	aaaaaaab 	.word	0xaaaaaaab
 8003634:	20002780 	.word	0x20002780
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8003638:	7bbb      	ldrb	r3, [r7, #14]
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	fa42 f303 	asr.w	r3, r2, r3
 8003640:	b25a      	sxtb	r2, r3
 8003642:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003646:	4013      	ands	r3, r2
 8003648:	b25a      	sxtb	r2, r3
 800364a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800364e:	4053      	eors	r3, r2
 8003650:	b25b      	sxtb	r3, r3
 8003652:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003654:	7b3b      	ldrb	r3, [r7, #12]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	22ff      	movs	r2, #255	; 0xff
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	b25a      	sxtb	r2, r3
 8003662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003666:	4013      	ands	r3, r2
 8003668:	b25a      	sxtb	r2, r3
 800366a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800366e:	4053      	eors	r3, r2
 8003670:	b25b      	sxtb	r3, r3
 8003672:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003674:	2301      	movs	r3, #1
 8003676:	747b      	strb	r3, [r7, #17]
 8003678:	e019      	b.n	80036ae <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2232      	movs	r2, #50	; 0x32
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	441a      	add	r2, r3
 8003686:	7c7b      	ldrb	r3, [r7, #17]
 8003688:	4413      	add	r3, r2
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <lcdHLine2+0x788>)
 800368c:	5cd1      	ldrb	r1, [r2, r3]
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2232      	movs	r2, #50	; 0x32
 8003692:	fb03 f202 	mul.w	r2, r3, r2
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	441a      	add	r2, r3
 800369a:	7c7b      	ldrb	r3, [r7, #17]
 800369c:	4413      	add	r3, r2
 800369e:	7dfa      	ldrb	r2, [r7, #23]
 80036a0:	404a      	eors	r2, r1
 80036a2:	b2d1      	uxtb	r1, r2
 80036a4:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <lcdHLine2+0x788>)
 80036a6:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80036a8:	7c7b      	ldrb	r3, [r7, #17]
 80036aa:	3301      	adds	r3, #1
 80036ac:	747b      	strb	r3, [r7, #17]
 80036ae:	7c7a      	ldrb	r2, [r7, #17]
 80036b0:	7b79      	ldrb	r1, [r7, #13]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	1acb      	subs	r3, r1, r3
 80036b6:	429a      	cmp	r2, r3
 80036b8:	dbdf      	blt.n	800367a <lcdHLine2+0x66e>
			}
			break;
 80036ba:	e050      	b.n	800375e <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	22ff      	movs	r2, #255	; 0xff
 80036c0:	fa42 f303 	asr.w	r3, r2, r3
 80036c4:	b25a      	sxtb	r2, r3
 80036c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	b259      	sxtb	r1, r3
 80036d6:	7bbb      	ldrb	r3, [r7, #14]
 80036d8:	f1c3 0308 	rsb	r3, r3, #8
 80036dc:	20ff      	movs	r0, #255	; 0xff
 80036de:	fa00 f303 	lsl.w	r3, r0, r3
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	400b      	ands	r3, r1
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b25b      	sxtb	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80036f2:	7b3b      	ldrb	r3, [r7, #12]
 80036f4:	f1c3 0307 	rsb	r3, r3, #7
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	b25a      	sxtb	r2, r3
 8003700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003704:	4013      	ands	r3, r2
 8003706:	b25a      	sxtb	r2, r3
 8003708:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800370c:	43db      	mvns	r3, r3
 800370e:	b259      	sxtb	r1, r3
 8003710:	7b3b      	ldrb	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	20ff      	movs	r0, #255	; 0xff
 8003716:	fa40 f303 	asr.w	r3, r0, r3
 800371a:	b25b      	sxtb	r3, r3
 800371c:	400b      	ands	r3, r1
 800371e:	b25b      	sxtb	r3, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	b25b      	sxtb	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800372a:	2301      	movs	r3, #1
 800372c:	743b      	strb	r3, [r7, #16]
 800372e:	e00f      	b.n	8003750 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	2232      	movs	r2, #50	; 0x32
 8003734:	fb03 f202 	mul.w	r2, r3, r2
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	441a      	add	r2, r3
 800373c:	7c3b      	ldrb	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	7dfa      	ldrb	r2, [r7, #23]
 8003742:	43d2      	mvns	r2, r2
 8003744:	b2d1      	uxtb	r1, r2
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <lcdHLine2+0x788>)
 8003748:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800374a:	7c3b      	ldrb	r3, [r7, #16]
 800374c:	3301      	adds	r3, #1
 800374e:	743b      	strb	r3, [r7, #16]
 8003750:	7c3a      	ldrb	r2, [r7, #16]
 8003752:	7b79      	ldrb	r1, [r7, #13]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	1acb      	subs	r3, r1, r3
 8003758:	429a      	cmp	r2, r3
 800375a:	dbe9      	blt.n	8003730 <lcdHLine2+0x724>
			}
			break;
 800375c:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	2232      	movs	r2, #50	; 0x32
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	4413      	add	r3, r2
 800376a:	490a      	ldr	r1, [pc, #40]	; (8003794 <lcdHLine2+0x788>)
 800376c:	7dba      	ldrb	r2, [r7, #22]
 800376e:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003770:	7b7a      	ldrb	r2, [r7, #13]
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	429a      	cmp	r2, r3
 8003776:	d908      	bls.n	800378a <lcdHLine2+0x77e>
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	2232      	movs	r2, #50	; 0x32
 800377c:	fb03 f202 	mul.w	r2, r3, r2
 8003780:	7b7b      	ldrb	r3, [r7, #13]
 8003782:	4413      	add	r3, r2
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <lcdHLine2+0x788>)
 8003786:	7d7a      	ldrb	r2, [r7, #21]
 8003788:	54ca      	strb	r2, [r1, r3]
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bc90      	pop	{r4, r7}
 8003792:	4770      	bx	lr
 8003794:	20002780 	.word	0x20002780

08003798 <lcdHLine>:

// Draw horizontal line
// Should not be used, causes problems for lines shorter than 8px
// use lcdHLine2 instead
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003798:	b490      	push	{r4, r7}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	80fb      	strh	r3, [r7, #6]
 80037aa:	4603      	mov	r3, r0
 80037ac:	80bb      	strh	r3, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	4613      	mov	r3, r2
 80037b4:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	08db      	lsrs	r3, r3, #3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80037c8:	88bb      	ldrh	r3, [r7, #4]
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80037d0:	88bb      	ldrh	r3, [r7, #4]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	2232      	movs	r2, #50	; 0x32
 80037de:	fb03 f202 	mul.w	r2, r3, r2
 80037e2:	7c7b      	ldrb	r3, [r7, #17]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a71      	ldr	r2, [pc, #452]	; (80039ac <lcdHLine+0x214>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2232      	movs	r2, #50	; 0x32
 80037f0:	fb03 f202 	mul.w	r2, r3, r2
 80037f4:	7c7b      	ldrb	r3, [r7, #17]
 80037f6:	441a      	add	r2, r3
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	4413      	add	r3, r2
 80037fc:	4a6b      	ldr	r2, [pc, #428]	; (80039ac <lcdHLine+0x214>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8003802:	23ff      	movs	r3, #255	; 0xff
 8003804:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8003806:	7c3b      	ldrb	r3, [r7, #16]
 8003808:	f1c3 0208 	rsb	r2, r3, #8
 800380c:	88b9      	ldrh	r1, [r7, #4]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	1acb      	subs	r3, r1, r3
 8003812:	3301      	adds	r3, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	dd09      	ble.n	800382c <lcdHLine+0x94>
 8003818:	88ba      	ldrh	r2, [r7, #4]
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	3301      	adds	r3, #1
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	fa42 f303 	asr.w	r3, r2, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	757b      	strb	r3, [r7, #21]
	switch(mode){
 800382c:	78bb      	ldrb	r3, [r7, #2]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d067      	beq.n	8003902 <lcdHLine+0x16a>
 8003832:	2b02      	cmp	r3, #2
 8003834:	f300 809e 	bgt.w	8003974 <lcdHLine+0x1dc>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <lcdHLine+0xaa>
 800383c:	2b01      	cmp	r3, #1
 800383e:	d02e      	beq.n	800389e <lcdHLine+0x106>
 8003840:	e098      	b.n	8003974 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003842:	7d7a      	ldrb	r2, [r7, #21]
 8003844:	7c3b      	ldrb	r3, [r7, #16]
 8003846:	fa42 f303 	asr.w	r3, r2, r3
 800384a:	b25a      	sxtb	r2, r3
 800384c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003850:	4313      	orrs	r3, r2
 8003852:	b25b      	sxtb	r3, r3
 8003854:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	f1c3 0307 	rsb	r3, r3, #7
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	b25a      	sxtb	r2, r3
 8003864:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003868:	4313      	orrs	r3, r2
 800386a:	b25b      	sxtb	r3, r3
 800386c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800386e:	2301      	movs	r3, #1
 8003870:	753b      	strb	r3, [r7, #20]
 8003872:	e00d      	b.n	8003890 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	2232      	movs	r2, #50	; 0x32
 8003878:	fb03 f202 	mul.w	r2, r3, r2
 800387c:	7c7b      	ldrb	r3, [r7, #17]
 800387e:	441a      	add	r2, r3
 8003880:	7d3b      	ldrb	r3, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	4a49      	ldr	r2, [pc, #292]	; (80039ac <lcdHLine+0x214>)
 8003886:	21ff      	movs	r1, #255	; 0xff
 8003888:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800388a:	7d3b      	ldrb	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	753b      	strb	r3, [r7, #20]
 8003890:	7d3a      	ldrb	r2, [r7, #20]
 8003892:	7bf9      	ldrb	r1, [r7, #15]
 8003894:	7c7b      	ldrb	r3, [r7, #17]
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	429a      	cmp	r2, r3
 800389a:	dbeb      	blt.n	8003874 <lcdHLine+0xdc>
		}
		break;
 800389c:	e06a      	b.n	8003974 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 800389e:	7d7a      	ldrb	r2, [r7, #21]
 80038a0:	7c3b      	ldrb	r3, [r7, #16]
 80038a2:	fa42 f303 	asr.w	r3, r2, r3
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	b25a      	sxtb	r2, r3
 80038ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	f1c3 0307 	rsb	r3, r3, #7
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	b25a      	sxtb	r2, r3
 80038c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80038d2:	2301      	movs	r3, #1
 80038d4:	74fb      	strb	r3, [r7, #19]
 80038d6:	e00d      	b.n	80038f4 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2232      	movs	r2, #50	; 0x32
 80038dc:	fb03 f202 	mul.w	r2, r3, r2
 80038e0:	7c7b      	ldrb	r3, [r7, #17]
 80038e2:	441a      	add	r2, r3
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	4413      	add	r3, r2
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <lcdHLine+0x214>)
 80038ea:	2100      	movs	r1, #0
 80038ec:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	3301      	adds	r3, #1
 80038f2:	74fb      	strb	r3, [r7, #19]
 80038f4:	7cfa      	ldrb	r2, [r7, #19]
 80038f6:	7bf9      	ldrb	r1, [r7, #15]
 80038f8:	7c7b      	ldrb	r3, [r7, #17]
 80038fa:	1acb      	subs	r3, r1, r3
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dbeb      	blt.n	80038d8 <lcdHLine+0x140>
		}
		break;
 8003900:	e038      	b.n	8003974 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003902:	7d7a      	ldrb	r2, [r7, #21]
 8003904:	7c3b      	ldrb	r3, [r7, #16]
 8003906:	fa42 f303 	asr.w	r3, r2, r3
 800390a:	b25a      	sxtb	r2, r3
 800390c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003910:	4053      	eors	r3, r2
 8003912:	b25b      	sxtb	r3, r3
 8003914:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003916:	7bbb      	ldrb	r3, [r7, #14]
 8003918:	f1c3 0307 	rsb	r3, r3, #7
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	b25a      	sxtb	r2, r3
 8003924:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003928:	4053      	eors	r3, r2
 800392a:	b25b      	sxtb	r3, r3
 800392c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800392e:	2301      	movs	r3, #1
 8003930:	74bb      	strb	r3, [r7, #18]
 8003932:	e018      	b.n	8003966 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	fb03 f202 	mul.w	r2, r3, r2
 800393c:	7c7b      	ldrb	r3, [r7, #17]
 800393e:	441a      	add	r2, r3
 8003940:	7cbb      	ldrb	r3, [r7, #18]
 8003942:	4413      	add	r3, r2
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <lcdHLine+0x214>)
 8003946:	5cd2      	ldrb	r2, [r2, r3]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	2132      	movs	r1, #50	; 0x32
 800394c:	fb03 f101 	mul.w	r1, r3, r1
 8003950:	7c7b      	ldrb	r3, [r7, #17]
 8003952:	4419      	add	r1, r3
 8003954:	7cbb      	ldrb	r3, [r7, #18]
 8003956:	440b      	add	r3, r1
 8003958:	43d2      	mvns	r2, r2
 800395a:	b2d1      	uxtb	r1, r2
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <lcdHLine+0x214>)
 800395e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003960:	7cbb      	ldrb	r3, [r7, #18]
 8003962:	3301      	adds	r3, #1
 8003964:	74bb      	strb	r3, [r7, #18]
 8003966:	7cba      	ldrb	r2, [r7, #18]
 8003968:	7bf9      	ldrb	r1, [r7, #15]
 800396a:	7c7b      	ldrb	r3, [r7, #17]
 800396c:	1acb      	subs	r3, r1, r3
 800396e:	429a      	cmp	r2, r3
 8003970:	dbe0      	blt.n	8003934 <lcdHLine+0x19c>
		}
		break;
 8003972:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2232      	movs	r2, #50	; 0x32
 8003978:	fb03 f202 	mul.w	r2, r3, r2
 800397c:	7c7b      	ldrb	r3, [r7, #17]
 800397e:	4413      	add	r3, r2
 8003980:	490a      	ldr	r1, [pc, #40]	; (80039ac <lcdHLine+0x214>)
 8003982:	7dfa      	ldrb	r2, [r7, #23]
 8003984:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	7c7b      	ldrb	r3, [r7, #17]
 800398a:	429a      	cmp	r2, r3
 800398c:	d908      	bls.n	80039a0 <lcdHLine+0x208>
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	2232      	movs	r2, #50	; 0x32
 8003992:	fb03 f202 	mul.w	r2, r3, r2
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	4413      	add	r3, r2
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <lcdHLine+0x214>)
 800399c:	7dba      	ldrb	r2, [r7, #22]
 800399e:	54ca      	strb	r2, [r1, r3]
}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc90      	pop	{r4, r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20002780 	.word	0x20002780

080039b0 <lcdRefresh>:

void lcdRefresh(void){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <lcdRefresh+0x7c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d032      	beq.n	8003a24 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80039be:	2201      	movs	r2, #1
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	481b      	ldr	r0, [pc, #108]	; (8003a30 <lcdRefresh+0x80>)
 80039c4:	f003 fb1e 	bl	8007004 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80039c8:	2301      	movs	r3, #1
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	e01c      	b.n	8003a08 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f869 	bl	8002aa8 <reverse_uint8>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <lcdRefresh+0x84>)
 80039dc:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 80039de:	2396      	movs	r3, #150	; 0x96
 80039e0:	2202      	movs	r2, #2
 80039e2:	4914      	ldr	r1, [pc, #80]	; (8003a34 <lcdRefresh+0x84>)
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <lcdRefresh+0x88>)
 80039e6:	f006 fbcc 	bl	800a182 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	2232      	movs	r2, #50	; 0x32
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <lcdRefresh+0x8c>)
 80039f6:	1899      	adds	r1, r3, r2
 80039f8:	2396      	movs	r3, #150	; 0x96
 80039fa:	2232      	movs	r2, #50	; 0x32
 80039fc:	480e      	ldr	r0, [pc, #56]	; (8003a38 <lcdRefresh+0x88>)
 80039fe:	f006 fbc0 	bl	800a182 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	3301      	adds	r3, #1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2bf1      	cmp	r3, #241	; 0xf1
 8003a0c:	d9df      	bls.n	80039ce <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003a0e:	2396      	movs	r3, #150	; 0x96
 8003a10:	2202      	movs	r2, #2
 8003a12:	490b      	ldr	r1, [pc, #44]	; (8003a40 <lcdRefresh+0x90>)
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <lcdRefresh+0x88>)
 8003a16:	f006 fbb4 	bl	800a182 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2140      	movs	r1, #64	; 0x40
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <lcdRefresh+0x80>)
 8003a20:	f003 faf0 	bl	8007004 <HAL_GPIO_WritePin>
	}
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000078 	.word	0x20000078
 8003a30:	40020000 	.word	0x40020000
 8003a34:	2000007c 	.word	0x2000007c
 8003a38:	200059b4 	.word	0x200059b4
 8003a3c:	20002780 	.word	0x20002780
 8003a40:	2000277c 	.word	0x2000277c

08003a44 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4623      	mov	r3, r4
 8003a54:	80fb      	strh	r3, [r7, #6]
 8003a56:	4603      	mov	r3, r0
 8003a58:	80bb      	strh	r3, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e009      	b.n	8003a7c <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	88b9      	ldrh	r1, [r7, #4]
 8003a70:	88f8      	ldrh	r0, [r7, #6]
 8003a72:	f7ff fe91 	bl	8003798 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d9f1      	bls.n	8003a68 <lcdRect+0x24>
	}
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd90      	pop	{r4, r7, pc}

08003a8e <lcdRoundedRect2>:
		} else {
			lcdHLine(x1, x2, i, mode);
		}
	}
}
void lcdRoundedRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline, uint8_t r){
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b089      	sub	sp, #36	; 0x24
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	4604      	mov	r4, r0
 8003a96:	4608      	mov	r0, r1
 8003a98:	4611      	mov	r1, r2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	80fb      	strh	r3, [r7, #6]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	80bb      	strh	r3, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	70bb      	strb	r3, [r7, #2]
	// check if radius not exceded
	if((2*r>(x2-x1))||(2*r>(y2-y1))) r = 0;
 8003aac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ab0:	005a      	lsls	r2, r3, #1
 8003ab2:	88b9      	ldrh	r1, [r7, #4]
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dc07      	bgt.n	8003acc <lcdRoundedRect2+0x3e>
 8003abc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ac0:	005a      	lsls	r2, r3, #1
 8003ac2:	78b9      	ldrb	r1, [r7, #2]
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	dd02      	ble.n	8003ad2 <lcdRoundedRect2+0x44>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	if(x1!=x2 && y1!=y2){
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	f000 81d5 	beq.w	8003e86 <lcdRoundedRect2+0x3f8>
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	78bb      	ldrb	r3, [r7, #2]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f000 81d0 	beq.w	8003e86 <lcdRoundedRect2+0x3f8>
		for(uint8_t y = y1; y <= y2; y++){
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	75fb      	strb	r3, [r7, #23]
 8003aea:	e0a3      	b.n	8003c34 <lcdRoundedRect2+0x1a6>
			if((y-y1)<r){
 8003aec:	7dfa      	ldrb	r2, [r7, #23]
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003af6:	429a      	cmp	r2, r3
 8003af8:	da43      	bge.n	8003b82 <lcdRoundedRect2+0xf4>
				uint8_t off = (int)(sqrt(r*r-(r-y+y1)*(r-y+y1)));
 8003afa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003afe:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003b02:	fb03 f202 	mul.w	r2, r3, r2
 8003b06:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	1ac9      	subs	r1, r1, r3
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	440b      	add	r3, r1
 8003b12:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003b16:	7df9      	ldrb	r1, [r7, #23]
 8003b18:	1a40      	subs	r0, r0, r1
 8003b1a:	78f9      	ldrb	r1, [r7, #3]
 8003b1c:	4401      	add	r1, r0
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fd0d 	bl	8000544 <__aeabi_i2d>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	ec43 2b10 	vmov	d0, r2, r3
 8003b32:	f00e ff15 	bl	8012960 <sqrt>
 8003b36:	ec53 2b10 	vmov	r2, r3, d0
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f7fd f81b 	bl	8000b78 <__aeabi_d2iz>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73bb      	strb	r3, [r7, #14]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003b46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	4413      	add	r3, r2
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b298      	uxth	r0, r3
 8003b5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	88ba      	ldrh	r2, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	b299      	uxth	r1, r3
 8003b6e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003b72:	7dfa      	ldrb	r2, [r7, #23]
 8003b74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f7ff fa46 	bl	800300c <lcdHLine2>
 8003b80:	e055      	b.n	8003c2e <lcdRoundedRect2+0x1a0>
			} else if((y2-y)<r){
 8003b82:	78ba      	ldrb	r2, [r7, #2]
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	da43      	bge.n	8003c18 <lcdRoundedRect2+0x18a>
				uint8_t off = (int)(sqrt(r*r-(r-y2+y)*(r-y2+y)));
 8003b90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b94:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003b98:	fb03 f202 	mul.w	r2, r3, r2
 8003b9c:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003ba0:	78bb      	ldrb	r3, [r7, #2]
 8003ba2:	1ac9      	subs	r1, r1, r3
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003bac:	78b9      	ldrb	r1, [r7, #2]
 8003bae:	1a40      	subs	r0, r0, r1
 8003bb0:	7df9      	ldrb	r1, [r7, #23]
 8003bb2:	4401      	add	r1, r0
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fcc2 	bl	8000544 <__aeabi_i2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	ec43 2b10 	vmov	d0, r2, r3
 8003bc8:	f00e feca 	bl	8012960 <sqrt>
 8003bcc:	ec53 2b10 	vmov	r2, r3, d0
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc ffd0 	bl	8000b78 <__aeabi_d2iz>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003bdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4413      	add	r3, r2
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	b298      	uxth	r0, r3
 8003bf0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	88ba      	ldrh	r2, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	b299      	uxth	r1, r3
 8003c04:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003c08:	7dfa      	ldrb	r2, [r7, #23]
 8003c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4623      	mov	r3, r4
 8003c12:	f7ff f9fb 	bl	800300c <lcdHLine2>
 8003c16:	e00a      	b.n	8003c2e <lcdRoundedRect2+0x1a0>
			} else {
				lcdHLine2(x1, x2, y, mode, fill);
 8003c18:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003c1c:	7dfa      	ldrb	r2, [r7, #23]
 8003c1e:	88b9      	ldrh	r1, [r7, #4]
 8003c20:	88f8      	ldrh	r0, [r7, #6]
 8003c22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4623      	mov	r3, r4
 8003c2a:	f7ff f9ef 	bl	800300c <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	3301      	adds	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
 8003c34:	7dfa      	ldrb	r2, [r7, #23]
 8003c36:	78bb      	ldrb	r3, [r7, #2]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f67f af57 	bls.w	8003aec <lcdRoundedRect2+0x5e>
			}
		}
		if(outline){
 8003c3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 811f 	beq.w	8003e86 <lcdRoundedRect2+0x3f8>
			lcdHLine2(x1+r, x2-r, y1, mode,1);
 8003c48:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	4413      	add	r3, r2
 8003c52:	b298      	uxth	r0, r3
 8003c54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	88ba      	ldrh	r2, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b299      	uxth	r1, r3
 8003c60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	2401      	movs	r4, #1
 8003c68:	9400      	str	r4, [sp, #0]
 8003c6a:	f7ff f9cf 	bl	800300c <lcdHLine2>
			lcdHLine2(x1+r, x2-r, y2, mode,1);
 8003c6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	4413      	add	r3, r2
 8003c78:	b298      	uxth	r0, r3
 8003c7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	88ba      	ldrh	r2, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b299      	uxth	r1, r3
 8003c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c8a:	78ba      	ldrb	r2, [r7, #2]
 8003c8c:	2401      	movs	r4, #1
 8003c8e:	9400      	str	r4, [sp, #0]
 8003c90:	f7ff f9bc 	bl	800300c <lcdHLine2>
			lcdVLine(x1, y1+r, y2-r, mode);
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b299      	uxth	r1, r3
 8003ca2:	78ba      	ldrb	r2, [r7, #2]
 8003ca4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cb0:	88f8      	ldrh	r0, [r7, #6]
 8003cb2:	f7ff f929 	bl	8002f08 <lcdVLine>
			lcdVLine(x2, y1+r, y2-r, mode);
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	78ba      	ldrb	r2, [r7, #2]
 8003cc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cd2:	88b8      	ldrh	r0, [r7, #4]
 8003cd4:	f7ff f918 	bl	8002f08 <lcdVLine>
//			uint16_t nextOff = 0;
			for(uint16_t i = 0; i < (r-1); i++){
 8003cd8:	2300      	movs	r3, #0
 8003cda:	82bb      	strh	r3, [r7, #20]
 8003cdc:	e0cc      	b.n	8003e78 <lcdRoundedRect2+0x3ea>
				//corner line offsets from X of circle center
				uint16_t off = (uint16_t)(sqrt(r*r-(r-i)*(r-i)));
 8003cde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ce2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003ce6:	fb03 f202 	mul.w	r2, r3, r2
 8003cea:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003cee:	8abb      	ldrh	r3, [r7, #20]
 8003cf0:	1acb      	subs	r3, r1, r3
 8003cf2:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003cf6:	8ab9      	ldrh	r1, [r7, #20]
 8003cf8:	1a41      	subs	r1, r0, r1
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fc1f 	bl	8000544 <__aeabi_i2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	ec43 2b10 	vmov	d0, r2, r3
 8003d0e:	f00e fe27 	bl	8012960 <sqrt>
 8003d12:	ec53 2b10 	vmov	r2, r3, d0
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc ff55 	bl	8000bc8 <__aeabi_d2uiz>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	827b      	strh	r3, [r7, #18]
				uint16_t nextOff = (uint16_t)(sqrt(r*r-(r-i-1)*(r-i-1)));
 8003d22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d26:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003d2a:	fb03 f202 	mul.w	r2, r3, r2
 8003d2e:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003d32:	8abb      	ldrh	r3, [r7, #20]
 8003d34:	1acb      	subs	r3, r1, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003d3c:	8ab9      	ldrh	r1, [r7, #20]
 8003d3e:	1a41      	subs	r1, r0, r1
 8003d40:	3901      	subs	r1, #1
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fbfb 	bl	8000544 <__aeabi_i2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	ec43 2b10 	vmov	d0, r2, r3
 8003d56:	f00e fe03 	bl	8012960 <sqrt>
 8003d5a:	ec53 2b10 	vmov	r2, r3, d0
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fc ff31 	bl	8000bc8 <__aeabi_d2uiz>
 8003d66:	4603      	mov	r3, r0
 8003d68:	823b      	strh	r3, [r7, #16]
				//reduce corner pixel-lines overlapping
				if((nextOff-off)>0) off++;
 8003d6a:	8a3a      	ldrh	r2, [r7, #16]
 8003d6c:	8a7b      	ldrh	r3, [r7, #18]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	dd02      	ble.n	8003d7a <lcdRoundedRect2+0x2ec>
 8003d74:	8a7b      	ldrh	r3, [r7, #18]
 8003d76:	3301      	adds	r3, #1
 8003d78:	827b      	strh	r3, [r7, #18]
				//left corners
				lcdHLine2(x1+r-nextOff, x1+r-off, y1+i+1, mode, 1);
 8003d7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	4413      	add	r3, r2
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	8a3b      	ldrh	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	b298      	uxth	r0, r3
 8003d8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4413      	add	r3, r2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	8a7b      	ldrh	r3, [r7, #18]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	8abb      	ldrh	r3, [r7, #20]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	4413      	add	r3, r2
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db0:	2401      	movs	r4, #1
 8003db2:	9400      	str	r4, [sp, #0]
 8003db4:	f7ff f92a 	bl	800300c <lcdHLine2>
				lcdHLine2(x1+r-nextOff, x1+r-off, y2-i-1, mode, 1);
 8003db8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	8a3b      	ldrh	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b298      	uxth	r0, r3
 8003dca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	8a7b      	ldrh	r3, [r7, #18]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	8abb      	ldrh	r3, [r7, #20]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	78ba      	ldrb	r2, [r7, #2]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dee:	2401      	movs	r4, #1
 8003df0:	9400      	str	r4, [sp, #0]
 8003df2:	f7ff f90b 	bl	800300c <lcdHLine2>
				//right corners
				lcdHLine2(x2-r+off, x2-r+nextOff, y1+i+1, mode, 1);
 8003df6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	88ba      	ldrh	r2, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	4413      	add	r3, r2
 8003e06:	b298      	uxth	r0, r3
 8003e08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	88ba      	ldrh	r2, [r7, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	8a3b      	ldrh	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	b299      	uxth	r1, r3
 8003e1a:	8abb      	ldrh	r3, [r7, #20]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	4413      	add	r3, r2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3301      	adds	r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e2c:	2401      	movs	r4, #1
 8003e2e:	9400      	str	r4, [sp, #0]
 8003e30:	f7ff f8ec 	bl	800300c <lcdHLine2>
				lcdHLine2(x2-r+off, x2-r+nextOff, y2-i-1, mode, 1);
 8003e34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	88ba      	ldrh	r2, [r7, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	4413      	add	r3, r2
 8003e44:	b298      	uxth	r0, r3
 8003e46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	88ba      	ldrh	r2, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8a3b      	ldrh	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	b299      	uxth	r1, r3
 8003e58:	8abb      	ldrh	r3, [r7, #20]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	78ba      	ldrb	r2, [r7, #2]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e6a:	2401      	movs	r4, #1
 8003e6c:	9400      	str	r4, [sp, #0]
 8003e6e:	f7ff f8cd 	bl	800300c <lcdHLine2>
			for(uint16_t i = 0; i < (r-1); i++){
 8003e72:	8abb      	ldrh	r3, [r7, #20]
 8003e74:	3301      	adds	r3, #1
 8003e76:	82bb      	strh	r3, [r7, #20]
 8003e78:	8aba      	ldrh	r2, [r7, #20]
 8003e7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f6ff af2c 	blt.w	8003cde <lcdRoundedRect2+0x250>
			}
		}
	}
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}

08003e8e <lcdRect2>:


void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003e8e:	b590      	push	{r4, r7, lr}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	4604      	mov	r4, r0
 8003e96:	4608      	mov	r0, r1
 8003e98:	4611      	mov	r1, r2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	80fb      	strh	r3, [r7, #6]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	80bb      	strh	r3, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	88bb      	ldrh	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d046      	beq.n	8003f42 <lcdRect2+0xb4>
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	78bb      	ldrb	r3, [r7, #2]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d042      	beq.n	8003f42 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e00d      	b.n	8003ede <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003ec2:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	88b9      	ldrh	r1, [r7, #4]
 8003eca:	88f8      	ldrh	r0, [r7, #6]
 8003ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	f7ff f89a 	bl	800300c <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	3301      	adds	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	78bb      	ldrb	r3, [r7, #2]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d9ed      	bls.n	8003ec2 <lcdRect2+0x34>
		}
		if(outline){
 8003ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d029      	beq.n	8003f42 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	88b9      	ldrh	r1, [r7, #4]
 8003ef6:	88f8      	ldrh	r0, [r7, #6]
 8003ef8:	2401      	movs	r4, #1
 8003efa:	9400      	str	r4, [sp, #0]
 8003efc:	f7ff f886 	bl	800300c <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f04:	78ba      	ldrb	r2, [r7, #2]
 8003f06:	88b9      	ldrh	r1, [r7, #4]
 8003f08:	88f8      	ldrh	r0, [r7, #6]
 8003f0a:	2401      	movs	r4, #1
 8003f0c:	9400      	str	r4, [sp, #0]
 8003f0e:	f7ff f87d 	bl	800300c <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	b299      	uxth	r1, r3
 8003f1a:	78bb      	ldrb	r3, [r7, #2]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f24:	88f8      	ldrh	r0, [r7, #6]
 8003f26:	f7fe ffef 	bl	8002f08 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b299      	uxth	r1, r3
 8003f32:	78bb      	ldrb	r3, [r7, #2]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f3c:	88b8      	ldrh	r0, [r7, #4]
 8003f3e:	f7fe ffe3 	bl	8002f08 <lcdVLine>
		}
	}
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd90      	pop	{r4, r7, pc}

08003f4a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f52:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f56:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003f62:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f66:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003f6a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003f72:	e000      	b.n	8003f76 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003f74:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f9      	beq.n	8003f74 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003f8a:	687b      	ldr	r3, [r7, #4]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ffd1 	bl	8003f4a <ITM_SendChar>
	return(ch);
 8003fa8:	687b      	ldr	r3, [r7, #4]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <setTimeout+0x30>)
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <setTimeout+0x34>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <setTimeout+0x38>)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <setTimeout+0x3c>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20005904 	.word	0x20005904
 8003fe8:	20005902 	.word	0x20005902
 8003fec:	20005908 	.word	0x20005908
 8003ff0:	20005901 	.word	0x20005901

08003ff4 <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	2303      	movs	r3, #3
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	23be      	movs	r3, #190	; 0xbe
 8004008:	2232      	movs	r2, #50	; 0x32
 800400a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800400e:	2032      	movs	r0, #50	; 0x32
 8004010:	f7ff ff3d 	bl	8003e8e <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <showAlert+0x34>)
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <showAlert+0x38>)
 8004018:	215a      	movs	r1, #90	; 0x5a
 800401a:	205a      	movs	r0, #90	; 0x5a
 800401c:	f7fe ff46 	bl	8002eac <lcdPutStr>
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08014084 	.word	0x08014084
 800402c:	08013b94 	.word	0x08013b94

08004030 <hideAlert>:
void hideAlert(void){
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
	alertFlag = 0;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <hideAlert+0x14>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	2000590c 	.word	0x2000590c

08004048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 800404e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004050:	f002 fbe6 	bl	8006820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004054:	f000 f906 	bl	8004264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004058:	f7fe f9e8 	bl	800242c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800405c:	f001 f924 	bl	80052a8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8004060:	f000 fb36 	bl	80046d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004064:	f000 fec0 	bl	8004de8 <MX_TIM1_Init>
  MX_TIM10_Init();
 8004068:	f000 ff60 	bl	8004f2c <MX_TIM10_Init>
  MX_I2C1_Init();
 800406c:	f7fe fc94 	bl	8002998 <MX_I2C1_Init>
  MX_TIM11_Init();
 8004070:	f000 ff80 	bl	8004f74 <MX_TIM11_Init>
  MX_RTC_Init();
 8004074:	f000 fa4a 	bl	800450c <MX_RTC_Init>
  MX_TIM13_Init();
 8004078:	f000 ffa0 	bl	8004fbc <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 800407c:	f000 faa0 	bl	80045c0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8004080:	f008 fda8 	bl	800cbd4 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8004084:	f001 f93a 	bl	80052fc <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8004088:	f000 ffbc 	bl	8005004 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 800408c:	485b      	ldr	r0, [pc, #364]	; (80041fc <main+0x1b4>)
 800408e:	f006 fa7f 	bl	800a590 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8004092:	485a      	ldr	r0, [pc, #360]	; (80041fc <main+0x1b4>)
 8004094:	f006 facc 	bl	800a630 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004098:	2100      	movs	r1, #0
 800409a:	4858      	ldr	r0, [pc, #352]	; (80041fc <main+0x1b4>)
 800409c:	f006 fbc0 	bl	800a820 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 (1Hz) - for stopwatch
  stwInit(&htim10);
 80040a0:	4857      	ldr	r0, [pc, #348]	; (8004200 <main+0x1b8>)
 80040a2:	f000 fd8f 	bl	8004bc4 <stwInit>
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80040a6:	2100      	movs	r1, #0
 80040a8:	4856      	ldr	r0, [pc, #344]	; (8004204 <main+0x1bc>)
 80040aa:	f006 fbb9 	bl	800a820 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 80040ae:	4856      	ldr	r0, [pc, #344]	; (8004208 <main+0x1c0>)
 80040b0:	f006 fabe 	bl	800a630 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 80040b4:	4855      	ldr	r0, [pc, #340]	; (800420c <main+0x1c4>)
 80040b6:	f7fd ff93 	bl	8001fe0 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 80040ba:	4855      	ldr	r0, [pc, #340]	; (8004210 <main+0x1c8>)
 80040bc:	f006 fab8 	bl	800a630 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 80040c0:	4c54      	ldr	r4, [pc, #336]	; (8004214 <main+0x1cc>)
 80040c2:	463b      	mov	r3, r7
 80040c4:	4954      	ldr	r1, [pc, #336]	; (8004218 <main+0x1d0>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fac0 	bl	800264c <initGps>
 80040cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80040d0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80040d4:	4620      	mov	r0, r4
 80040d6:	4619      	mov	r1, r3
 80040d8:	f44f 7319 	mov.w	r3, #612	; 0x264
 80040dc:	461a      	mov	r2, r3
 80040de:	f00b fd07 	bl	800faf0 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 80040e2:	484e      	ldr	r0, [pc, #312]	; (800421c <main+0x1d4>)
 80040e4:	f7fd fa98 	bl	8001618 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 80040e8:	f240 118f 	movw	r1, #399	; 0x18f
 80040ec:	484c      	ldr	r0, [pc, #304]	; (8004220 <main+0x1d8>)
 80040ee:	f002 fa89 	bl	8006604 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 80040f2:	f240 128f 	movw	r2, #399	; 0x18f
 80040f6:	2102      	movs	r1, #2
 80040f8:	484a      	ldr	r0, [pc, #296]	; (8004224 <main+0x1dc>)
 80040fa:	f002 f9e7 	bl	80064cc <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80040fe:	2201      	movs	r2, #1
 8004100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004104:	4848      	ldr	r0, [pc, #288]	; (8004228 <main+0x1e0>)
 8004106:	f002 ff7d 	bl	8007004 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 800410a:	4848      	ldr	r0, [pc, #288]	; (800422c <main+0x1e4>)
 800410c:	f7fc ff64 	bl	8000fd8 <Mount_SD>
  	Create_File("FILE1.TXT");
 8004110:	4847      	ldr	r0, [pc, #284]	; (8004230 <main+0x1e8>)
 8004112:	f7fd f82f 	bl	8001174 <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8004116:	4947      	ldr	r1, [pc, #284]	; (8004234 <main+0x1ec>)
 8004118:	4845      	ldr	r0, [pc, #276]	; (8004230 <main+0x1e8>)
 800411a:	f7fd f8b7 	bl	800128c <Update_File>
  	Create_File("FILE4.TXT");
 800411e:	4846      	ldr	r0, [pc, #280]	; (8004238 <main+0x1f0>)
 8004120:	f7fd f828 	bl	8001174 <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8004124:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004128:	4619      	mov	r1, r3
 800412a:	4844      	ldr	r0, [pc, #272]	; (800423c <main+0x1f4>)
 800412c:	f7fc ff70 	bl	8001010 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8004130:	2200      	movs	r2, #0
 8004132:	4943      	ldr	r1, [pc, #268]	; (8004240 <main+0x1f8>)
 8004134:	4843      	ldr	r0, [pc, #268]	; (8004244 <main+0x1fc>)
 8004136:	f004 fec5 	bl	8008ec4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800413a:	2200      	movs	r2, #0
 800413c:	4942      	ldr	r1, [pc, #264]	; (8004248 <main+0x200>)
 800413e:	4841      	ldr	r0, [pc, #260]	; (8004244 <main+0x1fc>)
 8004140:	f004 ff1e 	bl	8008f80 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800414a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800414e:	222e      	movs	r2, #46	; 0x2e
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f00b fcda 	bl	800fb0c <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <main+0x1f8>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4b38      	ldr	r3, [pc, #224]	; (8004240 <main+0x1f8>)
 8004160:	785b      	ldrb	r3, [r3, #1]
 8004162:	4619      	mov	r1, r3
 8004164:	4b36      	ldr	r3, [pc, #216]	; (8004240 <main+0x1f8>)
 8004166:	789b      	ldrb	r3, [r3, #2]
 8004168:	f507 701a 	add.w	r0, r7, #616	; 0x268
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	460b      	mov	r3, r1
 8004170:	4936      	ldr	r1, [pc, #216]	; (800424c <main+0x204>)
 8004172:	f00c fb87 	bl	8010884 <siprintf>
	SD_logger(tmpl);
 8004176:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ff16 	bl	8000fac <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8004180:	f7fe fcbc 	bl	8002afc <lcdClearBuffer>
  lcdRefresh();
 8004184:	f7ff fc14 	bl	80039b0 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <main+0x208>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00f      	beq.n	80041b0 <main+0x168>
		bmpData = getBmpData(&bmp180module);
 8004190:	4c30      	ldr	r4, [pc, #192]	; (8004254 <main+0x20c>)
 8004192:	463b      	mov	r3, r7
 8004194:	4921      	ldr	r1, [pc, #132]	; (800421c <main+0x1d4>)
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fca6 	bl	8001ae8 <getBmpData>
 800419c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80041a0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80041a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 80041aa:	4b29      	ldr	r3, [pc, #164]	; (8004250 <main+0x208>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80041b0:	2200      	movs	r2, #0
 80041b2:	4923      	ldr	r1, [pc, #140]	; (8004240 <main+0x1f8>)
 80041b4:	4823      	ldr	r0, [pc, #140]	; (8004244 <main+0x1fc>)
 80041b6:	f004 fe85 	bl	8008ec4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80041ba:	2200      	movs	r2, #0
 80041bc:	4922      	ldr	r1, [pc, #136]	; (8004248 <main+0x200>)
 80041be:	4821      	ldr	r0, [pc, #132]	; (8004244 <main+0x1fc>)
 80041c0:	f004 fede 	bl	8008f80 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 80041c4:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <main+0x1f8>)
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <main+0x194>
 80041cc:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <main+0x1f8>)
 80041ce:	789b      	ldrb	r3, [r3, #2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <main+0x194>
			pulseVib(40, 60);
 80041d4:	213c      	movs	r1, #60	; 0x3c
 80041d6:	2028      	movs	r0, #40	; 0x28
 80041d8:	f001 f954 	bl	8005484 <pulseVib>
		}
	  lcdClearBuffer();
 80041dc:	f7fe fc8e 	bl	8002afc <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 80041e0:	f7fe fbb6 	bl	8002950 <showGui>

	  if(alertFlag){
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <main+0x210>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <main+0x1ae>
		  showAlert();
 80041ec:	f7ff ff02 	bl	8003ff4 <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <main+0x214>)
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <main+0x218>)
 80041f4:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 80041f6:	f7ff fbdb 	bl	80039b0 <lcdRefresh>
	  if(updateBmpData_flag){
 80041fa:	e7c5      	b.n	8004188 <main+0x140>
 80041fc:	20005b08 	.word	0x20005b08
 8004200:	20005b50 	.word	0x20005b50
 8004204:	20005c28 	.word	0x20005c28
 8004208:	20005b98 	.word	0x20005b98
 800420c:	20000050 	.word	0x20000050
 8004210:	20005be0 	.word	0x20005be0
 8004214:	2000569c 	.word	0x2000569c
 8004218:	20005cb4 	.word	0x20005cb4
 800421c:	2000236c 	.word	0x2000236c
 8004220:	2000568c 	.word	0x2000568c
 8004224:	20005678 	.word	0x20005678
 8004228:	40020800 	.word	0x40020800
 800422c:	08013b9c 	.word	0x08013b9c
 8004230:	08013ba0 	.word	0x08013ba0
 8004234:	08013bac 	.word	0x08013bac
 8004238:	08013bcc 	.word	0x08013bcc
 800423c:	08013bd8 	.word	0x08013bd8
 8004240:	20005660 	.word	0x20005660
 8004244:	20005910 	.word	0x20005910
 8004248:	20005674 	.word	0x20005674
 800424c:	08013be4 	.word	0x08013be4
 8004250:	2000007f 	.word	0x2000007f
 8004254:	200023b0 	.word	0x200023b0
 8004258:	2000590c 	.word	0x2000590c
 800425c:	20002690 	.word	0x20002690
 8004260:	08004031 	.word	0x08004031

08004264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b094      	sub	sp, #80	; 0x50
 8004268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800426a:	f107 0320 	add.w	r3, r7, #32
 800426e:	2230      	movs	r2, #48	; 0x30
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f00b fc4a 	bl	800fb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <SystemClock_Config+0xd0>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <SystemClock_Config+0xd0>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <SystemClock_Config+0xd0>)
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a4:	2300      	movs	r3, #0
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <SystemClock_Config+0xd4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <SystemClock_Config+0xd4>)
 80042ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <SystemClock_Config+0xd4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80042c0:	2305      	movs	r3, #5
 80042c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80042c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042ca:	2301      	movs	r3, #1
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ce:	2302      	movs	r3, #2
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80042d8:	2304      	movs	r3, #4
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80042dc:	23a8      	movs	r3, #168	; 0xa8
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042e0:	2302      	movs	r3, #2
 80042e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042e4:	2307      	movs	r3, #7
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042e8:	f107 0320 	add.w	r3, r7, #32
 80042ec:	4618      	mov	r0, r3
 80042ee:	f003 ff1b 	bl	8008128 <HAL_RCC_OscConfig>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80042f8:	f000 f8fa 	bl	80044f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042fc:	230f      	movs	r3, #15
 80042fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004300:	2302      	movs	r3, #2
 8004302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004308:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800430c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800430e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004312:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	2105      	movs	r1, #5
 800431a:	4618      	mov	r0, r3
 800431c:	f004 f97c 	bl	8008618 <HAL_RCC_ClockConfig>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004326:	f000 f8e3 	bl	80044f0 <Error_Handler>
  }
}
 800432a:	bf00      	nop
 800432c:	3750      	adds	r7, #80	; 0x50
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	40007000 	.word	0x40007000

0800433c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	// used to time stopwatch
	if(htim->Instance == TIM10){
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d107      	bne.n	800435e <HAL_TIM_PeriodElapsedCallback+0x22>
		stwTick();
 800434e:	f000 faed 	bl	800492c <stwTick>
		// animation frame tick
		animationFrameNum++;
 8004352:	4b49      	ldr	r3, [pc, #292]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800435c:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	// button polling
	if(htim->Instance == TIM11){
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a46      	ldr	r2, [pc, #280]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x64>
		scanButtons(btnsPtrs);
 8004368:	4845      	ldr	r0, [pc, #276]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800436a:	f7fe f82b 	bl	80023c4 <scanButtons>
		button_task();
 800436e:	f7fd fc77 	bl	8001c60 <button_task>
		// check timeouts
		if(timeoutState){
 8004372:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x64>
			if(timeoutValue == timeoutSetpoint){
 800437a:	4b43      	ldr	r3, [pc, #268]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	4b43      	ldr	r3, [pc, #268]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d106      	bne.n	8004394 <HAL_TIM_PeriodElapsedCallback+0x58>
				(*timeoutClbkPtr)();
 8004386:	4b42      	ldr	r3, [pc, #264]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4798      	blx	r3
				timeoutState = 0;
 800438c:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e005      	b.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x64>
			} else {
				timeoutValue++;
 8004394:	4b3c      	ldr	r3, [pc, #240]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b3a      	ldr	r3, [pc, #232]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800439e:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d160      	bne.n	800446c <HAL_TIM_PeriodElapsedCallback+0x130>
		// watchface module timer value incrementing
		tickTimAAB();
 80043aa:	f7fe f999 	bl	80026e0 <tickTimAAB>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 80043ae:	4b3a      	ldr	r3, [pc, #232]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80043b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_TIM_PeriodElapsedCallback+0x86>
 80043b8:	4b37      	ldr	r3, [pc, #220]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80043ba:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80043be:	4836      	ldr	r0, [pc, #216]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80043c0:	4798      	blx	r3

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80043c2:	2101      	movs	r1, #1
 80043c4:	4835      	ldr	r0, [pc, #212]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80043c6:	f002 fe36 	bl	8007036 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80043cc:	7b1b      	ldrb	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <HAL_TIM_PeriodElapsedCallback+0xb2>
 80043d2:	4b34      	ldr	r3, [pc, #208]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e4:	ee17 1a90 	vmov	r1, s15
 80043e8:	482d      	ldr	r0, [pc, #180]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80043ea:	f002 f941 	bl	8006670 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 80043ee:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4a2d      	ldr	r2, [pc, #180]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004400:	7c1b      	ldrb	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8004406:	f107 030e 	add.w	r3, r7, #14
 800440a:	4619      	mov	r1, r3
 800440c:	4827      	ldr	r0, [pc, #156]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 800440e:	f002 f89a 	bl	8006546 <cbuf_ovw>

		tim13_counter++;
 8004412:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800441c:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d109      	bne.n	800443e <HAL_TIM_PeriodElapsedCallback+0x102>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	481b      	ldr	r0, [pc, #108]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800442e:	f002 fe02 	bl	8007036 <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 8004432:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerRunning(&countDown1)){
 800443e:	481f      	ldr	r0, [pc, #124]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004440:	f7fd ffda 	bl	80023f8 <isTimerRunning>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <HAL_TIM_PeriodElapsedCallback+0x130>
			if(countDown1.remainingSec == 0){
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800444c:	885b      	ldrh	r3, [r3, #2]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PeriodElapsedCallback+0x124>
				alertFlag = 1;
 8004452:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 8004458:	4818      	ldr	r0, [pc, #96]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800445a:	f7fd ffd9 	bl	8002410 <pauseTimer>
			} else {
				countDown1.remainingSec--;
			}
		}
	}
}
 800445e:	e005      	b.n	800446c <HAL_TIM_PeriodElapsedCallback+0x130>
				countDown1.remainingSec--;
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004462:	885b      	ldrh	r3, [r3, #2]
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800446a:	805a      	strh	r2, [r3, #2]
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40014400 	.word	0x40014400
 8004478:	20005d1a 	.word	0x20005d1a
 800447c:	40014800 	.word	0x40014800
 8004480:	20000050 	.word	0x20000050
 8004484:	20005901 	.word	0x20005901
 8004488:	20005902 	.word	0x20005902
 800448c:	20005904 	.word	0x20005904
 8004490:	20005908 	.word	0x20005908
 8004494:	40001c00 	.word	0x40001c00
 8004498:	2000569c 	.word	0x2000569c
 800449c:	40020400 	.word	0x40020400
 80044a0:	2000568c 	.word	0x2000568c
 80044a4:	200023b0 	.word	0x200023b0
 80044a8:	cccccccd 	.word	0xcccccccd
 80044ac:	20005678 	.word	0x20005678
 80044b0:	20005900 	.word	0x20005900
 80044b4:	2000007e 	.word	0x2000007e
 80044b8:	2000007f 	.word	0x2000007f
 80044bc:	20000080 	.word	0x20000080
 80044c0:	2000590c 	.word	0x2000590c

080044c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <HAL_UART_RxCpltCallback+0x24>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d103      	bne.n	80044de <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	4804      	ldr	r0, [pc, #16]	; (80044ec <HAL_UART_RxCpltCallback+0x28>)
 80044da:	f002 fdac 	bl	8007036 <HAL_GPIO_TogglePin>
	}
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40011400 	.word	0x40011400
 80044ec:	40020400 	.word	0x40020400

080044f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80044f8:	2201      	movs	r2, #1
 80044fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044fe:	4802      	ldr	r0, [pc, #8]	; (8004508 <Error_Handler+0x18>)
 8004500:	f002 fd80 	bl	8007004 <HAL_GPIO_WritePin>
  while (1)
 8004504:	e7fe      	b.n	8004504 <Error_Handler+0x14>
 8004506:	bf00      	nop
 8004508:	40020400 	.word	0x40020400

0800450c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004512:	1d3b      	adds	r3, r7, #4
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004520:	2300      	movs	r3, #0
 8004522:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <MX_RTC_Init+0x58>)
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <MX_RTC_Init+0x5c>)
 8004528:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800452a:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <MX_RTC_Init+0x58>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <MX_RTC_Init+0x58>)
 8004532:	227f      	movs	r2, #127	; 0x7f
 8004534:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <MX_RTC_Init+0x58>)
 8004538:	22ff      	movs	r2, #255	; 0xff
 800453a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <MX_RTC_Init+0x58>)
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <MX_RTC_Init+0x58>)
 8004544:	2200      	movs	r2, #0
 8004546:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <MX_RTC_Init+0x58>)
 800454a:	2200      	movs	r2, #0
 800454c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <MX_RTC_Init+0x58>)
 8004550:	f004 fc42 	bl	8008dd8 <HAL_RTC_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800455a:	f7ff ffc9 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20005910 	.word	0x20005910
 8004568:	40002800 	.word	0x40002800

0800456c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08e      	sub	sp, #56	; 0x38
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004574:	f107 0308 	add.w	r3, r7, #8
 8004578:	2230      	movs	r2, #48	; 0x30
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00b fac5 	bl	800fb0c <memset>
  if(rtcHandle->Instance==RTC)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_RTC_MspInit+0x4c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d111      	bne.n	80045b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800458c:	2320      	movs	r3, #32
 800458e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fa5c 	bl	8008a58 <HAL_RCCEx_PeriphCLKConfig>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80045a6:	f7ff ffa3 	bl	80044f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_RTC_MspInit+0x50>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80045b0:	bf00      	nop
 80045b2:	3738      	adds	r7, #56	; 0x38
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40002800 	.word	0x40002800
 80045bc:	42470e3c 	.word	0x42470e3c

080045c0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <MX_SDIO_SD_Init+0x3c>)
 80045c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045d8:	2200      	movs	r2, #0
 80045da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <MX_SDIO_SD_Init+0x38>)
 80045ea:	2204      	movs	r2, #4
 80045ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	20005930 	.word	0x20005930
 80045fc:	40012c00 	.word	0x40012c00

08004600 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a28      	ldr	r2, [pc, #160]	; (80046c0 <HAL_SD_MspInit+0xc0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d14a      	bne.n	80046b8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 800462c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004630:	6453      	str	r3, [r2, #68]	; 0x44
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6313      	str	r3, [r2, #48]	; 0x30
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_SD_MspInit+0xc4>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004676:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004688:	230c      	movs	r3, #12
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4619      	mov	r1, r3
 8004692:	480d      	ldr	r0, [pc, #52]	; (80046c8 <HAL_SD_MspInit+0xc8>)
 8004694:	f002 faf2 	bl	8006c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004698:	2304      	movs	r3, #4
 800469a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80046a8:	230c      	movs	r3, #12
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4619      	mov	r1, r3
 80046b2:	4806      	ldr	r0, [pc, #24]	; (80046cc <HAL_SD_MspInit+0xcc>)
 80046b4:	f002 fae2 	bl	8006c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40020800 	.word	0x40020800
 80046cc:	40020c00 	.word	0x40020c00

080046d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <MX_SPI1_Init+0x64>)
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <MX_SPI1_Init+0x68>)
 80046d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046da:	4b16      	ldr	r3, [pc, #88]	; (8004734 <MX_SPI1_Init+0x64>)
 80046dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <MX_SPI1_Init+0x64>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <MX_SPI1_Init+0x64>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <MX_SPI1_Init+0x64>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <MX_SPI1_Init+0x64>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <MX_SPI1_Init+0x64>)
 80046fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <MX_SPI1_Init+0x64>)
 8004704:	2220      	movs	r2, #32
 8004706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <MX_SPI1_Init+0x64>)
 800470a:	2200      	movs	r2, #0
 800470c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <MX_SPI1_Init+0x64>)
 8004710:	2200      	movs	r2, #0
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <MX_SPI1_Init+0x64>)
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <MX_SPI1_Init+0x64>)
 800471c:	220a      	movs	r2, #10
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004720:	4804      	ldr	r0, [pc, #16]	; (8004734 <MX_SPI1_Init+0x64>)
 8004722:	f005 fca5 	bl	800a070 <HAL_SPI_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800472c:	f7ff fee0 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200059b4 	.word	0x200059b4
 8004738:	40013000 	.word	0x40013000

0800473c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_SPI_MspInit+0x84>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d12b      	bne.n	80047b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 8004768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800476c:	6453      	str	r3, [r2, #68]	; 0x44
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_SPI_MspInit+0x88>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004796:	23a0      	movs	r3, #160	; 0xa0
 8004798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047a6:	2305      	movs	r3, #5
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	4619      	mov	r1, r3
 80047b0:	4805      	ldr	r0, [pc, #20]	; (80047c8 <HAL_SPI_MspInit+0x8c>)
 80047b2:	f002 fa63 	bl	8006c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40013000 	.word	0x40013000
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40020000 	.word	0x40020000

080047cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_MspInit+0x4c>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_MspInit+0x4c>)
 80047dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_MspInit+0x4c>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_MspInit+0x4c>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <HAL_MspInit+0x4c>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_MspInit+0x4c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004820:	e7fe      	b.n	8004820 <NMI_Handler+0x4>

08004822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8004826:	f7ff fe63 	bl	80044f0 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800482a:	e7fe      	b.n	800482a <HardFault_Handler+0x8>

0800482c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004830:	e7fe      	b.n	8004830 <MemManage_Handler+0x4>

08004832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004836:	e7fe      	b.n	8004836 <BusFault_Handler+0x4>

08004838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800483c:	e7fe      	b.n	800483c <UsageFault_Handler+0x4>

0800483e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800483e:	b480      	push	{r7}
 8004840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800486c:	f002 f82a 	bl	80068c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}

08004874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004878:	4803      	ldr	r0, [pc, #12]	; (8004888 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800487a:	f006 f899 	bl	800a9b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800487e:	4803      	ldr	r0, [pc, #12]	; (800488c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004880:	f006 f896 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20005b08 	.word	0x20005b08
 800488c:	20005b50 	.word	0x20005b50

08004890 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004894:	4803      	ldr	r0, [pc, #12]	; (80048a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004896:	f006 f88b 	bl	800a9b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800489a:	4803      	ldr	r0, [pc, #12]	; (80048a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800489c:	f006 f888 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80048a0:	bf00      	nop
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20005b08 	.word	0x20005b08
 80048a8:	20005b98 	.word	0x20005b98

080048ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80048b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80048b4:	f002 fbda 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80048b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048bc:	f002 fbd6 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80048c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80048c4:	f002 fbd2 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80048c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048cc:	f002 fbce 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80048d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048d4:	f002 fbca 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80048d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048dc:	f002 fbc6 	bl	800706c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80048ea:	f006 f861 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20005be0 	.word	0x20005be0

080048f8 <getLapNum>:
stw_t stwS = {&currentStw, STW_STATE_DISABLED};

stw_counter_t stw_splits[STW_SPLIT_MAX_NUM];
uint8_t snap_number = 1;

uint8_t getLapNum(void){
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
	return snap_number;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <getLapNum+0x14>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000090 	.word	0x20000090

08004910 <stwStart>:
//		return diff;
//	}
//}

// activate stopwatch and it's timer
void stwStart(void){
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <stwStart+0x14>)
 8004916:	2201      	movs	r2, #1
 8004918:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Start_IT(&htim10);
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <stwStart+0x18>)
 800491c:	f005 fe88 	bl	800a630 <HAL_TIM_Base_Start_IT>
}
 8004920:	bf00      	nop
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000088 	.word	0x20000088
 8004928:	20005b50 	.word	0x20005b50

0800492c <stwTick>:
void stwTick(void){
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	if(stwS.state){
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <stwTick+0x20>)
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <stwTick+0x16>
		(stwS.cnt->sec)++;
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <stwTick+0x20>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	3201      	adds	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
	}
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000088 	.word	0x20000088

08004950 <stwStop>:
void stwStop(void){
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <stwStop+0x14>)
 8004956:	2200      	movs	r2, #0
 8004958:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 800495a:	4803      	ldr	r0, [pc, #12]	; (8004968 <stwStop+0x18>)
 800495c:	f005 fed8 	bl	800a710 <HAL_TIM_Base_Stop_IT>

}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000088 	.word	0x20000088
 8004968:	20005b50 	.word	0x20005b50

0800496c <stwClear>:
void stwClear(void){
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <stwClear+0x28>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt->sec = 0;
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <stwClear+0x2c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
	memset(stw_splits, 0, sizeof stw_splits);
 8004980:	22f0      	movs	r2, #240	; 0xf0
 8004982:	2100      	movs	r1, #0
 8004984:	4805      	ldr	r0, [pc, #20]	; (800499c <stwClear+0x30>)
 8004986:	f00b f8c1 	bl	800fb0c <memset>
	snap_number = 1;
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <stwClear+0x34>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20005b50 	.word	0x20005b50
 8004998:	20000088 	.word	0x20000088
 800499c:	20005a14 	.word	0x20005a14
 80049a0:	20000090 	.word	0x20000090

080049a4 <getStw>:

void getStw(struct stopwatch_t* stw_ptr, stw_t* stwS){
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
		stw_ptr->hours = stwS->cnt->sec/(60*60);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <getStw+0xa0>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0adb      	lsrs	r3, r3, #11
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	701a      	strb	r2, [r3, #0]
		stw_ptr->min = stwS->cnt->sec%(60*60)/(60);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <getStw+0xa0>)
 80049ca:	fba3 1302 	umull	r1, r3, r3, r2
 80049ce:	0adb      	lsrs	r3, r3, #11
 80049d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <getStw+0xa4>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	705a      	strb	r2, [r3, #1]
		stw_ptr->sec = stwS->cnt->sec%60;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <getStw+0xa4>)
 80049f0:	fba3 2301 	umull	r2, r3, r3, r1
 80049f4:	095a      	lsrs	r2, r3, #5
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	1aca      	subs	r2, r1, r3
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	709a      	strb	r2, [r3, #2]
		stw_ptr->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <getStw+0xa8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <getStw+0xac>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	70da      	strb	r2, [r3, #3]
		// update .00 second counter in stw struct
		stwS->cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <getStw+0xa8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4909      	ldr	r1, [pc, #36]	; (8004a50 <getStw+0xac>)
 8004a2c:	fba1 1202 	umull	r1, r2, r1, r2
 8004a30:	0952      	lsrs	r2, r2, #5
 8004a32:	b292      	uxth	r2, r2
 8004a34:	809a      	strh	r2, [r3, #4]

}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	91a2b3c5 	.word	0x91a2b3c5
 8004a48:	88888889 	.word	0x88888889
 8004a4c:	20005b50 	.word	0x20005b50
 8004a50:	51eb851f 	.word	0x51eb851f

08004a54 <stwSave>:



// stopwatch snapshot
void stwSave(void){
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
	if(snap_number < STW_SPLIT_MAX_NUM){
 8004a58:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <stwSave+0x70>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b1d      	cmp	r3, #29
 8004a5e:	d82b      	bhi.n	8004ab8 <stwSave+0x64>
		stw_splits[snap_number].sec = stwS.cnt->sec;
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <stwSave+0x74>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <stwSave+0x70>)
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <stwSave+0x78>)
 8004a6e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		stwS.cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <stwSave+0x7c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <stwSave+0x74>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4915      	ldr	r1, [pc, #84]	; (8004ad4 <stwSave+0x80>)
 8004a80:	fba1 1202 	umull	r1, r2, r1, r2
 8004a84:	0952      	lsrs	r2, r2, #5
 8004a86:	b292      	uxth	r2, r2
 8004a88:	809a      	strh	r2, [r3, #4]
		stw_splits[snap_number].csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <stwSave+0x7c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <stwSave+0x70>)
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	4610      	mov	r0, r2
 8004a98:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <stwSave+0x80>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	b299      	uxth	r1, r3
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <stwSave+0x78>)
 8004aa4:	00c3      	lsls	r3, r0, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	809a      	strh	r2, [r3, #4]
		snap_number++;
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <stwSave+0x70>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <stwSave+0x70>)
 8004ab6:	701a      	strb	r2, [r3, #0]
	}
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000090 	.word	0x20000090
 8004ac8:	20000088 	.word	0x20000088
 8004acc:	20005a14 	.word	0x20005a14
 8004ad0:	20005b50 	.word	0x20005b50
 8004ad4:	51eb851f 	.word	0x51eb851f

08004ad8 <counterDiff>:

void counterDiff(stw_counter_t* result, stw_counter_t* cnt1, stw_counter_t* cnt2){
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
//		if(diff > 100){
//		result->csec = diff+100;
//	} else {
//		result->csec = diff;
//	}
		result->sec = (cnt1->sec*100+cnt1->csec-cnt2->sec*100-cnt2->csec)/100;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2264      	movs	r2, #100	; 0x64
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	8892      	ldrh	r2, [r2, #4]
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2164      	movs	r1, #100	; 0x64
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	8892      	ldrh	r2, [r2, #4]
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <counterDiff+0x6c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095a      	lsrs	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]
		uint16_t diff = cnt1->csec-cnt2->csec;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	889a      	ldrh	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	889b      	ldrh	r3, [r3, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	82fb      	strh	r3, [r7, #22]
		if(diff > 100){
 8004b1e:	8afb      	ldrh	r3, [r7, #22]
 8004b20:	2b64      	cmp	r3, #100	; 0x64
 8004b22:	d905      	bls.n	8004b30 <counterDiff+0x58>
			result->csec = diff+100;
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	3364      	adds	r3, #100	; 0x64
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	809a      	strh	r2, [r3, #4]
		} else {
			result->csec = diff;
		}
}
 8004b2e:	e002      	b.n	8004b36 <counterDiff+0x5e>
			result->csec = diff;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8afa      	ldrh	r2, [r7, #22]
 8004b34:	809a      	strh	r2, [r3, #4]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	51eb851f 	.word	0x51eb851f

08004b48 <counterToStopwatch>:

// transform counter info into hh/mm/ss/cs struct
void counterToStopwatch(struct stopwatch_t* output, stw_counter_t* counter){
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	output->hours = counter->sec/(60*60);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <counterToStopwatch+0x74>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	0adb      	lsrs	r3, r3, #11
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	701a      	strb	r2, [r3, #0]
	output->min = counter->sec%(60*60)/(60);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <counterToStopwatch+0x74>)
 8004b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6e:	0adb      	lsrs	r3, r3, #11
 8004b70:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <counterToStopwatch+0x78>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	705a      	strb	r2, [r3, #1]
	output->sec = counter->sec%60;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <counterToStopwatch+0x78>)
 8004b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b92:	095a      	lsrs	r2, r3, #5
 8004b94:	4613      	mov	r3, r2
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	1aca      	subs	r2, r1, r3
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	709a      	strb	r2, [r3, #2]
	output->csec = counter->csec;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	889b      	ldrh	r3, [r3, #4]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	70da      	strb	r2, [r3, #3]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	91a2b3c5 	.word	0x91a2b3c5
 8004bc0:	88888889 	.word	0x88888889

08004bc4 <stwInit>:


void stwInit(TIM_HandleTypeDef* htim){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	// initialize timer
	// start/stop/reset routine to fix bug:
	//BUG: first stopwatch start after reset causes timer to jump 1 second forward
	  HAL_TIM_Base_Init(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f005 fcdf 	bl	800a590 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f005 fd2c 	bl	800a630 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Stop_IT(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f005 fd99 	bl	800a710 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(htim, 0);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <stwprintf>:

void stwprintf(char* outputString, struct stopwatch_t* stw_time){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	if(stw_time->hours > 0){
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <stwprintf+0x30>
		sprintf(outputString, "%02dh %02d'%02d\"", stw_time->hours, stw_time->min, stw_time->sec);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	789b      	ldrb	r3, [r3, #2]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	490b      	ldr	r1, [pc, #44]	; (8004c44 <stwprintf+0x54>)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f00b fe33 	bl	8010884 <siprintf>
	} else {
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
	}
}
 8004c1e:	e00d      	b.n	8004c3c <stwprintf+0x4c>
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	461a      	mov	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	460b      	mov	r3, r1
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <stwprintf+0x58>)
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f00b fe24 	bl	8010884 <siprintf>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	08013c08 	.word	0x08013c08
 8004c48:	08013c1c 	.word	0x08013c1c

08004c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
	return 1;
 8004c50:	2301      	movs	r3, #1
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <_kill>:

int _kill(int pid, int sig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c66:	f00a fef7 	bl	800fa58 <__errno>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2216      	movs	r2, #22
 8004c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <_exit>:

void _exit (int status)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ffe7 	bl	8004c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c8e:	e7fe      	b.n	8004c8e <_exit+0x12>

08004c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e00a      	b.n	8004cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ca2:	f3af 8000 	nop.w
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	60ba      	str	r2, [r7, #8]
 8004cae:	b2ca      	uxtb	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	dbf0      	blt.n	8004ca2 <_read+0x12>
	}

return len;
 8004cc0:	687b      	ldr	r3, [r7, #4]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e009      	b.n	8004cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	60ba      	str	r2, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f957 	bl	8003f98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	3301      	adds	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	dbf1      	blt.n	8004cdc <_write+0x12>
	}
	return len;
 8004cf8:	687b      	ldr	r3, [r7, #4]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_close>:

int _close(int file)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
	return -1;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_isatty>:

int _isatty(int file)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
	return 1;
 8004d42:	2301      	movs	r3, #1
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <_sbrk+0x50>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <_sbrk+0x16>
		heap_end = &end;
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <_sbrk+0x50>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <_sbrk+0x54>)
 8004d80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <_sbrk+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <_sbrk+0x50>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	466a      	mov	r2, sp
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d907      	bls.n	8004da6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004d96:	f00a fe5f 	bl	800fa58 <__errno>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	220c      	movs	r2, #12
 8004d9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295
 8004da4:	e006      	b.n	8004db4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <_sbrk+0x50>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <_sbrk+0x50>)
 8004db0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20005b04 	.word	0x20005b04
 8004dc0:	20005d80 	.word	0x20005d80

08004dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <SystemInit+0x20>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <SystemInit+0x20>)
 8004dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b096      	sub	sp, #88	; 0x58
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	609a      	str	r2, [r3, #8]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	611a      	str	r2, [r3, #16]
 8004e16:	615a      	str	r2, [r3, #20]
 8004e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f00a fe73 	bl	800fb0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e26:	4b3f      	ldr	r3, [pc, #252]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e28:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <MX_TIM1_Init+0x140>)
 8004e2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004e2c:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e34:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004e3a:	4b3a      	ldr	r3, [pc, #232]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e42:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e4e:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e54:	4833      	ldr	r0, [pc, #204]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e56:	f005 fb9b 	bl	800a590 <HAL_TIM_Base_Init>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004e60:	f7ff fb46 	bl	80044f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e6e:	4619      	mov	r1, r3
 8004e70:	482c      	ldr	r0, [pc, #176]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e72:	f005 ff67 	bl	800ad44 <HAL_TIM_ConfigClockSource>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004e7c:	f7ff fb38 	bl	80044f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e80:	4828      	ldr	r0, [pc, #160]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004e82:	f005 fc74 	bl	800a76e <HAL_TIM_PWM_Init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004e8c:	f7ff fb30 	bl	80044f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e90:	2300      	movs	r3, #0
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4821      	ldr	r0, [pc, #132]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004ea0:	f006 fb50 	bl	800b544 <HAL_TIMEx_MasterConfigSynchronization>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004eaa:	f7ff fb21 	bl	80044f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eae:	2360      	movs	r3, #96	; 0x60
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4814      	ldr	r0, [pc, #80]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004ed4:	f005 fe74 	bl	800abc0 <HAL_TIM_PWM_ConfigChannel>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004ede:	f7ff fb07 	bl	80044f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004efa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4807      	ldr	r0, [pc, #28]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004f06:	f006 fb99 	bl	800b63c <HAL_TIMEx_ConfigBreakDeadTime>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004f10:	f7ff faee 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f14:	4803      	ldr	r0, [pc, #12]	; (8004f24 <MX_TIM1_Init+0x13c>)
 8004f16:	f000 f963 	bl	80051e0 <HAL_TIM_MspPostInit>

}
 8004f1a:	bf00      	nop
 8004f1c:	3758      	adds	r7, #88	; 0x58
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20005b08 	.word	0x20005b08
 8004f28:	40010000 	.word	0x40010000

08004f2c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f32:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <MX_TIM10_Init+0x44>)
 8004f34:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f38:	f244 129f 	movw	r2, #16799	; 0x419f
 8004f3c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f46:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f4a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004f58:	4804      	ldr	r0, [pc, #16]	; (8004f6c <MX_TIM10_Init+0x40>)
 8004f5a:	f005 fb19 	bl	800a590 <HAL_TIM_Base_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004f64:	f7ff fac4 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20005b50 	.word	0x20005b50
 8004f70:	40014400 	.word	0x40014400

08004f74 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f7a:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <MX_TIM11_Init+0x44>)
 8004f7c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f80:	f244 129f 	movw	r2, #16799	; 0x419f
 8004f84:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f8e:	2263      	movs	r2, #99	; 0x63
 8004f90:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004f9e:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <MX_TIM11_Init+0x40>)
 8004fa0:	f005 faf6 	bl	800a590 <HAL_TIM_Base_Init>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004faa:	f7ff faa1 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20005b98 	.word	0x20005b98
 8004fb8:	40014800 	.word	0x40014800

08004fbc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fc2:	4a0f      	ldr	r2, [pc, #60]	; (8005000 <MX_TIM13_Init+0x44>)
 8004fc4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fc8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004fcc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fda:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004fe8:	4804      	ldr	r0, [pc, #16]	; (8004ffc <MX_TIM13_Init+0x40>)
 8004fea:	f005 fad1 	bl	800a590 <HAL_TIM_Base_Init>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004ff4:	f7ff fa7c 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20005be0 	.word	0x20005be0
 8005000:	40001c00 	.word	0x40001c00

08005004 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
 8005018:	615a      	str	r2, [r3, #20]
 800501a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800501c:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <MX_TIM14_Init+0x94>)
 800501e:	4a1f      	ldr	r2, [pc, #124]	; (800509c <MX_TIM14_Init+0x98>)
 8005020:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <MX_TIM14_Init+0x94>)
 8005024:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005028:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <MX_TIM14_Init+0x94>)
 800502c:	2200      	movs	r2, #0
 800502e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <MX_TIM14_Init+0x94>)
 8005032:	2263      	movs	r2, #99	; 0x63
 8005034:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <MX_TIM14_Init+0x94>)
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800503c:	4b16      	ldr	r3, [pc, #88]	; (8005098 <MX_TIM14_Init+0x94>)
 800503e:	2200      	movs	r2, #0
 8005040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005042:	4815      	ldr	r0, [pc, #84]	; (8005098 <MX_TIM14_Init+0x94>)
 8005044:	f005 faa4 	bl	800a590 <HAL_TIM_Base_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800504e:	f7ff fa4f 	bl	80044f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005052:	4811      	ldr	r0, [pc, #68]	; (8005098 <MX_TIM14_Init+0x94>)
 8005054:	f005 fb8b 	bl	800a76e <HAL_TIM_PWM_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800505e:	f7ff fa47 	bl	80044f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005062:	2360      	movs	r3, #96	; 0x60
 8005064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	2200      	movs	r2, #0
 8005076:	4619      	mov	r1, r3
 8005078:	4807      	ldr	r0, [pc, #28]	; (8005098 <MX_TIM14_Init+0x94>)
 800507a:	f005 fda1 	bl	800abc0 <HAL_TIM_PWM_ConfigChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005084:	f7ff fa34 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005088:	4803      	ldr	r0, [pc, #12]	; (8005098 <MX_TIM14_Init+0x94>)
 800508a:	f000 f8a9 	bl	80051e0 <HAL_TIM_MspPostInit>

}
 800508e:	bf00      	nop
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20005c28 	.word	0x20005c28
 800509c:	40002000 	.word	0x40002000

080050a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_TIM_Base_MspInit+0x128>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d11e      	bne.n	80050f0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	4b45      	ldr	r3, [pc, #276]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	4a44      	ldr	r2, [pc, #272]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6453      	str	r3, [r2, #68]	; 0x44
 80050c2:	4b42      	ldr	r3, [pc, #264]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050ce:	2200      	movs	r2, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	2019      	movs	r0, #25
 80050d4:	f001 fd15 	bl	8006b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050d8:	2019      	movs	r0, #25
 80050da:	f001 fd2e 	bl	8006b3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	201a      	movs	r0, #26
 80050e4:	f001 fd0d 	bl	8006b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80050e8:	201a      	movs	r0, #26
 80050ea:	f001 fd26 	bl	8006b3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80050ee:	e066      	b.n	80051be <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a36      	ldr	r2, [pc, #216]	; (80051d0 <HAL_TIM_Base_MspInit+0x130>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d116      	bne.n	8005128 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	4b33      	ldr	r3, [pc, #204]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005108:	6453      	str	r3, [r2, #68]	; 0x44
 800510a:	4b30      	ldr	r3, [pc, #192]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	2100      	movs	r1, #0
 800511a:	2019      	movs	r0, #25
 800511c:	f001 fcf1 	bl	8006b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005120:	2019      	movs	r0, #25
 8005122:	f001 fd0a 	bl	8006b3a <HAL_NVIC_EnableIRQ>
}
 8005126:	e04a      	b.n	80051be <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a29      	ldr	r2, [pc, #164]	; (80051d4 <HAL_TIM_Base_MspInit+0x134>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d116      	bne.n	8005160 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6453      	str	r3, [r2, #68]	; 0x44
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800514e:	2200      	movs	r2, #0
 8005150:	2100      	movs	r1, #0
 8005152:	201a      	movs	r0, #26
 8005154:	f001 fcd5 	bl	8006b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005158:	201a      	movs	r0, #26
 800515a:	f001 fcee 	bl	8006b3a <HAL_NVIC_EnableIRQ>
}
 800515e:	e02e      	b.n	80051be <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <HAL_TIM_Base_MspInit+0x138>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d116      	bne.n	8005198 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	202c      	movs	r0, #44	; 0x2c
 800518c:	f001 fcb9 	bl	8006b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005190:	202c      	movs	r0, #44	; 0x2c
 8005192:	f001 fcd2 	bl	8006b3a <HAL_NVIC_EnableIRQ>
}
 8005196:	e012      	b.n	80051be <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <HAL_TIM_Base_MspInit+0x13c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10d      	bne.n	80051be <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80051ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b0:	6413      	str	r3, [r2, #64]	; 0x40
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_TIM_Base_MspInit+0x12c>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	bf00      	nop
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40001c00 	.word	0x40001c00
 80051dc:	40002000 	.word	0x40002000

080051e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_TIM_MspPostInit+0xb4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d11f      	bne.n	8005242 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a23      	ldr	r2, [pc, #140]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800521e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005230:	2301      	movs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005234:	f107 0314 	add.w	r3, r7, #20
 8005238:	4619      	mov	r1, r3
 800523a:	4818      	ldr	r0, [pc, #96]	; (800529c <HAL_TIM_MspPostInit+0xbc>)
 800523c:	f001 fd1e 	bl	8006c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005240:	e023      	b.n	800528a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_TIM_MspPostInit+0xc0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d11e      	bne.n	800528a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 8005256:	f043 0320 	orr.w	r3, r3, #32
 800525a:	6313      	str	r3, [r2, #48]	; 0x30
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <HAL_TIM_MspPostInit+0xb8>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800526c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526e:	2302      	movs	r3, #2
 8005270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800527a:	2309      	movs	r3, #9
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4619      	mov	r1, r3
 8005284:	4807      	ldr	r0, [pc, #28]	; (80052a4 <HAL_TIM_MspPostInit+0xc4>)
 8005286:	f001 fcf9 	bl	8006c7c <HAL_GPIO_Init>
}
 800528a:	bf00      	nop
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40023800 	.word	0x40023800
 800529c:	40021000 	.word	0x40021000
 80052a0:	40002000 	.word	0x40002000
 80052a4:	40021400 	.word	0x40021400

080052a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <MX_USART3_UART_Init+0x50>)
 80052b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052ce:	220c      	movs	r2, #12
 80052d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052da:	2200      	movs	r2, #0
 80052dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80052de:	4805      	ldr	r0, [pc, #20]	; (80052f4 <MX_USART3_UART_Init+0x4c>)
 80052e0:	f006 fa12 	bl	800b708 <HAL_UART_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80052ea:	f7ff f901 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20005c70 	.word	0x20005c70
 80052f8:	40004800 	.word	0x40004800

080052fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005300:	4b11      	ldr	r3, [pc, #68]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <MX_USART6_UART_Init+0x50>)
 8005304:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800530c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005322:	220c      	movs	r2, #12
 8005324:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005326:	4b08      	ldr	r3, [pc, #32]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005328:	2200      	movs	r2, #0
 800532a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 800532e:	2200      	movs	r2, #0
 8005330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005332:	4805      	ldr	r0, [pc, #20]	; (8005348 <MX_USART6_UART_Init+0x4c>)
 8005334:	f006 f9e8 	bl	800b708 <HAL_UART_Init>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800533e:	f7ff f8d7 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005342:	bf00      	nop
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20005cb4 	.word	0x20005cb4
 800534c:	40011400 	.word	0x40011400

08005350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 031c 	add.w	r3, r7, #28
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a32      	ldr	r2, [pc, #200]	; (8005438 <HAL_UART_MspInit+0xe8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d12d      	bne.n	80053ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	4b31      	ldr	r3, [pc, #196]	; (800543c <HAL_UART_MspInit+0xec>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	4a30      	ldr	r2, [pc, #192]	; (800543c <HAL_UART_MspInit+0xec>)
 800537c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005380:	6413      	str	r3, [r2, #64]	; 0x40
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_UART_MspInit+0xec>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <HAL_UART_MspInit+0xec>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	4a29      	ldr	r2, [pc, #164]	; (800543c <HAL_UART_MspInit+0xec>)
 8005398:	f043 0308 	orr.w	r3, r3, #8
 800539c:	6313      	str	r3, [r2, #48]	; 0x30
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <HAL_UART_MspInit+0xec>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80053aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b0:	2302      	movs	r3, #2
 80053b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b8:	2303      	movs	r3, #3
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053bc:	2307      	movs	r3, #7
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053c0:	f107 031c 	add.w	r3, r7, #28
 80053c4:	4619      	mov	r1, r3
 80053c6:	481e      	ldr	r0, [pc, #120]	; (8005440 <HAL_UART_MspInit+0xf0>)
 80053c8:	f001 fc58 	bl	8006c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80053cc:	e030      	b.n	8005430 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_UART_MspInit+0xf4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d12b      	bne.n	8005430 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_UART_MspInit+0xec>)
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	4a16      	ldr	r2, [pc, #88]	; (800543c <HAL_UART_MspInit+0xec>)
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6453      	str	r3, [r2, #68]	; 0x44
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_UART_MspInit+0xec>)
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	4b10      	ldr	r3, [pc, #64]	; (800543c <HAL_UART_MspInit+0xec>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	4a0f      	ldr	r2, [pc, #60]	; (800543c <HAL_UART_MspInit+0xec>)
 80053fe:	f043 0304 	orr.w	r3, r3, #4
 8005402:	6313      	str	r3, [r2, #48]	; 0x30
 8005404:	4b0d      	ldr	r3, [pc, #52]	; (800543c <HAL_UART_MspInit+0xec>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005410:	23c0      	movs	r3, #192	; 0xc0
 8005412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005414:	2302      	movs	r3, #2
 8005416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800541c:	2303      	movs	r3, #3
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005420:	2308      	movs	r3, #8
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005424:	f107 031c 	add.w	r3, r7, #28
 8005428:	4619      	mov	r1, r3
 800542a:	4807      	ldr	r0, [pc, #28]	; (8005448 <HAL_UART_MspInit+0xf8>)
 800542c:	f001 fc26 	bl	8006c7c <HAL_GPIO_Init>
}
 8005430:	bf00      	nop
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40004800 	.word	0x40004800
 800543c:	40023800 	.word	0x40023800
 8005440:	40020c00 	.word	0x40020c00
 8005444:	40011400 	.word	0x40011400
 8005448:	40020800 	.word	0x40020800

0800544c <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <enableVib+0x18>)
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <enableVib+0x1c>)
 8005456:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000098 	.word	0x20000098
 8005468:	40002000 	.word	0x40002000

0800546c <disableVib>:
void disableVib(void){
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <disableVib+0x14>)
 8005472:	2200      	movs	r2, #0
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40002000 	.word	0x40002000

08005484 <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	460a      	mov	r2, r1
 800548e:	80fb      	strh	r3, [r7, #6]
 8005490:	4613      	mov	r3, r2
 8005492:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 8005494:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <pulseVib+0x2c>)
 8005496:	797b      	ldrb	r3, [r7, #5]
 8005498:	7013      	strb	r3, [r2, #0]
	enableVib();
 800549a:	f7ff ffd7 	bl	800544c <enableVib>
	setTimeout(duration, &disableVib);
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	4904      	ldr	r1, [pc, #16]	; (80054b4 <pulseVib+0x30>)
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fd86 	bl	8003fb4 <setTimeout>
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000098 	.word	0x20000098
 80054b4:	0800546d 	.word	0x0800546d

080054b8 <prevPage>:
}
void triplePressH(void){
	sprintf(&btnStr, "Triple press");
}

void prevPage(void){
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prevPage+0x30>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <prevPage+0x1a>
		currentPage--;
 80054c4:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <prevPage+0x30>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <prevPage+0x30>)
 80054ce:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80054d0:	e005      	b.n	80054de <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <prevPage+0x34>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <prevPage+0x30>)
 80054dc:	701a      	strb	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20005cf8 	.word	0x20005cf8
 80054ec:	20000099 	.word	0x20000099

080054f0 <nextPage>:
void nextPage(void){
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <nextPage+0x34>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <nextPage+0x38>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	3b01      	subs	r3, #1
 8005500:	429a      	cmp	r2, r3
 8005502:	da06      	bge.n	8005512 <nextPage+0x22>
		currentPage++;
 8005504:	4b07      	ldr	r3, [pc, #28]	; (8005524 <nextPage+0x34>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <nextPage+0x34>)
 800550e:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8005510:	e002      	b.n	8005518 <nextPage+0x28>
		currentPage=0;
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <nextPage+0x34>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20005cf8 	.word	0x20005cf8
 8005528:	20000099 	.word	0x20000099

0800552c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
//	btn_B2.onReleaseHandler = &quickReleaseH;
//	btn_B2.onPress = &quickPressH;
//	btn_B2.onRelease = &quickReleaseH;
//	btn_BB.onSinglePressHandler = &showOptions;

	btn_BA.onSinglePressHandler = &nextScreen;
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <setDefaultClbcks+0x28>)
 8005532:	4a09      	ldr	r2, [pc, #36]	; (8005558 <setDefaultClbcks+0x2c>)
 8005534:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <setDefaultClbcks+0x30>)
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <setDefaultClbcks+0x34>)
 800553a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <setDefaultClbcks+0x38>)
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <setDefaultClbcks+0x3c>)
 8005540:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <setDefaultClbcks+0x40>)
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <setDefaultClbcks+0x44>)
 8005546:	611a      	str	r2, [r3, #16]
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20002570 	.word	0x20002570
 8005558:	080028a1 	.word	0x080028a1
 800555c:	20002600 	.word	0x20002600
 8005560:	080028b1 	.word	0x080028b1
 8005564:	200026d8 	.word	0x200026d8
 8005568:	080054b9 	.word	0x080054b9
 800556c:	20002648 	.word	0x20002648
 8005570:	080054f1 	.word	0x080054f1

08005574 <showPage1>:

void showPage1(void){
 8005574:	b580      	push	{r7, lr}
 8005576:	b092      	sub	sp, #72	; 0x48
 8005578:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 800557a:	2300      	movs	r3, #0
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	611a      	str	r2, [r3, #16]
 800558e:	615a      	str	r2, [r3, #20]
 8005590:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8005592:	2300      	movs	r3, #0
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
 80055a4:	615a      	str	r2, [r3, #20]
 80055a6:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <showPage1+0xa0>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b19      	ldr	r3, [pc, #100]	; (8005614 <showPage1+0xa0>)
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4b17      	ldr	r3, [pc, #92]	; (8005614 <showPage1+0xa0>)
 80055b6:	789b      	ldrb	r3, [r3, #2]
 80055b8:	4638      	mov	r0, r7
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	460b      	mov	r3, r1
 80055be:	4916      	ldr	r1, [pc, #88]	; (8005618 <showPage1+0xa4>)
 80055c0:	f00b f960 	bl	8010884 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80055c4:	463a      	mov	r2, r7
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <showPage1+0xa8>)
 80055c8:	210b      	movs	r1, #11
 80055ca:	200e      	movs	r0, #14
 80055cc:	f7fd fc6e 	bl	8002eac <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 80055d0:	2301      	movs	r3, #1
 80055d2:	2227      	movs	r2, #39	; 0x27
 80055d4:	2106      	movs	r1, #6
 80055d6:	2001      	movs	r0, #1
 80055d8:	f7fd fc96 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 80055dc:	2301      	movs	r3, #1
 80055de:	2228      	movs	r2, #40	; 0x28
 80055e0:	2105      	movs	r1, #5
 80055e2:	2002      	movs	r0, #2
 80055e4:	f7fd fc90 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 80055e8:	2301      	movs	r3, #1
 80055ea:	2228      	movs	r2, #40	; 0x28
 80055ec:	2105      	movs	r1, #5
 80055ee:	2003      	movs	r0, #3
 80055f0:	f7fd fc8a 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 80055f4:	2301      	movs	r3, #1
 80055f6:	2227      	movs	r2, #39	; 0x27
 80055f8:	2106      	movs	r1, #6
 80055fa:	2004      	movs	r0, #4
 80055fc:	f7fd fc84 	bl	8002f08 <lcdVLine>


		lcdPutStr(14, 60, btnStr, zekton24font);
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <showPage1+0xa8>)
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <showPage1+0xac>)
 8005604:	213c      	movs	r1, #60	; 0x3c
 8005606:	200e      	movs	r0, #14
 8005608:	f7fd fc50 	bl	8002eac <lcdPutStr>
}
 800560c:	bf00      	nop
 800560e:	3740      	adds	r7, #64	; 0x40
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20005660 	.word	0x20005660
 8005618:	08013d48 	.word	0x08013d48
 800561c:	0801a9fc 	.word	0x0801a9fc
 8005620:	20005cfc 	.word	0x20005cfc

08005624 <showPage2>:
void showPage2(void){
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800562a:	2300      	movs	r3, #0
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
 800563c:	615a      	str	r2, [r3, #20]
 800563e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8005640:	463b      	mov	r3, r7
 8005642:	4913      	ldr	r1, [pc, #76]	; (8005690 <showPage2+0x6c>)
 8005644:	4618      	mov	r0, r3
 8005646:	f00b f91d 	bl	8010884 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800564a:	463a      	mov	r2, r7
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <showPage2+0x70>)
 800564e:	2132      	movs	r1, #50	; 0x32
 8005650:	200e      	movs	r0, #14
 8005652:	f7fd fc2b 	bl	8002eac <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8005656:	2301      	movs	r3, #1
 8005658:	224e      	movs	r2, #78	; 0x4e
 800565a:	212d      	movs	r1, #45	; 0x2d
 800565c:	2001      	movs	r0, #1
 800565e:	f7fd fc53 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005662:	2301      	movs	r3, #1
 8005664:	224f      	movs	r2, #79	; 0x4f
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	2002      	movs	r0, #2
 800566a:	f7fd fc4d 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 800566e:	2301      	movs	r3, #1
 8005670:	224f      	movs	r2, #79	; 0x4f
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	2003      	movs	r0, #3
 8005676:	f7fd fc47 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800567a:	2301      	movs	r3, #1
 800567c:	224e      	movs	r2, #78	; 0x4e
 800567e:	212d      	movs	r1, #45	; 0x2d
 8005680:	2004      	movs	r0, #4
 8005682:	f7fd fc41 	bl	8002f08 <lcdVLine>
}
 8005686:	bf00      	nop
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	08013d58 	.word	0x08013d58
 8005694:	0801a9fc 	.word	0x0801a9fc

08005698 <showPage3>:
void showPage3(void){
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800569e:	2300      	movs	r3, #0
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	611a      	str	r2, [r3, #16]
 80056b0:	615a      	str	r2, [r3, #20]
 80056b2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80056b4:	463b      	mov	r3, r7
 80056b6:	4913      	ldr	r1, [pc, #76]	; (8005704 <showPage3+0x6c>)
 80056b8:	4618      	mov	r0, r3
 80056ba:	f00b f8e3 	bl	8010884 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80056be:	463a      	mov	r2, r7
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <showPage3+0x70>)
 80056c2:	2100      	movs	r1, #0
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7fd fbf1 	bl	8002eac <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80056ca:	2301      	movs	r3, #1
 80056cc:	2275      	movs	r2, #117	; 0x75
 80056ce:	2154      	movs	r1, #84	; 0x54
 80056d0:	2001      	movs	r0, #1
 80056d2:	f7fd fc19 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80056d6:	2301      	movs	r3, #1
 80056d8:	2276      	movs	r2, #118	; 0x76
 80056da:	2153      	movs	r1, #83	; 0x53
 80056dc:	2002      	movs	r0, #2
 80056de:	f7fd fc13 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80056e2:	2301      	movs	r3, #1
 80056e4:	2276      	movs	r2, #118	; 0x76
 80056e6:	2153      	movs	r1, #83	; 0x53
 80056e8:	2003      	movs	r0, #3
 80056ea:	f7fd fc0d 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80056ee:	2301      	movs	r3, #1
 80056f0:	2275      	movs	r2, #117	; 0x75
 80056f2:	2154      	movs	r1, #84	; 0x54
 80056f4:	2004      	movs	r0, #4
 80056f6:	f7fd fc07 	bl	8002f08 <lcdVLine>
}
 80056fa:	bf00      	nop
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	08013d5c 	.word	0x08013d5c
 8005708:	0801a9fc 	.word	0x0801a9fc

0800570c <showPage4>:
void showPage4(void){
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005712:	2300      	movs	r3, #0
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	611a      	str	r2, [r3, #16]
 8005724:	615a      	str	r2, [r3, #20]
 8005726:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8005728:	463b      	mov	r3, r7
 800572a:	4913      	ldr	r1, [pc, #76]	; (8005778 <showPage4+0x6c>)
 800572c:	4618      	mov	r0, r3
 800572e:	f00b f8a9 	bl	8010884 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8005732:	463a      	mov	r2, r7
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <showPage4+0x70>)
 8005736:	2100      	movs	r1, #0
 8005738:	2000      	movs	r0, #0
 800573a:	f7fd fbb7 	bl	8002eac <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 800573e:	2301      	movs	r3, #1
 8005740:	229c      	movs	r2, #156	; 0x9c
 8005742:	217b      	movs	r1, #123	; 0x7b
 8005744:	2001      	movs	r0, #1
 8005746:	f7fd fbdf 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800574a:	2301      	movs	r3, #1
 800574c:	229d      	movs	r2, #157	; 0x9d
 800574e:	217a      	movs	r1, #122	; 0x7a
 8005750:	2002      	movs	r0, #2
 8005752:	f7fd fbd9 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8005756:	2301      	movs	r3, #1
 8005758:	229d      	movs	r2, #157	; 0x9d
 800575a:	217a      	movs	r1, #122	; 0x7a
 800575c:	2003      	movs	r0, #3
 800575e:	f7fd fbd3 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005762:	2301      	movs	r3, #1
 8005764:	229c      	movs	r2, #156	; 0x9c
 8005766:	217b      	movs	r1, #123	; 0x7b
 8005768:	2004      	movs	r0, #4
 800576a:	f7fd fbcd 	bl	8002f08 <lcdVLine>
}
 800576e:	bf00      	nop
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	08013d68 	.word	0x08013d68
 800577c:	0801a9fc 	.word	0x0801a9fc

08005780 <showPage5>:
void showPage5(void){
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005786:	2300      	movs	r3, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	615a      	str	r2, [r3, #20]
 800579a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 800579c:	463b      	mov	r3, r7
 800579e:	4925      	ldr	r1, [pc, #148]	; (8005834 <showPage5+0xb4>)
 80057a0:	4618      	mov	r0, r3
 80057a2:	f00b f86f 	bl	8010884 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 80057a6:	463a      	mov	r2, r7
 80057a8:	4b23      	ldr	r3, [pc, #140]	; (8005838 <showPage5+0xb8>)
 80057aa:	2100      	movs	r1, #0
 80057ac:	200a      	movs	r0, #10
 80057ae:	f7fd fb7d 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80057b2:	463a      	mov	r2, r7
 80057b4:	4b21      	ldr	r3, [pc, #132]	; (800583c <showPage5+0xbc>)
 80057b6:	210f      	movs	r1, #15
 80057b8:	200a      	movs	r0, #10
 80057ba:	f7fd fb77 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80057be:	463a      	mov	r2, r7
 80057c0:	4b1f      	ldr	r3, [pc, #124]	; (8005840 <showPage5+0xc0>)
 80057c2:	2132      	movs	r1, #50	; 0x32
 80057c4:	200a      	movs	r0, #10
 80057c6:	f7fd fb71 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80057ca:	463a      	mov	r2, r7
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <showPage5+0xc4>)
 80057ce:	213c      	movs	r1, #60	; 0x3c
 80057d0:	200a      	movs	r0, #10
 80057d2:	f7fd fb6b 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80057d6:	463a      	mov	r2, r7
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <showPage5+0xc8>)
 80057da:	215a      	movs	r1, #90	; 0x5a
 80057dc:	200a      	movs	r0, #10
 80057de:	f7fd fb65 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 80057e2:	463a      	mov	r2, r7
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <showPage5+0xcc>)
 80057e6:	2178      	movs	r1, #120	; 0x78
 80057e8:	200a      	movs	r0, #10
 80057ea:	f7fd fb5f 	bl	8002eac <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 80057ee:	463a      	mov	r2, r7
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <showPage5+0xd0>)
 80057f2:	2196      	movs	r1, #150	; 0x96
 80057f4:	200a      	movs	r0, #10
 80057f6:	f7fd fb59 	bl	8002eac <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80057fa:	2301      	movs	r3, #1
 80057fc:	22c3      	movs	r2, #195	; 0xc3
 80057fe:	21a2      	movs	r1, #162	; 0xa2
 8005800:	2001      	movs	r0, #1
 8005802:	f7fd fb81 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005806:	2301      	movs	r3, #1
 8005808:	22c4      	movs	r2, #196	; 0xc4
 800580a:	21a1      	movs	r1, #161	; 0xa1
 800580c:	2002      	movs	r0, #2
 800580e:	f7fd fb7b 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005812:	2301      	movs	r3, #1
 8005814:	22c4      	movs	r2, #196	; 0xc4
 8005816:	21a1      	movs	r1, #161	; 0xa1
 8005818:	2003      	movs	r0, #3
 800581a:	f7fd fb75 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800581e:	2301      	movs	r3, #1
 8005820:	22c3      	movs	r2, #195	; 0xc3
 8005822:	21a2      	movs	r1, #162	; 0xa2
 8005824:	2004      	movs	r0, #4
 8005826:	f7fd fb6f 	bl	8002f08 <lcdVLine>
}
 800582a:	bf00      	nop
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	08013d74 	.word	0x08013d74
 8005838:	080188ec 	.word	0x080188ec
 800583c:	08019434 	.word	0x08019434
 8005840:	08015f04 	.word	0x08015f04
 8005844:	08016380 	.word	0x08016380
 8005848:	080173dc 	.word	0x080173dc
 800584c:	08017e64 	.word	0x08017e64
 8005850:	0801a9fc 	.word	0x0801a9fc

08005854 <showPage6>:
void showPage6(void){
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800585a:	2301      	movs	r3, #1
 800585c:	22ea      	movs	r2, #234	; 0xea
 800585e:	21c9      	movs	r1, #201	; 0xc9
 8005860:	2001      	movs	r0, #1
 8005862:	f7fd fb51 	bl	8002f08 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005866:	2301      	movs	r3, #1
 8005868:	22eb      	movs	r2, #235	; 0xeb
 800586a:	21c8      	movs	r1, #200	; 0xc8
 800586c:	2002      	movs	r0, #2
 800586e:	f7fd fb4b 	bl	8002f08 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005872:	2301      	movs	r3, #1
 8005874:	22eb      	movs	r2, #235	; 0xeb
 8005876:	21c8      	movs	r1, #200	; 0xc8
 8005878:	2003      	movs	r0, #3
 800587a:	f7fd fb45 	bl	8002f08 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800587e:	2301      	movs	r3, #1
 8005880:	22ea      	movs	r2, #234	; 0xea
 8005882:	21c9      	movs	r1, #201	; 0xc9
 8005884:	2004      	movs	r0, #4
 8005886:	f7fd fb3f 	bl	8002f08 <lcdVLine>
		lcdRect(0,399,25,80,1);
 800588a:	2301      	movs	r3, #1
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2350      	movs	r3, #80	; 0x50
 8005890:	2219      	movs	r2, #25
 8005892:	f240 118f 	movw	r1, #399	; 0x18f
 8005896:	2000      	movs	r0, #0
 8005898:	f7fe f8d4 	bl	8003a44 <lcdRect>
		lcdRect(0,399,120,180,1);
 800589c:	2301      	movs	r3, #1
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	23b4      	movs	r3, #180	; 0xb4
 80058a2:	2278      	movs	r2, #120	; 0x78
 80058a4:	f240 118f 	movw	r1, #399	; 0x18f
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7fe f8cb 	bl	8003a44 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80058ae:	2301      	movs	r3, #1
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	2303      	movs	r3, #3
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2332      	movs	r3, #50	; 0x32
 80058bc:	220a      	movs	r2, #10
 80058be:	2132      	movs	r1, #50	; 0x32
 80058c0:	200a      	movs	r0, #10
 80058c2:	f7fe fae4 	bl	8003e8e <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80058c6:	2301      	movs	r3, #1
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	2301      	movs	r3, #1
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	2303      	movs	r3, #3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2332      	movs	r3, #50	; 0x32
 80058d4:	220a      	movs	r2, #10
 80058d6:	2164      	movs	r1, #100	; 0x64
 80058d8:	203c      	movs	r0, #60	; 0x3c
 80058da:	f7fe fad8 	bl	8003e8e <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 80058de:	2301      	movs	r3, #1
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	2302      	movs	r3, #2
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	2303      	movs	r3, #3
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2332      	movs	r3, #50	; 0x32
 80058ec:	220a      	movs	r2, #10
 80058ee:	2196      	movs	r1, #150	; 0x96
 80058f0:	206e      	movs	r0, #110	; 0x6e
 80058f2:	f7fe facc 	bl	8003e8e <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 80058f6:	2301      	movs	r3, #1
 80058f8:	9302      	str	r3, [sp, #8]
 80058fa:	2303      	movs	r3, #3
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	2303      	movs	r3, #3
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2332      	movs	r3, #50	; 0x32
 8005904:	220a      	movs	r2, #10
 8005906:	21c8      	movs	r1, #200	; 0xc8
 8005908:	20a0      	movs	r0, #160	; 0xa0
 800590a:	f7fe fac0 	bl	8003e8e <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 800590e:	2301      	movs	r3, #1
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	2304      	movs	r3, #4
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	2303      	movs	r3, #3
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	2332      	movs	r3, #50	; 0x32
 800591c:	220a      	movs	r2, #10
 800591e:	21fa      	movs	r1, #250	; 0xfa
 8005920:	20d2      	movs	r0, #210	; 0xd2
 8005922:	f7fe fab4 	bl	8003e8e <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8005926:	2301      	movs	r3, #1
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	2305      	movs	r3, #5
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	2303      	movs	r3, #3
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2332      	movs	r3, #50	; 0x32
 8005934:	220a      	movs	r2, #10
 8005936:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800593a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800593e:	f7fe faa6 	bl	8003e8e <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005942:	2301      	movs	r3, #1
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	2306      	movs	r3, #6
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	2303      	movs	r3, #3
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	2332      	movs	r3, #50	; 0x32
 8005950:	220a      	movs	r2, #10
 8005952:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005956:	f44f 709b 	mov.w	r0, #310	; 0x136
 800595a:	f7fe fa98 	bl	8003e8e <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 800595e:	2301      	movs	r3, #1
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	2307      	movs	r3, #7
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	2303      	movs	r3, #3
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2364      	movs	r3, #100	; 0x64
 800596c:	223c      	movs	r2, #60	; 0x3c
 800596e:	2132      	movs	r1, #50	; 0x32
 8005970:	200a      	movs	r0, #10
 8005972:	f7fe fa8c 	bl	8003e8e <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8005976:	2301      	movs	r3, #1
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	2308      	movs	r3, #8
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	2303      	movs	r3, #3
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	2364      	movs	r3, #100	; 0x64
 8005984:	223c      	movs	r2, #60	; 0x3c
 8005986:	2164      	movs	r1, #100	; 0x64
 8005988:	203c      	movs	r0, #60	; 0x3c
 800598a:	f7fe fa80 	bl	8003e8e <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 800598e:	2301      	movs	r3, #1
 8005990:	9302      	str	r3, [sp, #8]
 8005992:	2309      	movs	r3, #9
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	2303      	movs	r3, #3
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2364      	movs	r3, #100	; 0x64
 800599c:	223c      	movs	r2, #60	; 0x3c
 800599e:	2196      	movs	r1, #150	; 0x96
 80059a0:	206e      	movs	r0, #110	; 0x6e
 80059a2:	f7fe fa74 	bl	8003e8e <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 80059a6:	2301      	movs	r3, #1
 80059a8:	9302      	str	r3, [sp, #8]
 80059aa:	230a      	movs	r3, #10
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	2303      	movs	r3, #3
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	2364      	movs	r3, #100	; 0x64
 80059b4:	223c      	movs	r2, #60	; 0x3c
 80059b6:	21c8      	movs	r1, #200	; 0xc8
 80059b8:	20a0      	movs	r0, #160	; 0xa0
 80059ba:	f7fe fa68 	bl	8003e8e <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80059be:	2301      	movs	r3, #1
 80059c0:	9302      	str	r3, [sp, #8]
 80059c2:	230b      	movs	r3, #11
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	2303      	movs	r3, #3
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2364      	movs	r3, #100	; 0x64
 80059cc:	223c      	movs	r2, #60	; 0x3c
 80059ce:	21fa      	movs	r1, #250	; 0xfa
 80059d0:	20d2      	movs	r0, #210	; 0xd2
 80059d2:	f7fe fa5c 	bl	8003e8e <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80059d6:	2301      	movs	r3, #1
 80059d8:	9302      	str	r3, [sp, #8]
 80059da:	230c      	movs	r3, #12
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	2303      	movs	r3, #3
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	2364      	movs	r3, #100	; 0x64
 80059e4:	223c      	movs	r2, #60	; 0x3c
 80059e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80059ea:	f44f 7082 	mov.w	r0, #260	; 0x104
 80059ee:	f7fe fa4e 	bl	8003e8e <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 80059f2:	2301      	movs	r3, #1
 80059f4:	9302      	str	r3, [sp, #8]
 80059f6:	230d      	movs	r3, #13
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	2303      	movs	r3, #3
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2364      	movs	r3, #100	; 0x64
 8005a00:	223c      	movs	r2, #60	; 0x3c
 8005a02:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005a06:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005a0a:	f7fe fa40 	bl	8003e8e <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9302      	str	r3, [sp, #8]
 8005a12:	230e      	movs	r3, #14
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	2303      	movs	r3, #3
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	2396      	movs	r3, #150	; 0x96
 8005a1c:	226e      	movs	r2, #110	; 0x6e
 8005a1e:	2132      	movs	r1, #50	; 0x32
 8005a20:	200a      	movs	r0, #10
 8005a22:	f7fe fa34 	bl	8003e8e <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8005a26:	2301      	movs	r3, #1
 8005a28:	9302      	str	r3, [sp, #8]
 8005a2a:	230f      	movs	r3, #15
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	2303      	movs	r3, #3
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	2396      	movs	r3, #150	; 0x96
 8005a34:	226e      	movs	r2, #110	; 0x6e
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	203c      	movs	r0, #60	; 0x3c
 8005a3a:	f7fe fa28 	bl	8003e8e <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8005a3e:	2301      	movs	r3, #1
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	2310      	movs	r3, #16
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	2303      	movs	r3, #3
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2396      	movs	r3, #150	; 0x96
 8005a4c:	226e      	movs	r2, #110	; 0x6e
 8005a4e:	2196      	movs	r1, #150	; 0x96
 8005a50:	206e      	movs	r0, #110	; 0x6e
 8005a52:	f7fe fa1c 	bl	8003e8e <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8005a56:	2301      	movs	r3, #1
 8005a58:	9302      	str	r3, [sp, #8]
 8005a5a:	2311      	movs	r3, #17
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2303      	movs	r3, #3
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2396      	movs	r3, #150	; 0x96
 8005a64:	226e      	movs	r2, #110	; 0x6e
 8005a66:	21c8      	movs	r1, #200	; 0xc8
 8005a68:	20a0      	movs	r0, #160	; 0xa0
 8005a6a:	f7fe fa10 	bl	8003e8e <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	2312      	movs	r3, #18
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	2303      	movs	r3, #3
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2396      	movs	r3, #150	; 0x96
 8005a7c:	226e      	movs	r2, #110	; 0x6e
 8005a7e:	21fa      	movs	r1, #250	; 0xfa
 8005a80:	20d2      	movs	r0, #210	; 0xd2
 8005a82:	f7fe fa04 	bl	8003e8e <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8005a86:	2301      	movs	r3, #1
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	2313      	movs	r3, #19
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	2303      	movs	r3, #3
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2396      	movs	r3, #150	; 0x96
 8005a94:	226e      	movs	r2, #110	; 0x6e
 8005a96:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005a9a:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005a9e:	f7fe f9f6 	bl	8003e8e <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	2314      	movs	r3, #20
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	2303      	movs	r3, #3
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2396      	movs	r3, #150	; 0x96
 8005ab0:	226e      	movs	r2, #110	; 0x6e
 8005ab2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005ab6:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005aba:	f7fe f9e8 	bl	8003e8e <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8005abe:	2304      	movs	r3, #4
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	23c8      	movs	r3, #200	; 0xc8
 8005ac8:	22a0      	movs	r2, #160	; 0xa0
 8005aca:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005ace:	200a      	movs	r0, #10
 8005ad0:	f7fe f9dd 	bl	8003e8e <lcdRect2>
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <showPage>:

void showPage(uint8_t pageNum){
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b05      	cmp	r3, #5
 8005aea:	d821      	bhi.n	8005b30 <showPage+0x54>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <showPage+0x18>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b0d 	.word	0x08005b0d
 8005af8:	08005b13 	.word	0x08005b13
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b1f 	.word	0x08005b1f
 8005b04:	08005b25 	.word	0x08005b25
 8005b08:	08005b2b 	.word	0x08005b2b
	case 0:
		showPage1();
 8005b0c:	f7ff fd32 	bl	8005574 <showPage1>
		break;
 8005b10:	e00e      	b.n	8005b30 <showPage+0x54>
	case 1:
		showPage2();
 8005b12:	f7ff fd87 	bl	8005624 <showPage2>
		break;
 8005b16:	e00b      	b.n	8005b30 <showPage+0x54>
	case 2:
		showPage3();
 8005b18:	f7ff fdbe 	bl	8005698 <showPage3>
		break;
 8005b1c:	e008      	b.n	8005b30 <showPage+0x54>
	case 3:
		showPage4();
 8005b1e:	f7ff fdf5 	bl	800570c <showPage4>
		break;
 8005b22:	e005      	b.n	8005b30 <showPage+0x54>
	case 4:
		showPage5();
 8005b24:	f7ff fe2c 	bl	8005780 <showPage5>
		break;
 8005b28:	e002      	b.n	8005b30 <showPage+0x54>
	case 5:
		showPage6();
 8005b2a:	f7ff fe93 	bl	8005854 <showPage6>
		break;
 8005b2e:	bf00      	nop
	}
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <screentestSetup>:

void screentestSetup(void){
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005b3c:	f7ff fcf6 	bl	800552c <setDefaultClbcks>
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <screentestMain>:

void screentestMain(void){
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <screentestMain+0x30>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff ffb9 	bl	8005adc <showPage>

}
 8005b6a:	bf00      	nop
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20005cf8 	.word	0x20005cf8

08005b78 <switchStwView>:
#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

uint8_t stwSubView = 0;
void switchStwView(void){
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
//	if(stwSubView<3){
//		stwSubView++;
//	} else {
//		stwSubView = 0;
//	}
		stwSubView++;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <switchStwView+0x1c>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <switchStwView+0x1c>)
 8005b86:	701a      	strb	r2, [r3, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20005d1b 	.word	0x20005d1b

08005b98 <startStopwatch>:

void startStopwatch(){
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
	stwStart();
 8005b9c:	f7fe feb8 	bl	8004910 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <startStopwatch+0x18>)
 8005ba2:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <startStopwatch+0x1c>)
 8005ba4:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <startStopwatch+0x20>)
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <startStopwatch+0x24>)
 8005baa:	611a      	str	r2, [r3, #16]
}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	200025b8 	.word	0x200025b8
 8005bb4:	08005bc1 	.word	0x08005bc1
 8005bb8:	20002690 	.word	0x20002690
 8005bbc:	08005bf5 	.word	0x08005bf5

08005bc0 <stopStopwatch>:
void stopStopwatch(){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
	stwStop();
 8005bc4:	f7fe fec4 	bl	8004950 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <stopStopwatch+0x18>)
 8005bca:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <stopStopwatch+0x1c>)
 8005bcc:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005bce:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <stopStopwatch+0x20>)
 8005bd0:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <stopStopwatch+0x24>)
 8005bd2:	611a      	str	r2, [r3, #16]
}
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200025b8 	.word	0x200025b8
 8005bdc:	08005b99 	.word	0x08005b99
 8005be0:	20002690 	.word	0x20002690
 8005be4:	08005be9 	.word	0x08005be9

08005be8 <resetStopwatch>:
void resetStopwatch(){
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
	stwClear();
 8005bec:	f7fe febe 	bl	800496c <stwClear>
//	stwT.clear();
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <saveStopwatch>:
void saveStopwatch(){
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
	stwSave();
 8005bf8:	f7fe ff2c 	bl	8004a54 <stwSave>
}
 8005bfc:	bf00      	nop
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <setDefaultClbcks+0x48>)
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <setDefaultClbcks+0x4c>)
 8005c08:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <setDefaultClbcks+0x50>)
 8005c0c:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <setDefaultClbcks+0x54>)
 8005c0e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <setDefaultClbcks+0x58>)
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <setDefaultClbcks+0x5c>)
 8005c14:	611a      	str	r2, [r3, #16]

	btn_B1.onSinglePressHandler = &switchStwView;
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <setDefaultClbcks+0x60>)
 8005c18:	4a12      	ldr	r2, [pc, #72]	; (8005c64 <setDefaultClbcks+0x64>)
 8005c1a:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005c1c:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <setDefaultClbcks+0x68>)
 8005c1e:	791b      	ldrb	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005c24:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <setDefaultClbcks+0x6c>)
 8005c26:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <setDefaultClbcks+0x70>)
 8005c28:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <setDefaultClbcks+0x74>)
 8005c2c:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <setDefaultClbcks+0x78>)
 8005c2e:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005c30:	e005      	b.n	8005c3e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005c32:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <setDefaultClbcks+0x6c>)
 8005c34:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <setDefaultClbcks+0x7c>)
 8005c36:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <setDefaultClbcks+0x74>)
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <setDefaultClbcks+0x80>)
 8005c3c:	611a      	str	r2, [r3, #16]
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	200026d8 	.word	0x200026d8
 8005c4c:	080028c1 	.word	0x080028c1
 8005c50:	20002570 	.word	0x20002570
 8005c54:	080028a1 	.word	0x080028a1
 8005c58:	20002600 	.word	0x20002600
 8005c5c:	080028b1 	.word	0x080028b1
 8005c60:	20002648 	.word	0x20002648
 8005c64:	08005b79 	.word	0x08005b79
 8005c68:	20000088 	.word	0x20000088
 8005c6c:	200025b8 	.word	0x200025b8
 8005c70:	08005bc1 	.word	0x08005bc1
 8005c74:	20002690 	.word	0x20002690
 8005c78:	08005bf5 	.word	0x08005bf5
 8005c7c:	08005b99 	.word	0x08005b99
 8005c80:	08005be9 	.word	0x08005be9

08005c84 <stwSetup>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};
struct stopwatch_t stw_lap_val = {0, 0, 0, 0};

void stwSetup(void){
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005c88:	f7ff ffba 	bl	8005c00 <setDefaultClbcks>
}
 8005c8c:	bf00      	nop
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <stwMain>:
// position of the top of the stopwatch total value
uint8_t stw_time_y_pos = 40;

// functions to execute when menu item entered
void stwMain(void){
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b091      	sub	sp, #68	; 0x44
 8005c94:	af04      	add	r7, sp, #16
//	lcdPutIcon(2, 200, accept_icon);
//	lcdPutIcon(370, 106, play_pause_icon);
//	lcdPutIcon(2, 106, cancel_icon);

	// statusbar
	lcdPutIcon(320, 5, full_battery_icon);
 8005c96:	4aa4      	ldr	r2, [pc, #656]	; (8005f28 <stwMain+0x298>)
 8005c98:	2105      	movs	r1, #5
 8005c9a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005c9e:	f7fd f83d 	bl	8002d1c <lcdPutIcon>
	char timeString[6] = {0};
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sprintf(&timeString, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005caa:	4ba0      	ldr	r3, [pc, #640]	; (8005f2c <stwMain+0x29c>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4b9e      	ldr	r3, [pc, #632]	; (8005f2c <stwMain+0x29c>)
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005cb8:	499d      	ldr	r1, [pc, #628]	; (8005f30 <stwMain+0x2a0>)
 8005cba:	f00a fde3 	bl	8010884 <siprintf>
	lcdPutStr(400 - 5 - (*font_12_zekton.font_Width) * strlen(timeString), 5, timeString, font_12_zekton);
 8005cbe:	2309      	movs	r3, #9
 8005cc0:	b29c      	uxth	r4, r3
 8005cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fa fa92 	bl	80001f0 <strlen>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	fb14 f303 	smulbb	r3, r4, r3
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8005cda:	3301      	adds	r3, #1
 8005cdc:	b298      	uxth	r0, r3
 8005cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ce2:	4b94      	ldr	r3, [pc, #592]	; (8005f34 <stwMain+0x2a4>)
 8005ce4:	2105      	movs	r1, #5
 8005ce6:	f7fd f8e1 	bl	8002eac <lcdPutStr>
	char tempStr2[30] = {0};
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	f107 030c 	add.w	r3, r7, #12
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	615a      	str	r2, [r3, #20]
 8005d00:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "Stopwatch");
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	498c      	ldr	r1, [pc, #560]	; (8005f38 <stwMain+0x2a8>)
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f00a fdbb 	bl	8010884 <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 8005d0e:	f107 0208 	add.w	r2, r7, #8
 8005d12:	4b88      	ldr	r3, [pc, #544]	; (8005f34 <stwMain+0x2a4>)
 8005d14:	2105      	movs	r1, #5
 8005d16:	2005      	movs	r0, #5
 8005d18:	f7fd f8c8 	bl	8002eac <lcdPutStr>

	// update stopwatch value
	getStw(&stw_val, &stwS);
 8005d1c:	4987      	ldr	r1, [pc, #540]	; (8005f3c <stwMain+0x2ac>)
 8005d1e:	4888      	ldr	r0, [pc, #544]	; (8005f40 <stwMain+0x2b0>)
 8005d20:	f7fe fe40 	bl	80049a4 <getStw>

	// main STW view
	//show hours if exist
	if(stw_val.hours != 0){
 8005d24:	4b86      	ldr	r3, [pc, #536]	; (8005f40 <stwMain+0x2b0>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d025      	beq.n	8005d78 <stwMain+0xe8>
//	if(1){
		sprintf(&tempStr2, "%02dh %02d'%02d\"", stw_val.hours, stw_val.min, stw_val.sec);
 8005d2c:	4b84      	ldr	r3, [pc, #528]	; (8005f40 <stwMain+0x2b0>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	4b83      	ldr	r3, [pc, #524]	; (8005f40 <stwMain+0x2b0>)
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <stwMain+0x2b0>)
 8005d3a:	789b      	ldrb	r3, [r3, #2]
 8005d3c:	f107 0008 	add.w	r0, r7, #8
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	460b      	mov	r3, r1
 8005d44:	497f      	ldr	r1, [pc, #508]	; (8005f44 <stwMain+0x2b4>)
 8005d46:	f00a fd9d 	bl	8010884 <siprintf>
		lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005d4a:	2322      	movs	r3, #34	; 0x22
 8005d4c:	b29c      	uxth	r4, r3
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa fa4c 	bl	80001f0 <strlen>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	fb14 f303 	smulbb	r3, r4, r3
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005d66:	b298      	uxth	r0, r3
 8005d68:	4b77      	ldr	r3, [pc, #476]	; (8005f48 <stwMain+0x2b8>)
 8005d6a:	7819      	ldrb	r1, [r3, #0]
 8005d6c:	f107 0208 	add.w	r2, r7, #8
 8005d70:	4b76      	ldr	r3, [pc, #472]	; (8005f4c <stwMain+0x2bc>)
 8005d72:	f7fd f89b 	bl	8002eac <lcdPutStr>
 8005d76:	e025      	b.n	8005dc4 <stwMain+0x134>
//	} else if(stw_val.min != 0){
	} else {
		sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8005d78:	4b71      	ldr	r3, [pc, #452]	; (8005f40 <stwMain+0x2b0>)
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b70      	ldr	r3, [pc, #448]	; (8005f40 <stwMain+0x2b0>)
 8005d80:	789b      	ldrb	r3, [r3, #2]
 8005d82:	4619      	mov	r1, r3
 8005d84:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <stwMain+0x2b0>)
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	f107 0008 	add.w	r0, r7, #8
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	496f      	ldr	r1, [pc, #444]	; (8005f50 <stwMain+0x2c0>)
 8005d92:	f00a fd77 	bl	8010884 <siprintf>
		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005d96:	2322      	movs	r3, #34	; 0x22
 8005d98:	b29c      	uxth	r4, r3
 8005d9a:	f107 0308 	add.w	r3, r7, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fa26 	bl	80001f0 <strlen>
 8005da4:	4603      	mov	r3, r0
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	fb14 f303 	smulbb	r3, r4, r3
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8005db2:	3301      	adds	r3, #1
 8005db4:	b298      	uxth	r0, r3
 8005db6:	4b64      	ldr	r3, [pc, #400]	; (8005f48 <stwMain+0x2b8>)
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	f107 0208 	add.w	r2, r7, #8
 8005dbe:	4b63      	ldr	r3, [pc, #396]	; (8005f4c <stwMain+0x2bc>)
 8005dc0:	f7fd f874 	bl	8002eac <lcdPutStr>
//		sprintf(&tempStr2, "%02d.%02d\"", stw_val.sec, stw_val.csec);
//		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
//	}

	stw_counter_t lapTimeCnt;
	switch(stwSubView){
 8005dc4:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <stwMain+0x2c4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <stwMain+0x144>
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	f000 80a7 	beq.w	8005f20 <stwMain+0x290>
 8005dd2:	e117      	b.n	8006004 <stwMain+0x374>
//		case 0:
//			sprintf(&tempStr2, "Stopwatch ready", getLapNum());
//			lcdPutStr(55, 100, tempStr2, zekton24font);
//			break;
		case 0:
			if(getLapNum()>0){
 8005dd4:	f7fe fd90 	bl	80048f8 <getLapNum>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dd3e      	ble.n	8005e5c <stwMain+0x1cc>
				sprintf(&tempStr2, "LAP %d", getLapNum());
 8005dde:	f7fe fd8b 	bl	80048f8 <getLapNum>
 8005de2:	4602      	mov	r2, r0
 8005de4:	f107 0308 	add.w	r3, r7, #8
 8005de8:	495b      	ldr	r1, [pc, #364]	; (8005f58 <stwMain+0x2c8>)
 8005dea:	4618      	mov	r0, r3
 8005dec:	f00a fd4a 	bl	8010884 <siprintf>
				lcdPutStr(250, 112, tempStr2, font_12_zekton);
 8005df0:	f107 0208 	add.w	r2, r7, #8
 8005df4:	4b4f      	ldr	r3, [pc, #316]	; (8005f34 <stwMain+0x2a4>)
 8005df6:	2170      	movs	r1, #112	; 0x70
 8005df8:	20fa      	movs	r0, #250	; 0xfa
 8005dfa:	f7fd f857 	bl	8002eac <lcdPutStr>
				counterDiff(&lapTimeCnt, stwS.cnt, &stw_splits[getLapNum()-1]);
 8005dfe:	4b4f      	ldr	r3, [pc, #316]	; (8005f3c <stwMain+0x2ac>)
 8005e00:	681c      	ldr	r4, [r3, #0]
 8005e02:	f7fe fd79 	bl	80048f8 <getLapNum>
 8005e06:	4603      	mov	r3, r0
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4a53      	ldr	r2, [pc, #332]	; (8005f5c <stwMain+0x2cc>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	463b      	mov	r3, r7
 8005e12:	4621      	mov	r1, r4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fe5f 	bl	8004ad8 <counterDiff>
				counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4850      	ldr	r0, [pc, #320]	; (8005f60 <stwMain+0x2d0>)
 8005e20:	f7fe fe92 	bl	8004b48 <counterToStopwatch>
				stwprintf(&tempStr2, &stw_lap_val);
 8005e24:	f107 0308 	add.w	r3, r7, #8
 8005e28:	494d      	ldr	r1, [pc, #308]	; (8005f60 <stwMain+0x2d0>)
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fee0 	bl	8004bf0 <stwprintf>
				lcdPutStr(60, 100, tempStr2, zekton24font);
 8005e30:	f107 0208 	add.w	r2, r7, #8
 8005e34:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <stwMain+0x2d4>)
 8005e36:	2164      	movs	r1, #100	; 0x64
 8005e38:	203c      	movs	r0, #60	; 0x3c
 8005e3a:	f7fd f837 	bl	8002eac <lcdPutStr>
				lcdRoundedRect2(240, 305, 110, 124, 2, LCD_RECT_PATTERN_FILL, 0, 2);
 8005e3e:	2302      	movs	r3, #2
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	2300      	movs	r3, #0
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	2301      	movs	r3, #1
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	237c      	movs	r3, #124	; 0x7c
 8005e50:	226e      	movs	r2, #110	; 0x6e
 8005e52:	f240 1131 	movw	r1, #305	; 0x131
 8005e56:	20f0      	movs	r0, #240	; 0xf0
 8005e58:	f7fd fe19 	bl	8003a8e <lcdRoundedRect2>
			}
			for(uint8_t i = 1; i<=4; i++){
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e62:	e058      	b.n	8005f16 <stwMain+0x286>
				if(getLapNum()>i){
 8005e64:	f7fe fd48 	bl	80048f8 <getLapNum>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	dd4c      	ble.n	8005f0c <stwMain+0x27c>
					sprintf(&tempStr2, "LAP %d", getLapNum()-i);
 8005e72:	f7fe fd41 	bl	80048f8 <getLapNum>
 8005e76:	4602      	mov	r2, r0
 8005e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4935      	ldr	r1, [pc, #212]	; (8005f58 <stwMain+0x2c8>)
 8005e84:	4618      	mov	r0, r3
 8005e86:	f00a fcfd 	bl	8010884 <siprintf>
					lcdPutStr(250, 112+i*28, tempStr2, font_12_zekton);
 8005e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e8e:	461a      	mov	r2, r3
 8005e90:	00d2      	lsls	r2, r2, #3
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3370      	adds	r3, #112	; 0x70
 8005e9a:	b2d9      	uxtb	r1, r3
 8005e9c:	f107 0208 	add.w	r2, r7, #8
 8005ea0:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <stwMain+0x2a4>)
 8005ea2:	20fa      	movs	r0, #250	; 0xfa
 8005ea4:	f7fd f802 	bl	8002eac <lcdPutStr>
					counterDiff(&lapTimeCnt, &stw_splits[getLapNum()-i], &stw_splits[getLapNum()-1-i]);
 8005ea8:	f7fe fd26 	bl	80048f8 <getLapNum>
 8005eac:	4602      	mov	r2, r0
 8005eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <stwMain+0x2cc>)
 8005eb8:	189c      	adds	r4, r3, r2
 8005eba:	f7fe fd1d 	bl	80048f8 <getLapNum>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	1e5a      	subs	r2, r3, #1
 8005ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <stwMain+0x2cc>)
 8005ecc:	441a      	add	r2, r3
 8005ece:	463b      	mov	r3, r7
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe fe00 	bl	8004ad8 <counterDiff>
					counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005ed8:	463b      	mov	r3, r7
 8005eda:	4619      	mov	r1, r3
 8005edc:	4820      	ldr	r0, [pc, #128]	; (8005f60 <stwMain+0x2d0>)
 8005ede:	f7fe fe33 	bl	8004b48 <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	491e      	ldr	r1, [pc, #120]	; (8005f60 <stwMain+0x2d0>)
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fe81 	bl	8004bf0 <stwprintf>
					lcdPutStr(60, 100+28*i, tempStr2, zekton24font);
 8005eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	00d2      	lsls	r2, r2, #3
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3364      	adds	r3, #100	; 0x64
 8005efe:	b2d9      	uxtb	r1, r3
 8005f00:	f107 0208 	add.w	r2, r7, #8
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <stwMain+0x2d4>)
 8005f06:	203c      	movs	r0, #60	; 0x3c
 8005f08:	f7fc ffd0 	bl	8002eac <lcdPutStr>
			for(uint8_t i = 1; i<=4; i++){
 8005f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f10:	3301      	adds	r3, #1
 8005f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d9a2      	bls.n	8005e64 <stwMain+0x1d4>
				}
			}
			break;
 8005f1e:	e075      	b.n	800600c <stwMain+0x37c>
		case 1:
			// split/lap table
			for(uint8_t i = 1; i<=5; i++){
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005f26:	e068      	b.n	8005ffa <stwMain+0x36a>
 8005f28:	0801c864 	.word	0x0801c864
 8005f2c:	20005660 	.word	0x20005660
 8005f30:	08013e3c 	.word	0x08013e3c
 8005f34:	0801c89c 	.word	0x0801c89c
 8005f38:	08013e48 	.word	0x08013e48
 8005f3c:	20000088 	.word	0x20000088
 8005f40:	20005d1c 	.word	0x20005d1c
 8005f44:	08013e54 	.word	0x08013e54
 8005f48:	2000009a 	.word	0x2000009a
 8005f4c:	0801f18c 	.word	0x0801f18c
 8005f50:	08013e68 	.word	0x08013e68
 8005f54:	20005d1b 	.word	0x20005d1b
 8005f58:	08013e78 	.word	0x08013e78
 8005f5c:	20005a14 	.word	0x20005a14
 8005f60:	20005d20 	.word	0x20005d20
 8005f64:	0801d324 	.word	0x0801d324
				if(getLapNum()>i){
 8005f68:	f7fe fcc6 	bl	80048f8 <getLapNum>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f72:	429a      	cmp	r2, r3
 8005f74:	dd3c      	ble.n	8005ff0 <stwMain+0x360>
					counterToStopwatch(&stw_lap_val, &stw_splits[getLapNum()-i]);
 8005f76:	f7fe fcbf 	bl	80048f8 <getLapNum>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4a23      	ldr	r2, [pc, #140]	; (8006014 <stwMain+0x384>)
 8005f86:	4413      	add	r3, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4823      	ldr	r0, [pc, #140]	; (8006018 <stwMain+0x388>)
 8005f8c:	f7fe fddc 	bl	8004b48 <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	4920      	ldr	r1, [pc, #128]	; (8006018 <stwMain+0x388>)
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fe2a 	bl	8004bf0 <stwprintf>
					lcdPutStr(60, 100+28*(i-1), tempStr2, zekton24font);
 8005f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	00d2      	lsls	r2, r2, #3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	3348      	adds	r3, #72	; 0x48
 8005fac:	b2d9      	uxtb	r1, r3
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <stwMain+0x38c>)
 8005fb4:	203c      	movs	r0, #60	; 0x3c
 8005fb6:	f7fc ff79 	bl	8002eac <lcdPutStr>

					sprintf(&tempStr2, "SPLIT %d", getLapNum()-i);
 8005fba:	f7fe fc9d 	bl	80048f8 <getLapNum>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4915      	ldr	r1, [pc, #84]	; (8006020 <stwMain+0x390>)
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f00a fc59 	bl	8010884 <siprintf>
					lcdPutStr(250, 112+(i-1)*28, tempStr2, font_12_zekton);
 8005fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	00d2      	lsls	r2, r2, #3
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	3354      	adds	r3, #84	; 0x54
 8005fe2:	b2d9      	uxtb	r1, r3
 8005fe4:	f107 0208 	add.w	r2, r7, #8
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <stwMain+0x394>)
 8005fea:	20fa      	movs	r0, #250	; 0xfa
 8005fec:	f7fc ff5e 	bl	8002eac <lcdPutStr>
			for(uint8_t i = 1; i<=5; i++){
 8005ff0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005ffa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d9b2      	bls.n	8005f68 <stwMain+0x2d8>

				}
			}
			break;
 8006002:	e003      	b.n	800600c <stwMain+0x37c>
		default:
			stwSubView = 0;
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <stwMain+0x398>)
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]





}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	3734      	adds	r7, #52	; 0x34
 8006010:	46bd      	mov	sp, r7
 8006012:	bd90      	pop	{r4, r7, pc}
 8006014:	20005a14 	.word	0x20005a14
 8006018:	20005d20 	.word	0x20005d20
 800601c:	0801d324 	.word	0x0801d324
 8006020:	08013e80 	.word	0x08013e80
 8006024:	0801c89c 	.word	0x0801c89c
 8006028:	20005d1b 	.word	0x20005d1b

0800602c <add_counter_down>:
uint8_t longPressCount = 0;
uint8_t doublePressCount = 0;
uint8_t releaseCount = 0;
uint8_t holdCyclicCount = 0;

void add_counter_down(void){
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
	        	singlePressCount++;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <add_counter_down+0x1c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <add_counter_down+0x1c>)
 800603a:	701a      	strb	r2, [r3, #0]
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20005d24 	.word	0x20005d24

0800604c <add_counter_short>:
void add_counter_short(void){
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
	        	shortPressCount++;
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <add_counter_short+0x1c>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <add_counter_short+0x1c>)
 800605a:	701a      	strb	r2, [r3, #0]
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20005d25 	.word	0x20005d25

0800606c <add_counter_long>:
void add_counter_long(void){
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	        	longPressCount++;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <add_counter_long+0x1c>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <add_counter_long+0x1c>)
 800607a:	701a      	strb	r2, [r3, #0]
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20005d26 	.word	0x20005d26

0800608c <add_counter_double>:
void add_counter_double(void){
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
	        	doublePressCount++;
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <add_counter_double+0x1c>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <add_counter_double+0x1c>)
 800609a:	701a      	strb	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20005d27 	.word	0x20005d27

080060ac <add_counter_release>:
void add_counter_release(void){
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
	        	releaseCount++;
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <add_counter_release+0x1c>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <add_counter_release+0x1c>)
 80060ba:	701a      	strb	r2, [r3, #0]
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20005d28 	.word	0x20005d28

080060cc <add_counter_cycle>:
void add_counter_cycle(void){
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
	        	holdCyclicCount++;
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <add_counter_cycle+0x1c>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <add_counter_cycle+0x1c>)
 80060da:	701a      	strb	r2, [r3, #0]
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20005d29 	.word	0x20005d29

080060ec <setDefaultClbcks>:


static void setDefaultClbcks(void){
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 80060f0:	4b1a      	ldr	r3, [pc, #104]	; (800615c <setDefaultClbcks+0x70>)
 80060f2:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <setDefaultClbcks+0x74>)
 80060f4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <setDefaultClbcks+0x78>)
 80060f8:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <setDefaultClbcks+0x7c>)
 80060fa:	611a      	str	r2, [r3, #16]

	//new button handlers
	button_set_hold_cycle_time(1, 1000);
 80060fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006100:	2001      	movs	r0, #1
 8006102:	f7fb fd65 	bl	8001bd0 <button_set_hold_cycle_time>
	button_set_long_press_time(1, 500);
 8006106:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800610a:	2001      	movs	r0, #1
 800610c:	f7fb fd44 	bl	8001b98 <button_set_long_press_time>
	button_set_handler(1, BUTTON_EVENT_DOWN, add_counter_down, NULL);
 8006110:	2300      	movs	r3, #0
 8006112:	4a16      	ldr	r2, [pc, #88]	; (800616c <setDefaultClbcks+0x80>)
 8006114:	2100      	movs	r1, #0
 8006116:	2001      	movs	r0, #1
 8006118:	f7fb fd76 	bl	8001c08 <button_set_handler>
	button_set_handler(1, BUTTON_EVENT_SHORT_PRESS, add_counter_short, NULL);
 800611c:	2300      	movs	r3, #0
 800611e:	4a14      	ldr	r2, [pc, #80]	; (8006170 <setDefaultClbcks+0x84>)
 8006120:	2101      	movs	r1, #1
 8006122:	2001      	movs	r0, #1
 8006124:	f7fb fd70 	bl	8001c08 <button_set_handler>
	button_set_handler(1, BUTTON_EVENT_DOUBLE_PRESS, add_counter_double, NULL);
 8006128:	2300      	movs	r3, #0
 800612a:	4a12      	ldr	r2, [pc, #72]	; (8006174 <setDefaultClbcks+0x88>)
 800612c:	2104      	movs	r1, #4
 800612e:	2001      	movs	r0, #1
 8006130:	f7fb fd6a 	bl	8001c08 <button_set_handler>
	button_set_handler(1, BUTTON_EVENT_LONG_PRESS, add_counter_long, NULL);
 8006134:	2300      	movs	r3, #0
 8006136:	4a10      	ldr	r2, [pc, #64]	; (8006178 <setDefaultClbcks+0x8c>)
 8006138:	2103      	movs	r1, #3
 800613a:	2001      	movs	r0, #1
 800613c:	f7fb fd64 	bl	8001c08 <button_set_handler>
	button_set_handler(1, BUTTON_EVENT_RELEASE, add_counter_release, NULL);
 8006140:	2300      	movs	r3, #0
 8006142:	4a0e      	ldr	r2, [pc, #56]	; (800617c <setDefaultClbcks+0x90>)
 8006144:	2102      	movs	r1, #2
 8006146:	2001      	movs	r0, #1
 8006148:	f7fb fd5e 	bl	8001c08 <button_set_handler>
	button_set_handler(1, BUTTON_EVENT_HOLD_CYCLIC, add_counter_cycle, NULL);
 800614c:	2300      	movs	r3, #0
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <setDefaultClbcks+0x94>)
 8006150:	2105      	movs	r1, #5
 8006152:	2001      	movs	r0, #1
 8006154:	f7fb fd58 	bl	8001c08 <button_set_handler>

}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20002570 	.word	0x20002570
 8006160:	080028a1 	.word	0x080028a1
 8006164:	20002600 	.word	0x20002600
 8006168:	080028b1 	.word	0x080028b1
 800616c:	0800602d 	.word	0x0800602d
 8006170:	0800604d 	.word	0x0800604d
 8006174:	0800608d 	.word	0x0800608d
 8006178:	0800606d 	.word	0x0800606d
 800617c:	080060ad 	.word	0x080060ad
 8006180:	080060cd 	.word	0x080060cd

08006184 <faceSetup>:
}
static void setDateAction(void){
	guiApplyView(&dateInputModule);
}

void faceSetup(void){
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006188:	f7ff ffb0 	bl	80060ec <setDefaultClbcks>
}
 800618c:	bf00      	nop
 800618e:	bd80      	pop	{r7, pc}

08006190 <faceMain>:


void faceMain(void){
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b0b9      	sub	sp, #228	; 0xe4
 8006194:	af00      	add	r7, sp, #0

	char tempStr2[30] = {0};
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800619c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
 80061ac:	615a      	str	r2, [r3, #20]
 80061ae:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "short: %d, long: %d", shortPressCount, longPressCount);
 80061b0:	4bad      	ldr	r3, [pc, #692]	; (8006468 <faceMain+0x2d8>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	4bad      	ldr	r3, [pc, #692]	; (800646c <faceMain+0x2dc>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80061be:	49ac      	ldr	r1, [pc, #688]	; (8006470 <faceMain+0x2e0>)
 80061c0:	f00a fb60 	bl	8010884 <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 80061c4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061c8:	4baa      	ldr	r3, [pc, #680]	; (8006474 <faceMain+0x2e4>)
 80061ca:	2105      	movs	r1, #5
 80061cc:	2005      	movs	r0, #5
 80061ce:	f7fc fe6d 	bl	8002eac <lcdPutStr>
	sprintf(&tempStr2, "double: %d, release: %d", doublePressCount, releaseCount);
 80061d2:	4ba9      	ldr	r3, [pc, #676]	; (8006478 <faceMain+0x2e8>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	4ba8      	ldr	r3, [pc, #672]	; (800647c <faceMain+0x2ec>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80061e0:	49a7      	ldr	r1, [pc, #668]	; (8006480 <faceMain+0x2f0>)
 80061e2:	f00a fb4f 	bl	8010884 <siprintf>
	lcdPutStr(5, 20, tempStr2, font_12_zekton);
 80061e6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061ea:	4ba2      	ldr	r3, [pc, #648]	; (8006474 <faceMain+0x2e4>)
 80061ec:	2114      	movs	r1, #20
 80061ee:	2005      	movs	r0, #5
 80061f0:	f7fc fe5c 	bl	8002eac <lcdPutStr>
	sprintf(&tempStr2, "single: %d", singlePressCount);
 80061f4:	4ba3      	ldr	r3, [pc, #652]	; (8006484 <faceMain+0x2f4>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80061fe:	49a2      	ldr	r1, [pc, #648]	; (8006488 <faceMain+0x2f8>)
 8006200:	4618      	mov	r0, r3
 8006202:	f00a fb3f 	bl	8010884 <siprintf>
	lcdPutStr(5, 35, tempStr2, font_12_zekton);
 8006206:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800620a:	4b9a      	ldr	r3, [pc, #616]	; (8006474 <faceMain+0x2e4>)
 800620c:	2123      	movs	r1, #35	; 0x23
 800620e:	2005      	movs	r0, #5
 8006210:	f7fc fe4c 	bl	8002eac <lcdPutStr>
	sprintf(&tempStr2, "total: %d, cyclic: %d", shortPressCount+longPressCount+2*doublePressCount, holdCyclicCount);
 8006214:	4b94      	ldr	r3, [pc, #592]	; (8006468 <faceMain+0x2d8>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	4b94      	ldr	r3, [pc, #592]	; (800646c <faceMain+0x2dc>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	441a      	add	r2, r3
 8006220:	4b95      	ldr	r3, [pc, #596]	; (8006478 <faceMain+0x2e8>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	441a      	add	r2, r3
 8006228:	4b98      	ldr	r3, [pc, #608]	; (800648c <faceMain+0x2fc>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8006230:	4997      	ldr	r1, [pc, #604]	; (8006490 <faceMain+0x300>)
 8006232:	f00a fb27 	bl	8010884 <siprintf>
	lcdPutStr(5, 50, tempStr2, font_12_zekton);
 8006236:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800623a:	4b8e      	ldr	r3, [pc, #568]	; (8006474 <faceMain+0x2e4>)
 800623c:	2132      	movs	r1, #50	; 0x32
 800623e:	2005      	movs	r0, #5
 8006240:	f7fc fe34 	bl	8002eac <lcdPutStr>

	char temperature[30] = {0};
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800624a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	60da      	str	r2, [r3, #12]
 8006258:	611a      	str	r2, [r3, #16]
 800625a:	615a      	str	r2, [r3, #20]
 800625c:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 800625e:	4b8d      	ldr	r3, [pc, #564]	; (8006494 <faceMain+0x304>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa f980 	bl	8000568 <__aeabi_f2d>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8006270:	4989      	ldr	r1, [pc, #548]	; (8006498 <faceMain+0x308>)
 8006272:	f00a fb07 	bl	8010884 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006276:	2314      	movs	r3, #20
 8006278:	b29c      	uxth	r4, r3
 800627a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800627e:	4618      	mov	r0, r3
 8006280:	f7f9 ffb6 	bl	80001f0 <strlen>
 8006284:	4603      	mov	r3, r0
 8006286:	f1c3 030d 	rsb	r3, r3, #13
 800628a:	b29b      	uxth	r3, r3
 800628c:	fb14 f303 	smulbb	r3, r4, r3
 8006290:	b29b      	uxth	r3, r3
 8006292:	3323      	adds	r3, #35	; 0x23
 8006294:	b298      	uxth	r0, r3
 8006296:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800629a:	4b80      	ldr	r3, [pc, #512]	; (800649c <faceMain+0x30c>)
 800629c:	210e      	movs	r1, #14
 800629e:	f7fc fe05 	bl	8002eac <lcdPutStr>
	char baroStr[30] = {0};
 80062a2:	2300      	movs	r3, #0
 80062a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	611a      	str	r2, [r3, #16]
 80062b8:	615a      	str	r2, [r3, #20]
 80062ba:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 80062bc:	4b75      	ldr	r3, [pc, #468]	; (8006494 <faceMain+0x304>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80064a0 <faceMain+0x310>
 80062cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062d0:	ee16 0a90 	vmov	r0, s13
 80062d4:	f7fa f948 	bl	8000568 <__aeabi_f2d>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80062e0:	4970      	ldr	r1, [pc, #448]	; (80064a4 <faceMain+0x314>)
 80062e2:	f00a facf 	bl	8010884 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 80062e6:	2314      	movs	r3, #20
 80062e8:	b29c      	uxth	r4, r3
 80062ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7f9 ff7e 	bl	80001f0 <strlen>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f1c3 030d 	rsb	r3, r3, #13
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	fb14 f303 	smulbb	r3, r4, r3
 8006300:	b29b      	uxth	r3, r3
 8006302:	3323      	adds	r3, #35	; 0x23
 8006304:	b298      	uxth	r0, r3
 8006306:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800630a:	4b64      	ldr	r3, [pc, #400]	; (800649c <faceMain+0x30c>)
 800630c:	212a      	movs	r1, #42	; 0x2a
 800630e:	f7fc fdcd 	bl	8002eac <lcdPutStr>

	char fracStr[30] = {0};
 8006312:	2300      	movs	r3, #0
 8006314:	663b      	str	r3, [r7, #96]	; 0x60
 8006316:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	605a      	str	r2, [r3, #4]
 8006320:	609a      	str	r2, [r3, #8]
 8006322:	60da      	str	r2, [r3, #12]
 8006324:	611a      	str	r2, [r3, #16]
 8006326:	615a      	str	r2, [r3, #20]
 8006328:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 800632a:	2300      	movs	r3, #0
 800632c:	643b      	str	r3, [r7, #64]	; 0x40
 800632e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	611a      	str	r2, [r3, #16]
 800633e:	615a      	str	r2, [r3, #20]
 8006340:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8006342:	2300      	movs	r3, #0
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	609a      	str	r2, [r3, #8]
 8006352:	60da      	str	r2, [r3, #12]
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	615a      	str	r2, [r3, #20]
 8006358:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 800635a:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <faceMain+0x318>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006364:	4951      	ldr	r1, [pc, #324]	; (80064ac <faceMain+0x31c>)
 8006366:	4618      	mov	r0, r3
 8006368:	f00a fa8c 	bl	8010884 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800636c:	4b4e      	ldr	r3, [pc, #312]	; (80064a8 <faceMain+0x318>)
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	461a      	mov	r2, r3
 8006372:	f107 0320 	add.w	r3, r7, #32
 8006376:	494d      	ldr	r1, [pc, #308]	; (80064ac <faceMain+0x31c>)
 8006378:	4618      	mov	r0, r3
 800637a:	f00a fa83 	bl	8010884 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <faceMain+0x318>)
 8006380:	789b      	ldrb	r3, [r3, #2]
 8006382:	461a      	mov	r2, r3
 8006384:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006388:	4948      	ldr	r1, [pc, #288]	; (80064ac <faceMain+0x31c>)
 800638a:	4618      	mov	r0, r3
 800638c:	f00a fa7a 	bl	8010884 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8006390:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006394:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <faceMain+0x320>)
 8006396:	214c      	movs	r1, #76	; 0x4c
 8006398:	2014      	movs	r0, #20
 800639a:	f7fc fd87 	bl	8002eac <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 800639e:	f107 0220 	add.w	r2, r7, #32
 80063a2:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <faceMain+0x320>)
 80063a4:	214c      	movs	r1, #76	; 0x4c
 80063a6:	20aa      	movs	r0, #170	; 0xaa
 80063a8:	f7fc fd80 	bl	8002eac <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 80063ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063b0:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <faceMain+0x324>)
 80063b2:	214c      	movs	r1, #76	; 0x4c
 80063b4:	f240 103b 	movw	r0, #315	; 0x13b
 80063b8:	f7fc fd78 	bl	8002eac <lcdPutStr>

	char buffString[30] = {0};
 80063bc:	2300      	movs	r3, #0
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	1d3b      	adds	r3, r7, #4
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	609a      	str	r2, [r3, #8]
 80063ca:	60da      	str	r2, [r3, #12]
 80063cc:	611a      	str	r2, [r3, #16]
 80063ce:	615a      	str	r2, [r3, #20]
 80063d0:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 80063d2:	463b      	mov	r3, r7
 80063d4:	4938      	ldr	r1, [pc, #224]	; (80064b8 <faceMain+0x328>)
 80063d6:	4618      	mov	r0, r3
 80063d8:	f00a fa54 	bl	8010884 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 80063dc:	4b37      	ldr	r3, [pc, #220]	; (80064bc <faceMain+0x32c>)
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <faceMain+0x330>)
 80063e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063e8:	4b34      	ldr	r3, [pc, #208]	; (80064bc <faceMain+0x32c>)
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80063f0:	4638      	mov	r0, r7
 80063f2:	4934      	ldr	r1, [pc, #208]	; (80064c4 <faceMain+0x334>)
 80063f4:	f00a fa46 	bl	8010884 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80063f8:	2314      	movs	r3, #20
 80063fa:	b29c      	uxth	r4, r3
 80063fc:	463b      	mov	r3, r7
 80063fe:	4618      	mov	r0, r3
 8006400:	f7f9 fef6 	bl	80001f0 <strlen>
 8006404:	4603      	mov	r3, r0
 8006406:	f1c3 030d 	rsb	r3, r3, #13
 800640a:	b29b      	uxth	r3, r3
 800640c:	fb14 f303 	smulbb	r3, r4, r3
 8006410:	b29b      	uxth	r3, r3
 8006412:	3323      	adds	r3, #35	; 0x23
 8006414:	b298      	uxth	r0, r3
 8006416:	463a      	mov	r2, r7
 8006418:	4b20      	ldr	r3, [pc, #128]	; (800649c <faceMain+0x30c>)
 800641a:	21ae      	movs	r1, #174	; 0xae
 800641c:	f7fc fd46 	bl	8002eac <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8006420:	4b26      	ldr	r3, [pc, #152]	; (80064bc <faceMain+0x32c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	4b28      	ldr	r3, [pc, #160]	; (80064c8 <faceMain+0x338>)
 8006428:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800642c:	4b23      	ldr	r3, [pc, #140]	; (80064bc <faceMain+0x32c>)
 800642e:	789b      	ldrb	r3, [r3, #2]
 8006430:	4638      	mov	r0, r7
 8006432:	4924      	ldr	r1, [pc, #144]	; (80064c4 <faceMain+0x334>)
 8006434:	f00a fa26 	bl	8010884 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006438:	2314      	movs	r3, #20
 800643a:	b29c      	uxth	r4, r3
 800643c:	463b      	mov	r3, r7
 800643e:	4618      	mov	r0, r3
 8006440:	f7f9 fed6 	bl	80001f0 <strlen>
 8006444:	4603      	mov	r3, r0
 8006446:	f1c3 030d 	rsb	r3, r3, #13
 800644a:	b29b      	uxth	r3, r3
 800644c:	fb14 f303 	smulbb	r3, r4, r3
 8006450:	b29b      	uxth	r3, r3
 8006452:	3323      	adds	r3, #35	; 0x23
 8006454:	b298      	uxth	r0, r3
 8006456:	463a      	mov	r2, r7
 8006458:	4b10      	ldr	r3, [pc, #64]	; (800649c <faceMain+0x30c>)
 800645a:	21ca      	movs	r1, #202	; 0xca
 800645c:	f7fc fd26 	bl	8002eac <lcdPutStr>
}
 8006460:	bf00      	nop
 8006462:	37e4      	adds	r7, #228	; 0xe4
 8006464:	46bd      	mov	sp, r7
 8006466:	bd90      	pop	{r4, r7, pc}
 8006468:	20005d25 	.word	0x20005d25
 800646c:	20005d26 	.word	0x20005d26
 8006470:	08013f44 	.word	0x08013f44
 8006474:	080247d4 	.word	0x080247d4
 8006478:	20005d27 	.word	0x20005d27
 800647c:	20005d28 	.word	0x20005d28
 8006480:	08013f58 	.word	0x08013f58
 8006484:	20005d24 	.word	0x20005d24
 8006488:	08013f70 	.word	0x08013f70
 800648c:	20005d29 	.word	0x20005d29
 8006490:	08013f7c 	.word	0x08013f7c
 8006494:	200023b0 	.word	0x200023b0
 8006498:	08013f94 	.word	0x08013f94
 800649c:	0802525c 	.word	0x0802525c
 80064a0:	42c80000 	.word	0x42c80000
 80064a4:	08013f9c 	.word	0x08013f9c
 80064a8:	20005660 	.word	0x20005660
 80064ac:	08013fa8 	.word	0x08013fa8
 80064b0:	0802c70c 	.word	0x0802c70c
 80064b4:	080270c4 	.word	0x080270c4
 80064b8:	08013fb0 	.word	0x08013fb0
 80064bc:	20005674 	.word	0x20005674
 80064c0:	200000bc 	.word	0x200000bc
 80064c4:	08013fc0 	.word	0x08013fc0
 80064c8:	2000009c 	.word	0x2000009c

080064cc <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	895b      	ldrh	r3, [r3, #10]
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	f009 faec 	bl	800fad0 <malloc>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	741a      	strb	r2, [r3, #16]
}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	891a      	ldrh	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	895b      	ldrh	r3, [r3, #10]
 8006530:	429a      	cmp	r2, r3
 8006532:	bf0c      	ite	eq
 8006534:	2301      	moveq	r3, #1
 8006536:	2300      	movne	r3, #0
 8006538:	b2db      	uxtb	r3, r3
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ffe5 	bl	8006520 <cbuf_isFull>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02b      	beq.n	80065b4 <cbuf_ovw+0x6e>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	88db      	ldrh	r3, [r3, #6]
 8006564:	4619      	mov	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	18d0      	adds	r0, r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	461a      	mov	r2, r3
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	f009 faba 	bl	800faf0 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	88db      	ldrh	r3, [r3, #6]
 8006580:	3301      	adds	r3, #1
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	8952      	ldrh	r2, [r2, #10]
 8006586:	fb93 f1f2 	sdiv	r1, r3, r2
 800658a:	fb01 f202 	mul.w	r2, r1, r2
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	b29a      	uxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	889b      	ldrh	r3, [r3, #4]
 800659a:	3301      	adds	r3, #1
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	8952      	ldrh	r2, [r2, #10]
 80065a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80065a4:	fb01 f202 	mul.w	r2, r1, r2
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	809a      	strh	r2, [r3, #4]
		return 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e023      	b.n	80065fc <cbuf_ovw+0xb6>
	} else{
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	88db      	ldrh	r3, [r3, #6]
 80065bc:	4619      	mov	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	18d0      	adds	r0, r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	f009 fa8e 	bl	800faf0 <memcpy>
		b->elemNum++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	891b      	ldrh	r3, [r3, #8]
 80065d8:	3301      	adds	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	88db      	ldrh	r3, [r3, #6]
 80065e4:	3301      	adds	r3, #1
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	8952      	ldrh	r2, [r2, #10]
 80065ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80065ee:	fb01 f202 	mul.w	r2, r1, r2
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	80da      	strh	r2, [r3, #6]
		return 1;
 80065fa:	2301      	movs	r3, #1
	}
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	887a      	ldrh	r2, [r7, #2]
 8006614:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	895b      	ldrh	r3, [r3, #10]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4618      	mov	r0, r3
 800661e:	f009 fa57 	bl	800fad0 <malloc>
 8006622:	4603      	mov	r3, r0
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	731a      	strb	r2, [r3, #12]
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	891a      	ldrh	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	429a      	cmp	r2, r3
 800665c:	bf0c      	ite	eq
 800665e:	2301      	moveq	r3, #1
 8006660:	2300      	movne	r3, #0
 8006662:	b2db      	uxtb	r3, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ffe5 	bl	800664a <ring_buffer_full>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d023      	beq.n	80066ce <add_ovw_ring_buffer+0x5e>
		b->values[b->tail] = value;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	88db      	ldrh	r3, [r3, #6]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	88db      	ldrh	r3, [r3, #6]
 800669a:	3301      	adds	r3, #1
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	8952      	ldrh	r2, [r2, #10]
 80066a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80066a4:	fb01 f202 	mul.w	r2, r1, r2
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	889b      	ldrh	r3, [r3, #4]
 80066b4:	3301      	adds	r3, #1
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	8952      	ldrh	r2, [r2, #10]
 80066ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80066be:	fb01 f202 	mul.w	r2, r1, r2
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	809a      	strh	r2, [r3, #4]
		return 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e01b      	b.n	8006706 <add_ovw_ring_buffer+0x96>
	} else{
		b->values[b->tail] = value;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	88db      	ldrh	r3, [r3, #6]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	891b      	ldrh	r3, [r3, #8]
 80066e2:	3301      	adds	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	88db      	ldrh	r3, [r3, #6]
 80066ee:	3301      	adds	r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	8952      	ldrh	r2, [r2, #10]
 80066f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80066f8:	fb01 f202 	mul.w	r2, r1, r2
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	80da      	strh	r2, [r3, #6]
		return 1;
 8006704:	2301      	movs	r3, #1
	}
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <createTimer>:
 *      Author: wojch
 */

#include "timerUtils.h"

timer_T* createTimer(void){
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
	timer_T* timerPtr = malloc(sizeof(timer_T));
 8006714:	200c      	movs	r0, #12
 8006716:	f009 f9db 	bl	800fad0 <malloc>
 800671a:	4603      	mov	r3, r0
 800671c:	607b      	str	r3, [r7, #4]
	timerPtr->timerStatus = TIMER_STATUS_UNSET;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	721a      	strb	r2, [r3, #8]
	return timerPtr;
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <setTimerAAA>:
void deleteTimer(timer_T* timer){
	free(timer);
}
uint8_t setTimerAAA(timer_T* timer, uint16_t targetTime, void* callback){
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	460b      	mov	r3, r1
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	817b      	strh	r3, [r7, #10]
	timer->currentValue = 0;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	801a      	strh	r2, [r3, #0]
	timer->targetValue = targetTime;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	897a      	ldrh	r2, [r7, #10]
 8006746:	805a      	strh	r2, [r3, #2]
	timer->callback = callback;
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	605a      	str	r2, [r3, #4]
	timer->timerStatus = TIMER_STATUS_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	721a      	strb	r2, [r3, #8]
}
 8006754:	bf00      	nop
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <runTimerAAA>:

uint8_t runTimerAAA(timer_T* timer){
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
	if((timer->timerStatus == TIMER_STATUS_READY) || (timer->timerStatus == TIMER_STATUS_PAUSED)){
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7a1b      	ldrb	r3, [r3, #8]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d003      	beq.n	800677a <runTimerAAA+0x18>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7a1b      	ldrb	r3, [r3, #8]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d102      	bne.n	8006780 <runTimerAAA+0x1e>
		timer->timerStatus = TIMER_STATUS_RUNNING;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	721a      	strb	r2, [r3, #8]
	}
}
 8006780:	bf00      	nop
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <tickTimer>:
uint8_t resetTimerAAA(timer_T* timer){
	timer->currentValue = 0;
	timer->timerStatus = TIMER_STATUS_READY;
}

void tickTimer(timer_T* timer){
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING) timer->currentValue++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7a1b      	ldrb	r3, [r3, #8]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d105      	bne.n	80067aa <tickTimer+0x1c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	801a      	strh	r2, [r3, #0]
	if(timer->currentValue == timer->targetValue){
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	881a      	ldrh	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	885b      	ldrh	r3, [r3, #2]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d106      	bne.n	80067c4 <tickTimer+0x36>
		timer->timerStatus = TIMER_STATUS_ELAPSED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	721a      	strb	r2, [r3, #8]
		// callback will be executed in the TMR interrupt!
		timer->callback(NULL);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2000      	movs	r0, #0
 80067c2:	4798      	blx	r3
	}
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80067cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006804 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067d0:	480d      	ldr	r0, [pc, #52]	; (8006808 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80067d2:	490e      	ldr	r1, [pc, #56]	; (800680c <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 80067d4:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80067d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067d8:	e002      	b.n	80067e0 <LoopCopyDataInit>

080067da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067de:	3304      	adds	r3, #4

080067e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067e4:	d3f9      	bcc.n	80067da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067e6:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80067e8:	4c0b      	ldr	r4, [pc, #44]	; (8006818 <LoopFillZerobss+0x26>)
  movs r3, #0
 80067ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067ec:	e001      	b.n	80067f2 <LoopFillZerobss>

080067ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067f0:	3204      	adds	r2, #4

080067f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067f4:	d3fb      	bcc.n	80067ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80067f6:	f7fe fae5 	bl	8004dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067fa:	f009 f945 	bl	800fa88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067fe:	f7fd fc23 	bl	8004048 <main>
  bx  lr    
 8006802:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006804:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800680c:	200002c8 	.word	0x200002c8
                                         ldr r2, =_sidata
 8006810:	0802eab8 	.word	0x0802eab8
  ldr r2, =_sbss
 8006814:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8006818:	20005d7c 	.word	0x20005d7c

0800681c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800681c:	e7fe      	b.n	800681c <ADC_IRQHandler>
	...

08006820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <HAL_Init+0x40>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0d      	ldr	r2, [pc, #52]	; (8006860 <HAL_Init+0x40>)
 800682a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800682e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <HAL_Init+0x40>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <HAL_Init+0x40>)
 8006836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800683a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <HAL_Init+0x40>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a07      	ldr	r2, [pc, #28]	; (8006860 <HAL_Init+0x40>)
 8006842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006848:	2003      	movs	r0, #3
 800684a:	f000 f94f 	bl	8006aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800684e:	2000      	movs	r0, #0
 8006850:	f000 f808 	bl	8006864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006854:	f7fd ffba 	bl	80047cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40023c00 	.word	0x40023c00

08006864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_InitTick+0x54>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_InitTick+0x58>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800687a:	fbb3 f3f1 	udiv	r3, r3, r1
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f967 	bl	8006b56 <HAL_SYSTICK_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00e      	b.n	80068b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b0f      	cmp	r3, #15
 8006896:	d80a      	bhi.n	80068ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006898:	2200      	movs	r2, #0
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	f000 f92f 	bl	8006b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068a4:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <HAL_InitTick+0x5c>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20000094 	.word	0x20000094
 80068bc:	200000f4 	.word	0x200000f4
 80068c0:	200000f0 	.word	0x200000f0

080068c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_IncTick+0x20>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <HAL_IncTick+0x24>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4413      	add	r3, r2
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <HAL_IncTick+0x24>)
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	200000f4 	.word	0x200000f4
 80068e8:	20005d2c 	.word	0x20005d2c

080068ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return uwTick;
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <HAL_GetTick+0x14>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20005d2c 	.word	0x20005d2c

08006904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800690c:	f7ff ffee 	bl	80068ec <HAL_GetTick>
 8006910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d005      	beq.n	800692a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_Delay+0x44>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800692a:	bf00      	nop
 800692c:	f7ff ffde 	bl	80068ec <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	429a      	cmp	r2, r3
 800693a:	d8f7      	bhi.n	800692c <HAL_Delay+0x28>
  {
  }
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200000f4 	.word	0x200000f4

0800694c <__NVIC_SetPriorityGrouping>:
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <__NVIC_SetPriorityGrouping+0x44>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006968:	4013      	ands	r3, r2
 800696a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800697e:	4a04      	ldr	r2, [pc, #16]	; (8006990 <__NVIC_SetPriorityGrouping+0x44>)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	60d3      	str	r3, [r2, #12]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	e000ed00 	.word	0xe000ed00

08006994 <__NVIC_GetPriorityGrouping>:
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006998:	4b04      	ldr	r3, [pc, #16]	; (80069ac <__NVIC_GetPriorityGrouping+0x18>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	f003 0307 	and.w	r3, r3, #7
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	e000ed00 	.word	0xe000ed00

080069b0 <__NVIC_EnableIRQ>:
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	db0b      	blt.n	80069da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	f003 021f 	and.w	r2, r3, #31
 80069c8:	4907      	ldr	r1, [pc, #28]	; (80069e8 <__NVIC_EnableIRQ+0x38>)
 80069ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	2001      	movs	r0, #1
 80069d2:	fa00 f202 	lsl.w	r2, r0, r2
 80069d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	e000e100 	.word	0xe000e100

080069ec <__NVIC_SetPriority>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	6039      	str	r1, [r7, #0]
 80069f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	db0a      	blt.n	8006a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	490c      	ldr	r1, [pc, #48]	; (8006a38 <__NVIC_SetPriority+0x4c>)
 8006a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0a:	0112      	lsls	r2, r2, #4
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	440b      	add	r3, r1
 8006a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a14:	e00a      	b.n	8006a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	4908      	ldr	r1, [pc, #32]	; (8006a3c <__NVIC_SetPriority+0x50>)
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	3b04      	subs	r3, #4
 8006a24:	0112      	lsls	r2, r2, #4
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	440b      	add	r3, r1
 8006a2a:	761a      	strb	r2, [r3, #24]
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	e000e100 	.word	0xe000e100
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <NVIC_EncodePriority>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f1c3 0307 	rsb	r3, r3, #7
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	bf28      	it	cs
 8006a5e:	2304      	movcs	r3, #4
 8006a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2b06      	cmp	r3, #6
 8006a68:	d902      	bls.n	8006a70 <NVIC_EncodePriority+0x30>
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	3b03      	subs	r3, #3
 8006a6e:	e000      	b.n	8006a72 <NVIC_EncodePriority+0x32>
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43da      	mvns	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	401a      	ands	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a88:	f04f 31ff 	mov.w	r1, #4294967295
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a92:	43d9      	mvns	r1, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a98:	4313      	orrs	r3, r2
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3724      	adds	r7, #36	; 0x24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <SysTick_Config>:
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ab8:	d301      	bcc.n	8006abe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006aba:	2301      	movs	r3, #1
 8006abc:	e00f      	b.n	8006ade <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <SysTick_Config+0x40>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ac6:	210f      	movs	r1, #15
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	f7ff ff8e 	bl	80069ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <SysTick_Config+0x40>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ad6:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <SysTick_Config+0x40>)
 8006ad8:	2207      	movs	r2, #7
 8006ada:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	e000e010 	.word	0xe000e010

08006aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ff29 	bl	800694c <__NVIC_SetPriorityGrouping>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	4603      	mov	r3, r0
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b14:	f7ff ff3e 	bl	8006994 <__NVIC_GetPriorityGrouping>
 8006b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	6978      	ldr	r0, [r7, #20]
 8006b20:	f7ff ff8e 	bl	8006a40 <NVIC_EncodePriority>
 8006b24:	4602      	mov	r2, r0
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff ff5d 	bl	80069ec <__NVIC_SetPriority>
}
 8006b32:	bf00      	nop
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	4603      	mov	r3, r0
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff ff31 	bl	80069b0 <__NVIC_EnableIRQ>
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ffa2 	bl	8006aa8 <SysTick_Config>
 8006b64:	4603      	mov	r3, r0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b84:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_DMA_Start_IT+0x26>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e040      	b.n	8006c16 <HAL_DMA_Start_IT+0xa8>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d12f      	bne.n	8006c08 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f82e 	bl	8006c1e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc6:	223f      	movs	r2, #63	; 0x3f
 8006bc8:	409a      	lsls	r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0216 	orr.w	r2, r2, #22
 8006bdc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0208 	orr.w	r2, r2, #8
 8006bf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e005      	b.n	8006c14 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
 8006c12:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	d108      	bne.n	8006c5e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c5c:	e007      	b.n	8006c6e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	60da      	str	r2, [r3, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e177      	b.n	8006f88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c98:	2201      	movs	r2, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	f040 8166 	bne.w	8006f82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d005      	beq.n	8006cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d130      	bne.n	8006d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	2203      	movs	r2, #3
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d04:	2201      	movs	r2, #1
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4013      	ands	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 0201 	and.w	r2, r3, #1
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d017      	beq.n	8006d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	2203      	movs	r2, #3
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d123      	bne.n	8006dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	08da      	lsrs	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3208      	adds	r2, #8
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	220f      	movs	r2, #15
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	43db      	mvns	r3, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	08da      	lsrs	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3208      	adds	r2, #8
 8006dba:	69b9      	ldr	r1, [r7, #24]
 8006dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	2203      	movs	r2, #3
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 0203 	and.w	r2, r3, #3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80c0 	beq.w	8006f82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b66      	ldr	r3, [pc, #408]	; (8006fa0 <HAL_GPIO_Init+0x324>)
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	4a65      	ldr	r2, [pc, #404]	; (8006fa0 <HAL_GPIO_Init+0x324>)
 8006e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e10:	6453      	str	r3, [r2, #68]	; 0x44
 8006e12:	4b63      	ldr	r3, [pc, #396]	; (8006fa0 <HAL_GPIO_Init+0x324>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e1e:	4a61      	ldr	r2, [pc, #388]	; (8006fa4 <HAL_GPIO_Init+0x328>)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	3302      	adds	r3, #2
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	220f      	movs	r2, #15
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a58      	ldr	r2, [pc, #352]	; (8006fa8 <HAL_GPIO_Init+0x32c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d037      	beq.n	8006eba <HAL_GPIO_Init+0x23e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a57      	ldr	r2, [pc, #348]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d031      	beq.n	8006eb6 <HAL_GPIO_Init+0x23a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a56      	ldr	r2, [pc, #344]	; (8006fb0 <HAL_GPIO_Init+0x334>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d02b      	beq.n	8006eb2 <HAL_GPIO_Init+0x236>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a55      	ldr	r2, [pc, #340]	; (8006fb4 <HAL_GPIO_Init+0x338>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d025      	beq.n	8006eae <HAL_GPIO_Init+0x232>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a54      	ldr	r2, [pc, #336]	; (8006fb8 <HAL_GPIO_Init+0x33c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01f      	beq.n	8006eaa <HAL_GPIO_Init+0x22e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a53      	ldr	r2, [pc, #332]	; (8006fbc <HAL_GPIO_Init+0x340>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d019      	beq.n	8006ea6 <HAL_GPIO_Init+0x22a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a52      	ldr	r2, [pc, #328]	; (8006fc0 <HAL_GPIO_Init+0x344>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_GPIO_Init+0x226>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a51      	ldr	r2, [pc, #324]	; (8006fc4 <HAL_GPIO_Init+0x348>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00d      	beq.n	8006e9e <HAL_GPIO_Init+0x222>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a50      	ldr	r2, [pc, #320]	; (8006fc8 <HAL_GPIO_Init+0x34c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <HAL_GPIO_Init+0x21e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a4f      	ldr	r2, [pc, #316]	; (8006fcc <HAL_GPIO_Init+0x350>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d101      	bne.n	8006e96 <HAL_GPIO_Init+0x21a>
 8006e92:	2309      	movs	r3, #9
 8006e94:	e012      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006e96:	230a      	movs	r3, #10
 8006e98:	e010      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	e00e      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	e00c      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006ea2:	2306      	movs	r3, #6
 8006ea4:	e00a      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006ea6:	2305      	movs	r3, #5
 8006ea8:	e008      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006eaa:	2304      	movs	r3, #4
 8006eac:	e006      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e004      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e002      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_GPIO_Init+0x240>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	f002 0203 	and.w	r2, r2, #3
 8006ec2:	0092      	lsls	r2, r2, #2
 8006ec4:	4093      	lsls	r3, r2
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ecc:	4935      	ldr	r1, [pc, #212]	; (8006fa4 <HAL_GPIO_Init+0x328>)
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	089b      	lsrs	r3, r3, #2
 8006ed2:	3302      	adds	r3, #2
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eda:	4b3d      	ldr	r3, [pc, #244]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f04:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f28:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f2e:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f52:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f7c:	4a14      	ldr	r2, [pc, #80]	; (8006fd0 <HAL_GPIO_Init+0x354>)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b0f      	cmp	r3, #15
 8006f8c:	f67f ae84 	bls.w	8006c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	3724      	adds	r7, #36	; 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	40013800 	.word	0x40013800
 8006fa8:	40020000 	.word	0x40020000
 8006fac:	40020400 	.word	0x40020400
 8006fb0:	40020800 	.word	0x40020800
 8006fb4:	40020c00 	.word	0x40020c00
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40021400 	.word	0x40021400
 8006fc0:	40021800 	.word	0x40021800
 8006fc4:	40021c00 	.word	0x40021c00
 8006fc8:	40022000 	.word	0x40022000
 8006fcc:	40022400 	.word	0x40022400
 8006fd0:	40013c00 	.word	0x40013c00

08006fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	887b      	ldrh	r3, [r7, #2]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e001      	b.n	8006ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	807b      	strh	r3, [r7, #2]
 8007010:	4613      	mov	r3, r2
 8007012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007014:	787b      	ldrb	r3, [r7, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007020:	e003      	b.n	800702a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007022:	887b      	ldrh	r3, [r7, #2]
 8007024:	041a      	lsls	r2, r3, #16
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	619a      	str	r2, [r3, #24]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007048:	887a      	ldrh	r2, [r7, #2]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4013      	ands	r3, r2
 800704e:	041a      	lsls	r2, r3, #16
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	43d9      	mvns	r1, r3
 8007054:	887b      	ldrh	r3, [r7, #2]
 8007056:	400b      	ands	r3, r1
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	619a      	str	r2, [r3, #24]
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007076:	4b08      	ldr	r3, [pc, #32]	; (8007098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007078:	695a      	ldr	r2, [r3, #20]
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	4013      	ands	r3, r2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d006      	beq.n	8007090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f806 	bl	800709c <HAL_GPIO_EXTI_Callback>
  }
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40013c00 	.word	0x40013c00

0800709c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e12b      	b.n	800731e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fb fc9c 	bl	8002a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2224      	movs	r2, #36	; 0x24
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007118:	f001 fc76 	bl	8008a08 <HAL_RCC_GetPCLK1Freq>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4a81      	ldr	r2, [pc, #516]	; (8007328 <HAL_I2C_Init+0x274>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d807      	bhi.n	8007138 <HAL_I2C_Init+0x84>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4a80      	ldr	r2, [pc, #512]	; (800732c <HAL_I2C_Init+0x278>)
 800712c:	4293      	cmp	r3, r2
 800712e:	bf94      	ite	ls
 8007130:	2301      	movls	r3, #1
 8007132:	2300      	movhi	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e006      	b.n	8007146 <HAL_I2C_Init+0x92>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a7d      	ldr	r2, [pc, #500]	; (8007330 <HAL_I2C_Init+0x27c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	bf94      	ite	ls
 8007140:	2301      	movls	r3, #1
 8007142:	2300      	movhi	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0e7      	b.n	800731e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a78      	ldr	r2, [pc, #480]	; (8007334 <HAL_I2C_Init+0x280>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	0c9b      	lsrs	r3, r3, #18
 8007158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a6a      	ldr	r2, [pc, #424]	; (8007328 <HAL_I2C_Init+0x274>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d802      	bhi.n	8007188 <HAL_I2C_Init+0xd4>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3301      	adds	r3, #1
 8007186:	e009      	b.n	800719c <HAL_I2C_Init+0xe8>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	4a69      	ldr	r2, [pc, #420]	; (8007338 <HAL_I2C_Init+0x284>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	099b      	lsrs	r3, r3, #6
 800719a:	3301      	adds	r3, #1
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	430b      	orrs	r3, r1
 80071a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80071ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	495c      	ldr	r1, [pc, #368]	; (8007328 <HAL_I2C_Init+0x274>)
 80071b8:	428b      	cmp	r3, r1
 80071ba:	d819      	bhi.n	80071f0 <HAL_I2C_Init+0x13c>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1e59      	subs	r1, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071d0:	400b      	ands	r3, r1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <HAL_I2C_Init+0x138>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1e59      	subs	r1, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80071e4:	3301      	adds	r3, #1
 80071e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ea:	e051      	b.n	8007290 <HAL_I2C_Init+0x1dc>
 80071ec:	2304      	movs	r3, #4
 80071ee:	e04f      	b.n	8007290 <HAL_I2C_Init+0x1dc>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d111      	bne.n	800721c <HAL_I2C_Init+0x168>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1e58      	subs	r0, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6859      	ldr	r1, [r3, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	440b      	add	r3, r1
 8007206:	fbb0 f3f3 	udiv	r3, r0, r3
 800720a:	3301      	adds	r3, #1
 800720c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	e012      	b.n	8007242 <HAL_I2C_Init+0x18e>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1e58      	subs	r0, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6859      	ldr	r1, [r3, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	0099      	lsls	r1, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007232:	3301      	adds	r3, #1
 8007234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007238:	2b00      	cmp	r3, #0
 800723a:	bf0c      	ite	eq
 800723c:	2301      	moveq	r3, #1
 800723e:	2300      	movne	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Init+0x196>
 8007246:	2301      	movs	r3, #1
 8007248:	e022      	b.n	8007290 <HAL_I2C_Init+0x1dc>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10e      	bne.n	8007270 <HAL_I2C_Init+0x1bc>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1e58      	subs	r0, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6859      	ldr	r1, [r3, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	440b      	add	r3, r1
 8007260:	fbb0 f3f3 	udiv	r3, r0, r3
 8007264:	3301      	adds	r3, #1
 8007266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726e:	e00f      	b.n	8007290 <HAL_I2C_Init+0x1dc>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	1e58      	subs	r0, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6859      	ldr	r1, [r3, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	0099      	lsls	r1, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	fbb0 f3f3 	udiv	r3, r0, r3
 8007286:	3301      	adds	r3, #1
 8007288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	6809      	ldr	r1, [r1, #0]
 8007294:	4313      	orrs	r3, r2
 8007296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69da      	ldr	r2, [r3, #28]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80072be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6911      	ldr	r1, [r2, #16]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68d2      	ldr	r2, [r2, #12]
 80072ca:	4311      	orrs	r1, r2
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	000186a0 	.word	0x000186a0
 800732c:	001e847f 	.word	0x001e847f
 8007330:	003d08ff 	.word	0x003d08ff
 8007334:	431bde83 	.word	0x431bde83
 8007338:	10624dd3 	.word	0x10624dd3

0800733c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4603      	mov	r3, r0
 800734c:	817b      	strh	r3, [r7, #10]
 800734e:	460b      	mov	r3, r1
 8007350:	813b      	strh	r3, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007356:	f7ff fac9 	bl	80068ec <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b20      	cmp	r3, #32
 8007366:	f040 80d9 	bne.w	800751c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2319      	movs	r3, #25
 8007370:	2201      	movs	r2, #1
 8007372:	496d      	ldr	r1, [pc, #436]	; (8007528 <HAL_I2C_Mem_Write+0x1ec>)
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fc7f 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
 8007382:	e0cc      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_I2C_Mem_Write+0x56>
 800738e:	2302      	movs	r3, #2
 8007390:	e0c5      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d007      	beq.n	80073b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2221      	movs	r2, #33	; 0x21
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2240      	movs	r2, #64	; 0x40
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a4d      	ldr	r2, [pc, #308]	; (800752c <HAL_I2C_Mem_Write+0x1f0>)
 80073f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073fa:	88f8      	ldrh	r0, [r7, #6]
 80073fc:	893a      	ldrh	r2, [r7, #8]
 80073fe:	8979      	ldrh	r1, [r7, #10]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4603      	mov	r3, r0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fab6 	bl	800797c <I2C_RequestMemoryWrite>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d052      	beq.n	80074bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e081      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fd00 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	2b04      	cmp	r3, #4
 8007430:	d107      	bne.n	8007442 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007440:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e06b      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b04      	cmp	r3, #4
 8007482:	d11b      	bne.n	80074bc <HAL_I2C_Mem_Write+0x180>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007488:	2b00      	cmp	r3, #0
 800748a:	d017      	beq.n	80074bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1aa      	bne.n	800741a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fcec 	bl	8007ea6 <I2C_WaitOnBTFFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00d      	beq.n	80074f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d107      	bne.n	80074ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e016      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e000      	b.n	800751e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	00100002 	.word	0x00100002
 800752c:	ffff0000 	.word	0xffff0000

08007530 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08c      	sub	sp, #48	; 0x30
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	4603      	mov	r3, r0
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	460b      	mov	r3, r1
 8007544:	813b      	strh	r3, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800754a:	f7ff f9cf 	bl	80068ec <HAL_GetTick>
 800754e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b20      	cmp	r3, #32
 800755a:	f040 8208 	bne.w	800796e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2319      	movs	r3, #25
 8007564:	2201      	movs	r2, #1
 8007566:	497b      	ldr	r1, [pc, #492]	; (8007754 <HAL_I2C_Mem_Read+0x224>)
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fb85 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
 8007576:	e1fb      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_I2C_Mem_Read+0x56>
 8007582:	2302      	movs	r3, #2
 8007584:	e1f4      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d007      	beq.n	80075ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2222      	movs	r2, #34	; 0x22
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2240      	movs	r2, #64	; 0x40
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a5b      	ldr	r2, [pc, #364]	; (8007758 <HAL_I2C_Mem_Read+0x228>)
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075ee:	88f8      	ldrh	r0, [r7, #6]
 80075f0:	893a      	ldrh	r2, [r7, #8]
 80075f2:	8979      	ldrh	r1, [r7, #10]
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4603      	mov	r3, r0
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fa52 	bl	8007aa8 <I2C_RequestMemoryRead>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e1b0      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	d113      	bne.n	800763e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007616:	2300      	movs	r3, #0
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	623b      	str	r3, [r7, #32]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	623b      	str	r3, [r7, #32]
 800762a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	e184      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	2b01      	cmp	r3, #1
 8007644:	d11b      	bne.n	800767e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e164      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007682:	2b02      	cmp	r3, #2
 8007684:	d11b      	bne.n	80076be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007694:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a6:	2300      	movs	r3, #0
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	e144      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80076d4:	e138      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f200 80f1 	bhi.w	80078c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d123      	bne.n	8007730 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fc1b 	bl	8007f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e139      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800772e:	e10b      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007734:	2b02      	cmp	r3, #2
 8007736:	d14e      	bne.n	80077d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	2200      	movs	r2, #0
 8007740:	4906      	ldr	r1, [pc, #24]	; (800775c <HAL_I2C_Mem_Read+0x22c>)
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa98 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d008      	beq.n	8007760 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e10e      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
 8007752:	bf00      	nop
 8007754:	00100002 	.word	0x00100002
 8007758:	ffff0000 	.word	0xffff0000
 800775c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800776e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077d4:	e0b8      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	2200      	movs	r2, #0
 80077de:	4966      	ldr	r1, [pc, #408]	; (8007978 <HAL_I2C_Mem_Read+0x448>)
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fa49 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0bf      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2200      	movs	r2, #0
 800783a:	494f      	ldr	r1, [pc, #316]	; (8007978 <HAL_I2C_Mem_Read+0x448>)
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa1b 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e091      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078c0:	e042      	b.n	8007948 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fb2e 	bl	8007f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e04c      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b04      	cmp	r3, #4
 8007914:	d118      	bne.n	8007948 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	f47f aec2 	bne.w	80076d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	e000      	b.n	8007970 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800796e:	2302      	movs	r3, #2
  }
}
 8007970:	4618      	mov	r0, r3
 8007972:	3728      	adds	r7, #40	; 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	00010004 	.word	0x00010004

0800797c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af02      	add	r7, sp, #8
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	4608      	mov	r0, r1
 8007986:	4611      	mov	r1, r2
 8007988:	461a      	mov	r2, r3
 800798a:	4603      	mov	r3, r0
 800798c:	817b      	strh	r3, [r7, #10]
 800798e:	460b      	mov	r3, r1
 8007990:	813b      	strh	r3, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f960 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079cc:	d103      	bne.n	80079d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e05f      	b.n	8007a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079da:	897b      	ldrh	r3, [r7, #10]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	492d      	ldr	r1, [pc, #180]	; (8007aa4 <I2C_RequestMemoryWrite+0x128>)
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f998 	bl	8007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e04c      	b.n	8007a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	6a39      	ldr	r1, [r7, #32]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fa02 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d107      	bne.n	8007a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e02b      	b.n	8007a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	611a      	str	r2, [r3, #16]
 8007a52:	e021      	b.n	8007a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a54:	893b      	ldrh	r3, [r7, #8]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a64:	6a39      	ldr	r1, [r7, #32]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f9dc 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d107      	bne.n	8007a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e005      	b.n	8007a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a8e:	893b      	ldrh	r3, [r7, #8]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	00010002 	.word	0x00010002

08007aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	817b      	strh	r3, [r7, #10]
 8007aba:	460b      	mov	r3, r1
 8007abc:	813b      	strh	r3, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f8c2 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b08:	d103      	bne.n	8007b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e0aa      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b16:	897b      	ldrh	r3, [r7, #10]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	6a3a      	ldr	r2, [r7, #32]
 8007b2a:	4952      	ldr	r1, [pc, #328]	; (8007c74 <I2C_RequestMemoryRead+0x1cc>)
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f8fa 	bl	8007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e097      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b54:	6a39      	ldr	r1, [r7, #32]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f964 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00d      	beq.n	8007b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d107      	bne.n	8007b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e076      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d105      	bne.n	8007b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b84:	893b      	ldrh	r3, [r7, #8]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	611a      	str	r2, [r3, #16]
 8007b8e:	e021      	b.n	8007bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	6a39      	ldr	r1, [r7, #32]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f93e 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00d      	beq.n	8007bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d107      	bne.n	8007bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e050      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bca:	893b      	ldrh	r3, [r7, #8]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd6:	6a39      	ldr	r1, [r7, #32]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f923 	bl	8007e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00d      	beq.n	8007c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d107      	bne.n	8007bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e035      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f82b 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c36:	d103      	bne.n	8007c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e013      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c44:	897b      	ldrh	r3, [r7, #10]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	6a3a      	ldr	r2, [r7, #32]
 8007c58:	4906      	ldr	r1, [pc, #24]	; (8007c74 <I2C_RequestMemoryRead+0x1cc>)
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 f863 	bl	8007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	00010002 	.word	0x00010002

08007c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c88:	e025      	b.n	8007cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d021      	beq.n	8007cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fe fe2b 	bl	80068ec <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d116      	bne.n	8007cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f043 0220 	orr.w	r2, r3, #32
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e023      	b.n	8007d1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10d      	bne.n	8007cfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	43da      	mvns	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4013      	ands	r3, r2
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bf0c      	ite	eq
 8007cf2:	2301      	moveq	r3, #1
 8007cf4:	2300      	movne	r3, #0
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	e00c      	b.n	8007d16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	43da      	mvns	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf0c      	ite	eq
 8007d0e:	2301      	moveq	r3, #1
 8007d10:	2300      	movne	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d0b6      	beq.n	8007c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d34:	e051      	b.n	8007dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d44:	d123      	bne.n	8007d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	f043 0204 	orr.w	r2, r3, #4
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e046      	b.n	8007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d021      	beq.n	8007dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d96:	f7fe fda9 	bl	80068ec <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d302      	bcc.n	8007dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d116      	bne.n	8007dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f043 0220 	orr.w	r2, r3, #32
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e020      	b.n	8007e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	0c1b      	lsrs	r3, r3, #16
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10c      	bne.n	8007dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	43da      	mvns	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4013      	ands	r3, r2
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bf14      	ite	ne
 8007df6:	2301      	movne	r3, #1
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e00b      	b.n	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	43da      	mvns	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bf14      	ite	ne
 8007e10:	2301      	movne	r3, #1
 8007e12:	2300      	moveq	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d18d      	bne.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e30:	e02d      	b.n	8007e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f8ce 	bl	8007fd4 <I2C_IsAcknowledgeFailed>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e02d      	b.n	8007e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d021      	beq.n	8007e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4a:	f7fe fd4f 	bl	80068ec <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d302      	bcc.n	8007e60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d116      	bne.n	8007e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e007      	b.n	8007e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b80      	cmp	r3, #128	; 0x80
 8007e9a:	d1ca      	bne.n	8007e32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007eb2:	e02d      	b.n	8007f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f88d 	bl	8007fd4 <I2C_IsAcknowledgeFailed>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e02d      	b.n	8007f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d021      	beq.n	8007f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ecc:	f7fe fd0e 	bl	80068ec <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d302      	bcc.n	8007ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d116      	bne.n	8007f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	f043 0220 	orr.w	r2, r3, #32
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e007      	b.n	8007f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d1ca      	bne.n	8007eb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f34:	e042      	b.n	8007fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d119      	bne.n	8007f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0210 	mvn.w	r2, #16
 8007f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e029      	b.n	8007fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f78:	f7fe fcb8 	bl	80068ec <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d116      	bne.n	8007fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e007      	b.n	8007fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d1b5      	bne.n	8007f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fea:	d11b      	bne.n	8008024 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ff4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	f043 0204 	orr.w	r2, r3, #4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b20      	cmp	r3, #32
 8008046:	d129      	bne.n	800809c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0210 	bic.w	r2, r2, #16
 800806e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d12a      	bne.n	800811a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2224      	movs	r2, #36	; 0x24
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80080e4:	89fb      	ldrh	r3, [r7, #14]
 80080e6:	f023 030f 	bic.w	r3, r3, #15
 80080ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	89fb      	ldrh	r3, [r7, #14]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	89fa      	ldrh	r2, [r7, #14]
 80080fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800811a:	2302      	movs	r3, #2
  }
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e267      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d075      	beq.n	8008232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008146:	4b88      	ldr	r3, [pc, #544]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 030c 	and.w	r3, r3, #12
 800814e:	2b04      	cmp	r3, #4
 8008150:	d00c      	beq.n	800816c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008152:	4b85      	ldr	r3, [pc, #532]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800815a:	2b08      	cmp	r3, #8
 800815c:	d112      	bne.n	8008184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800815e:	4b82      	ldr	r3, [pc, #520]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800816a:	d10b      	bne.n	8008184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800816c:	4b7e      	ldr	r3, [pc, #504]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d05b      	beq.n	8008230 <HAL_RCC_OscConfig+0x108>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d157      	bne.n	8008230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e242      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818c:	d106      	bne.n	800819c <HAL_RCC_OscConfig+0x74>
 800818e:	4b76      	ldr	r3, [pc, #472]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a75      	ldr	r2, [pc, #468]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e01d      	b.n	80081d8 <HAL_RCC_OscConfig+0xb0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081a4:	d10c      	bne.n	80081c0 <HAL_RCC_OscConfig+0x98>
 80081a6:	4b70      	ldr	r3, [pc, #448]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a6f      	ldr	r2, [pc, #444]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	4b6d      	ldr	r3, [pc, #436]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a6c      	ldr	r2, [pc, #432]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e00b      	b.n	80081d8 <HAL_RCC_OscConfig+0xb0>
 80081c0:	4b69      	ldr	r3, [pc, #420]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a68      	ldr	r2, [pc, #416]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b66      	ldr	r3, [pc, #408]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a65      	ldr	r2, [pc, #404]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e0:	f7fe fb84 	bl	80068ec <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fe fb80 	bl	80068ec <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	; 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e207      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081fa:	4b5b      	ldr	r3, [pc, #364]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0xc0>
 8008206:	e014      	b.n	8008232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008208:	f7fe fb70 	bl	80068ec <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008210:	f7fe fb6c 	bl	80068ec <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b64      	cmp	r3, #100	; 0x64
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e1f3      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008222:	4b51      	ldr	r3, [pc, #324]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0xe8>
 800822e:	e000      	b.n	8008232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d063      	beq.n	8008306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800823e:	4b4a      	ldr	r3, [pc, #296]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800824a:	4b47      	ldr	r3, [pc, #284]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008252:	2b08      	cmp	r3, #8
 8008254:	d11c      	bne.n	8008290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008256:	4b44      	ldr	r3, [pc, #272]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d116      	bne.n	8008290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008262:	4b41      	ldr	r3, [pc, #260]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_RCC_OscConfig+0x152>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d001      	beq.n	800827a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e1c7      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800827a:	4b3b      	ldr	r3, [pc, #236]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4937      	ldr	r1, [pc, #220]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 800828a:	4313      	orrs	r3, r2
 800828c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800828e:	e03a      	b.n	8008306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d020      	beq.n	80082da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008298:	4b34      	ldr	r3, [pc, #208]	; (800836c <HAL_RCC_OscConfig+0x244>)
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829e:	f7fe fb25 	bl	80068ec <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082a6:	f7fe fb21 	bl	80068ec <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e1a8      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b8:	4b2b      	ldr	r3, [pc, #172]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	4925      	ldr	r1, [pc, #148]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	600b      	str	r3, [r1, #0]
 80082d8:	e015      	b.n	8008306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <HAL_RCC_OscConfig+0x244>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e0:	f7fe fb04 	bl	80068ec <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082e8:	f7fe fb00 	bl	80068ec <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e187      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082fa:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f0      	bne.n	80082e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d036      	beq.n	8008380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d016      	beq.n	8008348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <HAL_RCC_OscConfig+0x248>)
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008320:	f7fe fae4 	bl	80068ec <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008328:	f7fe fae0 	bl	80068ec <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e167      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800833a:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <HAL_RCC_OscConfig+0x240>)
 800833c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x200>
 8008346:	e01b      	b.n	8008380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_RCC_OscConfig+0x248>)
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800834e:	f7fe facd 	bl	80068ec <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008354:	e00e      	b.n	8008374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008356:	f7fe fac9 	bl	80068ec <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d907      	bls.n	8008374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e150      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
 8008368:	40023800 	.word	0x40023800
 800836c:	42470000 	.word	0x42470000
 8008370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008374:	4b88      	ldr	r3, [pc, #544]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1ea      	bne.n	8008356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8097 	beq.w	80084bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800838e:	2300      	movs	r3, #0
 8008390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008392:	4b81      	ldr	r3, [pc, #516]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10f      	bne.n	80083be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]
 80083a2:	4b7d      	ldr	r3, [pc, #500]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	4a7c      	ldr	r2, [pc, #496]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	6413      	str	r3, [r2, #64]	; 0x40
 80083ae:	4b7a      	ldr	r3, [pc, #488]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b6:	60bb      	str	r3, [r7, #8]
 80083b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083be:	4b77      	ldr	r3, [pc, #476]	; (800859c <HAL_RCC_OscConfig+0x474>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d118      	bne.n	80083fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083ca:	4b74      	ldr	r3, [pc, #464]	; (800859c <HAL_RCC_OscConfig+0x474>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a73      	ldr	r2, [pc, #460]	; (800859c <HAL_RCC_OscConfig+0x474>)
 80083d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083d6:	f7fe fa89 	bl	80068ec <HAL_GetTick>
 80083da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083dc:	e008      	b.n	80083f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083de:	f7fe fa85 	bl	80068ec <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d901      	bls.n	80083f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e10c      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f0:	4b6a      	ldr	r3, [pc, #424]	; (800859c <HAL_RCC_OscConfig+0x474>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f0      	beq.n	80083de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <HAL_RCC_OscConfig+0x2ea>
 8008404:	4b64      	ldr	r3, [pc, #400]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008408:	4a63      	ldr	r2, [pc, #396]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 800840a:	f043 0301 	orr.w	r3, r3, #1
 800840e:	6713      	str	r3, [r2, #112]	; 0x70
 8008410:	e01c      	b.n	800844c <HAL_RCC_OscConfig+0x324>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b05      	cmp	r3, #5
 8008418:	d10c      	bne.n	8008434 <HAL_RCC_OscConfig+0x30c>
 800841a:	4b5f      	ldr	r3, [pc, #380]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	4a5e      	ldr	r2, [pc, #376]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008420:	f043 0304 	orr.w	r3, r3, #4
 8008424:	6713      	str	r3, [r2, #112]	; 0x70
 8008426:	4b5c      	ldr	r3, [pc, #368]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	4a5b      	ldr	r2, [pc, #364]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6713      	str	r3, [r2, #112]	; 0x70
 8008432:	e00b      	b.n	800844c <HAL_RCC_OscConfig+0x324>
 8008434:	4b58      	ldr	r3, [pc, #352]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a57      	ldr	r2, [pc, #348]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
 8008440:	4b55      	ldr	r3, [pc, #340]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	4a54      	ldr	r2, [pc, #336]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008446:	f023 0304 	bic.w	r3, r3, #4
 800844a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d015      	beq.n	8008480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008454:	f7fe fa4a 	bl	80068ec <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800845a:	e00a      	b.n	8008472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800845c:	f7fe fa46 	bl	80068ec <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	f241 3288 	movw	r2, #5000	; 0x1388
 800846a:	4293      	cmp	r3, r2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e0cb      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008472:	4b49      	ldr	r3, [pc, #292]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0ee      	beq.n	800845c <HAL_RCC_OscConfig+0x334>
 800847e:	e014      	b.n	80084aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008480:	f7fe fa34 	bl	80068ec <HAL_GetTick>
 8008484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008486:	e00a      	b.n	800849e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008488:	f7fe fa30 	bl	80068ec <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f241 3288 	movw	r2, #5000	; 0x1388
 8008496:	4293      	cmp	r3, r2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e0b5      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800849e:	4b3e      	ldr	r3, [pc, #248]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1ee      	bne.n	8008488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d105      	bne.n	80084bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084b0:	4b39      	ldr	r3, [pc, #228]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	4a38      	ldr	r2, [pc, #224]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80084b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80a1 	beq.w	8008608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084c6:	4b34      	ldr	r3, [pc, #208]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 030c 	and.w	r3, r3, #12
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d05c      	beq.n	800858c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d141      	bne.n	800855e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084da:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <HAL_RCC_OscConfig+0x478>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e0:	f7fe fa04 	bl	80068ec <HAL_GetTick>
 80084e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e8:	f7fe fa00 	bl	80068ec <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e087      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084fa:	4b27      	ldr	r3, [pc, #156]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69da      	ldr	r2, [r3, #28]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	019b      	lsls	r3, r3, #6
 8008516:	431a      	orrs	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	3b01      	subs	r3, #1
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	061b      	lsls	r3, r3, #24
 800852a:	491b      	ldr	r1, [pc, #108]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 800852c:	4313      	orrs	r3, r2
 800852e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008530:	4b1b      	ldr	r3, [pc, #108]	; (80085a0 <HAL_RCC_OscConfig+0x478>)
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008536:	f7fe f9d9 	bl	80068ec <HAL_GetTick>
 800853a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800853c:	e008      	b.n	8008550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800853e:	f7fe f9d5 	bl	80068ec <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d901      	bls.n	8008550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e05c      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008550:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0f0      	beq.n	800853e <HAL_RCC_OscConfig+0x416>
 800855c:	e054      	b.n	8008608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <HAL_RCC_OscConfig+0x478>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008564:	f7fe f9c2 	bl	80068ec <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800856c:	f7fe f9be 	bl	80068ec <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e045      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_RCC_OscConfig+0x470>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f0      	bne.n	800856c <HAL_RCC_OscConfig+0x444>
 800858a:	e03d      	b.n	8008608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d107      	bne.n	80085a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e038      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
 8008598:	40023800 	.word	0x40023800
 800859c:	40007000 	.word	0x40007000
 80085a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <HAL_RCC_OscConfig+0x4ec>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d028      	beq.n	8008604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085bc:	429a      	cmp	r2, r3
 80085be:	d121      	bne.n	8008604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d11a      	bne.n	8008604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085dc:	4293      	cmp	r3, r2
 80085de:	d111      	bne.n	8008604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	3b01      	subs	r3, #1
 80085ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d107      	bne.n	8008604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008600:	429a      	cmp	r2, r3
 8008602:	d001      	beq.n	8008608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e000      	b.n	800860a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40023800 	.word	0x40023800

08008618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e0cc      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800862c:	4b68      	ldr	r3, [pc, #416]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 030f 	and.w	r3, r3, #15
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d90c      	bls.n	8008654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800863a:	4b65      	ldr	r3, [pc, #404]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008642:	4b63      	ldr	r3, [pc, #396]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d001      	beq.n	8008654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e0b8      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d020      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800866c:	4b59      	ldr	r3, [pc, #356]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	4a58      	ldr	r2, [pc, #352]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008684:	4b53      	ldr	r3, [pc, #332]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4a52      	ldr	r2, [pc, #328]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800868e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008690:	4b50      	ldr	r3, [pc, #320]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	494d      	ldr	r1, [pc, #308]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d044      	beq.n	8008738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	4b47      	ldr	r3, [pc, #284]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d119      	bne.n	80086f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e07f      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d003      	beq.n	80086d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d107      	bne.n	80086e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086d6:	4b3f      	ldr	r3, [pc, #252]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e06f      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086e6:	4b3b      	ldr	r3, [pc, #236]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e067      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086f6:	4b37      	ldr	r3, [pc, #220]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f023 0203 	bic.w	r2, r3, #3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	4934      	ldr	r1, [pc, #208]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	4313      	orrs	r3, r2
 8008706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008708:	f7fe f8f0 	bl	80068ec <HAL_GetTick>
 800870c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800870e:	e00a      	b.n	8008726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008710:	f7fe f8ec 	bl	80068ec <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	f241 3288 	movw	r2, #5000	; 0x1388
 800871e:	4293      	cmp	r3, r2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e04f      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008726:	4b2b      	ldr	r3, [pc, #172]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 020c 	and.w	r2, r3, #12
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	429a      	cmp	r2, r3
 8008736:	d1eb      	bne.n	8008710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008738:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d20c      	bcs.n	8008760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008746:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800874e:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d001      	beq.n	8008760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e032      	b.n	80087c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800876c:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	4916      	ldr	r1, [pc, #88]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800877a:	4313      	orrs	r3, r2
 800877c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800878a:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	490e      	ldr	r1, [pc, #56]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 800879a:	4313      	orrs	r3, r2
 800879c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800879e:	f000 f821 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <HAL_RCC_ClockConfig+0x1bc>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	490a      	ldr	r1, [pc, #40]	; (80087d8 <HAL_RCC_ClockConfig+0x1c0>)
 80087b0:	5ccb      	ldrb	r3, [r1, r3]
 80087b2:	fa22 f303 	lsr.w	r3, r2, r3
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <HAL_RCC_ClockConfig+0x1c4>)
 80087b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <HAL_RCC_ClockConfig+0x1c8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe f850 	bl	8006864 <HAL_InitTick>

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	40023c00 	.word	0x40023c00
 80087d4:	40023800 	.word	0x40023800
 80087d8:	08015eec 	.word	0x08015eec
 80087dc:	20000094 	.word	0x20000094
 80087e0:	200000f0 	.word	0x200000f0

080087e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e8:	b094      	sub	sp, #80	; 0x50
 80087ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	647b      	str	r3, [r7, #68]	; 0x44
 80087f0:	2300      	movs	r3, #0
 80087f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f4:	2300      	movs	r3, #0
 80087f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087fc:	4b79      	ldr	r3, [pc, #484]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f003 030c 	and.w	r3, r3, #12
 8008804:	2b08      	cmp	r3, #8
 8008806:	d00d      	beq.n	8008824 <HAL_RCC_GetSysClockFreq+0x40>
 8008808:	2b08      	cmp	r3, #8
 800880a:	f200 80e1 	bhi.w	80089d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <HAL_RCC_GetSysClockFreq+0x34>
 8008812:	2b04      	cmp	r3, #4
 8008814:	d003      	beq.n	800881e <HAL_RCC_GetSysClockFreq+0x3a>
 8008816:	e0db      	b.n	80089d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008818:	4b73      	ldr	r3, [pc, #460]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800881a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800881c:	e0db      	b.n	80089d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800881e:	4b73      	ldr	r3, [pc, #460]	; (80089ec <HAL_RCC_GetSysClockFreq+0x208>)
 8008820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008822:	e0d8      	b.n	80089d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008824:	4b6f      	ldr	r3, [pc, #444]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800882e:	4b6d      	ldr	r3, [pc, #436]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d063      	beq.n	8008902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800883a:	4b6a      	ldr	r3, [pc, #424]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	099b      	lsrs	r3, r3, #6
 8008840:	2200      	movs	r2, #0
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
 8008844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884c:	633b      	str	r3, [r7, #48]	; 0x30
 800884e:	2300      	movs	r3, #0
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
 8008852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008856:	4622      	mov	r2, r4
 8008858:	462b      	mov	r3, r5
 800885a:	f04f 0000 	mov.w	r0, #0
 800885e:	f04f 0100 	mov.w	r1, #0
 8008862:	0159      	lsls	r1, r3, #5
 8008864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008868:	0150      	lsls	r0, r2, #5
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4621      	mov	r1, r4
 8008870:	1a51      	subs	r1, r2, r1
 8008872:	6139      	str	r1, [r7, #16]
 8008874:	4629      	mov	r1, r5
 8008876:	eb63 0301 	sbc.w	r3, r3, r1
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008888:	4659      	mov	r1, fp
 800888a:	018b      	lsls	r3, r1, #6
 800888c:	4651      	mov	r1, sl
 800888e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008892:	4651      	mov	r1, sl
 8008894:	018a      	lsls	r2, r1, #6
 8008896:	4651      	mov	r1, sl
 8008898:	ebb2 0801 	subs.w	r8, r2, r1
 800889c:	4659      	mov	r1, fp
 800889e:	eb63 0901 	sbc.w	r9, r3, r1
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088b6:	4690      	mov	r8, r2
 80088b8:	4699      	mov	r9, r3
 80088ba:	4623      	mov	r3, r4
 80088bc:	eb18 0303 	adds.w	r3, r8, r3
 80088c0:	60bb      	str	r3, [r7, #8]
 80088c2:	462b      	mov	r3, r5
 80088c4:	eb49 0303 	adc.w	r3, r9, r3
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	f04f 0200 	mov.w	r2, #0
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80088d6:	4629      	mov	r1, r5
 80088d8:	024b      	lsls	r3, r1, #9
 80088da:	4621      	mov	r1, r4
 80088dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088e0:	4621      	mov	r1, r4
 80088e2:	024a      	lsls	r2, r1, #9
 80088e4:	4610      	mov	r0, r2
 80088e6:	4619      	mov	r1, r3
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	2200      	movs	r2, #0
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088f4:	f7f8 f9d8 	bl	8000ca8 <__aeabi_uldivmod>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4613      	mov	r3, r2
 80088fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008900:	e058      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008902:	4b38      	ldr	r3, [pc, #224]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	099b      	lsrs	r3, r3, #6
 8008908:	2200      	movs	r2, #0
 800890a:	4618      	mov	r0, r3
 800890c:	4611      	mov	r1, r2
 800890e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008912:	623b      	str	r3, [r7, #32]
 8008914:	2300      	movs	r3, #0
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800891c:	4642      	mov	r2, r8
 800891e:	464b      	mov	r3, r9
 8008920:	f04f 0000 	mov.w	r0, #0
 8008924:	f04f 0100 	mov.w	r1, #0
 8008928:	0159      	lsls	r1, r3, #5
 800892a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800892e:	0150      	lsls	r0, r2, #5
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4641      	mov	r1, r8
 8008936:	ebb2 0a01 	subs.w	sl, r2, r1
 800893a:	4649      	mov	r1, r9
 800893c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800894c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008954:	ebb2 040a 	subs.w	r4, r2, sl
 8008958:	eb63 050b 	sbc.w	r5, r3, fp
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	00eb      	lsls	r3, r5, #3
 8008966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800896a:	00e2      	lsls	r2, r4, #3
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	4643      	mov	r3, r8
 8008972:	18e3      	adds	r3, r4, r3
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	464b      	mov	r3, r9
 8008978:	eb45 0303 	adc.w	r3, r5, r3
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800898a:	4629      	mov	r1, r5
 800898c:	028b      	lsls	r3, r1, #10
 800898e:	4621      	mov	r1, r4
 8008990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008994:	4621      	mov	r1, r4
 8008996:	028a      	lsls	r2, r1, #10
 8008998:	4610      	mov	r0, r2
 800899a:	4619      	mov	r1, r3
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	2200      	movs	r2, #0
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	61fa      	str	r2, [r7, #28]
 80089a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089a8:	f7f8 f97e 	bl	8000ca8 <__aeabi_uldivmod>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4613      	mov	r3, r2
 80089b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	3301      	adds	r3, #1
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80089c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089ce:	e002      	b.n	80089d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3750      	adds	r7, #80	; 0x50
 80089dc:	46bd      	mov	sp, r7
 80089de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089e2:	bf00      	nop
 80089e4:	40023800 	.word	0x40023800
 80089e8:	00f42400 	.word	0x00f42400
 80089ec:	007a1200 	.word	0x007a1200

080089f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089f4:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80089f6:	681b      	ldr	r3, [r3, #0]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000094 	.word	0x20000094

08008a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a0c:	f7ff fff0 	bl	80089f0 <HAL_RCC_GetHCLKFreq>
 8008a10:	4602      	mov	r2, r0
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	0a9b      	lsrs	r3, r3, #10
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	4903      	ldr	r1, [pc, #12]	; (8008a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a1e:	5ccb      	ldrb	r3, [r1, r3]
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40023800 	.word	0x40023800
 8008a2c:	08015efc 	.word	0x08015efc

08008a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a34:	f7ff ffdc 	bl	80089f0 <HAL_RCC_GetHCLKFreq>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	0b5b      	lsrs	r3, r3, #13
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	4903      	ldr	r1, [pc, #12]	; (8008a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a46:	5ccb      	ldrb	r3, [r1, r3]
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40023800 	.word	0x40023800
 8008a54:	08015efc 	.word	0x08015efc

08008a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d075      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a8c:	4b91      	ldr	r3, [pc, #580]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a92:	f7fd ff2b 	bl	80068ec <HAL_GetTick>
 8008a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a98:	e008      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a9a:	f7fd ff27 	bl	80068ec <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e189      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008aac:	4b8a      	ldr	r3, [pc, #552]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	019a      	lsls	r2, r3, #6
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	071b      	lsls	r3, r3, #28
 8008ad0:	4981      	ldr	r1, [pc, #516]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01f      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ae4:	4b7c      	ldr	r3, [pc, #496]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	0f1b      	lsrs	r3, r3, #28
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	019a      	lsls	r2, r3, #6
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	431a      	orrs	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	071b      	lsls	r3, r3, #28
 8008b04:	4974      	ldr	r1, [pc, #464]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b0c:	4b72      	ldr	r3, [pc, #456]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b12:	f023 021f 	bic.w	r2, r3, #31
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	496e      	ldr	r1, [pc, #440]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00d      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	019a      	lsls	r2, r3, #6
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	061b      	lsls	r3, r3, #24
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	071b      	lsls	r3, r3, #28
 8008b44:	4964      	ldr	r1, [pc, #400]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b4c:	4b61      	ldr	r3, [pc, #388]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b52:	f7fd fecb 	bl	80068ec <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b58:	e008      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b5a:	f7fd fec7 	bl	80068ec <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e129      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b6c:	4b5a      	ldr	r3, [pc, #360]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f0      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d079      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b90:	4b52      	ldr	r3, [pc, #328]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b96:	f7fd fea9 	bl	80068ec <HAL_GetTick>
 8008b9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b9c:	e008      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008b9e:	f7fd fea5 	bl	80068ec <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e107      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008bb0:	4b49      	ldr	r3, [pc, #292]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bbc:	d0ef      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d020      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bca:	4b43      	ldr	r3, [pc, #268]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd0:	0f1b      	lsrs	r3, r3, #28
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	019a      	lsls	r2, r3, #6
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	061b      	lsls	r3, r3, #24
 8008be4:	431a      	orrs	r2, r3
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	071b      	lsls	r3, r3, #28
 8008bea:	493b      	ldr	r1, [pc, #236]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008bf2:	4b39      	ldr	r3, [pc, #228]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	4934      	ldr	r1, [pc, #208]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0308 	and.w	r3, r3, #8
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01e      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c18:	4b2f      	ldr	r3, [pc, #188]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	0e1b      	lsrs	r3, r3, #24
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	019a      	lsls	r2, r3, #6
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	061b      	lsls	r3, r3, #24
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	071b      	lsls	r3, r3, #28
 8008c38:	4927      	ldr	r1, [pc, #156]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008c40:	4b25      	ldr	r3, [pc, #148]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	4922      	ldr	r1, [pc, #136]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c56:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c5c:	f7fd fe46 	bl	80068ec <HAL_GetTick>
 8008c60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008c64:	f7fd fe42 	bl	80068ec <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e0a4      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c76:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c82:	d1ef      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 808b 	beq.w	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	4a0f      	ldr	r2, [pc, #60]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008cae:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a0b      	ldr	r2, [pc, #44]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cba:	f7fd fe17 	bl	80068ec <HAL_GetTick>
 8008cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008cc0:	e010      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cc2:	f7fd fe13 	bl	80068ec <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d909      	bls.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e075      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008cd4:	42470068 	.word	0x42470068
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	42470070 	.word	0x42470070
 8008ce0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ce4:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0e8      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cf0:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d02f      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d028      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d0e:	4b2f      	ldr	r3, [pc, #188]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d18:	4b2d      	ldr	r3, [pc, #180]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d1e:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008d24:	4a29      	ldr	r2, [pc, #164]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d2a:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d114      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008d36:	f7fd fdd9 	bl	80068ec <HAL_GetTick>
 8008d3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d3c:	e00a      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d3e:	f7fd fdd5 	bl	80068ec <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e035      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d54:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ee      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d6c:	d10d      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008d6e:	4b17      	ldr	r3, [pc, #92]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d82:	4912      	ldr	r1, [pc, #72]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	608b      	str	r3, [r1, #8]
 8008d88:	e005      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008d8a:	4b10      	ldr	r3, [pc, #64]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	4a0f      	ldr	r2, [pc, #60]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008d94:	6093      	str	r3, [r2, #8]
 8008d96:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008da2:	490a      	ldr	r1, [pc, #40]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008dba:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008dbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40007000 	.word	0x40007000
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	42470e40 	.word	0x42470e40
 8008dd4:	424711e0 	.word	0x424711e0

08008dd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e066      	b.n	8008ebc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7f5b      	ldrb	r3, [r3, #29]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7fb fbb4 	bl	800456c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	22ca      	movs	r2, #202	; 0xca
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2253      	movs	r2, #83	; 0x53
 8008e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f927 	bl	800906e <RTC_EnterInitMode>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d12c      	bne.n	8008e84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6899      	ldr	r1, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68d2      	ldr	r2, [r2, #12]
 8008e64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6919      	ldr	r1, [r3, #16]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	041a      	lsls	r2, r3, #16
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f92e 	bl	80090dc <RTC_ExitInitMode>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d113      	bne.n	8008eb2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	22ff      	movs	r2, #255	; 0xff
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ef6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008efa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	0a1b      	lsrs	r3, r3, #8
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	0d9b      	lsrs	r3, r3, #22
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d11a      	bne.n	8008f76 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f8ee 	bl	8009126 <RTC_Bcd2ToByte>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f8e5 	bl	8009126 <RTC_Bcd2ToByte>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	789b      	ldrb	r3, [r3, #2]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 f8dc 	bl	8009126 <RTC_Bcd2ToByte>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	0a1b      	lsrs	r3, r3, #8
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	0b5b      	lsrs	r3, r3, #13
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d11a      	bne.n	8009014 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	78db      	ldrb	r3, [r3, #3]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f89f 	bl	8009126 <RTC_Bcd2ToByte>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	461a      	mov	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	785b      	ldrb	r3, [r3, #1]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f896 	bl	8009126 <RTC_Bcd2ToByte>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f88d 	bl	8009126 <RTC_Bcd2ToByte>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009038:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800903a:	f7fd fc57 	bl	80068ec <HAL_GetTick>
 800903e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009040:	e009      	b.n	8009056 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009042:	f7fd fc53 	bl	80068ec <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009050:	d901      	bls.n	8009056 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e007      	b.n	8009066 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0ee      	beq.n	8009042 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d122      	bne.n	80090d2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800909a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800909c:	f7fd fc26 	bl	80068ec <HAL_GetTick>
 80090a0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090a2:	e00c      	b.n	80090be <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090a4:	f7fd fc22 	bl	80068ec <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b2:	d904      	bls.n	80090be <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2204      	movs	r2, #4
 80090b8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <RTC_EnterInitMode+0x64>
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d1e8      	bne.n	80090a4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff ff89 	bl	800901e <HAL_RTC_WaitForSynchro>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2204      	movs	r2, #4
 8009116:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	4603      	mov	r3, r0
 800912e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	091b      	lsrs	r3, r3, #4
 8009138:	b2db      	uxtb	r3, r3
 800913a:	461a      	mov	r2, r3
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	4413      	add	r3, r2
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	b2da      	uxtb	r2, r3
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4413      	add	r3, r2
 8009150:	b2db      	uxtb	r3, r3
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e022      	b.n	80091b6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d105      	bne.n	8009188 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7fb fa3c 	bl	8004600 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2203      	movs	r2, #3
 800918c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f815 	bl	80091c0 <HAL_SD_InitCard>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e00a      	b.n	80091b6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091c0:	b5b0      	push	{r4, r5, r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80091cc:	2300      	movs	r3, #0
 80091ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80091dc:	2376      	movs	r3, #118	; 0x76
 80091de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681d      	ldr	r5, [r3, #0]
 80091e4:	466c      	mov	r4, sp
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091f8:	4628      	mov	r0, r5
 80091fa:	f002 ffb9 	bl	800c170 <SDIO_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e04f      	b.n	80092b0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009210:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <HAL_SD_InitCard+0xf8>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f002 fff1 	bl	800c202 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <HAL_SD_InitCard+0xf8>)
 8009222:	2201      	movs	r2, #1
 8009224:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009226:	2002      	movs	r0, #2
 8009228:	f7fd fb6c 	bl	8006904 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fe69 	bl	8009f04 <SD_PowerON>
 8009232:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e02e      	b.n	80092b0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fd88 	bl	8009d68 <SD_InitCard>
 8009258:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e01b      	b.n	80092b0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009280:	4618      	mov	r0, r3
 8009282:	f003 f850 	bl	800c326 <SDMMC_CmdBlockLength>
 8009286:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00f      	beq.n	80092ae <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <HAL_SD_InitCard+0xfc>)
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3728      	adds	r7, #40	; 0x28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bdb0      	pop	{r4, r5, r7, pc}
 80092b8:	422580a0 	.word	0x422580a0
 80092bc:	004005ff 	.word	0x004005ff

080092c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b092      	sub	sp, #72	; 0x48
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092ce:	f7fd fb0d 	bl	80068ec <HAL_GetTick>
 80092d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d107      	bne.n	80092f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e1bd      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	f040 81b0 	bne.w	8009660 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009310:	429a      	cmp	r2, r3
 8009312:	d907      	bls.n	8009324 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e1a4      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2203      	movs	r2, #3
 8009328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2200      	movs	r2, #0
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	2b01      	cmp	r3, #1
 800933a:	d002      	beq.n	8009342 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	025b      	lsls	r3, r3, #9
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009342:	f04f 33ff 	mov.w	r3, #4294967295
 8009346:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800934e:	2390      	movs	r3, #144	; 0x90
 8009350:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009352:	2302      	movs	r3, #2
 8009354:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009356:	2300      	movs	r3, #0
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800935a:	2301      	movs	r3, #1
 800935c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f107 0214 	add.w	r2, r7, #20
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f002 ffb0 	bl	800c2ce <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d90a      	bls.n	800938a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2202      	movs	r2, #2
 8009378:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f003 f814 	bl	800c3ae <SDMMC_CmdReadMultiBlock>
 8009386:	6478      	str	r0, [r7, #68]	; 0x44
 8009388:	e009      	b.n	800939e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009396:	4618      	mov	r0, r3
 8009398:	f002 ffe7 	bl	800c36a <SDMMC_CmdReadSingleBlock>
 800939c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d012      	beq.n	80093ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a7a      	ldr	r2, [pc, #488]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b2:	431a      	orrs	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e151      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80093ce:	e061      	b.n	8009494 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d03c      	beq.n	8009458 <HAL_SD_ReadBlocks+0x198>
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d039      	beq.n	8009458 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	643b      	str	r3, [r7, #64]	; 0x40
 80093e8:	e033      	b.n	8009452 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f002 fee9 	bl	800c1c6 <SDIO_ReadFIFO>
 80093f4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80093fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009400:	3301      	adds	r3, #1
 8009402:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	3b01      	subs	r3, #1
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	b2da      	uxtb	r2, r3
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	3301      	adds	r3, #1
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	3b01      	subs	r3, #1
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	b2da      	uxtb	r2, r3
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009428:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942c:	3301      	adds	r3, #1
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009432:	3b01      	subs	r3, #1
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	0e1b      	lsrs	r3, r3, #24
 800943a:	b2da      	uxtb	r2, r3
 800943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	3301      	adds	r3, #1
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	3b01      	subs	r3, #1
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800944c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800944e:	3301      	adds	r3, #1
 8009450:	643b      	str	r3, [r7, #64]	; 0x40
 8009452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009454:	2b07      	cmp	r3, #7
 8009456:	d9c8      	bls.n	80093ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009458:	f7fd fa48 	bl	80068ec <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009464:	429a      	cmp	r2, r3
 8009466:	d902      	bls.n	800946e <HAL_SD_ReadBlocks+0x1ae>
 8009468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946a:	2b00      	cmp	r3, #0
 800946c:	d112      	bne.n	8009494 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a48      	ldr	r2, [pc, #288]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 8009474:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e0ec      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800949a:	f240 332a 	movw	r3, #810	; 0x32a
 800949e:	4013      	ands	r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d095      	beq.n	80093d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d022      	beq.n	80094f8 <HAL_SD_ReadBlocks+0x238>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d91f      	bls.n	80094f8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d01b      	beq.n	80094f8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f002 ffd9 	bl	800c47c <SDMMC_CmdStopTransfer>
 80094ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80094cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d012      	beq.n	80094f8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a2f      	ldr	r2, [pc, #188]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e0:	431a      	orrs	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0ba      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0308 	and.w	r3, r3, #8
 8009502:	2b00      	cmp	r3, #0
 8009504:	d012      	beq.n	800952c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a22      	ldr	r2, [pc, #136]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	f043 0208 	orr.w	r2, r3, #8
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e0a0      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	f003 0302 	and.w	r3, r3, #2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d012      	beq.n	8009560 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a15      	ldr	r2, [pc, #84]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	f043 0202 	orr.w	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e086      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d063      	beq.n	8009636 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a08      	ldr	r2, [pc, #32]	; (8009594 <HAL_SD_ReadBlocks+0x2d4>)
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f043 0220 	orr.w	r2, r3, #32
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e06c      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
 8009594:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f002 fe12 	bl	800c1c6 <SDIO_ReadFIFO>
 80095a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	3301      	adds	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b4:	3b01      	subs	r3, #1
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	3301      	adds	r3, #1
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ca:	3b01      	subs	r3, #1
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	3301      	adds	r3, #1
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e0:	3b01      	subs	r3, #1
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	0e1b      	lsrs	r3, r3, #24
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	3301      	adds	r3, #1
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	3b01      	subs	r3, #1
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80095fa:	f7fd f977 	bl	80068ec <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009606:	429a      	cmp	r2, r3
 8009608:	d902      	bls.n	8009610 <HAL_SD_ReadBlocks+0x350>
 800960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960c:	2b00      	cmp	r3, #0
 800960e:	d112      	bne.n	8009636 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a18      	ldr	r2, [pc, #96]	; (8009678 <HAL_SD_ReadBlocks+0x3b8>)
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e01b      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_SD_ReadBlocks+0x38a>
 8009644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1a6      	bne.n	8009598 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009652:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e006      	b.n	800966e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
  }
}
 800966e:	4618      	mov	r0, r3
 8009670:	3748      	adds	r7, #72	; 0x48
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	004005ff 	.word	0x004005ff

0800967c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b092      	sub	sp, #72	; 0x48
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800968a:	f7fd f92f 	bl	80068ec <HAL_GetTick>
 800968e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d107      	bne.n	80096ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e166      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	f040 8159 	bne.w	800996e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80096c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	441a      	add	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d907      	bls.n	80096e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e14d      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2203      	movs	r2, #3
 80096e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2200      	movs	r2, #0
 80096ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d002      	beq.n	80096fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	025b      	lsls	r3, r3, #9
 80096fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009702:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	025b      	lsls	r3, r3, #9
 8009708:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800970a:	2390      	movs	r3, #144	; 0x90
 800970c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800970e:	2300      	movs	r3, #0
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009712:	2300      	movs	r3, #0
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009716:	2301      	movs	r3, #1
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f107 0218 	add.w	r2, r7, #24
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f002 fdd2 	bl	800c2ce <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d90a      	bls.n	8009746 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800973c:	4618      	mov	r0, r3
 800973e:	f002 fe7a 	bl	800c436 <SDMMC_CmdWriteMultiBlock>
 8009742:	6478      	str	r0, [r7, #68]	; 0x44
 8009744:	e009      	b.n	800975a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2210      	movs	r2, #16
 800974a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009752:	4618      	mov	r0, r3
 8009754:	f002 fe4d 	bl	800c3f2 <SDMMC_CmdWriteSingleBlock>
 8009758:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975c:	2b00      	cmp	r3, #0
 800975e:	d012      	beq.n	8009786 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a87      	ldr	r2, [pc, #540]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800976e:	431a      	orrs	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e0fa      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800978a:	e065      	b.n	8009858 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d040      	beq.n	800981c <HAL_SD_WriteBlocks+0x1a0>
 800979a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d03d      	beq.n	800981c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80097a0:	2300      	movs	r3, #0
 80097a2:	643b      	str	r3, [r7, #64]	; 0x40
 80097a4:	e037      	b.n	8009816 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	3301      	adds	r3, #1
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b4:	3b01      	subs	r3, #1
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	021a      	lsls	r2, r3, #8
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	3301      	adds	r3, #1
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097cc:	3b01      	subs	r3, #1
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	041a      	lsls	r2, r3, #16
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4313      	orrs	r3, r2
 80097da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	3301      	adds	r3, #1
 80097e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e4:	3b01      	subs	r3, #1
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	061a      	lsls	r2, r3, #24
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	3301      	adds	r3, #1
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fc:	3b01      	subs	r3, #1
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f107 0214 	add.w	r2, r7, #20
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f002 fce8 	bl	800c1e0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009812:	3301      	adds	r3, #1
 8009814:	643b      	str	r3, [r7, #64]	; 0x40
 8009816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009818:	2b07      	cmp	r3, #7
 800981a:	d9c4      	bls.n	80097a6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800981c:	f7fd f866 	bl	80068ec <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009828:	429a      	cmp	r2, r3
 800982a:	d902      	bls.n	8009832 <HAL_SD_WriteBlocks+0x1b6>
 800982c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982e:	2b00      	cmp	r3, #0
 8009830:	d112      	bne.n	8009858 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a53      	ldr	r2, [pc, #332]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800983e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009840:	431a      	orrs	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e091      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800985e:	f240 331a 	movw	r3, #794	; 0x31a
 8009862:	4013      	ands	r3, r2
 8009864:	2b00      	cmp	r3, #0
 8009866:	d091      	beq.n	800978c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009872:	2b00      	cmp	r3, #0
 8009874:	d022      	beq.n	80098bc <HAL_SD_WriteBlocks+0x240>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d91f      	bls.n	80098bc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	2b03      	cmp	r3, #3
 8009882:	d01b      	beq.n	80098bc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f002 fdf7 	bl	800c47c <SDMMC_CmdStopTransfer>
 800988e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009892:	2b00      	cmp	r3, #0
 8009894:	d012      	beq.n	80098bc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a3a      	ldr	r2, [pc, #232]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a4:	431a      	orrs	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e05f      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c2:	f003 0308 	and.w	r3, r3, #8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d012      	beq.n	80098f0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2d      	ldr	r2, [pc, #180]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 80098d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	f043 0208 	orr.w	r2, r3, #8
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e045      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d012      	beq.n	8009924 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a20      	ldr	r2, [pc, #128]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	f043 0202 	orr.w	r2, r3, #2
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e02b      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992a:	f003 0310 	and.w	r3, r3, #16
 800992e:	2b00      	cmp	r3, #0
 8009930:	d012      	beq.n	8009958 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a13      	ldr	r2, [pc, #76]	; (8009984 <HAL_SD_WriteBlocks+0x308>)
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	f043 0210 	orr.w	r2, r3, #16
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e011      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009960:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	e006      	b.n	800997c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
  }
}
 800997c:	4618      	mov	r0, r3
 800997e:	3748      	adds	r7, #72	; 0x48
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	004005ff 	.word	0x004005ff

08009988 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009996:	0f9b      	lsrs	r3, r3, #30
 8009998:	b2da      	uxtb	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a2:	0e9b      	lsrs	r3, r3, #26
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 030f 	and.w	r3, r3, #15
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b4:	0e1b      	lsrs	r3, r3, #24
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c6:	0c1b      	lsrs	r3, r3, #16
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099d2:	0a1b      	lsrs	r3, r3, #8
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e8:	0d1b      	lsrs	r3, r3, #20
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099f4:	0c1b      	lsrs	r3, r3, #16
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a06:	0bdb      	lsrs	r3, r3, #15
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a18:	0b9b      	lsrs	r3, r3, #14
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a2a:	0b5b      	lsrs	r3, r3, #13
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a3c:	0b1b      	lsrs	r3, r3, #12
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d163      	bne.n	8009b20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a5c:	009a      	lsls	r2, r3, #2
 8009a5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009a62:	4013      	ands	r3, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009a68:	0f92      	lsrs	r2, r2, #30
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a74:	0edb      	lsrs	r3, r3, #27
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a86:	0e1b      	lsrs	r3, r3, #24
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a98:	0d5b      	lsrs	r3, r3, #21
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aaa:	0c9b      	lsrs	r3, r3, #18
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009abc:	0bdb      	lsrs	r3, r3, #15
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	7e1b      	ldrb	r3, [r3, #24]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	3302      	adds	r3, #2
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009aea:	fb03 f202 	mul.w	r2, r3, r2
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	7a1b      	ldrb	r3, [r3, #8]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 030f 	and.w	r3, r3, #15
 8009afc:	2201      	movs	r2, #1
 8009afe:	409a      	lsls	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009b0c:	0a52      	lsrs	r2, r2, #9
 8009b0e:	fb03 f202 	mul.w	r2, r3, r2
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8009b1e:	e031      	b.n	8009b84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d11d      	bne.n	8009b64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b2c:	041b      	lsls	r3, r3, #16
 8009b2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b36:	0c1b      	lsrs	r3, r3, #16
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	3301      	adds	r3, #1
 8009b44:	029a      	lsls	r2, r3, #10
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	661a      	str	r2, [r3, #96]	; 0x60
 8009b62:	e00f      	b.n	8009b84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a58      	ldr	r2, [pc, #352]	; (8009ccc <HAL_SD_GetCardCSD+0x344>)
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e09d      	b.n	8009cc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b88:	0b9b      	lsrs	r3, r3, #14
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b9a:	09db      	lsrs	r3, r3, #7
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbc:	0fdb      	lsrs	r3, r3, #31
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc8:	0f5b      	lsrs	r3, r3, #29
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	0e9b      	lsrs	r3, r3, #26
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bec:	0d9b      	lsrs	r3, r3, #22
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 030f 	and.w	r3, r3, #15
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfe:	0d5b      	lsrs	r3, r3, #21
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	0c1b      	lsrs	r3, r3, #16
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	0bdb      	lsrs	r3, r3, #15
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c42:	0b9b      	lsrs	r3, r3, #14
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	0b5b      	lsrs	r3, r3, #13
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6a:	0b1b      	lsrs	r3, r3, #12
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7e:	0a9b      	lsrs	r3, r3, #10
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c92:	0a1b      	lsrs	r3, r3, #8
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca6:	085b      	lsrs	r3, r3, #1
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	004005ff 	.word	0x004005ff

08009cd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009d34:	f107 030c 	add.w	r3, r7, #12
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f970 	bl	800a020 <SD_SendStatus>
 8009d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	0a5b      	lsrs	r3, r3, #9
 8009d58:	f003 030f 	and.w	r3, r3, #15
 8009d5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009d5e:	693b      	ldr	r3, [r7, #16]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d68:	b5b0      	push	{r4, r5, r7, lr}
 8009d6a:	b094      	sub	sp, #80	; 0x50
 8009d6c:	af04      	add	r7, sp, #16
 8009d6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d70:	2301      	movs	r3, #1
 8009d72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f002 fa50 	bl	800c21e <SDIO_GetPowerState>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d88:	e0b8      	b.n	8009efc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d02f      	beq.n	8009df2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f002 fc37 	bl	800c60a <SDMMC_CmdSendCID>
 8009d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <SD_InitCard+0x40>
    {
      return errorstate;
 8009da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da6:	e0a9      	b.n	8009efc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2100      	movs	r1, #0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f002 fa7a 	bl	800c2a8 <SDIO_GetResponse>
 8009db4:	4602      	mov	r2, r0
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f002 fa71 	bl	800c2a8 <SDIO_GetResponse>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2108      	movs	r1, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 fa68 	bl	800c2a8 <SDIO_GetResponse>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	210c      	movs	r1, #12
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 fa5f 	bl	800c2a8 <SDIO_GetResponse>
 8009dea:	4602      	mov	r2, r0
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d00d      	beq.n	8009e16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f107 020e 	add.w	r2, r7, #14
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f002 fc3d 	bl	800c684 <SDMMC_CmdSetRelAdd>
 8009e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <SD_InitCard+0xae>
    {
      return errorstate;
 8009e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e14:	e072      	b.n	8009efc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d036      	beq.n	8009e8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e1e:	89fb      	ldrh	r3, [r7, #14]
 8009e20:	461a      	mov	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f002 fc07 	bl	800c646 <SDMMC_CmdSendCSD>
 8009e38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e42:	e05b      	b.n	8009efc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f002 fa2c 	bl	800c2a8 <SDIO_GetResponse>
 8009e50:	4602      	mov	r2, r0
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2104      	movs	r1, #4
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fa23 	bl	800c2a8 <SDIO_GetResponse>
 8009e62:	4602      	mov	r2, r0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2108      	movs	r1, #8
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 fa1a 	bl	800c2a8 <SDIO_GetResponse>
 8009e74:	4602      	mov	r2, r0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	210c      	movs	r1, #12
 8009e80:	4618      	mov	r0, r3
 8009e82:	f002 fa11 	bl	800c2a8 <SDIO_GetResponse>
 8009e86:	4602      	mov	r2, r0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2104      	movs	r1, #4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fa08 	bl	800c2a8 <SDIO_GetResponse>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	0d1a      	lsrs	r2, r3, #20
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fd6e 	bl	8009988 <HAL_SD_GetCardCSD>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eb6:	e021      	b.n	8009efc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6819      	ldr	r1, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec0:	041b      	lsls	r3, r3, #16
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	461c      	mov	r4, r3
 8009ec6:	4615      	mov	r5, r2
 8009ec8:	4622      	mov	r2, r4
 8009eca:	462b      	mov	r3, r5
 8009ecc:	4608      	mov	r0, r1
 8009ece:	f002 faf7 	bl	800c4c0 <SDMMC_CmdSelDesel>
 8009ed2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <SD_InitCard+0x176>
  {
    return errorstate;
 8009eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009edc:	e00e      	b.n	8009efc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681d      	ldr	r5, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	466c      	mov	r4, sp
 8009ee6:	f103 0210 	add.w	r2, r3, #16
 8009eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8009eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f002 f93b 	bl	800c170 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3740      	adds	r7, #64	; 0x40
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bdb0      	pop	{r4, r5, r7, pc}

08009f04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f002 faf2 	bl	800c506 <SDMMC_CmdGoIdleState>
 8009f22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	e072      	b.n	800a014 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fb05 	bl	800c542 <SDMMC_CmdOperCond>
 8009f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00d      	beq.n	8009f5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f002 fadb 	bl	800c506 <SDMMC_CmdGoIdleState>
 8009f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	e05b      	b.n	800a014 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d137      	bne.n	8009fda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 fb05 	bl	800c580 <SDMMC_CmdAppCommand>
 8009f76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02d      	beq.n	8009fda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f82:	e047      	b.n	800a014 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 faf8 	bl	800c580 <SDMMC_CmdAppCommand>
 8009f90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <SD_PowerON+0x98>
    {
      return errorstate;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	e03b      	b.n	800a014 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	491e      	ldr	r1, [pc, #120]	; (800a01c <SD_PowerON+0x118>)
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f002 fb0e 	bl	800c5c4 <SDMMC_CmdAppOperCommand>
 8009fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fb4:	e02e      	b.n	800a014 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 f973 	bl	800c2a8 <SDIO_GetResponse>
 8009fc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	0fdb      	lsrs	r3, r3, #31
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <SD_PowerON+0xcc>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e000      	b.n	8009fd2 <SD_PowerON+0xce>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	613b      	str	r3, [r7, #16]

    count++;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d802      	bhi.n	8009fea <SD_PowerON+0xe6>
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0cc      	beq.n	8009f84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d902      	bls.n	8009ffa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff8:	e00c      	b.n	800a014 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	645a      	str	r2, [r3, #68]	; 0x44
 800a00a:	e002      	b.n	800a012 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	c1100000 	.word	0xc1100000

0800a020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a034:	e018      	b.n	800a068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f002 fb3f 	bl	800c6c6 <SDMMC_CmdSendStatus>
 800a048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	e009      	b.n	800a068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2100      	movs	r1, #0
 800a05a:	4618      	mov	r0, r3
 800a05c:	f002 f924 	bl	800c2a8 <SDIO_GetResponse>
 800a060:	4602      	mov	r2, r0
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e07b      	b.n	800a17a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	d108      	bne.n	800a09c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a092:	d009      	beq.n	800a0a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	61da      	str	r2, [r3, #28]
 800a09a:	e005      	b.n	800a0a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7fa fb3a 	bl	800473c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a118:	431a      	orrs	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12c:	ea42 0103 	orr.w	r1, r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	0c1b      	lsrs	r3, r3, #16
 800a146:	f003 0104 	and.w	r1, r3, #4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	f003 0210 	and.w	r2, r3, #16
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69da      	ldr	r2, [r3, #28]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b088      	sub	sp, #32
 800a186:	af00      	add	r7, sp, #0
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	603b      	str	r3, [r7, #0]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_SPI_Transmit+0x22>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e126      	b.n	800a3f2 <HAL_SPI_Transmit+0x270>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1ac:	f7fc fb9e 	bl	80068ec <HAL_GetTick>
 800a1b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a1b2:	88fb      	ldrh	r3, [r7, #6]
 800a1b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d002      	beq.n	800a1c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a1c6:	e10b      	b.n	800a3e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_SPI_Transmit+0x52>
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a1d8:	e102      	b.n	800a3e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	88fa      	ldrh	r2, [r7, #6]
 800a1f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	88fa      	ldrh	r2, [r7, #6]
 800a1f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a220:	d10f      	bne.n	800a242 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d007      	beq.n	800a260 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a25e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a268:	d14b      	bne.n	800a302 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <HAL_SPI_Transmit+0xf6>
 800a272:	8afb      	ldrh	r3, [r7, #22]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d13e      	bne.n	800a2f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	881a      	ldrh	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	1c9a      	adds	r2, r3, #2
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a292:	b29b      	uxth	r3, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	b29a      	uxth	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a29c:	e02b      	b.n	800a2f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d112      	bne.n	800a2d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	1c9a      	adds	r2, r3, #2
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2d0:	e011      	b.n	800a2f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2d2:	f7fc fb0b 	bl	80068ec <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d803      	bhi.n	800a2ea <HAL_SPI_Transmit+0x168>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d102      	bne.n	800a2f0 <HAL_SPI_Transmit+0x16e>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d102      	bne.n	800a2f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2f4:	e074      	b.n	800a3e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1ce      	bne.n	800a29e <HAL_SPI_Transmit+0x11c>
 800a300:	e04c      	b.n	800a39c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_SPI_Transmit+0x18e>
 800a30a:	8afb      	ldrh	r3, [r7, #22]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d140      	bne.n	800a392 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	330c      	adds	r3, #12
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a336:	e02c      	b.n	800a392 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b02      	cmp	r3, #2
 800a344:	d113      	bne.n	800a36e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	330c      	adds	r3, #12
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a362:	b29b      	uxth	r3, r3
 800a364:	3b01      	subs	r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	86da      	strh	r2, [r3, #54]	; 0x36
 800a36c:	e011      	b.n	800a392 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a36e:	f7fc fabd 	bl	80068ec <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d803      	bhi.n	800a386 <HAL_SPI_Transmit+0x204>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a384:	d102      	bne.n	800a38c <HAL_SPI_Transmit+0x20a>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a390:	e026      	b.n	800a3e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a396:	b29b      	uxth	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1cd      	bne.n	800a338 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f8b3 	bl	800a50c <SPI_EndRxTxTransaction>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	613b      	str	r3, [r7, #16]
 800a3ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e000      	b.n	800a3e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a3de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a3f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	4613      	mov	r3, r2
 800a40a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a40c:	f7fc fa6e 	bl	80068ec <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	4413      	add	r3, r2
 800a41a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a41c:	f7fc fa66 	bl	80068ec <HAL_GetTick>
 800a420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a422:	4b39      	ldr	r3, [pc, #228]	; (800a508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	015b      	lsls	r3, r3, #5
 800a428:	0d1b      	lsrs	r3, r3, #20
 800a42a:	69fa      	ldr	r2, [r7, #28]
 800a42c:	fb02 f303 	mul.w	r3, r2, r3
 800a430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a432:	e054      	b.n	800a4de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d050      	beq.n	800a4de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a43c:	f7fc fa56 	bl	80068ec <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d902      	bls.n	800a452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d13d      	bne.n	800a4ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a46a:	d111      	bne.n	800a490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a474:	d004      	beq.n	800a480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a47e:	d107      	bne.n	800a490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a48e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a498:	d10f      	bne.n	800a4ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e017      	b.n	800a4fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	bf0c      	ite	eq
 800a4ee:	2301      	moveq	r3, #1
 800a4f0:	2300      	movne	r3, #0
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d19b      	bne.n	800a434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000094 	.word	0x20000094

0800a50c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a518:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <SPI_EndRxTxTransaction+0x7c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a1b      	ldr	r2, [pc, #108]	; (800a58c <SPI_EndRxTxTransaction+0x80>)
 800a51e:	fba2 2303 	umull	r2, r3, r2, r3
 800a522:	0d5b      	lsrs	r3, r3, #21
 800a524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a528:	fb02 f303 	mul.w	r3, r2, r3
 800a52c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a536:	d112      	bne.n	800a55e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	2180      	movs	r1, #128	; 0x80
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff ff5a 	bl	800a3fc <SPI_WaitFlagStateUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d016      	beq.n	800a57c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a552:	f043 0220 	orr.w	r2, r3, #32
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e00f      	b.n	800a57e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	3b01      	subs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a574:	2b80      	cmp	r3, #128	; 0x80
 800a576:	d0f2      	beq.n	800a55e <SPI_EndRxTxTransaction+0x52>
 800a578:	e000      	b.n	800a57c <SPI_EndRxTxTransaction+0x70>
        break;
 800a57a:	bf00      	nop
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000094 	.word	0x20000094
 800a58c:	165e9f81 	.word	0x165e9f81

0800a590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e041      	b.n	800a626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fa fd72 	bl	80050a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f000 fca8 	bl	800af24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b01      	cmp	r3, #1
 800a642:	d001      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e04e      	b.n	800a6e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a23      	ldr	r2, [pc, #140]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d022      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a672:	d01d      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a1f      	ldr	r2, [pc, #124]	; (800a6f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d018      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a1e      	ldr	r2, [pc, #120]	; (800a6fc <HAL_TIM_Base_Start_IT+0xcc>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d013      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a1c      	ldr	r2, [pc, #112]	; (800a700 <HAL_TIM_Base_Start_IT+0xd0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00e      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a1b      	ldr	r2, [pc, #108]	; (800a704 <HAL_TIM_Base_Start_IT+0xd4>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d009      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a19      	ldr	r2, [pc, #100]	; (800a708 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d004      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x80>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a18      	ldr	r2, [pc, #96]	; (800a70c <HAL_TIM_Base_Start_IT+0xdc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d111      	bne.n	800a6d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	d010      	beq.n	800a6e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 0201 	orr.w	r2, r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d2:	e007      	b.n	800a6e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f042 0201 	orr.w	r2, r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	40010000 	.word	0x40010000
 800a6f8:	40000400 	.word	0x40000400
 800a6fc:	40000800 	.word	0x40000800
 800a700:	40000c00 	.word	0x40000c00
 800a704:	40010400 	.word	0x40010400
 800a708:	40014000 	.word	0x40014000
 800a70c:	40001800 	.word	0x40001800

0800a710 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0201 	bic.w	r2, r2, #1
 800a726:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6a1a      	ldr	r2, [r3, #32]
 800a72e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10f      	bne.n	800a758 <HAL_TIM_Base_Stop_IT+0x48>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a1a      	ldr	r2, [r3, #32]
 800a73e:	f240 4344 	movw	r3, #1092	; 0x444
 800a742:	4013      	ands	r3, r2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d107      	bne.n	800a758 <HAL_TIM_Base_Stop_IT+0x48>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0201 	bic.w	r2, r2, #1
 800a756:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e041      	b.n	800a804 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f839 	bl	800a80c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2202      	movs	r2, #2
 800a79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f000 fbb9 	bl	800af24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d109      	bne.n	800a844 <HAL_TIM_PWM_Start+0x24>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b01      	cmp	r3, #1
 800a83a:	bf14      	ite	ne
 800a83c:	2301      	movne	r3, #1
 800a83e:	2300      	moveq	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	e022      	b.n	800a88a <HAL_TIM_PWM_Start+0x6a>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b04      	cmp	r3, #4
 800a848:	d109      	bne.n	800a85e <HAL_TIM_PWM_Start+0x3e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b01      	cmp	r3, #1
 800a854:	bf14      	ite	ne
 800a856:	2301      	movne	r3, #1
 800a858:	2300      	moveq	r3, #0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	e015      	b.n	800a88a <HAL_TIM_PWM_Start+0x6a>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b08      	cmp	r3, #8
 800a862:	d109      	bne.n	800a878 <HAL_TIM_PWM_Start+0x58>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	bf14      	ite	ne
 800a870:	2301      	movne	r3, #1
 800a872:	2300      	moveq	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	e008      	b.n	800a88a <HAL_TIM_PWM_Start+0x6a>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b01      	cmp	r3, #1
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e07c      	b.n	800a98c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <HAL_TIM_PWM_Start+0x82>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8a0:	e013      	b.n	800a8ca <HAL_TIM_PWM_Start+0xaa>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d104      	bne.n	800a8b2 <HAL_TIM_PWM_Start+0x92>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b0:	e00b      	b.n	800a8ca <HAL_TIM_PWM_Start+0xaa>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d104      	bne.n	800a8c2 <HAL_TIM_PWM_Start+0xa2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c0:	e003      	b.n	800a8ca <HAL_TIM_PWM_Start+0xaa>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fe10 	bl	800b4f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a2d      	ldr	r2, [pc, #180]	; (800a994 <HAL_TIM_PWM_Start+0x174>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d004      	beq.n	800a8ec <HAL_TIM_PWM_Start+0xcc>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <HAL_TIM_PWM_Start+0x178>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d101      	bne.n	800a8f0 <HAL_TIM_PWM_Start+0xd0>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e000      	b.n	800a8f2 <HAL_TIM_PWM_Start+0xd2>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d007      	beq.n	800a906 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a22      	ldr	r2, [pc, #136]	; (800a994 <HAL_TIM_PWM_Start+0x174>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d022      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a918:	d01d      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a1f      	ldr	r2, [pc, #124]	; (800a99c <HAL_TIM_PWM_Start+0x17c>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d018      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1d      	ldr	r2, [pc, #116]	; (800a9a0 <HAL_TIM_PWM_Start+0x180>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d013      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1c      	ldr	r2, [pc, #112]	; (800a9a4 <HAL_TIM_PWM_Start+0x184>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d00e      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a16      	ldr	r2, [pc, #88]	; (800a998 <HAL_TIM_PWM_Start+0x178>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d009      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a18      	ldr	r2, [pc, #96]	; (800a9a8 <HAL_TIM_PWM_Start+0x188>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d004      	beq.n	800a956 <HAL_TIM_PWM_Start+0x136>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <HAL_TIM_PWM_Start+0x18c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d111      	bne.n	800a97a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f003 0307 	and.w	r3, r3, #7
 800a960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b06      	cmp	r3, #6
 800a966:	d010      	beq.n	800a98a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f042 0201 	orr.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a978:	e007      	b.n	800a98a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f042 0201 	orr.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40010000 	.word	0x40010000
 800a998:	40010400 	.word	0x40010400
 800a99c:	40000400 	.word	0x40000400
 800a9a0:	40000800 	.word	0x40000800
 800a9a4:	40000c00 	.word	0x40000c00
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40001800 	.word	0x40001800

0800a9b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d122      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d11b      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f06f 0202 	mvn.w	r2, #2
 800a9dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa77 	bl	800aee6 <HAL_TIM_IC_CaptureCallback>
 800a9f8:	e005      	b.n	800aa06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa69 	bl	800aed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa7a 	bl	800aefa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d122      	bne.n	800aa60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d11b      	bne.n	800aa60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0204 	mvn.w	r2, #4
 800aa30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2202      	movs	r2, #2
 800aa36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fa4d 	bl	800aee6 <HAL_TIM_IC_CaptureCallback>
 800aa4c:	e005      	b.n	800aa5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa3f 	bl	800aed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fa50 	bl	800aefa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0308 	and.w	r3, r3, #8
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	d122      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d11b      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0208 	mvn.w	r2, #8
 800aa84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2204      	movs	r2, #4
 800aa8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa23 	bl	800aee6 <HAL_TIM_IC_CaptureCallback>
 800aaa0:	e005      	b.n	800aaae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa15 	bl	800aed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fa26 	bl	800aefa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d122      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d11b      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f06f 0210 	mvn.w	r2, #16
 800aad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2208      	movs	r2, #8
 800aade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f9f9 	bl	800aee6 <HAL_TIM_IC_CaptureCallback>
 800aaf4:	e005      	b.n	800ab02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f9eb 	bl	800aed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f9fc 	bl	800aefa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d10e      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d107      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f06f 0201 	mvn.w	r2, #1
 800ab2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7f9 fc04 	bl	800433c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d10e      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab4c:	2b80      	cmp	r3, #128	; 0x80
 800ab4e:	d107      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fdca 	bl	800b6f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b40      	cmp	r3, #64	; 0x40
 800ab6c:	d10e      	bne.n	800ab8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab78:	2b40      	cmp	r3, #64	; 0x40
 800ab7a:	d107      	bne.n	800ab8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9c1 	bl	800af0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d10e      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f003 0320 	and.w	r3, r3, #32
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d107      	bne.n	800abb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f06f 0220 	mvn.w	r2, #32
 800abb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fd94 	bl	800b6e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d101      	bne.n	800abde <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abda:	2302      	movs	r3, #2
 800abdc:	e0ae      	b.n	800ad3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b0c      	cmp	r3, #12
 800abea:	f200 809f 	bhi.w	800ad2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800abee:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac29 	.word	0x0800ac29
 800abf8:	0800ad2d 	.word	0x0800ad2d
 800abfc:	0800ad2d 	.word	0x0800ad2d
 800ac00:	0800ad2d 	.word	0x0800ad2d
 800ac04:	0800ac69 	.word	0x0800ac69
 800ac08:	0800ad2d 	.word	0x0800ad2d
 800ac0c:	0800ad2d 	.word	0x0800ad2d
 800ac10:	0800ad2d 	.word	0x0800ad2d
 800ac14:	0800acab 	.word	0x0800acab
 800ac18:	0800ad2d 	.word	0x0800ad2d
 800ac1c:	0800ad2d 	.word	0x0800ad2d
 800ac20:	0800ad2d 	.word	0x0800ad2d
 800ac24:	0800aceb 	.word	0x0800aceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68b9      	ldr	r1, [r7, #8]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 fa18 	bl	800b064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f042 0208 	orr.w	r2, r2, #8
 800ac42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	699a      	ldr	r2, [r3, #24]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0204 	bic.w	r2, r2, #4
 800ac52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6999      	ldr	r1, [r3, #24]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	430a      	orrs	r2, r1
 800ac64:	619a      	str	r2, [r3, #24]
      break;
 800ac66:	e064      	b.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68b9      	ldr	r1, [r7, #8]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fa68 	bl	800b144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6999      	ldr	r1, [r3, #24]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	021a      	lsls	r2, r3, #8
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	430a      	orrs	r2, r1
 800aca6:	619a      	str	r2, [r3, #24]
      break;
 800aca8:	e043      	b.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fabd 	bl	800b230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69da      	ldr	r2, [r3, #28]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f042 0208 	orr.w	r2, r2, #8
 800acc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69da      	ldr	r2, [r3, #28]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0204 	bic.w	r2, r2, #4
 800acd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	69d9      	ldr	r1, [r3, #28]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	691a      	ldr	r2, [r3, #16]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	61da      	str	r2, [r3, #28]
      break;
 800ace8:	e023      	b.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fb11 	bl	800b318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69da      	ldr	r2, [r3, #28]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69da      	ldr	r2, [r3, #28]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69d9      	ldr	r1, [r3, #28]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	021a      	lsls	r2, r3, #8
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	61da      	str	r2, [r3, #28]
      break;
 800ad2a:	e002      	b.n	800ad32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d101      	bne.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e0b4      	b.n	800aeca <HAL_TIM_ConfigClockSource+0x186>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad98:	d03e      	beq.n	800ae18 <HAL_TIM_ConfigClockSource+0xd4>
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9e:	f200 8087 	bhi.w	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800ada2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ada6:	f000 8086 	beq.w	800aeb6 <HAL_TIM_ConfigClockSource+0x172>
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adae:	d87f      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adb0:	2b70      	cmp	r3, #112	; 0x70
 800adb2:	d01a      	beq.n	800adea <HAL_TIM_ConfigClockSource+0xa6>
 800adb4:	2b70      	cmp	r3, #112	; 0x70
 800adb6:	d87b      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adb8:	2b60      	cmp	r3, #96	; 0x60
 800adba:	d050      	beq.n	800ae5e <HAL_TIM_ConfigClockSource+0x11a>
 800adbc:	2b60      	cmp	r3, #96	; 0x60
 800adbe:	d877      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adc0:	2b50      	cmp	r3, #80	; 0x50
 800adc2:	d03c      	beq.n	800ae3e <HAL_TIM_ConfigClockSource+0xfa>
 800adc4:	2b50      	cmp	r3, #80	; 0x50
 800adc6:	d873      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800adc8:	2b40      	cmp	r3, #64	; 0x40
 800adca:	d058      	beq.n	800ae7e <HAL_TIM_ConfigClockSource+0x13a>
 800adcc:	2b40      	cmp	r3, #64	; 0x40
 800adce:	d86f      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800add0:	2b30      	cmp	r3, #48	; 0x30
 800add2:	d064      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800add4:	2b30      	cmp	r3, #48	; 0x30
 800add6:	d86b      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800add8:	2b20      	cmp	r3, #32
 800adda:	d060      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800addc:	2b20      	cmp	r3, #32
 800adde:	d867      	bhi.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d05c      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d05a      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x15a>
 800ade8:	e062      	b.n	800aeb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6899      	ldr	r1, [r3, #8]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f000 fb5d 	bl	800b4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	609a      	str	r2, [r3, #8]
      break;
 800ae16:	e04f      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6899      	ldr	r1, [r3, #8]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f000 fb46 	bl	800b4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689a      	ldr	r2, [r3, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae3a:	609a      	str	r2, [r3, #8]
      break;
 800ae3c:	e03c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	6859      	ldr	r1, [r3, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f000 faba 	bl	800b3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2150      	movs	r1, #80	; 0x50
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fb13 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ae5c:	e02c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	6859      	ldr	r1, [r3, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f000 fad9 	bl	800b422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2160      	movs	r1, #96	; 0x60
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fb03 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ae7c:	e01c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6818      	ldr	r0, [r3, #0]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	6859      	ldr	r1, [r3, #4]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f000 fa9a 	bl	800b3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2140      	movs	r1, #64	; 0x40
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 faf3 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800ae9c:	e00c      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f000 faea 	bl	800b482 <TIM_ITRx_SetConfig>
      break;
 800aeae:	e003      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb4:	e000      	b.n	800aeb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aeb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
	...

0800af24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a40      	ldr	r2, [pc, #256]	; (800b038 <TIM_Base_SetConfig+0x114>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d013      	beq.n	800af64 <TIM_Base_SetConfig+0x40>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af42:	d00f      	beq.n	800af64 <TIM_Base_SetConfig+0x40>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a3d      	ldr	r2, [pc, #244]	; (800b03c <TIM_Base_SetConfig+0x118>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d00b      	beq.n	800af64 <TIM_Base_SetConfig+0x40>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a3c      	ldr	r2, [pc, #240]	; (800b040 <TIM_Base_SetConfig+0x11c>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d007      	beq.n	800af64 <TIM_Base_SetConfig+0x40>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a3b      	ldr	r2, [pc, #236]	; (800b044 <TIM_Base_SetConfig+0x120>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d003      	beq.n	800af64 <TIM_Base_SetConfig+0x40>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a3a      	ldr	r2, [pc, #232]	; (800b048 <TIM_Base_SetConfig+0x124>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d108      	bne.n	800af76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a2f      	ldr	r2, [pc, #188]	; (800b038 <TIM_Base_SetConfig+0x114>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d02b      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af84:	d027      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a2c      	ldr	r2, [pc, #176]	; (800b03c <TIM_Base_SetConfig+0x118>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d023      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a2b      	ldr	r2, [pc, #172]	; (800b040 <TIM_Base_SetConfig+0x11c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d01f      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a2a      	ldr	r2, [pc, #168]	; (800b044 <TIM_Base_SetConfig+0x120>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d01b      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a29      	ldr	r2, [pc, #164]	; (800b048 <TIM_Base_SetConfig+0x124>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d017      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a28      	ldr	r2, [pc, #160]	; (800b04c <TIM_Base_SetConfig+0x128>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d013      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a27      	ldr	r2, [pc, #156]	; (800b050 <TIM_Base_SetConfig+0x12c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00f      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a26      	ldr	r2, [pc, #152]	; (800b054 <TIM_Base_SetConfig+0x130>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d00b      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a25      	ldr	r2, [pc, #148]	; (800b058 <TIM_Base_SetConfig+0x134>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d007      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a24      	ldr	r2, [pc, #144]	; (800b05c <TIM_Base_SetConfig+0x138>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_Base_SetConfig+0xb2>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a23      	ldr	r2, [pc, #140]	; (800b060 <TIM_Base_SetConfig+0x13c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d108      	bne.n	800afe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <TIM_Base_SetConfig+0x114>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d003      	beq.n	800b01c <TIM_Base_SetConfig+0xf8>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a0c      	ldr	r2, [pc, #48]	; (800b048 <TIM_Base_SetConfig+0x124>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d103      	bne.n	800b024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	615a      	str	r2, [r3, #20]
}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	40010000 	.word	0x40010000
 800b03c:	40000400 	.word	0x40000400
 800b040:	40000800 	.word	0x40000800
 800b044:	40000c00 	.word	0x40000c00
 800b048:	40010400 	.word	0x40010400
 800b04c:	40014000 	.word	0x40014000
 800b050:	40014400 	.word	0x40014400
 800b054:	40014800 	.word	0x40014800
 800b058:	40001800 	.word	0x40001800
 800b05c:	40001c00 	.word	0x40001c00
 800b060:	40002000 	.word	0x40002000

0800b064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	f023 0201 	bic.w	r2, r3, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f023 0302 	bic.w	r3, r3, #2
 800b0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a20      	ldr	r2, [pc, #128]	; (800b13c <TIM_OC1_SetConfig+0xd8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x64>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a1f      	ldr	r2, [pc, #124]	; (800b140 <TIM_OC1_SetConfig+0xdc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d10c      	bne.n	800b0e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 0308 	bic.w	r3, r3, #8
 800b0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f023 0304 	bic.w	r3, r3, #4
 800b0e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a15      	ldr	r2, [pc, #84]	; (800b13c <TIM_OC1_SetConfig+0xd8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d003      	beq.n	800b0f2 <TIM_OC1_SetConfig+0x8e>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a14      	ldr	r2, [pc, #80]	; (800b140 <TIM_OC1_SetConfig+0xdc>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d111      	bne.n	800b116 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	4313      	orrs	r3, r2
 800b114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	621a      	str	r2, [r3, #32]
}
 800b130:	bf00      	nop
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	40010000 	.word	0x40010000
 800b140:	40010400 	.word	0x40010400

0800b144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	f023 0210 	bic.w	r2, r3, #16
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b17a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	021b      	lsls	r3, r3, #8
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	4313      	orrs	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f023 0320 	bic.w	r3, r3, #32
 800b18e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	011b      	lsls	r3, r3, #4
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	4313      	orrs	r3, r2
 800b19a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a22      	ldr	r2, [pc, #136]	; (800b228 <TIM_OC2_SetConfig+0xe4>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d003      	beq.n	800b1ac <TIM_OC2_SetConfig+0x68>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a21      	ldr	r2, [pc, #132]	; (800b22c <TIM_OC2_SetConfig+0xe8>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d10d      	bne.n	800b1c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	011b      	lsls	r3, r3, #4
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a17      	ldr	r2, [pc, #92]	; (800b228 <TIM_OC2_SetConfig+0xe4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC2_SetConfig+0x94>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a16      	ldr	r2, [pc, #88]	; (800b22c <TIM_OC2_SetConfig+0xe8>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d113      	bne.n	800b200 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	40010000 	.word	0x40010000
 800b22c:	40010400 	.word	0x40010400

0800b230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	021b      	lsls	r3, r3, #8
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4313      	orrs	r3, r2
 800b284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a21      	ldr	r2, [pc, #132]	; (800b310 <TIM_OC3_SetConfig+0xe0>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_OC3_SetConfig+0x66>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a20      	ldr	r2, [pc, #128]	; (800b314 <TIM_OC3_SetConfig+0xe4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d10d      	bne.n	800b2b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b29c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a16      	ldr	r2, [pc, #88]	; (800b310 <TIM_OC3_SetConfig+0xe0>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d003      	beq.n	800b2c2 <TIM_OC3_SetConfig+0x92>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a15      	ldr	r2, [pc, #84]	; (800b314 <TIM_OC3_SetConfig+0xe4>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d113      	bne.n	800b2ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	621a      	str	r2, [r3, #32]
}
 800b304:	bf00      	nop
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	40010000 	.word	0x40010000
 800b314:	40010400 	.word	0x40010400

0800b318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	031b      	lsls	r3, r3, #12
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a12      	ldr	r2, [pc, #72]	; (800b3bc <TIM_OC4_SetConfig+0xa4>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d003      	beq.n	800b380 <TIM_OC4_SetConfig+0x68>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a11      	ldr	r2, [pc, #68]	; (800b3c0 <TIM_OC4_SetConfig+0xa8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d109      	bne.n	800b394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	019b      	lsls	r3, r3, #6
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	621a      	str	r2, [r3, #32]
}
 800b3ae:	bf00      	nop
 800b3b0:	371c      	adds	r7, #28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40010400 	.word	0x40010400

0800b3c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f023 0201 	bic.w	r2, r3, #1
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f023 030a 	bic.w	r3, r3, #10
 800b400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	621a      	str	r2, [r3, #32]
}
 800b416:	bf00      	nop
 800b418:	371c      	adds	r7, #28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b422:	b480      	push	{r7}
 800b424:	b087      	sub	sp, #28
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
 800b42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	f023 0210 	bic.w	r2, r3, #16
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b44c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	031b      	lsls	r3, r3, #12
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4313      	orrs	r3, r2
 800b456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b45e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	4313      	orrs	r3, r2
 800b468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f043 0307 	orr.w	r3, r3, #7
 800b4a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	609a      	str	r2, [r3, #8]
}
 800b4ac:	bf00      	nop
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	021a      	lsls	r2, r3, #8
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	609a      	str	r2, [r3, #8]
}
 800b4ec:	bf00      	nop
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f003 031f 	and.w	r3, r3, #31
 800b50a:	2201      	movs	r2, #1
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1a      	ldr	r2, [r3, #32]
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	43db      	mvns	r3, r3
 800b51a:	401a      	ands	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a1a      	ldr	r2, [r3, #32]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f003 031f 	and.w	r3, r3, #31
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	fa01 f303 	lsl.w	r3, r1, r3
 800b530:	431a      	orrs	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	621a      	str	r2, [r3, #32]
}
 800b536:	bf00      	nop
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
	...

0800b544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d101      	bne.n	800b55c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b558:	2302      	movs	r3, #2
 800b55a:	e05a      	b.n	800b612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a21      	ldr	r2, [pc, #132]	; (800b620 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d022      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a8:	d01d      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a1d      	ldr	r2, [pc, #116]	; (800b624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d018      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a1b      	ldr	r2, [pc, #108]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d013      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a1a      	ldr	r2, [pc, #104]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d00e      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a18      	ldr	r2, [pc, #96]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d009      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a17      	ldr	r2, [pc, #92]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d004      	beq.n	800b5e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a15      	ldr	r2, [pc, #84]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d10c      	bne.n	800b600 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	40010000 	.word	0x40010000
 800b624:	40000400 	.word	0x40000400
 800b628:	40000800 	.word	0x40000800
 800b62c:	40000c00 	.word	0x40000c00
 800b630:	40010400 	.word	0x40010400
 800b634:	40014000 	.word	0x40014000
 800b638:	40001800 	.word	0x40001800

0800b63c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d101      	bne.n	800b658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b654:	2302      	movs	r3, #2
 800b656:	e03d      	b.n	800b6d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	4313      	orrs	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e03f      	b.n	800b79a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7f9 fe0e 	bl	8005350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2224      	movs	r2, #36	; 0x24
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b74a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa9b 	bl	800bc88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	691a      	ldr	r2, [r3, #16]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	695a      	ldr	r2, [r3, #20]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2220      	movs	r2, #32
 800b794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d11d      	bne.n	800b7f8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <HAL_UART_Receive_DMA+0x26>
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e016      	b.n	800b7fa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_UART_Receive_DMA+0x38>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e00f      	b.n	800b7fa <HAL_UART_Receive_DMA+0x58>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 f920 	bl	800ba34 <UART_Start_Receive_DMA>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	e000      	b.n	800b7fa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b7f8:	2302      	movs	r3, #2
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b09c      	sub	sp, #112	; 0x70
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d172      	bne.n	800b944 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b860:	2200      	movs	r2, #0
 800b862:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	330c      	adds	r3, #12
 800b86a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b87a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	330c      	adds	r3, #12
 800b882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b884:	65ba      	str	r2, [r7, #88]	; 0x58
 800b886:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b88a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b88c:	e841 2300 	strex	r3, r2, [r1]
 800b890:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e5      	bne.n	800b864 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3314      	adds	r3, #20
 800b89e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	f023 0301 	bic.w	r3, r3, #1
 800b8ae:	667b      	str	r3, [r7, #100]	; 0x64
 800b8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3314      	adds	r3, #20
 800b8b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b8b8:	647a      	str	r2, [r7, #68]	; 0x44
 800b8ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3314      	adds	r3, #20
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	623b      	str	r3, [r7, #32]
   return(result);
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e2:	663b      	str	r3, [r7, #96]	; 0x60
 800b8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3314      	adds	r3, #20
 800b8ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8ec:	633a      	str	r2, [r7, #48]	; 0x30
 800b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e5      	bne.n	800b8cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b902:	2220      	movs	r2, #32
 800b904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d119      	bne.n	800b944 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	330c      	adds	r3, #12
 800b916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f023 0310 	bic.w	r3, r3, #16
 800b926:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	330c      	adds	r3, #12
 800b92e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b930:	61fa      	str	r2, [r7, #28]
 800b932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b934:	69b9      	ldr	r1, [r7, #24]
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	617b      	str	r3, [r7, #20]
   return(result);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e5      	bne.n	800b910 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d106      	bne.n	800b95a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b94e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b950:	4619      	mov	r1, r3
 800b952:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b954:	f7ff ff69 	bl	800b82a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b958:	e002      	b.n	800b960 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b95a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b95c:	f7f8 fdb2 	bl	80044c4 <HAL_UART_RxCpltCallback>
}
 800b960:	bf00      	nop
 800b962:	3770      	adds	r7, #112	; 0x70
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b974:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d108      	bne.n	800b990 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b982:	085b      	lsrs	r3, r3, #1
 800b984:	b29b      	uxth	r3, r3
 800b986:	4619      	mov	r1, r3
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7ff ff4e 	bl	800b82a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b98e:	e002      	b.n	800b996 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff ff36 	bl	800b802 <HAL_UART_RxHalfCpltCallback>
}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ba:	2b80      	cmp	r3, #128	; 0x80
 800b9bc:	bf0c      	ite	eq
 800b9be:	2301      	moveq	r3, #1
 800b9c0:	2300      	movne	r3, #0
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b21      	cmp	r3, #33	; 0x21
 800b9d0:	d108      	bne.n	800b9e4 <UART_DMAError+0x46>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d005      	beq.n	800b9e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b9de:	68b8      	ldr	r0, [r7, #8]
 800b9e0:	f000 f8c6 	bl	800bb70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ee:	2b40      	cmp	r3, #64	; 0x40
 800b9f0:	bf0c      	ite	eq
 800b9f2:	2301      	moveq	r3, #1
 800b9f4:	2300      	movne	r3, #0
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b22      	cmp	r3, #34	; 0x22
 800ba04:	d108      	bne.n	800ba18 <UART_DMAError+0x7a>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f000 f8d4 	bl	800bbc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1c:	f043 0210 	orr.w	r2, r3, #16
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba24:	68b8      	ldr	r0, [r7, #8]
 800ba26:	f7ff fef6 	bl	800b816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b098      	sub	sp, #96	; 0x60
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	88fa      	ldrh	r2, [r7, #6]
 800ba4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2222      	movs	r2, #34	; 0x22
 800ba58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba60:	4a40      	ldr	r2, [pc, #256]	; (800bb64 <UART_Start_Receive_DMA+0x130>)
 800ba62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba68:	4a3f      	ldr	r2, [pc, #252]	; (800bb68 <UART_Start_Receive_DMA+0x134>)
 800ba6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	4a3e      	ldr	r2, [pc, #248]	; (800bb6c <UART_Start_Receive_DMA+0x138>)
 800ba72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	2200      	movs	r2, #0
 800ba7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	88fb      	ldrh	r3, [r7, #6]
 800ba94:	f7fb f86b 	bl	8006b6e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ba98:	2300      	movs	r3, #0
 800ba9a:	613b      	str	r3, [r7, #16]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d019      	beq.n	800baf2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	330c      	adds	r3, #12
 800bac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bad4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	330c      	adds	r3, #12
 800badc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bade:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bae0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800baec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e5      	bne.n	800babe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3314      	adds	r3, #20
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	e853 3f00 	ldrex	r3, [r3]
 800bb00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	f043 0301 	orr.w	r3, r3, #1
 800bb08:	657b      	str	r3, [r7, #84]	; 0x54
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3314      	adds	r3, #20
 800bb10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb12:	63ba      	str	r2, [r7, #56]	; 0x38
 800bb14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1e5      	bne.n	800baf2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	617b      	str	r3, [r7, #20]
   return(result);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3314      	adds	r3, #20
 800bb44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb46:	627a      	str	r2, [r7, #36]	; 0x24
 800bb48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6a39      	ldr	r1, [r7, #32]
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e5      	bne.n	800bb26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3760      	adds	r7, #96	; 0x60
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	0800b843 	.word	0x0800b843
 800bb68:	0800b969 	.word	0x0800b969
 800bb6c:	0800b99f 	.word	0x0800b99f

0800bb70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b089      	sub	sp, #36	; 0x24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	330c      	adds	r3, #12
 800bb7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	330c      	adds	r3, #12
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	61ba      	str	r2, [r7, #24]
 800bb9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	6979      	ldr	r1, [r7, #20]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	613b      	str	r3, [r7, #16]
   return(result);
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e5      	bne.n	800bb78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bbb4:	bf00      	nop
 800bbb6:	3724      	adds	r7, #36	; 0x24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b095      	sub	sp, #84	; 0x54
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	330c      	adds	r3, #12
 800bbce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd2:	e853 3f00 	ldrex	r3, [r3]
 800bbd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbe8:	643a      	str	r2, [r7, #64]	; 0x40
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e5      	bne.n	800bbc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3314      	adds	r3, #20
 800bc02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	e853 3f00 	ldrex	r3, [r3]
 800bc0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	f023 0301 	bic.w	r3, r3, #1
 800bc12:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3314      	adds	r3, #20
 800bc1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc24:	e841 2300 	strex	r3, r2, [r1]
 800bc28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1e5      	bne.n	800bbfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d119      	bne.n	800bc6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	e853 3f00 	ldrex	r3, [r3]
 800bc46:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f023 0310 	bic.w	r3, r3, #16
 800bc4e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	330c      	adds	r3, #12
 800bc56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc58:	61ba      	str	r2, [r7, #24]
 800bc5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5c:	6979      	ldr	r1, [r7, #20]
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	e841 2300 	strex	r3, r2, [r1]
 800bc64:	613b      	str	r3, [r7, #16]
   return(result);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e5      	bne.n	800bc38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc7a:	bf00      	nop
 800bc7c:	3754      	adds	r7, #84	; 0x54
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc8c:	b0c0      	sub	sp, #256	; 0x100
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca4:	68d9      	ldr	r1, [r3, #12]
 800bca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	ea40 0301 	orr.w	r3, r0, r1
 800bcb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bce0:	f021 010c 	bic.w	r1, r1, #12
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcee:	430b      	orrs	r3, r1
 800bcf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd02:	6999      	ldr	r1, [r3, #24]
 800bd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	ea40 0301 	orr.w	r3, r0, r1
 800bd0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b8f      	ldr	r3, [pc, #572]	; (800bf54 <UART_SetConfig+0x2cc>)
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d005      	beq.n	800bd28 <UART_SetConfig+0xa0>
 800bd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b8d      	ldr	r3, [pc, #564]	; (800bf58 <UART_SetConfig+0x2d0>)
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d104      	bne.n	800bd32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd28:	f7fc fe82 	bl	8008a30 <HAL_RCC_GetPCLK2Freq>
 800bd2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd30:	e003      	b.n	800bd3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd32:	f7fc fe69 	bl	8008a08 <HAL_RCC_GetPCLK1Freq>
 800bd36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd44:	f040 810c 	bne.w	800bf60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	462b      	mov	r3, r5
 800bd5e:	1891      	adds	r1, r2, r2
 800bd60:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd62:	415b      	adcs	r3, r3
 800bd64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	eb12 0801 	adds.w	r8, r2, r1
 800bd70:	4629      	mov	r1, r5
 800bd72:	eb43 0901 	adc.w	r9, r3, r1
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd8a:	4690      	mov	r8, r2
 800bd8c:	4699      	mov	r9, r3
 800bd8e:	4623      	mov	r3, r4
 800bd90:	eb18 0303 	adds.w	r3, r8, r3
 800bd94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd98:	462b      	mov	r3, r5
 800bd9a:	eb49 0303 	adc.w	r3, r9, r3
 800bd9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bda2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bdb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	18db      	adds	r3, r3, r3
 800bdba:	653b      	str	r3, [r7, #80]	; 0x50
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	eb42 0303 	adc.w	r3, r2, r3
 800bdc2:	657b      	str	r3, [r7, #84]	; 0x54
 800bdc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bdcc:	f7f4 ff6c 	bl	8000ca8 <__aeabi_uldivmod>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4b61      	ldr	r3, [pc, #388]	; (800bf5c <UART_SetConfig+0x2d4>)
 800bdd6:	fba3 2302 	umull	r2, r3, r3, r2
 800bdda:	095b      	lsrs	r3, r3, #5
 800bddc:	011c      	lsls	r4, r3, #4
 800bdde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bde8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bdec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bdf0:	4642      	mov	r2, r8
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	1891      	adds	r1, r2, r2
 800bdf6:	64b9      	str	r1, [r7, #72]	; 0x48
 800bdf8:	415b      	adcs	r3, r3
 800bdfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be00:	4641      	mov	r1, r8
 800be02:	eb12 0a01 	adds.w	sl, r2, r1
 800be06:	4649      	mov	r1, r9
 800be08:	eb43 0b01 	adc.w	fp, r3, r1
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	f04f 0300 	mov.w	r3, #0
 800be14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be20:	4692      	mov	sl, r2
 800be22:	469b      	mov	fp, r3
 800be24:	4643      	mov	r3, r8
 800be26:	eb1a 0303 	adds.w	r3, sl, r3
 800be2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be2e:	464b      	mov	r3, r9
 800be30:	eb4b 0303 	adc.w	r3, fp, r3
 800be34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be4c:	460b      	mov	r3, r1
 800be4e:	18db      	adds	r3, r3, r3
 800be50:	643b      	str	r3, [r7, #64]	; 0x40
 800be52:	4613      	mov	r3, r2
 800be54:	eb42 0303 	adc.w	r3, r2, r3
 800be58:	647b      	str	r3, [r7, #68]	; 0x44
 800be5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be62:	f7f4 ff21 	bl	8000ca8 <__aeabi_uldivmod>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4611      	mov	r1, r2
 800be6c:	4b3b      	ldr	r3, [pc, #236]	; (800bf5c <UART_SetConfig+0x2d4>)
 800be6e:	fba3 2301 	umull	r2, r3, r3, r1
 800be72:	095b      	lsrs	r3, r3, #5
 800be74:	2264      	movs	r2, #100	; 0x64
 800be76:	fb02 f303 	mul.w	r3, r2, r3
 800be7a:	1acb      	subs	r3, r1, r3
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be82:	4b36      	ldr	r3, [pc, #216]	; (800bf5c <UART_SetConfig+0x2d4>)
 800be84:	fba3 2302 	umull	r2, r3, r3, r2
 800be88:	095b      	lsrs	r3, r3, #5
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be90:	441c      	add	r4, r3
 800be92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be96:	2200      	movs	r2, #0
 800be98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bea4:	4642      	mov	r2, r8
 800bea6:	464b      	mov	r3, r9
 800bea8:	1891      	adds	r1, r2, r2
 800beaa:	63b9      	str	r1, [r7, #56]	; 0x38
 800beac:	415b      	adcs	r3, r3
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800beb4:	4641      	mov	r1, r8
 800beb6:	1851      	adds	r1, r2, r1
 800beb8:	6339      	str	r1, [r7, #48]	; 0x30
 800beba:	4649      	mov	r1, r9
 800bebc:	414b      	adcs	r3, r1
 800bebe:	637b      	str	r3, [r7, #52]	; 0x34
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	f04f 0300 	mov.w	r3, #0
 800bec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800becc:	4659      	mov	r1, fp
 800bece:	00cb      	lsls	r3, r1, #3
 800bed0:	4651      	mov	r1, sl
 800bed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bed6:	4651      	mov	r1, sl
 800bed8:	00ca      	lsls	r2, r1, #3
 800beda:	4610      	mov	r0, r2
 800bedc:	4619      	mov	r1, r3
 800bede:	4603      	mov	r3, r0
 800bee0:	4642      	mov	r2, r8
 800bee2:	189b      	adds	r3, r3, r2
 800bee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bee8:	464b      	mov	r3, r9
 800beea:	460a      	mov	r2, r1
 800beec:	eb42 0303 	adc.w	r3, r2, r3
 800bef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf08:	460b      	mov	r3, r1
 800bf0a:	18db      	adds	r3, r3, r3
 800bf0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf0e:	4613      	mov	r3, r2
 800bf10:	eb42 0303 	adc.w	r3, r2, r3
 800bf14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf1e:	f7f4 fec3 	bl	8000ca8 <__aeabi_uldivmod>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	4b0d      	ldr	r3, [pc, #52]	; (800bf5c <UART_SetConfig+0x2d4>)
 800bf28:	fba3 1302 	umull	r1, r3, r3, r2
 800bf2c:	095b      	lsrs	r3, r3, #5
 800bf2e:	2164      	movs	r1, #100	; 0x64
 800bf30:	fb01 f303 	mul.w	r3, r1, r3
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	3332      	adds	r3, #50	; 0x32
 800bf3a:	4a08      	ldr	r2, [pc, #32]	; (800bf5c <UART_SetConfig+0x2d4>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	095b      	lsrs	r3, r3, #5
 800bf42:	f003 0207 	and.w	r2, r3, #7
 800bf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4422      	add	r2, r4
 800bf4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf50:	e105      	b.n	800c15e <UART_SetConfig+0x4d6>
 800bf52:	bf00      	nop
 800bf54:	40011000 	.word	0x40011000
 800bf58:	40011400 	.word	0x40011400
 800bf5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf64:	2200      	movs	r2, #0
 800bf66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf72:	4642      	mov	r2, r8
 800bf74:	464b      	mov	r3, r9
 800bf76:	1891      	adds	r1, r2, r2
 800bf78:	6239      	str	r1, [r7, #32]
 800bf7a:	415b      	adcs	r3, r3
 800bf7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf82:	4641      	mov	r1, r8
 800bf84:	1854      	adds	r4, r2, r1
 800bf86:	4649      	mov	r1, r9
 800bf88:	eb43 0501 	adc.w	r5, r3, r1
 800bf8c:	f04f 0200 	mov.w	r2, #0
 800bf90:	f04f 0300 	mov.w	r3, #0
 800bf94:	00eb      	lsls	r3, r5, #3
 800bf96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf9a:	00e2      	lsls	r2, r4, #3
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	461d      	mov	r5, r3
 800bfa0:	4643      	mov	r3, r8
 800bfa2:	18e3      	adds	r3, r4, r3
 800bfa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	eb45 0303 	adc.w	r3, r5, r3
 800bfae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfc2:	f04f 0200 	mov.w	r2, #0
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bfce:	4629      	mov	r1, r5
 800bfd0:	008b      	lsls	r3, r1, #2
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfd8:	4621      	mov	r1, r4
 800bfda:	008a      	lsls	r2, r1, #2
 800bfdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bfe0:	f7f4 fe62 	bl	8000ca8 <__aeabi_uldivmod>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4b60      	ldr	r3, [pc, #384]	; (800c16c <UART_SetConfig+0x4e4>)
 800bfea:	fba3 2302 	umull	r2, r3, r3, r2
 800bfee:	095b      	lsrs	r3, r3, #5
 800bff0:	011c      	lsls	r4, r3, #4
 800bff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c004:	4642      	mov	r2, r8
 800c006:	464b      	mov	r3, r9
 800c008:	1891      	adds	r1, r2, r2
 800c00a:	61b9      	str	r1, [r7, #24]
 800c00c:	415b      	adcs	r3, r3
 800c00e:	61fb      	str	r3, [r7, #28]
 800c010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c014:	4641      	mov	r1, r8
 800c016:	1851      	adds	r1, r2, r1
 800c018:	6139      	str	r1, [r7, #16]
 800c01a:	4649      	mov	r1, r9
 800c01c:	414b      	adcs	r3, r1
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	f04f 0200 	mov.w	r2, #0
 800c024:	f04f 0300 	mov.w	r3, #0
 800c028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c02c:	4659      	mov	r1, fp
 800c02e:	00cb      	lsls	r3, r1, #3
 800c030:	4651      	mov	r1, sl
 800c032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c036:	4651      	mov	r1, sl
 800c038:	00ca      	lsls	r2, r1, #3
 800c03a:	4610      	mov	r0, r2
 800c03c:	4619      	mov	r1, r3
 800c03e:	4603      	mov	r3, r0
 800c040:	4642      	mov	r2, r8
 800c042:	189b      	adds	r3, r3, r2
 800c044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c048:	464b      	mov	r3, r9
 800c04a:	460a      	mov	r2, r1
 800c04c:	eb42 0303 	adc.w	r3, r2, r3
 800c050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c05e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c060:	f04f 0200 	mov.w	r2, #0
 800c064:	f04f 0300 	mov.w	r3, #0
 800c068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c06c:	4649      	mov	r1, r9
 800c06e:	008b      	lsls	r3, r1, #2
 800c070:	4641      	mov	r1, r8
 800c072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c076:	4641      	mov	r1, r8
 800c078:	008a      	lsls	r2, r1, #2
 800c07a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c07e:	f7f4 fe13 	bl	8000ca8 <__aeabi_uldivmod>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4b39      	ldr	r3, [pc, #228]	; (800c16c <UART_SetConfig+0x4e4>)
 800c088:	fba3 1302 	umull	r1, r3, r3, r2
 800c08c:	095b      	lsrs	r3, r3, #5
 800c08e:	2164      	movs	r1, #100	; 0x64
 800c090:	fb01 f303 	mul.w	r3, r1, r3
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	3332      	adds	r3, #50	; 0x32
 800c09a:	4a34      	ldr	r2, [pc, #208]	; (800c16c <UART_SetConfig+0x4e4>)
 800c09c:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a0:	095b      	lsrs	r3, r3, #5
 800c0a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0a6:	441c      	add	r4, r3
 800c0a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	673b      	str	r3, [r7, #112]	; 0x70
 800c0b0:	677a      	str	r2, [r7, #116]	; 0x74
 800c0b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	1891      	adds	r1, r2, r2
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	415b      	adcs	r3, r3
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	1851      	adds	r1, r2, r1
 800c0ca:	6039      	str	r1, [r7, #0]
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	414b      	adcs	r3, r1
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0de:	4659      	mov	r1, fp
 800c0e0:	00cb      	lsls	r3, r1, #3
 800c0e2:	4651      	mov	r1, sl
 800c0e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0e8:	4651      	mov	r1, sl
 800c0ea:	00ca      	lsls	r2, r1, #3
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	4642      	mov	r2, r8
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	460a      	mov	r2, r1
 800c0fc:	eb42 0303 	adc.w	r3, r2, r3
 800c100:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	663b      	str	r3, [r7, #96]	; 0x60
 800c10c:	667a      	str	r2, [r7, #100]	; 0x64
 800c10e:	f04f 0200 	mov.w	r2, #0
 800c112:	f04f 0300 	mov.w	r3, #0
 800c116:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c11a:	4649      	mov	r1, r9
 800c11c:	008b      	lsls	r3, r1, #2
 800c11e:	4641      	mov	r1, r8
 800c120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c124:	4641      	mov	r1, r8
 800c126:	008a      	lsls	r2, r1, #2
 800c128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c12c:	f7f4 fdbc 	bl	8000ca8 <__aeabi_uldivmod>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <UART_SetConfig+0x4e4>)
 800c136:	fba3 1302 	umull	r1, r3, r3, r2
 800c13a:	095b      	lsrs	r3, r3, #5
 800c13c:	2164      	movs	r1, #100	; 0x64
 800c13e:	fb01 f303 	mul.w	r3, r1, r3
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	3332      	adds	r3, #50	; 0x32
 800c148:	4a08      	ldr	r2, [pc, #32]	; (800c16c <UART_SetConfig+0x4e4>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	095b      	lsrs	r3, r3, #5
 800c150:	f003 020f 	and.w	r2, r3, #15
 800c154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4422      	add	r2, r4
 800c15c:	609a      	str	r2, [r3, #8]
}
 800c15e:	bf00      	nop
 800c160:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c164:	46bd      	mov	sp, r7
 800c166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c16a:	bf00      	nop
 800c16c:	51eb851f 	.word	0x51eb851f

0800c170 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c170:	b084      	sub	sp, #16
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	f107 001c 	add.w	r0, r7, #28
 800c17e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c186:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c188:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c18a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c18e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c192:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c196:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c19a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c1aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	431a      	orrs	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	b004      	add	sp, #16
 800c1c4:	4770      	bx	lr

0800c1c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2203      	movs	r2, #3
 800c20e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 0303 	and.w	r3, r3, #3
}
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b085      	sub	sp, #20
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c258:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c25e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c264:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	4313      	orrs	r3, r2
 800c26a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c274:	f023 030f 	bic.w	r3, r3, #15
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	b2db      	uxtb	r3, r3
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3314      	adds	r3, #20
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
}  
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2f4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c2fa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c300:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4313      	orrs	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	431a      	orrs	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c318:	2300      	movs	r3, #0

}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b088      	sub	sp, #32
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c334:	2310      	movs	r3, #16
 800c336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c338:	2340      	movs	r3, #64	; 0x40
 800c33a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c33c:	2300      	movs	r3, #0
 800c33e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c344:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c346:	f107 0308 	add.w	r3, r7, #8
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff ff74 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c352:	f241 3288 	movw	r2, #5000	; 0x1388
 800c356:	2110      	movs	r1, #16
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f9d7 	bl	800c70c <SDMMC_GetCmdResp1>
 800c35e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c360:	69fb      	ldr	r3, [r7, #28]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3720      	adds	r7, #32
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b088      	sub	sp, #32
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c378:	2311      	movs	r3, #17
 800c37a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c37c:	2340      	movs	r3, #64	; 0x40
 800c37e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c380:	2300      	movs	r3, #0
 800c382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c388:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c38a:	f107 0308 	add.w	r3, r7, #8
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff ff52 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c396:	f241 3288 	movw	r2, #5000	; 0x1388
 800c39a:	2111      	movs	r1, #17
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f9b5 	bl	800c70c <SDMMC_GetCmdResp1>
 800c3a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3a4:	69fb      	ldr	r3, [r7, #28]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3720      	adds	r7, #32
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b088      	sub	sp, #32
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c3bc:	2312      	movs	r3, #18
 800c3be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3c0:	2340      	movs	r3, #64	; 0x40
 800c3c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3ce:	f107 0308 	add.w	r3, r7, #8
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ff30 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c3da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3de:	2112      	movs	r1, #18
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f993 	bl	800c70c <SDMMC_GetCmdResp1>
 800c3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3e8:	69fb      	ldr	r3, [r7, #28]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b088      	sub	sp, #32
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c400:	2318      	movs	r3, #24
 800c402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c404:	2340      	movs	r3, #64	; 0x40
 800c406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c408:	2300      	movs	r3, #0
 800c40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c410:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c412:	f107 0308 	add.w	r3, r7, #8
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ff0e 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c422:	2118      	movs	r1, #24
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f971 	bl	800c70c <SDMMC_GetCmdResp1>
 800c42a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c42c:	69fb      	ldr	r3, [r7, #28]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3720      	adds	r7, #32
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b088      	sub	sp, #32
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c444:	2319      	movs	r3, #25
 800c446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c448:	2340      	movs	r3, #64	; 0x40
 800c44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c456:	f107 0308 	add.w	r3, r7, #8
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff feec 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	2119      	movs	r1, #25
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f94f 	bl	800c70c <SDMMC_GetCmdResp1>
 800c46e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c470:	69fb      	ldr	r3, [r7, #28]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c488:	230c      	movs	r3, #12
 800c48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c490:	2300      	movs	r3, #0
 800c492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c498:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff feca 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c4a6:	4a05      	ldr	r2, [pc, #20]	; (800c4bc <SDMMC_CmdStopTransfer+0x40>)
 800c4a8:	210c      	movs	r1, #12
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f92e 	bl	800c70c <SDMMC_GetCmdResp1>
 800c4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3720      	adds	r7, #32
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	05f5e100 	.word	0x05f5e100

0800c4c0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c4d0:	2307      	movs	r3, #7
 800c4d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4d4:	2340      	movs	r3, #64	; 0x40
 800c4d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4e0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4e2:	f107 0310 	add.w	r3, r7, #16
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff fea6 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4f2:	2107      	movs	r1, #7
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f909 	bl	800c70c <SDMMC_GetCmdResp1>
 800c4fa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3728      	adds	r7, #40	; 0x28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b088      	sub	sp, #32
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c516:	2300      	movs	r3, #0
 800c518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c522:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c524:	f107 0308 	add.w	r3, r7, #8
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff fe85 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fb23 	bl	800cb7c <SDMMC_GetCmdError>
 800c536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c538:	69fb      	ldr	r3, [r7, #28]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3720      	adds	r7, #32
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b088      	sub	sp, #32
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c54a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c54e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c550:	2308      	movs	r3, #8
 800c552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c554:	2340      	movs	r3, #64	; 0x40
 800c556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c558:	2300      	movs	r3, #0
 800c55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff fe66 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fab6 	bl	800cae0 <SDMMC_GetCmdResp7>
 800c574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c576:	69fb      	ldr	r3, [r7, #28]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3720      	adds	r7, #32
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c58e:	2337      	movs	r3, #55	; 0x37
 800c590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c592:	2340      	movs	r3, #64	; 0x40
 800c594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c596:	2300      	movs	r3, #0
 800c598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff fe47 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c5ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b0:	2137      	movs	r1, #55	; 0x37
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f8aa 	bl	800c70c <SDMMC_GetCmdResp1>
 800c5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3720      	adds	r7, #32
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c5da:	2329      	movs	r3, #41	; 0x29
 800c5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ec:	f107 0308 	add.w	r3, r7, #8
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fe21 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f9bd 	bl	800c978 <SDMMC_GetCmdResp3>
 800c5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c600:	69fb      	ldr	r3, [r7, #28]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3720      	adds	r7, #32
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b088      	sub	sp, #32
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c616:	2302      	movs	r3, #2
 800c618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c61a:	23c0      	movs	r3, #192	; 0xc0
 800c61c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c61e:	2300      	movs	r3, #0
 800c620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c628:	f107 0308 	add.w	r3, r7, #8
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff fe03 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f957 	bl	800c8e8 <SDMMC_GetCmdResp2>
 800c63a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63c:	69fb      	ldr	r3, [r7, #28]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b088      	sub	sp, #32
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c654:	2309      	movs	r3, #9
 800c656:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c658:	23c0      	movs	r3, #192	; 0xc0
 800c65a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c664:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c666:	f107 0308 	add.w	r3, r7, #8
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff fde4 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f938 	bl	800c8e8 <SDMMC_GetCmdResp2>
 800c678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c67a:	69fb      	ldr	r3, [r7, #28]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c692:	2303      	movs	r3, #3
 800c694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c69a:	2300      	movs	r3, #0
 800c69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff fdc5 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	2103      	movs	r1, #3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f99d 	bl	800c9f4 <SDMMC_GetCmdResp6>
 800c6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b088      	sub	sp, #32
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c6d4:	230d      	movs	r3, #13
 800c6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6d8:	2340      	movs	r3, #64	; 0x40
 800c6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6e6:	f107 0308 	add.w	r3, r7, #8
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff fda4 	bl	800c23a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f6:	210d      	movs	r1, #13
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f807 	bl	800c70c <SDMMC_GetCmdResp1>
 800c6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c700:	69fb      	ldr	r3, [r7, #28]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3720      	adds	r7, #32
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	460b      	mov	r3, r1
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c71a:	4b70      	ldr	r3, [pc, #448]	; (800c8dc <SDMMC_GetCmdResp1+0x1d0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a70      	ldr	r2, [pc, #448]	; (800c8e0 <SDMMC_GetCmdResp1+0x1d4>)
 800c720:	fba2 2303 	umull	r2, r3, r2, r3
 800c724:	0a5a      	lsrs	r2, r3, #9
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	fb02 f303 	mul.w	r3, r2, r3
 800c72c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	1e5a      	subs	r2, r3, #1
 800c732:	61fa      	str	r2, [r7, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d102      	bne.n	800c73e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c73c:	e0c9      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c742:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0ef      	beq.n	800c72e <SDMMC_GetCmdResp1+0x22>
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1ea      	bne.n	800c72e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d004      	beq.n	800c76e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2204      	movs	r2, #4
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c76a:	2304      	movs	r3, #4
 800c76c:	e0b1      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d004      	beq.n	800c784 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c780:	2301      	movs	r3, #1
 800c782:	e0a6      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	22c5      	movs	r2, #197	; 0xc5
 800c788:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7ff fd7f 	bl	800c28e <SDIO_GetCommandResponse>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	4293      	cmp	r3, r2
 800c798:	d001      	beq.n	800c79e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e099      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c79e:	2100      	movs	r1, #0
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fd81 	bl	800c2a8 <SDIO_GetResponse>
 800c7a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	4b4e      	ldr	r3, [pc, #312]	; (800c8e4 <SDMMC_GetCmdResp1+0x1d8>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e08d      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	da02      	bge.n	800c7c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c7bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7c0:	e087      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	e080      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c7da:	2380      	movs	r3, #128	; 0x80
 800c7dc:	e079      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c7e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7ec:	e071      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7fc:	e069      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c80c:	e061      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c81c:	e059      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c82c:	e051      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c83c:	e049      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c84c:	e041      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85c:	e039      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c86c:	e031      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c87c:	e029      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c88c:	e021      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c89c:	e019      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c8a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c8ac:	e011      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c8b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c8bc:	e009      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f003 0308 	and.w	r3, r3, #8
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c8c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c8cc:	e001      	b.n	800c8d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c8ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3720      	adds	r7, #32
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	20000094 	.word	0x20000094
 800c8e0:	10624dd3 	.word	0x10624dd3
 800c8e4:	fdffe008 	.word	0xfdffe008

0800c8e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8f0:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <SDMMC_GetCmdResp2+0x88>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a1f      	ldr	r2, [pc, #124]	; (800c974 <SDMMC_GetCmdResp2+0x8c>)
 800c8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fa:	0a5b      	lsrs	r3, r3, #9
 800c8fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c900:	fb02 f303 	mul.w	r3, r2, r3
 800c904:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1e5a      	subs	r2, r3, #1
 800c90a:	60fa      	str	r2, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c914:	e026      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c91a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0ef      	beq.n	800c906 <SDMMC_GetCmdResp2+0x1e>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1ea      	bne.n	800c906 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2204      	movs	r2, #4
 800c940:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c942:	2304      	movs	r3, #4
 800c944:	e00e      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c958:	2301      	movs	r3, #1
 800c95a:	e003      	b.n	800c964 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	22c5      	movs	r2, #197	; 0xc5
 800c960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20000094 	.word	0x20000094
 800c974:	10624dd3 	.word	0x10624dd3

0800c978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c980:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <SDMMC_GetCmdResp3+0x74>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a1a      	ldr	r2, [pc, #104]	; (800c9f0 <SDMMC_GetCmdResp3+0x78>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	0a5b      	lsrs	r3, r3, #9
 800c98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c990:	fb02 f303 	mul.w	r3, r2, r3
 800c994:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	1e5a      	subs	r2, r3, #1
 800c99a:	60fa      	str	r2, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9a4:	e01b      	b.n	800c9de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0ef      	beq.n	800c996 <SDMMC_GetCmdResp3+0x1e>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1ea      	bne.n	800c996 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	f003 0304 	and.w	r3, r3, #4
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9d2:	2304      	movs	r3, #4
 800c9d4:	e003      	b.n	800c9de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	22c5      	movs	r2, #197	; 0xc5
 800c9da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20000094 	.word	0x20000094
 800c9f0:	10624dd3 	.word	0x10624dd3

0800c9f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca02:	4b35      	ldr	r3, [pc, #212]	; (800cad8 <SDMMC_GetCmdResp6+0xe4>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a35      	ldr	r2, [pc, #212]	; (800cadc <SDMMC_GetCmdResp6+0xe8>)
 800ca08:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0c:	0a5b      	lsrs	r3, r3, #9
 800ca0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca12:	fb02 f303 	mul.w	r3, r2, r3
 800ca16:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	1e5a      	subs	r2, r3, #1
 800ca1c:	61fa      	str	r2, [r7, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca26:	e052      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0ef      	beq.n	800ca18 <SDMMC_GetCmdResp6+0x24>
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1ea      	bne.n	800ca18 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	f003 0304 	and.w	r3, r3, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2204      	movs	r2, #4
 800ca52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca54:	2304      	movs	r3, #4
 800ca56:	e03a      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d004      	beq.n	800ca6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2201      	movs	r2, #1
 800ca68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e02f      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fc0d 	bl	800c28e <SDIO_GetCommandResponse>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	7afb      	ldrb	r3, [r7, #11]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d001      	beq.n	800ca82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e025      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	22c5      	movs	r2, #197	; 0xc5
 800ca86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ca88:	2100      	movs	r1, #0
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f7ff fc0c 	bl	800c2a8 <SDIO_GetResponse>
 800ca90:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	0c1b      	lsrs	r3, r3, #16
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e011      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cab8:	e009      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cac8:	e001      	b.n	800cace <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800caca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3720      	adds	r7, #32
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20000094 	.word	0x20000094
 800cadc:	10624dd3 	.word	0x10624dd3

0800cae0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cae8:	4b22      	ldr	r3, [pc, #136]	; (800cb74 <SDMMC_GetCmdResp7+0x94>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a22      	ldr	r2, [pc, #136]	; (800cb78 <SDMMC_GetCmdResp7+0x98>)
 800caee:	fba2 2303 	umull	r2, r3, r2, r3
 800caf2:	0a5b      	lsrs	r3, r3, #9
 800caf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1e5a      	subs	r2, r3, #1
 800cb02:	60fa      	str	r2, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb0c:	e02c      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0ef      	beq.n	800cafe <SDMMC_GetCmdResp7+0x1e>
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1ea      	bne.n	800cafe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2204      	movs	r2, #4
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb3a:	2304      	movs	r3, #4
 800cb3c:	e014      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d004      	beq.n	800cb54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e009      	b.n	800cb68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2240      	movs	r2, #64	; 0x40
 800cb64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cb66:	2300      	movs	r3, #0
  
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	20000094 	.word	0x20000094
 800cb78:	10624dd3 	.word	0x10624dd3

0800cb7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb84:	4b11      	ldr	r3, [pc, #68]	; (800cbcc <SDMMC_GetCmdError+0x50>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a11      	ldr	r2, [pc, #68]	; (800cbd0 <SDMMC_GetCmdError+0x54>)
 800cb8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb8e:	0a5b      	lsrs	r3, r3, #9
 800cb90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1e5a      	subs	r2, r3, #1
 800cb9e:	60fa      	str	r2, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cba8:	e009      	b.n	800cbbe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0f1      	beq.n	800cb9a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	22c5      	movs	r2, #197	; 0xc5
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	20000094 	.word	0x20000094
 800cbd0:	10624dd3 	.word	0x10624dd3

0800cbd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cbd8:	4904      	ldr	r1, [pc, #16]	; (800cbec <MX_FATFS_Init+0x18>)
 800cbda:	4805      	ldr	r0, [pc, #20]	; (800cbf0 <MX_FATFS_Init+0x1c>)
 800cbdc:	f002 ff0e 	bl	800f9fc <FATFS_LinkDriver>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	4b03      	ldr	r3, [pc, #12]	; (800cbf4 <MX_FATFS_Init+0x20>)
 800cbe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cbe8:	bf00      	nop
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20005d34 	.word	0x20005d34
 800cbf0:	0802e604 	.word	0x0802e604
 800cbf4:	20005d30 	.word	0x20005d30

0800cbf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cbfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc12:	f000 f86b 	bl	800ccec <BSP_SD_IsDetected>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d001      	beq.n	800cc20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e005      	b.n	800cc2c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cc20:	4804      	ldr	r0, [pc, #16]	; (800cc34 <BSP_SD_Init+0x2c>)
 800cc22:	f7fc fa9c 	bl	800915e <HAL_SD_Init>
 800cc26:	4603      	mov	r3, r0
 800cc28:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20005930 	.word	0x20005930

0800cc38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	4806      	ldr	r0, [pc, #24]	; (800cc70 <BSP_SD_ReadBlocks+0x38>)
 800cc56:	f7fc fb33 	bl	80092c0 <HAL_SD_ReadBlocks>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20005930 	.word	0x20005930

0800cc74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	af02      	add	r7, sp, #8
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	68f9      	ldr	r1, [r7, #12]
 800cc90:	4806      	ldr	r0, [pc, #24]	; (800ccac <BSP_SD_WriteBlocks+0x38>)
 800cc92:	f7fc fcf3 	bl	800967c <HAL_SD_WriteBlocks>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20005930 	.word	0x20005930

0800ccb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ccb4:	4805      	ldr	r0, [pc, #20]	; (800cccc <BSP_SD_GetCardState+0x1c>)
 800ccb6:	f7fd f837 	bl	8009d28 <HAL_SD_GetCardState>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b04      	cmp	r3, #4
 800ccbe:	bf14      	ite	ne
 800ccc0:	2301      	movne	r3, #1
 800ccc2:	2300      	moveq	r3, #0
 800ccc4:	b2db      	uxtb	r3, r3
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20005930 	.word	0x20005930

0800ccd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	4803      	ldr	r0, [pc, #12]	; (800cce8 <BSP_SD_GetCardInfo+0x18>)
 800ccdc:	f7fc fff8 	bl	8009cd0 <HAL_SD_GetCardInfo>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20005930 	.word	0x20005930

0800ccec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	b2db      	uxtb	r3, r3
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
	...

0800cd08 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd12:	4b0b      	ldr	r3, [pc, #44]	; (800cd40 <SD_CheckStatus+0x38>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cd18:	f7ff ffca 	bl	800ccb0 <BSP_SD_GetCardState>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d107      	bne.n	800cd32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd22:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <SD_CheckStatus+0x38>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f023 0301 	bic.w	r3, r3, #1
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <SD_CheckStatus+0x38>)
 800cd30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd32:	4b03      	ldr	r3, [pc, #12]	; (800cd40 <SD_CheckStatus+0x38>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	b2db      	uxtb	r3, r3
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	200000f5 	.word	0x200000f5

0800cd44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cd4e:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <SD_initialize+0x38>)
 800cd50:	2201      	movs	r2, #1
 800cd52:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cd54:	f7ff ff58 	bl	800cc08 <BSP_SD_Init>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d107      	bne.n	800cd6e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff ffd1 	bl	800cd08 <SD_CheckStatus>
 800cd66:	4603      	mov	r3, r0
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <SD_initialize+0x38>)
 800cd6c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cd6e:	4b03      	ldr	r3, [pc, #12]	; (800cd7c <SD_initialize+0x38>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	200000f5 	.word	0x200000f5

0800cd80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ffbb 	bl	800cd08 <SD_CheckStatus>
 800cd92:	4603      	mov	r3, r0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	4603      	mov	r3, r0
 800cdaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	68b8      	ldr	r0, [r7, #8]
 800cdba:	f7ff ff3d 	bl	800cc38 <BSP_SD_ReadBlocks>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d107      	bne.n	800cdd4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cdc4:	bf00      	nop
 800cdc6:	f7ff ff73 	bl	800ccb0 <BSP_SD_GetCardState>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1fa      	bne.n	800cdc6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b086      	sub	sp, #24
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	68b8      	ldr	r0, [r7, #8]
 800cdfc:	f7ff ff3a 	bl	800cc74 <BSP_SD_WriteBlocks>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d107      	bne.n	800ce16 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ce06:	bf00      	nop
 800ce08:	f7ff ff52 	bl	800ccb0 <BSP_SD_GetCardState>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1fa      	bne.n	800ce08 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08c      	sub	sp, #48	; 0x30
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	603a      	str	r2, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce36:	4b25      	ldr	r3, [pc, #148]	; (800cecc <SD_ioctl+0xac>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <SD_ioctl+0x28>
 800ce44:	2303      	movs	r3, #3
 800ce46:	e03c      	b.n	800cec2 <SD_ioctl+0xa2>

  switch (cmd)
 800ce48:	79bb      	ldrb	r3, [r7, #6]
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d834      	bhi.n	800ceb8 <SD_ioctl+0x98>
 800ce4e:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <SD_ioctl+0x34>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce6d 	.word	0x0800ce6d
 800ce5c:	0800ce85 	.word	0x0800ce85
 800ce60:	0800ce9f 	.word	0x0800ce9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce6a:	e028      	b.n	800cebe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce6c:	f107 030c 	add.w	r3, r7, #12
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7ff ff2d 	bl	800ccd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ce76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce82:	e01c      	b.n	800cebe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce84:	f107 030c 	add.w	r3, r7, #12
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ff21 	bl	800ccd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce9c:	e00f      	b.n	800cebe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce9e:	f107 030c 	add.w	r3, r7, #12
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff ff14 	bl	800ccd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	0a5a      	lsrs	r2, r3, #9
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ceb6:	e002      	b.n	800cebe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ceb8:	2304      	movs	r3, #4
 800ceba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3730      	adds	r7, #48	; 0x30
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	200000f5 	.word	0x200000f5

0800ced0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	4a08      	ldr	r2, [pc, #32]	; (800cf00 <disk_status+0x30>)
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	79fa      	ldrb	r2, [r7, #7]
 800cee8:	4905      	ldr	r1, [pc, #20]	; (800cf00 <disk_status+0x30>)
 800ceea:	440a      	add	r2, r1
 800ceec:	7a12      	ldrb	r2, [r2, #8]
 800ceee:	4610      	mov	r0, r2
 800cef0:	4798      	blx	r3
 800cef2:	4603      	mov	r3, r0
 800cef4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20005d60 	.word	0x20005d60

0800cf04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	4a0d      	ldr	r2, [pc, #52]	; (800cf4c <disk_initialize+0x48>)
 800cf16:	5cd3      	ldrb	r3, [r2, r3]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d111      	bne.n	800cf40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	4a0b      	ldr	r2, [pc, #44]	; (800cf4c <disk_initialize+0x48>)
 800cf20:	2101      	movs	r1, #1
 800cf22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	4a09      	ldr	r2, [pc, #36]	; (800cf4c <disk_initialize+0x48>)
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4413      	add	r3, r2
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	79fa      	ldrb	r2, [r7, #7]
 800cf32:	4906      	ldr	r1, [pc, #24]	; (800cf4c <disk_initialize+0x48>)
 800cf34:	440a      	add	r2, r1
 800cf36:	7a12      	ldrb	r2, [r2, #8]
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4798      	blx	r3
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20005d60 	.word	0x20005d60

0800cf50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf50:	b590      	push	{r4, r7, lr}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60b9      	str	r1, [r7, #8]
 800cf58:	607a      	str	r2, [r7, #4]
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	4a0a      	ldr	r2, [pc, #40]	; (800cf8c <disk_read+0x3c>)
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	689c      	ldr	r4, [r3, #8]
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4a07      	ldr	r2, [pc, #28]	; (800cf8c <disk_read+0x3c>)
 800cf70:	4413      	add	r3, r2
 800cf72:	7a18      	ldrb	r0, [r3, #8]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	47a0      	blx	r4
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd90      	pop	{r4, r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20005d60 	.word	0x20005d60

0800cf90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cf90:	b590      	push	{r4, r7, lr}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
 800cfa2:	4a0a      	ldr	r2, [pc, #40]	; (800cfcc <disk_write+0x3c>)
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	68dc      	ldr	r4, [r3, #12]
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	4a07      	ldr	r2, [pc, #28]	; (800cfcc <disk_write+0x3c>)
 800cfb0:	4413      	add	r3, r2
 800cfb2:	7a18      	ldrb	r0, [r3, #8]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	47a0      	blx	r4
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd90      	pop	{r4, r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20005d60 	.word	0x20005d60

0800cfd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	603a      	str	r2, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
 800cfe2:	4a09      	ldr	r2, [pc, #36]	; (800d008 <disk_ioctl+0x38>)
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	79fa      	ldrb	r2, [r7, #7]
 800cfee:	4906      	ldr	r1, [pc, #24]	; (800d008 <disk_ioctl+0x38>)
 800cff0:	440a      	add	r2, r1
 800cff2:	7a10      	ldrb	r0, [r2, #8]
 800cff4:	79b9      	ldrb	r1, [r7, #6]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	4798      	blx	r3
 800cffa:	4603      	mov	r3, r0
 800cffc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	20005d60 	.word	0x20005d60

0800d00c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3301      	adds	r3, #1
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d01c:	89fb      	ldrh	r3, [r7, #14]
 800d01e:	021b      	lsls	r3, r3, #8
 800d020:	b21a      	sxth	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	b21b      	sxth	r3, r3
 800d028:	4313      	orrs	r3, r2
 800d02a:	b21b      	sxth	r3, r3
 800d02c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d02e:	89fb      	ldrh	r3, [r7, #14]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3303      	adds	r3, #3
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	021b      	lsls	r3, r3, #8
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	3202      	adds	r2, #2
 800d054:	7812      	ldrb	r2, [r2, #0]
 800d056:	4313      	orrs	r3, r2
 800d058:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	021b      	lsls	r3, r3, #8
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	3201      	adds	r2, #1
 800d062:	7812      	ldrb	r2, [r2, #0]
 800d064:	4313      	orrs	r3, r2
 800d066:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	021b      	lsls	r3, r3, #8
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	7812      	ldrb	r2, [r2, #0]
 800d070:	4313      	orrs	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
	return rv;
 800d074:	68fb      	ldr	r3, [r7, #12]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	887a      	ldrh	r2, [r7, #2]
 800d096:	b2d2      	uxtb	r2, r2
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	887b      	ldrh	r3, [r7, #2]
 800d09c:	0a1b      	lsrs	r3, r3, #8
 800d09e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	1c5a      	adds	r2, r3, #1
 800d0a4:	607a      	str	r2, [r7, #4]
 800d0a6:	887a      	ldrh	r2, [r7, #2]
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	701a      	strb	r2, [r3, #0]
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	0a1b      	lsrs	r3, r3, #8
 800d0d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	1c5a      	adds	r2, r3, #1
 800d0d8:	607a      	str	r2, [r7, #4]
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	b2d2      	uxtb	r2, r2
 800d0de:	701a      	strb	r2, [r3, #0]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	0a1b      	lsrs	r3, r3, #8
 800d0e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	b2d2      	uxtb	r2, r2
 800d0f0:	701a      	strb	r2, [r3, #0]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	0a1b      	lsrs	r3, r3, #8
 800d0f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	607a      	str	r2, [r7, #4]
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	b2d2      	uxtb	r2, r2
 800d102:	701a      	strb	r2, [r3, #0]
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d110:	b480      	push	{r7}
 800d112:	b087      	sub	sp, #28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00d      	beq.n	800d146 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d12a:	693a      	ldr	r2, [r7, #16]
 800d12c:	1c53      	adds	r3, r2, #1
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	1c59      	adds	r1, r3, #1
 800d134:	6179      	str	r1, [r7, #20]
 800d136:	7812      	ldrb	r2, [r2, #0]
 800d138:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	607b      	str	r3, [r7, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f1      	bne.n	800d12a <mem_cpy+0x1a>
	}
}
 800d146:	bf00      	nop
 800d148:	371c      	adds	r7, #28
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d152:	b480      	push	{r7}
 800d154:	b087      	sub	sp, #28
 800d156:	af00      	add	r7, sp, #0
 800d158:	60f8      	str	r0, [r7, #12]
 800d15a:	60b9      	str	r1, [r7, #8]
 800d15c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	617a      	str	r2, [r7, #20]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	3b01      	subs	r3, #1
 800d172:	607b      	str	r3, [r7, #4]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1f3      	bne.n	800d162 <mem_set+0x10>
}
 800d17a:	bf00      	nop
 800d17c:	bf00      	nop
 800d17e:	371c      	adds	r7, #28
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d188:	b480      	push	{r7}
 800d18a:	b089      	sub	sp, #36	; 0x24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	61fb      	str	r3, [r7, #28]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	61fa      	str	r2, [r7, #28]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	61ba      	str	r2, [r7, #24]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	1acb      	subs	r3, r1, r3
 800d1b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	607b      	str	r3, [r7, #4]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d002      	beq.n	800d1c8 <mem_cmp+0x40>
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d0eb      	beq.n	800d1a0 <mem_cmp+0x18>

	return r;
 800d1c8:	697b      	ldr	r3, [r7, #20]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3724      	adds	r7, #36	; 0x24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d1e0:	e002      	b.n	800d1e8 <chk_chr+0x12>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	607b      	str	r3, [r7, #4]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <chk_chr+0x26>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d1f2      	bne.n	800d1e2 <chk_chr+0xc>
	return *str;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d216:	2300      	movs	r3, #0
 800d218:	60bb      	str	r3, [r7, #8]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	60fb      	str	r3, [r7, #12]
 800d21e:	e029      	b.n	800d274 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d220:	4a27      	ldr	r2, [pc, #156]	; (800d2c0 <chk_lock+0xb4>)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	4413      	add	r3, r2
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d01d      	beq.n	800d26a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d22e:	4a24      	ldr	r2, [pc, #144]	; (800d2c0 <chk_lock+0xb4>)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	011b      	lsls	r3, r3, #4
 800d234:	4413      	add	r3, r2
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d116      	bne.n	800d26e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d240:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <chk_lock+0xb4>)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	011b      	lsls	r3, r3, #4
 800d246:	4413      	add	r3, r2
 800d248:	3304      	adds	r3, #4
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d250:	429a      	cmp	r2, r3
 800d252:	d10c      	bne.n	800d26e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d254:	4a1a      	ldr	r2, [pc, #104]	; (800d2c0 <chk_lock+0xb4>)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	011b      	lsls	r3, r3, #4
 800d25a:	4413      	add	r3, r2
 800d25c:	3308      	adds	r3, #8
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d264:	429a      	cmp	r2, r3
 800d266:	d102      	bne.n	800d26e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d268:	e007      	b.n	800d27a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d26a:	2301      	movs	r3, #1
 800d26c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3301      	adds	r3, #1
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d9d2      	bls.n	800d220 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d109      	bne.n	800d294 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <chk_lock+0x80>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d101      	bne.n	800d290 <chk_lock+0x84>
 800d28c:	2300      	movs	r3, #0
 800d28e:	e010      	b.n	800d2b2 <chk_lock+0xa6>
 800d290:	2312      	movs	r3, #18
 800d292:	e00e      	b.n	800d2b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d108      	bne.n	800d2ac <chk_lock+0xa0>
 800d29a:	4a09      	ldr	r2, [pc, #36]	; (800d2c0 <chk_lock+0xb4>)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4413      	add	r3, r2
 800d2a2:	330c      	adds	r3, #12
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2aa:	d101      	bne.n	800d2b0 <chk_lock+0xa4>
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	e000      	b.n	800d2b2 <chk_lock+0xa6>
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20005d40 	.word	0x20005d40

0800d2c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	607b      	str	r3, [r7, #4]
 800d2ce:	e002      	b.n	800d2d6 <enq_lock+0x12>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	607b      	str	r3, [r7, #4]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d806      	bhi.n	800d2ea <enq_lock+0x26>
 800d2dc:	4a09      	ldr	r2, [pc, #36]	; (800d304 <enq_lock+0x40>)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	4413      	add	r3, r2
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1f2      	bne.n	800d2d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	bf14      	ite	ne
 800d2f0:	2301      	movne	r3, #1
 800d2f2:	2300      	moveq	r3, #0
 800d2f4:	b2db      	uxtb	r3, r3
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20005d40 	.word	0x20005d40

0800d308 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d312:	2300      	movs	r3, #0
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	e01f      	b.n	800d358 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d318:	4a41      	ldr	r2, [pc, #260]	; (800d420 <inc_lock+0x118>)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	4413      	add	r3, r2
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d113      	bne.n	800d352 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d32a:	4a3d      	ldr	r2, [pc, #244]	; (800d420 <inc_lock+0x118>)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	011b      	lsls	r3, r3, #4
 800d330:	4413      	add	r3, r2
 800d332:	3304      	adds	r3, #4
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d109      	bne.n	800d352 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d33e:	4a38      	ldr	r2, [pc, #224]	; (800d420 <inc_lock+0x118>)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	011b      	lsls	r3, r3, #4
 800d344:	4413      	add	r3, r2
 800d346:	3308      	adds	r3, #8
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d34e:	429a      	cmp	r2, r3
 800d350:	d006      	beq.n	800d360 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3301      	adds	r3, #1
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d9dc      	bls.n	800d318 <inc_lock+0x10>
 800d35e:	e000      	b.n	800d362 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d360:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2b02      	cmp	r3, #2
 800d366:	d132      	bne.n	800d3ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	e002      	b.n	800d374 <inc_lock+0x6c>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3301      	adds	r3, #1
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d806      	bhi.n	800d388 <inc_lock+0x80>
 800d37a:	4a29      	ldr	r2, [pc, #164]	; (800d420 <inc_lock+0x118>)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	011b      	lsls	r3, r3, #4
 800d380:	4413      	add	r3, r2
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1f2      	bne.n	800d36e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d101      	bne.n	800d392 <inc_lock+0x8a>
 800d38e:	2300      	movs	r3, #0
 800d390:	e040      	b.n	800d414 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4922      	ldr	r1, [pc, #136]	; (800d420 <inc_lock+0x118>)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	440b      	add	r3, r1
 800d39e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689a      	ldr	r2, [r3, #8]
 800d3a4:	491e      	ldr	r1, [pc, #120]	; (800d420 <inc_lock+0x118>)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	440b      	add	r3, r1
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	695a      	ldr	r2, [r3, #20]
 800d3b4:	491a      	ldr	r1, [pc, #104]	; (800d420 <inc_lock+0x118>)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	011b      	lsls	r3, r3, #4
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3308      	adds	r3, #8
 800d3be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d3c0:	4a17      	ldr	r2, [pc, #92]	; (800d420 <inc_lock+0x118>)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	011b      	lsls	r3, r3, #4
 800d3c6:	4413      	add	r3, r2
 800d3c8:	330c      	adds	r3, #12
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d009      	beq.n	800d3e8 <inc_lock+0xe0>
 800d3d4:	4a12      	ldr	r2, [pc, #72]	; (800d420 <inc_lock+0x118>)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	011b      	lsls	r3, r3, #4
 800d3da:	4413      	add	r3, r2
 800d3dc:	330c      	adds	r3, #12
 800d3de:	881b      	ldrh	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <inc_lock+0xe0>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e015      	b.n	800d414 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d108      	bne.n	800d400 <inc_lock+0xf8>
 800d3ee:	4a0c      	ldr	r2, [pc, #48]	; (800d420 <inc_lock+0x118>)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	011b      	lsls	r3, r3, #4
 800d3f4:	4413      	add	r3, r2
 800d3f6:	330c      	adds	r3, #12
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	e001      	b.n	800d404 <inc_lock+0xfc>
 800d400:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d404:	4906      	ldr	r1, [pc, #24]	; (800d420 <inc_lock+0x118>)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	440b      	add	r3, r1
 800d40c:	330c      	adds	r3, #12
 800d40e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3301      	adds	r3, #1
}
 800d414:	4618      	mov	r0, r3
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	20005d40 	.word	0x20005d40

0800d424 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3b01      	subs	r3, #1
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d825      	bhi.n	800d484 <dec_lock+0x60>
		n = Files[i].ctr;
 800d438:	4a17      	ldr	r2, [pc, #92]	; (800d498 <dec_lock+0x74>)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	4413      	add	r3, r2
 800d440:	330c      	adds	r3, #12
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d446:	89fb      	ldrh	r3, [r7, #14]
 800d448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d44c:	d101      	bne.n	800d452 <dec_lock+0x2e>
 800d44e:	2300      	movs	r3, #0
 800d450:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d452:	89fb      	ldrh	r3, [r7, #14]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <dec_lock+0x3a>
 800d458:	89fb      	ldrh	r3, [r7, #14]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d45e:	4a0e      	ldr	r2, [pc, #56]	; (800d498 <dec_lock+0x74>)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	4413      	add	r3, r2
 800d466:	330c      	adds	r3, #12
 800d468:	89fa      	ldrh	r2, [r7, #14]
 800d46a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d105      	bne.n	800d47e <dec_lock+0x5a>
 800d472:	4a09      	ldr	r2, [pc, #36]	; (800d498 <dec_lock+0x74>)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	4413      	add	r3, r2
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	737b      	strb	r3, [r7, #13]
 800d482:	e001      	b.n	800d488 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d484:	2302      	movs	r3, #2
 800d486:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d488:	7b7b      	ldrb	r3, [r7, #13]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20005d40 	.word	0x20005d40

0800d49c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e010      	b.n	800d4cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4aa:	4a0d      	ldr	r2, [pc, #52]	; (800d4e0 <clear_lock+0x44>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	011b      	lsls	r3, r3, #4
 800d4b0:	4413      	add	r3, r2
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d105      	bne.n	800d4c6 <clear_lock+0x2a>
 800d4ba:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <clear_lock+0x44>)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	4413      	add	r3, r2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d9eb      	bls.n	800d4aa <clear_lock+0xe>
	}
}
 800d4d2:	bf00      	nop
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	20005d40 	.word	0x20005d40

0800d4e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	78db      	ldrb	r3, [r3, #3]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d034      	beq.n	800d562 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	7858      	ldrb	r0, [r3, #1]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d508:	2301      	movs	r3, #1
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	f7ff fd40 	bl	800cf90 <disk_write>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d516:	2301      	movs	r3, #1
 800d518:	73fb      	strb	r3, [r7, #15]
 800d51a:	e022      	b.n	800d562 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	1ad2      	subs	r2, r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d217      	bcs.n	800d562 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	789b      	ldrb	r3, [r3, #2]
 800d536:	613b      	str	r3, [r7, #16]
 800d538:	e010      	b.n	800d55c <sync_window+0x78>
					wsect += fs->fsize;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	4413      	add	r3, r2
 800d542:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	7858      	ldrb	r0, [r3, #1]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d54e:	2301      	movs	r3, #1
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	f7ff fd1d 	bl	800cf90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	3b01      	subs	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d8eb      	bhi.n	800d53a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d562:	7bfb      	ldrb	r3, [r7, #15]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	429a      	cmp	r2, r3
 800d582:	d01b      	beq.n	800d5bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff ffad 	bl	800d4e4 <sync_window>
 800d58a:	4603      	mov	r3, r0
 800d58c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d113      	bne.n	800d5bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	7858      	ldrb	r0, [r3, #1]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d59e:	2301      	movs	r3, #1
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	f7ff fcd5 	bl	800cf50 <disk_read>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d004      	beq.n	800d5b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff ff87 	bl	800d4e4 <sync_window>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d159      	bne.n	800d694 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d149      	bne.n	800d67c <sync_fs+0xb4>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	791b      	ldrb	r3, [r3, #4]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d145      	bne.n	800d67c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	899b      	ldrh	r3, [r3, #12]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	f7ff fda8 	bl	800d152 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	3334      	adds	r3, #52	; 0x34
 800d606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d60a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff fd37 	bl	800d082 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3334      	adds	r3, #52	; 0x34
 800d618:	4921      	ldr	r1, [pc, #132]	; (800d6a0 <sync_fs+0xd8>)
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7ff fd4c 	bl	800d0b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3334      	adds	r3, #52	; 0x34
 800d624:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d628:	491e      	ldr	r1, [pc, #120]	; (800d6a4 <sync_fs+0xdc>)
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff fd44 	bl	800d0b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3334      	adds	r3, #52	; 0x34
 800d634:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	695b      	ldr	r3, [r3, #20]
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f7ff fd3a 	bl	800d0b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3334      	adds	r3, #52	; 0x34
 800d648:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	4619      	mov	r1, r3
 800d652:	4610      	mov	r0, r2
 800d654:	f7ff fd30 	bl	800d0b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a1b      	ldr	r3, [r3, #32]
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7858      	ldrb	r0, [r3, #1]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d670:	2301      	movs	r3, #1
 800d672:	f7ff fc8d 	bl	800cf90 <disk_write>
			fs->fsi_flag = 0;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	2200      	movs	r2, #0
 800d682:	2100      	movs	r1, #0
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff fca3 	bl	800cfd0 <disk_ioctl>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <sync_fs+0xcc>
 800d690:	2301      	movs	r3, #1
 800d692:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	41615252 	.word	0x41615252
 800d6a4:	61417272 	.word	0x61417272

0800d6a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	3b02      	subs	r3, #2
 800d6b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	3b02      	subs	r3, #2
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d301      	bcc.n	800d6c8 <clust2sect+0x20>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e008      	b.n	800d6da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	895b      	ldrh	r3, [r3, #10]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	fb03 f202 	mul.w	r2, r3, r2
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d8:	4413      	add	r3, r2
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b086      	sub	sp, #24
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d904      	bls.n	800d706 <get_fat+0x20>
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	699b      	ldr	r3, [r3, #24]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d302      	bcc.n	800d70c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d706:	2301      	movs	r3, #1
 800d708:	617b      	str	r3, [r7, #20]
 800d70a:	e0bb      	b.n	800d884 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d70c:	f04f 33ff 	mov.w	r3, #4294967295
 800d710:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b03      	cmp	r3, #3
 800d718:	f000 8083 	beq.w	800d822 <get_fat+0x13c>
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	f300 80a7 	bgt.w	800d870 <get_fat+0x18a>
 800d722:	2b01      	cmp	r3, #1
 800d724:	d002      	beq.n	800d72c <get_fat+0x46>
 800d726:	2b02      	cmp	r3, #2
 800d728:	d056      	beq.n	800d7d8 <get_fat+0xf2>
 800d72a:	e0a1      	b.n	800d870 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	085b      	lsrs	r3, r3, #1
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	4619      	mov	r1, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	fbb3 f3f1 	udiv	r3, r3, r1
 800d74a:	4413      	add	r3, r2
 800d74c:	4619      	mov	r1, r3
 800d74e:	6938      	ldr	r0, [r7, #16]
 800d750:	f7ff ff0c 	bl	800d56c <move_window>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	f040 808d 	bne.w	800d876 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	1c5a      	adds	r2, r3, #1
 800d760:	60fa      	str	r2, [r7, #12]
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	8992      	ldrh	r2, [r2, #12]
 800d766:	fbb3 f1f2 	udiv	r1, r3, r2
 800d76a:	fb01 f202 	mul.w	r2, r1, r2
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	4413      	add	r3, r2
 800d774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d778:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	899b      	ldrh	r3, [r3, #12]
 800d782:	4619      	mov	r1, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	fbb3 f3f1 	udiv	r3, r3, r1
 800d78a:	4413      	add	r3, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	6938      	ldr	r0, [r7, #16]
 800d790:	f7ff feec 	bl	800d56c <move_window>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d16f      	bne.n	800d87a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	899b      	ldrh	r3, [r3, #12]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7a6:	fb01 f202 	mul.w	r2, r1, r2
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7b4:	021b      	lsls	r3, r3, #8
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <get_fat+0xe8>
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	091b      	lsrs	r3, r3, #4
 800d7cc:	e002      	b.n	800d7d4 <get_fat+0xee>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7d4:	617b      	str	r3, [r7, #20]
			break;
 800d7d6:	e055      	b.n	800d884 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	899b      	ldrh	r3, [r3, #12]
 800d7e0:	085b      	lsrs	r3, r3, #1
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6938      	ldr	r0, [r7, #16]
 800d7f2:	f7ff febb 	bl	800d56c <move_window>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d140      	bne.n	800d87e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	005b      	lsls	r3, r3, #1
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	8992      	ldrh	r2, [r2, #12]
 800d80a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d80e:	fb00 f202 	mul.w	r2, r0, r2
 800d812:	1a9b      	subs	r3, r3, r2
 800d814:	440b      	add	r3, r1
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff fbf8 	bl	800d00c <ld_word>
 800d81c:	4603      	mov	r3, r0
 800d81e:	617b      	str	r3, [r7, #20]
			break;
 800d820:	e030      	b.n	800d884 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	899b      	ldrh	r3, [r3, #12]
 800d82a:	089b      	lsrs	r3, r3, #2
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	4619      	mov	r1, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	fbb3 f3f1 	udiv	r3, r3, r1
 800d836:	4413      	add	r3, r2
 800d838:	4619      	mov	r1, r3
 800d83a:	6938      	ldr	r0, [r7, #16]
 800d83c:	f7ff fe96 	bl	800d56c <move_window>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11d      	bne.n	800d882 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	8992      	ldrh	r2, [r2, #12]
 800d854:	fbb3 f0f2 	udiv	r0, r3, r2
 800d858:	fb00 f202 	mul.w	r2, r0, r2
 800d85c:	1a9b      	subs	r3, r3, r2
 800d85e:	440b      	add	r3, r1
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff fbeb 	bl	800d03c <ld_dword>
 800d866:	4603      	mov	r3, r0
 800d868:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d86c:	617b      	str	r3, [r7, #20]
			break;
 800d86e:	e009      	b.n	800d884 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d870:	2301      	movs	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	e006      	b.n	800d884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d876:	bf00      	nop
 800d878:	e004      	b.n	800d884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d87a:	bf00      	nop
 800d87c:	e002      	b.n	800d884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d87e:	bf00      	nop
 800d880:	e000      	b.n	800d884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d882:	bf00      	nop
		}
	}

	return val;
 800d884:	697b      	ldr	r3, [r7, #20]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d88e:	b590      	push	{r4, r7, lr}
 800d890:	b089      	sub	sp, #36	; 0x24
 800d892:	af00      	add	r7, sp, #0
 800d894:	60f8      	str	r0, [r7, #12]
 800d896:	60b9      	str	r1, [r7, #8]
 800d898:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d89a:	2302      	movs	r3, #2
 800d89c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	f240 8102 	bls.w	800daaa <put_fat+0x21c>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	f080 80fc 	bcs.w	800daaa <put_fat+0x21c>
		switch (fs->fs_type) {
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	f000 80b6 	beq.w	800da28 <put_fat+0x19a>
 800d8bc:	2b03      	cmp	r3, #3
 800d8be:	f300 80fd 	bgt.w	800dabc <put_fat+0x22e>
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d003      	beq.n	800d8ce <put_fat+0x40>
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	f000 8083 	beq.w	800d9d2 <put_fat+0x144>
 800d8cc:	e0f6      	b.n	800dabc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	61bb      	str	r3, [r7, #24]
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	085b      	lsrs	r3, r3, #1
 800d8d6:	69ba      	ldr	r2, [r7, #24]
 800d8d8:	4413      	add	r3, r2
 800d8da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	899b      	ldrh	r3, [r3, #12]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8ec:	4413      	add	r3, r2
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7ff fe3b 	bl	800d56c <move_window>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8fa:	7ffb      	ldrb	r3, [r7, #31]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f040 80d6 	bne.w	800daae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	61ba      	str	r2, [r7, #24]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	8992      	ldrh	r2, [r2, #12]
 800d912:	fbb3 f0f2 	udiv	r0, r3, r2
 800d916:	fb00 f202 	mul.w	r2, r0, r2
 800d91a:	1a9b      	subs	r3, r3, r2
 800d91c:	440b      	add	r3, r1
 800d91e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00d      	beq.n	800d946 <put_fat+0xb8>
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	b25b      	sxtb	r3, r3
 800d930:	f003 030f 	and.w	r3, r3, #15
 800d934:	b25a      	sxtb	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	b25b      	sxtb	r3, r3
 800d93e:	4313      	orrs	r3, r2
 800d940:	b25b      	sxtb	r3, r3
 800d942:	b2db      	uxtb	r3, r3
 800d944:	e001      	b.n	800d94a <put_fat+0xbc>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	697a      	ldr	r2, [r7, #20]
 800d94c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2201      	movs	r2, #1
 800d952:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	899b      	ldrh	r3, [r3, #12]
 800d95c:	4619      	mov	r1, r3
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	fbb3 f3f1 	udiv	r3, r3, r1
 800d964:	4413      	add	r3, r2
 800d966:	4619      	mov	r1, r3
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff fdff 	bl	800d56c <move_window>
 800d96e:	4603      	mov	r3, r0
 800d970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d972:	7ffb      	ldrb	r3, [r7, #31]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 809c 	bne.w	800dab2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	899b      	ldrh	r3, [r3, #12]
 800d984:	461a      	mov	r2, r3
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	fbb3 f0f2 	udiv	r0, r3, r2
 800d98c:	fb00 f202 	mul.w	r2, r0, r2
 800d990:	1a9b      	subs	r3, r3, r2
 800d992:	440b      	add	r3, r1
 800d994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d003      	beq.n	800d9a8 <put_fat+0x11a>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	091b      	lsrs	r3, r3, #4
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	e00e      	b.n	800d9c6 <put_fat+0x138>
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b25b      	sxtb	r3, r3
 800d9ae:	f023 030f 	bic.w	r3, r3, #15
 800d9b2:	b25a      	sxtb	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	0a1b      	lsrs	r3, r3, #8
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	f003 030f 	and.w	r3, r3, #15
 800d9be:	b25b      	sxtb	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b25b      	sxtb	r3, r3
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	70da      	strb	r2, [r3, #3]
			break;
 800d9d0:	e074      	b.n	800dabc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	899b      	ldrh	r3, [r3, #12]
 800d9da:	085b      	lsrs	r3, r3, #1
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	4619      	mov	r1, r3
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff fdbe 	bl	800d56c <move_window>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9f4:	7ffb      	ldrb	r3, [r7, #31]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d15d      	bne.n	800dab6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	8992      	ldrh	r2, [r2, #12]
 800da08:	fbb3 f0f2 	udiv	r0, r3, r2
 800da0c:	fb00 f202 	mul.w	r2, r0, r2
 800da10:	1a9b      	subs	r3, r3, r2
 800da12:	440b      	add	r3, r1
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	b292      	uxth	r2, r2
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fb31 	bl	800d082 <st_word>
			fs->wflag = 1;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	70da      	strb	r2, [r3, #3]
			break;
 800da26:	e049      	b.n	800dabc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	899b      	ldrh	r3, [r3, #12]
 800da30:	089b      	lsrs	r3, r3, #2
 800da32:	b29b      	uxth	r3, r3
 800da34:	4619      	mov	r1, r3
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	fbb3 f3f1 	udiv	r3, r3, r1
 800da3c:	4413      	add	r3, r2
 800da3e:	4619      	mov	r1, r3
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff fd93 	bl	800d56c <move_window>
 800da46:	4603      	mov	r3, r0
 800da48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da4a:	7ffb      	ldrb	r3, [r7, #31]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d134      	bne.n	800daba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	8992      	ldrh	r2, [r2, #12]
 800da64:	fbb3 f0f2 	udiv	r0, r3, r2
 800da68:	fb00 f202 	mul.w	r2, r0, r2
 800da6c:	1a9b      	subs	r3, r3, r2
 800da6e:	440b      	add	r3, r1
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fae3 	bl	800d03c <ld_dword>
 800da76:	4603      	mov	r3, r0
 800da78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da7c:	4323      	orrs	r3, r4
 800da7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	8992      	ldrh	r2, [r2, #12]
 800da8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da92:	fb00 f202 	mul.w	r2, r0, r2
 800da96:	1a9b      	subs	r3, r3, r2
 800da98:	440b      	add	r3, r1
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff fb0b 	bl	800d0b8 <st_dword>
			fs->wflag = 1;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2201      	movs	r2, #1
 800daa6:	70da      	strb	r2, [r3, #3]
			break;
 800daa8:	e008      	b.n	800dabc <put_fat+0x22e>
		}
	}
 800daaa:	bf00      	nop
 800daac:	e006      	b.n	800dabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800daae:	bf00      	nop
 800dab0:	e004      	b.n	800dabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800dab2:	bf00      	nop
 800dab4:	e002      	b.n	800dabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800dab6:	bf00      	nop
 800dab8:	e000      	b.n	800dabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800daba:	bf00      	nop
	return res;
 800dabc:	7ffb      	ldrb	r3, [r7, #31]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3724      	adds	r7, #36	; 0x24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd90      	pop	{r4, r7, pc}

0800dac6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b088      	sub	sp, #32
 800daca:	af00      	add	r7, sp, #0
 800dacc:	60f8      	str	r0, [r7, #12]
 800dace:	60b9      	str	r1, [r7, #8]
 800dad0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d904      	bls.n	800daec <remove_chain+0x26>
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d301      	bcc.n	800daf0 <remove_chain+0x2a>
 800daec:	2302      	movs	r3, #2
 800daee:	e04b      	b.n	800db88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00c      	beq.n	800db10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800daf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	69b8      	ldr	r0, [r7, #24]
 800dafe:	f7ff fec6 	bl	800d88e <put_fat>
 800db02:	4603      	mov	r3, r0
 800db04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db06:	7ffb      	ldrb	r3, [r7, #31]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <remove_chain+0x4a>
 800db0c:	7ffb      	ldrb	r3, [r7, #31]
 800db0e:	e03b      	b.n	800db88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7ff fde7 	bl	800d6e6 <get_fat>
 800db18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d031      	beq.n	800db84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d101      	bne.n	800db2a <remove_chain+0x64>
 800db26:	2302      	movs	r3, #2
 800db28:	e02e      	b.n	800db88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d101      	bne.n	800db36 <remove_chain+0x70>
 800db32:	2301      	movs	r3, #1
 800db34:	e028      	b.n	800db88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db36:	2200      	movs	r2, #0
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	69b8      	ldr	r0, [r7, #24]
 800db3c:	f7ff fea7 	bl	800d88e <put_fat>
 800db40:	4603      	mov	r3, r0
 800db42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db44:	7ffb      	ldrb	r3, [r7, #31]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <remove_chain+0x88>
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	e01c      	b.n	800db88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	695a      	ldr	r2, [r3, #20]
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	3b02      	subs	r3, #2
 800db58:	429a      	cmp	r2, r3
 800db5a:	d20b      	bcs.n	800db74 <remove_chain+0xae>
			fs->free_clst++;
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	1c5a      	adds	r2, r3, #1
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	791b      	ldrb	r3, [r3, #4]
 800db6a:	f043 0301 	orr.w	r3, r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d3c6      	bcc.n	800db10 <remove_chain+0x4a>
 800db82:	e000      	b.n	800db86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10d      	bne.n	800dbc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <create_chain+0x2c>
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	69ba      	ldr	r2, [r7, #24]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d31b      	bcc.n	800dbf4 <create_chain+0x64>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	61bb      	str	r3, [r7, #24]
 800dbc0:	e018      	b.n	800dbf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7ff fd8e 	bl	800d6e6 <get_fat>
 800dbca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d801      	bhi.n	800dbd6 <create_chain+0x46>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e070      	b.n	800dcb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbdc:	d101      	bne.n	800dbe2 <create_chain+0x52>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	e06a      	b.n	800dcb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d201      	bcs.n	800dbf0 <create_chain+0x60>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	e063      	b.n	800dcb8 <create_chain+0x128>
		scl = clst;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d307      	bcc.n	800dc18 <create_chain+0x88>
				ncl = 2;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc0c:	69fa      	ldr	r2, [r7, #28]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d901      	bls.n	800dc18 <create_chain+0x88>
 800dc14:	2300      	movs	r3, #0
 800dc16:	e04f      	b.n	800dcb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc18:	69f9      	ldr	r1, [r7, #28]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fd63 	bl	800d6e6 <get_fat>
 800dc20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00e      	beq.n	800dc46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d003      	beq.n	800dc36 <create_chain+0xa6>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc34:	d101      	bne.n	800dc3a <create_chain+0xaa>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e03e      	b.n	800dcb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d1da      	bne.n	800dbf8 <create_chain+0x68>
 800dc42:	2300      	movs	r3, #0
 800dc44:	e038      	b.n	800dcb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc48:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4c:	69f9      	ldr	r1, [r7, #28]
 800dc4e:	6938      	ldr	r0, [r7, #16]
 800dc50:	f7ff fe1d 	bl	800d88e <put_fat>
 800dc54:	4603      	mov	r3, r0
 800dc56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <create_chain+0xe2>
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d006      	beq.n	800dc72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc64:	69fa      	ldr	r2, [r7, #28]
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6938      	ldr	r0, [r7, #16]
 800dc6a:	f7ff fe10 	bl	800d88e <put_fat>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d116      	bne.n	800dca6 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	695a      	ldr	r2, [r3, #20]
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	3b02      	subs	r3, #2
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d804      	bhi.n	800dc96 <create_chain+0x106>
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	695b      	ldr	r3, [r3, #20]
 800dc90:	1e5a      	subs	r2, r3, #1
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	791b      	ldrb	r3, [r3, #4]
 800dc9a:	f043 0301 	orr.w	r3, r3, #1
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	711a      	strb	r2, [r3, #4]
 800dca4:	e007      	b.n	800dcb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d102      	bne.n	800dcb2 <create_chain+0x122>
 800dcac:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb0:	e000      	b.n	800dcb4 <create_chain+0x124>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dcb6:	69fb      	ldr	r3, [r7, #28]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3720      	adds	r7, #32
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	899b      	ldrh	r3, [r3, #12]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	8952      	ldrh	r2, [r2, #10]
 800dce8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	1d1a      	adds	r2, r3, #4
 800dcf2:	613a      	str	r2, [r7, #16]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <clmt_clust+0x42>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e010      	b.n	800dd24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d307      	bcc.n	800dd1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	3304      	adds	r3, #4
 800dd16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd18:	e7e9      	b.n	800dcee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dd1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	4413      	add	r3, r2
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	371c      	adds	r7, #28
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd46:	d204      	bcs.n	800dd52 <dir_sdi+0x22>
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	f003 031f 	and.w	r3, r3, #31
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd52:	2302      	movs	r3, #2
 800dd54:	e071      	b.n	800de3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d106      	bne.n	800dd76 <dir_sdi+0x46>
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d902      	bls.n	800dd76 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10c      	bne.n	800dd96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	095b      	lsrs	r3, r3, #5
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	8912      	ldrh	r2, [r2, #8]
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d301      	bcc.n	800dd8c <dir_sdi+0x5c>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e056      	b.n	800de3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	61da      	str	r2, [r3, #28]
 800dd94:	e02d      	b.n	800ddf2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	895b      	ldrh	r3, [r3, #10]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	899b      	ldrh	r3, [r3, #12]
 800dda0:	fb02 f303 	mul.w	r3, r2, r3
 800dda4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dda6:	e019      	b.n	800dddc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6979      	ldr	r1, [r7, #20]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7ff fc9a 	bl	800d6e6 <get_fat>
 800ddb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddba:	d101      	bne.n	800ddc0 <dir_sdi+0x90>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e03c      	b.n	800de3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d904      	bls.n	800ddd0 <dir_sdi+0xa0>
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d301      	bcc.n	800ddd4 <dir_sdi+0xa4>
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	e032      	b.n	800de3a <dir_sdi+0x10a>
			ofs -= csz;
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d2e1      	bcs.n	800dda8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dde4:	6979      	ldr	r1, [r7, #20]
 800dde6:	6938      	ldr	r0, [r7, #16]
 800dde8:	f7ff fc5e 	bl	800d6a8 <clust2sect>
 800ddec:	4602      	mov	r2, r0
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <dir_sdi+0xd4>
 800de00:	2302      	movs	r3, #2
 800de02:	e01a      	b.n	800de3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	69da      	ldr	r2, [r3, #28]
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	899b      	ldrh	r3, [r3, #12]
 800de0c:	4619      	mov	r1, r3
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	fbb3 f3f1 	udiv	r3, r3, r1
 800de14:	441a      	add	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	899b      	ldrh	r3, [r3, #12]
 800de24:	461a      	mov	r2, r3
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	fbb3 f0f2 	udiv	r0, r3, r2
 800de2c:	fb00 f202 	mul.w	r2, r0, r2
 800de30:	1a9b      	subs	r3, r3, r2
 800de32:	18ca      	adds	r2, r1, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b086      	sub	sp, #24
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	3320      	adds	r3, #32
 800de58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	69db      	ldr	r3, [r3, #28]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d003      	beq.n	800de6a <dir_next+0x28>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de68:	d301      	bcc.n	800de6e <dir_next+0x2c>
 800de6a:	2304      	movs	r3, #4
 800de6c:	e0bb      	b.n	800dfe6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	899b      	ldrh	r3, [r3, #12]
 800de72:	461a      	mov	r2, r3
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	fbb3 f1f2 	udiv	r1, r3, r2
 800de7a:	fb01 f202 	mul.w	r2, r1, r2
 800de7e:	1a9b      	subs	r3, r3, r2
 800de80:	2b00      	cmp	r3, #0
 800de82:	f040 809d 	bne.w	800dfc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	69db      	ldr	r3, [r3, #28]
 800de8a:	1c5a      	adds	r2, r3, #1
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	095b      	lsrs	r3, r3, #5
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	8912      	ldrh	r2, [r2, #8]
 800dea0:	4293      	cmp	r3, r2
 800dea2:	f0c0 808d 	bcc.w	800dfc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	61da      	str	r2, [r3, #28]
 800deac:	2304      	movs	r3, #4
 800deae:	e09a      	b.n	800dfe6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	899b      	ldrh	r3, [r3, #12]
 800deb4:	461a      	mov	r2, r3
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	8952      	ldrh	r2, [r2, #10]
 800dec0:	3a01      	subs	r2, #1
 800dec2:	4013      	ands	r3, r2
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d17b      	bne.n	800dfc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	699b      	ldr	r3, [r3, #24]
 800dece:	4619      	mov	r1, r3
 800ded0:	4610      	mov	r0, r2
 800ded2:	f7ff fc08 	bl	800d6e6 <get_fat>
 800ded6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d801      	bhi.n	800dee2 <dir_next+0xa0>
 800dede:	2302      	movs	r3, #2
 800dee0:	e081      	b.n	800dfe6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee8:	d101      	bne.n	800deee <dir_next+0xac>
 800deea:	2301      	movs	r3, #1
 800deec:	e07b      	b.n	800dfe6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	429a      	cmp	r2, r3
 800def6:	d359      	bcc.n	800dfac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d104      	bne.n	800df08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	61da      	str	r2, [r3, #28]
 800df04:	2304      	movs	r3, #4
 800df06:	e06e      	b.n	800dfe6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	699b      	ldr	r3, [r3, #24]
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f7ff fe3d 	bl	800db90 <create_chain>
 800df16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <dir_next+0xe0>
 800df1e:	2307      	movs	r3, #7
 800df20:	e061      	b.n	800dfe6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d101      	bne.n	800df2c <dir_next+0xea>
 800df28:	2302      	movs	r3, #2
 800df2a:	e05c      	b.n	800dfe6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df32:	d101      	bne.n	800df38 <dir_next+0xf6>
 800df34:	2301      	movs	r3, #1
 800df36:	e056      	b.n	800dfe6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff fad3 	bl	800d4e4 <sync_window>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <dir_next+0x106>
 800df44:	2301      	movs	r3, #1
 800df46:	e04e      	b.n	800dfe6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	899b      	ldrh	r3, [r3, #12]
 800df52:	461a      	mov	r2, r3
 800df54:	2100      	movs	r1, #0
 800df56:	f7ff f8fc 	bl	800d152 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
 800df5e:	6979      	ldr	r1, [r7, #20]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7ff fba1 	bl	800d6a8 <clust2sect>
 800df66:	4602      	mov	r2, r0
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	631a      	str	r2, [r3, #48]	; 0x30
 800df6c:	e012      	b.n	800df94 <dir_next+0x152>
						fs->wflag = 1;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2201      	movs	r2, #1
 800df72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff fab5 	bl	800d4e4 <sync_window>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <dir_next+0x142>
 800df80:	2301      	movs	r3, #1
 800df82:	e030      	b.n	800dfe6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	3301      	adds	r3, #1
 800df88:	613b      	str	r3, [r7, #16]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	631a      	str	r2, [r3, #48]	; 0x30
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	895b      	ldrh	r3, [r3, #10]
 800df98:	461a      	mov	r2, r3
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d3e6      	bcc.n	800df6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dfb2:	6979      	ldr	r1, [r7, #20]
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff fb77 	bl	800d6a8 <clust2sect>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	899b      	ldrh	r3, [r3, #12]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfd8:	fb00 f202 	mul.w	r2, r0, r2
 800dfdc:	1a9b      	subs	r3, r3, r2
 800dfde:	18ca      	adds	r2, r1, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b086      	sub	sp, #24
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dffe:	2100      	movs	r1, #0
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff fe95 	bl	800dd30 <dir_sdi>
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d12b      	bne.n	800e068 <dir_alloc+0x7a>
		n = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	4619      	mov	r1, r3
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff faa6 	bl	800d56c <move_window>
 800e020:	4603      	mov	r3, r0
 800e022:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e024:	7dfb      	ldrb	r3, [r7, #23]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d11d      	bne.n	800e066 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2be5      	cmp	r3, #229	; 0xe5
 800e032:	d004      	beq.n	800e03e <dir_alloc+0x50>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a1b      	ldr	r3, [r3, #32]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d107      	bne.n	800e04e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	3301      	adds	r3, #1
 800e042:	613b      	str	r3, [r7, #16]
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d102      	bne.n	800e052 <dir_alloc+0x64>
 800e04c:	e00c      	b.n	800e068 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e04e:	2300      	movs	r3, #0
 800e050:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e052:	2101      	movs	r1, #1
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff fef4 	bl	800de42 <dir_next>
 800e05a:	4603      	mov	r3, r0
 800e05c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d0d7      	beq.n	800e014 <dir_alloc+0x26>
 800e064:	e000      	b.n	800e068 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e066:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e068:	7dfb      	ldrb	r3, [r7, #23]
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	d101      	bne.n	800e072 <dir_alloc+0x84>
 800e06e:	2307      	movs	r3, #7
 800e070:	75fb      	strb	r3, [r7, #23]
	return res;
 800e072:	7dfb      	ldrb	r3, [r7, #23]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	331a      	adds	r3, #26
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe ffbe 	bl	800d00c <ld_word>
 800e090:	4603      	mov	r3, r0
 800e092:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	2b03      	cmp	r3, #3
 800e09a:	d109      	bne.n	800e0b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	3314      	adds	r3, #20
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fe ffb3 	bl	800d00c <ld_word>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	041b      	lsls	r3, r3, #16
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	331a      	adds	r3, #26
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	b292      	uxth	r2, r2
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fe ffd6 	bl	800d082 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d109      	bne.n	800e0f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f103 0214 	add.w	r2, r3, #20
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	0c1b      	lsrs	r3, r3, #16
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	f7fe ffc8 	bl	800d082 <st_word>
	}
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b086      	sub	sp, #24
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e108:	2100      	movs	r1, #0
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff fe10 	bl	800dd30 <dir_sdi>
 800e110:	4603      	mov	r3, r0
 800e112:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <dir_find+0x24>
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	e03e      	b.n	800e19c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	4619      	mov	r1, r3
 800e124:	6938      	ldr	r0, [r7, #16]
 800e126:	f7ff fa21 	bl	800d56c <move_window>
 800e12a:	4603      	mov	r3, r0
 800e12c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d12f      	bne.n	800e194 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a1b      	ldr	r3, [r3, #32]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e13c:	7bfb      	ldrb	r3, [r7, #15]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <dir_find+0x4e>
 800e142:	2304      	movs	r3, #4
 800e144:	75fb      	strb	r3, [r7, #23]
 800e146:	e028      	b.n	800e19a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	330b      	adds	r3, #11
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e154:	b2da      	uxtb	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	330b      	adds	r3, #11
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	f003 0308 	and.w	r3, r3, #8
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10a      	bne.n	800e180 <dir_find+0x86>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a18      	ldr	r0, [r3, #32]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	3324      	adds	r3, #36	; 0x24
 800e172:	220b      	movs	r2, #11
 800e174:	4619      	mov	r1, r3
 800e176:	f7ff f807 	bl	800d188 <mem_cmp>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00b      	beq.n	800e198 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e180:	2100      	movs	r1, #0
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fe5d 	bl	800de42 <dir_next>
 800e188:	4603      	mov	r3, r0
 800e18a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d0c5      	beq.n	800e11e <dir_find+0x24>
 800e192:	e002      	b.n	800e19a <dir_find+0xa0>
		if (res != FR_OK) break;
 800e194:	bf00      	nop
 800e196:	e000      	b.n	800e19a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e198:	bf00      	nop

	return res;
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff ff1a 	bl	800dfee <dir_alloc>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d11c      	bne.n	800e1fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	69db      	ldr	r3, [r3, #28]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	68b8      	ldr	r0, [r7, #8]
 800e1cc:	f7ff f9ce 	bl	800d56c <move_window>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d111      	bne.n	800e1fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe ffb5 	bl	800d152 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a18      	ldr	r0, [r3, #32]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3324      	adds	r3, #36	; 0x24
 800e1f0:	220b      	movs	r2, #11
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	f7fe ff8c 	bl	800d110 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	2200      	movs	r2, #0
 800e216:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	69db      	ldr	r3, [r3, #28]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d04e      	beq.n	800e2be <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e228:	e021      	b.n	800e26e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a1a      	ldr	r2, [r3, #32]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	1c59      	adds	r1, r3, #1
 800e232:	6179      	str	r1, [r7, #20]
 800e234:	4413      	add	r3, r2
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	2b20      	cmp	r3, #32
 800e23e:	d100      	bne.n	800e242 <get_fileinfo+0x3a>
 800e240:	e015      	b.n	800e26e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	2b05      	cmp	r3, #5
 800e246:	d101      	bne.n	800e24c <get_fileinfo+0x44>
 800e248:	23e5      	movs	r3, #229	; 0xe5
 800e24a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2b09      	cmp	r3, #9
 800e250:	d106      	bne.n	800e260 <get_fileinfo+0x58>
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	613a      	str	r2, [r7, #16]
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	4413      	add	r3, r2
 800e25c:	222e      	movs	r2, #46	; 0x2e
 800e25e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	613a      	str	r2, [r7, #16]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	4413      	add	r3, r2
 800e26a:	7bfa      	ldrb	r2, [r7, #15]
 800e26c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2b0a      	cmp	r3, #10
 800e272:	d9da      	bls.n	800e22a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	4413      	add	r3, r2
 800e27a:	3309      	adds	r3, #9
 800e27c:	2200      	movs	r2, #0
 800e27e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	7ada      	ldrb	r2, [r3, #11]
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	331c      	adds	r3, #28
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe fed3 	bl	800d03c <ld_dword>
 800e296:	4602      	mov	r2, r0
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a1b      	ldr	r3, [r3, #32]
 800e2a0:	3316      	adds	r3, #22
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe feca 	bl	800d03c <ld_dword>
 800e2a8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	80da      	strh	r2, [r3, #6]
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	0c1b      	lsrs	r3, r3, #16
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	809a      	strh	r2, [r3, #4]
 800e2bc:	e000      	b.n	800e2c0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e2be:	bf00      	nop
}
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
	...

0800e2c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3324      	adds	r3, #36	; 0x24
 800e2dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e2de:	220b      	movs	r2, #11
 800e2e0:	2120      	movs	r1, #32
 800e2e2:	68b8      	ldr	r0, [r7, #8]
 800e2e4:	f7fe ff35 	bl	800d152 <mem_set>
	si = i = 0; ni = 8;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	613b      	str	r3, [r7, #16]
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	1c5a      	adds	r2, r3, #1
 800e2f8:	61fa      	str	r2, [r7, #28]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e302:	7efb      	ldrb	r3, [r7, #27]
 800e304:	2b20      	cmp	r3, #32
 800e306:	d94e      	bls.n	800e3a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e308:	7efb      	ldrb	r3, [r7, #27]
 800e30a:	2b2f      	cmp	r3, #47	; 0x2f
 800e30c:	d006      	beq.n	800e31c <create_name+0x54>
 800e30e:	7efb      	ldrb	r3, [r7, #27]
 800e310:	2b5c      	cmp	r3, #92	; 0x5c
 800e312:	d110      	bne.n	800e336 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e314:	e002      	b.n	800e31c <create_name+0x54>
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	3301      	adds	r3, #1
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	4413      	add	r3, r2
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b2f      	cmp	r3, #47	; 0x2f
 800e326:	d0f6      	beq.n	800e316 <create_name+0x4e>
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	4413      	add	r3, r2
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b5c      	cmp	r3, #92	; 0x5c
 800e332:	d0f0      	beq.n	800e316 <create_name+0x4e>
			break;
 800e334:	e038      	b.n	800e3a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e336:	7efb      	ldrb	r3, [r7, #27]
 800e338:	2b2e      	cmp	r3, #46	; 0x2e
 800e33a:	d003      	beq.n	800e344 <create_name+0x7c>
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	429a      	cmp	r2, r3
 800e342:	d30c      	bcc.n	800e35e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b0b      	cmp	r3, #11
 800e348:	d002      	beq.n	800e350 <create_name+0x88>
 800e34a:	7efb      	ldrb	r3, [r7, #27]
 800e34c:	2b2e      	cmp	r3, #46	; 0x2e
 800e34e:	d001      	beq.n	800e354 <create_name+0x8c>
 800e350:	2306      	movs	r3, #6
 800e352:	e044      	b.n	800e3de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e354:	2308      	movs	r3, #8
 800e356:	613b      	str	r3, [r7, #16]
 800e358:	230b      	movs	r3, #11
 800e35a:	617b      	str	r3, [r7, #20]
			continue;
 800e35c:	e022      	b.n	800e3a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e35e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e362:	2b00      	cmp	r3, #0
 800e364:	da04      	bge.n	800e370 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e366:	7efb      	ldrb	r3, [r7, #27]
 800e368:	3b80      	subs	r3, #128	; 0x80
 800e36a:	4a1f      	ldr	r2, [pc, #124]	; (800e3e8 <create_name+0x120>)
 800e36c:	5cd3      	ldrb	r3, [r2, r3]
 800e36e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e370:	7efb      	ldrb	r3, [r7, #27]
 800e372:	4619      	mov	r1, r3
 800e374:	481d      	ldr	r0, [pc, #116]	; (800e3ec <create_name+0x124>)
 800e376:	f7fe ff2e 	bl	800d1d6 <chk_chr>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <create_name+0xbc>
 800e380:	2306      	movs	r3, #6
 800e382:	e02c      	b.n	800e3de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e384:	7efb      	ldrb	r3, [r7, #27]
 800e386:	2b60      	cmp	r3, #96	; 0x60
 800e388:	d905      	bls.n	800e396 <create_name+0xce>
 800e38a:	7efb      	ldrb	r3, [r7, #27]
 800e38c:	2b7a      	cmp	r3, #122	; 0x7a
 800e38e:	d802      	bhi.n	800e396 <create_name+0xce>
 800e390:	7efb      	ldrb	r3, [r7, #27]
 800e392:	3b20      	subs	r3, #32
 800e394:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	613a      	str	r2, [r7, #16]
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	4413      	add	r3, r2
 800e3a0:	7efa      	ldrb	r2, [r7, #27]
 800e3a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e3a4:	e7a6      	b.n	800e2f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e3a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	441a      	add	r2, r3
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <create_name+0xf4>
 800e3b8:	2306      	movs	r3, #6
 800e3ba:	e010      	b.n	800e3de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2be5      	cmp	r3, #229	; 0xe5
 800e3c2:	d102      	bne.n	800e3ca <create_name+0x102>
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2205      	movs	r2, #5
 800e3c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e3ca:	7efb      	ldrb	r3, [r7, #27]
 800e3cc:	2b20      	cmp	r3, #32
 800e3ce:	d801      	bhi.n	800e3d4 <create_name+0x10c>
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	e000      	b.n	800e3d6 <create_name+0x10e>
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	330b      	adds	r3, #11
 800e3da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e3dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3720      	adds	r7, #32
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	0802e618 	.word	0x0802e618
 800e3ec:	08013fc8 	.word	0x08013fc8

0800e3f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e404:	e002      	b.n	800e40c <follow_path+0x1c>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	3301      	adds	r3, #1
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b2f      	cmp	r3, #47	; 0x2f
 800e412:	d0f8      	beq.n	800e406 <follow_path+0x16>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b5c      	cmp	r3, #92	; 0x5c
 800e41a:	d0f4      	beq.n	800e406 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	2200      	movs	r2, #0
 800e420:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b1f      	cmp	r3, #31
 800e428:	d80a      	bhi.n	800e440 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2280      	movs	r2, #128	; 0x80
 800e42e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e432:	2100      	movs	r1, #0
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff fc7b 	bl	800dd30 <dir_sdi>
 800e43a:	4603      	mov	r3, r0
 800e43c:	75fb      	strb	r3, [r7, #23]
 800e43e:	e048      	b.n	800e4d2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e440:	463b      	mov	r3, r7
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff ff3f 	bl	800e2c8 <create_name>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d139      	bne.n	800e4c8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff fe50 	bl	800e0fa <dir_find>
 800e45a:	4603      	mov	r3, r0
 800e45c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e464:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e466:	7dfb      	ldrb	r3, [r7, #23]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00a      	beq.n	800e482 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
 800e46e:	2b04      	cmp	r3, #4
 800e470:	d12c      	bne.n	800e4cc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e472:	7afb      	ldrb	r3, [r7, #11]
 800e474:	f003 0304 	and.w	r3, r3, #4
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d127      	bne.n	800e4cc <follow_path+0xdc>
 800e47c:	2305      	movs	r3, #5
 800e47e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e480:	e024      	b.n	800e4cc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e482:	7afb      	ldrb	r3, [r7, #11]
 800e484:	f003 0304 	and.w	r3, r3, #4
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d121      	bne.n	800e4d0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	799b      	ldrb	r3, [r3, #6]
 800e490:	f003 0310 	and.w	r3, r3, #16
 800e494:	2b00      	cmp	r3, #0
 800e496:	d102      	bne.n	800e49e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e498:	2305      	movs	r3, #5
 800e49a:	75fb      	strb	r3, [r7, #23]
 800e49c:	e019      	b.n	800e4d2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	8992      	ldrh	r2, [r2, #12]
 800e4ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4b0:	fb00 f202 	mul.w	r2, r0, r2
 800e4b4:	1a9b      	subs	r3, r3, r2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff fdde 	bl	800e07c <ld_clust>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e4c6:	e7bb      	b.n	800e440 <follow_path+0x50>
			if (res != FR_OK) break;
 800e4c8:	bf00      	nop
 800e4ca:	e002      	b.n	800e4d2 <follow_path+0xe2>
				break;
 800e4cc:	bf00      	nop
 800e4ce:	e000      	b.n	800e4d2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e4d0:	bf00      	nop
			}
		}
	}

	return res;
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3718      	adds	r7, #24
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d031      	beq.n	800e556 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	e002      	b.n	800e500 <get_ldnumber+0x24>
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b20      	cmp	r3, #32
 800e506:	d903      	bls.n	800e510 <get_ldnumber+0x34>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	2b3a      	cmp	r3, #58	; 0x3a
 800e50e:	d1f4      	bne.n	800e4fa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b3a      	cmp	r3, #58	; 0x3a
 800e516:	d11c      	bne.n	800e552 <get_ldnumber+0x76>
			tp = *path;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	1c5a      	adds	r2, r3, #1
 800e522:	60fa      	str	r2, [r7, #12]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	3b30      	subs	r3, #48	; 0x30
 800e528:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b09      	cmp	r3, #9
 800e52e:	d80e      	bhi.n	800e54e <get_ldnumber+0x72>
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	429a      	cmp	r2, r3
 800e536:	d10a      	bne.n	800e54e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d107      	bne.n	800e54e <get_ldnumber+0x72>
					vol = (int)i;
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	3301      	adds	r3, #1
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	e002      	b.n	800e558 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e552:	2300      	movs	r3, #0
 800e554:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e556:	693b      	ldr	r3, [r7, #16]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	371c      	adds	r7, #28
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	70da      	strb	r2, [r3, #3]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f04f 32ff 	mov.w	r2, #4294967295
 800e57a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fe fff4 	bl	800d56c <move_window>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <check_fs+0x2a>
 800e58a:	2304      	movs	r3, #4
 800e58c:	e038      	b.n	800e600 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	3334      	adds	r3, #52	; 0x34
 800e592:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e596:	4618      	mov	r0, r3
 800e598:	f7fe fd38 	bl	800d00c <ld_word>
 800e59c:	4603      	mov	r3, r0
 800e59e:	461a      	mov	r2, r3
 800e5a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d001      	beq.n	800e5ac <check_fs+0x48>
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	e029      	b.n	800e600 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5b2:	2be9      	cmp	r3, #233	; 0xe9
 800e5b4:	d009      	beq.n	800e5ca <check_fs+0x66>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5bc:	2beb      	cmp	r3, #235	; 0xeb
 800e5be:	d11e      	bne.n	800e5fe <check_fs+0x9a>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e5c6:	2b90      	cmp	r3, #144	; 0x90
 800e5c8:	d119      	bne.n	800e5fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	3334      	adds	r3, #52	; 0x34
 800e5ce:	3336      	adds	r3, #54	; 0x36
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fd33 	bl	800d03c <ld_dword>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5dc:	4a0a      	ldr	r2, [pc, #40]	; (800e608 <check_fs+0xa4>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d101      	bne.n	800e5e6 <check_fs+0x82>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e00c      	b.n	800e600 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	3334      	adds	r3, #52	; 0x34
 800e5ea:	3352      	adds	r3, #82	; 0x52
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe fd25 	bl	800d03c <ld_dword>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	4a05      	ldr	r2, [pc, #20]	; (800e60c <check_fs+0xa8>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d101      	bne.n	800e5fe <check_fs+0x9a>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e000      	b.n	800e600 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e5fe:	2302      	movs	r3, #2
}
 800e600:	4618      	mov	r0, r3
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	00544146 	.word	0x00544146
 800e60c:	33544146 	.word	0x33544146

0800e610 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b096      	sub	sp, #88	; 0x58
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	2200      	movs	r2, #0
 800e622:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7ff ff59 	bl	800e4dc <get_ldnumber>
 800e62a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	2b00      	cmp	r3, #0
 800e630:	da01      	bge.n	800e636 <find_volume+0x26>
 800e632:	230b      	movs	r3, #11
 800e634:	e262      	b.n	800eafc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e636:	4a9f      	ldr	r2, [pc, #636]	; (800e8b4 <find_volume+0x2a4>)
 800e638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e63e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <find_volume+0x3a>
 800e646:	230c      	movs	r3, #12
 800e648:	e258      	b.n	800eafc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e64e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	f023 0301 	bic.w	r3, r3, #1
 800e656:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01a      	beq.n	800e696 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	785b      	ldrb	r3, [r3, #1]
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe fc33 	bl	800ced0 <disk_status>
 800e66a:	4603      	mov	r3, r0
 800e66c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10c      	bne.n	800e696 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d007      	beq.n	800e692 <find_volume+0x82>
 800e682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e686:	f003 0304 	and.w	r3, r3, #4
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e68e:	230a      	movs	r3, #10
 800e690:	e234      	b.n	800eafc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800e692:	2300      	movs	r3, #0
 800e694:	e232      	b.n	800eafc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e698:	2200      	movs	r2, #0
 800e69a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a6:	785b      	ldrb	r3, [r3, #1]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fc2b 	bl	800cf04 <disk_initialize>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e6b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e21b      	b.n	800eafc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e6c4:	79fb      	ldrb	r3, [r7, #7]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <find_volume+0xca>
 800e6ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6ce:	f003 0304 	and.w	r3, r3, #4
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d001      	beq.n	800e6da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e6d6:	230a      	movs	r3, #10
 800e6d8:	e210      	b.n	800eafc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6dc:	7858      	ldrb	r0, [r3, #1]
 800e6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e0:	330c      	adds	r3, #12
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	2102      	movs	r1, #2
 800e6e6:	f7fe fc73 	bl	800cfd0 <disk_ioctl>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <find_volume+0xe4>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e203      	b.n	800eafc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	899b      	ldrh	r3, [r3, #12]
 800e6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6fc:	d80d      	bhi.n	800e71a <find_volume+0x10a>
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	899b      	ldrh	r3, [r3, #12]
 800e702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e706:	d308      	bcc.n	800e71a <find_volume+0x10a>
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	899b      	ldrh	r3, [r3, #12]
 800e70c:	461a      	mov	r2, r3
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	899b      	ldrh	r3, [r3, #12]
 800e712:	3b01      	subs	r3, #1
 800e714:	4013      	ands	r3, r2
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <find_volume+0x10e>
 800e71a:	2301      	movs	r3, #1
 800e71c:	e1ee      	b.n	800eafc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e726:	f7ff ff1d 	bl	800e564 <check_fs>
 800e72a:	4603      	mov	r3, r0
 800e72c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e734:	2b02      	cmp	r3, #2
 800e736:	d149      	bne.n	800e7cc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e738:	2300      	movs	r3, #0
 800e73a:	643b      	str	r3, [r7, #64]	; 0x40
 800e73c:	e01e      	b.n	800e77c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e74c:	4413      	add	r3, r2
 800e74e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	3304      	adds	r3, #4
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d006      	beq.n	800e768 <find_volume+0x158>
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	3308      	adds	r3, #8
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe fc6c 	bl	800d03c <ld_dword>
 800e764:	4602      	mov	r2, r0
 800e766:	e000      	b.n	800e76a <find_volume+0x15a>
 800e768:	2200      	movs	r2, #0
 800e76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	3358      	adds	r3, #88	; 0x58
 800e770:	443b      	add	r3, r7
 800e772:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e778:	3301      	adds	r3, #1
 800e77a:	643b      	str	r3, [r7, #64]	; 0x40
 800e77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d9dd      	bls.n	800e73e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e782:	2300      	movs	r3, #0
 800e784:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <find_volume+0x182>
 800e78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e78e:	3b01      	subs	r3, #1
 800e790:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	3358      	adds	r3, #88	; 0x58
 800e798:	443b      	add	r3, r7
 800e79a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e79e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d005      	beq.n	800e7b2 <find_volume+0x1a2>
 800e7a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7aa:	f7ff fedb 	bl	800e564 <check_fs>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	e000      	b.n	800e7b4 <find_volume+0x1a4>
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e7b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d905      	bls.n	800e7cc <find_volume+0x1bc>
 800e7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	643b      	str	r3, [r7, #64]	; 0x40
 800e7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d9e2      	bls.n	800e792 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e7cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7d0:	2b04      	cmp	r3, #4
 800e7d2:	d101      	bne.n	800e7d8 <find_volume+0x1c8>
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	e191      	b.n	800eafc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e7d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d901      	bls.n	800e7e4 <find_volume+0x1d4>
 800e7e0:	230d      	movs	r3, #13
 800e7e2:	e18b      	b.n	800eafc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	3334      	adds	r3, #52	; 0x34
 800e7e8:	330b      	adds	r3, #11
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fc0e 	bl	800d00c <ld_word>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	899b      	ldrh	r3, [r3, #12]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d001      	beq.n	800e800 <find_volume+0x1f0>
 800e7fc:	230d      	movs	r3, #13
 800e7fe:	e17d      	b.n	800eafc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	3334      	adds	r3, #52	; 0x34
 800e804:	3316      	adds	r3, #22
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fc00 	bl	800d00c <ld_word>
 800e80c:	4603      	mov	r3, r0
 800e80e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d106      	bne.n	800e824 <find_volume+0x214>
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	3334      	adds	r3, #52	; 0x34
 800e81a:	3324      	adds	r3, #36	; 0x24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fc0d 	bl	800d03c <ld_dword>
 800e822:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e828:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	789b      	ldrb	r3, [r3, #2]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d005      	beq.n	800e848 <find_volume+0x238>
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	789b      	ldrb	r3, [r3, #2]
 800e840:	2b02      	cmp	r3, #2
 800e842:	d001      	beq.n	800e848 <find_volume+0x238>
 800e844:	230d      	movs	r3, #13
 800e846:	e159      	b.n	800eafc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	789b      	ldrb	r3, [r3, #2]
 800e84c:	461a      	mov	r2, r3
 800e84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e850:	fb02 f303 	mul.w	r3, r2, r3
 800e854:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e864:	895b      	ldrh	r3, [r3, #10]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d008      	beq.n	800e87c <find_volume+0x26c>
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	895b      	ldrh	r3, [r3, #10]
 800e86e:	461a      	mov	r2, r3
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	895b      	ldrh	r3, [r3, #10]
 800e874:	3b01      	subs	r3, #1
 800e876:	4013      	ands	r3, r2
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d001      	beq.n	800e880 <find_volume+0x270>
 800e87c:	230d      	movs	r3, #13
 800e87e:	e13d      	b.n	800eafc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	3334      	adds	r3, #52	; 0x34
 800e884:	3311      	adds	r3, #17
 800e886:	4618      	mov	r0, r3
 800e888:	f7fe fbc0 	bl	800d00c <ld_word>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	891b      	ldrh	r3, [r3, #8]
 800e898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e89a:	8992      	ldrh	r2, [r2, #12]
 800e89c:	0952      	lsrs	r2, r2, #5
 800e89e:	b292      	uxth	r2, r2
 800e8a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8a4:	fb01 f202 	mul.w	r2, r1, r2
 800e8a8:	1a9b      	subs	r3, r3, r2
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <find_volume+0x2a8>
 800e8b0:	230d      	movs	r3, #13
 800e8b2:	e123      	b.n	800eafc <find_volume+0x4ec>
 800e8b4:	20005d38 	.word	0x20005d38

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	3334      	adds	r3, #52	; 0x34
 800e8bc:	3313      	adds	r3, #19
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe fba4 	bl	800d00c <ld_word>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <find_volume+0x2cc>
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	3334      	adds	r3, #52	; 0x34
 800e8d2:	3320      	adds	r3, #32
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fe fbb1 	bl	800d03c <ld_dword>
 800e8da:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	3334      	adds	r3, #52	; 0x34
 800e8e0:	330e      	adds	r3, #14
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fe fb92 	bl	800d00c <ld_word>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e8ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <find_volume+0x2e6>
 800e8f2:	230d      	movs	r3, #13
 800e8f4:	e102      	b.n	800eafc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e8f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8fa:	4413      	add	r3, r2
 800e8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8fe:	8911      	ldrh	r1, [r2, #8]
 800e900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e902:	8992      	ldrh	r2, [r2, #12]
 800e904:	0952      	lsrs	r2, r2, #5
 800e906:	b292      	uxth	r2, r2
 800e908:	fbb1 f2f2 	udiv	r2, r1, r2
 800e90c:	b292      	uxth	r2, r2
 800e90e:	4413      	add	r3, r2
 800e910:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	429a      	cmp	r2, r3
 800e918:	d201      	bcs.n	800e91e <find_volume+0x30e>
 800e91a:	230d      	movs	r3, #13
 800e91c:	e0ee      	b.n	800eafc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e91e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e926:	8952      	ldrh	r2, [r2, #10]
 800e928:	fbb3 f3f2 	udiv	r3, r3, r2
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <find_volume+0x328>
 800e934:	230d      	movs	r3, #13
 800e936:	e0e1      	b.n	800eafc <find_volume+0x4ec>
		fmt = FS_FAT32;
 800e938:	2303      	movs	r3, #3
 800e93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e944:	4293      	cmp	r3, r2
 800e946:	d802      	bhi.n	800e94e <find_volume+0x33e>
 800e948:	2302      	movs	r3, #2
 800e94a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e950:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e954:	4293      	cmp	r3, r2
 800e956:	d802      	bhi.n	800e95e <find_volume+0x34e>
 800e958:	2301      	movs	r3, #1
 800e95a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e960:	1c9a      	adds	r2, r3, #2
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e96a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e96c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e970:	441a      	add	r2, r3
 800e972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e974:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	441a      	add	r2, r3
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e984:	2b03      	cmp	r3, #3
 800e986:	d11e      	bne.n	800e9c6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	3334      	adds	r3, #52	; 0x34
 800e98c:	332a      	adds	r3, #42	; 0x2a
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe fb3c 	bl	800d00c <ld_word>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <find_volume+0x38e>
 800e99a:	230d      	movs	r3, #13
 800e99c:	e0ae      	b.n	800eafc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a0:	891b      	ldrh	r3, [r3, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <find_volume+0x39a>
 800e9a6:	230d      	movs	r3, #13
 800e9a8:	e0a8      	b.n	800eafc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ac:	3334      	adds	r3, #52	; 0x34
 800e9ae:	332c      	adds	r3, #44	; 0x2c
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe fb43 	bl	800d03c <ld_dword>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	647b      	str	r3, [r7, #68]	; 0x44
 800e9c4:	e01f      	b.n	800ea06 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c8:	891b      	ldrh	r3, [r3, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <find_volume+0x3c2>
 800e9ce:	230d      	movs	r3, #13
 800e9d0:	e094      	b.n	800eafc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d8:	441a      	add	r2, r3
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e9de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d103      	bne.n	800e9ee <find_volume+0x3de>
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	699b      	ldr	r3, [r3, #24]
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	e00a      	b.n	800ea04 <find_volume+0x3f4>
 800e9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f0:	699a      	ldr	r2, [r3, #24]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	4413      	add	r3, r2
 800e9f8:	085a      	lsrs	r2, r3, #1
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ea04:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	69da      	ldr	r2, [r3, #28]
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	899b      	ldrh	r3, [r3, #12]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea12:	440b      	add	r3, r1
 800ea14:	3b01      	subs	r3, #1
 800ea16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea18:	8989      	ldrh	r1, [r1, #12]
 800ea1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d201      	bcs.n	800ea26 <find_volume+0x416>
 800ea22:	230d      	movs	r3, #13
 800ea24:	e06a      	b.n	800eafc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ea26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea28:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2c:	615a      	str	r2, [r3, #20]
 800ea2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea30:	695a      	ldr	r2, [r3, #20]
 800ea32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea34:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	2280      	movs	r2, #128	; 0x80
 800ea3a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ea3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea40:	2b03      	cmp	r3, #3
 800ea42:	d149      	bne.n	800ead8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ea44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea46:	3334      	adds	r3, #52	; 0x34
 800ea48:	3330      	adds	r3, #48	; 0x30
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fade 	bl	800d00c <ld_word>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d140      	bne.n	800ead8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ea56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea58:	3301      	adds	r3, #1
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea5e:	f7fe fd85 	bl	800d56c <move_window>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d137      	bne.n	800ead8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea70:	3334      	adds	r3, #52	; 0x34
 800ea72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe fac8 	bl	800d00c <ld_word>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d127      	bne.n	800ead8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	3334      	adds	r3, #52	; 0x34
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe fad5 	bl	800d03c <ld_dword>
 800ea92:	4603      	mov	r3, r0
 800ea94:	4a1b      	ldr	r2, [pc, #108]	; (800eb04 <find_volume+0x4f4>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d11e      	bne.n	800ead8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9c:	3334      	adds	r3, #52	; 0x34
 800ea9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fe faca 	bl	800d03c <ld_dword>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	4a17      	ldr	r2, [pc, #92]	; (800eb08 <find_volume+0x4f8>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d113      	bne.n	800ead8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab2:	3334      	adds	r3, #52	; 0x34
 800eab4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe fabf 	bl	800d03c <ld_dword>
 800eabe:	4602      	mov	r2, r0
 800eac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	3334      	adds	r3, #52	; 0x34
 800eac8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe fab5 	bl	800d03c <ld_dword>
 800ead2:	4602      	mov	r2, r0
 800ead4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ead8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eada:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800eade:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800eae0:	4b0a      	ldr	r3, [pc, #40]	; (800eb0c <find_volume+0x4fc>)
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	3301      	adds	r3, #1
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	4b08      	ldr	r3, [pc, #32]	; (800eb0c <find_volume+0x4fc>)
 800eaea:	801a      	strh	r2, [r3, #0]
 800eaec:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <find_volume+0x4fc>)
 800eaee:	881a      	ldrh	r2, [r3, #0]
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800eaf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eaf6:	f7fe fcd1 	bl	800d49c <clear_lock>
#endif
	return FR_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3758      	adds	r7, #88	; 0x58
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	41615252 	.word	0x41615252
 800eb08:	61417272 	.word	0x61417272
 800eb0c:	20005d3c 	.word	0x20005d3c

0800eb10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800eb1a:	2309      	movs	r3, #9
 800eb1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01c      	beq.n	800eb5e <validate+0x4e>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d018      	beq.n	800eb5e <validate+0x4e>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d013      	beq.n	800eb5e <validate+0x4e>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	889a      	ldrh	r2, [r3, #4]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	88db      	ldrh	r3, [r3, #6]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d10c      	bne.n	800eb5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	785b      	ldrb	r3, [r3, #1]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7fe f9c0 	bl	800ced0 <disk_status>
 800eb50:	4603      	mov	r3, r0
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d101      	bne.n	800eb5e <validate+0x4e>
			res = FR_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d102      	bne.n	800eb6a <validate+0x5a>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	e000      	b.n	800eb6c <validate+0x5c>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	6013      	str	r3, [r2, #0]
	return res;
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b088      	sub	sp, #32
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	4613      	mov	r3, r2
 800eb88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eb8e:	f107 0310 	add.w	r3, r7, #16
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fca2 	bl	800e4dc <get_ldnumber>
 800eb98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	da01      	bge.n	800eba4 <f_mount+0x28>
 800eba0:	230b      	movs	r3, #11
 800eba2:	e02b      	b.n	800ebfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eba4:	4a17      	ldr	r2, [pc, #92]	; (800ec04 <f_mount+0x88>)
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d005      	beq.n	800ebc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ebb4:	69b8      	ldr	r0, [r7, #24]
 800ebb6:	f7fe fc71 	bl	800d49c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d002      	beq.n	800ebcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	490d      	ldr	r1, [pc, #52]	; (800ec04 <f_mount+0x88>)
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <f_mount+0x66>
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d001      	beq.n	800ebe6 <f_mount+0x6a>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	e00a      	b.n	800ebfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ebe6:	f107 010c 	add.w	r1, r7, #12
 800ebea:	f107 0308 	add.w	r3, r7, #8
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fd0d 	bl	800e610 <find_volume>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3720      	adds	r7, #32
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20005d38 	.word	0x20005d38

0800ec08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b098      	sub	sp, #96	; 0x60
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	4613      	mov	r3, r2
 800ec14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <f_open+0x18>
 800ec1c:	2309      	movs	r3, #9
 800ec1e:	e1bb      	b.n	800ef98 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ec20:	79fb      	ldrb	r3, [r7, #7]
 800ec22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ec28:	79fa      	ldrb	r2, [r7, #7]
 800ec2a:	f107 0110 	add.w	r1, r7, #16
 800ec2e:	f107 0308 	add.w	r3, r7, #8
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fcec 	bl	800e610 <find_volume>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ec3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f040 819f 	bne.w	800ef86 <f_open+0x37e>
		dj.obj.fs = fs;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	f107 0314 	add.w	r3, r7, #20
 800ec52:	4611      	mov	r1, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff fbcb 	bl	800e3f0 <follow_path>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ec60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d11a      	bne.n	800ec9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ec68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec6c:	b25b      	sxtb	r3, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	da03      	bge.n	800ec7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ec72:	2306      	movs	r3, #6
 800ec74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec78:	e011      	b.n	800ec9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	f023 0301 	bic.w	r3, r3, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bf14      	ite	ne
 800ec84:	2301      	movne	r3, #1
 800ec86:	2300      	moveq	r3, #0
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f107 0314 	add.w	r3, r7, #20
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe faba 	bl	800d20c <chk_lock>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	f003 031c 	and.w	r3, r3, #28
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d07f      	beq.n	800eda8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d017      	beq.n	800ece0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ecb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecb4:	2b04      	cmp	r3, #4
 800ecb6:	d10e      	bne.n	800ecd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ecb8:	f7fe fb04 	bl	800d2c4 <enq_lock>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d006      	beq.n	800ecd0 <f_open+0xc8>
 800ecc2:	f107 0314 	add.w	r3, r7, #20
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff fa6c 	bl	800e1a4 <dir_register>
 800eccc:	4603      	mov	r3, r0
 800ecce:	e000      	b.n	800ecd2 <f_open+0xca>
 800ecd0:	2312      	movs	r3, #18
 800ecd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	f043 0308 	orr.w	r3, r3, #8
 800ecdc:	71fb      	strb	r3, [r7, #7]
 800ecde:	e010      	b.n	800ed02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ece0:	7ebb      	ldrb	r3, [r7, #26]
 800ece2:	f003 0311 	and.w	r3, r3, #17
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d003      	beq.n	800ecf2 <f_open+0xea>
					res = FR_DENIED;
 800ecea:	2307      	movs	r3, #7
 800ecec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ecf0:	e007      	b.n	800ed02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <f_open+0xfa>
 800ecfc:	2308      	movs	r3, #8
 800ecfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ed02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d168      	bne.n	800eddc <f_open+0x1d4>
 800ed0a:	79fb      	ldrb	r3, [r7, #7]
 800ed0c:	f003 0308 	and.w	r3, r3, #8
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d063      	beq.n	800eddc <f_open+0x1d4>
				dw = GET_FATTIME();
 800ed14:	f7fd ff70 	bl	800cbf8 <get_fattime>
 800ed18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ed1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1c:	330e      	adds	r3, #14
 800ed1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe f9c9 	bl	800d0b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ed26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed28:	3316      	adds	r3, #22
 800ed2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fe f9c3 	bl	800d0b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ed32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed34:	330b      	adds	r3, #11
 800ed36:	2220      	movs	r2, #32
 800ed38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed3e:	4611      	mov	r1, r2
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff f99b 	bl	800e07c <ld_clust>
 800ed46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff f9b3 	bl	800e0ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ed54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed56:	331c      	adds	r3, #28
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe f9ac 	bl	800d0b8 <st_dword>
					fs->wflag = 1;
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	2201      	movs	r2, #1
 800ed64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ed66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d037      	beq.n	800eddc <f_open+0x1d4>
						dw = fs->winsect;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ed72:	f107 0314 	add.w	r3, r7, #20
 800ed76:	2200      	movs	r2, #0
 800ed78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fe fea3 	bl	800dac6 <remove_chain>
 800ed80:	4603      	mov	r3, r0
 800ed82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ed86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d126      	bne.n	800eddc <f_open+0x1d4>
							res = move_window(fs, dw);
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fbea 	bl	800d56c <move_window>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eda2:	3a01      	subs	r2, #1
 800eda4:	611a      	str	r2, [r3, #16]
 800eda6:	e019      	b.n	800eddc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eda8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edac:	2b00      	cmp	r3, #0
 800edae:	d115      	bne.n	800eddc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800edb0:	7ebb      	ldrb	r3, [r7, #26]
 800edb2:	f003 0310 	and.w	r3, r3, #16
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d003      	beq.n	800edc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800edba:	2304      	movs	r3, #4
 800edbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800edc0:	e00c      	b.n	800eddc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	f003 0302 	and.w	r3, r3, #2
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d007      	beq.n	800eddc <f_open+0x1d4>
 800edcc:	7ebb      	ldrb	r3, [r7, #26]
 800edce:	f003 0301 	and.w	r3, r3, #1
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d002      	beq.n	800eddc <f_open+0x1d4>
						res = FR_DENIED;
 800edd6:	2307      	movs	r3, #7
 800edd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d128      	bne.n	800ee36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ede4:	79fb      	ldrb	r3, [r7, #7]
 800ede6:	f003 0308 	and.w	r3, r3, #8
 800edea:	2b00      	cmp	r3, #0
 800edec:	d003      	beq.n	800edf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800edfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	f023 0301 	bic.w	r3, r3, #1
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	bf14      	ite	ne
 800ee0e:	2301      	movne	r3, #1
 800ee10:	2300      	moveq	r3, #0
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	461a      	mov	r2, r3
 800ee16:	f107 0314 	add.w	r3, r7, #20
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fe fa73 	bl	800d308 <inc_lock>
 800ee22:	4602      	mov	r2, r0
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d102      	bne.n	800ee36 <f_open+0x22e>
 800ee30:	2302      	movs	r3, #2
 800ee32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ee36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f040 80a3 	bne.w	800ef86 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee44:	4611      	mov	r1, r2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7ff f918 	bl	800e07c <ld_clust>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ee52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee54:	331c      	adds	r3, #28
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fe f8f0 	bl	800d03c <ld_dword>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	88da      	ldrh	r2, [r3, #6]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	79fa      	ldrb	r2, [r7, #7]
 800ee7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3330      	adds	r3, #48	; 0x30
 800ee92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe f95a 	bl	800d152 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	f003 0320 	and.w	r3, r3, #32
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d06e      	beq.n	800ef86 <f_open+0x37e>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d06a      	beq.n	800ef86 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68da      	ldr	r2, [r3, #12]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	895b      	ldrh	r3, [r3, #10]
 800eebc:	461a      	mov	r2, r3
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	899b      	ldrh	r3, [r3, #12]
 800eec2:	fb02 f303 	mul.w	r3, r2, r3
 800eec6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	657b      	str	r3, [r7, #84]	; 0x54
 800eed4:	e016      	b.n	800ef04 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe fc03 	bl	800d6e6 <get_fat>
 800eee0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800eee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d802      	bhi.n	800eeee <f_open+0x2e6>
 800eee8:	2302      	movs	r3, #2
 800eeea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eeee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef4:	d102      	bne.n	800eefc <f_open+0x2f4>
 800eef6:	2301      	movs	r3, #1
 800eef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eefc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eefe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	657b      	str	r3, [r7, #84]	; 0x54
 800ef04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <f_open+0x30c>
 800ef0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d8e0      	bhi.n	800eed6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ef1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d131      	bne.n	800ef86 <f_open+0x37e>
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	899b      	ldrh	r3, [r3, #12]
 800ef26:	461a      	mov	r2, r3
 800ef28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef2e:	fb01 f202 	mul.w	r2, r1, r2
 800ef32:	1a9b      	subs	r3, r3, r2
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d026      	beq.n	800ef86 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fe fbb3 	bl	800d6a8 <clust2sect>
 800ef42:	6478      	str	r0, [r7, #68]	; 0x44
 800ef44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <f_open+0x34a>
						res = FR_INT_ERR;
 800ef4a:	2302      	movs	r3, #2
 800ef4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef50:	e019      	b.n	800ef86 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	899b      	ldrh	r3, [r3, #12]
 800ef56:	461a      	mov	r2, r3
 800ef58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef60:	441a      	add	r2, r3
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	7858      	ldrb	r0, [r3, #1]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6a1a      	ldr	r2, [r3, #32]
 800ef74:	2301      	movs	r3, #1
 800ef76:	f7fd ffeb 	bl	800cf50 <disk_read>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <f_open+0x37e>
 800ef80:	2301      	movs	r3, #1
 800ef82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ef86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <f_open+0x38c>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ef94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3760      	adds	r7, #96	; 0x60
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08e      	sub	sp, #56	; 0x38
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	607a      	str	r2, [r7, #4]
 800efac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f107 0214 	add.w	r2, r7, #20
 800efbe:	4611      	mov	r1, r2
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff fda5 	bl	800eb10 <validate>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800efcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d107      	bne.n	800efe4 <f_read+0x44>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	7d5b      	ldrb	r3, [r3, #21]
 800efd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800efdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <f_read+0x4a>
 800efe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800efe8:	e135      	b.n	800f256 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	7d1b      	ldrb	r3, [r3, #20]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d101      	bne.n	800effa <f_read+0x5a>
 800eff6:	2307      	movs	r3, #7
 800eff8:	e12d      	b.n	800f256 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	68da      	ldr	r2, [r3, #12]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	f240 811e 	bls.w	800f24c <f_read+0x2ac>
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f014:	e11a      	b.n	800f24c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	8992      	ldrh	r2, [r2, #12]
 800f01e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f022:	fb01 f202 	mul.w	r2, r1, r2
 800f026:	1a9b      	subs	r3, r3, r2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f040 80d5 	bne.w	800f1d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	697a      	ldr	r2, [r7, #20]
 800f034:	8992      	ldrh	r2, [r2, #12]
 800f036:	fbb3 f3f2 	udiv	r3, r3, r2
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	8952      	ldrh	r2, [r2, #10]
 800f03e:	3a01      	subs	r2, #1
 800f040:	4013      	ands	r3, r2
 800f042:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d12f      	bne.n	800f0aa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d103      	bne.n	800f05a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	633b      	str	r3, [r7, #48]	; 0x30
 800f058:	e013      	b.n	800f082 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d007      	beq.n	800f072 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	4619      	mov	r1, r3
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7fe fe29 	bl	800dcc0 <clmt_clust>
 800f06e:	6338      	str	r0, [r7, #48]	; 0x30
 800f070:	e007      	b.n	800f082 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	69db      	ldr	r3, [r3, #28]
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7fe fb33 	bl	800d6e6 <get_fat>
 800f080:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	2b01      	cmp	r3, #1
 800f086:	d804      	bhi.n	800f092 <f_read+0xf2>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2202      	movs	r2, #2
 800f08c:	755a      	strb	r2, [r3, #21]
 800f08e:	2302      	movs	r3, #2
 800f090:	e0e1      	b.n	800f256 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f098:	d104      	bne.n	800f0a4 <f_read+0x104>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2201      	movs	r2, #1
 800f09e:	755a      	strb	r2, [r3, #21]
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e0d8      	b.n	800f256 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4610      	mov	r0, r2
 800f0b4:	f7fe faf8 	bl	800d6a8 <clust2sect>
 800f0b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d104      	bne.n	800f0ca <f_read+0x12a>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2202      	movs	r2, #2
 800f0c4:	755a      	strb	r2, [r3, #21]
 800f0c6:	2302      	movs	r3, #2
 800f0c8:	e0c5      	b.n	800f256 <f_read+0x2b6>
			sect += csect;
 800f0ca:	69ba      	ldr	r2, [r7, #24]
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	899b      	ldrh	r3, [r3, #12]
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d041      	beq.n	800f16a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0e6:	69fa      	ldr	r2, [r7, #28]
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	4413      	add	r3, r2
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	8952      	ldrh	r2, [r2, #10]
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d905      	bls.n	800f100 <f_read+0x160>
					cc = fs->csize - csect;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	895b      	ldrh	r3, [r3, #10]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	7858      	ldrb	r0, [r3, #1]
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f10a:	f7fd ff21 	bl	800cf50 <disk_read>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <f_read+0x17e>
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2201      	movs	r2, #1
 800f118:	755a      	strb	r2, [r3, #21]
 800f11a:	2301      	movs	r3, #1
 800f11c:	e09b      	b.n	800f256 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	7d1b      	ldrb	r3, [r3, #20]
 800f122:	b25b      	sxtb	r3, r3
 800f124:	2b00      	cmp	r3, #0
 800f126:	da18      	bge.n	800f15a <f_read+0x1ba>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6a1a      	ldr	r2, [r3, #32]
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f132:	429a      	cmp	r2, r3
 800f134:	d911      	bls.n	800f15a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6a1a      	ldr	r2, [r3, #32]
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	8992      	ldrh	r2, [r2, #12]
 800f142:	fb02 f303 	mul.w	r3, r2, r3
 800f146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f148:	18d0      	adds	r0, r2, r3
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	899b      	ldrh	r3, [r3, #12]
 800f154:	461a      	mov	r2, r3
 800f156:	f7fd ffdb 	bl	800d110 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	899b      	ldrh	r3, [r3, #12]
 800f15e:	461a      	mov	r2, r3
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	fb02 f303 	mul.w	r3, r2, r3
 800f166:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f168:	e05c      	b.n	800f224 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	69ba      	ldr	r2, [r7, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d02e      	beq.n	800f1d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	7d1b      	ldrb	r3, [r3, #20]
 800f178:	b25b      	sxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da18      	bge.n	800f1b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	7858      	ldrb	r0, [r3, #1]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6a1a      	ldr	r2, [r3, #32]
 800f18c:	2301      	movs	r3, #1
 800f18e:	f7fd feff 	bl	800cf90 <disk_write>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <f_read+0x202>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2201      	movs	r2, #1
 800f19c:	755a      	strb	r2, [r3, #21]
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e059      	b.n	800f256 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	7d1b      	ldrb	r3, [r3, #20]
 800f1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	7858      	ldrb	r0, [r3, #1]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	f7fd fec7 	bl	800cf50 <disk_read>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d004      	beq.n	800f1d2 <f_read+0x232>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	755a      	strb	r2, [r3, #21]
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e041      	b.n	800f256 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	69ba      	ldr	r2, [r7, #24]
 800f1d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	899b      	ldrh	r3, [r3, #12]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	699b      	ldr	r3, [r3, #24]
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	8992      	ldrh	r2, [r2, #12]
 800f1e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1ea:	fb01 f202 	mul.w	r2, r1, r2
 800f1ee:	1a9b      	subs	r3, r3, r2
 800f1f0:	1ac3      	subs	r3, r0, r3
 800f1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d901      	bls.n	800f200 <f_read+0x260>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	8992      	ldrh	r2, [r2, #12]
 800f20e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f212:	fb00 f202 	mul.w	r2, r0, r2
 800f216:	1a9b      	subs	r3, r3, r2
 800f218:	440b      	add	r3, r1
 800f21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f21c:	4619      	mov	r1, r3
 800f21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f220:	f7fd ff76 	bl	800d110 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f228:	4413      	add	r3, r2
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	699a      	ldr	r2, [r3, #24]
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	441a      	add	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	619a      	str	r2, [r3, #24]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	441a      	add	r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f47f aee1 	bne.w	800f016 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3738      	adds	r7, #56	; 0x38
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b08c      	sub	sp, #48	; 0x30
 800f262:	af00      	add	r7, sp, #0
 800f264:	60f8      	str	r0, [r7, #12]
 800f266:	60b9      	str	r1, [r7, #8]
 800f268:	607a      	str	r2, [r7, #4]
 800f26a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f107 0210 	add.w	r2, r7, #16
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fc46 	bl	800eb10 <validate>
 800f284:	4603      	mov	r3, r0
 800f286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d107      	bne.n	800f2a2 <f_write+0x44>
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	7d5b      	ldrb	r3, [r3, #21]
 800f296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <f_write+0x4a>
 800f2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2a6:	e16a      	b.n	800f57e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	7d1b      	ldrb	r3, [r3, #20]
 800f2ac:	f003 0302 	and.w	r3, r3, #2
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <f_write+0x5a>
 800f2b4:	2307      	movs	r3, #7
 800f2b6:	e162      	b.n	800f57e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	699a      	ldr	r2, [r3, #24]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	441a      	add	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	f080 814c 	bcs.w	800f562 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	699b      	ldr	r3, [r3, #24]
 800f2ce:	43db      	mvns	r3, r3
 800f2d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f2d2:	e146      	b.n	800f562 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	8992      	ldrh	r2, [r2, #12]
 800f2dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2e0:	fb01 f202 	mul.w	r2, r1, r2
 800f2e4:	1a9b      	subs	r3, r3, r2
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f040 80f1 	bne.w	800f4ce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	8992      	ldrh	r2, [r2, #12]
 800f2f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	8952      	ldrh	r2, [r2, #10]
 800f2fc:	3a01      	subs	r2, #1
 800f2fe:	4013      	ands	r3, r2
 800f300:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d143      	bne.n	800f390 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	699b      	ldr	r3, [r3, #24]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10c      	bne.n	800f32a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d11a      	bne.n	800f352 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2100      	movs	r1, #0
 800f320:	4618      	mov	r0, r3
 800f322:	f7fe fc35 	bl	800db90 <create_chain>
 800f326:	62b8      	str	r0, [r7, #40]	; 0x28
 800f328:	e013      	b.n	800f352 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d007      	beq.n	800f342 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	4619      	mov	r1, r3
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f7fe fcc1 	bl	800dcc0 <clmt_clust>
 800f33e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f340:	e007      	b.n	800f352 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	69db      	ldr	r3, [r3, #28]
 800f348:	4619      	mov	r1, r3
 800f34a:	4610      	mov	r0, r2
 800f34c:	f7fe fc20 	bl	800db90 <create_chain>
 800f350:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 8109 	beq.w	800f56c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d104      	bne.n	800f36a <f_write+0x10c>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2202      	movs	r2, #2
 800f364:	755a      	strb	r2, [r3, #21]
 800f366:	2302      	movs	r3, #2
 800f368:	e109      	b.n	800f57e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f370:	d104      	bne.n	800f37c <f_write+0x11e>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2201      	movs	r2, #1
 800f376:	755a      	strb	r2, [r3, #21]
 800f378:	2301      	movs	r3, #1
 800f37a:	e100      	b.n	800f57e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f380:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d102      	bne.n	800f390 <f_write+0x132>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f38e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
 800f394:	b25b      	sxtb	r3, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	da18      	bge.n	800f3cc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	7858      	ldrb	r0, [r3, #1]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6a1a      	ldr	r2, [r3, #32]
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	f7fd fdf1 	bl	800cf90 <disk_write>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <f_write+0x160>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	755a      	strb	r2, [r3, #21]
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e0df      	b.n	800f57e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	7d1b      	ldrb	r3, [r3, #20]
 800f3c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f3cc:	693a      	ldr	r2, [r7, #16]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	69db      	ldr	r3, [r3, #28]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	f7fe f967 	bl	800d6a8 <clust2sect>
 800f3da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d104      	bne.n	800f3ec <f_write+0x18e>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	755a      	strb	r2, [r3, #21]
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	e0c8      	b.n	800f57e <f_write+0x320>
			sect += csect;
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	899b      	ldrh	r3, [r3, #12]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f400:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d043      	beq.n	800f490 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	4413      	add	r3, r2
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	8952      	ldrh	r2, [r2, #10]
 800f412:	4293      	cmp	r3, r2
 800f414:	d905      	bls.n	800f422 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	895b      	ldrh	r3, [r3, #10]
 800f41a:	461a      	mov	r2, r3
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	7858      	ldrb	r0, [r3, #1]
 800f426:	6a3b      	ldr	r3, [r7, #32]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	69f9      	ldr	r1, [r7, #28]
 800f42c:	f7fd fdb0 	bl	800cf90 <disk_write>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d004      	beq.n	800f440 <f_write+0x1e2>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2201      	movs	r2, #1
 800f43a:	755a      	strb	r2, [r3, #21]
 800f43c:	2301      	movs	r3, #1
 800f43e:	e09e      	b.n	800f57e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6a1a      	ldr	r2, [r3, #32]
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	6a3a      	ldr	r2, [r7, #32]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d918      	bls.n	800f480 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6a1a      	ldr	r2, [r3, #32]
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	693a      	ldr	r2, [r7, #16]
 800f45e:	8992      	ldrh	r2, [r2, #12]
 800f460:	fb02 f303 	mul.w	r3, r2, r3
 800f464:	69fa      	ldr	r2, [r7, #28]
 800f466:	18d1      	adds	r1, r2, r3
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	899b      	ldrh	r3, [r3, #12]
 800f46c:	461a      	mov	r2, r3
 800f46e:	f7fd fe4f 	bl	800d110 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	7d1b      	ldrb	r3, [r3, #20]
 800f476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	461a      	mov	r2, r3
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	fb02 f303 	mul.w	r3, r2, r3
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f48e:	e04b      	b.n	800f528 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6a1b      	ldr	r3, [r3, #32]
 800f494:	697a      	ldr	r2, [r7, #20]
 800f496:	429a      	cmp	r2, r3
 800f498:	d016      	beq.n	800f4c8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	699a      	ldr	r2, [r3, #24]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d210      	bcs.n	800f4c8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	7858      	ldrb	r0, [r3, #1]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	f7fd fd4c 	bl	800cf50 <disk_read>
 800f4b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d004      	beq.n	800f4c8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	755a      	strb	r2, [r3, #21]
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e05a      	b.n	800f57e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	899b      	ldrh	r3, [r3, #12]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	8992      	ldrh	r2, [r2, #12]
 800f4dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4e0:	fb01 f202 	mul.w	r2, r1, r2
 800f4e4:	1a9b      	subs	r3, r3, r2
 800f4e6:	1ac3      	subs	r3, r0, r3
 800f4e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d901      	bls.n	800f4f6 <f_write+0x298>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	8992      	ldrh	r2, [r2, #12]
 800f504:	fbb3 f0f2 	udiv	r0, r3, r2
 800f508:	fb00 f202 	mul.w	r2, r0, r2
 800f50c:	1a9b      	subs	r3, r3, r2
 800f50e:	440b      	add	r3, r1
 800f510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f512:	69f9      	ldr	r1, [r7, #28]
 800f514:	4618      	mov	r0, r3
 800f516:	f7fd fdfb 	bl	800d110 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	7d1b      	ldrb	r3, [r3, #20]
 800f51e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f522:	b2da      	uxtb	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f528:	69fa      	ldr	r2, [r7, #28]
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	4413      	add	r3, r2
 800f52e:	61fb      	str	r3, [r7, #28]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	441a      	add	r2, r3
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	619a      	str	r2, [r3, #24]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	68da      	ldr	r2, [r3, #12]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	429a      	cmp	r2, r3
 800f546:	bf38      	it	cc
 800f548:	461a      	movcc	r2, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	60da      	str	r2, [r3, #12]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	441a      	add	r2, r3
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	f47f aeb5 	bne.w	800f2d4 <f_write+0x76>
 800f56a:	e000      	b.n	800f56e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f56c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	7d1b      	ldrb	r3, [r3, #20]
 800f572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f576:	b2da      	uxtb	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3730      	adds	r7, #48	; 0x30
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b086      	sub	sp, #24
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f107 0208 	add.w	r2, r7, #8
 800f594:	4611      	mov	r1, r2
 800f596:	4618      	mov	r0, r3
 800f598:	f7ff faba 	bl	800eb10 <validate>
 800f59c:	4603      	mov	r3, r0
 800f59e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f5a0:	7dfb      	ldrb	r3, [r7, #23]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d168      	bne.n	800f678 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	7d1b      	ldrb	r3, [r3, #20]
 800f5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d062      	beq.n	800f678 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	7d1b      	ldrb	r3, [r3, #20]
 800f5b6:	b25b      	sxtb	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	da15      	bge.n	800f5e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	7858      	ldrb	r0, [r3, #1]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a1a      	ldr	r2, [r3, #32]
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f7fd fce0 	bl	800cf90 <disk_write>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <f_sync+0x54>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e04f      	b.n	800f67a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	7d1b      	ldrb	r3, [r3, #20]
 800f5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e2:	b2da      	uxtb	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f5e8:	f7fd fb06 	bl	800cbf8 <get_fattime>
 800f5ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	f7fd ffb8 	bl	800d56c <move_window>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f600:	7dfb      	ldrb	r3, [r7, #23]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d138      	bne.n	800f678 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f60a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	330b      	adds	r3, #11
 800f610:	781a      	ldrb	r2, [r3, #0]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	330b      	adds	r3, #11
 800f616:	f042 0220 	orr.w	r2, r2, #32
 800f61a:	b2d2      	uxtb	r2, r2
 800f61c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6818      	ldr	r0, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	461a      	mov	r2, r3
 800f628:	68f9      	ldr	r1, [r7, #12]
 800f62a:	f7fe fd46 	bl	800e0ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f103 021c 	add.w	r2, r3, #28
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	4619      	mov	r1, r3
 800f63a:	4610      	mov	r0, r2
 800f63c:	f7fd fd3c 	bl	800d0b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3316      	adds	r3, #22
 800f644:	6939      	ldr	r1, [r7, #16]
 800f646:	4618      	mov	r0, r3
 800f648:	f7fd fd36 	bl	800d0b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	3312      	adds	r3, #18
 800f650:	2100      	movs	r1, #0
 800f652:	4618      	mov	r0, r3
 800f654:	f7fd fd15 	bl	800d082 <st_word>
					fs->wflag = 1;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2201      	movs	r2, #1
 800f65c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	4618      	mov	r0, r3
 800f662:	f7fd ffb1 	bl	800d5c8 <sync_fs>
 800f666:	4603      	mov	r3, r0
 800f668:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	7d1b      	ldrb	r3, [r3, #20]
 800f66e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f672:	b2da      	uxtb	r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f678:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b084      	sub	sp, #16
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7ff ff7b 	bl	800f586 <f_sync>
 800f690:	4603      	mov	r3, r0
 800f692:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d118      	bne.n	800f6cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f107 0208 	add.w	r2, r7, #8
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff fa34 	bl	800eb10 <validate>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6ac:	7bfb      	ldrb	r3, [r7, #15]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10c      	bne.n	800f6cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fd feb4 	bl	800d424 <dec_lock>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d102      	bne.n	800f6cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b090      	sub	sp, #64	; 0x40
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f6e0:	f107 010c 	add.w	r1, r7, #12
 800f6e4:	1d3b      	adds	r3, r7, #4
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe ff91 	bl	800e610 <find_volume>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f6f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d11f      	bne.n	800f73c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	f107 030c 	add.w	r3, r7, #12
 800f702:	4611      	mov	r1, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f7fe fe73 	bl	800e3f0 <follow_path>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f714:	2b00      	cmp	r3, #0
 800f716:	d111      	bne.n	800f73c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f718:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f71c:	b25b      	sxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	da03      	bge.n	800f72a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f722:	2306      	movs	r3, #6
 800f724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f728:	e008      	b.n	800f73c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d005      	beq.n	800f73c <f_stat+0x66>
 800f730:	f107 030c 	add.w	r3, r7, #12
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fd66 	bl	800e208 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f73c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f740:	4618      	mov	r0, r3
 800f742:	3740      	adds	r7, #64	; 0x40
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b096      	sub	sp, #88	; 0x58
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f750:	f107 0108 	add.w	r1, r7, #8
 800f754:	1d3b      	adds	r3, r7, #4
 800f756:	2202      	movs	r2, #2
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fe ff59 	bl	800e610 <find_volume>
 800f75e:	4603      	mov	r3, r0
 800f760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800f768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f040 80f2 	bne.w	800f956 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	f107 030c 	add.w	r3, r7, #12
 800f778:	4611      	mov	r1, r2
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fe fe38 	bl	800e3f0 <follow_path>
 800f780:	4603      	mov	r3, r0
 800f782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d102      	bne.n	800f794 <f_mkdir+0x4c>
 800f78e:	2308      	movs	r3, #8
 800f790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f798:	2b04      	cmp	r3, #4
 800f79a:	f040 80dc 	bne.w	800f956 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f79e:	f107 030c 	add.w	r3, r7, #12
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe f9f3 	bl	800db90 <create_chain>
 800f7aa:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	895b      	ldrh	r3, [r3, #10]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	fb02 f303 	mul.w	r3, r2, r3
 800f7ba:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d102      	bne.n	800f7ce <f_mkdir+0x86>
 800f7c8:	2307      	movs	r3, #7
 800f7ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800f7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d102      	bne.n	800f7da <f_mkdir+0x92>
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d102      	bne.n	800f7e8 <f_mkdir+0xa0>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d106      	bne.n	800f7fe <f_mkdir+0xb6>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fd fe76 	bl	800d4e4 <sync_window>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800f7fe:	f7fd f9fb 	bl	800cbf8 <get_fattime>
 800f802:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d16c      	bne.n	800f8e6 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f810:	4618      	mov	r0, r3
 800f812:	f7fd ff49 	bl	800d6a8 <clust2sect>
 800f816:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	3334      	adds	r3, #52	; 0x34
 800f81c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	899b      	ldrh	r3, [r3, #12]
 800f822:	461a      	mov	r2, r3
 800f824:	2100      	movs	r1, #0
 800f826:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f828:	f7fd fc93 	bl	800d152 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f82c:	220b      	movs	r2, #11
 800f82e:	2120      	movs	r1, #32
 800f830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f832:	f7fd fc8e 	bl	800d152 <mem_set>
					dir[DIR_Name] = '.';
 800f836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f838:	222e      	movs	r2, #46	; 0x2e
 800f83a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f83e:	330b      	adds	r3, #11
 800f840:	2210      	movs	r2, #16
 800f842:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f846:	3316      	adds	r3, #22
 800f848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fc34 	bl	800d0b8 <st_dword>
					st_clust(fs, dir, dcl);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe fc2f 	bl	800e0ba <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	3320      	adds	r3, #32
 800f860:	2220      	movs	r2, #32
 800f862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f864:	4618      	mov	r0, r3
 800f866:	f7fd fc53 	bl	800d110 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	3321      	adds	r3, #33	; 0x21
 800f86e:	222e      	movs	r2, #46	; 0x2e
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b03      	cmp	r3, #3
 800f87c:	d106      	bne.n	800f88c <f_mkdir+0x144>
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f884:	429a      	cmp	r2, r3
 800f886:	d101      	bne.n	800f88c <f_mkdir+0x144>
 800f888:	2300      	movs	r3, #0
 800f88a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800f88c:	68b8      	ldr	r0, [r7, #8]
 800f88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f890:	3320      	adds	r3, #32
 800f892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f894:	4619      	mov	r1, r3
 800f896:	f7fe fc10 	bl	800e0ba <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	895b      	ldrh	r3, [r3, #10]
 800f89e:	653b      	str	r3, [r7, #80]	; 0x50
 800f8a0:	e01c      	b.n	800f8dc <f_mkdir+0x194>
					fs->winsect = dsc++;
 800f8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd fe15 	bl	800d4e4 <sync_window>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800f8c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10d      	bne.n	800f8e4 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f8d2:	f7fd fc3e 	bl	800d152 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	653b      	str	r3, [r7, #80]	; 0x50
 800f8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1df      	bne.n	800f8a2 <f_mkdir+0x15a>
 800f8e2:	e000      	b.n	800f8e6 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800f8e4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f8e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d107      	bne.n	800f8fe <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f8ee:	f107 030c 	add.w	r3, r7, #12
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe fc56 	bl	800e1a4 <dir_register>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800f8fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f902:	2b00      	cmp	r3, #0
 800f904:	d120      	bne.n	800f948 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90c:	3316      	adds	r3, #22
 800f90e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f910:	4618      	mov	r0, r3
 800f912:	f7fd fbd1 	bl	800d0b8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f91a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fe fbcc 	bl	800e0ba <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f924:	330b      	adds	r3, #11
 800f926:	2210      	movs	r2, #16
 800f928:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2201      	movs	r2, #1
 800f92e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10e      	bne.n	800f956 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fd fe44 	bl	800d5c8 <sync_fs>
 800f940:	4603      	mov	r3, r0
 800f942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f946:	e006      	b.n	800f956 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f948:	f107 030c 	add.w	r3, r7, #12
 800f94c:	2200      	movs	r2, #0
 800f94e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f950:	4618      	mov	r0, r3
 800f952:	f7fe f8b8 	bl	800dac6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3758      	adds	r7, #88	; 0x58
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f964:	b480      	push	{r7}
 800f966:	b087      	sub	sp, #28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	4613      	mov	r3, r2
 800f970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f972:	2301      	movs	r3, #1
 800f974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f97a:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f97c:	7a5b      	ldrb	r3, [r3, #9]
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d131      	bne.n	800f9e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f984:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f986:	7a5b      	ldrb	r3, [r3, #9]
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b1a      	ldr	r3, [pc, #104]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f98e:	2100      	movs	r1, #0
 800f990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f992:	4b19      	ldr	r3, [pc, #100]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f994:	7a5b      	ldrb	r3, [r3, #9]
 800f996:	b2db      	uxtb	r3, r3
 800f998:	4a17      	ldr	r2, [pc, #92]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f9a2:	4b15      	ldr	r3, [pc, #84]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9a4:	7a5b      	ldrb	r3, [r3, #9]
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9ac:	4413      	add	r3, r2
 800f9ae:	79fa      	ldrb	r2, [r7, #7]
 800f9b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f9b2:	4b11      	ldr	r3, [pc, #68]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9b4:	7a5b      	ldrb	r3, [r3, #9]
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	1c5a      	adds	r2, r3, #1
 800f9ba:	b2d1      	uxtb	r1, r2
 800f9bc:	4a0e      	ldr	r2, [pc, #56]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9be:	7251      	strb	r1, [r2, #9]
 800f9c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f9c2:	7dbb      	ldrb	r3, [r7, #22]
 800f9c4:	3330      	adds	r3, #48	; 0x30
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	223a      	movs	r2, #58	; 0x3a
 800f9d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	3302      	adds	r3, #2
 800f9d8:	222f      	movs	r2, #47	; 0x2f
 800f9da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	3303      	adds	r3, #3
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	20005d60 	.word	0x20005d60

0800f9fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fa06:	2200      	movs	r2, #0
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff ffaa 	bl	800f964 <FATFS_LinkDriverEx>
 800fa10:	4603      	mov	r3, r0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <__assert_func>:
 800fa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa1e:	4614      	mov	r4, r2
 800fa20:	461a      	mov	r2, r3
 800fa22:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <__assert_func+0x2c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4605      	mov	r5, r0
 800fa28:	68d8      	ldr	r0, [r3, #12]
 800fa2a:	b14c      	cbz	r4, 800fa40 <__assert_func+0x24>
 800fa2c:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <__assert_func+0x30>)
 800fa2e:	9100      	str	r1, [sp, #0]
 800fa30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa34:	4906      	ldr	r1, [pc, #24]	; (800fa50 <__assert_func+0x34>)
 800fa36:	462b      	mov	r3, r5
 800fa38:	f000 f814 	bl	800fa64 <fiprintf>
 800fa3c:	f001 f86a 	bl	8010b14 <abort>
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <__assert_func+0x38>)
 800fa42:	461c      	mov	r4, r3
 800fa44:	e7f3      	b.n	800fa2e <__assert_func+0x12>
 800fa46:	bf00      	nop
 800fa48:	200000f8 	.word	0x200000f8
 800fa4c:	0802e698 	.word	0x0802e698
 800fa50:	0802e6a5 	.word	0x0802e6a5
 800fa54:	0802e6d3 	.word	0x0802e6d3

0800fa58 <__errno>:
 800fa58:	4b01      	ldr	r3, [pc, #4]	; (800fa60 <__errno+0x8>)
 800fa5a:	6818      	ldr	r0, [r3, #0]
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	200000f8 	.word	0x200000f8

0800fa64 <fiprintf>:
 800fa64:	b40e      	push	{r1, r2, r3}
 800fa66:	b503      	push	{r0, r1, lr}
 800fa68:	4601      	mov	r1, r0
 800fa6a:	ab03      	add	r3, sp, #12
 800fa6c:	4805      	ldr	r0, [pc, #20]	; (800fa84 <fiprintf+0x20>)
 800fa6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa72:	6800      	ldr	r0, [r0, #0]
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	f000 f95b 	bl	800fd30 <_vfiprintf_r>
 800fa7a:	b002      	add	sp, #8
 800fa7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa80:	b003      	add	sp, #12
 800fa82:	4770      	bx	lr
 800fa84:	200000f8 	.word	0x200000f8

0800fa88 <__libc_init_array>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	4d0d      	ldr	r5, [pc, #52]	; (800fac0 <__libc_init_array+0x38>)
 800fa8c:	4c0d      	ldr	r4, [pc, #52]	; (800fac4 <__libc_init_array+0x3c>)
 800fa8e:	1b64      	subs	r4, r4, r5
 800fa90:	10a4      	asrs	r4, r4, #2
 800fa92:	2600      	movs	r6, #0
 800fa94:	42a6      	cmp	r6, r4
 800fa96:	d109      	bne.n	800faac <__libc_init_array+0x24>
 800fa98:	4d0b      	ldr	r5, [pc, #44]	; (800fac8 <__libc_init_array+0x40>)
 800fa9a:	4c0c      	ldr	r4, [pc, #48]	; (800facc <__libc_init_array+0x44>)
 800fa9c:	f003 fe36 	bl	801370c <_init>
 800faa0:	1b64      	subs	r4, r4, r5
 800faa2:	10a4      	asrs	r4, r4, #2
 800faa4:	2600      	movs	r6, #0
 800faa6:	42a6      	cmp	r6, r4
 800faa8:	d105      	bne.n	800fab6 <__libc_init_array+0x2e>
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab0:	4798      	blx	r3
 800fab2:	3601      	adds	r6, #1
 800fab4:	e7ee      	b.n	800fa94 <__libc_init_array+0xc>
 800fab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faba:	4798      	blx	r3
 800fabc:	3601      	adds	r6, #1
 800fabe:	e7f2      	b.n	800faa6 <__libc_init_array+0x1e>
 800fac0:	0802eab0 	.word	0x0802eab0
 800fac4:	0802eab0 	.word	0x0802eab0
 800fac8:	0802eab0 	.word	0x0802eab0
 800facc:	0802eab4 	.word	0x0802eab4

0800fad0 <malloc>:
 800fad0:	4b02      	ldr	r3, [pc, #8]	; (800fadc <malloc+0xc>)
 800fad2:	4601      	mov	r1, r0
 800fad4:	6818      	ldr	r0, [r3, #0]
 800fad6:	f000 b88d 	b.w	800fbf4 <_malloc_r>
 800fada:	bf00      	nop
 800fadc:	200000f8 	.word	0x200000f8

0800fae0 <free>:
 800fae0:	4b02      	ldr	r3, [pc, #8]	; (800faec <free+0xc>)
 800fae2:	4601      	mov	r1, r0
 800fae4:	6818      	ldr	r0, [r3, #0]
 800fae6:	f000 b819 	b.w	800fb1c <_free_r>
 800faea:	bf00      	nop
 800faec:	200000f8 	.word	0x200000f8

0800faf0 <memcpy>:
 800faf0:	440a      	add	r2, r1
 800faf2:	4291      	cmp	r1, r2
 800faf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800faf8:	d100      	bne.n	800fafc <memcpy+0xc>
 800fafa:	4770      	bx	lr
 800fafc:	b510      	push	{r4, lr}
 800fafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb06:	4291      	cmp	r1, r2
 800fb08:	d1f9      	bne.n	800fafe <memcpy+0xe>
 800fb0a:	bd10      	pop	{r4, pc}

0800fb0c <memset>:
 800fb0c:	4402      	add	r2, r0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d100      	bne.n	800fb16 <memset+0xa>
 800fb14:	4770      	bx	lr
 800fb16:	f803 1b01 	strb.w	r1, [r3], #1
 800fb1a:	e7f9      	b.n	800fb10 <memset+0x4>

0800fb1c <_free_r>:
 800fb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb1e:	2900      	cmp	r1, #0
 800fb20:	d044      	beq.n	800fbac <_free_r+0x90>
 800fb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb26:	9001      	str	r0, [sp, #4]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb2e:	bfb8      	it	lt
 800fb30:	18e4      	addlt	r4, r4, r3
 800fb32:	f002 f8e7 	bl	8011d04 <__malloc_lock>
 800fb36:	4a1e      	ldr	r2, [pc, #120]	; (800fbb0 <_free_r+0x94>)
 800fb38:	9801      	ldr	r0, [sp, #4]
 800fb3a:	6813      	ldr	r3, [r2, #0]
 800fb3c:	b933      	cbnz	r3, 800fb4c <_free_r+0x30>
 800fb3e:	6063      	str	r3, [r4, #4]
 800fb40:	6014      	str	r4, [r2, #0]
 800fb42:	b003      	add	sp, #12
 800fb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb48:	f002 b8e2 	b.w	8011d10 <__malloc_unlock>
 800fb4c:	42a3      	cmp	r3, r4
 800fb4e:	d908      	bls.n	800fb62 <_free_r+0x46>
 800fb50:	6825      	ldr	r5, [r4, #0]
 800fb52:	1961      	adds	r1, r4, r5
 800fb54:	428b      	cmp	r3, r1
 800fb56:	bf01      	itttt	eq
 800fb58:	6819      	ldreq	r1, [r3, #0]
 800fb5a:	685b      	ldreq	r3, [r3, #4]
 800fb5c:	1949      	addeq	r1, r1, r5
 800fb5e:	6021      	streq	r1, [r4, #0]
 800fb60:	e7ed      	b.n	800fb3e <_free_r+0x22>
 800fb62:	461a      	mov	r2, r3
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	b10b      	cbz	r3, 800fb6c <_free_r+0x50>
 800fb68:	42a3      	cmp	r3, r4
 800fb6a:	d9fa      	bls.n	800fb62 <_free_r+0x46>
 800fb6c:	6811      	ldr	r1, [r2, #0]
 800fb6e:	1855      	adds	r5, r2, r1
 800fb70:	42a5      	cmp	r5, r4
 800fb72:	d10b      	bne.n	800fb8c <_free_r+0x70>
 800fb74:	6824      	ldr	r4, [r4, #0]
 800fb76:	4421      	add	r1, r4
 800fb78:	1854      	adds	r4, r2, r1
 800fb7a:	42a3      	cmp	r3, r4
 800fb7c:	6011      	str	r1, [r2, #0]
 800fb7e:	d1e0      	bne.n	800fb42 <_free_r+0x26>
 800fb80:	681c      	ldr	r4, [r3, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	6053      	str	r3, [r2, #4]
 800fb86:	4421      	add	r1, r4
 800fb88:	6011      	str	r1, [r2, #0]
 800fb8a:	e7da      	b.n	800fb42 <_free_r+0x26>
 800fb8c:	d902      	bls.n	800fb94 <_free_r+0x78>
 800fb8e:	230c      	movs	r3, #12
 800fb90:	6003      	str	r3, [r0, #0]
 800fb92:	e7d6      	b.n	800fb42 <_free_r+0x26>
 800fb94:	6825      	ldr	r5, [r4, #0]
 800fb96:	1961      	adds	r1, r4, r5
 800fb98:	428b      	cmp	r3, r1
 800fb9a:	bf04      	itt	eq
 800fb9c:	6819      	ldreq	r1, [r3, #0]
 800fb9e:	685b      	ldreq	r3, [r3, #4]
 800fba0:	6063      	str	r3, [r4, #4]
 800fba2:	bf04      	itt	eq
 800fba4:	1949      	addeq	r1, r1, r5
 800fba6:	6021      	streq	r1, [r4, #0]
 800fba8:	6054      	str	r4, [r2, #4]
 800fbaa:	e7ca      	b.n	800fb42 <_free_r+0x26>
 800fbac:	b003      	add	sp, #12
 800fbae:	bd30      	pop	{r4, r5, pc}
 800fbb0:	20005d6c 	.word	0x20005d6c

0800fbb4 <sbrk_aligned>:
 800fbb4:	b570      	push	{r4, r5, r6, lr}
 800fbb6:	4e0e      	ldr	r6, [pc, #56]	; (800fbf0 <sbrk_aligned+0x3c>)
 800fbb8:	460c      	mov	r4, r1
 800fbba:	6831      	ldr	r1, [r6, #0]
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	b911      	cbnz	r1, 800fbc6 <sbrk_aligned+0x12>
 800fbc0:	f000 fe50 	bl	8010864 <_sbrk_r>
 800fbc4:	6030      	str	r0, [r6, #0]
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f000 fe4b 	bl	8010864 <_sbrk_r>
 800fbce:	1c43      	adds	r3, r0, #1
 800fbd0:	d00a      	beq.n	800fbe8 <sbrk_aligned+0x34>
 800fbd2:	1cc4      	adds	r4, r0, #3
 800fbd4:	f024 0403 	bic.w	r4, r4, #3
 800fbd8:	42a0      	cmp	r0, r4
 800fbda:	d007      	beq.n	800fbec <sbrk_aligned+0x38>
 800fbdc:	1a21      	subs	r1, r4, r0
 800fbde:	4628      	mov	r0, r5
 800fbe0:	f000 fe40 	bl	8010864 <_sbrk_r>
 800fbe4:	3001      	adds	r0, #1
 800fbe6:	d101      	bne.n	800fbec <sbrk_aligned+0x38>
 800fbe8:	f04f 34ff 	mov.w	r4, #4294967295
 800fbec:	4620      	mov	r0, r4
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	20005d70 	.word	0x20005d70

0800fbf4 <_malloc_r>:
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	1ccd      	adds	r5, r1, #3
 800fbfa:	f025 0503 	bic.w	r5, r5, #3
 800fbfe:	3508      	adds	r5, #8
 800fc00:	2d0c      	cmp	r5, #12
 800fc02:	bf38      	it	cc
 800fc04:	250c      	movcc	r5, #12
 800fc06:	2d00      	cmp	r5, #0
 800fc08:	4607      	mov	r7, r0
 800fc0a:	db01      	blt.n	800fc10 <_malloc_r+0x1c>
 800fc0c:	42a9      	cmp	r1, r5
 800fc0e:	d905      	bls.n	800fc1c <_malloc_r+0x28>
 800fc10:	230c      	movs	r3, #12
 800fc12:	603b      	str	r3, [r7, #0]
 800fc14:	2600      	movs	r6, #0
 800fc16:	4630      	mov	r0, r6
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	4e2e      	ldr	r6, [pc, #184]	; (800fcd8 <_malloc_r+0xe4>)
 800fc1e:	f002 f871 	bl	8011d04 <__malloc_lock>
 800fc22:	6833      	ldr	r3, [r6, #0]
 800fc24:	461c      	mov	r4, r3
 800fc26:	bb34      	cbnz	r4, 800fc76 <_malloc_r+0x82>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	f7ff ffc2 	bl	800fbb4 <sbrk_aligned>
 800fc30:	1c43      	adds	r3, r0, #1
 800fc32:	4604      	mov	r4, r0
 800fc34:	d14d      	bne.n	800fcd2 <_malloc_r+0xde>
 800fc36:	6834      	ldr	r4, [r6, #0]
 800fc38:	4626      	mov	r6, r4
 800fc3a:	2e00      	cmp	r6, #0
 800fc3c:	d140      	bne.n	800fcc0 <_malloc_r+0xcc>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	4631      	mov	r1, r6
 800fc42:	4638      	mov	r0, r7
 800fc44:	eb04 0803 	add.w	r8, r4, r3
 800fc48:	f000 fe0c 	bl	8010864 <_sbrk_r>
 800fc4c:	4580      	cmp	r8, r0
 800fc4e:	d13a      	bne.n	800fcc6 <_malloc_r+0xd2>
 800fc50:	6821      	ldr	r1, [r4, #0]
 800fc52:	3503      	adds	r5, #3
 800fc54:	1a6d      	subs	r5, r5, r1
 800fc56:	f025 0503 	bic.w	r5, r5, #3
 800fc5a:	3508      	adds	r5, #8
 800fc5c:	2d0c      	cmp	r5, #12
 800fc5e:	bf38      	it	cc
 800fc60:	250c      	movcc	r5, #12
 800fc62:	4629      	mov	r1, r5
 800fc64:	4638      	mov	r0, r7
 800fc66:	f7ff ffa5 	bl	800fbb4 <sbrk_aligned>
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	d02b      	beq.n	800fcc6 <_malloc_r+0xd2>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	442b      	add	r3, r5
 800fc72:	6023      	str	r3, [r4, #0]
 800fc74:	e00e      	b.n	800fc94 <_malloc_r+0xa0>
 800fc76:	6822      	ldr	r2, [r4, #0]
 800fc78:	1b52      	subs	r2, r2, r5
 800fc7a:	d41e      	bmi.n	800fcba <_malloc_r+0xc6>
 800fc7c:	2a0b      	cmp	r2, #11
 800fc7e:	d916      	bls.n	800fcae <_malloc_r+0xba>
 800fc80:	1961      	adds	r1, r4, r5
 800fc82:	42a3      	cmp	r3, r4
 800fc84:	6025      	str	r5, [r4, #0]
 800fc86:	bf18      	it	ne
 800fc88:	6059      	strne	r1, [r3, #4]
 800fc8a:	6863      	ldr	r3, [r4, #4]
 800fc8c:	bf08      	it	eq
 800fc8e:	6031      	streq	r1, [r6, #0]
 800fc90:	5162      	str	r2, [r4, r5]
 800fc92:	604b      	str	r3, [r1, #4]
 800fc94:	4638      	mov	r0, r7
 800fc96:	f104 060b 	add.w	r6, r4, #11
 800fc9a:	f002 f839 	bl	8011d10 <__malloc_unlock>
 800fc9e:	f026 0607 	bic.w	r6, r6, #7
 800fca2:	1d23      	adds	r3, r4, #4
 800fca4:	1af2      	subs	r2, r6, r3
 800fca6:	d0b6      	beq.n	800fc16 <_malloc_r+0x22>
 800fca8:	1b9b      	subs	r3, r3, r6
 800fcaa:	50a3      	str	r3, [r4, r2]
 800fcac:	e7b3      	b.n	800fc16 <_malloc_r+0x22>
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	bf0c      	ite	eq
 800fcb4:	6032      	streq	r2, [r6, #0]
 800fcb6:	605a      	strne	r2, [r3, #4]
 800fcb8:	e7ec      	b.n	800fc94 <_malloc_r+0xa0>
 800fcba:	4623      	mov	r3, r4
 800fcbc:	6864      	ldr	r4, [r4, #4]
 800fcbe:	e7b2      	b.n	800fc26 <_malloc_r+0x32>
 800fcc0:	4634      	mov	r4, r6
 800fcc2:	6876      	ldr	r6, [r6, #4]
 800fcc4:	e7b9      	b.n	800fc3a <_malloc_r+0x46>
 800fcc6:	230c      	movs	r3, #12
 800fcc8:	603b      	str	r3, [r7, #0]
 800fcca:	4638      	mov	r0, r7
 800fccc:	f002 f820 	bl	8011d10 <__malloc_unlock>
 800fcd0:	e7a1      	b.n	800fc16 <_malloc_r+0x22>
 800fcd2:	6025      	str	r5, [r4, #0]
 800fcd4:	e7de      	b.n	800fc94 <_malloc_r+0xa0>
 800fcd6:	bf00      	nop
 800fcd8:	20005d6c 	.word	0x20005d6c

0800fcdc <__sfputc_r>:
 800fcdc:	6893      	ldr	r3, [r2, #8]
 800fcde:	3b01      	subs	r3, #1
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	b410      	push	{r4}
 800fce4:	6093      	str	r3, [r2, #8]
 800fce6:	da08      	bge.n	800fcfa <__sfputc_r+0x1e>
 800fce8:	6994      	ldr	r4, [r2, #24]
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	db01      	blt.n	800fcf2 <__sfputc_r+0x16>
 800fcee:	290a      	cmp	r1, #10
 800fcf0:	d103      	bne.n	800fcfa <__sfputc_r+0x1e>
 800fcf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcf6:	f000 be3b 	b.w	8010970 <__swbuf_r>
 800fcfa:	6813      	ldr	r3, [r2, #0]
 800fcfc:	1c58      	adds	r0, r3, #1
 800fcfe:	6010      	str	r0, [r2, #0]
 800fd00:	7019      	strb	r1, [r3, #0]
 800fd02:	4608      	mov	r0, r1
 800fd04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <__sfputs_r>:
 800fd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	460f      	mov	r7, r1
 800fd10:	4614      	mov	r4, r2
 800fd12:	18d5      	adds	r5, r2, r3
 800fd14:	42ac      	cmp	r4, r5
 800fd16:	d101      	bne.n	800fd1c <__sfputs_r+0x12>
 800fd18:	2000      	movs	r0, #0
 800fd1a:	e007      	b.n	800fd2c <__sfputs_r+0x22>
 800fd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd20:	463a      	mov	r2, r7
 800fd22:	4630      	mov	r0, r6
 800fd24:	f7ff ffda 	bl	800fcdc <__sfputc_r>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d1f3      	bne.n	800fd14 <__sfputs_r+0xa>
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd30 <_vfiprintf_r>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	460d      	mov	r5, r1
 800fd36:	b09d      	sub	sp, #116	; 0x74
 800fd38:	4614      	mov	r4, r2
 800fd3a:	4698      	mov	r8, r3
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	b118      	cbz	r0, 800fd48 <_vfiprintf_r+0x18>
 800fd40:	6983      	ldr	r3, [r0, #24]
 800fd42:	b90b      	cbnz	r3, 800fd48 <_vfiprintf_r+0x18>
 800fd44:	f001 fe94 	bl	8011a70 <__sinit>
 800fd48:	4b89      	ldr	r3, [pc, #548]	; (800ff70 <_vfiprintf_r+0x240>)
 800fd4a:	429d      	cmp	r5, r3
 800fd4c:	d11b      	bne.n	800fd86 <_vfiprintf_r+0x56>
 800fd4e:	6875      	ldr	r5, [r6, #4]
 800fd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd52:	07d9      	lsls	r1, r3, #31
 800fd54:	d405      	bmi.n	800fd62 <_vfiprintf_r+0x32>
 800fd56:	89ab      	ldrh	r3, [r5, #12]
 800fd58:	059a      	lsls	r2, r3, #22
 800fd5a:	d402      	bmi.n	800fd62 <_vfiprintf_r+0x32>
 800fd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd5e:	f001 ff2a 	bl	8011bb6 <__retarget_lock_acquire_recursive>
 800fd62:	89ab      	ldrh	r3, [r5, #12]
 800fd64:	071b      	lsls	r3, r3, #28
 800fd66:	d501      	bpl.n	800fd6c <_vfiprintf_r+0x3c>
 800fd68:	692b      	ldr	r3, [r5, #16]
 800fd6a:	b9eb      	cbnz	r3, 800fda8 <_vfiprintf_r+0x78>
 800fd6c:	4629      	mov	r1, r5
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f000 fe62 	bl	8010a38 <__swsetup_r>
 800fd74:	b1c0      	cbz	r0, 800fda8 <_vfiprintf_r+0x78>
 800fd76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd78:	07dc      	lsls	r4, r3, #31
 800fd7a:	d50e      	bpl.n	800fd9a <_vfiprintf_r+0x6a>
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	b01d      	add	sp, #116	; 0x74
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	4b7b      	ldr	r3, [pc, #492]	; (800ff74 <_vfiprintf_r+0x244>)
 800fd88:	429d      	cmp	r5, r3
 800fd8a:	d101      	bne.n	800fd90 <_vfiprintf_r+0x60>
 800fd8c:	68b5      	ldr	r5, [r6, #8]
 800fd8e:	e7df      	b.n	800fd50 <_vfiprintf_r+0x20>
 800fd90:	4b79      	ldr	r3, [pc, #484]	; (800ff78 <_vfiprintf_r+0x248>)
 800fd92:	429d      	cmp	r5, r3
 800fd94:	bf08      	it	eq
 800fd96:	68f5      	ldreq	r5, [r6, #12]
 800fd98:	e7da      	b.n	800fd50 <_vfiprintf_r+0x20>
 800fd9a:	89ab      	ldrh	r3, [r5, #12]
 800fd9c:	0598      	lsls	r0, r3, #22
 800fd9e:	d4ed      	bmi.n	800fd7c <_vfiprintf_r+0x4c>
 800fda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fda2:	f001 ff09 	bl	8011bb8 <__retarget_lock_release_recursive>
 800fda6:	e7e9      	b.n	800fd7c <_vfiprintf_r+0x4c>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800fdac:	2320      	movs	r3, #32
 800fdae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdb6:	2330      	movs	r3, #48	; 0x30
 800fdb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff7c <_vfiprintf_r+0x24c>
 800fdbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdc0:	f04f 0901 	mov.w	r9, #1
 800fdc4:	4623      	mov	r3, r4
 800fdc6:	469a      	mov	sl, r3
 800fdc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdcc:	b10a      	cbz	r2, 800fdd2 <_vfiprintf_r+0xa2>
 800fdce:	2a25      	cmp	r2, #37	; 0x25
 800fdd0:	d1f9      	bne.n	800fdc6 <_vfiprintf_r+0x96>
 800fdd2:	ebba 0b04 	subs.w	fp, sl, r4
 800fdd6:	d00b      	beq.n	800fdf0 <_vfiprintf_r+0xc0>
 800fdd8:	465b      	mov	r3, fp
 800fdda:	4622      	mov	r2, r4
 800fddc:	4629      	mov	r1, r5
 800fdde:	4630      	mov	r0, r6
 800fde0:	f7ff ff93 	bl	800fd0a <__sfputs_r>
 800fde4:	3001      	adds	r0, #1
 800fde6:	f000 80aa 	beq.w	800ff3e <_vfiprintf_r+0x20e>
 800fdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdec:	445a      	add	r2, fp
 800fdee:	9209      	str	r2, [sp, #36]	; 0x24
 800fdf0:	f89a 3000 	ldrb.w	r3, [sl]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f000 80a2 	beq.w	800ff3e <_vfiprintf_r+0x20e>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fe00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe04:	f10a 0a01 	add.w	sl, sl, #1
 800fe08:	9304      	str	r3, [sp, #16]
 800fe0a:	9307      	str	r3, [sp, #28]
 800fe0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe10:	931a      	str	r3, [sp, #104]	; 0x68
 800fe12:	4654      	mov	r4, sl
 800fe14:	2205      	movs	r2, #5
 800fe16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe1a:	4858      	ldr	r0, [pc, #352]	; (800ff7c <_vfiprintf_r+0x24c>)
 800fe1c:	f7f0 f9f0 	bl	8000200 <memchr>
 800fe20:	9a04      	ldr	r2, [sp, #16]
 800fe22:	b9d8      	cbnz	r0, 800fe5c <_vfiprintf_r+0x12c>
 800fe24:	06d1      	lsls	r1, r2, #27
 800fe26:	bf44      	itt	mi
 800fe28:	2320      	movmi	r3, #32
 800fe2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe2e:	0713      	lsls	r3, r2, #28
 800fe30:	bf44      	itt	mi
 800fe32:	232b      	movmi	r3, #43	; 0x2b
 800fe34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe38:	f89a 3000 	ldrb.w	r3, [sl]
 800fe3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe3e:	d015      	beq.n	800fe6c <_vfiprintf_r+0x13c>
 800fe40:	9a07      	ldr	r2, [sp, #28]
 800fe42:	4654      	mov	r4, sl
 800fe44:	2000      	movs	r0, #0
 800fe46:	f04f 0c0a 	mov.w	ip, #10
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe50:	3b30      	subs	r3, #48	; 0x30
 800fe52:	2b09      	cmp	r3, #9
 800fe54:	d94e      	bls.n	800fef4 <_vfiprintf_r+0x1c4>
 800fe56:	b1b0      	cbz	r0, 800fe86 <_vfiprintf_r+0x156>
 800fe58:	9207      	str	r2, [sp, #28]
 800fe5a:	e014      	b.n	800fe86 <_vfiprintf_r+0x156>
 800fe5c:	eba0 0308 	sub.w	r3, r0, r8
 800fe60:	fa09 f303 	lsl.w	r3, r9, r3
 800fe64:	4313      	orrs	r3, r2
 800fe66:	9304      	str	r3, [sp, #16]
 800fe68:	46a2      	mov	sl, r4
 800fe6a:	e7d2      	b.n	800fe12 <_vfiprintf_r+0xe2>
 800fe6c:	9b03      	ldr	r3, [sp, #12]
 800fe6e:	1d19      	adds	r1, r3, #4
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	9103      	str	r1, [sp, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	bfbb      	ittet	lt
 800fe78:	425b      	neglt	r3, r3
 800fe7a:	f042 0202 	orrlt.w	r2, r2, #2
 800fe7e:	9307      	strge	r3, [sp, #28]
 800fe80:	9307      	strlt	r3, [sp, #28]
 800fe82:	bfb8      	it	lt
 800fe84:	9204      	strlt	r2, [sp, #16]
 800fe86:	7823      	ldrb	r3, [r4, #0]
 800fe88:	2b2e      	cmp	r3, #46	; 0x2e
 800fe8a:	d10c      	bne.n	800fea6 <_vfiprintf_r+0x176>
 800fe8c:	7863      	ldrb	r3, [r4, #1]
 800fe8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fe90:	d135      	bne.n	800fefe <_vfiprintf_r+0x1ce>
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	1d1a      	adds	r2, r3, #4
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	9203      	str	r2, [sp, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	bfb8      	it	lt
 800fe9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fea2:	3402      	adds	r4, #2
 800fea4:	9305      	str	r3, [sp, #20]
 800fea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ff8c <_vfiprintf_r+0x25c>
 800feaa:	7821      	ldrb	r1, [r4, #0]
 800feac:	2203      	movs	r2, #3
 800feae:	4650      	mov	r0, sl
 800feb0:	f7f0 f9a6 	bl	8000200 <memchr>
 800feb4:	b140      	cbz	r0, 800fec8 <_vfiprintf_r+0x198>
 800feb6:	2340      	movs	r3, #64	; 0x40
 800feb8:	eba0 000a 	sub.w	r0, r0, sl
 800febc:	fa03 f000 	lsl.w	r0, r3, r0
 800fec0:	9b04      	ldr	r3, [sp, #16]
 800fec2:	4303      	orrs	r3, r0
 800fec4:	3401      	adds	r4, #1
 800fec6:	9304      	str	r3, [sp, #16]
 800fec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fecc:	482c      	ldr	r0, [pc, #176]	; (800ff80 <_vfiprintf_r+0x250>)
 800fece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fed2:	2206      	movs	r2, #6
 800fed4:	f7f0 f994 	bl	8000200 <memchr>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d03f      	beq.n	800ff5c <_vfiprintf_r+0x22c>
 800fedc:	4b29      	ldr	r3, [pc, #164]	; (800ff84 <_vfiprintf_r+0x254>)
 800fede:	bb1b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x1f8>
 800fee0:	9b03      	ldr	r3, [sp, #12]
 800fee2:	3307      	adds	r3, #7
 800fee4:	f023 0307 	bic.w	r3, r3, #7
 800fee8:	3308      	adds	r3, #8
 800feea:	9303      	str	r3, [sp, #12]
 800feec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feee:	443b      	add	r3, r7
 800fef0:	9309      	str	r3, [sp, #36]	; 0x24
 800fef2:	e767      	b.n	800fdc4 <_vfiprintf_r+0x94>
 800fef4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fef8:	460c      	mov	r4, r1
 800fefa:	2001      	movs	r0, #1
 800fefc:	e7a5      	b.n	800fe4a <_vfiprintf_r+0x11a>
 800fefe:	2300      	movs	r3, #0
 800ff00:	3401      	adds	r4, #1
 800ff02:	9305      	str	r3, [sp, #20]
 800ff04:	4619      	mov	r1, r3
 800ff06:	f04f 0c0a 	mov.w	ip, #10
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff10:	3a30      	subs	r2, #48	; 0x30
 800ff12:	2a09      	cmp	r2, #9
 800ff14:	d903      	bls.n	800ff1e <_vfiprintf_r+0x1ee>
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0c5      	beq.n	800fea6 <_vfiprintf_r+0x176>
 800ff1a:	9105      	str	r1, [sp, #20]
 800ff1c:	e7c3      	b.n	800fea6 <_vfiprintf_r+0x176>
 800ff1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff22:	4604      	mov	r4, r0
 800ff24:	2301      	movs	r3, #1
 800ff26:	e7f0      	b.n	800ff0a <_vfiprintf_r+0x1da>
 800ff28:	ab03      	add	r3, sp, #12
 800ff2a:	9300      	str	r3, [sp, #0]
 800ff2c:	462a      	mov	r2, r5
 800ff2e:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <_vfiprintf_r+0x258>)
 800ff30:	a904      	add	r1, sp, #16
 800ff32:	4630      	mov	r0, r6
 800ff34:	f000 f8cc 	bl	80100d0 <_printf_float>
 800ff38:	4607      	mov	r7, r0
 800ff3a:	1c78      	adds	r0, r7, #1
 800ff3c:	d1d6      	bne.n	800feec <_vfiprintf_r+0x1bc>
 800ff3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff40:	07d9      	lsls	r1, r3, #31
 800ff42:	d405      	bmi.n	800ff50 <_vfiprintf_r+0x220>
 800ff44:	89ab      	ldrh	r3, [r5, #12]
 800ff46:	059a      	lsls	r2, r3, #22
 800ff48:	d402      	bmi.n	800ff50 <_vfiprintf_r+0x220>
 800ff4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff4c:	f001 fe34 	bl	8011bb8 <__retarget_lock_release_recursive>
 800ff50:	89ab      	ldrh	r3, [r5, #12]
 800ff52:	065b      	lsls	r3, r3, #25
 800ff54:	f53f af12 	bmi.w	800fd7c <_vfiprintf_r+0x4c>
 800ff58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff5a:	e711      	b.n	800fd80 <_vfiprintf_r+0x50>
 800ff5c:	ab03      	add	r3, sp, #12
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	462a      	mov	r2, r5
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <_vfiprintf_r+0x258>)
 800ff64:	a904      	add	r1, sp, #16
 800ff66:	4630      	mov	r0, r6
 800ff68:	f000 fb56 	bl	8010618 <_printf_i>
 800ff6c:	e7e4      	b.n	800ff38 <_vfiprintf_r+0x208>
 800ff6e:	bf00      	nop
 800ff70:	0802e8d0 	.word	0x0802e8d0
 800ff74:	0802e8f0 	.word	0x0802e8f0
 800ff78:	0802e8b0 	.word	0x0802e8b0
 800ff7c:	0802e6d8 	.word	0x0802e6d8
 800ff80:	0802e6e2 	.word	0x0802e6e2
 800ff84:	080100d1 	.word	0x080100d1
 800ff88:	0800fd0b 	.word	0x0800fd0b
 800ff8c:	0802e6de 	.word	0x0802e6de

0800ff90 <__cvt>:
 800ff90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	ec55 4b10 	vmov	r4, r5, d0
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	460e      	mov	r6, r1
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	462b      	mov	r3, r5
 800ffa0:	bfbb      	ittet	lt
 800ffa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffa6:	461d      	movlt	r5, r3
 800ffa8:	2300      	movge	r3, #0
 800ffaa:	232d      	movlt	r3, #45	; 0x2d
 800ffac:	700b      	strb	r3, [r1, #0]
 800ffae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ffb4:	4691      	mov	r9, r2
 800ffb6:	f023 0820 	bic.w	r8, r3, #32
 800ffba:	bfbc      	itt	lt
 800ffbc:	4622      	movlt	r2, r4
 800ffbe:	4614      	movlt	r4, r2
 800ffc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffc4:	d005      	beq.n	800ffd2 <__cvt+0x42>
 800ffc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffca:	d100      	bne.n	800ffce <__cvt+0x3e>
 800ffcc:	3601      	adds	r6, #1
 800ffce:	2102      	movs	r1, #2
 800ffd0:	e000      	b.n	800ffd4 <__cvt+0x44>
 800ffd2:	2103      	movs	r1, #3
 800ffd4:	ab03      	add	r3, sp, #12
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	ab02      	add	r3, sp, #8
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	ec45 4b10 	vmov	d0, r4, r5
 800ffe0:	4653      	mov	r3, sl
 800ffe2:	4632      	mov	r2, r6
 800ffe4:	f000 fe3c 	bl	8010c60 <_dtoa_r>
 800ffe8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffec:	4607      	mov	r7, r0
 800ffee:	d102      	bne.n	800fff6 <__cvt+0x66>
 800fff0:	f019 0f01 	tst.w	r9, #1
 800fff4:	d022      	beq.n	801003c <__cvt+0xac>
 800fff6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fffa:	eb07 0906 	add.w	r9, r7, r6
 800fffe:	d110      	bne.n	8010022 <__cvt+0x92>
 8010000:	783b      	ldrb	r3, [r7, #0]
 8010002:	2b30      	cmp	r3, #48	; 0x30
 8010004:	d10a      	bne.n	801001c <__cvt+0x8c>
 8010006:	2200      	movs	r2, #0
 8010008:	2300      	movs	r3, #0
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	f7f0 fd6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010012:	b918      	cbnz	r0, 801001c <__cvt+0x8c>
 8010014:	f1c6 0601 	rsb	r6, r6, #1
 8010018:	f8ca 6000 	str.w	r6, [sl]
 801001c:	f8da 3000 	ldr.w	r3, [sl]
 8010020:	4499      	add	r9, r3
 8010022:	2200      	movs	r2, #0
 8010024:	2300      	movs	r3, #0
 8010026:	4620      	mov	r0, r4
 8010028:	4629      	mov	r1, r5
 801002a:	f7f0 fd5d 	bl	8000ae8 <__aeabi_dcmpeq>
 801002e:	b108      	cbz	r0, 8010034 <__cvt+0xa4>
 8010030:	f8cd 900c 	str.w	r9, [sp, #12]
 8010034:	2230      	movs	r2, #48	; 0x30
 8010036:	9b03      	ldr	r3, [sp, #12]
 8010038:	454b      	cmp	r3, r9
 801003a:	d307      	bcc.n	801004c <__cvt+0xbc>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010040:	1bdb      	subs	r3, r3, r7
 8010042:	4638      	mov	r0, r7
 8010044:	6013      	str	r3, [r2, #0]
 8010046:	b004      	add	sp, #16
 8010048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004c:	1c59      	adds	r1, r3, #1
 801004e:	9103      	str	r1, [sp, #12]
 8010050:	701a      	strb	r2, [r3, #0]
 8010052:	e7f0      	b.n	8010036 <__cvt+0xa6>

08010054 <__exponent>:
 8010054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010056:	4603      	mov	r3, r0
 8010058:	2900      	cmp	r1, #0
 801005a:	bfb8      	it	lt
 801005c:	4249      	neglt	r1, r1
 801005e:	f803 2b02 	strb.w	r2, [r3], #2
 8010062:	bfb4      	ite	lt
 8010064:	222d      	movlt	r2, #45	; 0x2d
 8010066:	222b      	movge	r2, #43	; 0x2b
 8010068:	2909      	cmp	r1, #9
 801006a:	7042      	strb	r2, [r0, #1]
 801006c:	dd2a      	ble.n	80100c4 <__exponent+0x70>
 801006e:	f10d 0407 	add.w	r4, sp, #7
 8010072:	46a4      	mov	ip, r4
 8010074:	270a      	movs	r7, #10
 8010076:	46a6      	mov	lr, r4
 8010078:	460a      	mov	r2, r1
 801007a:	fb91 f6f7 	sdiv	r6, r1, r7
 801007e:	fb07 1516 	mls	r5, r7, r6, r1
 8010082:	3530      	adds	r5, #48	; 0x30
 8010084:	2a63      	cmp	r2, #99	; 0x63
 8010086:	f104 34ff 	add.w	r4, r4, #4294967295
 801008a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801008e:	4631      	mov	r1, r6
 8010090:	dcf1      	bgt.n	8010076 <__exponent+0x22>
 8010092:	3130      	adds	r1, #48	; 0x30
 8010094:	f1ae 0502 	sub.w	r5, lr, #2
 8010098:	f804 1c01 	strb.w	r1, [r4, #-1]
 801009c:	1c44      	adds	r4, r0, #1
 801009e:	4629      	mov	r1, r5
 80100a0:	4561      	cmp	r1, ip
 80100a2:	d30a      	bcc.n	80100ba <__exponent+0x66>
 80100a4:	f10d 0209 	add.w	r2, sp, #9
 80100a8:	eba2 020e 	sub.w	r2, r2, lr
 80100ac:	4565      	cmp	r5, ip
 80100ae:	bf88      	it	hi
 80100b0:	2200      	movhi	r2, #0
 80100b2:	4413      	add	r3, r2
 80100b4:	1a18      	subs	r0, r3, r0
 80100b6:	b003      	add	sp, #12
 80100b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100c2:	e7ed      	b.n	80100a0 <__exponent+0x4c>
 80100c4:	2330      	movs	r3, #48	; 0x30
 80100c6:	3130      	adds	r1, #48	; 0x30
 80100c8:	7083      	strb	r3, [r0, #2]
 80100ca:	70c1      	strb	r1, [r0, #3]
 80100cc:	1d03      	adds	r3, r0, #4
 80100ce:	e7f1      	b.n	80100b4 <__exponent+0x60>

080100d0 <_printf_float>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	ed2d 8b02 	vpush	{d8}
 80100d8:	b08d      	sub	sp, #52	; 0x34
 80100da:	460c      	mov	r4, r1
 80100dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100e0:	4616      	mov	r6, r2
 80100e2:	461f      	mov	r7, r3
 80100e4:	4605      	mov	r5, r0
 80100e6:	f001 fd61 	bl	8011bac <_localeconv_r>
 80100ea:	f8d0 a000 	ldr.w	sl, [r0]
 80100ee:	4650      	mov	r0, sl
 80100f0:	f7f0 f87e 	bl	80001f0 <strlen>
 80100f4:	2300      	movs	r3, #0
 80100f6:	930a      	str	r3, [sp, #40]	; 0x28
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	9305      	str	r3, [sp, #20]
 80100fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010100:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010104:	3307      	adds	r3, #7
 8010106:	f023 0307 	bic.w	r3, r3, #7
 801010a:	f103 0208 	add.w	r2, r3, #8
 801010e:	f8c8 2000 	str.w	r2, [r8]
 8010112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010116:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801011a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801011e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010122:	9307      	str	r3, [sp, #28]
 8010124:	f8cd 8018 	str.w	r8, [sp, #24]
 8010128:	ee08 0a10 	vmov	s16, r0
 801012c:	4b9f      	ldr	r3, [pc, #636]	; (80103ac <_printf_float+0x2dc>)
 801012e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010132:	f04f 32ff 	mov.w	r2, #4294967295
 8010136:	f7f0 fd09 	bl	8000b4c <__aeabi_dcmpun>
 801013a:	bb88      	cbnz	r0, 80101a0 <_printf_float+0xd0>
 801013c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010140:	4b9a      	ldr	r3, [pc, #616]	; (80103ac <_printf_float+0x2dc>)
 8010142:	f04f 32ff 	mov.w	r2, #4294967295
 8010146:	f7f0 fce3 	bl	8000b10 <__aeabi_dcmple>
 801014a:	bb48      	cbnz	r0, 80101a0 <_printf_float+0xd0>
 801014c:	2200      	movs	r2, #0
 801014e:	2300      	movs	r3, #0
 8010150:	4640      	mov	r0, r8
 8010152:	4649      	mov	r1, r9
 8010154:	f7f0 fcd2 	bl	8000afc <__aeabi_dcmplt>
 8010158:	b110      	cbz	r0, 8010160 <_printf_float+0x90>
 801015a:	232d      	movs	r3, #45	; 0x2d
 801015c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010160:	4b93      	ldr	r3, [pc, #588]	; (80103b0 <_printf_float+0x2e0>)
 8010162:	4894      	ldr	r0, [pc, #592]	; (80103b4 <_printf_float+0x2e4>)
 8010164:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010168:	bf94      	ite	ls
 801016a:	4698      	movls	r8, r3
 801016c:	4680      	movhi	r8, r0
 801016e:	2303      	movs	r3, #3
 8010170:	6123      	str	r3, [r4, #16]
 8010172:	9b05      	ldr	r3, [sp, #20]
 8010174:	f023 0204 	bic.w	r2, r3, #4
 8010178:	6022      	str	r2, [r4, #0]
 801017a:	f04f 0900 	mov.w	r9, #0
 801017e:	9700      	str	r7, [sp, #0]
 8010180:	4633      	mov	r3, r6
 8010182:	aa0b      	add	r2, sp, #44	; 0x2c
 8010184:	4621      	mov	r1, r4
 8010186:	4628      	mov	r0, r5
 8010188:	f000 f9d8 	bl	801053c <_printf_common>
 801018c:	3001      	adds	r0, #1
 801018e:	f040 8090 	bne.w	80102b2 <_printf_float+0x1e2>
 8010192:	f04f 30ff 	mov.w	r0, #4294967295
 8010196:	b00d      	add	sp, #52	; 0x34
 8010198:	ecbd 8b02 	vpop	{d8}
 801019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a0:	4642      	mov	r2, r8
 80101a2:	464b      	mov	r3, r9
 80101a4:	4640      	mov	r0, r8
 80101a6:	4649      	mov	r1, r9
 80101a8:	f7f0 fcd0 	bl	8000b4c <__aeabi_dcmpun>
 80101ac:	b140      	cbz	r0, 80101c0 <_printf_float+0xf0>
 80101ae:	464b      	mov	r3, r9
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	bfbc      	itt	lt
 80101b4:	232d      	movlt	r3, #45	; 0x2d
 80101b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101ba:	487f      	ldr	r0, [pc, #508]	; (80103b8 <_printf_float+0x2e8>)
 80101bc:	4b7f      	ldr	r3, [pc, #508]	; (80103bc <_printf_float+0x2ec>)
 80101be:	e7d1      	b.n	8010164 <_printf_float+0x94>
 80101c0:	6863      	ldr	r3, [r4, #4]
 80101c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101c6:	9206      	str	r2, [sp, #24]
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	d13f      	bne.n	801024c <_printf_float+0x17c>
 80101cc:	2306      	movs	r3, #6
 80101ce:	6063      	str	r3, [r4, #4]
 80101d0:	9b05      	ldr	r3, [sp, #20]
 80101d2:	6861      	ldr	r1, [r4, #4]
 80101d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101d8:	2300      	movs	r3, #0
 80101da:	9303      	str	r3, [sp, #12]
 80101dc:	ab0a      	add	r3, sp, #40	; 0x28
 80101de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101e2:	ab09      	add	r3, sp, #36	; 0x24
 80101e4:	ec49 8b10 	vmov	d0, r8, r9
 80101e8:	9300      	str	r3, [sp, #0]
 80101ea:	6022      	str	r2, [r4, #0]
 80101ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7ff fecd 	bl	800ff90 <__cvt>
 80101f6:	9b06      	ldr	r3, [sp, #24]
 80101f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101fa:	2b47      	cmp	r3, #71	; 0x47
 80101fc:	4680      	mov	r8, r0
 80101fe:	d108      	bne.n	8010212 <_printf_float+0x142>
 8010200:	1cc8      	adds	r0, r1, #3
 8010202:	db02      	blt.n	801020a <_printf_float+0x13a>
 8010204:	6863      	ldr	r3, [r4, #4]
 8010206:	4299      	cmp	r1, r3
 8010208:	dd41      	ble.n	801028e <_printf_float+0x1be>
 801020a:	f1ab 0b02 	sub.w	fp, fp, #2
 801020e:	fa5f fb8b 	uxtb.w	fp, fp
 8010212:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010216:	d820      	bhi.n	801025a <_printf_float+0x18a>
 8010218:	3901      	subs	r1, #1
 801021a:	465a      	mov	r2, fp
 801021c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010220:	9109      	str	r1, [sp, #36]	; 0x24
 8010222:	f7ff ff17 	bl	8010054 <__exponent>
 8010226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010228:	1813      	adds	r3, r2, r0
 801022a:	2a01      	cmp	r2, #1
 801022c:	4681      	mov	r9, r0
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	dc02      	bgt.n	8010238 <_printf_float+0x168>
 8010232:	6822      	ldr	r2, [r4, #0]
 8010234:	07d2      	lsls	r2, r2, #31
 8010236:	d501      	bpl.n	801023c <_printf_float+0x16c>
 8010238:	3301      	adds	r3, #1
 801023a:	6123      	str	r3, [r4, #16]
 801023c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010240:	2b00      	cmp	r3, #0
 8010242:	d09c      	beq.n	801017e <_printf_float+0xae>
 8010244:	232d      	movs	r3, #45	; 0x2d
 8010246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801024a:	e798      	b.n	801017e <_printf_float+0xae>
 801024c:	9a06      	ldr	r2, [sp, #24]
 801024e:	2a47      	cmp	r2, #71	; 0x47
 8010250:	d1be      	bne.n	80101d0 <_printf_float+0x100>
 8010252:	2b00      	cmp	r3, #0
 8010254:	d1bc      	bne.n	80101d0 <_printf_float+0x100>
 8010256:	2301      	movs	r3, #1
 8010258:	e7b9      	b.n	80101ce <_printf_float+0xfe>
 801025a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801025e:	d118      	bne.n	8010292 <_printf_float+0x1c2>
 8010260:	2900      	cmp	r1, #0
 8010262:	6863      	ldr	r3, [r4, #4]
 8010264:	dd0b      	ble.n	801027e <_printf_float+0x1ae>
 8010266:	6121      	str	r1, [r4, #16]
 8010268:	b913      	cbnz	r3, 8010270 <_printf_float+0x1a0>
 801026a:	6822      	ldr	r2, [r4, #0]
 801026c:	07d0      	lsls	r0, r2, #31
 801026e:	d502      	bpl.n	8010276 <_printf_float+0x1a6>
 8010270:	3301      	adds	r3, #1
 8010272:	440b      	add	r3, r1
 8010274:	6123      	str	r3, [r4, #16]
 8010276:	65a1      	str	r1, [r4, #88]	; 0x58
 8010278:	f04f 0900 	mov.w	r9, #0
 801027c:	e7de      	b.n	801023c <_printf_float+0x16c>
 801027e:	b913      	cbnz	r3, 8010286 <_printf_float+0x1b6>
 8010280:	6822      	ldr	r2, [r4, #0]
 8010282:	07d2      	lsls	r2, r2, #31
 8010284:	d501      	bpl.n	801028a <_printf_float+0x1ba>
 8010286:	3302      	adds	r3, #2
 8010288:	e7f4      	b.n	8010274 <_printf_float+0x1a4>
 801028a:	2301      	movs	r3, #1
 801028c:	e7f2      	b.n	8010274 <_printf_float+0x1a4>
 801028e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010294:	4299      	cmp	r1, r3
 8010296:	db05      	blt.n	80102a4 <_printf_float+0x1d4>
 8010298:	6823      	ldr	r3, [r4, #0]
 801029a:	6121      	str	r1, [r4, #16]
 801029c:	07d8      	lsls	r0, r3, #31
 801029e:	d5ea      	bpl.n	8010276 <_printf_float+0x1a6>
 80102a0:	1c4b      	adds	r3, r1, #1
 80102a2:	e7e7      	b.n	8010274 <_printf_float+0x1a4>
 80102a4:	2900      	cmp	r1, #0
 80102a6:	bfd4      	ite	le
 80102a8:	f1c1 0202 	rsble	r2, r1, #2
 80102ac:	2201      	movgt	r2, #1
 80102ae:	4413      	add	r3, r2
 80102b0:	e7e0      	b.n	8010274 <_printf_float+0x1a4>
 80102b2:	6823      	ldr	r3, [r4, #0]
 80102b4:	055a      	lsls	r2, r3, #21
 80102b6:	d407      	bmi.n	80102c8 <_printf_float+0x1f8>
 80102b8:	6923      	ldr	r3, [r4, #16]
 80102ba:	4642      	mov	r2, r8
 80102bc:	4631      	mov	r1, r6
 80102be:	4628      	mov	r0, r5
 80102c0:	47b8      	blx	r7
 80102c2:	3001      	adds	r0, #1
 80102c4:	d12c      	bne.n	8010320 <_printf_float+0x250>
 80102c6:	e764      	b.n	8010192 <_printf_float+0xc2>
 80102c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102cc:	f240 80e0 	bls.w	8010490 <_printf_float+0x3c0>
 80102d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102d4:	2200      	movs	r2, #0
 80102d6:	2300      	movs	r3, #0
 80102d8:	f7f0 fc06 	bl	8000ae8 <__aeabi_dcmpeq>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d034      	beq.n	801034a <_printf_float+0x27a>
 80102e0:	4a37      	ldr	r2, [pc, #220]	; (80103c0 <_printf_float+0x2f0>)
 80102e2:	2301      	movs	r3, #1
 80102e4:	4631      	mov	r1, r6
 80102e6:	4628      	mov	r0, r5
 80102e8:	47b8      	blx	r7
 80102ea:	3001      	adds	r0, #1
 80102ec:	f43f af51 	beq.w	8010192 <_printf_float+0xc2>
 80102f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102f4:	429a      	cmp	r2, r3
 80102f6:	db02      	blt.n	80102fe <_printf_float+0x22e>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	07d8      	lsls	r0, r3, #31
 80102fc:	d510      	bpl.n	8010320 <_printf_float+0x250>
 80102fe:	ee18 3a10 	vmov	r3, s16
 8010302:	4652      	mov	r2, sl
 8010304:	4631      	mov	r1, r6
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	f43f af41 	beq.w	8010192 <_printf_float+0xc2>
 8010310:	f04f 0800 	mov.w	r8, #0
 8010314:	f104 091a 	add.w	r9, r4, #26
 8010318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801031a:	3b01      	subs	r3, #1
 801031c:	4543      	cmp	r3, r8
 801031e:	dc09      	bgt.n	8010334 <_printf_float+0x264>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	079b      	lsls	r3, r3, #30
 8010324:	f100 8105 	bmi.w	8010532 <_printf_float+0x462>
 8010328:	68e0      	ldr	r0, [r4, #12]
 801032a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801032c:	4298      	cmp	r0, r3
 801032e:	bfb8      	it	lt
 8010330:	4618      	movlt	r0, r3
 8010332:	e730      	b.n	8010196 <_printf_float+0xc6>
 8010334:	2301      	movs	r3, #1
 8010336:	464a      	mov	r2, r9
 8010338:	4631      	mov	r1, r6
 801033a:	4628      	mov	r0, r5
 801033c:	47b8      	blx	r7
 801033e:	3001      	adds	r0, #1
 8010340:	f43f af27 	beq.w	8010192 <_printf_float+0xc2>
 8010344:	f108 0801 	add.w	r8, r8, #1
 8010348:	e7e6      	b.n	8010318 <_printf_float+0x248>
 801034a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034c:	2b00      	cmp	r3, #0
 801034e:	dc39      	bgt.n	80103c4 <_printf_float+0x2f4>
 8010350:	4a1b      	ldr	r2, [pc, #108]	; (80103c0 <_printf_float+0x2f0>)
 8010352:	2301      	movs	r3, #1
 8010354:	4631      	mov	r1, r6
 8010356:	4628      	mov	r0, r5
 8010358:	47b8      	blx	r7
 801035a:	3001      	adds	r0, #1
 801035c:	f43f af19 	beq.w	8010192 <_printf_float+0xc2>
 8010360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010364:	4313      	orrs	r3, r2
 8010366:	d102      	bne.n	801036e <_printf_float+0x29e>
 8010368:	6823      	ldr	r3, [r4, #0]
 801036a:	07d9      	lsls	r1, r3, #31
 801036c:	d5d8      	bpl.n	8010320 <_printf_float+0x250>
 801036e:	ee18 3a10 	vmov	r3, s16
 8010372:	4652      	mov	r2, sl
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f af09 	beq.w	8010192 <_printf_float+0xc2>
 8010380:	f04f 0900 	mov.w	r9, #0
 8010384:	f104 0a1a 	add.w	sl, r4, #26
 8010388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801038a:	425b      	negs	r3, r3
 801038c:	454b      	cmp	r3, r9
 801038e:	dc01      	bgt.n	8010394 <_printf_float+0x2c4>
 8010390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010392:	e792      	b.n	80102ba <_printf_float+0x1ea>
 8010394:	2301      	movs	r3, #1
 8010396:	4652      	mov	r2, sl
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	47b8      	blx	r7
 801039e:	3001      	adds	r0, #1
 80103a0:	f43f aef7 	beq.w	8010192 <_printf_float+0xc2>
 80103a4:	f109 0901 	add.w	r9, r9, #1
 80103a8:	e7ee      	b.n	8010388 <_printf_float+0x2b8>
 80103aa:	bf00      	nop
 80103ac:	7fefffff 	.word	0x7fefffff
 80103b0:	0802e6e9 	.word	0x0802e6e9
 80103b4:	0802e6ed 	.word	0x0802e6ed
 80103b8:	0802e6f5 	.word	0x0802e6f5
 80103bc:	0802e6f1 	.word	0x0802e6f1
 80103c0:	0802e6f9 	.word	0x0802e6f9
 80103c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103c8:	429a      	cmp	r2, r3
 80103ca:	bfa8      	it	ge
 80103cc:	461a      	movge	r2, r3
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	4691      	mov	r9, r2
 80103d2:	dc37      	bgt.n	8010444 <_printf_float+0x374>
 80103d4:	f04f 0b00 	mov.w	fp, #0
 80103d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103dc:	f104 021a 	add.w	r2, r4, #26
 80103e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103e2:	9305      	str	r3, [sp, #20]
 80103e4:	eba3 0309 	sub.w	r3, r3, r9
 80103e8:	455b      	cmp	r3, fp
 80103ea:	dc33      	bgt.n	8010454 <_printf_float+0x384>
 80103ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103f0:	429a      	cmp	r2, r3
 80103f2:	db3b      	blt.n	801046c <_printf_float+0x39c>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	07da      	lsls	r2, r3, #31
 80103f8:	d438      	bmi.n	801046c <_printf_float+0x39c>
 80103fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103fc:	9a05      	ldr	r2, [sp, #20]
 80103fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010400:	1a9a      	subs	r2, r3, r2
 8010402:	eba3 0901 	sub.w	r9, r3, r1
 8010406:	4591      	cmp	r9, r2
 8010408:	bfa8      	it	ge
 801040a:	4691      	movge	r9, r2
 801040c:	f1b9 0f00 	cmp.w	r9, #0
 8010410:	dc35      	bgt.n	801047e <_printf_float+0x3ae>
 8010412:	f04f 0800 	mov.w	r8, #0
 8010416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801041a:	f104 0a1a 	add.w	sl, r4, #26
 801041e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010422:	1a9b      	subs	r3, r3, r2
 8010424:	eba3 0309 	sub.w	r3, r3, r9
 8010428:	4543      	cmp	r3, r8
 801042a:	f77f af79 	ble.w	8010320 <_printf_float+0x250>
 801042e:	2301      	movs	r3, #1
 8010430:	4652      	mov	r2, sl
 8010432:	4631      	mov	r1, r6
 8010434:	4628      	mov	r0, r5
 8010436:	47b8      	blx	r7
 8010438:	3001      	adds	r0, #1
 801043a:	f43f aeaa 	beq.w	8010192 <_printf_float+0xc2>
 801043e:	f108 0801 	add.w	r8, r8, #1
 8010442:	e7ec      	b.n	801041e <_printf_float+0x34e>
 8010444:	4613      	mov	r3, r2
 8010446:	4631      	mov	r1, r6
 8010448:	4642      	mov	r2, r8
 801044a:	4628      	mov	r0, r5
 801044c:	47b8      	blx	r7
 801044e:	3001      	adds	r0, #1
 8010450:	d1c0      	bne.n	80103d4 <_printf_float+0x304>
 8010452:	e69e      	b.n	8010192 <_printf_float+0xc2>
 8010454:	2301      	movs	r3, #1
 8010456:	4631      	mov	r1, r6
 8010458:	4628      	mov	r0, r5
 801045a:	9205      	str	r2, [sp, #20]
 801045c:	47b8      	blx	r7
 801045e:	3001      	adds	r0, #1
 8010460:	f43f ae97 	beq.w	8010192 <_printf_float+0xc2>
 8010464:	9a05      	ldr	r2, [sp, #20]
 8010466:	f10b 0b01 	add.w	fp, fp, #1
 801046a:	e7b9      	b.n	80103e0 <_printf_float+0x310>
 801046c:	ee18 3a10 	vmov	r3, s16
 8010470:	4652      	mov	r2, sl
 8010472:	4631      	mov	r1, r6
 8010474:	4628      	mov	r0, r5
 8010476:	47b8      	blx	r7
 8010478:	3001      	adds	r0, #1
 801047a:	d1be      	bne.n	80103fa <_printf_float+0x32a>
 801047c:	e689      	b.n	8010192 <_printf_float+0xc2>
 801047e:	9a05      	ldr	r2, [sp, #20]
 8010480:	464b      	mov	r3, r9
 8010482:	4442      	add	r2, r8
 8010484:	4631      	mov	r1, r6
 8010486:	4628      	mov	r0, r5
 8010488:	47b8      	blx	r7
 801048a:	3001      	adds	r0, #1
 801048c:	d1c1      	bne.n	8010412 <_printf_float+0x342>
 801048e:	e680      	b.n	8010192 <_printf_float+0xc2>
 8010490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010492:	2a01      	cmp	r2, #1
 8010494:	dc01      	bgt.n	801049a <_printf_float+0x3ca>
 8010496:	07db      	lsls	r3, r3, #31
 8010498:	d538      	bpl.n	801050c <_printf_float+0x43c>
 801049a:	2301      	movs	r3, #1
 801049c:	4642      	mov	r2, r8
 801049e:	4631      	mov	r1, r6
 80104a0:	4628      	mov	r0, r5
 80104a2:	47b8      	blx	r7
 80104a4:	3001      	adds	r0, #1
 80104a6:	f43f ae74 	beq.w	8010192 <_printf_float+0xc2>
 80104aa:	ee18 3a10 	vmov	r3, s16
 80104ae:	4652      	mov	r2, sl
 80104b0:	4631      	mov	r1, r6
 80104b2:	4628      	mov	r0, r5
 80104b4:	47b8      	blx	r7
 80104b6:	3001      	adds	r0, #1
 80104b8:	f43f ae6b 	beq.w	8010192 <_printf_float+0xc2>
 80104bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104c0:	2200      	movs	r2, #0
 80104c2:	2300      	movs	r3, #0
 80104c4:	f7f0 fb10 	bl	8000ae8 <__aeabi_dcmpeq>
 80104c8:	b9d8      	cbnz	r0, 8010502 <_printf_float+0x432>
 80104ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104cc:	f108 0201 	add.w	r2, r8, #1
 80104d0:	3b01      	subs	r3, #1
 80104d2:	4631      	mov	r1, r6
 80104d4:	4628      	mov	r0, r5
 80104d6:	47b8      	blx	r7
 80104d8:	3001      	adds	r0, #1
 80104da:	d10e      	bne.n	80104fa <_printf_float+0x42a>
 80104dc:	e659      	b.n	8010192 <_printf_float+0xc2>
 80104de:	2301      	movs	r3, #1
 80104e0:	4652      	mov	r2, sl
 80104e2:	4631      	mov	r1, r6
 80104e4:	4628      	mov	r0, r5
 80104e6:	47b8      	blx	r7
 80104e8:	3001      	adds	r0, #1
 80104ea:	f43f ae52 	beq.w	8010192 <_printf_float+0xc2>
 80104ee:	f108 0801 	add.w	r8, r8, #1
 80104f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f4:	3b01      	subs	r3, #1
 80104f6:	4543      	cmp	r3, r8
 80104f8:	dcf1      	bgt.n	80104de <_printf_float+0x40e>
 80104fa:	464b      	mov	r3, r9
 80104fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010500:	e6dc      	b.n	80102bc <_printf_float+0x1ec>
 8010502:	f04f 0800 	mov.w	r8, #0
 8010506:	f104 0a1a 	add.w	sl, r4, #26
 801050a:	e7f2      	b.n	80104f2 <_printf_float+0x422>
 801050c:	2301      	movs	r3, #1
 801050e:	4642      	mov	r2, r8
 8010510:	e7df      	b.n	80104d2 <_printf_float+0x402>
 8010512:	2301      	movs	r3, #1
 8010514:	464a      	mov	r2, r9
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	f43f ae38 	beq.w	8010192 <_printf_float+0xc2>
 8010522:	f108 0801 	add.w	r8, r8, #1
 8010526:	68e3      	ldr	r3, [r4, #12]
 8010528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801052a:	1a5b      	subs	r3, r3, r1
 801052c:	4543      	cmp	r3, r8
 801052e:	dcf0      	bgt.n	8010512 <_printf_float+0x442>
 8010530:	e6fa      	b.n	8010328 <_printf_float+0x258>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	f104 0919 	add.w	r9, r4, #25
 801053a:	e7f4      	b.n	8010526 <_printf_float+0x456>

0801053c <_printf_common>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	4616      	mov	r6, r2
 8010542:	4699      	mov	r9, r3
 8010544:	688a      	ldr	r2, [r1, #8]
 8010546:	690b      	ldr	r3, [r1, #16]
 8010548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801054c:	4293      	cmp	r3, r2
 801054e:	bfb8      	it	lt
 8010550:	4613      	movlt	r3, r2
 8010552:	6033      	str	r3, [r6, #0]
 8010554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010558:	4607      	mov	r7, r0
 801055a:	460c      	mov	r4, r1
 801055c:	b10a      	cbz	r2, 8010562 <_printf_common+0x26>
 801055e:	3301      	adds	r3, #1
 8010560:	6033      	str	r3, [r6, #0]
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	0699      	lsls	r1, r3, #26
 8010566:	bf42      	ittt	mi
 8010568:	6833      	ldrmi	r3, [r6, #0]
 801056a:	3302      	addmi	r3, #2
 801056c:	6033      	strmi	r3, [r6, #0]
 801056e:	6825      	ldr	r5, [r4, #0]
 8010570:	f015 0506 	ands.w	r5, r5, #6
 8010574:	d106      	bne.n	8010584 <_printf_common+0x48>
 8010576:	f104 0a19 	add.w	sl, r4, #25
 801057a:	68e3      	ldr	r3, [r4, #12]
 801057c:	6832      	ldr	r2, [r6, #0]
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	42ab      	cmp	r3, r5
 8010582:	dc26      	bgt.n	80105d2 <_printf_common+0x96>
 8010584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010588:	1e13      	subs	r3, r2, #0
 801058a:	6822      	ldr	r2, [r4, #0]
 801058c:	bf18      	it	ne
 801058e:	2301      	movne	r3, #1
 8010590:	0692      	lsls	r2, r2, #26
 8010592:	d42b      	bmi.n	80105ec <_printf_common+0xb0>
 8010594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010598:	4649      	mov	r1, r9
 801059a:	4638      	mov	r0, r7
 801059c:	47c0      	blx	r8
 801059e:	3001      	adds	r0, #1
 80105a0:	d01e      	beq.n	80105e0 <_printf_common+0xa4>
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	68e5      	ldr	r5, [r4, #12]
 80105a6:	6832      	ldr	r2, [r6, #0]
 80105a8:	f003 0306 	and.w	r3, r3, #6
 80105ac:	2b04      	cmp	r3, #4
 80105ae:	bf08      	it	eq
 80105b0:	1aad      	subeq	r5, r5, r2
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	6922      	ldr	r2, [r4, #16]
 80105b6:	bf0c      	ite	eq
 80105b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105bc:	2500      	movne	r5, #0
 80105be:	4293      	cmp	r3, r2
 80105c0:	bfc4      	itt	gt
 80105c2:	1a9b      	subgt	r3, r3, r2
 80105c4:	18ed      	addgt	r5, r5, r3
 80105c6:	2600      	movs	r6, #0
 80105c8:	341a      	adds	r4, #26
 80105ca:	42b5      	cmp	r5, r6
 80105cc:	d11a      	bne.n	8010604 <_printf_common+0xc8>
 80105ce:	2000      	movs	r0, #0
 80105d0:	e008      	b.n	80105e4 <_printf_common+0xa8>
 80105d2:	2301      	movs	r3, #1
 80105d4:	4652      	mov	r2, sl
 80105d6:	4649      	mov	r1, r9
 80105d8:	4638      	mov	r0, r7
 80105da:	47c0      	blx	r8
 80105dc:	3001      	adds	r0, #1
 80105de:	d103      	bne.n	80105e8 <_printf_common+0xac>
 80105e0:	f04f 30ff 	mov.w	r0, #4294967295
 80105e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e8:	3501      	adds	r5, #1
 80105ea:	e7c6      	b.n	801057a <_printf_common+0x3e>
 80105ec:	18e1      	adds	r1, r4, r3
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	2030      	movs	r0, #48	; 0x30
 80105f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105f6:	4422      	add	r2, r4
 80105f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010600:	3302      	adds	r3, #2
 8010602:	e7c7      	b.n	8010594 <_printf_common+0x58>
 8010604:	2301      	movs	r3, #1
 8010606:	4622      	mov	r2, r4
 8010608:	4649      	mov	r1, r9
 801060a:	4638      	mov	r0, r7
 801060c:	47c0      	blx	r8
 801060e:	3001      	adds	r0, #1
 8010610:	d0e6      	beq.n	80105e0 <_printf_common+0xa4>
 8010612:	3601      	adds	r6, #1
 8010614:	e7d9      	b.n	80105ca <_printf_common+0x8e>
	...

08010618 <_printf_i>:
 8010618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801061c:	7e0f      	ldrb	r7, [r1, #24]
 801061e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010620:	2f78      	cmp	r7, #120	; 0x78
 8010622:	4691      	mov	r9, r2
 8010624:	4680      	mov	r8, r0
 8010626:	460c      	mov	r4, r1
 8010628:	469a      	mov	sl, r3
 801062a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801062e:	d807      	bhi.n	8010640 <_printf_i+0x28>
 8010630:	2f62      	cmp	r7, #98	; 0x62
 8010632:	d80a      	bhi.n	801064a <_printf_i+0x32>
 8010634:	2f00      	cmp	r7, #0
 8010636:	f000 80d8 	beq.w	80107ea <_printf_i+0x1d2>
 801063a:	2f58      	cmp	r7, #88	; 0x58
 801063c:	f000 80a3 	beq.w	8010786 <_printf_i+0x16e>
 8010640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010648:	e03a      	b.n	80106c0 <_printf_i+0xa8>
 801064a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801064e:	2b15      	cmp	r3, #21
 8010650:	d8f6      	bhi.n	8010640 <_printf_i+0x28>
 8010652:	a101      	add	r1, pc, #4	; (adr r1, 8010658 <_printf_i+0x40>)
 8010654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010658:	080106b1 	.word	0x080106b1
 801065c:	080106c5 	.word	0x080106c5
 8010660:	08010641 	.word	0x08010641
 8010664:	08010641 	.word	0x08010641
 8010668:	08010641 	.word	0x08010641
 801066c:	08010641 	.word	0x08010641
 8010670:	080106c5 	.word	0x080106c5
 8010674:	08010641 	.word	0x08010641
 8010678:	08010641 	.word	0x08010641
 801067c:	08010641 	.word	0x08010641
 8010680:	08010641 	.word	0x08010641
 8010684:	080107d1 	.word	0x080107d1
 8010688:	080106f5 	.word	0x080106f5
 801068c:	080107b3 	.word	0x080107b3
 8010690:	08010641 	.word	0x08010641
 8010694:	08010641 	.word	0x08010641
 8010698:	080107f3 	.word	0x080107f3
 801069c:	08010641 	.word	0x08010641
 80106a0:	080106f5 	.word	0x080106f5
 80106a4:	08010641 	.word	0x08010641
 80106a8:	08010641 	.word	0x08010641
 80106ac:	080107bb 	.word	0x080107bb
 80106b0:	682b      	ldr	r3, [r5, #0]
 80106b2:	1d1a      	adds	r2, r3, #4
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	602a      	str	r2, [r5, #0]
 80106b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106c0:	2301      	movs	r3, #1
 80106c2:	e0a3      	b.n	801080c <_printf_i+0x1f4>
 80106c4:	6820      	ldr	r0, [r4, #0]
 80106c6:	6829      	ldr	r1, [r5, #0]
 80106c8:	0606      	lsls	r6, r0, #24
 80106ca:	f101 0304 	add.w	r3, r1, #4
 80106ce:	d50a      	bpl.n	80106e6 <_printf_i+0xce>
 80106d0:	680e      	ldr	r6, [r1, #0]
 80106d2:	602b      	str	r3, [r5, #0]
 80106d4:	2e00      	cmp	r6, #0
 80106d6:	da03      	bge.n	80106e0 <_printf_i+0xc8>
 80106d8:	232d      	movs	r3, #45	; 0x2d
 80106da:	4276      	negs	r6, r6
 80106dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106e0:	485e      	ldr	r0, [pc, #376]	; (801085c <_printf_i+0x244>)
 80106e2:	230a      	movs	r3, #10
 80106e4:	e019      	b.n	801071a <_printf_i+0x102>
 80106e6:	680e      	ldr	r6, [r1, #0]
 80106e8:	602b      	str	r3, [r5, #0]
 80106ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106ee:	bf18      	it	ne
 80106f0:	b236      	sxthne	r6, r6
 80106f2:	e7ef      	b.n	80106d4 <_printf_i+0xbc>
 80106f4:	682b      	ldr	r3, [r5, #0]
 80106f6:	6820      	ldr	r0, [r4, #0]
 80106f8:	1d19      	adds	r1, r3, #4
 80106fa:	6029      	str	r1, [r5, #0]
 80106fc:	0601      	lsls	r1, r0, #24
 80106fe:	d501      	bpl.n	8010704 <_printf_i+0xec>
 8010700:	681e      	ldr	r6, [r3, #0]
 8010702:	e002      	b.n	801070a <_printf_i+0xf2>
 8010704:	0646      	lsls	r6, r0, #25
 8010706:	d5fb      	bpl.n	8010700 <_printf_i+0xe8>
 8010708:	881e      	ldrh	r6, [r3, #0]
 801070a:	4854      	ldr	r0, [pc, #336]	; (801085c <_printf_i+0x244>)
 801070c:	2f6f      	cmp	r7, #111	; 0x6f
 801070e:	bf0c      	ite	eq
 8010710:	2308      	moveq	r3, #8
 8010712:	230a      	movne	r3, #10
 8010714:	2100      	movs	r1, #0
 8010716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801071a:	6865      	ldr	r5, [r4, #4]
 801071c:	60a5      	str	r5, [r4, #8]
 801071e:	2d00      	cmp	r5, #0
 8010720:	bfa2      	ittt	ge
 8010722:	6821      	ldrge	r1, [r4, #0]
 8010724:	f021 0104 	bicge.w	r1, r1, #4
 8010728:	6021      	strge	r1, [r4, #0]
 801072a:	b90e      	cbnz	r6, 8010730 <_printf_i+0x118>
 801072c:	2d00      	cmp	r5, #0
 801072e:	d04d      	beq.n	80107cc <_printf_i+0x1b4>
 8010730:	4615      	mov	r5, r2
 8010732:	fbb6 f1f3 	udiv	r1, r6, r3
 8010736:	fb03 6711 	mls	r7, r3, r1, r6
 801073a:	5dc7      	ldrb	r7, [r0, r7]
 801073c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010740:	4637      	mov	r7, r6
 8010742:	42bb      	cmp	r3, r7
 8010744:	460e      	mov	r6, r1
 8010746:	d9f4      	bls.n	8010732 <_printf_i+0x11a>
 8010748:	2b08      	cmp	r3, #8
 801074a:	d10b      	bne.n	8010764 <_printf_i+0x14c>
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	07de      	lsls	r6, r3, #31
 8010750:	d508      	bpl.n	8010764 <_printf_i+0x14c>
 8010752:	6923      	ldr	r3, [r4, #16]
 8010754:	6861      	ldr	r1, [r4, #4]
 8010756:	4299      	cmp	r1, r3
 8010758:	bfde      	ittt	le
 801075a:	2330      	movle	r3, #48	; 0x30
 801075c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010764:	1b52      	subs	r2, r2, r5
 8010766:	6122      	str	r2, [r4, #16]
 8010768:	f8cd a000 	str.w	sl, [sp]
 801076c:	464b      	mov	r3, r9
 801076e:	aa03      	add	r2, sp, #12
 8010770:	4621      	mov	r1, r4
 8010772:	4640      	mov	r0, r8
 8010774:	f7ff fee2 	bl	801053c <_printf_common>
 8010778:	3001      	adds	r0, #1
 801077a:	d14c      	bne.n	8010816 <_printf_i+0x1fe>
 801077c:	f04f 30ff 	mov.w	r0, #4294967295
 8010780:	b004      	add	sp, #16
 8010782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010786:	4835      	ldr	r0, [pc, #212]	; (801085c <_printf_i+0x244>)
 8010788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801078c:	6829      	ldr	r1, [r5, #0]
 801078e:	6823      	ldr	r3, [r4, #0]
 8010790:	f851 6b04 	ldr.w	r6, [r1], #4
 8010794:	6029      	str	r1, [r5, #0]
 8010796:	061d      	lsls	r5, r3, #24
 8010798:	d514      	bpl.n	80107c4 <_printf_i+0x1ac>
 801079a:	07df      	lsls	r7, r3, #31
 801079c:	bf44      	itt	mi
 801079e:	f043 0320 	orrmi.w	r3, r3, #32
 80107a2:	6023      	strmi	r3, [r4, #0]
 80107a4:	b91e      	cbnz	r6, 80107ae <_printf_i+0x196>
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	f023 0320 	bic.w	r3, r3, #32
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	2310      	movs	r3, #16
 80107b0:	e7b0      	b.n	8010714 <_printf_i+0xfc>
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	f043 0320 	orr.w	r3, r3, #32
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	2378      	movs	r3, #120	; 0x78
 80107bc:	4828      	ldr	r0, [pc, #160]	; (8010860 <_printf_i+0x248>)
 80107be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107c2:	e7e3      	b.n	801078c <_printf_i+0x174>
 80107c4:	0659      	lsls	r1, r3, #25
 80107c6:	bf48      	it	mi
 80107c8:	b2b6      	uxthmi	r6, r6
 80107ca:	e7e6      	b.n	801079a <_printf_i+0x182>
 80107cc:	4615      	mov	r5, r2
 80107ce:	e7bb      	b.n	8010748 <_printf_i+0x130>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	6826      	ldr	r6, [r4, #0]
 80107d4:	6961      	ldr	r1, [r4, #20]
 80107d6:	1d18      	adds	r0, r3, #4
 80107d8:	6028      	str	r0, [r5, #0]
 80107da:	0635      	lsls	r5, r6, #24
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	d501      	bpl.n	80107e4 <_printf_i+0x1cc>
 80107e0:	6019      	str	r1, [r3, #0]
 80107e2:	e002      	b.n	80107ea <_printf_i+0x1d2>
 80107e4:	0670      	lsls	r0, r6, #25
 80107e6:	d5fb      	bpl.n	80107e0 <_printf_i+0x1c8>
 80107e8:	8019      	strh	r1, [r3, #0]
 80107ea:	2300      	movs	r3, #0
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	4615      	mov	r5, r2
 80107f0:	e7ba      	b.n	8010768 <_printf_i+0x150>
 80107f2:	682b      	ldr	r3, [r5, #0]
 80107f4:	1d1a      	adds	r2, r3, #4
 80107f6:	602a      	str	r2, [r5, #0]
 80107f8:	681d      	ldr	r5, [r3, #0]
 80107fa:	6862      	ldr	r2, [r4, #4]
 80107fc:	2100      	movs	r1, #0
 80107fe:	4628      	mov	r0, r5
 8010800:	f7ef fcfe 	bl	8000200 <memchr>
 8010804:	b108      	cbz	r0, 801080a <_printf_i+0x1f2>
 8010806:	1b40      	subs	r0, r0, r5
 8010808:	6060      	str	r0, [r4, #4]
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	6123      	str	r3, [r4, #16]
 801080e:	2300      	movs	r3, #0
 8010810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010814:	e7a8      	b.n	8010768 <_printf_i+0x150>
 8010816:	6923      	ldr	r3, [r4, #16]
 8010818:	462a      	mov	r2, r5
 801081a:	4649      	mov	r1, r9
 801081c:	4640      	mov	r0, r8
 801081e:	47d0      	blx	sl
 8010820:	3001      	adds	r0, #1
 8010822:	d0ab      	beq.n	801077c <_printf_i+0x164>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	079b      	lsls	r3, r3, #30
 8010828:	d413      	bmi.n	8010852 <_printf_i+0x23a>
 801082a:	68e0      	ldr	r0, [r4, #12]
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	4298      	cmp	r0, r3
 8010830:	bfb8      	it	lt
 8010832:	4618      	movlt	r0, r3
 8010834:	e7a4      	b.n	8010780 <_printf_i+0x168>
 8010836:	2301      	movs	r3, #1
 8010838:	4632      	mov	r2, r6
 801083a:	4649      	mov	r1, r9
 801083c:	4640      	mov	r0, r8
 801083e:	47d0      	blx	sl
 8010840:	3001      	adds	r0, #1
 8010842:	d09b      	beq.n	801077c <_printf_i+0x164>
 8010844:	3501      	adds	r5, #1
 8010846:	68e3      	ldr	r3, [r4, #12]
 8010848:	9903      	ldr	r1, [sp, #12]
 801084a:	1a5b      	subs	r3, r3, r1
 801084c:	42ab      	cmp	r3, r5
 801084e:	dcf2      	bgt.n	8010836 <_printf_i+0x21e>
 8010850:	e7eb      	b.n	801082a <_printf_i+0x212>
 8010852:	2500      	movs	r5, #0
 8010854:	f104 0619 	add.w	r6, r4, #25
 8010858:	e7f5      	b.n	8010846 <_printf_i+0x22e>
 801085a:	bf00      	nop
 801085c:	0802e6fb 	.word	0x0802e6fb
 8010860:	0802e70c 	.word	0x0802e70c

08010864 <_sbrk_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4d06      	ldr	r5, [pc, #24]	; (8010880 <_sbrk_r+0x1c>)
 8010868:	2300      	movs	r3, #0
 801086a:	4604      	mov	r4, r0
 801086c:	4608      	mov	r0, r1
 801086e:	602b      	str	r3, [r5, #0]
 8010870:	f7f4 fa7c 	bl	8004d6c <_sbrk>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_sbrk_r+0x1a>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_sbrk_r+0x1a>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20005d78 	.word	0x20005d78

08010884 <siprintf>:
 8010884:	b40e      	push	{r1, r2, r3}
 8010886:	b500      	push	{lr}
 8010888:	b09c      	sub	sp, #112	; 0x70
 801088a:	ab1d      	add	r3, sp, #116	; 0x74
 801088c:	9002      	str	r0, [sp, #8]
 801088e:	9006      	str	r0, [sp, #24]
 8010890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010894:	4809      	ldr	r0, [pc, #36]	; (80108bc <siprintf+0x38>)
 8010896:	9107      	str	r1, [sp, #28]
 8010898:	9104      	str	r1, [sp, #16]
 801089a:	4909      	ldr	r1, [pc, #36]	; (80108c0 <siprintf+0x3c>)
 801089c:	f853 2b04 	ldr.w	r2, [r3], #4
 80108a0:	9105      	str	r1, [sp, #20]
 80108a2:	6800      	ldr	r0, [r0, #0]
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	a902      	add	r1, sp, #8
 80108a8:	f001 fe5c 	bl	8012564 <_svfiprintf_r>
 80108ac:	9b02      	ldr	r3, [sp, #8]
 80108ae:	2200      	movs	r2, #0
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	b01c      	add	sp, #112	; 0x70
 80108b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108b8:	b003      	add	sp, #12
 80108ba:	4770      	bx	lr
 80108bc:	200000f8 	.word	0x200000f8
 80108c0:	ffff0208 	.word	0xffff0208

080108c4 <__sread>:
 80108c4:	b510      	push	{r4, lr}
 80108c6:	460c      	mov	r4, r1
 80108c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108cc:	f001 ff4a 	bl	8012764 <_read_r>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	bfab      	itete	ge
 80108d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108d6:	89a3      	ldrhlt	r3, [r4, #12]
 80108d8:	181b      	addge	r3, r3, r0
 80108da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108de:	bfac      	ite	ge
 80108e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80108e2:	81a3      	strhlt	r3, [r4, #12]
 80108e4:	bd10      	pop	{r4, pc}

080108e6 <__swrite>:
 80108e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ea:	461f      	mov	r7, r3
 80108ec:	898b      	ldrh	r3, [r1, #12]
 80108ee:	05db      	lsls	r3, r3, #23
 80108f0:	4605      	mov	r5, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	4616      	mov	r6, r2
 80108f6:	d505      	bpl.n	8010904 <__swrite+0x1e>
 80108f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fc:	2302      	movs	r3, #2
 80108fe:	2200      	movs	r2, #0
 8010900:	f001 f95c 	bl	8011bbc <_lseek_r>
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801090a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801090e:	81a3      	strh	r3, [r4, #12]
 8010910:	4632      	mov	r2, r6
 8010912:	463b      	mov	r3, r7
 8010914:	4628      	mov	r0, r5
 8010916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	f000 b87b 	b.w	8010a14 <_write_r>

0801091e <__sseek>:
 801091e:	b510      	push	{r4, lr}
 8010920:	460c      	mov	r4, r1
 8010922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010926:	f001 f949 	bl	8011bbc <_lseek_r>
 801092a:	1c43      	adds	r3, r0, #1
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	bf15      	itete	ne
 8010930:	6560      	strne	r0, [r4, #84]	; 0x54
 8010932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801093a:	81a3      	strheq	r3, [r4, #12]
 801093c:	bf18      	it	ne
 801093e:	81a3      	strhne	r3, [r4, #12]
 8010940:	bd10      	pop	{r4, pc}

08010942 <__sclose>:
 8010942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010946:	f000 b8ed 	b.w	8010b24 <_close_r>

0801094a <strncpy>:
 801094a:	b510      	push	{r4, lr}
 801094c:	3901      	subs	r1, #1
 801094e:	4603      	mov	r3, r0
 8010950:	b132      	cbz	r2, 8010960 <strncpy+0x16>
 8010952:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010956:	f803 4b01 	strb.w	r4, [r3], #1
 801095a:	3a01      	subs	r2, #1
 801095c:	2c00      	cmp	r4, #0
 801095e:	d1f7      	bne.n	8010950 <strncpy+0x6>
 8010960:	441a      	add	r2, r3
 8010962:	2100      	movs	r1, #0
 8010964:	4293      	cmp	r3, r2
 8010966:	d100      	bne.n	801096a <strncpy+0x20>
 8010968:	bd10      	pop	{r4, pc}
 801096a:	f803 1b01 	strb.w	r1, [r3], #1
 801096e:	e7f9      	b.n	8010964 <strncpy+0x1a>

08010970 <__swbuf_r>:
 8010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010972:	460e      	mov	r6, r1
 8010974:	4614      	mov	r4, r2
 8010976:	4605      	mov	r5, r0
 8010978:	b118      	cbz	r0, 8010982 <__swbuf_r+0x12>
 801097a:	6983      	ldr	r3, [r0, #24]
 801097c:	b90b      	cbnz	r3, 8010982 <__swbuf_r+0x12>
 801097e:	f001 f877 	bl	8011a70 <__sinit>
 8010982:	4b21      	ldr	r3, [pc, #132]	; (8010a08 <__swbuf_r+0x98>)
 8010984:	429c      	cmp	r4, r3
 8010986:	d12b      	bne.n	80109e0 <__swbuf_r+0x70>
 8010988:	686c      	ldr	r4, [r5, #4]
 801098a:	69a3      	ldr	r3, [r4, #24]
 801098c:	60a3      	str	r3, [r4, #8]
 801098e:	89a3      	ldrh	r3, [r4, #12]
 8010990:	071a      	lsls	r2, r3, #28
 8010992:	d52f      	bpl.n	80109f4 <__swbuf_r+0x84>
 8010994:	6923      	ldr	r3, [r4, #16]
 8010996:	b36b      	cbz	r3, 80109f4 <__swbuf_r+0x84>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	6820      	ldr	r0, [r4, #0]
 801099c:	1ac0      	subs	r0, r0, r3
 801099e:	6963      	ldr	r3, [r4, #20]
 80109a0:	b2f6      	uxtb	r6, r6
 80109a2:	4283      	cmp	r3, r0
 80109a4:	4637      	mov	r7, r6
 80109a6:	dc04      	bgt.n	80109b2 <__swbuf_r+0x42>
 80109a8:	4621      	mov	r1, r4
 80109aa:	4628      	mov	r0, r5
 80109ac:	f000 ffcc 	bl	8011948 <_fflush_r>
 80109b0:	bb30      	cbnz	r0, 8010a00 <__swbuf_r+0x90>
 80109b2:	68a3      	ldr	r3, [r4, #8]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	60a3      	str	r3, [r4, #8]
 80109b8:	6823      	ldr	r3, [r4, #0]
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	6022      	str	r2, [r4, #0]
 80109be:	701e      	strb	r6, [r3, #0]
 80109c0:	6963      	ldr	r3, [r4, #20]
 80109c2:	3001      	adds	r0, #1
 80109c4:	4283      	cmp	r3, r0
 80109c6:	d004      	beq.n	80109d2 <__swbuf_r+0x62>
 80109c8:	89a3      	ldrh	r3, [r4, #12]
 80109ca:	07db      	lsls	r3, r3, #31
 80109cc:	d506      	bpl.n	80109dc <__swbuf_r+0x6c>
 80109ce:	2e0a      	cmp	r6, #10
 80109d0:	d104      	bne.n	80109dc <__swbuf_r+0x6c>
 80109d2:	4621      	mov	r1, r4
 80109d4:	4628      	mov	r0, r5
 80109d6:	f000 ffb7 	bl	8011948 <_fflush_r>
 80109da:	b988      	cbnz	r0, 8010a00 <__swbuf_r+0x90>
 80109dc:	4638      	mov	r0, r7
 80109de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e0:	4b0a      	ldr	r3, [pc, #40]	; (8010a0c <__swbuf_r+0x9c>)
 80109e2:	429c      	cmp	r4, r3
 80109e4:	d101      	bne.n	80109ea <__swbuf_r+0x7a>
 80109e6:	68ac      	ldr	r4, [r5, #8]
 80109e8:	e7cf      	b.n	801098a <__swbuf_r+0x1a>
 80109ea:	4b09      	ldr	r3, [pc, #36]	; (8010a10 <__swbuf_r+0xa0>)
 80109ec:	429c      	cmp	r4, r3
 80109ee:	bf08      	it	eq
 80109f0:	68ec      	ldreq	r4, [r5, #12]
 80109f2:	e7ca      	b.n	801098a <__swbuf_r+0x1a>
 80109f4:	4621      	mov	r1, r4
 80109f6:	4628      	mov	r0, r5
 80109f8:	f000 f81e 	bl	8010a38 <__swsetup_r>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d0cb      	beq.n	8010998 <__swbuf_r+0x28>
 8010a00:	f04f 37ff 	mov.w	r7, #4294967295
 8010a04:	e7ea      	b.n	80109dc <__swbuf_r+0x6c>
 8010a06:	bf00      	nop
 8010a08:	0802e8d0 	.word	0x0802e8d0
 8010a0c:	0802e8f0 	.word	0x0802e8f0
 8010a10:	0802e8b0 	.word	0x0802e8b0

08010a14 <_write_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d07      	ldr	r5, [pc, #28]	; (8010a34 <_write_r+0x20>)
 8010a18:	4604      	mov	r4, r0
 8010a1a:	4608      	mov	r0, r1
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	2200      	movs	r2, #0
 8010a20:	602a      	str	r2, [r5, #0]
 8010a22:	461a      	mov	r2, r3
 8010a24:	f7f4 f951 	bl	8004cca <_write>
 8010a28:	1c43      	adds	r3, r0, #1
 8010a2a:	d102      	bne.n	8010a32 <_write_r+0x1e>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	b103      	cbz	r3, 8010a32 <_write_r+0x1e>
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	bd38      	pop	{r3, r4, r5, pc}
 8010a34:	20005d78 	.word	0x20005d78

08010a38 <__swsetup_r>:
 8010a38:	4b32      	ldr	r3, [pc, #200]	; (8010b04 <__swsetup_r+0xcc>)
 8010a3a:	b570      	push	{r4, r5, r6, lr}
 8010a3c:	681d      	ldr	r5, [r3, #0]
 8010a3e:	4606      	mov	r6, r0
 8010a40:	460c      	mov	r4, r1
 8010a42:	b125      	cbz	r5, 8010a4e <__swsetup_r+0x16>
 8010a44:	69ab      	ldr	r3, [r5, #24]
 8010a46:	b913      	cbnz	r3, 8010a4e <__swsetup_r+0x16>
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f001 f811 	bl	8011a70 <__sinit>
 8010a4e:	4b2e      	ldr	r3, [pc, #184]	; (8010b08 <__swsetup_r+0xd0>)
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d10f      	bne.n	8010a74 <__swsetup_r+0x3c>
 8010a54:	686c      	ldr	r4, [r5, #4]
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a5c:	0719      	lsls	r1, r3, #28
 8010a5e:	d42c      	bmi.n	8010aba <__swsetup_r+0x82>
 8010a60:	06dd      	lsls	r5, r3, #27
 8010a62:	d411      	bmi.n	8010a88 <__swsetup_r+0x50>
 8010a64:	2309      	movs	r3, #9
 8010a66:	6033      	str	r3, [r6, #0]
 8010a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a72:	e03e      	b.n	8010af2 <__swsetup_r+0xba>
 8010a74:	4b25      	ldr	r3, [pc, #148]	; (8010b0c <__swsetup_r+0xd4>)
 8010a76:	429c      	cmp	r4, r3
 8010a78:	d101      	bne.n	8010a7e <__swsetup_r+0x46>
 8010a7a:	68ac      	ldr	r4, [r5, #8]
 8010a7c:	e7eb      	b.n	8010a56 <__swsetup_r+0x1e>
 8010a7e:	4b24      	ldr	r3, [pc, #144]	; (8010b10 <__swsetup_r+0xd8>)
 8010a80:	429c      	cmp	r4, r3
 8010a82:	bf08      	it	eq
 8010a84:	68ec      	ldreq	r4, [r5, #12]
 8010a86:	e7e6      	b.n	8010a56 <__swsetup_r+0x1e>
 8010a88:	0758      	lsls	r0, r3, #29
 8010a8a:	d512      	bpl.n	8010ab2 <__swsetup_r+0x7a>
 8010a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a8e:	b141      	cbz	r1, 8010aa2 <__swsetup_r+0x6a>
 8010a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a94:	4299      	cmp	r1, r3
 8010a96:	d002      	beq.n	8010a9e <__swsetup_r+0x66>
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f7ff f83f 	bl	800fb1c <_free_r>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8010aa2:	89a3      	ldrh	r3, [r4, #12]
 8010aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	2300      	movs	r3, #0
 8010aac:	6063      	str	r3, [r4, #4]
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	f043 0308 	orr.w	r3, r3, #8
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	6923      	ldr	r3, [r4, #16]
 8010abc:	b94b      	cbnz	r3, 8010ad2 <__swsetup_r+0x9a>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ac8:	d003      	beq.n	8010ad2 <__swsetup_r+0x9a>
 8010aca:	4621      	mov	r1, r4
 8010acc:	4630      	mov	r0, r6
 8010ace:	f001 f8ad 	bl	8011c2c <__smakebuf_r>
 8010ad2:	89a0      	ldrh	r0, [r4, #12]
 8010ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ad8:	f010 0301 	ands.w	r3, r0, #1
 8010adc:	d00a      	beq.n	8010af4 <__swsetup_r+0xbc>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	60a3      	str	r3, [r4, #8]
 8010ae2:	6963      	ldr	r3, [r4, #20]
 8010ae4:	425b      	negs	r3, r3
 8010ae6:	61a3      	str	r3, [r4, #24]
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	b943      	cbnz	r3, 8010afe <__swsetup_r+0xc6>
 8010aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010af0:	d1ba      	bne.n	8010a68 <__swsetup_r+0x30>
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
 8010af4:	0781      	lsls	r1, r0, #30
 8010af6:	bf58      	it	pl
 8010af8:	6963      	ldrpl	r3, [r4, #20]
 8010afa:	60a3      	str	r3, [r4, #8]
 8010afc:	e7f4      	b.n	8010ae8 <__swsetup_r+0xb0>
 8010afe:	2000      	movs	r0, #0
 8010b00:	e7f7      	b.n	8010af2 <__swsetup_r+0xba>
 8010b02:	bf00      	nop
 8010b04:	200000f8 	.word	0x200000f8
 8010b08:	0802e8d0 	.word	0x0802e8d0
 8010b0c:	0802e8f0 	.word	0x0802e8f0
 8010b10:	0802e8b0 	.word	0x0802e8b0

08010b14 <abort>:
 8010b14:	b508      	push	{r3, lr}
 8010b16:	2006      	movs	r0, #6
 8010b18:	f001 fe5e 	bl	80127d8 <raise>
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	f7f4 f8ad 	bl	8004c7c <_exit>
	...

08010b24 <_close_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4d06      	ldr	r5, [pc, #24]	; (8010b40 <_close_r+0x1c>)
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	4608      	mov	r0, r1
 8010b2e:	602b      	str	r3, [r5, #0]
 8010b30:	f7f4 f8e7 	bl	8004d02 <_close>
 8010b34:	1c43      	adds	r3, r0, #1
 8010b36:	d102      	bne.n	8010b3e <_close_r+0x1a>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	b103      	cbz	r3, 8010b3e <_close_r+0x1a>
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	20005d78 	.word	0x20005d78

08010b44 <quorem>:
 8010b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	6903      	ldr	r3, [r0, #16]
 8010b4a:	690c      	ldr	r4, [r1, #16]
 8010b4c:	42a3      	cmp	r3, r4
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f2c0 8081 	blt.w	8010c56 <quorem+0x112>
 8010b54:	3c01      	subs	r4, #1
 8010b56:	f101 0814 	add.w	r8, r1, #20
 8010b5a:	f100 0514 	add.w	r5, r0, #20
 8010b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b62:	9301      	str	r3, [sp, #4]
 8010b64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b7c:	d331      	bcc.n	8010be2 <quorem+0x9e>
 8010b7e:	f04f 0e00 	mov.w	lr, #0
 8010b82:	4640      	mov	r0, r8
 8010b84:	46ac      	mov	ip, r5
 8010b86:	46f2      	mov	sl, lr
 8010b88:	f850 2b04 	ldr.w	r2, [r0], #4
 8010b8c:	b293      	uxth	r3, r2
 8010b8e:	fb06 e303 	mla	r3, r6, r3, lr
 8010b92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	ebaa 0303 	sub.w	r3, sl, r3
 8010b9c:	f8dc a000 	ldr.w	sl, [ip]
 8010ba0:	0c12      	lsrs	r2, r2, #16
 8010ba2:	fa13 f38a 	uxtah	r3, r3, sl
 8010ba6:	fb06 e202 	mla	r2, r6, r2, lr
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	9b00      	ldr	r3, [sp, #0]
 8010bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010bb2:	b292      	uxth	r2, r2
 8010bb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8010bc0:	4581      	cmp	r9, r0
 8010bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8010bca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010bce:	d2db      	bcs.n	8010b88 <quorem+0x44>
 8010bd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8010bd4:	b92b      	cbnz	r3, 8010be2 <quorem+0x9e>
 8010bd6:	9b01      	ldr	r3, [sp, #4]
 8010bd8:	3b04      	subs	r3, #4
 8010bda:	429d      	cmp	r5, r3
 8010bdc:	461a      	mov	r2, r3
 8010bde:	d32e      	bcc.n	8010c3e <quorem+0xfa>
 8010be0:	613c      	str	r4, [r7, #16]
 8010be2:	4638      	mov	r0, r7
 8010be4:	f001 fb1c 	bl	8012220 <__mcmp>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	db24      	blt.n	8010c36 <quorem+0xf2>
 8010bec:	3601      	adds	r6, #1
 8010bee:	4628      	mov	r0, r5
 8010bf0:	f04f 0c00 	mov.w	ip, #0
 8010bf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bf8:	f8d0 e000 	ldr.w	lr, [r0]
 8010bfc:	b293      	uxth	r3, r2
 8010bfe:	ebac 0303 	sub.w	r3, ip, r3
 8010c02:	0c12      	lsrs	r2, r2, #16
 8010c04:	fa13 f38e 	uxtah	r3, r3, lr
 8010c08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c16:	45c1      	cmp	r9, r8
 8010c18:	f840 3b04 	str.w	r3, [r0], #4
 8010c1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010c20:	d2e8      	bcs.n	8010bf4 <quorem+0xb0>
 8010c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c2a:	b922      	cbnz	r2, 8010c36 <quorem+0xf2>
 8010c2c:	3b04      	subs	r3, #4
 8010c2e:	429d      	cmp	r5, r3
 8010c30:	461a      	mov	r2, r3
 8010c32:	d30a      	bcc.n	8010c4a <quorem+0x106>
 8010c34:	613c      	str	r4, [r7, #16]
 8010c36:	4630      	mov	r0, r6
 8010c38:	b003      	add	sp, #12
 8010c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3e:	6812      	ldr	r2, [r2, #0]
 8010c40:	3b04      	subs	r3, #4
 8010c42:	2a00      	cmp	r2, #0
 8010c44:	d1cc      	bne.n	8010be0 <quorem+0x9c>
 8010c46:	3c01      	subs	r4, #1
 8010c48:	e7c7      	b.n	8010bda <quorem+0x96>
 8010c4a:	6812      	ldr	r2, [r2, #0]
 8010c4c:	3b04      	subs	r3, #4
 8010c4e:	2a00      	cmp	r2, #0
 8010c50:	d1f0      	bne.n	8010c34 <quorem+0xf0>
 8010c52:	3c01      	subs	r4, #1
 8010c54:	e7eb      	b.n	8010c2e <quorem+0xea>
 8010c56:	2000      	movs	r0, #0
 8010c58:	e7ee      	b.n	8010c38 <quorem+0xf4>
 8010c5a:	0000      	movs	r0, r0
 8010c5c:	0000      	movs	r0, r0
	...

08010c60 <_dtoa_r>:
 8010c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c64:	ed2d 8b04 	vpush	{d8-d9}
 8010c68:	ec57 6b10 	vmov	r6, r7, d0
 8010c6c:	b093      	sub	sp, #76	; 0x4c
 8010c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010c74:	9106      	str	r1, [sp, #24]
 8010c76:	ee10 aa10 	vmov	sl, s0
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c80:	46bb      	mov	fp, r7
 8010c82:	b975      	cbnz	r5, 8010ca2 <_dtoa_r+0x42>
 8010c84:	2010      	movs	r0, #16
 8010c86:	f7fe ff23 	bl	800fad0 <malloc>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8010c8e:	b920      	cbnz	r0, 8010c9a <_dtoa_r+0x3a>
 8010c90:	4ba7      	ldr	r3, [pc, #668]	; (8010f30 <_dtoa_r+0x2d0>)
 8010c92:	21ea      	movs	r1, #234	; 0xea
 8010c94:	48a7      	ldr	r0, [pc, #668]	; (8010f34 <_dtoa_r+0x2d4>)
 8010c96:	f7fe fec1 	bl	800fa1c <__assert_func>
 8010c9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c9e:	6005      	str	r5, [r0, #0]
 8010ca0:	60c5      	str	r5, [r0, #12]
 8010ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ca4:	6819      	ldr	r1, [r3, #0]
 8010ca6:	b151      	cbz	r1, 8010cbe <_dtoa_r+0x5e>
 8010ca8:	685a      	ldr	r2, [r3, #4]
 8010caa:	604a      	str	r2, [r1, #4]
 8010cac:	2301      	movs	r3, #1
 8010cae:	4093      	lsls	r3, r2
 8010cb0:	608b      	str	r3, [r1, #8]
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f001 f872 	bl	8011d9c <_Bfree>
 8010cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	1e3b      	subs	r3, r7, #0
 8010cc0:	bfaa      	itet	ge
 8010cc2:	2300      	movge	r3, #0
 8010cc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010cc8:	f8c8 3000 	strge.w	r3, [r8]
 8010ccc:	4b9a      	ldr	r3, [pc, #616]	; (8010f38 <_dtoa_r+0x2d8>)
 8010cce:	bfbc      	itt	lt
 8010cd0:	2201      	movlt	r2, #1
 8010cd2:	f8c8 2000 	strlt.w	r2, [r8]
 8010cd6:	ea33 030b 	bics.w	r3, r3, fp
 8010cda:	d11b      	bne.n	8010d14 <_dtoa_r+0xb4>
 8010cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cde:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ce2:	6013      	str	r3, [r2, #0]
 8010ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ce8:	4333      	orrs	r3, r6
 8010cea:	f000 8592 	beq.w	8011812 <_dtoa_r+0xbb2>
 8010cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cf0:	b963      	cbnz	r3, 8010d0c <_dtoa_r+0xac>
 8010cf2:	4b92      	ldr	r3, [pc, #584]	; (8010f3c <_dtoa_r+0x2dc>)
 8010cf4:	e022      	b.n	8010d3c <_dtoa_r+0xdc>
 8010cf6:	4b92      	ldr	r3, [pc, #584]	; (8010f40 <_dtoa_r+0x2e0>)
 8010cf8:	9301      	str	r3, [sp, #4]
 8010cfa:	3308      	adds	r3, #8
 8010cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	9801      	ldr	r0, [sp, #4]
 8010d02:	b013      	add	sp, #76	; 0x4c
 8010d04:	ecbd 8b04 	vpop	{d8-d9}
 8010d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0c:	4b8b      	ldr	r3, [pc, #556]	; (8010f3c <_dtoa_r+0x2dc>)
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	3303      	adds	r3, #3
 8010d12:	e7f3      	b.n	8010cfc <_dtoa_r+0x9c>
 8010d14:	2200      	movs	r2, #0
 8010d16:	2300      	movs	r3, #0
 8010d18:	4650      	mov	r0, sl
 8010d1a:	4659      	mov	r1, fp
 8010d1c:	f7ef fee4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d20:	ec4b ab19 	vmov	d9, sl, fp
 8010d24:	4680      	mov	r8, r0
 8010d26:	b158      	cbz	r0, 8010d40 <_dtoa_r+0xe0>
 8010d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 856b 	beq.w	801180c <_dtoa_r+0xbac>
 8010d36:	4883      	ldr	r0, [pc, #524]	; (8010f44 <_dtoa_r+0x2e4>)
 8010d38:	6018      	str	r0, [r3, #0]
 8010d3a:	1e43      	subs	r3, r0, #1
 8010d3c:	9301      	str	r3, [sp, #4]
 8010d3e:	e7df      	b.n	8010d00 <_dtoa_r+0xa0>
 8010d40:	ec4b ab10 	vmov	d0, sl, fp
 8010d44:	aa10      	add	r2, sp, #64	; 0x40
 8010d46:	a911      	add	r1, sp, #68	; 0x44
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f001 fb0f 	bl	801236c <__d2b>
 8010d4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010d52:	ee08 0a10 	vmov	s16, r0
 8010d56:	2d00      	cmp	r5, #0
 8010d58:	f000 8084 	beq.w	8010e64 <_dtoa_r+0x204>
 8010d5c:	ee19 3a90 	vmov	r3, s19
 8010d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010d68:	4656      	mov	r6, sl
 8010d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010d72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010d76:	4b74      	ldr	r3, [pc, #464]	; (8010f48 <_dtoa_r+0x2e8>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	4639      	mov	r1, r7
 8010d7e:	f7ef fa93 	bl	80002a8 <__aeabi_dsub>
 8010d82:	a365      	add	r3, pc, #404	; (adr r3, 8010f18 <_dtoa_r+0x2b8>)
 8010d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d88:	f7ef fc46 	bl	8000618 <__aeabi_dmul>
 8010d8c:	a364      	add	r3, pc, #400	; (adr r3, 8010f20 <_dtoa_r+0x2c0>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fa8b 	bl	80002ac <__adddf3>
 8010d96:	4606      	mov	r6, r0
 8010d98:	4628      	mov	r0, r5
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	f7ef fbd2 	bl	8000544 <__aeabi_i2d>
 8010da0:	a361      	add	r3, pc, #388	; (adr r3, 8010f28 <_dtoa_r+0x2c8>)
 8010da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da6:	f7ef fc37 	bl	8000618 <__aeabi_dmul>
 8010daa:	4602      	mov	r2, r0
 8010dac:	460b      	mov	r3, r1
 8010dae:	4630      	mov	r0, r6
 8010db0:	4639      	mov	r1, r7
 8010db2:	f7ef fa7b 	bl	80002ac <__adddf3>
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	f7ef fedd 	bl	8000b78 <__aeabi_d2iz>
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	9000      	str	r0, [sp, #0]
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	4639      	mov	r1, r7
 8010dc8:	f7ef fe98 	bl	8000afc <__aeabi_dcmplt>
 8010dcc:	b150      	cbz	r0, 8010de4 <_dtoa_r+0x184>
 8010dce:	9800      	ldr	r0, [sp, #0]
 8010dd0:	f7ef fbb8 	bl	8000544 <__aeabi_i2d>
 8010dd4:	4632      	mov	r2, r6
 8010dd6:	463b      	mov	r3, r7
 8010dd8:	f7ef fe86 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ddc:	b910      	cbnz	r0, 8010de4 <_dtoa_r+0x184>
 8010dde:	9b00      	ldr	r3, [sp, #0]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	9b00      	ldr	r3, [sp, #0]
 8010de6:	2b16      	cmp	r3, #22
 8010de8:	d85a      	bhi.n	8010ea0 <_dtoa_r+0x240>
 8010dea:	9a00      	ldr	r2, [sp, #0]
 8010dec:	4b57      	ldr	r3, [pc, #348]	; (8010f4c <_dtoa_r+0x2ec>)
 8010dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	ec51 0b19 	vmov	r0, r1, d9
 8010dfa:	f7ef fe7f 	bl	8000afc <__aeabi_dcmplt>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d050      	beq.n	8010ea4 <_dtoa_r+0x244>
 8010e02:	9b00      	ldr	r3, [sp, #0]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e0e:	1b5d      	subs	r5, r3, r5
 8010e10:	1e6b      	subs	r3, r5, #1
 8010e12:	9305      	str	r3, [sp, #20]
 8010e14:	bf45      	ittet	mi
 8010e16:	f1c5 0301 	rsbmi	r3, r5, #1
 8010e1a:	9304      	strmi	r3, [sp, #16]
 8010e1c:	2300      	movpl	r3, #0
 8010e1e:	2300      	movmi	r3, #0
 8010e20:	bf4c      	ite	mi
 8010e22:	9305      	strmi	r3, [sp, #20]
 8010e24:	9304      	strpl	r3, [sp, #16]
 8010e26:	9b00      	ldr	r3, [sp, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	db3d      	blt.n	8010ea8 <_dtoa_r+0x248>
 8010e2c:	9b05      	ldr	r3, [sp, #20]
 8010e2e:	9a00      	ldr	r2, [sp, #0]
 8010e30:	920a      	str	r2, [sp, #40]	; 0x28
 8010e32:	4413      	add	r3, r2
 8010e34:	9305      	str	r3, [sp, #20]
 8010e36:	2300      	movs	r3, #0
 8010e38:	9307      	str	r3, [sp, #28]
 8010e3a:	9b06      	ldr	r3, [sp, #24]
 8010e3c:	2b09      	cmp	r3, #9
 8010e3e:	f200 8089 	bhi.w	8010f54 <_dtoa_r+0x2f4>
 8010e42:	2b05      	cmp	r3, #5
 8010e44:	bfc4      	itt	gt
 8010e46:	3b04      	subgt	r3, #4
 8010e48:	9306      	strgt	r3, [sp, #24]
 8010e4a:	9b06      	ldr	r3, [sp, #24]
 8010e4c:	f1a3 0302 	sub.w	r3, r3, #2
 8010e50:	bfcc      	ite	gt
 8010e52:	2500      	movgt	r5, #0
 8010e54:	2501      	movle	r5, #1
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	f200 8087 	bhi.w	8010f6a <_dtoa_r+0x30a>
 8010e5c:	e8df f003 	tbb	[pc, r3]
 8010e60:	59383a2d 	.word	0x59383a2d
 8010e64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e68:	441d      	add	r5, r3
 8010e6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e6e:	2b20      	cmp	r3, #32
 8010e70:	bfc1      	itttt	gt
 8010e72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010e76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010e7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010e82:	bfda      	itte	le
 8010e84:	f1c3 0320 	rsble	r3, r3, #32
 8010e88:	fa06 f003 	lslle.w	r0, r6, r3
 8010e8c:	4318      	orrgt	r0, r3
 8010e8e:	f7ef fb49 	bl	8000524 <__aeabi_ui2d>
 8010e92:	2301      	movs	r3, #1
 8010e94:	4606      	mov	r6, r0
 8010e96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010e9a:	3d01      	subs	r5, #1
 8010e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e9e:	e76a      	b.n	8010d76 <_dtoa_r+0x116>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e7b2      	b.n	8010e0a <_dtoa_r+0x1aa>
 8010ea4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010ea6:	e7b1      	b.n	8010e0c <_dtoa_r+0x1ac>
 8010ea8:	9b04      	ldr	r3, [sp, #16]
 8010eaa:	9a00      	ldr	r2, [sp, #0]
 8010eac:	1a9b      	subs	r3, r3, r2
 8010eae:	9304      	str	r3, [sp, #16]
 8010eb0:	4253      	negs	r3, r2
 8010eb2:	9307      	str	r3, [sp, #28]
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8010eb8:	e7bf      	b.n	8010e3a <_dtoa_r+0x1da>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	9308      	str	r3, [sp, #32]
 8010ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	dc55      	bgt.n	8010f70 <_dtoa_r+0x310>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010eca:	461a      	mov	r2, r3
 8010ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8010ece:	e00c      	b.n	8010eea <_dtoa_r+0x28a>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e7f3      	b.n	8010ebc <_dtoa_r+0x25c>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ed8:	9308      	str	r3, [sp, #32]
 8010eda:	9b00      	ldr	r3, [sp, #0]
 8010edc:	4413      	add	r3, r2
 8010ede:	9302      	str	r3, [sp, #8]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	9303      	str	r3, [sp, #12]
 8010ee6:	bfb8      	it	lt
 8010ee8:	2301      	movlt	r3, #1
 8010eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010eec:	2200      	movs	r2, #0
 8010eee:	6042      	str	r2, [r0, #4]
 8010ef0:	2204      	movs	r2, #4
 8010ef2:	f102 0614 	add.w	r6, r2, #20
 8010ef6:	429e      	cmp	r6, r3
 8010ef8:	6841      	ldr	r1, [r0, #4]
 8010efa:	d93d      	bls.n	8010f78 <_dtoa_r+0x318>
 8010efc:	4620      	mov	r0, r4
 8010efe:	f000 ff0d 	bl	8011d1c <_Balloc>
 8010f02:	9001      	str	r0, [sp, #4]
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d13b      	bne.n	8010f80 <_dtoa_r+0x320>
 8010f08:	4b11      	ldr	r3, [pc, #68]	; (8010f50 <_dtoa_r+0x2f0>)
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f10:	e6c0      	b.n	8010c94 <_dtoa_r+0x34>
 8010f12:	2301      	movs	r3, #1
 8010f14:	e7df      	b.n	8010ed6 <_dtoa_r+0x276>
 8010f16:	bf00      	nop
 8010f18:	636f4361 	.word	0x636f4361
 8010f1c:	3fd287a7 	.word	0x3fd287a7
 8010f20:	8b60c8b3 	.word	0x8b60c8b3
 8010f24:	3fc68a28 	.word	0x3fc68a28
 8010f28:	509f79fb 	.word	0x509f79fb
 8010f2c:	3fd34413 	.word	0x3fd34413
 8010f30:	0802e82b 	.word	0x0802e82b
 8010f34:	0802e842 	.word	0x0802e842
 8010f38:	7ff00000 	.word	0x7ff00000
 8010f3c:	0802e827 	.word	0x0802e827
 8010f40:	0802e81e 	.word	0x0802e81e
 8010f44:	0802e6fa 	.word	0x0802e6fa
 8010f48:	3ff80000 	.word	0x3ff80000
 8010f4c:	0802e9a0 	.word	0x0802e9a0
 8010f50:	0802e89d 	.word	0x0802e89d
 8010f54:	2501      	movs	r5, #1
 8010f56:	2300      	movs	r3, #0
 8010f58:	9306      	str	r3, [sp, #24]
 8010f5a:	9508      	str	r5, [sp, #32]
 8010f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f64:	2200      	movs	r2, #0
 8010f66:	2312      	movs	r3, #18
 8010f68:	e7b0      	b.n	8010ecc <_dtoa_r+0x26c>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	9308      	str	r3, [sp, #32]
 8010f6e:	e7f5      	b.n	8010f5c <_dtoa_r+0x2fc>
 8010f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f76:	e7b8      	b.n	8010eea <_dtoa_r+0x28a>
 8010f78:	3101      	adds	r1, #1
 8010f7a:	6041      	str	r1, [r0, #4]
 8010f7c:	0052      	lsls	r2, r2, #1
 8010f7e:	e7b8      	b.n	8010ef2 <_dtoa_r+0x292>
 8010f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f82:	9a01      	ldr	r2, [sp, #4]
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	9b03      	ldr	r3, [sp, #12]
 8010f88:	2b0e      	cmp	r3, #14
 8010f8a:	f200 809d 	bhi.w	80110c8 <_dtoa_r+0x468>
 8010f8e:	2d00      	cmp	r5, #0
 8010f90:	f000 809a 	beq.w	80110c8 <_dtoa_r+0x468>
 8010f94:	9b00      	ldr	r3, [sp, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	dd32      	ble.n	8011000 <_dtoa_r+0x3a0>
 8010f9a:	4ab7      	ldr	r2, [pc, #732]	; (8011278 <_dtoa_r+0x618>)
 8010f9c:	f003 030f 	and.w	r3, r3, #15
 8010fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fa8:	9b00      	ldr	r3, [sp, #0]
 8010faa:	05d8      	lsls	r0, r3, #23
 8010fac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010fb0:	d516      	bpl.n	8010fe0 <_dtoa_r+0x380>
 8010fb2:	4bb2      	ldr	r3, [pc, #712]	; (801127c <_dtoa_r+0x61c>)
 8010fb4:	ec51 0b19 	vmov	r0, r1, d9
 8010fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fbc:	f7ef fc56 	bl	800086c <__aeabi_ddiv>
 8010fc0:	f007 070f 	and.w	r7, r7, #15
 8010fc4:	4682      	mov	sl, r0
 8010fc6:	468b      	mov	fp, r1
 8010fc8:	2503      	movs	r5, #3
 8010fca:	4eac      	ldr	r6, [pc, #688]	; (801127c <_dtoa_r+0x61c>)
 8010fcc:	b957      	cbnz	r7, 8010fe4 <_dtoa_r+0x384>
 8010fce:	4642      	mov	r2, r8
 8010fd0:	464b      	mov	r3, r9
 8010fd2:	4650      	mov	r0, sl
 8010fd4:	4659      	mov	r1, fp
 8010fd6:	f7ef fc49 	bl	800086c <__aeabi_ddiv>
 8010fda:	4682      	mov	sl, r0
 8010fdc:	468b      	mov	fp, r1
 8010fde:	e028      	b.n	8011032 <_dtoa_r+0x3d2>
 8010fe0:	2502      	movs	r5, #2
 8010fe2:	e7f2      	b.n	8010fca <_dtoa_r+0x36a>
 8010fe4:	07f9      	lsls	r1, r7, #31
 8010fe6:	d508      	bpl.n	8010ffa <_dtoa_r+0x39a>
 8010fe8:	4640      	mov	r0, r8
 8010fea:	4649      	mov	r1, r9
 8010fec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ff0:	f7ef fb12 	bl	8000618 <__aeabi_dmul>
 8010ff4:	3501      	adds	r5, #1
 8010ff6:	4680      	mov	r8, r0
 8010ff8:	4689      	mov	r9, r1
 8010ffa:	107f      	asrs	r7, r7, #1
 8010ffc:	3608      	adds	r6, #8
 8010ffe:	e7e5      	b.n	8010fcc <_dtoa_r+0x36c>
 8011000:	f000 809b 	beq.w	801113a <_dtoa_r+0x4da>
 8011004:	9b00      	ldr	r3, [sp, #0]
 8011006:	4f9d      	ldr	r7, [pc, #628]	; (801127c <_dtoa_r+0x61c>)
 8011008:	425e      	negs	r6, r3
 801100a:	4b9b      	ldr	r3, [pc, #620]	; (8011278 <_dtoa_r+0x618>)
 801100c:	f006 020f 	and.w	r2, r6, #15
 8011010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	ec51 0b19 	vmov	r0, r1, d9
 801101c:	f7ef fafc 	bl	8000618 <__aeabi_dmul>
 8011020:	1136      	asrs	r6, r6, #4
 8011022:	4682      	mov	sl, r0
 8011024:	468b      	mov	fp, r1
 8011026:	2300      	movs	r3, #0
 8011028:	2502      	movs	r5, #2
 801102a:	2e00      	cmp	r6, #0
 801102c:	d17a      	bne.n	8011124 <_dtoa_r+0x4c4>
 801102e:	2b00      	cmp	r3, #0
 8011030:	d1d3      	bne.n	8010fda <_dtoa_r+0x37a>
 8011032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011034:	2b00      	cmp	r3, #0
 8011036:	f000 8082 	beq.w	801113e <_dtoa_r+0x4de>
 801103a:	4b91      	ldr	r3, [pc, #580]	; (8011280 <_dtoa_r+0x620>)
 801103c:	2200      	movs	r2, #0
 801103e:	4650      	mov	r0, sl
 8011040:	4659      	mov	r1, fp
 8011042:	f7ef fd5b 	bl	8000afc <__aeabi_dcmplt>
 8011046:	2800      	cmp	r0, #0
 8011048:	d079      	beq.n	801113e <_dtoa_r+0x4de>
 801104a:	9b03      	ldr	r3, [sp, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d076      	beq.n	801113e <_dtoa_r+0x4de>
 8011050:	9b02      	ldr	r3, [sp, #8]
 8011052:	2b00      	cmp	r3, #0
 8011054:	dd36      	ble.n	80110c4 <_dtoa_r+0x464>
 8011056:	9b00      	ldr	r3, [sp, #0]
 8011058:	4650      	mov	r0, sl
 801105a:	4659      	mov	r1, fp
 801105c:	1e5f      	subs	r7, r3, #1
 801105e:	2200      	movs	r2, #0
 8011060:	4b88      	ldr	r3, [pc, #544]	; (8011284 <_dtoa_r+0x624>)
 8011062:	f7ef fad9 	bl	8000618 <__aeabi_dmul>
 8011066:	9e02      	ldr	r6, [sp, #8]
 8011068:	4682      	mov	sl, r0
 801106a:	468b      	mov	fp, r1
 801106c:	3501      	adds	r5, #1
 801106e:	4628      	mov	r0, r5
 8011070:	f7ef fa68 	bl	8000544 <__aeabi_i2d>
 8011074:	4652      	mov	r2, sl
 8011076:	465b      	mov	r3, fp
 8011078:	f7ef face 	bl	8000618 <__aeabi_dmul>
 801107c:	4b82      	ldr	r3, [pc, #520]	; (8011288 <_dtoa_r+0x628>)
 801107e:	2200      	movs	r2, #0
 8011080:	f7ef f914 	bl	80002ac <__adddf3>
 8011084:	46d0      	mov	r8, sl
 8011086:	46d9      	mov	r9, fp
 8011088:	4682      	mov	sl, r0
 801108a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801108e:	2e00      	cmp	r6, #0
 8011090:	d158      	bne.n	8011144 <_dtoa_r+0x4e4>
 8011092:	4b7e      	ldr	r3, [pc, #504]	; (801128c <_dtoa_r+0x62c>)
 8011094:	2200      	movs	r2, #0
 8011096:	4640      	mov	r0, r8
 8011098:	4649      	mov	r1, r9
 801109a:	f7ef f905 	bl	80002a8 <__aeabi_dsub>
 801109e:	4652      	mov	r2, sl
 80110a0:	465b      	mov	r3, fp
 80110a2:	4680      	mov	r8, r0
 80110a4:	4689      	mov	r9, r1
 80110a6:	f7ef fd47 	bl	8000b38 <__aeabi_dcmpgt>
 80110aa:	2800      	cmp	r0, #0
 80110ac:	f040 8295 	bne.w	80115da <_dtoa_r+0x97a>
 80110b0:	4652      	mov	r2, sl
 80110b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80110b6:	4640      	mov	r0, r8
 80110b8:	4649      	mov	r1, r9
 80110ba:	f7ef fd1f 	bl	8000afc <__aeabi_dcmplt>
 80110be:	2800      	cmp	r0, #0
 80110c0:	f040 8289 	bne.w	80115d6 <_dtoa_r+0x976>
 80110c4:	ec5b ab19 	vmov	sl, fp, d9
 80110c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f2c0 8148 	blt.w	8011360 <_dtoa_r+0x700>
 80110d0:	9a00      	ldr	r2, [sp, #0]
 80110d2:	2a0e      	cmp	r2, #14
 80110d4:	f300 8144 	bgt.w	8011360 <_dtoa_r+0x700>
 80110d8:	4b67      	ldr	r3, [pc, #412]	; (8011278 <_dtoa_r+0x618>)
 80110da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f280 80d5 	bge.w	8011294 <_dtoa_r+0x634>
 80110ea:	9b03      	ldr	r3, [sp, #12]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f300 80d1 	bgt.w	8011294 <_dtoa_r+0x634>
 80110f2:	f040 826f 	bne.w	80115d4 <_dtoa_r+0x974>
 80110f6:	4b65      	ldr	r3, [pc, #404]	; (801128c <_dtoa_r+0x62c>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	4640      	mov	r0, r8
 80110fc:	4649      	mov	r1, r9
 80110fe:	f7ef fa8b 	bl	8000618 <__aeabi_dmul>
 8011102:	4652      	mov	r2, sl
 8011104:	465b      	mov	r3, fp
 8011106:	f7ef fd0d 	bl	8000b24 <__aeabi_dcmpge>
 801110a:	9e03      	ldr	r6, [sp, #12]
 801110c:	4637      	mov	r7, r6
 801110e:	2800      	cmp	r0, #0
 8011110:	f040 8245 	bne.w	801159e <_dtoa_r+0x93e>
 8011114:	9d01      	ldr	r5, [sp, #4]
 8011116:	2331      	movs	r3, #49	; 0x31
 8011118:	f805 3b01 	strb.w	r3, [r5], #1
 801111c:	9b00      	ldr	r3, [sp, #0]
 801111e:	3301      	adds	r3, #1
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	e240      	b.n	80115a6 <_dtoa_r+0x946>
 8011124:	07f2      	lsls	r2, r6, #31
 8011126:	d505      	bpl.n	8011134 <_dtoa_r+0x4d4>
 8011128:	e9d7 2300 	ldrd	r2, r3, [r7]
 801112c:	f7ef fa74 	bl	8000618 <__aeabi_dmul>
 8011130:	3501      	adds	r5, #1
 8011132:	2301      	movs	r3, #1
 8011134:	1076      	asrs	r6, r6, #1
 8011136:	3708      	adds	r7, #8
 8011138:	e777      	b.n	801102a <_dtoa_r+0x3ca>
 801113a:	2502      	movs	r5, #2
 801113c:	e779      	b.n	8011032 <_dtoa_r+0x3d2>
 801113e:	9f00      	ldr	r7, [sp, #0]
 8011140:	9e03      	ldr	r6, [sp, #12]
 8011142:	e794      	b.n	801106e <_dtoa_r+0x40e>
 8011144:	9901      	ldr	r1, [sp, #4]
 8011146:	4b4c      	ldr	r3, [pc, #304]	; (8011278 <_dtoa_r+0x618>)
 8011148:	4431      	add	r1, r6
 801114a:	910d      	str	r1, [sp, #52]	; 0x34
 801114c:	9908      	ldr	r1, [sp, #32]
 801114e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011156:	2900      	cmp	r1, #0
 8011158:	d043      	beq.n	80111e2 <_dtoa_r+0x582>
 801115a:	494d      	ldr	r1, [pc, #308]	; (8011290 <_dtoa_r+0x630>)
 801115c:	2000      	movs	r0, #0
 801115e:	f7ef fb85 	bl	800086c <__aeabi_ddiv>
 8011162:	4652      	mov	r2, sl
 8011164:	465b      	mov	r3, fp
 8011166:	f7ef f89f 	bl	80002a8 <__aeabi_dsub>
 801116a:	9d01      	ldr	r5, [sp, #4]
 801116c:	4682      	mov	sl, r0
 801116e:	468b      	mov	fp, r1
 8011170:	4649      	mov	r1, r9
 8011172:	4640      	mov	r0, r8
 8011174:	f7ef fd00 	bl	8000b78 <__aeabi_d2iz>
 8011178:	4606      	mov	r6, r0
 801117a:	f7ef f9e3 	bl	8000544 <__aeabi_i2d>
 801117e:	4602      	mov	r2, r0
 8011180:	460b      	mov	r3, r1
 8011182:	4640      	mov	r0, r8
 8011184:	4649      	mov	r1, r9
 8011186:	f7ef f88f 	bl	80002a8 <__aeabi_dsub>
 801118a:	3630      	adds	r6, #48	; 0x30
 801118c:	f805 6b01 	strb.w	r6, [r5], #1
 8011190:	4652      	mov	r2, sl
 8011192:	465b      	mov	r3, fp
 8011194:	4680      	mov	r8, r0
 8011196:	4689      	mov	r9, r1
 8011198:	f7ef fcb0 	bl	8000afc <__aeabi_dcmplt>
 801119c:	2800      	cmp	r0, #0
 801119e:	d163      	bne.n	8011268 <_dtoa_r+0x608>
 80111a0:	4642      	mov	r2, r8
 80111a2:	464b      	mov	r3, r9
 80111a4:	4936      	ldr	r1, [pc, #216]	; (8011280 <_dtoa_r+0x620>)
 80111a6:	2000      	movs	r0, #0
 80111a8:	f7ef f87e 	bl	80002a8 <__aeabi_dsub>
 80111ac:	4652      	mov	r2, sl
 80111ae:	465b      	mov	r3, fp
 80111b0:	f7ef fca4 	bl	8000afc <__aeabi_dcmplt>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	f040 80b5 	bne.w	8011324 <_dtoa_r+0x6c4>
 80111ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111bc:	429d      	cmp	r5, r3
 80111be:	d081      	beq.n	80110c4 <_dtoa_r+0x464>
 80111c0:	4b30      	ldr	r3, [pc, #192]	; (8011284 <_dtoa_r+0x624>)
 80111c2:	2200      	movs	r2, #0
 80111c4:	4650      	mov	r0, sl
 80111c6:	4659      	mov	r1, fp
 80111c8:	f7ef fa26 	bl	8000618 <__aeabi_dmul>
 80111cc:	4b2d      	ldr	r3, [pc, #180]	; (8011284 <_dtoa_r+0x624>)
 80111ce:	4682      	mov	sl, r0
 80111d0:	468b      	mov	fp, r1
 80111d2:	4640      	mov	r0, r8
 80111d4:	4649      	mov	r1, r9
 80111d6:	2200      	movs	r2, #0
 80111d8:	f7ef fa1e 	bl	8000618 <__aeabi_dmul>
 80111dc:	4680      	mov	r8, r0
 80111de:	4689      	mov	r9, r1
 80111e0:	e7c6      	b.n	8011170 <_dtoa_r+0x510>
 80111e2:	4650      	mov	r0, sl
 80111e4:	4659      	mov	r1, fp
 80111e6:	f7ef fa17 	bl	8000618 <__aeabi_dmul>
 80111ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111ec:	9d01      	ldr	r5, [sp, #4]
 80111ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80111f0:	4682      	mov	sl, r0
 80111f2:	468b      	mov	fp, r1
 80111f4:	4649      	mov	r1, r9
 80111f6:	4640      	mov	r0, r8
 80111f8:	f7ef fcbe 	bl	8000b78 <__aeabi_d2iz>
 80111fc:	4606      	mov	r6, r0
 80111fe:	f7ef f9a1 	bl	8000544 <__aeabi_i2d>
 8011202:	3630      	adds	r6, #48	; 0x30
 8011204:	4602      	mov	r2, r0
 8011206:	460b      	mov	r3, r1
 8011208:	4640      	mov	r0, r8
 801120a:	4649      	mov	r1, r9
 801120c:	f7ef f84c 	bl	80002a8 <__aeabi_dsub>
 8011210:	f805 6b01 	strb.w	r6, [r5], #1
 8011214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011216:	429d      	cmp	r5, r3
 8011218:	4680      	mov	r8, r0
 801121a:	4689      	mov	r9, r1
 801121c:	f04f 0200 	mov.w	r2, #0
 8011220:	d124      	bne.n	801126c <_dtoa_r+0x60c>
 8011222:	4b1b      	ldr	r3, [pc, #108]	; (8011290 <_dtoa_r+0x630>)
 8011224:	4650      	mov	r0, sl
 8011226:	4659      	mov	r1, fp
 8011228:	f7ef f840 	bl	80002ac <__adddf3>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	4640      	mov	r0, r8
 8011232:	4649      	mov	r1, r9
 8011234:	f7ef fc80 	bl	8000b38 <__aeabi_dcmpgt>
 8011238:	2800      	cmp	r0, #0
 801123a:	d173      	bne.n	8011324 <_dtoa_r+0x6c4>
 801123c:	4652      	mov	r2, sl
 801123e:	465b      	mov	r3, fp
 8011240:	4913      	ldr	r1, [pc, #76]	; (8011290 <_dtoa_r+0x630>)
 8011242:	2000      	movs	r0, #0
 8011244:	f7ef f830 	bl	80002a8 <__aeabi_dsub>
 8011248:	4602      	mov	r2, r0
 801124a:	460b      	mov	r3, r1
 801124c:	4640      	mov	r0, r8
 801124e:	4649      	mov	r1, r9
 8011250:	f7ef fc54 	bl	8000afc <__aeabi_dcmplt>
 8011254:	2800      	cmp	r0, #0
 8011256:	f43f af35 	beq.w	80110c4 <_dtoa_r+0x464>
 801125a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801125c:	1e6b      	subs	r3, r5, #1
 801125e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011264:	2b30      	cmp	r3, #48	; 0x30
 8011266:	d0f8      	beq.n	801125a <_dtoa_r+0x5fa>
 8011268:	9700      	str	r7, [sp, #0]
 801126a:	e049      	b.n	8011300 <_dtoa_r+0x6a0>
 801126c:	4b05      	ldr	r3, [pc, #20]	; (8011284 <_dtoa_r+0x624>)
 801126e:	f7ef f9d3 	bl	8000618 <__aeabi_dmul>
 8011272:	4680      	mov	r8, r0
 8011274:	4689      	mov	r9, r1
 8011276:	e7bd      	b.n	80111f4 <_dtoa_r+0x594>
 8011278:	0802e9a0 	.word	0x0802e9a0
 801127c:	0802e978 	.word	0x0802e978
 8011280:	3ff00000 	.word	0x3ff00000
 8011284:	40240000 	.word	0x40240000
 8011288:	401c0000 	.word	0x401c0000
 801128c:	40140000 	.word	0x40140000
 8011290:	3fe00000 	.word	0x3fe00000
 8011294:	9d01      	ldr	r5, [sp, #4]
 8011296:	4656      	mov	r6, sl
 8011298:	465f      	mov	r7, fp
 801129a:	4642      	mov	r2, r8
 801129c:	464b      	mov	r3, r9
 801129e:	4630      	mov	r0, r6
 80112a0:	4639      	mov	r1, r7
 80112a2:	f7ef fae3 	bl	800086c <__aeabi_ddiv>
 80112a6:	f7ef fc67 	bl	8000b78 <__aeabi_d2iz>
 80112aa:	4682      	mov	sl, r0
 80112ac:	f7ef f94a 	bl	8000544 <__aeabi_i2d>
 80112b0:	4642      	mov	r2, r8
 80112b2:	464b      	mov	r3, r9
 80112b4:	f7ef f9b0 	bl	8000618 <__aeabi_dmul>
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	4630      	mov	r0, r6
 80112be:	4639      	mov	r1, r7
 80112c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80112c4:	f7ee fff0 	bl	80002a8 <__aeabi_dsub>
 80112c8:	f805 6b01 	strb.w	r6, [r5], #1
 80112cc:	9e01      	ldr	r6, [sp, #4]
 80112ce:	9f03      	ldr	r7, [sp, #12]
 80112d0:	1bae      	subs	r6, r5, r6
 80112d2:	42b7      	cmp	r7, r6
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	d135      	bne.n	8011346 <_dtoa_r+0x6e6>
 80112da:	f7ee ffe7 	bl	80002ac <__adddf3>
 80112de:	4642      	mov	r2, r8
 80112e0:	464b      	mov	r3, r9
 80112e2:	4606      	mov	r6, r0
 80112e4:	460f      	mov	r7, r1
 80112e6:	f7ef fc27 	bl	8000b38 <__aeabi_dcmpgt>
 80112ea:	b9d0      	cbnz	r0, 8011322 <_dtoa_r+0x6c2>
 80112ec:	4642      	mov	r2, r8
 80112ee:	464b      	mov	r3, r9
 80112f0:	4630      	mov	r0, r6
 80112f2:	4639      	mov	r1, r7
 80112f4:	f7ef fbf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80112f8:	b110      	cbz	r0, 8011300 <_dtoa_r+0x6a0>
 80112fa:	f01a 0f01 	tst.w	sl, #1
 80112fe:	d110      	bne.n	8011322 <_dtoa_r+0x6c2>
 8011300:	4620      	mov	r0, r4
 8011302:	ee18 1a10 	vmov	r1, s16
 8011306:	f000 fd49 	bl	8011d9c <_Bfree>
 801130a:	2300      	movs	r3, #0
 801130c:	9800      	ldr	r0, [sp, #0]
 801130e:	702b      	strb	r3, [r5, #0]
 8011310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011312:	3001      	adds	r0, #1
 8011314:	6018      	str	r0, [r3, #0]
 8011316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011318:	2b00      	cmp	r3, #0
 801131a:	f43f acf1 	beq.w	8010d00 <_dtoa_r+0xa0>
 801131e:	601d      	str	r5, [r3, #0]
 8011320:	e4ee      	b.n	8010d00 <_dtoa_r+0xa0>
 8011322:	9f00      	ldr	r7, [sp, #0]
 8011324:	462b      	mov	r3, r5
 8011326:	461d      	mov	r5, r3
 8011328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801132c:	2a39      	cmp	r2, #57	; 0x39
 801132e:	d106      	bne.n	801133e <_dtoa_r+0x6de>
 8011330:	9a01      	ldr	r2, [sp, #4]
 8011332:	429a      	cmp	r2, r3
 8011334:	d1f7      	bne.n	8011326 <_dtoa_r+0x6c6>
 8011336:	9901      	ldr	r1, [sp, #4]
 8011338:	2230      	movs	r2, #48	; 0x30
 801133a:	3701      	adds	r7, #1
 801133c:	700a      	strb	r2, [r1, #0]
 801133e:	781a      	ldrb	r2, [r3, #0]
 8011340:	3201      	adds	r2, #1
 8011342:	701a      	strb	r2, [r3, #0]
 8011344:	e790      	b.n	8011268 <_dtoa_r+0x608>
 8011346:	4ba6      	ldr	r3, [pc, #664]	; (80115e0 <_dtoa_r+0x980>)
 8011348:	2200      	movs	r2, #0
 801134a:	f7ef f965 	bl	8000618 <__aeabi_dmul>
 801134e:	2200      	movs	r2, #0
 8011350:	2300      	movs	r3, #0
 8011352:	4606      	mov	r6, r0
 8011354:	460f      	mov	r7, r1
 8011356:	f7ef fbc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801135a:	2800      	cmp	r0, #0
 801135c:	d09d      	beq.n	801129a <_dtoa_r+0x63a>
 801135e:	e7cf      	b.n	8011300 <_dtoa_r+0x6a0>
 8011360:	9a08      	ldr	r2, [sp, #32]
 8011362:	2a00      	cmp	r2, #0
 8011364:	f000 80d7 	beq.w	8011516 <_dtoa_r+0x8b6>
 8011368:	9a06      	ldr	r2, [sp, #24]
 801136a:	2a01      	cmp	r2, #1
 801136c:	f300 80ba 	bgt.w	80114e4 <_dtoa_r+0x884>
 8011370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011372:	2a00      	cmp	r2, #0
 8011374:	f000 80b2 	beq.w	80114dc <_dtoa_r+0x87c>
 8011378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801137c:	9e07      	ldr	r6, [sp, #28]
 801137e:	9d04      	ldr	r5, [sp, #16]
 8011380:	9a04      	ldr	r2, [sp, #16]
 8011382:	441a      	add	r2, r3
 8011384:	9204      	str	r2, [sp, #16]
 8011386:	9a05      	ldr	r2, [sp, #20]
 8011388:	2101      	movs	r1, #1
 801138a:	441a      	add	r2, r3
 801138c:	4620      	mov	r0, r4
 801138e:	9205      	str	r2, [sp, #20]
 8011390:	f000 fdbc 	bl	8011f0c <__i2b>
 8011394:	4607      	mov	r7, r0
 8011396:	2d00      	cmp	r5, #0
 8011398:	dd0c      	ble.n	80113b4 <_dtoa_r+0x754>
 801139a:	9b05      	ldr	r3, [sp, #20]
 801139c:	2b00      	cmp	r3, #0
 801139e:	dd09      	ble.n	80113b4 <_dtoa_r+0x754>
 80113a0:	42ab      	cmp	r3, r5
 80113a2:	9a04      	ldr	r2, [sp, #16]
 80113a4:	bfa8      	it	ge
 80113a6:	462b      	movge	r3, r5
 80113a8:	1ad2      	subs	r2, r2, r3
 80113aa:	9204      	str	r2, [sp, #16]
 80113ac:	9a05      	ldr	r2, [sp, #20]
 80113ae:	1aed      	subs	r5, r5, r3
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	9b07      	ldr	r3, [sp, #28]
 80113b6:	b31b      	cbz	r3, 8011400 <_dtoa_r+0x7a0>
 80113b8:	9b08      	ldr	r3, [sp, #32]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	f000 80af 	beq.w	801151e <_dtoa_r+0x8be>
 80113c0:	2e00      	cmp	r6, #0
 80113c2:	dd13      	ble.n	80113ec <_dtoa_r+0x78c>
 80113c4:	4639      	mov	r1, r7
 80113c6:	4632      	mov	r2, r6
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 fe5f 	bl	801208c <__pow5mult>
 80113ce:	ee18 2a10 	vmov	r2, s16
 80113d2:	4601      	mov	r1, r0
 80113d4:	4607      	mov	r7, r0
 80113d6:	4620      	mov	r0, r4
 80113d8:	f000 fdae 	bl	8011f38 <__multiply>
 80113dc:	ee18 1a10 	vmov	r1, s16
 80113e0:	4680      	mov	r8, r0
 80113e2:	4620      	mov	r0, r4
 80113e4:	f000 fcda 	bl	8011d9c <_Bfree>
 80113e8:	ee08 8a10 	vmov	s16, r8
 80113ec:	9b07      	ldr	r3, [sp, #28]
 80113ee:	1b9a      	subs	r2, r3, r6
 80113f0:	d006      	beq.n	8011400 <_dtoa_r+0x7a0>
 80113f2:	ee18 1a10 	vmov	r1, s16
 80113f6:	4620      	mov	r0, r4
 80113f8:	f000 fe48 	bl	801208c <__pow5mult>
 80113fc:	ee08 0a10 	vmov	s16, r0
 8011400:	2101      	movs	r1, #1
 8011402:	4620      	mov	r0, r4
 8011404:	f000 fd82 	bl	8011f0c <__i2b>
 8011408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801140a:	2b00      	cmp	r3, #0
 801140c:	4606      	mov	r6, r0
 801140e:	f340 8088 	ble.w	8011522 <_dtoa_r+0x8c2>
 8011412:	461a      	mov	r2, r3
 8011414:	4601      	mov	r1, r0
 8011416:	4620      	mov	r0, r4
 8011418:	f000 fe38 	bl	801208c <__pow5mult>
 801141c:	9b06      	ldr	r3, [sp, #24]
 801141e:	2b01      	cmp	r3, #1
 8011420:	4606      	mov	r6, r0
 8011422:	f340 8081 	ble.w	8011528 <_dtoa_r+0x8c8>
 8011426:	f04f 0800 	mov.w	r8, #0
 801142a:	6933      	ldr	r3, [r6, #16]
 801142c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011430:	6918      	ldr	r0, [r3, #16]
 8011432:	f000 fd1b 	bl	8011e6c <__hi0bits>
 8011436:	f1c0 0020 	rsb	r0, r0, #32
 801143a:	9b05      	ldr	r3, [sp, #20]
 801143c:	4418      	add	r0, r3
 801143e:	f010 001f 	ands.w	r0, r0, #31
 8011442:	f000 8092 	beq.w	801156a <_dtoa_r+0x90a>
 8011446:	f1c0 0320 	rsb	r3, r0, #32
 801144a:	2b04      	cmp	r3, #4
 801144c:	f340 808a 	ble.w	8011564 <_dtoa_r+0x904>
 8011450:	f1c0 001c 	rsb	r0, r0, #28
 8011454:	9b04      	ldr	r3, [sp, #16]
 8011456:	4403      	add	r3, r0
 8011458:	9304      	str	r3, [sp, #16]
 801145a:	9b05      	ldr	r3, [sp, #20]
 801145c:	4403      	add	r3, r0
 801145e:	4405      	add	r5, r0
 8011460:	9305      	str	r3, [sp, #20]
 8011462:	9b04      	ldr	r3, [sp, #16]
 8011464:	2b00      	cmp	r3, #0
 8011466:	dd07      	ble.n	8011478 <_dtoa_r+0x818>
 8011468:	ee18 1a10 	vmov	r1, s16
 801146c:	461a      	mov	r2, r3
 801146e:	4620      	mov	r0, r4
 8011470:	f000 fe66 	bl	8012140 <__lshift>
 8011474:	ee08 0a10 	vmov	s16, r0
 8011478:	9b05      	ldr	r3, [sp, #20]
 801147a:	2b00      	cmp	r3, #0
 801147c:	dd05      	ble.n	801148a <_dtoa_r+0x82a>
 801147e:	4631      	mov	r1, r6
 8011480:	461a      	mov	r2, r3
 8011482:	4620      	mov	r0, r4
 8011484:	f000 fe5c 	bl	8012140 <__lshift>
 8011488:	4606      	mov	r6, r0
 801148a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148c:	2b00      	cmp	r3, #0
 801148e:	d06e      	beq.n	801156e <_dtoa_r+0x90e>
 8011490:	ee18 0a10 	vmov	r0, s16
 8011494:	4631      	mov	r1, r6
 8011496:	f000 fec3 	bl	8012220 <__mcmp>
 801149a:	2800      	cmp	r0, #0
 801149c:	da67      	bge.n	801156e <_dtoa_r+0x90e>
 801149e:	9b00      	ldr	r3, [sp, #0]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	ee18 1a10 	vmov	r1, s16
 80114a6:	9300      	str	r3, [sp, #0]
 80114a8:	220a      	movs	r2, #10
 80114aa:	2300      	movs	r3, #0
 80114ac:	4620      	mov	r0, r4
 80114ae:	f000 fc97 	bl	8011de0 <__multadd>
 80114b2:	9b08      	ldr	r3, [sp, #32]
 80114b4:	ee08 0a10 	vmov	s16, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 81b1 	beq.w	8011820 <_dtoa_r+0xbc0>
 80114be:	2300      	movs	r3, #0
 80114c0:	4639      	mov	r1, r7
 80114c2:	220a      	movs	r2, #10
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 fc8b 	bl	8011de0 <__multadd>
 80114ca:	9b02      	ldr	r3, [sp, #8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	4607      	mov	r7, r0
 80114d0:	f300 808e 	bgt.w	80115f0 <_dtoa_r+0x990>
 80114d4:	9b06      	ldr	r3, [sp, #24]
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	dc51      	bgt.n	801157e <_dtoa_r+0x91e>
 80114da:	e089      	b.n	80115f0 <_dtoa_r+0x990>
 80114dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80114de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80114e2:	e74b      	b.n	801137c <_dtoa_r+0x71c>
 80114e4:	9b03      	ldr	r3, [sp, #12]
 80114e6:	1e5e      	subs	r6, r3, #1
 80114e8:	9b07      	ldr	r3, [sp, #28]
 80114ea:	42b3      	cmp	r3, r6
 80114ec:	bfbf      	itttt	lt
 80114ee:	9b07      	ldrlt	r3, [sp, #28]
 80114f0:	9607      	strlt	r6, [sp, #28]
 80114f2:	1af2      	sublt	r2, r6, r3
 80114f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80114f6:	bfb6      	itet	lt
 80114f8:	189b      	addlt	r3, r3, r2
 80114fa:	1b9e      	subge	r6, r3, r6
 80114fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80114fe:	9b03      	ldr	r3, [sp, #12]
 8011500:	bfb8      	it	lt
 8011502:	2600      	movlt	r6, #0
 8011504:	2b00      	cmp	r3, #0
 8011506:	bfb7      	itett	lt
 8011508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801150c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011510:	1a9d      	sublt	r5, r3, r2
 8011512:	2300      	movlt	r3, #0
 8011514:	e734      	b.n	8011380 <_dtoa_r+0x720>
 8011516:	9e07      	ldr	r6, [sp, #28]
 8011518:	9d04      	ldr	r5, [sp, #16]
 801151a:	9f08      	ldr	r7, [sp, #32]
 801151c:	e73b      	b.n	8011396 <_dtoa_r+0x736>
 801151e:	9a07      	ldr	r2, [sp, #28]
 8011520:	e767      	b.n	80113f2 <_dtoa_r+0x792>
 8011522:	9b06      	ldr	r3, [sp, #24]
 8011524:	2b01      	cmp	r3, #1
 8011526:	dc18      	bgt.n	801155a <_dtoa_r+0x8fa>
 8011528:	f1ba 0f00 	cmp.w	sl, #0
 801152c:	d115      	bne.n	801155a <_dtoa_r+0x8fa>
 801152e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011532:	b993      	cbnz	r3, 801155a <_dtoa_r+0x8fa>
 8011534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011538:	0d1b      	lsrs	r3, r3, #20
 801153a:	051b      	lsls	r3, r3, #20
 801153c:	b183      	cbz	r3, 8011560 <_dtoa_r+0x900>
 801153e:	9b04      	ldr	r3, [sp, #16]
 8011540:	3301      	adds	r3, #1
 8011542:	9304      	str	r3, [sp, #16]
 8011544:	9b05      	ldr	r3, [sp, #20]
 8011546:	3301      	adds	r3, #1
 8011548:	9305      	str	r3, [sp, #20]
 801154a:	f04f 0801 	mov.w	r8, #1
 801154e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011550:	2b00      	cmp	r3, #0
 8011552:	f47f af6a 	bne.w	801142a <_dtoa_r+0x7ca>
 8011556:	2001      	movs	r0, #1
 8011558:	e76f      	b.n	801143a <_dtoa_r+0x7da>
 801155a:	f04f 0800 	mov.w	r8, #0
 801155e:	e7f6      	b.n	801154e <_dtoa_r+0x8ee>
 8011560:	4698      	mov	r8, r3
 8011562:	e7f4      	b.n	801154e <_dtoa_r+0x8ee>
 8011564:	f43f af7d 	beq.w	8011462 <_dtoa_r+0x802>
 8011568:	4618      	mov	r0, r3
 801156a:	301c      	adds	r0, #28
 801156c:	e772      	b.n	8011454 <_dtoa_r+0x7f4>
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	dc37      	bgt.n	80115e4 <_dtoa_r+0x984>
 8011574:	9b06      	ldr	r3, [sp, #24]
 8011576:	2b02      	cmp	r3, #2
 8011578:	dd34      	ble.n	80115e4 <_dtoa_r+0x984>
 801157a:	9b03      	ldr	r3, [sp, #12]
 801157c:	9302      	str	r3, [sp, #8]
 801157e:	9b02      	ldr	r3, [sp, #8]
 8011580:	b96b      	cbnz	r3, 801159e <_dtoa_r+0x93e>
 8011582:	4631      	mov	r1, r6
 8011584:	2205      	movs	r2, #5
 8011586:	4620      	mov	r0, r4
 8011588:	f000 fc2a 	bl	8011de0 <__multadd>
 801158c:	4601      	mov	r1, r0
 801158e:	4606      	mov	r6, r0
 8011590:	ee18 0a10 	vmov	r0, s16
 8011594:	f000 fe44 	bl	8012220 <__mcmp>
 8011598:	2800      	cmp	r0, #0
 801159a:	f73f adbb 	bgt.w	8011114 <_dtoa_r+0x4b4>
 801159e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a0:	9d01      	ldr	r5, [sp, #4]
 80115a2:	43db      	mvns	r3, r3
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	f04f 0800 	mov.w	r8, #0
 80115aa:	4631      	mov	r1, r6
 80115ac:	4620      	mov	r0, r4
 80115ae:	f000 fbf5 	bl	8011d9c <_Bfree>
 80115b2:	2f00      	cmp	r7, #0
 80115b4:	f43f aea4 	beq.w	8011300 <_dtoa_r+0x6a0>
 80115b8:	f1b8 0f00 	cmp.w	r8, #0
 80115bc:	d005      	beq.n	80115ca <_dtoa_r+0x96a>
 80115be:	45b8      	cmp	r8, r7
 80115c0:	d003      	beq.n	80115ca <_dtoa_r+0x96a>
 80115c2:	4641      	mov	r1, r8
 80115c4:	4620      	mov	r0, r4
 80115c6:	f000 fbe9 	bl	8011d9c <_Bfree>
 80115ca:	4639      	mov	r1, r7
 80115cc:	4620      	mov	r0, r4
 80115ce:	f000 fbe5 	bl	8011d9c <_Bfree>
 80115d2:	e695      	b.n	8011300 <_dtoa_r+0x6a0>
 80115d4:	2600      	movs	r6, #0
 80115d6:	4637      	mov	r7, r6
 80115d8:	e7e1      	b.n	801159e <_dtoa_r+0x93e>
 80115da:	9700      	str	r7, [sp, #0]
 80115dc:	4637      	mov	r7, r6
 80115de:	e599      	b.n	8011114 <_dtoa_r+0x4b4>
 80115e0:	40240000 	.word	0x40240000
 80115e4:	9b08      	ldr	r3, [sp, #32]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f000 80ca 	beq.w	8011780 <_dtoa_r+0xb20>
 80115ec:	9b03      	ldr	r3, [sp, #12]
 80115ee:	9302      	str	r3, [sp, #8]
 80115f0:	2d00      	cmp	r5, #0
 80115f2:	dd05      	ble.n	8011600 <_dtoa_r+0x9a0>
 80115f4:	4639      	mov	r1, r7
 80115f6:	462a      	mov	r2, r5
 80115f8:	4620      	mov	r0, r4
 80115fa:	f000 fda1 	bl	8012140 <__lshift>
 80115fe:	4607      	mov	r7, r0
 8011600:	f1b8 0f00 	cmp.w	r8, #0
 8011604:	d05b      	beq.n	80116be <_dtoa_r+0xa5e>
 8011606:	6879      	ldr	r1, [r7, #4]
 8011608:	4620      	mov	r0, r4
 801160a:	f000 fb87 	bl	8011d1c <_Balloc>
 801160e:	4605      	mov	r5, r0
 8011610:	b928      	cbnz	r0, 801161e <_dtoa_r+0x9be>
 8011612:	4b87      	ldr	r3, [pc, #540]	; (8011830 <_dtoa_r+0xbd0>)
 8011614:	4602      	mov	r2, r0
 8011616:	f240 21ea 	movw	r1, #746	; 0x2ea
 801161a:	f7ff bb3b 	b.w	8010c94 <_dtoa_r+0x34>
 801161e:	693a      	ldr	r2, [r7, #16]
 8011620:	3202      	adds	r2, #2
 8011622:	0092      	lsls	r2, r2, #2
 8011624:	f107 010c 	add.w	r1, r7, #12
 8011628:	300c      	adds	r0, #12
 801162a:	f7fe fa61 	bl	800faf0 <memcpy>
 801162e:	2201      	movs	r2, #1
 8011630:	4629      	mov	r1, r5
 8011632:	4620      	mov	r0, r4
 8011634:	f000 fd84 	bl	8012140 <__lshift>
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	f103 0901 	add.w	r9, r3, #1
 801163e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011642:	4413      	add	r3, r2
 8011644:	9305      	str	r3, [sp, #20]
 8011646:	f00a 0301 	and.w	r3, sl, #1
 801164a:	46b8      	mov	r8, r7
 801164c:	9304      	str	r3, [sp, #16]
 801164e:	4607      	mov	r7, r0
 8011650:	4631      	mov	r1, r6
 8011652:	ee18 0a10 	vmov	r0, s16
 8011656:	f7ff fa75 	bl	8010b44 <quorem>
 801165a:	4641      	mov	r1, r8
 801165c:	9002      	str	r0, [sp, #8]
 801165e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011662:	ee18 0a10 	vmov	r0, s16
 8011666:	f000 fddb 	bl	8012220 <__mcmp>
 801166a:	463a      	mov	r2, r7
 801166c:	9003      	str	r0, [sp, #12]
 801166e:	4631      	mov	r1, r6
 8011670:	4620      	mov	r0, r4
 8011672:	f000 fdf1 	bl	8012258 <__mdiff>
 8011676:	68c2      	ldr	r2, [r0, #12]
 8011678:	f109 3bff 	add.w	fp, r9, #4294967295
 801167c:	4605      	mov	r5, r0
 801167e:	bb02      	cbnz	r2, 80116c2 <_dtoa_r+0xa62>
 8011680:	4601      	mov	r1, r0
 8011682:	ee18 0a10 	vmov	r0, s16
 8011686:	f000 fdcb 	bl	8012220 <__mcmp>
 801168a:	4602      	mov	r2, r0
 801168c:	4629      	mov	r1, r5
 801168e:	4620      	mov	r0, r4
 8011690:	9207      	str	r2, [sp, #28]
 8011692:	f000 fb83 	bl	8011d9c <_Bfree>
 8011696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801169a:	ea43 0102 	orr.w	r1, r3, r2
 801169e:	9b04      	ldr	r3, [sp, #16]
 80116a0:	430b      	orrs	r3, r1
 80116a2:	464d      	mov	r5, r9
 80116a4:	d10f      	bne.n	80116c6 <_dtoa_r+0xa66>
 80116a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116aa:	d02a      	beq.n	8011702 <_dtoa_r+0xaa2>
 80116ac:	9b03      	ldr	r3, [sp, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	dd02      	ble.n	80116b8 <_dtoa_r+0xa58>
 80116b2:	9b02      	ldr	r3, [sp, #8]
 80116b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80116b8:	f88b a000 	strb.w	sl, [fp]
 80116bc:	e775      	b.n	80115aa <_dtoa_r+0x94a>
 80116be:	4638      	mov	r0, r7
 80116c0:	e7ba      	b.n	8011638 <_dtoa_r+0x9d8>
 80116c2:	2201      	movs	r2, #1
 80116c4:	e7e2      	b.n	801168c <_dtoa_r+0xa2c>
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	db04      	blt.n	80116d6 <_dtoa_r+0xa76>
 80116cc:	9906      	ldr	r1, [sp, #24]
 80116ce:	430b      	orrs	r3, r1
 80116d0:	9904      	ldr	r1, [sp, #16]
 80116d2:	430b      	orrs	r3, r1
 80116d4:	d122      	bne.n	801171c <_dtoa_r+0xabc>
 80116d6:	2a00      	cmp	r2, #0
 80116d8:	ddee      	ble.n	80116b8 <_dtoa_r+0xa58>
 80116da:	ee18 1a10 	vmov	r1, s16
 80116de:	2201      	movs	r2, #1
 80116e0:	4620      	mov	r0, r4
 80116e2:	f000 fd2d 	bl	8012140 <__lshift>
 80116e6:	4631      	mov	r1, r6
 80116e8:	ee08 0a10 	vmov	s16, r0
 80116ec:	f000 fd98 	bl	8012220 <__mcmp>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	dc03      	bgt.n	80116fc <_dtoa_r+0xa9c>
 80116f4:	d1e0      	bne.n	80116b8 <_dtoa_r+0xa58>
 80116f6:	f01a 0f01 	tst.w	sl, #1
 80116fa:	d0dd      	beq.n	80116b8 <_dtoa_r+0xa58>
 80116fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011700:	d1d7      	bne.n	80116b2 <_dtoa_r+0xa52>
 8011702:	2339      	movs	r3, #57	; 0x39
 8011704:	f88b 3000 	strb.w	r3, [fp]
 8011708:	462b      	mov	r3, r5
 801170a:	461d      	mov	r5, r3
 801170c:	3b01      	subs	r3, #1
 801170e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011712:	2a39      	cmp	r2, #57	; 0x39
 8011714:	d071      	beq.n	80117fa <_dtoa_r+0xb9a>
 8011716:	3201      	adds	r2, #1
 8011718:	701a      	strb	r2, [r3, #0]
 801171a:	e746      	b.n	80115aa <_dtoa_r+0x94a>
 801171c:	2a00      	cmp	r2, #0
 801171e:	dd07      	ble.n	8011730 <_dtoa_r+0xad0>
 8011720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011724:	d0ed      	beq.n	8011702 <_dtoa_r+0xaa2>
 8011726:	f10a 0301 	add.w	r3, sl, #1
 801172a:	f88b 3000 	strb.w	r3, [fp]
 801172e:	e73c      	b.n	80115aa <_dtoa_r+0x94a>
 8011730:	9b05      	ldr	r3, [sp, #20]
 8011732:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011736:	4599      	cmp	r9, r3
 8011738:	d047      	beq.n	80117ca <_dtoa_r+0xb6a>
 801173a:	ee18 1a10 	vmov	r1, s16
 801173e:	2300      	movs	r3, #0
 8011740:	220a      	movs	r2, #10
 8011742:	4620      	mov	r0, r4
 8011744:	f000 fb4c 	bl	8011de0 <__multadd>
 8011748:	45b8      	cmp	r8, r7
 801174a:	ee08 0a10 	vmov	s16, r0
 801174e:	f04f 0300 	mov.w	r3, #0
 8011752:	f04f 020a 	mov.w	r2, #10
 8011756:	4641      	mov	r1, r8
 8011758:	4620      	mov	r0, r4
 801175a:	d106      	bne.n	801176a <_dtoa_r+0xb0a>
 801175c:	f000 fb40 	bl	8011de0 <__multadd>
 8011760:	4680      	mov	r8, r0
 8011762:	4607      	mov	r7, r0
 8011764:	f109 0901 	add.w	r9, r9, #1
 8011768:	e772      	b.n	8011650 <_dtoa_r+0x9f0>
 801176a:	f000 fb39 	bl	8011de0 <__multadd>
 801176e:	4639      	mov	r1, r7
 8011770:	4680      	mov	r8, r0
 8011772:	2300      	movs	r3, #0
 8011774:	220a      	movs	r2, #10
 8011776:	4620      	mov	r0, r4
 8011778:	f000 fb32 	bl	8011de0 <__multadd>
 801177c:	4607      	mov	r7, r0
 801177e:	e7f1      	b.n	8011764 <_dtoa_r+0xb04>
 8011780:	9b03      	ldr	r3, [sp, #12]
 8011782:	9302      	str	r3, [sp, #8]
 8011784:	9d01      	ldr	r5, [sp, #4]
 8011786:	ee18 0a10 	vmov	r0, s16
 801178a:	4631      	mov	r1, r6
 801178c:	f7ff f9da 	bl	8010b44 <quorem>
 8011790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011794:	9b01      	ldr	r3, [sp, #4]
 8011796:	f805 ab01 	strb.w	sl, [r5], #1
 801179a:	1aea      	subs	r2, r5, r3
 801179c:	9b02      	ldr	r3, [sp, #8]
 801179e:	4293      	cmp	r3, r2
 80117a0:	dd09      	ble.n	80117b6 <_dtoa_r+0xb56>
 80117a2:	ee18 1a10 	vmov	r1, s16
 80117a6:	2300      	movs	r3, #0
 80117a8:	220a      	movs	r2, #10
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 fb18 	bl	8011de0 <__multadd>
 80117b0:	ee08 0a10 	vmov	s16, r0
 80117b4:	e7e7      	b.n	8011786 <_dtoa_r+0xb26>
 80117b6:	9b02      	ldr	r3, [sp, #8]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfc8      	it	gt
 80117bc:	461d      	movgt	r5, r3
 80117be:	9b01      	ldr	r3, [sp, #4]
 80117c0:	bfd8      	it	le
 80117c2:	2501      	movle	r5, #1
 80117c4:	441d      	add	r5, r3
 80117c6:	f04f 0800 	mov.w	r8, #0
 80117ca:	ee18 1a10 	vmov	r1, s16
 80117ce:	2201      	movs	r2, #1
 80117d0:	4620      	mov	r0, r4
 80117d2:	f000 fcb5 	bl	8012140 <__lshift>
 80117d6:	4631      	mov	r1, r6
 80117d8:	ee08 0a10 	vmov	s16, r0
 80117dc:	f000 fd20 	bl	8012220 <__mcmp>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	dc91      	bgt.n	8011708 <_dtoa_r+0xaa8>
 80117e4:	d102      	bne.n	80117ec <_dtoa_r+0xb8c>
 80117e6:	f01a 0f01 	tst.w	sl, #1
 80117ea:	d18d      	bne.n	8011708 <_dtoa_r+0xaa8>
 80117ec:	462b      	mov	r3, r5
 80117ee:	461d      	mov	r5, r3
 80117f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117f4:	2a30      	cmp	r2, #48	; 0x30
 80117f6:	d0fa      	beq.n	80117ee <_dtoa_r+0xb8e>
 80117f8:	e6d7      	b.n	80115aa <_dtoa_r+0x94a>
 80117fa:	9a01      	ldr	r2, [sp, #4]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d184      	bne.n	801170a <_dtoa_r+0xaaa>
 8011800:	9b00      	ldr	r3, [sp, #0]
 8011802:	3301      	adds	r3, #1
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	2331      	movs	r3, #49	; 0x31
 8011808:	7013      	strb	r3, [r2, #0]
 801180a:	e6ce      	b.n	80115aa <_dtoa_r+0x94a>
 801180c:	4b09      	ldr	r3, [pc, #36]	; (8011834 <_dtoa_r+0xbd4>)
 801180e:	f7ff ba95 	b.w	8010d3c <_dtoa_r+0xdc>
 8011812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011814:	2b00      	cmp	r3, #0
 8011816:	f47f aa6e 	bne.w	8010cf6 <_dtoa_r+0x96>
 801181a:	4b07      	ldr	r3, [pc, #28]	; (8011838 <_dtoa_r+0xbd8>)
 801181c:	f7ff ba8e 	b.w	8010d3c <_dtoa_r+0xdc>
 8011820:	9b02      	ldr	r3, [sp, #8]
 8011822:	2b00      	cmp	r3, #0
 8011824:	dcae      	bgt.n	8011784 <_dtoa_r+0xb24>
 8011826:	9b06      	ldr	r3, [sp, #24]
 8011828:	2b02      	cmp	r3, #2
 801182a:	f73f aea8 	bgt.w	801157e <_dtoa_r+0x91e>
 801182e:	e7a9      	b.n	8011784 <_dtoa_r+0xb24>
 8011830:	0802e89d 	.word	0x0802e89d
 8011834:	0802e6f9 	.word	0x0802e6f9
 8011838:	0802e81e 	.word	0x0802e81e

0801183c <__sflush_r>:
 801183c:	898a      	ldrh	r2, [r1, #12]
 801183e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011842:	4605      	mov	r5, r0
 8011844:	0710      	lsls	r0, r2, #28
 8011846:	460c      	mov	r4, r1
 8011848:	d458      	bmi.n	80118fc <__sflush_r+0xc0>
 801184a:	684b      	ldr	r3, [r1, #4]
 801184c:	2b00      	cmp	r3, #0
 801184e:	dc05      	bgt.n	801185c <__sflush_r+0x20>
 8011850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011852:	2b00      	cmp	r3, #0
 8011854:	dc02      	bgt.n	801185c <__sflush_r+0x20>
 8011856:	2000      	movs	r0, #0
 8011858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801185e:	2e00      	cmp	r6, #0
 8011860:	d0f9      	beq.n	8011856 <__sflush_r+0x1a>
 8011862:	2300      	movs	r3, #0
 8011864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011868:	682f      	ldr	r7, [r5, #0]
 801186a:	602b      	str	r3, [r5, #0]
 801186c:	d032      	beq.n	80118d4 <__sflush_r+0x98>
 801186e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011870:	89a3      	ldrh	r3, [r4, #12]
 8011872:	075a      	lsls	r2, r3, #29
 8011874:	d505      	bpl.n	8011882 <__sflush_r+0x46>
 8011876:	6863      	ldr	r3, [r4, #4]
 8011878:	1ac0      	subs	r0, r0, r3
 801187a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801187c:	b10b      	cbz	r3, 8011882 <__sflush_r+0x46>
 801187e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011880:	1ac0      	subs	r0, r0, r3
 8011882:	2300      	movs	r3, #0
 8011884:	4602      	mov	r2, r0
 8011886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011888:	6a21      	ldr	r1, [r4, #32]
 801188a:	4628      	mov	r0, r5
 801188c:	47b0      	blx	r6
 801188e:	1c43      	adds	r3, r0, #1
 8011890:	89a3      	ldrh	r3, [r4, #12]
 8011892:	d106      	bne.n	80118a2 <__sflush_r+0x66>
 8011894:	6829      	ldr	r1, [r5, #0]
 8011896:	291d      	cmp	r1, #29
 8011898:	d82c      	bhi.n	80118f4 <__sflush_r+0xb8>
 801189a:	4a2a      	ldr	r2, [pc, #168]	; (8011944 <__sflush_r+0x108>)
 801189c:	40ca      	lsrs	r2, r1
 801189e:	07d6      	lsls	r6, r2, #31
 80118a0:	d528      	bpl.n	80118f4 <__sflush_r+0xb8>
 80118a2:	2200      	movs	r2, #0
 80118a4:	6062      	str	r2, [r4, #4]
 80118a6:	04d9      	lsls	r1, r3, #19
 80118a8:	6922      	ldr	r2, [r4, #16]
 80118aa:	6022      	str	r2, [r4, #0]
 80118ac:	d504      	bpl.n	80118b8 <__sflush_r+0x7c>
 80118ae:	1c42      	adds	r2, r0, #1
 80118b0:	d101      	bne.n	80118b6 <__sflush_r+0x7a>
 80118b2:	682b      	ldr	r3, [r5, #0]
 80118b4:	b903      	cbnz	r3, 80118b8 <__sflush_r+0x7c>
 80118b6:	6560      	str	r0, [r4, #84]	; 0x54
 80118b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118ba:	602f      	str	r7, [r5, #0]
 80118bc:	2900      	cmp	r1, #0
 80118be:	d0ca      	beq.n	8011856 <__sflush_r+0x1a>
 80118c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118c4:	4299      	cmp	r1, r3
 80118c6:	d002      	beq.n	80118ce <__sflush_r+0x92>
 80118c8:	4628      	mov	r0, r5
 80118ca:	f7fe f927 	bl	800fb1c <_free_r>
 80118ce:	2000      	movs	r0, #0
 80118d0:	6360      	str	r0, [r4, #52]	; 0x34
 80118d2:	e7c1      	b.n	8011858 <__sflush_r+0x1c>
 80118d4:	6a21      	ldr	r1, [r4, #32]
 80118d6:	2301      	movs	r3, #1
 80118d8:	4628      	mov	r0, r5
 80118da:	47b0      	blx	r6
 80118dc:	1c41      	adds	r1, r0, #1
 80118de:	d1c7      	bne.n	8011870 <__sflush_r+0x34>
 80118e0:	682b      	ldr	r3, [r5, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d0c4      	beq.n	8011870 <__sflush_r+0x34>
 80118e6:	2b1d      	cmp	r3, #29
 80118e8:	d001      	beq.n	80118ee <__sflush_r+0xb2>
 80118ea:	2b16      	cmp	r3, #22
 80118ec:	d101      	bne.n	80118f2 <__sflush_r+0xb6>
 80118ee:	602f      	str	r7, [r5, #0]
 80118f0:	e7b1      	b.n	8011856 <__sflush_r+0x1a>
 80118f2:	89a3      	ldrh	r3, [r4, #12]
 80118f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118f8:	81a3      	strh	r3, [r4, #12]
 80118fa:	e7ad      	b.n	8011858 <__sflush_r+0x1c>
 80118fc:	690f      	ldr	r7, [r1, #16]
 80118fe:	2f00      	cmp	r7, #0
 8011900:	d0a9      	beq.n	8011856 <__sflush_r+0x1a>
 8011902:	0793      	lsls	r3, r2, #30
 8011904:	680e      	ldr	r6, [r1, #0]
 8011906:	bf08      	it	eq
 8011908:	694b      	ldreq	r3, [r1, #20]
 801190a:	600f      	str	r7, [r1, #0]
 801190c:	bf18      	it	ne
 801190e:	2300      	movne	r3, #0
 8011910:	eba6 0807 	sub.w	r8, r6, r7
 8011914:	608b      	str	r3, [r1, #8]
 8011916:	f1b8 0f00 	cmp.w	r8, #0
 801191a:	dd9c      	ble.n	8011856 <__sflush_r+0x1a>
 801191c:	6a21      	ldr	r1, [r4, #32]
 801191e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011920:	4643      	mov	r3, r8
 8011922:	463a      	mov	r2, r7
 8011924:	4628      	mov	r0, r5
 8011926:	47b0      	blx	r6
 8011928:	2800      	cmp	r0, #0
 801192a:	dc06      	bgt.n	801193a <__sflush_r+0xfe>
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011932:	81a3      	strh	r3, [r4, #12]
 8011934:	f04f 30ff 	mov.w	r0, #4294967295
 8011938:	e78e      	b.n	8011858 <__sflush_r+0x1c>
 801193a:	4407      	add	r7, r0
 801193c:	eba8 0800 	sub.w	r8, r8, r0
 8011940:	e7e9      	b.n	8011916 <__sflush_r+0xda>
 8011942:	bf00      	nop
 8011944:	20400001 	.word	0x20400001

08011948 <_fflush_r>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	690b      	ldr	r3, [r1, #16]
 801194c:	4605      	mov	r5, r0
 801194e:	460c      	mov	r4, r1
 8011950:	b913      	cbnz	r3, 8011958 <_fflush_r+0x10>
 8011952:	2500      	movs	r5, #0
 8011954:	4628      	mov	r0, r5
 8011956:	bd38      	pop	{r3, r4, r5, pc}
 8011958:	b118      	cbz	r0, 8011962 <_fflush_r+0x1a>
 801195a:	6983      	ldr	r3, [r0, #24]
 801195c:	b90b      	cbnz	r3, 8011962 <_fflush_r+0x1a>
 801195e:	f000 f887 	bl	8011a70 <__sinit>
 8011962:	4b14      	ldr	r3, [pc, #80]	; (80119b4 <_fflush_r+0x6c>)
 8011964:	429c      	cmp	r4, r3
 8011966:	d11b      	bne.n	80119a0 <_fflush_r+0x58>
 8011968:	686c      	ldr	r4, [r5, #4]
 801196a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0ef      	beq.n	8011952 <_fflush_r+0xa>
 8011972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011974:	07d0      	lsls	r0, r2, #31
 8011976:	d404      	bmi.n	8011982 <_fflush_r+0x3a>
 8011978:	0599      	lsls	r1, r3, #22
 801197a:	d402      	bmi.n	8011982 <_fflush_r+0x3a>
 801197c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801197e:	f000 f91a 	bl	8011bb6 <__retarget_lock_acquire_recursive>
 8011982:	4628      	mov	r0, r5
 8011984:	4621      	mov	r1, r4
 8011986:	f7ff ff59 	bl	801183c <__sflush_r>
 801198a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801198c:	07da      	lsls	r2, r3, #31
 801198e:	4605      	mov	r5, r0
 8011990:	d4e0      	bmi.n	8011954 <_fflush_r+0xc>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	059b      	lsls	r3, r3, #22
 8011996:	d4dd      	bmi.n	8011954 <_fflush_r+0xc>
 8011998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801199a:	f000 f90d 	bl	8011bb8 <__retarget_lock_release_recursive>
 801199e:	e7d9      	b.n	8011954 <_fflush_r+0xc>
 80119a0:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <_fflush_r+0x70>)
 80119a2:	429c      	cmp	r4, r3
 80119a4:	d101      	bne.n	80119aa <_fflush_r+0x62>
 80119a6:	68ac      	ldr	r4, [r5, #8]
 80119a8:	e7df      	b.n	801196a <_fflush_r+0x22>
 80119aa:	4b04      	ldr	r3, [pc, #16]	; (80119bc <_fflush_r+0x74>)
 80119ac:	429c      	cmp	r4, r3
 80119ae:	bf08      	it	eq
 80119b0:	68ec      	ldreq	r4, [r5, #12]
 80119b2:	e7da      	b.n	801196a <_fflush_r+0x22>
 80119b4:	0802e8d0 	.word	0x0802e8d0
 80119b8:	0802e8f0 	.word	0x0802e8f0
 80119bc:	0802e8b0 	.word	0x0802e8b0

080119c0 <std>:
 80119c0:	2300      	movs	r3, #0
 80119c2:	b510      	push	{r4, lr}
 80119c4:	4604      	mov	r4, r0
 80119c6:	e9c0 3300 	strd	r3, r3, [r0]
 80119ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119ce:	6083      	str	r3, [r0, #8]
 80119d0:	8181      	strh	r1, [r0, #12]
 80119d2:	6643      	str	r3, [r0, #100]	; 0x64
 80119d4:	81c2      	strh	r2, [r0, #14]
 80119d6:	6183      	str	r3, [r0, #24]
 80119d8:	4619      	mov	r1, r3
 80119da:	2208      	movs	r2, #8
 80119dc:	305c      	adds	r0, #92	; 0x5c
 80119de:	f7fe f895 	bl	800fb0c <memset>
 80119e2:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <std+0x38>)
 80119e4:	6263      	str	r3, [r4, #36]	; 0x24
 80119e6:	4b05      	ldr	r3, [pc, #20]	; (80119fc <std+0x3c>)
 80119e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80119ea:	4b05      	ldr	r3, [pc, #20]	; (8011a00 <std+0x40>)
 80119ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119ee:	4b05      	ldr	r3, [pc, #20]	; (8011a04 <std+0x44>)
 80119f0:	6224      	str	r4, [r4, #32]
 80119f2:	6323      	str	r3, [r4, #48]	; 0x30
 80119f4:	bd10      	pop	{r4, pc}
 80119f6:	bf00      	nop
 80119f8:	080108c5 	.word	0x080108c5
 80119fc:	080108e7 	.word	0x080108e7
 8011a00:	0801091f 	.word	0x0801091f
 8011a04:	08010943 	.word	0x08010943

08011a08 <_cleanup_r>:
 8011a08:	4901      	ldr	r1, [pc, #4]	; (8011a10 <_cleanup_r+0x8>)
 8011a0a:	f000 b8af 	b.w	8011b6c <_fwalk_reent>
 8011a0e:	bf00      	nop
 8011a10:	08011949 	.word	0x08011949

08011a14 <__sfmoreglue>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	2268      	movs	r2, #104	; 0x68
 8011a18:	1e4d      	subs	r5, r1, #1
 8011a1a:	4355      	muls	r5, r2
 8011a1c:	460e      	mov	r6, r1
 8011a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a22:	f7fe f8e7 	bl	800fbf4 <_malloc_r>
 8011a26:	4604      	mov	r4, r0
 8011a28:	b140      	cbz	r0, 8011a3c <__sfmoreglue+0x28>
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8011a30:	300c      	adds	r0, #12
 8011a32:	60a0      	str	r0, [r4, #8]
 8011a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a38:	f7fe f868 	bl	800fb0c <memset>
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}

08011a40 <__sfp_lock_acquire>:
 8011a40:	4801      	ldr	r0, [pc, #4]	; (8011a48 <__sfp_lock_acquire+0x8>)
 8011a42:	f000 b8b8 	b.w	8011bb6 <__retarget_lock_acquire_recursive>
 8011a46:	bf00      	nop
 8011a48:	20005d75 	.word	0x20005d75

08011a4c <__sfp_lock_release>:
 8011a4c:	4801      	ldr	r0, [pc, #4]	; (8011a54 <__sfp_lock_release+0x8>)
 8011a4e:	f000 b8b3 	b.w	8011bb8 <__retarget_lock_release_recursive>
 8011a52:	bf00      	nop
 8011a54:	20005d75 	.word	0x20005d75

08011a58 <__sinit_lock_acquire>:
 8011a58:	4801      	ldr	r0, [pc, #4]	; (8011a60 <__sinit_lock_acquire+0x8>)
 8011a5a:	f000 b8ac 	b.w	8011bb6 <__retarget_lock_acquire_recursive>
 8011a5e:	bf00      	nop
 8011a60:	20005d76 	.word	0x20005d76

08011a64 <__sinit_lock_release>:
 8011a64:	4801      	ldr	r0, [pc, #4]	; (8011a6c <__sinit_lock_release+0x8>)
 8011a66:	f000 b8a7 	b.w	8011bb8 <__retarget_lock_release_recursive>
 8011a6a:	bf00      	nop
 8011a6c:	20005d76 	.word	0x20005d76

08011a70 <__sinit>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	4604      	mov	r4, r0
 8011a74:	f7ff fff0 	bl	8011a58 <__sinit_lock_acquire>
 8011a78:	69a3      	ldr	r3, [r4, #24]
 8011a7a:	b11b      	cbz	r3, 8011a84 <__sinit+0x14>
 8011a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a80:	f7ff bff0 	b.w	8011a64 <__sinit_lock_release>
 8011a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a88:	6523      	str	r3, [r4, #80]	; 0x50
 8011a8a:	4b13      	ldr	r3, [pc, #76]	; (8011ad8 <__sinit+0x68>)
 8011a8c:	4a13      	ldr	r2, [pc, #76]	; (8011adc <__sinit+0x6c>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a92:	42a3      	cmp	r3, r4
 8011a94:	bf04      	itt	eq
 8011a96:	2301      	moveq	r3, #1
 8011a98:	61a3      	streq	r3, [r4, #24]
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f000 f820 	bl	8011ae0 <__sfp>
 8011aa0:	6060      	str	r0, [r4, #4]
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f000 f81c 	bl	8011ae0 <__sfp>
 8011aa8:	60a0      	str	r0, [r4, #8]
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 f818 	bl	8011ae0 <__sfp>
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	60e0      	str	r0, [r4, #12]
 8011ab4:	2104      	movs	r1, #4
 8011ab6:	6860      	ldr	r0, [r4, #4]
 8011ab8:	f7ff ff82 	bl	80119c0 <std>
 8011abc:	68a0      	ldr	r0, [r4, #8]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	2109      	movs	r1, #9
 8011ac2:	f7ff ff7d 	bl	80119c0 <std>
 8011ac6:	68e0      	ldr	r0, [r4, #12]
 8011ac8:	2202      	movs	r2, #2
 8011aca:	2112      	movs	r1, #18
 8011acc:	f7ff ff78 	bl	80119c0 <std>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	61a3      	str	r3, [r4, #24]
 8011ad4:	e7d2      	b.n	8011a7c <__sinit+0xc>
 8011ad6:	bf00      	nop
 8011ad8:	0802e6d4 	.word	0x0802e6d4
 8011adc:	08011a09 	.word	0x08011a09

08011ae0 <__sfp>:
 8011ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ae2:	4607      	mov	r7, r0
 8011ae4:	f7ff ffac 	bl	8011a40 <__sfp_lock_acquire>
 8011ae8:	4b1e      	ldr	r3, [pc, #120]	; (8011b64 <__sfp+0x84>)
 8011aea:	681e      	ldr	r6, [r3, #0]
 8011aec:	69b3      	ldr	r3, [r6, #24]
 8011aee:	b913      	cbnz	r3, 8011af6 <__sfp+0x16>
 8011af0:	4630      	mov	r0, r6
 8011af2:	f7ff ffbd 	bl	8011a70 <__sinit>
 8011af6:	3648      	adds	r6, #72	; 0x48
 8011af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	d503      	bpl.n	8011b08 <__sfp+0x28>
 8011b00:	6833      	ldr	r3, [r6, #0]
 8011b02:	b30b      	cbz	r3, 8011b48 <__sfp+0x68>
 8011b04:	6836      	ldr	r6, [r6, #0]
 8011b06:	e7f7      	b.n	8011af8 <__sfp+0x18>
 8011b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b0c:	b9d5      	cbnz	r5, 8011b44 <__sfp+0x64>
 8011b0e:	4b16      	ldr	r3, [pc, #88]	; (8011b68 <__sfp+0x88>)
 8011b10:	60e3      	str	r3, [r4, #12]
 8011b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b16:	6665      	str	r5, [r4, #100]	; 0x64
 8011b18:	f000 f84c 	bl	8011bb4 <__retarget_lock_init_recursive>
 8011b1c:	f7ff ff96 	bl	8011a4c <__sfp_lock_release>
 8011b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b28:	6025      	str	r5, [r4, #0]
 8011b2a:	61a5      	str	r5, [r4, #24]
 8011b2c:	2208      	movs	r2, #8
 8011b2e:	4629      	mov	r1, r5
 8011b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b34:	f7fd ffea 	bl	800fb0c <memset>
 8011b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b40:	4620      	mov	r0, r4
 8011b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b44:	3468      	adds	r4, #104	; 0x68
 8011b46:	e7d9      	b.n	8011afc <__sfp+0x1c>
 8011b48:	2104      	movs	r1, #4
 8011b4a:	4638      	mov	r0, r7
 8011b4c:	f7ff ff62 	bl	8011a14 <__sfmoreglue>
 8011b50:	4604      	mov	r4, r0
 8011b52:	6030      	str	r0, [r6, #0]
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1d5      	bne.n	8011b04 <__sfp+0x24>
 8011b58:	f7ff ff78 	bl	8011a4c <__sfp_lock_release>
 8011b5c:	230c      	movs	r3, #12
 8011b5e:	603b      	str	r3, [r7, #0]
 8011b60:	e7ee      	b.n	8011b40 <__sfp+0x60>
 8011b62:	bf00      	nop
 8011b64:	0802e6d4 	.word	0x0802e6d4
 8011b68:	ffff0001 	.word	0xffff0001

08011b6c <_fwalk_reent>:
 8011b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b70:	4606      	mov	r6, r0
 8011b72:	4688      	mov	r8, r1
 8011b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b78:	2700      	movs	r7, #0
 8011b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8011b82:	d505      	bpl.n	8011b90 <_fwalk_reent+0x24>
 8011b84:	6824      	ldr	r4, [r4, #0]
 8011b86:	2c00      	cmp	r4, #0
 8011b88:	d1f7      	bne.n	8011b7a <_fwalk_reent+0xe>
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b90:	89ab      	ldrh	r3, [r5, #12]
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d907      	bls.n	8011ba6 <_fwalk_reent+0x3a>
 8011b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	d003      	beq.n	8011ba6 <_fwalk_reent+0x3a>
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	47c0      	blx	r8
 8011ba4:	4307      	orrs	r7, r0
 8011ba6:	3568      	adds	r5, #104	; 0x68
 8011ba8:	e7e9      	b.n	8011b7e <_fwalk_reent+0x12>
	...

08011bac <_localeconv_r>:
 8011bac:	4800      	ldr	r0, [pc, #0]	; (8011bb0 <_localeconv_r+0x4>)
 8011bae:	4770      	bx	lr
 8011bb0:	2000024c 	.word	0x2000024c

08011bb4 <__retarget_lock_init_recursive>:
 8011bb4:	4770      	bx	lr

08011bb6 <__retarget_lock_acquire_recursive>:
 8011bb6:	4770      	bx	lr

08011bb8 <__retarget_lock_release_recursive>:
 8011bb8:	4770      	bx	lr
	...

08011bbc <_lseek_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	4d07      	ldr	r5, [pc, #28]	; (8011bdc <_lseek_r+0x20>)
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	4608      	mov	r0, r1
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	602a      	str	r2, [r5, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	f7f3 f8c0 	bl	8004d50 <_lseek>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	d102      	bne.n	8011bda <_lseek_r+0x1e>
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	b103      	cbz	r3, 8011bda <_lseek_r+0x1e>
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	bd38      	pop	{r3, r4, r5, pc}
 8011bdc:	20005d78 	.word	0x20005d78

08011be0 <__swhatbuf_r>:
 8011be0:	b570      	push	{r4, r5, r6, lr}
 8011be2:	460e      	mov	r6, r1
 8011be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be8:	2900      	cmp	r1, #0
 8011bea:	b096      	sub	sp, #88	; 0x58
 8011bec:	4614      	mov	r4, r2
 8011bee:	461d      	mov	r5, r3
 8011bf0:	da08      	bge.n	8011c04 <__swhatbuf_r+0x24>
 8011bf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	602a      	str	r2, [r5, #0]
 8011bfa:	061a      	lsls	r2, r3, #24
 8011bfc:	d410      	bmi.n	8011c20 <__swhatbuf_r+0x40>
 8011bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c02:	e00e      	b.n	8011c22 <__swhatbuf_r+0x42>
 8011c04:	466a      	mov	r2, sp
 8011c06:	f000 fe11 	bl	801282c <_fstat_r>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	dbf1      	blt.n	8011bf2 <__swhatbuf_r+0x12>
 8011c0e:	9a01      	ldr	r2, [sp, #4]
 8011c10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c18:	425a      	negs	r2, r3
 8011c1a:	415a      	adcs	r2, r3
 8011c1c:	602a      	str	r2, [r5, #0]
 8011c1e:	e7ee      	b.n	8011bfe <__swhatbuf_r+0x1e>
 8011c20:	2340      	movs	r3, #64	; 0x40
 8011c22:	2000      	movs	r0, #0
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	b016      	add	sp, #88	; 0x58
 8011c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c2c <__smakebuf_r>:
 8011c2c:	898b      	ldrh	r3, [r1, #12]
 8011c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c30:	079d      	lsls	r5, r3, #30
 8011c32:	4606      	mov	r6, r0
 8011c34:	460c      	mov	r4, r1
 8011c36:	d507      	bpl.n	8011c48 <__smakebuf_r+0x1c>
 8011c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	6123      	str	r3, [r4, #16]
 8011c40:	2301      	movs	r3, #1
 8011c42:	6163      	str	r3, [r4, #20]
 8011c44:	b002      	add	sp, #8
 8011c46:	bd70      	pop	{r4, r5, r6, pc}
 8011c48:	ab01      	add	r3, sp, #4
 8011c4a:	466a      	mov	r2, sp
 8011c4c:	f7ff ffc8 	bl	8011be0 <__swhatbuf_r>
 8011c50:	9900      	ldr	r1, [sp, #0]
 8011c52:	4605      	mov	r5, r0
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7fd ffcd 	bl	800fbf4 <_malloc_r>
 8011c5a:	b948      	cbnz	r0, 8011c70 <__smakebuf_r+0x44>
 8011c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c60:	059a      	lsls	r2, r3, #22
 8011c62:	d4ef      	bmi.n	8011c44 <__smakebuf_r+0x18>
 8011c64:	f023 0303 	bic.w	r3, r3, #3
 8011c68:	f043 0302 	orr.w	r3, r3, #2
 8011c6c:	81a3      	strh	r3, [r4, #12]
 8011c6e:	e7e3      	b.n	8011c38 <__smakebuf_r+0xc>
 8011c70:	4b0d      	ldr	r3, [pc, #52]	; (8011ca8 <__smakebuf_r+0x7c>)
 8011c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	6020      	str	r0, [r4, #0]
 8011c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c7c:	81a3      	strh	r3, [r4, #12]
 8011c7e:	9b00      	ldr	r3, [sp, #0]
 8011c80:	6163      	str	r3, [r4, #20]
 8011c82:	9b01      	ldr	r3, [sp, #4]
 8011c84:	6120      	str	r0, [r4, #16]
 8011c86:	b15b      	cbz	r3, 8011ca0 <__smakebuf_r+0x74>
 8011c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f000 fddf 	bl	8012850 <_isatty_r>
 8011c92:	b128      	cbz	r0, 8011ca0 <__smakebuf_r+0x74>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f023 0303 	bic.w	r3, r3, #3
 8011c9a:	f043 0301 	orr.w	r3, r3, #1
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	89a0      	ldrh	r0, [r4, #12]
 8011ca2:	4305      	orrs	r5, r0
 8011ca4:	81a5      	strh	r5, [r4, #12]
 8011ca6:	e7cd      	b.n	8011c44 <__smakebuf_r+0x18>
 8011ca8:	08011a09 	.word	0x08011a09

08011cac <__ascii_mbtowc>:
 8011cac:	b082      	sub	sp, #8
 8011cae:	b901      	cbnz	r1, 8011cb2 <__ascii_mbtowc+0x6>
 8011cb0:	a901      	add	r1, sp, #4
 8011cb2:	b142      	cbz	r2, 8011cc6 <__ascii_mbtowc+0x1a>
 8011cb4:	b14b      	cbz	r3, 8011cca <__ascii_mbtowc+0x1e>
 8011cb6:	7813      	ldrb	r3, [r2, #0]
 8011cb8:	600b      	str	r3, [r1, #0]
 8011cba:	7812      	ldrb	r2, [r2, #0]
 8011cbc:	1e10      	subs	r0, r2, #0
 8011cbe:	bf18      	it	ne
 8011cc0:	2001      	movne	r0, #1
 8011cc2:	b002      	add	sp, #8
 8011cc4:	4770      	bx	lr
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	e7fb      	b.n	8011cc2 <__ascii_mbtowc+0x16>
 8011cca:	f06f 0001 	mvn.w	r0, #1
 8011cce:	e7f8      	b.n	8011cc2 <__ascii_mbtowc+0x16>

08011cd0 <memmove>:
 8011cd0:	4288      	cmp	r0, r1
 8011cd2:	b510      	push	{r4, lr}
 8011cd4:	eb01 0402 	add.w	r4, r1, r2
 8011cd8:	d902      	bls.n	8011ce0 <memmove+0x10>
 8011cda:	4284      	cmp	r4, r0
 8011cdc:	4623      	mov	r3, r4
 8011cde:	d807      	bhi.n	8011cf0 <memmove+0x20>
 8011ce0:	1e43      	subs	r3, r0, #1
 8011ce2:	42a1      	cmp	r1, r4
 8011ce4:	d008      	beq.n	8011cf8 <memmove+0x28>
 8011ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011cee:	e7f8      	b.n	8011ce2 <memmove+0x12>
 8011cf0:	4402      	add	r2, r0
 8011cf2:	4601      	mov	r1, r0
 8011cf4:	428a      	cmp	r2, r1
 8011cf6:	d100      	bne.n	8011cfa <memmove+0x2a>
 8011cf8:	bd10      	pop	{r4, pc}
 8011cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d02:	e7f7      	b.n	8011cf4 <memmove+0x24>

08011d04 <__malloc_lock>:
 8011d04:	4801      	ldr	r0, [pc, #4]	; (8011d0c <__malloc_lock+0x8>)
 8011d06:	f7ff bf56 	b.w	8011bb6 <__retarget_lock_acquire_recursive>
 8011d0a:	bf00      	nop
 8011d0c:	20005d74 	.word	0x20005d74

08011d10 <__malloc_unlock>:
 8011d10:	4801      	ldr	r0, [pc, #4]	; (8011d18 <__malloc_unlock+0x8>)
 8011d12:	f7ff bf51 	b.w	8011bb8 <__retarget_lock_release_recursive>
 8011d16:	bf00      	nop
 8011d18:	20005d74 	.word	0x20005d74

08011d1c <_Balloc>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d20:	4604      	mov	r4, r0
 8011d22:	460d      	mov	r5, r1
 8011d24:	b976      	cbnz	r6, 8011d44 <_Balloc+0x28>
 8011d26:	2010      	movs	r0, #16
 8011d28:	f7fd fed2 	bl	800fad0 <malloc>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8011d30:	b920      	cbnz	r0, 8011d3c <_Balloc+0x20>
 8011d32:	4b18      	ldr	r3, [pc, #96]	; (8011d94 <_Balloc+0x78>)
 8011d34:	4818      	ldr	r0, [pc, #96]	; (8011d98 <_Balloc+0x7c>)
 8011d36:	2166      	movs	r1, #102	; 0x66
 8011d38:	f7fd fe70 	bl	800fa1c <__assert_func>
 8011d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d40:	6006      	str	r6, [r0, #0]
 8011d42:	60c6      	str	r6, [r0, #12]
 8011d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d46:	68f3      	ldr	r3, [r6, #12]
 8011d48:	b183      	cbz	r3, 8011d6c <_Balloc+0x50>
 8011d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d52:	b9b8      	cbnz	r0, 8011d84 <_Balloc+0x68>
 8011d54:	2101      	movs	r1, #1
 8011d56:	fa01 f605 	lsl.w	r6, r1, r5
 8011d5a:	1d72      	adds	r2, r6, #5
 8011d5c:	0092      	lsls	r2, r2, #2
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 fb60 	bl	8012424 <_calloc_r>
 8011d64:	b160      	cbz	r0, 8011d80 <_Balloc+0x64>
 8011d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d6a:	e00e      	b.n	8011d8a <_Balloc+0x6e>
 8011d6c:	2221      	movs	r2, #33	; 0x21
 8011d6e:	2104      	movs	r1, #4
 8011d70:	4620      	mov	r0, r4
 8011d72:	f000 fb57 	bl	8012424 <_calloc_r>
 8011d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d78:	60f0      	str	r0, [r6, #12]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1e4      	bne.n	8011d4a <_Balloc+0x2e>
 8011d80:	2000      	movs	r0, #0
 8011d82:	bd70      	pop	{r4, r5, r6, pc}
 8011d84:	6802      	ldr	r2, [r0, #0]
 8011d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d90:	e7f7      	b.n	8011d82 <_Balloc+0x66>
 8011d92:	bf00      	nop
 8011d94:	0802e82b 	.word	0x0802e82b
 8011d98:	0802e91a 	.word	0x0802e91a

08011d9c <_Bfree>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011da0:	4605      	mov	r5, r0
 8011da2:	460c      	mov	r4, r1
 8011da4:	b976      	cbnz	r6, 8011dc4 <_Bfree+0x28>
 8011da6:	2010      	movs	r0, #16
 8011da8:	f7fd fe92 	bl	800fad0 <malloc>
 8011dac:	4602      	mov	r2, r0
 8011dae:	6268      	str	r0, [r5, #36]	; 0x24
 8011db0:	b920      	cbnz	r0, 8011dbc <_Bfree+0x20>
 8011db2:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <_Bfree+0x3c>)
 8011db4:	4809      	ldr	r0, [pc, #36]	; (8011ddc <_Bfree+0x40>)
 8011db6:	218a      	movs	r1, #138	; 0x8a
 8011db8:	f7fd fe30 	bl	800fa1c <__assert_func>
 8011dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dc0:	6006      	str	r6, [r0, #0]
 8011dc2:	60c6      	str	r6, [r0, #12]
 8011dc4:	b13c      	cbz	r4, 8011dd6 <_Bfree+0x3a>
 8011dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011dc8:	6862      	ldr	r2, [r4, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011dd0:	6021      	str	r1, [r4, #0]
 8011dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011dd6:	bd70      	pop	{r4, r5, r6, pc}
 8011dd8:	0802e82b 	.word	0x0802e82b
 8011ddc:	0802e91a 	.word	0x0802e91a

08011de0 <__multadd>:
 8011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de4:	690d      	ldr	r5, [r1, #16]
 8011de6:	4607      	mov	r7, r0
 8011de8:	460c      	mov	r4, r1
 8011dea:	461e      	mov	r6, r3
 8011dec:	f101 0c14 	add.w	ip, r1, #20
 8011df0:	2000      	movs	r0, #0
 8011df2:	f8dc 3000 	ldr.w	r3, [ip]
 8011df6:	b299      	uxth	r1, r3
 8011df8:	fb02 6101 	mla	r1, r2, r1, r6
 8011dfc:	0c1e      	lsrs	r6, r3, #16
 8011dfe:	0c0b      	lsrs	r3, r1, #16
 8011e00:	fb02 3306 	mla	r3, r2, r6, r3
 8011e04:	b289      	uxth	r1, r1
 8011e06:	3001      	adds	r0, #1
 8011e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e0c:	4285      	cmp	r5, r0
 8011e0e:	f84c 1b04 	str.w	r1, [ip], #4
 8011e12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e16:	dcec      	bgt.n	8011df2 <__multadd+0x12>
 8011e18:	b30e      	cbz	r6, 8011e5e <__multadd+0x7e>
 8011e1a:	68a3      	ldr	r3, [r4, #8]
 8011e1c:	42ab      	cmp	r3, r5
 8011e1e:	dc19      	bgt.n	8011e54 <__multadd+0x74>
 8011e20:	6861      	ldr	r1, [r4, #4]
 8011e22:	4638      	mov	r0, r7
 8011e24:	3101      	adds	r1, #1
 8011e26:	f7ff ff79 	bl	8011d1c <_Balloc>
 8011e2a:	4680      	mov	r8, r0
 8011e2c:	b928      	cbnz	r0, 8011e3a <__multadd+0x5a>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	4b0c      	ldr	r3, [pc, #48]	; (8011e64 <__multadd+0x84>)
 8011e32:	480d      	ldr	r0, [pc, #52]	; (8011e68 <__multadd+0x88>)
 8011e34:	21b5      	movs	r1, #181	; 0xb5
 8011e36:	f7fd fdf1 	bl	800fa1c <__assert_func>
 8011e3a:	6922      	ldr	r2, [r4, #16]
 8011e3c:	3202      	adds	r2, #2
 8011e3e:	f104 010c 	add.w	r1, r4, #12
 8011e42:	0092      	lsls	r2, r2, #2
 8011e44:	300c      	adds	r0, #12
 8011e46:	f7fd fe53 	bl	800faf0 <memcpy>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff ffa5 	bl	8011d9c <_Bfree>
 8011e52:	4644      	mov	r4, r8
 8011e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e58:	3501      	adds	r5, #1
 8011e5a:	615e      	str	r6, [r3, #20]
 8011e5c:	6125      	str	r5, [r4, #16]
 8011e5e:	4620      	mov	r0, r4
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	0802e89d 	.word	0x0802e89d
 8011e68:	0802e91a 	.word	0x0802e91a

08011e6c <__hi0bits>:
 8011e6c:	0c03      	lsrs	r3, r0, #16
 8011e6e:	041b      	lsls	r3, r3, #16
 8011e70:	b9d3      	cbnz	r3, 8011ea8 <__hi0bits+0x3c>
 8011e72:	0400      	lsls	r0, r0, #16
 8011e74:	2310      	movs	r3, #16
 8011e76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011e7a:	bf04      	itt	eq
 8011e7c:	0200      	lsleq	r0, r0, #8
 8011e7e:	3308      	addeq	r3, #8
 8011e80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011e84:	bf04      	itt	eq
 8011e86:	0100      	lsleq	r0, r0, #4
 8011e88:	3304      	addeq	r3, #4
 8011e8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011e8e:	bf04      	itt	eq
 8011e90:	0080      	lsleq	r0, r0, #2
 8011e92:	3302      	addeq	r3, #2
 8011e94:	2800      	cmp	r0, #0
 8011e96:	db05      	blt.n	8011ea4 <__hi0bits+0x38>
 8011e98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011e9c:	f103 0301 	add.w	r3, r3, #1
 8011ea0:	bf08      	it	eq
 8011ea2:	2320      	moveq	r3, #32
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	4770      	bx	lr
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	e7e4      	b.n	8011e76 <__hi0bits+0xa>

08011eac <__lo0bits>:
 8011eac:	6803      	ldr	r3, [r0, #0]
 8011eae:	f013 0207 	ands.w	r2, r3, #7
 8011eb2:	4601      	mov	r1, r0
 8011eb4:	d00b      	beq.n	8011ece <__lo0bits+0x22>
 8011eb6:	07da      	lsls	r2, r3, #31
 8011eb8:	d423      	bmi.n	8011f02 <__lo0bits+0x56>
 8011eba:	0798      	lsls	r0, r3, #30
 8011ebc:	bf49      	itett	mi
 8011ebe:	085b      	lsrmi	r3, r3, #1
 8011ec0:	089b      	lsrpl	r3, r3, #2
 8011ec2:	2001      	movmi	r0, #1
 8011ec4:	600b      	strmi	r3, [r1, #0]
 8011ec6:	bf5c      	itt	pl
 8011ec8:	600b      	strpl	r3, [r1, #0]
 8011eca:	2002      	movpl	r0, #2
 8011ecc:	4770      	bx	lr
 8011ece:	b298      	uxth	r0, r3
 8011ed0:	b9a8      	cbnz	r0, 8011efe <__lo0bits+0x52>
 8011ed2:	0c1b      	lsrs	r3, r3, #16
 8011ed4:	2010      	movs	r0, #16
 8011ed6:	b2da      	uxtb	r2, r3
 8011ed8:	b90a      	cbnz	r2, 8011ede <__lo0bits+0x32>
 8011eda:	3008      	adds	r0, #8
 8011edc:	0a1b      	lsrs	r3, r3, #8
 8011ede:	071a      	lsls	r2, r3, #28
 8011ee0:	bf04      	itt	eq
 8011ee2:	091b      	lsreq	r3, r3, #4
 8011ee4:	3004      	addeq	r0, #4
 8011ee6:	079a      	lsls	r2, r3, #30
 8011ee8:	bf04      	itt	eq
 8011eea:	089b      	lsreq	r3, r3, #2
 8011eec:	3002      	addeq	r0, #2
 8011eee:	07da      	lsls	r2, r3, #31
 8011ef0:	d403      	bmi.n	8011efa <__lo0bits+0x4e>
 8011ef2:	085b      	lsrs	r3, r3, #1
 8011ef4:	f100 0001 	add.w	r0, r0, #1
 8011ef8:	d005      	beq.n	8011f06 <__lo0bits+0x5a>
 8011efa:	600b      	str	r3, [r1, #0]
 8011efc:	4770      	bx	lr
 8011efe:	4610      	mov	r0, r2
 8011f00:	e7e9      	b.n	8011ed6 <__lo0bits+0x2a>
 8011f02:	2000      	movs	r0, #0
 8011f04:	4770      	bx	lr
 8011f06:	2020      	movs	r0, #32
 8011f08:	4770      	bx	lr
	...

08011f0c <__i2b>:
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	460c      	mov	r4, r1
 8011f10:	2101      	movs	r1, #1
 8011f12:	f7ff ff03 	bl	8011d1c <_Balloc>
 8011f16:	4602      	mov	r2, r0
 8011f18:	b928      	cbnz	r0, 8011f26 <__i2b+0x1a>
 8011f1a:	4b05      	ldr	r3, [pc, #20]	; (8011f30 <__i2b+0x24>)
 8011f1c:	4805      	ldr	r0, [pc, #20]	; (8011f34 <__i2b+0x28>)
 8011f1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f22:	f7fd fd7b 	bl	800fa1c <__assert_func>
 8011f26:	2301      	movs	r3, #1
 8011f28:	6144      	str	r4, [r0, #20]
 8011f2a:	6103      	str	r3, [r0, #16]
 8011f2c:	bd10      	pop	{r4, pc}
 8011f2e:	bf00      	nop
 8011f30:	0802e89d 	.word	0x0802e89d
 8011f34:	0802e91a 	.word	0x0802e91a

08011f38 <__multiply>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	4691      	mov	r9, r2
 8011f3e:	690a      	ldr	r2, [r1, #16]
 8011f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	bfb8      	it	lt
 8011f48:	460b      	movlt	r3, r1
 8011f4a:	460c      	mov	r4, r1
 8011f4c:	bfbc      	itt	lt
 8011f4e:	464c      	movlt	r4, r9
 8011f50:	4699      	movlt	r9, r3
 8011f52:	6927      	ldr	r7, [r4, #16]
 8011f54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f58:	68a3      	ldr	r3, [r4, #8]
 8011f5a:	6861      	ldr	r1, [r4, #4]
 8011f5c:	eb07 060a 	add.w	r6, r7, sl
 8011f60:	42b3      	cmp	r3, r6
 8011f62:	b085      	sub	sp, #20
 8011f64:	bfb8      	it	lt
 8011f66:	3101      	addlt	r1, #1
 8011f68:	f7ff fed8 	bl	8011d1c <_Balloc>
 8011f6c:	b930      	cbnz	r0, 8011f7c <__multiply+0x44>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	4b44      	ldr	r3, [pc, #272]	; (8012084 <__multiply+0x14c>)
 8011f72:	4845      	ldr	r0, [pc, #276]	; (8012088 <__multiply+0x150>)
 8011f74:	f240 115d 	movw	r1, #349	; 0x15d
 8011f78:	f7fd fd50 	bl	800fa1c <__assert_func>
 8011f7c:	f100 0514 	add.w	r5, r0, #20
 8011f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f84:	462b      	mov	r3, r5
 8011f86:	2200      	movs	r2, #0
 8011f88:	4543      	cmp	r3, r8
 8011f8a:	d321      	bcc.n	8011fd0 <__multiply+0x98>
 8011f8c:	f104 0314 	add.w	r3, r4, #20
 8011f90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011f94:	f109 0314 	add.w	r3, r9, #20
 8011f98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011f9c:	9202      	str	r2, [sp, #8]
 8011f9e:	1b3a      	subs	r2, r7, r4
 8011fa0:	3a15      	subs	r2, #21
 8011fa2:	f022 0203 	bic.w	r2, r2, #3
 8011fa6:	3204      	adds	r2, #4
 8011fa8:	f104 0115 	add.w	r1, r4, #21
 8011fac:	428f      	cmp	r7, r1
 8011fae:	bf38      	it	cc
 8011fb0:	2204      	movcc	r2, #4
 8011fb2:	9201      	str	r2, [sp, #4]
 8011fb4:	9a02      	ldr	r2, [sp, #8]
 8011fb6:	9303      	str	r3, [sp, #12]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d80c      	bhi.n	8011fd6 <__multiply+0x9e>
 8011fbc:	2e00      	cmp	r6, #0
 8011fbe:	dd03      	ble.n	8011fc8 <__multiply+0x90>
 8011fc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d05a      	beq.n	801207e <__multiply+0x146>
 8011fc8:	6106      	str	r6, [r0, #16]
 8011fca:	b005      	add	sp, #20
 8011fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd0:	f843 2b04 	str.w	r2, [r3], #4
 8011fd4:	e7d8      	b.n	8011f88 <__multiply+0x50>
 8011fd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8011fda:	f1ba 0f00 	cmp.w	sl, #0
 8011fde:	d024      	beq.n	801202a <__multiply+0xf2>
 8011fe0:	f104 0e14 	add.w	lr, r4, #20
 8011fe4:	46a9      	mov	r9, r5
 8011fe6:	f04f 0c00 	mov.w	ip, #0
 8011fea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011fee:	f8d9 1000 	ldr.w	r1, [r9]
 8011ff2:	fa1f fb82 	uxth.w	fp, r2
 8011ff6:	b289      	uxth	r1, r1
 8011ff8:	fb0a 110b 	mla	r1, sl, fp, r1
 8011ffc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012000:	f8d9 2000 	ldr.w	r2, [r9]
 8012004:	4461      	add	r1, ip
 8012006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801200a:	fb0a c20b 	mla	r2, sl, fp, ip
 801200e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012012:	b289      	uxth	r1, r1
 8012014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012018:	4577      	cmp	r7, lr
 801201a:	f849 1b04 	str.w	r1, [r9], #4
 801201e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012022:	d8e2      	bhi.n	8011fea <__multiply+0xb2>
 8012024:	9a01      	ldr	r2, [sp, #4]
 8012026:	f845 c002 	str.w	ip, [r5, r2]
 801202a:	9a03      	ldr	r2, [sp, #12]
 801202c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012030:	3304      	adds	r3, #4
 8012032:	f1b9 0f00 	cmp.w	r9, #0
 8012036:	d020      	beq.n	801207a <__multiply+0x142>
 8012038:	6829      	ldr	r1, [r5, #0]
 801203a:	f104 0c14 	add.w	ip, r4, #20
 801203e:	46ae      	mov	lr, r5
 8012040:	f04f 0a00 	mov.w	sl, #0
 8012044:	f8bc b000 	ldrh.w	fp, [ip]
 8012048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801204c:	fb09 220b 	mla	r2, r9, fp, r2
 8012050:	4492      	add	sl, r2
 8012052:	b289      	uxth	r1, r1
 8012054:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012058:	f84e 1b04 	str.w	r1, [lr], #4
 801205c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012060:	f8be 1000 	ldrh.w	r1, [lr]
 8012064:	0c12      	lsrs	r2, r2, #16
 8012066:	fb09 1102 	mla	r1, r9, r2, r1
 801206a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801206e:	4567      	cmp	r7, ip
 8012070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012074:	d8e6      	bhi.n	8012044 <__multiply+0x10c>
 8012076:	9a01      	ldr	r2, [sp, #4]
 8012078:	50a9      	str	r1, [r5, r2]
 801207a:	3504      	adds	r5, #4
 801207c:	e79a      	b.n	8011fb4 <__multiply+0x7c>
 801207e:	3e01      	subs	r6, #1
 8012080:	e79c      	b.n	8011fbc <__multiply+0x84>
 8012082:	bf00      	nop
 8012084:	0802e89d 	.word	0x0802e89d
 8012088:	0802e91a 	.word	0x0802e91a

0801208c <__pow5mult>:
 801208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012090:	4615      	mov	r5, r2
 8012092:	f012 0203 	ands.w	r2, r2, #3
 8012096:	4606      	mov	r6, r0
 8012098:	460f      	mov	r7, r1
 801209a:	d007      	beq.n	80120ac <__pow5mult+0x20>
 801209c:	4c25      	ldr	r4, [pc, #148]	; (8012134 <__pow5mult+0xa8>)
 801209e:	3a01      	subs	r2, #1
 80120a0:	2300      	movs	r3, #0
 80120a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120a6:	f7ff fe9b 	bl	8011de0 <__multadd>
 80120aa:	4607      	mov	r7, r0
 80120ac:	10ad      	asrs	r5, r5, #2
 80120ae:	d03d      	beq.n	801212c <__pow5mult+0xa0>
 80120b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120b2:	b97c      	cbnz	r4, 80120d4 <__pow5mult+0x48>
 80120b4:	2010      	movs	r0, #16
 80120b6:	f7fd fd0b 	bl	800fad0 <malloc>
 80120ba:	4602      	mov	r2, r0
 80120bc:	6270      	str	r0, [r6, #36]	; 0x24
 80120be:	b928      	cbnz	r0, 80120cc <__pow5mult+0x40>
 80120c0:	4b1d      	ldr	r3, [pc, #116]	; (8012138 <__pow5mult+0xac>)
 80120c2:	481e      	ldr	r0, [pc, #120]	; (801213c <__pow5mult+0xb0>)
 80120c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80120c8:	f7fd fca8 	bl	800fa1c <__assert_func>
 80120cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120d0:	6004      	str	r4, [r0, #0]
 80120d2:	60c4      	str	r4, [r0, #12]
 80120d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80120d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120dc:	b94c      	cbnz	r4, 80120f2 <__pow5mult+0x66>
 80120de:	f240 2171 	movw	r1, #625	; 0x271
 80120e2:	4630      	mov	r0, r6
 80120e4:	f7ff ff12 	bl	8011f0c <__i2b>
 80120e8:	2300      	movs	r3, #0
 80120ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80120ee:	4604      	mov	r4, r0
 80120f0:	6003      	str	r3, [r0, #0]
 80120f2:	f04f 0900 	mov.w	r9, #0
 80120f6:	07eb      	lsls	r3, r5, #31
 80120f8:	d50a      	bpl.n	8012110 <__pow5mult+0x84>
 80120fa:	4639      	mov	r1, r7
 80120fc:	4622      	mov	r2, r4
 80120fe:	4630      	mov	r0, r6
 8012100:	f7ff ff1a 	bl	8011f38 <__multiply>
 8012104:	4639      	mov	r1, r7
 8012106:	4680      	mov	r8, r0
 8012108:	4630      	mov	r0, r6
 801210a:	f7ff fe47 	bl	8011d9c <_Bfree>
 801210e:	4647      	mov	r7, r8
 8012110:	106d      	asrs	r5, r5, #1
 8012112:	d00b      	beq.n	801212c <__pow5mult+0xa0>
 8012114:	6820      	ldr	r0, [r4, #0]
 8012116:	b938      	cbnz	r0, 8012128 <__pow5mult+0x9c>
 8012118:	4622      	mov	r2, r4
 801211a:	4621      	mov	r1, r4
 801211c:	4630      	mov	r0, r6
 801211e:	f7ff ff0b 	bl	8011f38 <__multiply>
 8012122:	6020      	str	r0, [r4, #0]
 8012124:	f8c0 9000 	str.w	r9, [r0]
 8012128:	4604      	mov	r4, r0
 801212a:	e7e4      	b.n	80120f6 <__pow5mult+0x6a>
 801212c:	4638      	mov	r0, r7
 801212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012132:	bf00      	nop
 8012134:	0802ea68 	.word	0x0802ea68
 8012138:	0802e82b 	.word	0x0802e82b
 801213c:	0802e91a 	.word	0x0802e91a

08012140 <__lshift>:
 8012140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012144:	460c      	mov	r4, r1
 8012146:	6849      	ldr	r1, [r1, #4]
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801214e:	68a3      	ldr	r3, [r4, #8]
 8012150:	4607      	mov	r7, r0
 8012152:	4691      	mov	r9, r2
 8012154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012158:	f108 0601 	add.w	r6, r8, #1
 801215c:	42b3      	cmp	r3, r6
 801215e:	db0b      	blt.n	8012178 <__lshift+0x38>
 8012160:	4638      	mov	r0, r7
 8012162:	f7ff fddb 	bl	8011d1c <_Balloc>
 8012166:	4605      	mov	r5, r0
 8012168:	b948      	cbnz	r0, 801217e <__lshift+0x3e>
 801216a:	4602      	mov	r2, r0
 801216c:	4b2a      	ldr	r3, [pc, #168]	; (8012218 <__lshift+0xd8>)
 801216e:	482b      	ldr	r0, [pc, #172]	; (801221c <__lshift+0xdc>)
 8012170:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012174:	f7fd fc52 	bl	800fa1c <__assert_func>
 8012178:	3101      	adds	r1, #1
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	e7ee      	b.n	801215c <__lshift+0x1c>
 801217e:	2300      	movs	r3, #0
 8012180:	f100 0114 	add.w	r1, r0, #20
 8012184:	f100 0210 	add.w	r2, r0, #16
 8012188:	4618      	mov	r0, r3
 801218a:	4553      	cmp	r3, sl
 801218c:	db37      	blt.n	80121fe <__lshift+0xbe>
 801218e:	6920      	ldr	r0, [r4, #16]
 8012190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012194:	f104 0314 	add.w	r3, r4, #20
 8012198:	f019 091f 	ands.w	r9, r9, #31
 801219c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80121a4:	d02f      	beq.n	8012206 <__lshift+0xc6>
 80121a6:	f1c9 0e20 	rsb	lr, r9, #32
 80121aa:	468a      	mov	sl, r1
 80121ac:	f04f 0c00 	mov.w	ip, #0
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	fa02 f209 	lsl.w	r2, r2, r9
 80121b6:	ea42 020c 	orr.w	r2, r2, ip
 80121ba:	f84a 2b04 	str.w	r2, [sl], #4
 80121be:	f853 2b04 	ldr.w	r2, [r3], #4
 80121c2:	4298      	cmp	r0, r3
 80121c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80121c8:	d8f2      	bhi.n	80121b0 <__lshift+0x70>
 80121ca:	1b03      	subs	r3, r0, r4
 80121cc:	3b15      	subs	r3, #21
 80121ce:	f023 0303 	bic.w	r3, r3, #3
 80121d2:	3304      	adds	r3, #4
 80121d4:	f104 0215 	add.w	r2, r4, #21
 80121d8:	4290      	cmp	r0, r2
 80121da:	bf38      	it	cc
 80121dc:	2304      	movcc	r3, #4
 80121de:	f841 c003 	str.w	ip, [r1, r3]
 80121e2:	f1bc 0f00 	cmp.w	ip, #0
 80121e6:	d001      	beq.n	80121ec <__lshift+0xac>
 80121e8:	f108 0602 	add.w	r6, r8, #2
 80121ec:	3e01      	subs	r6, #1
 80121ee:	4638      	mov	r0, r7
 80121f0:	612e      	str	r6, [r5, #16]
 80121f2:	4621      	mov	r1, r4
 80121f4:	f7ff fdd2 	bl	8011d9c <_Bfree>
 80121f8:	4628      	mov	r0, r5
 80121fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8012202:	3301      	adds	r3, #1
 8012204:	e7c1      	b.n	801218a <__lshift+0x4a>
 8012206:	3904      	subs	r1, #4
 8012208:	f853 2b04 	ldr.w	r2, [r3], #4
 801220c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012210:	4298      	cmp	r0, r3
 8012212:	d8f9      	bhi.n	8012208 <__lshift+0xc8>
 8012214:	e7ea      	b.n	80121ec <__lshift+0xac>
 8012216:	bf00      	nop
 8012218:	0802e89d 	.word	0x0802e89d
 801221c:	0802e91a 	.word	0x0802e91a

08012220 <__mcmp>:
 8012220:	b530      	push	{r4, r5, lr}
 8012222:	6902      	ldr	r2, [r0, #16]
 8012224:	690c      	ldr	r4, [r1, #16]
 8012226:	1b12      	subs	r2, r2, r4
 8012228:	d10e      	bne.n	8012248 <__mcmp+0x28>
 801222a:	f100 0314 	add.w	r3, r0, #20
 801222e:	3114      	adds	r1, #20
 8012230:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012234:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012238:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801223c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012240:	42a5      	cmp	r5, r4
 8012242:	d003      	beq.n	801224c <__mcmp+0x2c>
 8012244:	d305      	bcc.n	8012252 <__mcmp+0x32>
 8012246:	2201      	movs	r2, #1
 8012248:	4610      	mov	r0, r2
 801224a:	bd30      	pop	{r4, r5, pc}
 801224c:	4283      	cmp	r3, r0
 801224e:	d3f3      	bcc.n	8012238 <__mcmp+0x18>
 8012250:	e7fa      	b.n	8012248 <__mcmp+0x28>
 8012252:	f04f 32ff 	mov.w	r2, #4294967295
 8012256:	e7f7      	b.n	8012248 <__mcmp+0x28>

08012258 <__mdiff>:
 8012258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	460c      	mov	r4, r1
 801225e:	4606      	mov	r6, r0
 8012260:	4611      	mov	r1, r2
 8012262:	4620      	mov	r0, r4
 8012264:	4690      	mov	r8, r2
 8012266:	f7ff ffdb 	bl	8012220 <__mcmp>
 801226a:	1e05      	subs	r5, r0, #0
 801226c:	d110      	bne.n	8012290 <__mdiff+0x38>
 801226e:	4629      	mov	r1, r5
 8012270:	4630      	mov	r0, r6
 8012272:	f7ff fd53 	bl	8011d1c <_Balloc>
 8012276:	b930      	cbnz	r0, 8012286 <__mdiff+0x2e>
 8012278:	4b3a      	ldr	r3, [pc, #232]	; (8012364 <__mdiff+0x10c>)
 801227a:	4602      	mov	r2, r0
 801227c:	f240 2132 	movw	r1, #562	; 0x232
 8012280:	4839      	ldr	r0, [pc, #228]	; (8012368 <__mdiff+0x110>)
 8012282:	f7fd fbcb 	bl	800fa1c <__assert_func>
 8012286:	2301      	movs	r3, #1
 8012288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801228c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012290:	bfa4      	itt	ge
 8012292:	4643      	movge	r3, r8
 8012294:	46a0      	movge	r8, r4
 8012296:	4630      	mov	r0, r6
 8012298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801229c:	bfa6      	itte	ge
 801229e:	461c      	movge	r4, r3
 80122a0:	2500      	movge	r5, #0
 80122a2:	2501      	movlt	r5, #1
 80122a4:	f7ff fd3a 	bl	8011d1c <_Balloc>
 80122a8:	b920      	cbnz	r0, 80122b4 <__mdiff+0x5c>
 80122aa:	4b2e      	ldr	r3, [pc, #184]	; (8012364 <__mdiff+0x10c>)
 80122ac:	4602      	mov	r2, r0
 80122ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122b2:	e7e5      	b.n	8012280 <__mdiff+0x28>
 80122b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80122b8:	6926      	ldr	r6, [r4, #16]
 80122ba:	60c5      	str	r5, [r0, #12]
 80122bc:	f104 0914 	add.w	r9, r4, #20
 80122c0:	f108 0514 	add.w	r5, r8, #20
 80122c4:	f100 0e14 	add.w	lr, r0, #20
 80122c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80122cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80122d0:	f108 0210 	add.w	r2, r8, #16
 80122d4:	46f2      	mov	sl, lr
 80122d6:	2100      	movs	r1, #0
 80122d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80122dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80122e0:	fa1f f883 	uxth.w	r8, r3
 80122e4:	fa11 f18b 	uxtah	r1, r1, fp
 80122e8:	0c1b      	lsrs	r3, r3, #16
 80122ea:	eba1 0808 	sub.w	r8, r1, r8
 80122ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80122f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80122f6:	fa1f f888 	uxth.w	r8, r8
 80122fa:	1419      	asrs	r1, r3, #16
 80122fc:	454e      	cmp	r6, r9
 80122fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012302:	f84a 3b04 	str.w	r3, [sl], #4
 8012306:	d8e7      	bhi.n	80122d8 <__mdiff+0x80>
 8012308:	1b33      	subs	r3, r6, r4
 801230a:	3b15      	subs	r3, #21
 801230c:	f023 0303 	bic.w	r3, r3, #3
 8012310:	3304      	adds	r3, #4
 8012312:	3415      	adds	r4, #21
 8012314:	42a6      	cmp	r6, r4
 8012316:	bf38      	it	cc
 8012318:	2304      	movcc	r3, #4
 801231a:	441d      	add	r5, r3
 801231c:	4473      	add	r3, lr
 801231e:	469e      	mov	lr, r3
 8012320:	462e      	mov	r6, r5
 8012322:	4566      	cmp	r6, ip
 8012324:	d30e      	bcc.n	8012344 <__mdiff+0xec>
 8012326:	f10c 0203 	add.w	r2, ip, #3
 801232a:	1b52      	subs	r2, r2, r5
 801232c:	f022 0203 	bic.w	r2, r2, #3
 8012330:	3d03      	subs	r5, #3
 8012332:	45ac      	cmp	ip, r5
 8012334:	bf38      	it	cc
 8012336:	2200      	movcc	r2, #0
 8012338:	441a      	add	r2, r3
 801233a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801233e:	b17b      	cbz	r3, 8012360 <__mdiff+0x108>
 8012340:	6107      	str	r7, [r0, #16]
 8012342:	e7a3      	b.n	801228c <__mdiff+0x34>
 8012344:	f856 8b04 	ldr.w	r8, [r6], #4
 8012348:	fa11 f288 	uxtah	r2, r1, r8
 801234c:	1414      	asrs	r4, r2, #16
 801234e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012352:	b292      	uxth	r2, r2
 8012354:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012358:	f84e 2b04 	str.w	r2, [lr], #4
 801235c:	1421      	asrs	r1, r4, #16
 801235e:	e7e0      	b.n	8012322 <__mdiff+0xca>
 8012360:	3f01      	subs	r7, #1
 8012362:	e7ea      	b.n	801233a <__mdiff+0xe2>
 8012364:	0802e89d 	.word	0x0802e89d
 8012368:	0802e91a 	.word	0x0802e91a

0801236c <__d2b>:
 801236c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012370:	4689      	mov	r9, r1
 8012372:	2101      	movs	r1, #1
 8012374:	ec57 6b10 	vmov	r6, r7, d0
 8012378:	4690      	mov	r8, r2
 801237a:	f7ff fccf 	bl	8011d1c <_Balloc>
 801237e:	4604      	mov	r4, r0
 8012380:	b930      	cbnz	r0, 8012390 <__d2b+0x24>
 8012382:	4602      	mov	r2, r0
 8012384:	4b25      	ldr	r3, [pc, #148]	; (801241c <__d2b+0xb0>)
 8012386:	4826      	ldr	r0, [pc, #152]	; (8012420 <__d2b+0xb4>)
 8012388:	f240 310a 	movw	r1, #778	; 0x30a
 801238c:	f7fd fb46 	bl	800fa1c <__assert_func>
 8012390:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012394:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012398:	bb35      	cbnz	r5, 80123e8 <__d2b+0x7c>
 801239a:	2e00      	cmp	r6, #0
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	d028      	beq.n	80123f2 <__d2b+0x86>
 80123a0:	4668      	mov	r0, sp
 80123a2:	9600      	str	r6, [sp, #0]
 80123a4:	f7ff fd82 	bl	8011eac <__lo0bits>
 80123a8:	9900      	ldr	r1, [sp, #0]
 80123aa:	b300      	cbz	r0, 80123ee <__d2b+0x82>
 80123ac:	9a01      	ldr	r2, [sp, #4]
 80123ae:	f1c0 0320 	rsb	r3, r0, #32
 80123b2:	fa02 f303 	lsl.w	r3, r2, r3
 80123b6:	430b      	orrs	r3, r1
 80123b8:	40c2      	lsrs	r2, r0
 80123ba:	6163      	str	r3, [r4, #20]
 80123bc:	9201      	str	r2, [sp, #4]
 80123be:	9b01      	ldr	r3, [sp, #4]
 80123c0:	61a3      	str	r3, [r4, #24]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	bf14      	ite	ne
 80123c6:	2202      	movne	r2, #2
 80123c8:	2201      	moveq	r2, #1
 80123ca:	6122      	str	r2, [r4, #16]
 80123cc:	b1d5      	cbz	r5, 8012404 <__d2b+0x98>
 80123ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80123d2:	4405      	add	r5, r0
 80123d4:	f8c9 5000 	str.w	r5, [r9]
 80123d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80123dc:	f8c8 0000 	str.w	r0, [r8]
 80123e0:	4620      	mov	r0, r4
 80123e2:	b003      	add	sp, #12
 80123e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80123ec:	e7d5      	b.n	801239a <__d2b+0x2e>
 80123ee:	6161      	str	r1, [r4, #20]
 80123f0:	e7e5      	b.n	80123be <__d2b+0x52>
 80123f2:	a801      	add	r0, sp, #4
 80123f4:	f7ff fd5a 	bl	8011eac <__lo0bits>
 80123f8:	9b01      	ldr	r3, [sp, #4]
 80123fa:	6163      	str	r3, [r4, #20]
 80123fc:	2201      	movs	r2, #1
 80123fe:	6122      	str	r2, [r4, #16]
 8012400:	3020      	adds	r0, #32
 8012402:	e7e3      	b.n	80123cc <__d2b+0x60>
 8012404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012408:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801240c:	f8c9 0000 	str.w	r0, [r9]
 8012410:	6918      	ldr	r0, [r3, #16]
 8012412:	f7ff fd2b 	bl	8011e6c <__hi0bits>
 8012416:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801241a:	e7df      	b.n	80123dc <__d2b+0x70>
 801241c:	0802e89d 	.word	0x0802e89d
 8012420:	0802e91a 	.word	0x0802e91a

08012424 <_calloc_r>:
 8012424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012426:	fba1 2402 	umull	r2, r4, r1, r2
 801242a:	b94c      	cbnz	r4, 8012440 <_calloc_r+0x1c>
 801242c:	4611      	mov	r1, r2
 801242e:	9201      	str	r2, [sp, #4]
 8012430:	f7fd fbe0 	bl	800fbf4 <_malloc_r>
 8012434:	9a01      	ldr	r2, [sp, #4]
 8012436:	4605      	mov	r5, r0
 8012438:	b930      	cbnz	r0, 8012448 <_calloc_r+0x24>
 801243a:	4628      	mov	r0, r5
 801243c:	b003      	add	sp, #12
 801243e:	bd30      	pop	{r4, r5, pc}
 8012440:	220c      	movs	r2, #12
 8012442:	6002      	str	r2, [r0, #0]
 8012444:	2500      	movs	r5, #0
 8012446:	e7f8      	b.n	801243a <_calloc_r+0x16>
 8012448:	4621      	mov	r1, r4
 801244a:	f7fd fb5f 	bl	800fb0c <memset>
 801244e:	e7f4      	b.n	801243a <_calloc_r+0x16>

08012450 <_realloc_r>:
 8012450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012454:	4680      	mov	r8, r0
 8012456:	4614      	mov	r4, r2
 8012458:	460e      	mov	r6, r1
 801245a:	b921      	cbnz	r1, 8012466 <_realloc_r+0x16>
 801245c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012460:	4611      	mov	r1, r2
 8012462:	f7fd bbc7 	b.w	800fbf4 <_malloc_r>
 8012466:	b92a      	cbnz	r2, 8012474 <_realloc_r+0x24>
 8012468:	f7fd fb58 	bl	800fb1c <_free_r>
 801246c:	4625      	mov	r5, r4
 801246e:	4628      	mov	r0, r5
 8012470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012474:	f000 f9fc 	bl	8012870 <_malloc_usable_size_r>
 8012478:	4284      	cmp	r4, r0
 801247a:	4607      	mov	r7, r0
 801247c:	d802      	bhi.n	8012484 <_realloc_r+0x34>
 801247e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012482:	d812      	bhi.n	80124aa <_realloc_r+0x5a>
 8012484:	4621      	mov	r1, r4
 8012486:	4640      	mov	r0, r8
 8012488:	f7fd fbb4 	bl	800fbf4 <_malloc_r>
 801248c:	4605      	mov	r5, r0
 801248e:	2800      	cmp	r0, #0
 8012490:	d0ed      	beq.n	801246e <_realloc_r+0x1e>
 8012492:	42bc      	cmp	r4, r7
 8012494:	4622      	mov	r2, r4
 8012496:	4631      	mov	r1, r6
 8012498:	bf28      	it	cs
 801249a:	463a      	movcs	r2, r7
 801249c:	f7fd fb28 	bl	800faf0 <memcpy>
 80124a0:	4631      	mov	r1, r6
 80124a2:	4640      	mov	r0, r8
 80124a4:	f7fd fb3a 	bl	800fb1c <_free_r>
 80124a8:	e7e1      	b.n	801246e <_realloc_r+0x1e>
 80124aa:	4635      	mov	r5, r6
 80124ac:	e7df      	b.n	801246e <_realloc_r+0x1e>

080124ae <__ssputs_r>:
 80124ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b2:	688e      	ldr	r6, [r1, #8]
 80124b4:	429e      	cmp	r6, r3
 80124b6:	4682      	mov	sl, r0
 80124b8:	460c      	mov	r4, r1
 80124ba:	4690      	mov	r8, r2
 80124bc:	461f      	mov	r7, r3
 80124be:	d838      	bhi.n	8012532 <__ssputs_r+0x84>
 80124c0:	898a      	ldrh	r2, [r1, #12]
 80124c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80124c6:	d032      	beq.n	801252e <__ssputs_r+0x80>
 80124c8:	6825      	ldr	r5, [r4, #0]
 80124ca:	6909      	ldr	r1, [r1, #16]
 80124cc:	eba5 0901 	sub.w	r9, r5, r1
 80124d0:	6965      	ldr	r5, [r4, #20]
 80124d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80124da:	3301      	adds	r3, #1
 80124dc:	444b      	add	r3, r9
 80124de:	106d      	asrs	r5, r5, #1
 80124e0:	429d      	cmp	r5, r3
 80124e2:	bf38      	it	cc
 80124e4:	461d      	movcc	r5, r3
 80124e6:	0553      	lsls	r3, r2, #21
 80124e8:	d531      	bpl.n	801254e <__ssputs_r+0xa0>
 80124ea:	4629      	mov	r1, r5
 80124ec:	f7fd fb82 	bl	800fbf4 <_malloc_r>
 80124f0:	4606      	mov	r6, r0
 80124f2:	b950      	cbnz	r0, 801250a <__ssputs_r+0x5c>
 80124f4:	230c      	movs	r3, #12
 80124f6:	f8ca 3000 	str.w	r3, [sl]
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012500:	81a3      	strh	r3, [r4, #12]
 8012502:	f04f 30ff 	mov.w	r0, #4294967295
 8012506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801250a:	6921      	ldr	r1, [r4, #16]
 801250c:	464a      	mov	r2, r9
 801250e:	f7fd faef 	bl	800faf0 <memcpy>
 8012512:	89a3      	ldrh	r3, [r4, #12]
 8012514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801251c:	81a3      	strh	r3, [r4, #12]
 801251e:	6126      	str	r6, [r4, #16]
 8012520:	6165      	str	r5, [r4, #20]
 8012522:	444e      	add	r6, r9
 8012524:	eba5 0509 	sub.w	r5, r5, r9
 8012528:	6026      	str	r6, [r4, #0]
 801252a:	60a5      	str	r5, [r4, #8]
 801252c:	463e      	mov	r6, r7
 801252e:	42be      	cmp	r6, r7
 8012530:	d900      	bls.n	8012534 <__ssputs_r+0x86>
 8012532:	463e      	mov	r6, r7
 8012534:	6820      	ldr	r0, [r4, #0]
 8012536:	4632      	mov	r2, r6
 8012538:	4641      	mov	r1, r8
 801253a:	f7ff fbc9 	bl	8011cd0 <memmove>
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	1b9b      	subs	r3, r3, r6
 8012542:	60a3      	str	r3, [r4, #8]
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	4433      	add	r3, r6
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	2000      	movs	r0, #0
 801254c:	e7db      	b.n	8012506 <__ssputs_r+0x58>
 801254e:	462a      	mov	r2, r5
 8012550:	f7ff ff7e 	bl	8012450 <_realloc_r>
 8012554:	4606      	mov	r6, r0
 8012556:	2800      	cmp	r0, #0
 8012558:	d1e1      	bne.n	801251e <__ssputs_r+0x70>
 801255a:	6921      	ldr	r1, [r4, #16]
 801255c:	4650      	mov	r0, sl
 801255e:	f7fd fadd 	bl	800fb1c <_free_r>
 8012562:	e7c7      	b.n	80124f4 <__ssputs_r+0x46>

08012564 <_svfiprintf_r>:
 8012564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012568:	4698      	mov	r8, r3
 801256a:	898b      	ldrh	r3, [r1, #12]
 801256c:	061b      	lsls	r3, r3, #24
 801256e:	b09d      	sub	sp, #116	; 0x74
 8012570:	4607      	mov	r7, r0
 8012572:	460d      	mov	r5, r1
 8012574:	4614      	mov	r4, r2
 8012576:	d50e      	bpl.n	8012596 <_svfiprintf_r+0x32>
 8012578:	690b      	ldr	r3, [r1, #16]
 801257a:	b963      	cbnz	r3, 8012596 <_svfiprintf_r+0x32>
 801257c:	2140      	movs	r1, #64	; 0x40
 801257e:	f7fd fb39 	bl	800fbf4 <_malloc_r>
 8012582:	6028      	str	r0, [r5, #0]
 8012584:	6128      	str	r0, [r5, #16]
 8012586:	b920      	cbnz	r0, 8012592 <_svfiprintf_r+0x2e>
 8012588:	230c      	movs	r3, #12
 801258a:	603b      	str	r3, [r7, #0]
 801258c:	f04f 30ff 	mov.w	r0, #4294967295
 8012590:	e0d1      	b.n	8012736 <_svfiprintf_r+0x1d2>
 8012592:	2340      	movs	r3, #64	; 0x40
 8012594:	616b      	str	r3, [r5, #20]
 8012596:	2300      	movs	r3, #0
 8012598:	9309      	str	r3, [sp, #36]	; 0x24
 801259a:	2320      	movs	r3, #32
 801259c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80125a4:	2330      	movs	r3, #48	; 0x30
 80125a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012750 <_svfiprintf_r+0x1ec>
 80125aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125ae:	f04f 0901 	mov.w	r9, #1
 80125b2:	4623      	mov	r3, r4
 80125b4:	469a      	mov	sl, r3
 80125b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125ba:	b10a      	cbz	r2, 80125c0 <_svfiprintf_r+0x5c>
 80125bc:	2a25      	cmp	r2, #37	; 0x25
 80125be:	d1f9      	bne.n	80125b4 <_svfiprintf_r+0x50>
 80125c0:	ebba 0b04 	subs.w	fp, sl, r4
 80125c4:	d00b      	beq.n	80125de <_svfiprintf_r+0x7a>
 80125c6:	465b      	mov	r3, fp
 80125c8:	4622      	mov	r2, r4
 80125ca:	4629      	mov	r1, r5
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7ff ff6e 	bl	80124ae <__ssputs_r>
 80125d2:	3001      	adds	r0, #1
 80125d4:	f000 80aa 	beq.w	801272c <_svfiprintf_r+0x1c8>
 80125d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125da:	445a      	add	r2, fp
 80125dc:	9209      	str	r2, [sp, #36]	; 0x24
 80125de:	f89a 3000 	ldrb.w	r3, [sl]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f000 80a2 	beq.w	801272c <_svfiprintf_r+0x1c8>
 80125e8:	2300      	movs	r3, #0
 80125ea:	f04f 32ff 	mov.w	r2, #4294967295
 80125ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125f2:	f10a 0a01 	add.w	sl, sl, #1
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	9307      	str	r3, [sp, #28]
 80125fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125fe:	931a      	str	r3, [sp, #104]	; 0x68
 8012600:	4654      	mov	r4, sl
 8012602:	2205      	movs	r2, #5
 8012604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012608:	4851      	ldr	r0, [pc, #324]	; (8012750 <_svfiprintf_r+0x1ec>)
 801260a:	f7ed fdf9 	bl	8000200 <memchr>
 801260e:	9a04      	ldr	r2, [sp, #16]
 8012610:	b9d8      	cbnz	r0, 801264a <_svfiprintf_r+0xe6>
 8012612:	06d0      	lsls	r0, r2, #27
 8012614:	bf44      	itt	mi
 8012616:	2320      	movmi	r3, #32
 8012618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801261c:	0711      	lsls	r1, r2, #28
 801261e:	bf44      	itt	mi
 8012620:	232b      	movmi	r3, #43	; 0x2b
 8012622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012626:	f89a 3000 	ldrb.w	r3, [sl]
 801262a:	2b2a      	cmp	r3, #42	; 0x2a
 801262c:	d015      	beq.n	801265a <_svfiprintf_r+0xf6>
 801262e:	9a07      	ldr	r2, [sp, #28]
 8012630:	4654      	mov	r4, sl
 8012632:	2000      	movs	r0, #0
 8012634:	f04f 0c0a 	mov.w	ip, #10
 8012638:	4621      	mov	r1, r4
 801263a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801263e:	3b30      	subs	r3, #48	; 0x30
 8012640:	2b09      	cmp	r3, #9
 8012642:	d94e      	bls.n	80126e2 <_svfiprintf_r+0x17e>
 8012644:	b1b0      	cbz	r0, 8012674 <_svfiprintf_r+0x110>
 8012646:	9207      	str	r2, [sp, #28]
 8012648:	e014      	b.n	8012674 <_svfiprintf_r+0x110>
 801264a:	eba0 0308 	sub.w	r3, r0, r8
 801264e:	fa09 f303 	lsl.w	r3, r9, r3
 8012652:	4313      	orrs	r3, r2
 8012654:	9304      	str	r3, [sp, #16]
 8012656:	46a2      	mov	sl, r4
 8012658:	e7d2      	b.n	8012600 <_svfiprintf_r+0x9c>
 801265a:	9b03      	ldr	r3, [sp, #12]
 801265c:	1d19      	adds	r1, r3, #4
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	9103      	str	r1, [sp, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	bfbb      	ittet	lt
 8012666:	425b      	neglt	r3, r3
 8012668:	f042 0202 	orrlt.w	r2, r2, #2
 801266c:	9307      	strge	r3, [sp, #28]
 801266e:	9307      	strlt	r3, [sp, #28]
 8012670:	bfb8      	it	lt
 8012672:	9204      	strlt	r2, [sp, #16]
 8012674:	7823      	ldrb	r3, [r4, #0]
 8012676:	2b2e      	cmp	r3, #46	; 0x2e
 8012678:	d10c      	bne.n	8012694 <_svfiprintf_r+0x130>
 801267a:	7863      	ldrb	r3, [r4, #1]
 801267c:	2b2a      	cmp	r3, #42	; 0x2a
 801267e:	d135      	bne.n	80126ec <_svfiprintf_r+0x188>
 8012680:	9b03      	ldr	r3, [sp, #12]
 8012682:	1d1a      	adds	r2, r3, #4
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	9203      	str	r2, [sp, #12]
 8012688:	2b00      	cmp	r3, #0
 801268a:	bfb8      	it	lt
 801268c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012690:	3402      	adds	r4, #2
 8012692:	9305      	str	r3, [sp, #20]
 8012694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012760 <_svfiprintf_r+0x1fc>
 8012698:	7821      	ldrb	r1, [r4, #0]
 801269a:	2203      	movs	r2, #3
 801269c:	4650      	mov	r0, sl
 801269e:	f7ed fdaf 	bl	8000200 <memchr>
 80126a2:	b140      	cbz	r0, 80126b6 <_svfiprintf_r+0x152>
 80126a4:	2340      	movs	r3, #64	; 0x40
 80126a6:	eba0 000a 	sub.w	r0, r0, sl
 80126aa:	fa03 f000 	lsl.w	r0, r3, r0
 80126ae:	9b04      	ldr	r3, [sp, #16]
 80126b0:	4303      	orrs	r3, r0
 80126b2:	3401      	adds	r4, #1
 80126b4:	9304      	str	r3, [sp, #16]
 80126b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ba:	4826      	ldr	r0, [pc, #152]	; (8012754 <_svfiprintf_r+0x1f0>)
 80126bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126c0:	2206      	movs	r2, #6
 80126c2:	f7ed fd9d 	bl	8000200 <memchr>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d038      	beq.n	801273c <_svfiprintf_r+0x1d8>
 80126ca:	4b23      	ldr	r3, [pc, #140]	; (8012758 <_svfiprintf_r+0x1f4>)
 80126cc:	bb1b      	cbnz	r3, 8012716 <_svfiprintf_r+0x1b2>
 80126ce:	9b03      	ldr	r3, [sp, #12]
 80126d0:	3307      	adds	r3, #7
 80126d2:	f023 0307 	bic.w	r3, r3, #7
 80126d6:	3308      	adds	r3, #8
 80126d8:	9303      	str	r3, [sp, #12]
 80126da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126dc:	4433      	add	r3, r6
 80126de:	9309      	str	r3, [sp, #36]	; 0x24
 80126e0:	e767      	b.n	80125b2 <_svfiprintf_r+0x4e>
 80126e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80126e6:	460c      	mov	r4, r1
 80126e8:	2001      	movs	r0, #1
 80126ea:	e7a5      	b.n	8012638 <_svfiprintf_r+0xd4>
 80126ec:	2300      	movs	r3, #0
 80126ee:	3401      	adds	r4, #1
 80126f0:	9305      	str	r3, [sp, #20]
 80126f2:	4619      	mov	r1, r3
 80126f4:	f04f 0c0a 	mov.w	ip, #10
 80126f8:	4620      	mov	r0, r4
 80126fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126fe:	3a30      	subs	r2, #48	; 0x30
 8012700:	2a09      	cmp	r2, #9
 8012702:	d903      	bls.n	801270c <_svfiprintf_r+0x1a8>
 8012704:	2b00      	cmp	r3, #0
 8012706:	d0c5      	beq.n	8012694 <_svfiprintf_r+0x130>
 8012708:	9105      	str	r1, [sp, #20]
 801270a:	e7c3      	b.n	8012694 <_svfiprintf_r+0x130>
 801270c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012710:	4604      	mov	r4, r0
 8012712:	2301      	movs	r3, #1
 8012714:	e7f0      	b.n	80126f8 <_svfiprintf_r+0x194>
 8012716:	ab03      	add	r3, sp, #12
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	462a      	mov	r2, r5
 801271c:	4b0f      	ldr	r3, [pc, #60]	; (801275c <_svfiprintf_r+0x1f8>)
 801271e:	a904      	add	r1, sp, #16
 8012720:	4638      	mov	r0, r7
 8012722:	f7fd fcd5 	bl	80100d0 <_printf_float>
 8012726:	1c42      	adds	r2, r0, #1
 8012728:	4606      	mov	r6, r0
 801272a:	d1d6      	bne.n	80126da <_svfiprintf_r+0x176>
 801272c:	89ab      	ldrh	r3, [r5, #12]
 801272e:	065b      	lsls	r3, r3, #25
 8012730:	f53f af2c 	bmi.w	801258c <_svfiprintf_r+0x28>
 8012734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012736:	b01d      	add	sp, #116	; 0x74
 8012738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273c:	ab03      	add	r3, sp, #12
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	462a      	mov	r2, r5
 8012742:	4b06      	ldr	r3, [pc, #24]	; (801275c <_svfiprintf_r+0x1f8>)
 8012744:	a904      	add	r1, sp, #16
 8012746:	4638      	mov	r0, r7
 8012748:	f7fd ff66 	bl	8010618 <_printf_i>
 801274c:	e7eb      	b.n	8012726 <_svfiprintf_r+0x1c2>
 801274e:	bf00      	nop
 8012750:	0802e6d8 	.word	0x0802e6d8
 8012754:	0802e6e2 	.word	0x0802e6e2
 8012758:	080100d1 	.word	0x080100d1
 801275c:	080124af 	.word	0x080124af
 8012760:	0802e6de 	.word	0x0802e6de

08012764 <_read_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	4d07      	ldr	r5, [pc, #28]	; (8012784 <_read_r+0x20>)
 8012768:	4604      	mov	r4, r0
 801276a:	4608      	mov	r0, r1
 801276c:	4611      	mov	r1, r2
 801276e:	2200      	movs	r2, #0
 8012770:	602a      	str	r2, [r5, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	f7f2 fa8c 	bl	8004c90 <_read>
 8012778:	1c43      	adds	r3, r0, #1
 801277a:	d102      	bne.n	8012782 <_read_r+0x1e>
 801277c:	682b      	ldr	r3, [r5, #0]
 801277e:	b103      	cbz	r3, 8012782 <_read_r+0x1e>
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	bd38      	pop	{r3, r4, r5, pc}
 8012784:	20005d78 	.word	0x20005d78

08012788 <_raise_r>:
 8012788:	291f      	cmp	r1, #31
 801278a:	b538      	push	{r3, r4, r5, lr}
 801278c:	4604      	mov	r4, r0
 801278e:	460d      	mov	r5, r1
 8012790:	d904      	bls.n	801279c <_raise_r+0x14>
 8012792:	2316      	movs	r3, #22
 8012794:	6003      	str	r3, [r0, #0]
 8012796:	f04f 30ff 	mov.w	r0, #4294967295
 801279a:	bd38      	pop	{r3, r4, r5, pc}
 801279c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801279e:	b112      	cbz	r2, 80127a6 <_raise_r+0x1e>
 80127a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127a4:	b94b      	cbnz	r3, 80127ba <_raise_r+0x32>
 80127a6:	4620      	mov	r0, r4
 80127a8:	f000 f830 	bl	801280c <_getpid_r>
 80127ac:	462a      	mov	r2, r5
 80127ae:	4601      	mov	r1, r0
 80127b0:	4620      	mov	r0, r4
 80127b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127b6:	f000 b817 	b.w	80127e8 <_kill_r>
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d00a      	beq.n	80127d4 <_raise_r+0x4c>
 80127be:	1c59      	adds	r1, r3, #1
 80127c0:	d103      	bne.n	80127ca <_raise_r+0x42>
 80127c2:	2316      	movs	r3, #22
 80127c4:	6003      	str	r3, [r0, #0]
 80127c6:	2001      	movs	r0, #1
 80127c8:	e7e7      	b.n	801279a <_raise_r+0x12>
 80127ca:	2400      	movs	r4, #0
 80127cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80127d0:	4628      	mov	r0, r5
 80127d2:	4798      	blx	r3
 80127d4:	2000      	movs	r0, #0
 80127d6:	e7e0      	b.n	801279a <_raise_r+0x12>

080127d8 <raise>:
 80127d8:	4b02      	ldr	r3, [pc, #8]	; (80127e4 <raise+0xc>)
 80127da:	4601      	mov	r1, r0
 80127dc:	6818      	ldr	r0, [r3, #0]
 80127de:	f7ff bfd3 	b.w	8012788 <_raise_r>
 80127e2:	bf00      	nop
 80127e4:	200000f8 	.word	0x200000f8

080127e8 <_kill_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4d07      	ldr	r5, [pc, #28]	; (8012808 <_kill_r+0x20>)
 80127ec:	2300      	movs	r3, #0
 80127ee:	4604      	mov	r4, r0
 80127f0:	4608      	mov	r0, r1
 80127f2:	4611      	mov	r1, r2
 80127f4:	602b      	str	r3, [r5, #0]
 80127f6:	f7f2 fa31 	bl	8004c5c <_kill>
 80127fa:	1c43      	adds	r3, r0, #1
 80127fc:	d102      	bne.n	8012804 <_kill_r+0x1c>
 80127fe:	682b      	ldr	r3, [r5, #0]
 8012800:	b103      	cbz	r3, 8012804 <_kill_r+0x1c>
 8012802:	6023      	str	r3, [r4, #0]
 8012804:	bd38      	pop	{r3, r4, r5, pc}
 8012806:	bf00      	nop
 8012808:	20005d78 	.word	0x20005d78

0801280c <_getpid_r>:
 801280c:	f7f2 ba1e 	b.w	8004c4c <_getpid>

08012810 <__ascii_wctomb>:
 8012810:	b149      	cbz	r1, 8012826 <__ascii_wctomb+0x16>
 8012812:	2aff      	cmp	r2, #255	; 0xff
 8012814:	bf85      	ittet	hi
 8012816:	238a      	movhi	r3, #138	; 0x8a
 8012818:	6003      	strhi	r3, [r0, #0]
 801281a:	700a      	strbls	r2, [r1, #0]
 801281c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012820:	bf98      	it	ls
 8012822:	2001      	movls	r0, #1
 8012824:	4770      	bx	lr
 8012826:	4608      	mov	r0, r1
 8012828:	4770      	bx	lr
	...

0801282c <_fstat_r>:
 801282c:	b538      	push	{r3, r4, r5, lr}
 801282e:	4d07      	ldr	r5, [pc, #28]	; (801284c <_fstat_r+0x20>)
 8012830:	2300      	movs	r3, #0
 8012832:	4604      	mov	r4, r0
 8012834:	4608      	mov	r0, r1
 8012836:	4611      	mov	r1, r2
 8012838:	602b      	str	r3, [r5, #0]
 801283a:	f7f2 fa6e 	bl	8004d1a <_fstat>
 801283e:	1c43      	adds	r3, r0, #1
 8012840:	d102      	bne.n	8012848 <_fstat_r+0x1c>
 8012842:	682b      	ldr	r3, [r5, #0]
 8012844:	b103      	cbz	r3, 8012848 <_fstat_r+0x1c>
 8012846:	6023      	str	r3, [r4, #0]
 8012848:	bd38      	pop	{r3, r4, r5, pc}
 801284a:	bf00      	nop
 801284c:	20005d78 	.word	0x20005d78

08012850 <_isatty_r>:
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	4d06      	ldr	r5, [pc, #24]	; (801286c <_isatty_r+0x1c>)
 8012854:	2300      	movs	r3, #0
 8012856:	4604      	mov	r4, r0
 8012858:	4608      	mov	r0, r1
 801285a:	602b      	str	r3, [r5, #0]
 801285c:	f7f2 fa6d 	bl	8004d3a <_isatty>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_isatty_r+0x1a>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_isatty_r+0x1a>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	20005d78 	.word	0x20005d78

08012870 <_malloc_usable_size_r>:
 8012870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012874:	1f18      	subs	r0, r3, #4
 8012876:	2b00      	cmp	r3, #0
 8012878:	bfbc      	itt	lt
 801287a:	580b      	ldrlt	r3, [r1, r0]
 801287c:	18c0      	addlt	r0, r0, r3
 801287e:	4770      	bx	lr

08012880 <pow>:
 8012880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012882:	ed2d 8b02 	vpush	{d8}
 8012886:	eeb0 8a40 	vmov.f32	s16, s0
 801288a:	eef0 8a60 	vmov.f32	s17, s1
 801288e:	ec55 4b11 	vmov	r4, r5, d1
 8012892:	f000 f891 	bl	80129b8 <__ieee754_pow>
 8012896:	4622      	mov	r2, r4
 8012898:	462b      	mov	r3, r5
 801289a:	4620      	mov	r0, r4
 801289c:	4629      	mov	r1, r5
 801289e:	ec57 6b10 	vmov	r6, r7, d0
 80128a2:	f7ee f953 	bl	8000b4c <__aeabi_dcmpun>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d13b      	bne.n	8012922 <pow+0xa2>
 80128aa:	ec51 0b18 	vmov	r0, r1, d8
 80128ae:	2200      	movs	r2, #0
 80128b0:	2300      	movs	r3, #0
 80128b2:	f7ee f919 	bl	8000ae8 <__aeabi_dcmpeq>
 80128b6:	b1b8      	cbz	r0, 80128e8 <pow+0x68>
 80128b8:	2200      	movs	r2, #0
 80128ba:	2300      	movs	r3, #0
 80128bc:	4620      	mov	r0, r4
 80128be:	4629      	mov	r1, r5
 80128c0:	f7ee f912 	bl	8000ae8 <__aeabi_dcmpeq>
 80128c4:	2800      	cmp	r0, #0
 80128c6:	d146      	bne.n	8012956 <pow+0xd6>
 80128c8:	ec45 4b10 	vmov	d0, r4, r5
 80128cc:	f000 fe8d 	bl	80135ea <finite>
 80128d0:	b338      	cbz	r0, 8012922 <pow+0xa2>
 80128d2:	2200      	movs	r2, #0
 80128d4:	2300      	movs	r3, #0
 80128d6:	4620      	mov	r0, r4
 80128d8:	4629      	mov	r1, r5
 80128da:	f7ee f90f 	bl	8000afc <__aeabi_dcmplt>
 80128de:	b300      	cbz	r0, 8012922 <pow+0xa2>
 80128e0:	f7fd f8ba 	bl	800fa58 <__errno>
 80128e4:	2322      	movs	r3, #34	; 0x22
 80128e6:	e01b      	b.n	8012920 <pow+0xa0>
 80128e8:	ec47 6b10 	vmov	d0, r6, r7
 80128ec:	f000 fe7d 	bl	80135ea <finite>
 80128f0:	b9e0      	cbnz	r0, 801292c <pow+0xac>
 80128f2:	eeb0 0a48 	vmov.f32	s0, s16
 80128f6:	eef0 0a68 	vmov.f32	s1, s17
 80128fa:	f000 fe76 	bl	80135ea <finite>
 80128fe:	b1a8      	cbz	r0, 801292c <pow+0xac>
 8012900:	ec45 4b10 	vmov	d0, r4, r5
 8012904:	f000 fe71 	bl	80135ea <finite>
 8012908:	b180      	cbz	r0, 801292c <pow+0xac>
 801290a:	4632      	mov	r2, r6
 801290c:	463b      	mov	r3, r7
 801290e:	4630      	mov	r0, r6
 8012910:	4639      	mov	r1, r7
 8012912:	f7ee f91b 	bl	8000b4c <__aeabi_dcmpun>
 8012916:	2800      	cmp	r0, #0
 8012918:	d0e2      	beq.n	80128e0 <pow+0x60>
 801291a:	f7fd f89d 	bl	800fa58 <__errno>
 801291e:	2321      	movs	r3, #33	; 0x21
 8012920:	6003      	str	r3, [r0, #0]
 8012922:	ecbd 8b02 	vpop	{d8}
 8012926:	ec47 6b10 	vmov	d0, r6, r7
 801292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801292c:	2200      	movs	r2, #0
 801292e:	2300      	movs	r3, #0
 8012930:	4630      	mov	r0, r6
 8012932:	4639      	mov	r1, r7
 8012934:	f7ee f8d8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012938:	2800      	cmp	r0, #0
 801293a:	d0f2      	beq.n	8012922 <pow+0xa2>
 801293c:	eeb0 0a48 	vmov.f32	s0, s16
 8012940:	eef0 0a68 	vmov.f32	s1, s17
 8012944:	f000 fe51 	bl	80135ea <finite>
 8012948:	2800      	cmp	r0, #0
 801294a:	d0ea      	beq.n	8012922 <pow+0xa2>
 801294c:	ec45 4b10 	vmov	d0, r4, r5
 8012950:	f000 fe4b 	bl	80135ea <finite>
 8012954:	e7c3      	b.n	80128de <pow+0x5e>
 8012956:	4f01      	ldr	r7, [pc, #4]	; (801295c <pow+0xdc>)
 8012958:	2600      	movs	r6, #0
 801295a:	e7e2      	b.n	8012922 <pow+0xa2>
 801295c:	3ff00000 	.word	0x3ff00000

08012960 <sqrt>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	ed2d 8b02 	vpush	{d8}
 8012966:	ec55 4b10 	vmov	r4, r5, d0
 801296a:	f000 fd53 	bl	8013414 <__ieee754_sqrt>
 801296e:	4622      	mov	r2, r4
 8012970:	462b      	mov	r3, r5
 8012972:	4620      	mov	r0, r4
 8012974:	4629      	mov	r1, r5
 8012976:	eeb0 8a40 	vmov.f32	s16, s0
 801297a:	eef0 8a60 	vmov.f32	s17, s1
 801297e:	f7ee f8e5 	bl	8000b4c <__aeabi_dcmpun>
 8012982:	b990      	cbnz	r0, 80129aa <sqrt+0x4a>
 8012984:	2200      	movs	r2, #0
 8012986:	2300      	movs	r3, #0
 8012988:	4620      	mov	r0, r4
 801298a:	4629      	mov	r1, r5
 801298c:	f7ee f8b6 	bl	8000afc <__aeabi_dcmplt>
 8012990:	b158      	cbz	r0, 80129aa <sqrt+0x4a>
 8012992:	f7fd f861 	bl	800fa58 <__errno>
 8012996:	2321      	movs	r3, #33	; 0x21
 8012998:	6003      	str	r3, [r0, #0]
 801299a:	2200      	movs	r2, #0
 801299c:	2300      	movs	r3, #0
 801299e:	4610      	mov	r0, r2
 80129a0:	4619      	mov	r1, r3
 80129a2:	f7ed ff63 	bl	800086c <__aeabi_ddiv>
 80129a6:	ec41 0b18 	vmov	d8, r0, r1
 80129aa:	eeb0 0a48 	vmov.f32	s0, s16
 80129ae:	eef0 0a68 	vmov.f32	s1, s17
 80129b2:	ecbd 8b02 	vpop	{d8}
 80129b6:	bd38      	pop	{r3, r4, r5, pc}

080129b8 <__ieee754_pow>:
 80129b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129bc:	ed2d 8b06 	vpush	{d8-d10}
 80129c0:	b089      	sub	sp, #36	; 0x24
 80129c2:	ed8d 1b00 	vstr	d1, [sp]
 80129c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80129ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80129ce:	ea58 0102 	orrs.w	r1, r8, r2
 80129d2:	ec57 6b10 	vmov	r6, r7, d0
 80129d6:	d115      	bne.n	8012a04 <__ieee754_pow+0x4c>
 80129d8:	19b3      	adds	r3, r6, r6
 80129da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80129de:	4152      	adcs	r2, r2
 80129e0:	4299      	cmp	r1, r3
 80129e2:	4b89      	ldr	r3, [pc, #548]	; (8012c08 <__ieee754_pow+0x250>)
 80129e4:	4193      	sbcs	r3, r2
 80129e6:	f080 84d2 	bcs.w	801338e <__ieee754_pow+0x9d6>
 80129ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129ee:	4630      	mov	r0, r6
 80129f0:	4639      	mov	r1, r7
 80129f2:	f7ed fc5b 	bl	80002ac <__adddf3>
 80129f6:	ec41 0b10 	vmov	d0, r0, r1
 80129fa:	b009      	add	sp, #36	; 0x24
 80129fc:	ecbd 8b06 	vpop	{d8-d10}
 8012a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a04:	4b81      	ldr	r3, [pc, #516]	; (8012c0c <__ieee754_pow+0x254>)
 8012a06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012a0a:	429c      	cmp	r4, r3
 8012a0c:	ee10 aa10 	vmov	sl, s0
 8012a10:	463d      	mov	r5, r7
 8012a12:	dc06      	bgt.n	8012a22 <__ieee754_pow+0x6a>
 8012a14:	d101      	bne.n	8012a1a <__ieee754_pow+0x62>
 8012a16:	2e00      	cmp	r6, #0
 8012a18:	d1e7      	bne.n	80129ea <__ieee754_pow+0x32>
 8012a1a:	4598      	cmp	r8, r3
 8012a1c:	dc01      	bgt.n	8012a22 <__ieee754_pow+0x6a>
 8012a1e:	d10f      	bne.n	8012a40 <__ieee754_pow+0x88>
 8012a20:	b172      	cbz	r2, 8012a40 <__ieee754_pow+0x88>
 8012a22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012a26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012a2a:	ea55 050a 	orrs.w	r5, r5, sl
 8012a2e:	d1dc      	bne.n	80129ea <__ieee754_pow+0x32>
 8012a30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a34:	18db      	adds	r3, r3, r3
 8012a36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012a3a:	4152      	adcs	r2, r2
 8012a3c:	429d      	cmp	r5, r3
 8012a3e:	e7d0      	b.n	80129e2 <__ieee754_pow+0x2a>
 8012a40:	2d00      	cmp	r5, #0
 8012a42:	da3b      	bge.n	8012abc <__ieee754_pow+0x104>
 8012a44:	4b72      	ldr	r3, [pc, #456]	; (8012c10 <__ieee754_pow+0x258>)
 8012a46:	4598      	cmp	r8, r3
 8012a48:	dc51      	bgt.n	8012aee <__ieee754_pow+0x136>
 8012a4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012a4e:	4598      	cmp	r8, r3
 8012a50:	f340 84ac 	ble.w	80133ac <__ieee754_pow+0x9f4>
 8012a54:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012a58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012a5c:	2b14      	cmp	r3, #20
 8012a5e:	dd0f      	ble.n	8012a80 <__ieee754_pow+0xc8>
 8012a60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012a64:	fa22 f103 	lsr.w	r1, r2, r3
 8012a68:	fa01 f303 	lsl.w	r3, r1, r3
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	f040 849d 	bne.w	80133ac <__ieee754_pow+0x9f4>
 8012a72:	f001 0101 	and.w	r1, r1, #1
 8012a76:	f1c1 0302 	rsb	r3, r1, #2
 8012a7a:	9304      	str	r3, [sp, #16]
 8012a7c:	b182      	cbz	r2, 8012aa0 <__ieee754_pow+0xe8>
 8012a7e:	e05f      	b.n	8012b40 <__ieee754_pow+0x188>
 8012a80:	2a00      	cmp	r2, #0
 8012a82:	d15b      	bne.n	8012b3c <__ieee754_pow+0x184>
 8012a84:	f1c3 0314 	rsb	r3, r3, #20
 8012a88:	fa48 f103 	asr.w	r1, r8, r3
 8012a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8012a90:	4543      	cmp	r3, r8
 8012a92:	f040 8488 	bne.w	80133a6 <__ieee754_pow+0x9ee>
 8012a96:	f001 0101 	and.w	r1, r1, #1
 8012a9a:	f1c1 0302 	rsb	r3, r1, #2
 8012a9e:	9304      	str	r3, [sp, #16]
 8012aa0:	4b5c      	ldr	r3, [pc, #368]	; (8012c14 <__ieee754_pow+0x25c>)
 8012aa2:	4598      	cmp	r8, r3
 8012aa4:	d132      	bne.n	8012b0c <__ieee754_pow+0x154>
 8012aa6:	f1b9 0f00 	cmp.w	r9, #0
 8012aaa:	f280 8478 	bge.w	801339e <__ieee754_pow+0x9e6>
 8012aae:	4959      	ldr	r1, [pc, #356]	; (8012c14 <__ieee754_pow+0x25c>)
 8012ab0:	4632      	mov	r2, r6
 8012ab2:	463b      	mov	r3, r7
 8012ab4:	2000      	movs	r0, #0
 8012ab6:	f7ed fed9 	bl	800086c <__aeabi_ddiv>
 8012aba:	e79c      	b.n	80129f6 <__ieee754_pow+0x3e>
 8012abc:	2300      	movs	r3, #0
 8012abe:	9304      	str	r3, [sp, #16]
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	d13d      	bne.n	8012b40 <__ieee754_pow+0x188>
 8012ac4:	4b51      	ldr	r3, [pc, #324]	; (8012c0c <__ieee754_pow+0x254>)
 8012ac6:	4598      	cmp	r8, r3
 8012ac8:	d1ea      	bne.n	8012aa0 <__ieee754_pow+0xe8>
 8012aca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012ace:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012ad2:	ea53 030a 	orrs.w	r3, r3, sl
 8012ad6:	f000 845a 	beq.w	801338e <__ieee754_pow+0x9d6>
 8012ada:	4b4f      	ldr	r3, [pc, #316]	; (8012c18 <__ieee754_pow+0x260>)
 8012adc:	429c      	cmp	r4, r3
 8012ade:	dd08      	ble.n	8012af2 <__ieee754_pow+0x13a>
 8012ae0:	f1b9 0f00 	cmp.w	r9, #0
 8012ae4:	f2c0 8457 	blt.w	8013396 <__ieee754_pow+0x9de>
 8012ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aec:	e783      	b.n	80129f6 <__ieee754_pow+0x3e>
 8012aee:	2302      	movs	r3, #2
 8012af0:	e7e5      	b.n	8012abe <__ieee754_pow+0x106>
 8012af2:	f1b9 0f00 	cmp.w	r9, #0
 8012af6:	f04f 0000 	mov.w	r0, #0
 8012afa:	f04f 0100 	mov.w	r1, #0
 8012afe:	f6bf af7a 	bge.w	80129f6 <__ieee754_pow+0x3e>
 8012b02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012b06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012b0a:	e774      	b.n	80129f6 <__ieee754_pow+0x3e>
 8012b0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012b10:	d106      	bne.n	8012b20 <__ieee754_pow+0x168>
 8012b12:	4632      	mov	r2, r6
 8012b14:	463b      	mov	r3, r7
 8012b16:	4630      	mov	r0, r6
 8012b18:	4639      	mov	r1, r7
 8012b1a:	f7ed fd7d 	bl	8000618 <__aeabi_dmul>
 8012b1e:	e76a      	b.n	80129f6 <__ieee754_pow+0x3e>
 8012b20:	4b3e      	ldr	r3, [pc, #248]	; (8012c1c <__ieee754_pow+0x264>)
 8012b22:	4599      	cmp	r9, r3
 8012b24:	d10c      	bne.n	8012b40 <__ieee754_pow+0x188>
 8012b26:	2d00      	cmp	r5, #0
 8012b28:	db0a      	blt.n	8012b40 <__ieee754_pow+0x188>
 8012b2a:	ec47 6b10 	vmov	d0, r6, r7
 8012b2e:	b009      	add	sp, #36	; 0x24
 8012b30:	ecbd 8b06 	vpop	{d8-d10}
 8012b34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b38:	f000 bc6c 	b.w	8013414 <__ieee754_sqrt>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	9304      	str	r3, [sp, #16]
 8012b40:	ec47 6b10 	vmov	d0, r6, r7
 8012b44:	f000 fd48 	bl	80135d8 <fabs>
 8012b48:	ec51 0b10 	vmov	r0, r1, d0
 8012b4c:	f1ba 0f00 	cmp.w	sl, #0
 8012b50:	d129      	bne.n	8012ba6 <__ieee754_pow+0x1ee>
 8012b52:	b124      	cbz	r4, 8012b5e <__ieee754_pow+0x1a6>
 8012b54:	4b2f      	ldr	r3, [pc, #188]	; (8012c14 <__ieee754_pow+0x25c>)
 8012b56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d123      	bne.n	8012ba6 <__ieee754_pow+0x1ee>
 8012b5e:	f1b9 0f00 	cmp.w	r9, #0
 8012b62:	da05      	bge.n	8012b70 <__ieee754_pow+0x1b8>
 8012b64:	4602      	mov	r2, r0
 8012b66:	460b      	mov	r3, r1
 8012b68:	2000      	movs	r0, #0
 8012b6a:	492a      	ldr	r1, [pc, #168]	; (8012c14 <__ieee754_pow+0x25c>)
 8012b6c:	f7ed fe7e 	bl	800086c <__aeabi_ddiv>
 8012b70:	2d00      	cmp	r5, #0
 8012b72:	f6bf af40 	bge.w	80129f6 <__ieee754_pow+0x3e>
 8012b76:	9b04      	ldr	r3, [sp, #16]
 8012b78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012b7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012b80:	4323      	orrs	r3, r4
 8012b82:	d108      	bne.n	8012b96 <__ieee754_pow+0x1de>
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	4610      	mov	r0, r2
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	f7ed fb8c 	bl	80002a8 <__aeabi_dsub>
 8012b90:	4602      	mov	r2, r0
 8012b92:	460b      	mov	r3, r1
 8012b94:	e78f      	b.n	8012ab6 <__ieee754_pow+0xfe>
 8012b96:	9b04      	ldr	r3, [sp, #16]
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	f47f af2c 	bne.w	80129f6 <__ieee754_pow+0x3e>
 8012b9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	e727      	b.n	80129f6 <__ieee754_pow+0x3e>
 8012ba6:	0feb      	lsrs	r3, r5, #31
 8012ba8:	3b01      	subs	r3, #1
 8012baa:	9306      	str	r3, [sp, #24]
 8012bac:	9a06      	ldr	r2, [sp, #24]
 8012bae:	9b04      	ldr	r3, [sp, #16]
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	d102      	bne.n	8012bba <__ieee754_pow+0x202>
 8012bb4:	4632      	mov	r2, r6
 8012bb6:	463b      	mov	r3, r7
 8012bb8:	e7e6      	b.n	8012b88 <__ieee754_pow+0x1d0>
 8012bba:	4b19      	ldr	r3, [pc, #100]	; (8012c20 <__ieee754_pow+0x268>)
 8012bbc:	4598      	cmp	r8, r3
 8012bbe:	f340 80fb 	ble.w	8012db8 <__ieee754_pow+0x400>
 8012bc2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012bc6:	4598      	cmp	r8, r3
 8012bc8:	4b13      	ldr	r3, [pc, #76]	; (8012c18 <__ieee754_pow+0x260>)
 8012bca:	dd0c      	ble.n	8012be6 <__ieee754_pow+0x22e>
 8012bcc:	429c      	cmp	r4, r3
 8012bce:	dc0f      	bgt.n	8012bf0 <__ieee754_pow+0x238>
 8012bd0:	f1b9 0f00 	cmp.w	r9, #0
 8012bd4:	da0f      	bge.n	8012bf6 <__ieee754_pow+0x23e>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	b009      	add	sp, #36	; 0x24
 8012bda:	ecbd 8b06 	vpop	{d8-d10}
 8012bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be2:	f000 bcf0 	b.w	80135c6 <__math_oflow>
 8012be6:	429c      	cmp	r4, r3
 8012be8:	dbf2      	blt.n	8012bd0 <__ieee754_pow+0x218>
 8012bea:	4b0a      	ldr	r3, [pc, #40]	; (8012c14 <__ieee754_pow+0x25c>)
 8012bec:	429c      	cmp	r4, r3
 8012bee:	dd19      	ble.n	8012c24 <__ieee754_pow+0x26c>
 8012bf0:	f1b9 0f00 	cmp.w	r9, #0
 8012bf4:	dcef      	bgt.n	8012bd6 <__ieee754_pow+0x21e>
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	b009      	add	sp, #36	; 0x24
 8012bfa:	ecbd 8b06 	vpop	{d8-d10}
 8012bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c02:	f000 bcd7 	b.w	80135b4 <__math_uflow>
 8012c06:	bf00      	nop
 8012c08:	fff00000 	.word	0xfff00000
 8012c0c:	7ff00000 	.word	0x7ff00000
 8012c10:	433fffff 	.word	0x433fffff
 8012c14:	3ff00000 	.word	0x3ff00000
 8012c18:	3fefffff 	.word	0x3fefffff
 8012c1c:	3fe00000 	.word	0x3fe00000
 8012c20:	41e00000 	.word	0x41e00000
 8012c24:	4b60      	ldr	r3, [pc, #384]	; (8012da8 <__ieee754_pow+0x3f0>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	f7ed fb3e 	bl	80002a8 <__aeabi_dsub>
 8012c2c:	a354      	add	r3, pc, #336	; (adr r3, 8012d80 <__ieee754_pow+0x3c8>)
 8012c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c32:	4604      	mov	r4, r0
 8012c34:	460d      	mov	r5, r1
 8012c36:	f7ed fcef 	bl	8000618 <__aeabi_dmul>
 8012c3a:	a353      	add	r3, pc, #332	; (adr r3, 8012d88 <__ieee754_pow+0x3d0>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	4606      	mov	r6, r0
 8012c42:	460f      	mov	r7, r1
 8012c44:	4620      	mov	r0, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed fce6 	bl	8000618 <__aeabi_dmul>
 8012c4c:	4b57      	ldr	r3, [pc, #348]	; (8012dac <__ieee754_pow+0x3f4>)
 8012c4e:	4682      	mov	sl, r0
 8012c50:	468b      	mov	fp, r1
 8012c52:	2200      	movs	r2, #0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fcde 	bl	8000618 <__aeabi_dmul>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	a14b      	add	r1, pc, #300	; (adr r1, 8012d90 <__ieee754_pow+0x3d8>)
 8012c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c66:	f7ed fb1f 	bl	80002a8 <__aeabi_dsub>
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	f7ed fcd3 	bl	8000618 <__aeabi_dmul>
 8012c72:	4602      	mov	r2, r0
 8012c74:	460b      	mov	r3, r1
 8012c76:	2000      	movs	r0, #0
 8012c78:	494d      	ldr	r1, [pc, #308]	; (8012db0 <__ieee754_pow+0x3f8>)
 8012c7a:	f7ed fb15 	bl	80002a8 <__aeabi_dsub>
 8012c7e:	4622      	mov	r2, r4
 8012c80:	4680      	mov	r8, r0
 8012c82:	4689      	mov	r9, r1
 8012c84:	462b      	mov	r3, r5
 8012c86:	4620      	mov	r0, r4
 8012c88:	4629      	mov	r1, r5
 8012c8a:	f7ed fcc5 	bl	8000618 <__aeabi_dmul>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	460b      	mov	r3, r1
 8012c92:	4640      	mov	r0, r8
 8012c94:	4649      	mov	r1, r9
 8012c96:	f7ed fcbf 	bl	8000618 <__aeabi_dmul>
 8012c9a:	a33f      	add	r3, pc, #252	; (adr r3, 8012d98 <__ieee754_pow+0x3e0>)
 8012c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca0:	f7ed fcba 	bl	8000618 <__aeabi_dmul>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	4650      	mov	r0, sl
 8012caa:	4659      	mov	r1, fp
 8012cac:	f7ed fafc 	bl	80002a8 <__aeabi_dsub>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	4680      	mov	r8, r0
 8012cb6:	4689      	mov	r9, r1
 8012cb8:	4630      	mov	r0, r6
 8012cba:	4639      	mov	r1, r7
 8012cbc:	f7ed faf6 	bl	80002ac <__adddf3>
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	4632      	mov	r2, r6
 8012cc4:	463b      	mov	r3, r7
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	460d      	mov	r5, r1
 8012cca:	f7ed faed 	bl	80002a8 <__aeabi_dsub>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4640      	mov	r0, r8
 8012cd4:	4649      	mov	r1, r9
 8012cd6:	f7ed fae7 	bl	80002a8 <__aeabi_dsub>
 8012cda:	9b04      	ldr	r3, [sp, #16]
 8012cdc:	9a06      	ldr	r2, [sp, #24]
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	4313      	orrs	r3, r2
 8012ce2:	4682      	mov	sl, r0
 8012ce4:	468b      	mov	fp, r1
 8012ce6:	f040 81e7 	bne.w	80130b8 <__ieee754_pow+0x700>
 8012cea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012da0 <__ieee754_pow+0x3e8>
 8012cee:	eeb0 8a47 	vmov.f32	s16, s14
 8012cf2:	eef0 8a67 	vmov.f32	s17, s15
 8012cf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012cfa:	2600      	movs	r6, #0
 8012cfc:	4632      	mov	r2, r6
 8012cfe:	463b      	mov	r3, r7
 8012d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d04:	f7ed fad0 	bl	80002a8 <__aeabi_dsub>
 8012d08:	4622      	mov	r2, r4
 8012d0a:	462b      	mov	r3, r5
 8012d0c:	f7ed fc84 	bl	8000618 <__aeabi_dmul>
 8012d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d14:	4680      	mov	r8, r0
 8012d16:	4689      	mov	r9, r1
 8012d18:	4650      	mov	r0, sl
 8012d1a:	4659      	mov	r1, fp
 8012d1c:	f7ed fc7c 	bl	8000618 <__aeabi_dmul>
 8012d20:	4602      	mov	r2, r0
 8012d22:	460b      	mov	r3, r1
 8012d24:	4640      	mov	r0, r8
 8012d26:	4649      	mov	r1, r9
 8012d28:	f7ed fac0 	bl	80002ac <__adddf3>
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	463b      	mov	r3, r7
 8012d30:	4680      	mov	r8, r0
 8012d32:	4689      	mov	r9, r1
 8012d34:	4620      	mov	r0, r4
 8012d36:	4629      	mov	r1, r5
 8012d38:	f7ed fc6e 	bl	8000618 <__aeabi_dmul>
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	4604      	mov	r4, r0
 8012d40:	460d      	mov	r5, r1
 8012d42:	4602      	mov	r2, r0
 8012d44:	4649      	mov	r1, r9
 8012d46:	4640      	mov	r0, r8
 8012d48:	f7ed fab0 	bl	80002ac <__adddf3>
 8012d4c:	4b19      	ldr	r3, [pc, #100]	; (8012db4 <__ieee754_pow+0x3fc>)
 8012d4e:	4299      	cmp	r1, r3
 8012d50:	ec45 4b19 	vmov	d9, r4, r5
 8012d54:	4606      	mov	r6, r0
 8012d56:	460f      	mov	r7, r1
 8012d58:	468b      	mov	fp, r1
 8012d5a:	f340 82f1 	ble.w	8013340 <__ieee754_pow+0x988>
 8012d5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012d62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012d66:	4303      	orrs	r3, r0
 8012d68:	f000 81e4 	beq.w	8013134 <__ieee754_pow+0x77c>
 8012d6c:	ec51 0b18 	vmov	r0, r1, d8
 8012d70:	2200      	movs	r2, #0
 8012d72:	2300      	movs	r3, #0
 8012d74:	f7ed fec2 	bl	8000afc <__aeabi_dcmplt>
 8012d78:	3800      	subs	r0, #0
 8012d7a:	bf18      	it	ne
 8012d7c:	2001      	movne	r0, #1
 8012d7e:	e72b      	b.n	8012bd8 <__ieee754_pow+0x220>
 8012d80:	60000000 	.word	0x60000000
 8012d84:	3ff71547 	.word	0x3ff71547
 8012d88:	f85ddf44 	.word	0xf85ddf44
 8012d8c:	3e54ae0b 	.word	0x3e54ae0b
 8012d90:	55555555 	.word	0x55555555
 8012d94:	3fd55555 	.word	0x3fd55555
 8012d98:	652b82fe 	.word	0x652b82fe
 8012d9c:	3ff71547 	.word	0x3ff71547
 8012da0:	00000000 	.word	0x00000000
 8012da4:	bff00000 	.word	0xbff00000
 8012da8:	3ff00000 	.word	0x3ff00000
 8012dac:	3fd00000 	.word	0x3fd00000
 8012db0:	3fe00000 	.word	0x3fe00000
 8012db4:	408fffff 	.word	0x408fffff
 8012db8:	4bd5      	ldr	r3, [pc, #852]	; (8013110 <__ieee754_pow+0x758>)
 8012dba:	402b      	ands	r3, r5
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	b92b      	cbnz	r3, 8012dcc <__ieee754_pow+0x414>
 8012dc0:	4bd4      	ldr	r3, [pc, #848]	; (8013114 <__ieee754_pow+0x75c>)
 8012dc2:	f7ed fc29 	bl	8000618 <__aeabi_dmul>
 8012dc6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012dca:	460c      	mov	r4, r1
 8012dcc:	1523      	asrs	r3, r4, #20
 8012dce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012dd2:	4413      	add	r3, r2
 8012dd4:	9305      	str	r3, [sp, #20]
 8012dd6:	4bd0      	ldr	r3, [pc, #832]	; (8013118 <__ieee754_pow+0x760>)
 8012dd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012ddc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012de0:	429c      	cmp	r4, r3
 8012de2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012de6:	dd08      	ble.n	8012dfa <__ieee754_pow+0x442>
 8012de8:	4bcc      	ldr	r3, [pc, #816]	; (801311c <__ieee754_pow+0x764>)
 8012dea:	429c      	cmp	r4, r3
 8012dec:	f340 8162 	ble.w	80130b4 <__ieee754_pow+0x6fc>
 8012df0:	9b05      	ldr	r3, [sp, #20]
 8012df2:	3301      	adds	r3, #1
 8012df4:	9305      	str	r3, [sp, #20]
 8012df6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012dfa:	2400      	movs	r4, #0
 8012dfc:	00e3      	lsls	r3, r4, #3
 8012dfe:	9307      	str	r3, [sp, #28]
 8012e00:	4bc7      	ldr	r3, [pc, #796]	; (8013120 <__ieee754_pow+0x768>)
 8012e02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e06:	ed93 7b00 	vldr	d7, [r3]
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	ec53 2b17 	vmov	r2, r3, d7
 8012e10:	eeb0 9a47 	vmov.f32	s18, s14
 8012e14:	eef0 9a67 	vmov.f32	s19, s15
 8012e18:	4682      	mov	sl, r0
 8012e1a:	f7ed fa45 	bl	80002a8 <__aeabi_dsub>
 8012e1e:	4652      	mov	r2, sl
 8012e20:	4606      	mov	r6, r0
 8012e22:	460f      	mov	r7, r1
 8012e24:	462b      	mov	r3, r5
 8012e26:	ec51 0b19 	vmov	r0, r1, d9
 8012e2a:	f7ed fa3f 	bl	80002ac <__adddf3>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	460b      	mov	r3, r1
 8012e32:	2000      	movs	r0, #0
 8012e34:	49bb      	ldr	r1, [pc, #748]	; (8013124 <__ieee754_pow+0x76c>)
 8012e36:	f7ed fd19 	bl	800086c <__aeabi_ddiv>
 8012e3a:	ec41 0b1a 	vmov	d10, r0, r1
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	4630      	mov	r0, r6
 8012e44:	4639      	mov	r1, r7
 8012e46:	f7ed fbe7 	bl	8000618 <__aeabi_dmul>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e50:	9302      	str	r3, [sp, #8]
 8012e52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e56:	46ab      	mov	fp, r5
 8012e58:	106d      	asrs	r5, r5, #1
 8012e5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012e5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012e62:	ec41 0b18 	vmov	d8, r0, r1
 8012e66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	4640      	mov	r0, r8
 8012e6e:	4649      	mov	r1, r9
 8012e70:	4614      	mov	r4, r2
 8012e72:	461d      	mov	r5, r3
 8012e74:	f7ed fbd0 	bl	8000618 <__aeabi_dmul>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	4639      	mov	r1, r7
 8012e80:	f7ed fa12 	bl	80002a8 <__aeabi_dsub>
 8012e84:	ec53 2b19 	vmov	r2, r3, d9
 8012e88:	4606      	mov	r6, r0
 8012e8a:	460f      	mov	r7, r1
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	4629      	mov	r1, r5
 8012e90:	f7ed fa0a 	bl	80002a8 <__aeabi_dsub>
 8012e94:	4602      	mov	r2, r0
 8012e96:	460b      	mov	r3, r1
 8012e98:	4650      	mov	r0, sl
 8012e9a:	4659      	mov	r1, fp
 8012e9c:	f7ed fa04 	bl	80002a8 <__aeabi_dsub>
 8012ea0:	4642      	mov	r2, r8
 8012ea2:	464b      	mov	r3, r9
 8012ea4:	f7ed fbb8 	bl	8000618 <__aeabi_dmul>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	4630      	mov	r0, r6
 8012eae:	4639      	mov	r1, r7
 8012eb0:	f7ed f9fa 	bl	80002a8 <__aeabi_dsub>
 8012eb4:	ec53 2b1a 	vmov	r2, r3, d10
 8012eb8:	f7ed fbae 	bl	8000618 <__aeabi_dmul>
 8012ebc:	ec53 2b18 	vmov	r2, r3, d8
 8012ec0:	ec41 0b19 	vmov	d9, r0, r1
 8012ec4:	ec51 0b18 	vmov	r0, r1, d8
 8012ec8:	f7ed fba6 	bl	8000618 <__aeabi_dmul>
 8012ecc:	a37c      	add	r3, pc, #496	; (adr r3, 80130c0 <__ieee754_pow+0x708>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	460d      	mov	r5, r1
 8012ed6:	f7ed fb9f 	bl	8000618 <__aeabi_dmul>
 8012eda:	a37b      	add	r3, pc, #492	; (adr r3, 80130c8 <__ieee754_pow+0x710>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f7ed f9e4 	bl	80002ac <__adddf3>
 8012ee4:	4622      	mov	r2, r4
 8012ee6:	462b      	mov	r3, r5
 8012ee8:	f7ed fb96 	bl	8000618 <__aeabi_dmul>
 8012eec:	a378      	add	r3, pc, #480	; (adr r3, 80130d0 <__ieee754_pow+0x718>)
 8012eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef2:	f7ed f9db 	bl	80002ac <__adddf3>
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	462b      	mov	r3, r5
 8012efa:	f7ed fb8d 	bl	8000618 <__aeabi_dmul>
 8012efe:	a376      	add	r3, pc, #472	; (adr r3, 80130d8 <__ieee754_pow+0x720>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	f7ed f9d2 	bl	80002ac <__adddf3>
 8012f08:	4622      	mov	r2, r4
 8012f0a:	462b      	mov	r3, r5
 8012f0c:	f7ed fb84 	bl	8000618 <__aeabi_dmul>
 8012f10:	a373      	add	r3, pc, #460	; (adr r3, 80130e0 <__ieee754_pow+0x728>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed f9c9 	bl	80002ac <__adddf3>
 8012f1a:	4622      	mov	r2, r4
 8012f1c:	462b      	mov	r3, r5
 8012f1e:	f7ed fb7b 	bl	8000618 <__aeabi_dmul>
 8012f22:	a371      	add	r3, pc, #452	; (adr r3, 80130e8 <__ieee754_pow+0x730>)
 8012f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f28:	f7ed f9c0 	bl	80002ac <__adddf3>
 8012f2c:	4622      	mov	r2, r4
 8012f2e:	4606      	mov	r6, r0
 8012f30:	460f      	mov	r7, r1
 8012f32:	462b      	mov	r3, r5
 8012f34:	4620      	mov	r0, r4
 8012f36:	4629      	mov	r1, r5
 8012f38:	f7ed fb6e 	bl	8000618 <__aeabi_dmul>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	460b      	mov	r3, r1
 8012f40:	4630      	mov	r0, r6
 8012f42:	4639      	mov	r1, r7
 8012f44:	f7ed fb68 	bl	8000618 <__aeabi_dmul>
 8012f48:	4642      	mov	r2, r8
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	460d      	mov	r5, r1
 8012f4e:	464b      	mov	r3, r9
 8012f50:	ec51 0b18 	vmov	r0, r1, d8
 8012f54:	f7ed f9aa 	bl	80002ac <__adddf3>
 8012f58:	ec53 2b19 	vmov	r2, r3, d9
 8012f5c:	f7ed fb5c 	bl	8000618 <__aeabi_dmul>
 8012f60:	4622      	mov	r2, r4
 8012f62:	462b      	mov	r3, r5
 8012f64:	f7ed f9a2 	bl	80002ac <__adddf3>
 8012f68:	4642      	mov	r2, r8
 8012f6a:	4682      	mov	sl, r0
 8012f6c:	468b      	mov	fp, r1
 8012f6e:	464b      	mov	r3, r9
 8012f70:	4640      	mov	r0, r8
 8012f72:	4649      	mov	r1, r9
 8012f74:	f7ed fb50 	bl	8000618 <__aeabi_dmul>
 8012f78:	4b6b      	ldr	r3, [pc, #428]	; (8013128 <__ieee754_pow+0x770>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	f7ed f994 	bl	80002ac <__adddf3>
 8012f84:	4652      	mov	r2, sl
 8012f86:	465b      	mov	r3, fp
 8012f88:	f7ed f990 	bl	80002ac <__adddf3>
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	4604      	mov	r4, r0
 8012f90:	460d      	mov	r5, r1
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4640      	mov	r0, r8
 8012f98:	4649      	mov	r1, r9
 8012f9a:	f7ed fb3d 	bl	8000618 <__aeabi_dmul>
 8012f9e:	4b62      	ldr	r3, [pc, #392]	; (8013128 <__ieee754_pow+0x770>)
 8012fa0:	4680      	mov	r8, r0
 8012fa2:	4689      	mov	r9, r1
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	4629      	mov	r1, r5
 8012faa:	f7ed f97d 	bl	80002a8 <__aeabi_dsub>
 8012fae:	4632      	mov	r2, r6
 8012fb0:	463b      	mov	r3, r7
 8012fb2:	f7ed f979 	bl	80002a8 <__aeabi_dsub>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4650      	mov	r0, sl
 8012fbc:	4659      	mov	r1, fp
 8012fbe:	f7ed f973 	bl	80002a8 <__aeabi_dsub>
 8012fc2:	ec53 2b18 	vmov	r2, r3, d8
 8012fc6:	f7ed fb27 	bl	8000618 <__aeabi_dmul>
 8012fca:	4622      	mov	r2, r4
 8012fcc:	4606      	mov	r6, r0
 8012fce:	460f      	mov	r7, r1
 8012fd0:	462b      	mov	r3, r5
 8012fd2:	ec51 0b19 	vmov	r0, r1, d9
 8012fd6:	f7ed fb1f 	bl	8000618 <__aeabi_dmul>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	460b      	mov	r3, r1
 8012fde:	4630      	mov	r0, r6
 8012fe0:	4639      	mov	r1, r7
 8012fe2:	f7ed f963 	bl	80002ac <__adddf3>
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	460f      	mov	r7, r1
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	4640      	mov	r0, r8
 8012ff0:	4649      	mov	r1, r9
 8012ff2:	f7ed f95b 	bl	80002ac <__adddf3>
 8012ff6:	a33e      	add	r3, pc, #248	; (adr r3, 80130f0 <__ieee754_pow+0x738>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	4604      	mov	r4, r0
 8013000:	460d      	mov	r5, r1
 8013002:	f7ed fb09 	bl	8000618 <__aeabi_dmul>
 8013006:	4642      	mov	r2, r8
 8013008:	ec41 0b18 	vmov	d8, r0, r1
 801300c:	464b      	mov	r3, r9
 801300e:	4620      	mov	r0, r4
 8013010:	4629      	mov	r1, r5
 8013012:	f7ed f949 	bl	80002a8 <__aeabi_dsub>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	4630      	mov	r0, r6
 801301c:	4639      	mov	r1, r7
 801301e:	f7ed f943 	bl	80002a8 <__aeabi_dsub>
 8013022:	a335      	add	r3, pc, #212	; (adr r3, 80130f8 <__ieee754_pow+0x740>)
 8013024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013028:	f7ed faf6 	bl	8000618 <__aeabi_dmul>
 801302c:	a334      	add	r3, pc, #208	; (adr r3, 8013100 <__ieee754_pow+0x748>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	4606      	mov	r6, r0
 8013034:	460f      	mov	r7, r1
 8013036:	4620      	mov	r0, r4
 8013038:	4629      	mov	r1, r5
 801303a:	f7ed faed 	bl	8000618 <__aeabi_dmul>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4630      	mov	r0, r6
 8013044:	4639      	mov	r1, r7
 8013046:	f7ed f931 	bl	80002ac <__adddf3>
 801304a:	9a07      	ldr	r2, [sp, #28]
 801304c:	4b37      	ldr	r3, [pc, #220]	; (801312c <__ieee754_pow+0x774>)
 801304e:	4413      	add	r3, r2
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	f7ed f92a 	bl	80002ac <__adddf3>
 8013058:	4682      	mov	sl, r0
 801305a:	9805      	ldr	r0, [sp, #20]
 801305c:	468b      	mov	fp, r1
 801305e:	f7ed fa71 	bl	8000544 <__aeabi_i2d>
 8013062:	9a07      	ldr	r2, [sp, #28]
 8013064:	4b32      	ldr	r3, [pc, #200]	; (8013130 <__ieee754_pow+0x778>)
 8013066:	4413      	add	r3, r2
 8013068:	e9d3 8900 	ldrd	r8, r9, [r3]
 801306c:	4606      	mov	r6, r0
 801306e:	460f      	mov	r7, r1
 8013070:	4652      	mov	r2, sl
 8013072:	465b      	mov	r3, fp
 8013074:	ec51 0b18 	vmov	r0, r1, d8
 8013078:	f7ed f918 	bl	80002ac <__adddf3>
 801307c:	4642      	mov	r2, r8
 801307e:	464b      	mov	r3, r9
 8013080:	f7ed f914 	bl	80002ac <__adddf3>
 8013084:	4632      	mov	r2, r6
 8013086:	463b      	mov	r3, r7
 8013088:	f7ed f910 	bl	80002ac <__adddf3>
 801308c:	2000      	movs	r0, #0
 801308e:	4632      	mov	r2, r6
 8013090:	463b      	mov	r3, r7
 8013092:	4604      	mov	r4, r0
 8013094:	460d      	mov	r5, r1
 8013096:	f7ed f907 	bl	80002a8 <__aeabi_dsub>
 801309a:	4642      	mov	r2, r8
 801309c:	464b      	mov	r3, r9
 801309e:	f7ed f903 	bl	80002a8 <__aeabi_dsub>
 80130a2:	ec53 2b18 	vmov	r2, r3, d8
 80130a6:	f7ed f8ff 	bl	80002a8 <__aeabi_dsub>
 80130aa:	4602      	mov	r2, r0
 80130ac:	460b      	mov	r3, r1
 80130ae:	4650      	mov	r0, sl
 80130b0:	4659      	mov	r1, fp
 80130b2:	e610      	b.n	8012cd6 <__ieee754_pow+0x31e>
 80130b4:	2401      	movs	r4, #1
 80130b6:	e6a1      	b.n	8012dfc <__ieee754_pow+0x444>
 80130b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013108 <__ieee754_pow+0x750>
 80130bc:	e617      	b.n	8012cee <__ieee754_pow+0x336>
 80130be:	bf00      	nop
 80130c0:	4a454eef 	.word	0x4a454eef
 80130c4:	3fca7e28 	.word	0x3fca7e28
 80130c8:	93c9db65 	.word	0x93c9db65
 80130cc:	3fcd864a 	.word	0x3fcd864a
 80130d0:	a91d4101 	.word	0xa91d4101
 80130d4:	3fd17460 	.word	0x3fd17460
 80130d8:	518f264d 	.word	0x518f264d
 80130dc:	3fd55555 	.word	0x3fd55555
 80130e0:	db6fabff 	.word	0xdb6fabff
 80130e4:	3fdb6db6 	.word	0x3fdb6db6
 80130e8:	33333303 	.word	0x33333303
 80130ec:	3fe33333 	.word	0x3fe33333
 80130f0:	e0000000 	.word	0xe0000000
 80130f4:	3feec709 	.word	0x3feec709
 80130f8:	dc3a03fd 	.word	0xdc3a03fd
 80130fc:	3feec709 	.word	0x3feec709
 8013100:	145b01f5 	.word	0x145b01f5
 8013104:	be3e2fe0 	.word	0xbe3e2fe0
 8013108:	00000000 	.word	0x00000000
 801310c:	3ff00000 	.word	0x3ff00000
 8013110:	7ff00000 	.word	0x7ff00000
 8013114:	43400000 	.word	0x43400000
 8013118:	0003988e 	.word	0x0003988e
 801311c:	000bb679 	.word	0x000bb679
 8013120:	0802ea78 	.word	0x0802ea78
 8013124:	3ff00000 	.word	0x3ff00000
 8013128:	40080000 	.word	0x40080000
 801312c:	0802ea98 	.word	0x0802ea98
 8013130:	0802ea88 	.word	0x0802ea88
 8013134:	a3b5      	add	r3, pc, #724	; (adr r3, 801340c <__ieee754_pow+0xa54>)
 8013136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313a:	4640      	mov	r0, r8
 801313c:	4649      	mov	r1, r9
 801313e:	f7ed f8b5 	bl	80002ac <__adddf3>
 8013142:	4622      	mov	r2, r4
 8013144:	ec41 0b1a 	vmov	d10, r0, r1
 8013148:	462b      	mov	r3, r5
 801314a:	4630      	mov	r0, r6
 801314c:	4639      	mov	r1, r7
 801314e:	f7ed f8ab 	bl	80002a8 <__aeabi_dsub>
 8013152:	4602      	mov	r2, r0
 8013154:	460b      	mov	r3, r1
 8013156:	ec51 0b1a 	vmov	r0, r1, d10
 801315a:	f7ed fced 	bl	8000b38 <__aeabi_dcmpgt>
 801315e:	2800      	cmp	r0, #0
 8013160:	f47f ae04 	bne.w	8012d6c <__ieee754_pow+0x3b4>
 8013164:	4aa4      	ldr	r2, [pc, #656]	; (80133f8 <__ieee754_pow+0xa40>)
 8013166:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801316a:	4293      	cmp	r3, r2
 801316c:	f340 8108 	ble.w	8013380 <__ieee754_pow+0x9c8>
 8013170:	151b      	asrs	r3, r3, #20
 8013172:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013176:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801317a:	fa4a f303 	asr.w	r3, sl, r3
 801317e:	445b      	add	r3, fp
 8013180:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013184:	4e9d      	ldr	r6, [pc, #628]	; (80133fc <__ieee754_pow+0xa44>)
 8013186:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801318a:	4116      	asrs	r6, r2
 801318c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013190:	2000      	movs	r0, #0
 8013192:	ea23 0106 	bic.w	r1, r3, r6
 8013196:	f1c2 0214 	rsb	r2, r2, #20
 801319a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801319e:	fa4a fa02 	asr.w	sl, sl, r2
 80131a2:	f1bb 0f00 	cmp.w	fp, #0
 80131a6:	4602      	mov	r2, r0
 80131a8:	460b      	mov	r3, r1
 80131aa:	4620      	mov	r0, r4
 80131ac:	4629      	mov	r1, r5
 80131ae:	bfb8      	it	lt
 80131b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80131b4:	f7ed f878 	bl	80002a8 <__aeabi_dsub>
 80131b8:	ec41 0b19 	vmov	d9, r0, r1
 80131bc:	4642      	mov	r2, r8
 80131be:	464b      	mov	r3, r9
 80131c0:	ec51 0b19 	vmov	r0, r1, d9
 80131c4:	f7ed f872 	bl	80002ac <__adddf3>
 80131c8:	a37b      	add	r3, pc, #492	; (adr r3, 80133b8 <__ieee754_pow+0xa00>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	2000      	movs	r0, #0
 80131d0:	4604      	mov	r4, r0
 80131d2:	460d      	mov	r5, r1
 80131d4:	f7ed fa20 	bl	8000618 <__aeabi_dmul>
 80131d8:	ec53 2b19 	vmov	r2, r3, d9
 80131dc:	4606      	mov	r6, r0
 80131de:	460f      	mov	r7, r1
 80131e0:	4620      	mov	r0, r4
 80131e2:	4629      	mov	r1, r5
 80131e4:	f7ed f860 	bl	80002a8 <__aeabi_dsub>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4640      	mov	r0, r8
 80131ee:	4649      	mov	r1, r9
 80131f0:	f7ed f85a 	bl	80002a8 <__aeabi_dsub>
 80131f4:	a372      	add	r3, pc, #456	; (adr r3, 80133c0 <__ieee754_pow+0xa08>)
 80131f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fa:	f7ed fa0d 	bl	8000618 <__aeabi_dmul>
 80131fe:	a372      	add	r3, pc, #456	; (adr r3, 80133c8 <__ieee754_pow+0xa10>)
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	4680      	mov	r8, r0
 8013206:	4689      	mov	r9, r1
 8013208:	4620      	mov	r0, r4
 801320a:	4629      	mov	r1, r5
 801320c:	f7ed fa04 	bl	8000618 <__aeabi_dmul>
 8013210:	4602      	mov	r2, r0
 8013212:	460b      	mov	r3, r1
 8013214:	4640      	mov	r0, r8
 8013216:	4649      	mov	r1, r9
 8013218:	f7ed f848 	bl	80002ac <__adddf3>
 801321c:	4604      	mov	r4, r0
 801321e:	460d      	mov	r5, r1
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4630      	mov	r0, r6
 8013226:	4639      	mov	r1, r7
 8013228:	f7ed f840 	bl	80002ac <__adddf3>
 801322c:	4632      	mov	r2, r6
 801322e:	463b      	mov	r3, r7
 8013230:	4680      	mov	r8, r0
 8013232:	4689      	mov	r9, r1
 8013234:	f7ed f838 	bl	80002a8 <__aeabi_dsub>
 8013238:	4602      	mov	r2, r0
 801323a:	460b      	mov	r3, r1
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f7ed f832 	bl	80002a8 <__aeabi_dsub>
 8013244:	4642      	mov	r2, r8
 8013246:	4606      	mov	r6, r0
 8013248:	460f      	mov	r7, r1
 801324a:	464b      	mov	r3, r9
 801324c:	4640      	mov	r0, r8
 801324e:	4649      	mov	r1, r9
 8013250:	f7ed f9e2 	bl	8000618 <__aeabi_dmul>
 8013254:	a35e      	add	r3, pc, #376	; (adr r3, 80133d0 <__ieee754_pow+0xa18>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	4604      	mov	r4, r0
 801325c:	460d      	mov	r5, r1
 801325e:	f7ed f9db 	bl	8000618 <__aeabi_dmul>
 8013262:	a35d      	add	r3, pc, #372	; (adr r3, 80133d8 <__ieee754_pow+0xa20>)
 8013264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013268:	f7ed f81e 	bl	80002a8 <__aeabi_dsub>
 801326c:	4622      	mov	r2, r4
 801326e:	462b      	mov	r3, r5
 8013270:	f7ed f9d2 	bl	8000618 <__aeabi_dmul>
 8013274:	a35a      	add	r3, pc, #360	; (adr r3, 80133e0 <__ieee754_pow+0xa28>)
 8013276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327a:	f7ed f817 	bl	80002ac <__adddf3>
 801327e:	4622      	mov	r2, r4
 8013280:	462b      	mov	r3, r5
 8013282:	f7ed f9c9 	bl	8000618 <__aeabi_dmul>
 8013286:	a358      	add	r3, pc, #352	; (adr r3, 80133e8 <__ieee754_pow+0xa30>)
 8013288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328c:	f7ed f80c 	bl	80002a8 <__aeabi_dsub>
 8013290:	4622      	mov	r2, r4
 8013292:	462b      	mov	r3, r5
 8013294:	f7ed f9c0 	bl	8000618 <__aeabi_dmul>
 8013298:	a355      	add	r3, pc, #340	; (adr r3, 80133f0 <__ieee754_pow+0xa38>)
 801329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329e:	f7ed f805 	bl	80002ac <__adddf3>
 80132a2:	4622      	mov	r2, r4
 80132a4:	462b      	mov	r3, r5
 80132a6:	f7ed f9b7 	bl	8000618 <__aeabi_dmul>
 80132aa:	4602      	mov	r2, r0
 80132ac:	460b      	mov	r3, r1
 80132ae:	4640      	mov	r0, r8
 80132b0:	4649      	mov	r1, r9
 80132b2:	f7ec fff9 	bl	80002a8 <__aeabi_dsub>
 80132b6:	4604      	mov	r4, r0
 80132b8:	460d      	mov	r5, r1
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	4640      	mov	r0, r8
 80132c0:	4649      	mov	r1, r9
 80132c2:	f7ed f9a9 	bl	8000618 <__aeabi_dmul>
 80132c6:	2200      	movs	r2, #0
 80132c8:	ec41 0b19 	vmov	d9, r0, r1
 80132cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132d0:	4620      	mov	r0, r4
 80132d2:	4629      	mov	r1, r5
 80132d4:	f7ec ffe8 	bl	80002a8 <__aeabi_dsub>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	ec51 0b19 	vmov	r0, r1, d9
 80132e0:	f7ed fac4 	bl	800086c <__aeabi_ddiv>
 80132e4:	4632      	mov	r2, r6
 80132e6:	4604      	mov	r4, r0
 80132e8:	460d      	mov	r5, r1
 80132ea:	463b      	mov	r3, r7
 80132ec:	4640      	mov	r0, r8
 80132ee:	4649      	mov	r1, r9
 80132f0:	f7ed f992 	bl	8000618 <__aeabi_dmul>
 80132f4:	4632      	mov	r2, r6
 80132f6:	463b      	mov	r3, r7
 80132f8:	f7ec ffd8 	bl	80002ac <__adddf3>
 80132fc:	4602      	mov	r2, r0
 80132fe:	460b      	mov	r3, r1
 8013300:	4620      	mov	r0, r4
 8013302:	4629      	mov	r1, r5
 8013304:	f7ec ffd0 	bl	80002a8 <__aeabi_dsub>
 8013308:	4642      	mov	r2, r8
 801330a:	464b      	mov	r3, r9
 801330c:	f7ec ffcc 	bl	80002a8 <__aeabi_dsub>
 8013310:	460b      	mov	r3, r1
 8013312:	4602      	mov	r2, r0
 8013314:	493a      	ldr	r1, [pc, #232]	; (8013400 <__ieee754_pow+0xa48>)
 8013316:	2000      	movs	r0, #0
 8013318:	f7ec ffc6 	bl	80002a8 <__aeabi_dsub>
 801331c:	ec41 0b10 	vmov	d0, r0, r1
 8013320:	ee10 3a90 	vmov	r3, s1
 8013324:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801332c:	da2b      	bge.n	8013386 <__ieee754_pow+0x9ce>
 801332e:	4650      	mov	r0, sl
 8013330:	f000 f966 	bl	8013600 <scalbn>
 8013334:	ec51 0b10 	vmov	r0, r1, d0
 8013338:	ec53 2b18 	vmov	r2, r3, d8
 801333c:	f7ff bbed 	b.w	8012b1a <__ieee754_pow+0x162>
 8013340:	4b30      	ldr	r3, [pc, #192]	; (8013404 <__ieee754_pow+0xa4c>)
 8013342:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013346:	429e      	cmp	r6, r3
 8013348:	f77f af0c 	ble.w	8013164 <__ieee754_pow+0x7ac>
 801334c:	4b2e      	ldr	r3, [pc, #184]	; (8013408 <__ieee754_pow+0xa50>)
 801334e:	440b      	add	r3, r1
 8013350:	4303      	orrs	r3, r0
 8013352:	d009      	beq.n	8013368 <__ieee754_pow+0x9b0>
 8013354:	ec51 0b18 	vmov	r0, r1, d8
 8013358:	2200      	movs	r2, #0
 801335a:	2300      	movs	r3, #0
 801335c:	f7ed fbce 	bl	8000afc <__aeabi_dcmplt>
 8013360:	3800      	subs	r0, #0
 8013362:	bf18      	it	ne
 8013364:	2001      	movne	r0, #1
 8013366:	e447      	b.n	8012bf8 <__ieee754_pow+0x240>
 8013368:	4622      	mov	r2, r4
 801336a:	462b      	mov	r3, r5
 801336c:	f7ec ff9c 	bl	80002a8 <__aeabi_dsub>
 8013370:	4642      	mov	r2, r8
 8013372:	464b      	mov	r3, r9
 8013374:	f7ed fbd6 	bl	8000b24 <__aeabi_dcmpge>
 8013378:	2800      	cmp	r0, #0
 801337a:	f43f aef3 	beq.w	8013164 <__ieee754_pow+0x7ac>
 801337e:	e7e9      	b.n	8013354 <__ieee754_pow+0x99c>
 8013380:	f04f 0a00 	mov.w	sl, #0
 8013384:	e71a      	b.n	80131bc <__ieee754_pow+0x804>
 8013386:	ec51 0b10 	vmov	r0, r1, d0
 801338a:	4619      	mov	r1, r3
 801338c:	e7d4      	b.n	8013338 <__ieee754_pow+0x980>
 801338e:	491c      	ldr	r1, [pc, #112]	; (8013400 <__ieee754_pow+0xa48>)
 8013390:	2000      	movs	r0, #0
 8013392:	f7ff bb30 	b.w	80129f6 <__ieee754_pow+0x3e>
 8013396:	2000      	movs	r0, #0
 8013398:	2100      	movs	r1, #0
 801339a:	f7ff bb2c 	b.w	80129f6 <__ieee754_pow+0x3e>
 801339e:	4630      	mov	r0, r6
 80133a0:	4639      	mov	r1, r7
 80133a2:	f7ff bb28 	b.w	80129f6 <__ieee754_pow+0x3e>
 80133a6:	9204      	str	r2, [sp, #16]
 80133a8:	f7ff bb7a 	b.w	8012aa0 <__ieee754_pow+0xe8>
 80133ac:	2300      	movs	r3, #0
 80133ae:	f7ff bb64 	b.w	8012a7a <__ieee754_pow+0xc2>
 80133b2:	bf00      	nop
 80133b4:	f3af 8000 	nop.w
 80133b8:	00000000 	.word	0x00000000
 80133bc:	3fe62e43 	.word	0x3fe62e43
 80133c0:	fefa39ef 	.word	0xfefa39ef
 80133c4:	3fe62e42 	.word	0x3fe62e42
 80133c8:	0ca86c39 	.word	0x0ca86c39
 80133cc:	be205c61 	.word	0xbe205c61
 80133d0:	72bea4d0 	.word	0x72bea4d0
 80133d4:	3e663769 	.word	0x3e663769
 80133d8:	c5d26bf1 	.word	0xc5d26bf1
 80133dc:	3ebbbd41 	.word	0x3ebbbd41
 80133e0:	af25de2c 	.word	0xaf25de2c
 80133e4:	3f11566a 	.word	0x3f11566a
 80133e8:	16bebd93 	.word	0x16bebd93
 80133ec:	3f66c16c 	.word	0x3f66c16c
 80133f0:	5555553e 	.word	0x5555553e
 80133f4:	3fc55555 	.word	0x3fc55555
 80133f8:	3fe00000 	.word	0x3fe00000
 80133fc:	000fffff 	.word	0x000fffff
 8013400:	3ff00000 	.word	0x3ff00000
 8013404:	4090cbff 	.word	0x4090cbff
 8013408:	3f6f3400 	.word	0x3f6f3400
 801340c:	652b82fe 	.word	0x652b82fe
 8013410:	3c971547 	.word	0x3c971547

08013414 <__ieee754_sqrt>:
 8013414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013418:	ec55 4b10 	vmov	r4, r5, d0
 801341c:	4e55      	ldr	r6, [pc, #340]	; (8013574 <__ieee754_sqrt+0x160>)
 801341e:	43ae      	bics	r6, r5
 8013420:	ee10 0a10 	vmov	r0, s0
 8013424:	ee10 3a10 	vmov	r3, s0
 8013428:	462a      	mov	r2, r5
 801342a:	4629      	mov	r1, r5
 801342c:	d110      	bne.n	8013450 <__ieee754_sqrt+0x3c>
 801342e:	ee10 2a10 	vmov	r2, s0
 8013432:	462b      	mov	r3, r5
 8013434:	f7ed f8f0 	bl	8000618 <__aeabi_dmul>
 8013438:	4602      	mov	r2, r0
 801343a:	460b      	mov	r3, r1
 801343c:	4620      	mov	r0, r4
 801343e:	4629      	mov	r1, r5
 8013440:	f7ec ff34 	bl	80002ac <__adddf3>
 8013444:	4604      	mov	r4, r0
 8013446:	460d      	mov	r5, r1
 8013448:	ec45 4b10 	vmov	d0, r4, r5
 801344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013450:	2d00      	cmp	r5, #0
 8013452:	dc10      	bgt.n	8013476 <__ieee754_sqrt+0x62>
 8013454:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013458:	4330      	orrs	r0, r6
 801345a:	d0f5      	beq.n	8013448 <__ieee754_sqrt+0x34>
 801345c:	b15d      	cbz	r5, 8013476 <__ieee754_sqrt+0x62>
 801345e:	ee10 2a10 	vmov	r2, s0
 8013462:	462b      	mov	r3, r5
 8013464:	ee10 0a10 	vmov	r0, s0
 8013468:	f7ec ff1e 	bl	80002a8 <__aeabi_dsub>
 801346c:	4602      	mov	r2, r0
 801346e:	460b      	mov	r3, r1
 8013470:	f7ed f9fc 	bl	800086c <__aeabi_ddiv>
 8013474:	e7e6      	b.n	8013444 <__ieee754_sqrt+0x30>
 8013476:	1512      	asrs	r2, r2, #20
 8013478:	d074      	beq.n	8013564 <__ieee754_sqrt+0x150>
 801347a:	07d4      	lsls	r4, r2, #31
 801347c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013480:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013488:	bf5e      	ittt	pl
 801348a:	0fda      	lsrpl	r2, r3, #31
 801348c:	005b      	lslpl	r3, r3, #1
 801348e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013492:	2400      	movs	r4, #0
 8013494:	0fda      	lsrs	r2, r3, #31
 8013496:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801349a:	107f      	asrs	r7, r7, #1
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	2516      	movs	r5, #22
 80134a0:	4620      	mov	r0, r4
 80134a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80134a6:	1886      	adds	r6, r0, r2
 80134a8:	428e      	cmp	r6, r1
 80134aa:	bfde      	ittt	le
 80134ac:	1b89      	suble	r1, r1, r6
 80134ae:	18b0      	addle	r0, r6, r2
 80134b0:	18a4      	addle	r4, r4, r2
 80134b2:	0049      	lsls	r1, r1, #1
 80134b4:	3d01      	subs	r5, #1
 80134b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80134ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80134be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80134c2:	d1f0      	bne.n	80134a6 <__ieee754_sqrt+0x92>
 80134c4:	462a      	mov	r2, r5
 80134c6:	f04f 0e20 	mov.w	lr, #32
 80134ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80134ce:	4281      	cmp	r1, r0
 80134d0:	eb06 0c05 	add.w	ip, r6, r5
 80134d4:	dc02      	bgt.n	80134dc <__ieee754_sqrt+0xc8>
 80134d6:	d113      	bne.n	8013500 <__ieee754_sqrt+0xec>
 80134d8:	459c      	cmp	ip, r3
 80134da:	d811      	bhi.n	8013500 <__ieee754_sqrt+0xec>
 80134dc:	f1bc 0f00 	cmp.w	ip, #0
 80134e0:	eb0c 0506 	add.w	r5, ip, r6
 80134e4:	da43      	bge.n	801356e <__ieee754_sqrt+0x15a>
 80134e6:	2d00      	cmp	r5, #0
 80134e8:	db41      	blt.n	801356e <__ieee754_sqrt+0x15a>
 80134ea:	f100 0801 	add.w	r8, r0, #1
 80134ee:	1a09      	subs	r1, r1, r0
 80134f0:	459c      	cmp	ip, r3
 80134f2:	bf88      	it	hi
 80134f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80134f8:	eba3 030c 	sub.w	r3, r3, ip
 80134fc:	4432      	add	r2, r6
 80134fe:	4640      	mov	r0, r8
 8013500:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013504:	f1be 0e01 	subs.w	lr, lr, #1
 8013508:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801350c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013510:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013514:	d1db      	bne.n	80134ce <__ieee754_sqrt+0xba>
 8013516:	430b      	orrs	r3, r1
 8013518:	d006      	beq.n	8013528 <__ieee754_sqrt+0x114>
 801351a:	1c50      	adds	r0, r2, #1
 801351c:	bf13      	iteet	ne
 801351e:	3201      	addne	r2, #1
 8013520:	3401      	addeq	r4, #1
 8013522:	4672      	moveq	r2, lr
 8013524:	f022 0201 	bicne.w	r2, r2, #1
 8013528:	1063      	asrs	r3, r4, #1
 801352a:	0852      	lsrs	r2, r2, #1
 801352c:	07e1      	lsls	r1, r4, #31
 801352e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013532:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013536:	bf48      	it	mi
 8013538:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801353c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013540:	4614      	mov	r4, r2
 8013542:	e781      	b.n	8013448 <__ieee754_sqrt+0x34>
 8013544:	0ad9      	lsrs	r1, r3, #11
 8013546:	3815      	subs	r0, #21
 8013548:	055b      	lsls	r3, r3, #21
 801354a:	2900      	cmp	r1, #0
 801354c:	d0fa      	beq.n	8013544 <__ieee754_sqrt+0x130>
 801354e:	02cd      	lsls	r5, r1, #11
 8013550:	d50a      	bpl.n	8013568 <__ieee754_sqrt+0x154>
 8013552:	f1c2 0420 	rsb	r4, r2, #32
 8013556:	fa23 f404 	lsr.w	r4, r3, r4
 801355a:	1e55      	subs	r5, r2, #1
 801355c:	4093      	lsls	r3, r2
 801355e:	4321      	orrs	r1, r4
 8013560:	1b42      	subs	r2, r0, r5
 8013562:	e78a      	b.n	801347a <__ieee754_sqrt+0x66>
 8013564:	4610      	mov	r0, r2
 8013566:	e7f0      	b.n	801354a <__ieee754_sqrt+0x136>
 8013568:	0049      	lsls	r1, r1, #1
 801356a:	3201      	adds	r2, #1
 801356c:	e7ef      	b.n	801354e <__ieee754_sqrt+0x13a>
 801356e:	4680      	mov	r8, r0
 8013570:	e7bd      	b.n	80134ee <__ieee754_sqrt+0xda>
 8013572:	bf00      	nop
 8013574:	7ff00000 	.word	0x7ff00000

08013578 <with_errno>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	4604      	mov	r4, r0
 801357c:	460d      	mov	r5, r1
 801357e:	4616      	mov	r6, r2
 8013580:	f7fc fa6a 	bl	800fa58 <__errno>
 8013584:	4629      	mov	r1, r5
 8013586:	6006      	str	r6, [r0, #0]
 8013588:	4620      	mov	r0, r4
 801358a:	bd70      	pop	{r4, r5, r6, pc}

0801358c <xflow>:
 801358c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801358e:	4614      	mov	r4, r2
 8013590:	461d      	mov	r5, r3
 8013592:	b108      	cbz	r0, 8013598 <xflow+0xc>
 8013594:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013598:	e9cd 2300 	strd	r2, r3, [sp]
 801359c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135a0:	4620      	mov	r0, r4
 80135a2:	4629      	mov	r1, r5
 80135a4:	f7ed f838 	bl	8000618 <__aeabi_dmul>
 80135a8:	2222      	movs	r2, #34	; 0x22
 80135aa:	b003      	add	sp, #12
 80135ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b0:	f7ff bfe2 	b.w	8013578 <with_errno>

080135b4 <__math_uflow>:
 80135b4:	b508      	push	{r3, lr}
 80135b6:	2200      	movs	r2, #0
 80135b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80135bc:	f7ff ffe6 	bl	801358c <xflow>
 80135c0:	ec41 0b10 	vmov	d0, r0, r1
 80135c4:	bd08      	pop	{r3, pc}

080135c6 <__math_oflow>:
 80135c6:	b508      	push	{r3, lr}
 80135c8:	2200      	movs	r2, #0
 80135ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80135ce:	f7ff ffdd 	bl	801358c <xflow>
 80135d2:	ec41 0b10 	vmov	d0, r0, r1
 80135d6:	bd08      	pop	{r3, pc}

080135d8 <fabs>:
 80135d8:	ec51 0b10 	vmov	r0, r1, d0
 80135dc:	ee10 2a10 	vmov	r2, s0
 80135e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80135e4:	ec43 2b10 	vmov	d0, r2, r3
 80135e8:	4770      	bx	lr

080135ea <finite>:
 80135ea:	b082      	sub	sp, #8
 80135ec:	ed8d 0b00 	vstr	d0, [sp]
 80135f0:	9801      	ldr	r0, [sp, #4]
 80135f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80135f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80135fa:	0fc0      	lsrs	r0, r0, #31
 80135fc:	b002      	add	sp, #8
 80135fe:	4770      	bx	lr

08013600 <scalbn>:
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	ec55 4b10 	vmov	r4, r5, d0
 8013606:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801360a:	4606      	mov	r6, r0
 801360c:	462b      	mov	r3, r5
 801360e:	b99a      	cbnz	r2, 8013638 <scalbn+0x38>
 8013610:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013614:	4323      	orrs	r3, r4
 8013616:	d036      	beq.n	8013686 <scalbn+0x86>
 8013618:	4b39      	ldr	r3, [pc, #228]	; (8013700 <scalbn+0x100>)
 801361a:	4629      	mov	r1, r5
 801361c:	ee10 0a10 	vmov	r0, s0
 8013620:	2200      	movs	r2, #0
 8013622:	f7ec fff9 	bl	8000618 <__aeabi_dmul>
 8013626:	4b37      	ldr	r3, [pc, #220]	; (8013704 <scalbn+0x104>)
 8013628:	429e      	cmp	r6, r3
 801362a:	4604      	mov	r4, r0
 801362c:	460d      	mov	r5, r1
 801362e:	da10      	bge.n	8013652 <scalbn+0x52>
 8013630:	a32b      	add	r3, pc, #172	; (adr r3, 80136e0 <scalbn+0xe0>)
 8013632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013636:	e03a      	b.n	80136ae <scalbn+0xae>
 8013638:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801363c:	428a      	cmp	r2, r1
 801363e:	d10c      	bne.n	801365a <scalbn+0x5a>
 8013640:	ee10 2a10 	vmov	r2, s0
 8013644:	4620      	mov	r0, r4
 8013646:	4629      	mov	r1, r5
 8013648:	f7ec fe30 	bl	80002ac <__adddf3>
 801364c:	4604      	mov	r4, r0
 801364e:	460d      	mov	r5, r1
 8013650:	e019      	b.n	8013686 <scalbn+0x86>
 8013652:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013656:	460b      	mov	r3, r1
 8013658:	3a36      	subs	r2, #54	; 0x36
 801365a:	4432      	add	r2, r6
 801365c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013660:	428a      	cmp	r2, r1
 8013662:	dd08      	ble.n	8013676 <scalbn+0x76>
 8013664:	2d00      	cmp	r5, #0
 8013666:	a120      	add	r1, pc, #128	; (adr r1, 80136e8 <scalbn+0xe8>)
 8013668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801366c:	da1c      	bge.n	80136a8 <scalbn+0xa8>
 801366e:	a120      	add	r1, pc, #128	; (adr r1, 80136f0 <scalbn+0xf0>)
 8013670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013674:	e018      	b.n	80136a8 <scalbn+0xa8>
 8013676:	2a00      	cmp	r2, #0
 8013678:	dd08      	ble.n	801368c <scalbn+0x8c>
 801367a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801367e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013682:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013686:	ec45 4b10 	vmov	d0, r4, r5
 801368a:	bd70      	pop	{r4, r5, r6, pc}
 801368c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013690:	da19      	bge.n	80136c6 <scalbn+0xc6>
 8013692:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013696:	429e      	cmp	r6, r3
 8013698:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801369c:	dd0a      	ble.n	80136b4 <scalbn+0xb4>
 801369e:	a112      	add	r1, pc, #72	; (adr r1, 80136e8 <scalbn+0xe8>)
 80136a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1e2      	bne.n	801366e <scalbn+0x6e>
 80136a8:	a30f      	add	r3, pc, #60	; (adr r3, 80136e8 <scalbn+0xe8>)
 80136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ae:	f7ec ffb3 	bl	8000618 <__aeabi_dmul>
 80136b2:	e7cb      	b.n	801364c <scalbn+0x4c>
 80136b4:	a10a      	add	r1, pc, #40	; (adr r1, 80136e0 <scalbn+0xe0>)
 80136b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0b8      	beq.n	8013630 <scalbn+0x30>
 80136be:	a10e      	add	r1, pc, #56	; (adr r1, 80136f8 <scalbn+0xf8>)
 80136c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136c4:	e7b4      	b.n	8013630 <scalbn+0x30>
 80136c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136ca:	3236      	adds	r2, #54	; 0x36
 80136cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80136d4:	4620      	mov	r0, r4
 80136d6:	4b0c      	ldr	r3, [pc, #48]	; (8013708 <scalbn+0x108>)
 80136d8:	2200      	movs	r2, #0
 80136da:	e7e8      	b.n	80136ae <scalbn+0xae>
 80136dc:	f3af 8000 	nop.w
 80136e0:	c2f8f359 	.word	0xc2f8f359
 80136e4:	01a56e1f 	.word	0x01a56e1f
 80136e8:	8800759c 	.word	0x8800759c
 80136ec:	7e37e43c 	.word	0x7e37e43c
 80136f0:	8800759c 	.word	0x8800759c
 80136f4:	fe37e43c 	.word	0xfe37e43c
 80136f8:	c2f8f359 	.word	0xc2f8f359
 80136fc:	81a56e1f 	.word	0x81a56e1f
 8013700:	43500000 	.word	0x43500000
 8013704:	ffff3cb0 	.word	0xffff3cb0
 8013708:	3c900000 	.word	0x3c900000

0801370c <_init>:
 801370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370e:	bf00      	nop
 8013710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013712:	bc08      	pop	{r3}
 8013714:	469e      	mov	lr, r3
 8013716:	4770      	bx	lr

08013718 <_fini>:
 8013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371a:	bf00      	nop
 801371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801371e:	bc08      	pop	{r3}
 8013720:	469e      	mov	lr, r3
 8013722:	4770      	bx	lr
